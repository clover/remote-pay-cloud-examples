/******/ (function(modules) { // webpackBootstrap
/******/ 	// The module cache
/******/ 	var installedModules = {};

/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {

/******/ 		// Check if module is in cache
/******/ 		if(installedModules[moduleId])
/******/ 			return installedModules[moduleId].exports;

/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = installedModules[moduleId] = {
/******/ 			exports: {},
/******/ 			id: moduleId,
/******/ 			loaded: false
/******/ 		};

/******/ 		// Execute the module function
/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);

/******/ 		// Flag the module as loaded
/******/ 		module.loaded = true;

/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}


/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = modules;

/******/ 	// expose the module cache
/******/ 	__webpack_require__.c = installedModules;

/******/ 	// __webpack_public_path__
/******/ 	__webpack_require__.p = "";

/******/ 	// Load entry module and return exports
/******/ 	return __webpack_require__(0);
/******/ })
/************************************************************************/
/******/ ((function(modules) {
	// Check all modules for deduplicated modules
	for(var i in modules) {
		if(Object.prototype.hasOwnProperty.call(modules, i)) {
			switch(typeof modules[i]) {
			case "function": break;
			case "object":
				// Module can be created from a template
				modules[i] = (function(_m) {
					var args = _m.slice(1), fn = modules[_m[0]];
					return function (a,b,c) {
						fn.apply(this, [a,b,c].concat(args));
					};
				}(modules[i]));
				break;
			default:
				// Module is a copy of another module
				modules[i] = modules[modules[i]];
				break;
			}
		}
	}
	return modules;
}([
/* 0 */
/***/ (function(module, exports, __webpack_require__) {

	__webpack_require__(566);
	module.exports = __webpack_require__(506);


/***/ }),
/* 1 */
/***/ (function(module, exports, __webpack_require__) {

	var global = __webpack_require__(9);
	var core = __webpack_require__(43);
	var hide = __webpack_require__(31);
	var redefine = __webpack_require__(32);
	var ctx = __webpack_require__(44);
	var PROTOTYPE = 'prototype';

	var $export = function (type, name, source) {
	  var IS_FORCED = type & $export.F;
	  var IS_GLOBAL = type & $export.G;
	  var IS_STATIC = type & $export.S;
	  var IS_PROTO = type & $export.P;
	  var IS_BIND = type & $export.B;
	  var target = IS_GLOBAL ? global : IS_STATIC ? global[name] || (global[name] = {}) : (global[name] || {})[PROTOTYPE];
	  var exports = IS_GLOBAL ? core : core[name] || (core[name] = {});
	  var expProto = exports[PROTOTYPE] || (exports[PROTOTYPE] = {});
	  var key, own, out, exp;
	  if (IS_GLOBAL) source = name;
	  for (key in source) {
	    // contains in native
	    own = !IS_FORCED && target && target[key] !== undefined;
	    // export native or passed
	    out = (own ? target : source)[key];
	    // bind timers to global for call from export context
	    exp = IS_BIND && own ? ctx(out, global) : IS_PROTO && typeof out == 'function' ? ctx(Function.call, out) : out;
	    // extend global
	    if (target) redefine(target, key, out, type & $export.U);
	    // export
	    if (exports[key] != out) hide(exports, key, exp);
	    if (IS_PROTO && expProto[key] != out) expProto[key] = out;
	  }
	};
	global.core = core;
	// type bitmap
	$export.F = 1;   // forced
	$export.G = 2;   // global
	$export.S = 4;   // static
	$export.P = 8;   // proto
	$export.B = 16;  // bind
	$export.W = 32;  // wrap
	$export.U = 64;  // safe
	$export.R = 128; // real proto method for `library`
	module.exports = $export;


/***/ }),
/* 2 */
/***/ (function(module, exports, __webpack_require__) {

	/**
	 * Autogenerated by Avro
	 * 
	 * DO NOT EDIT DIRECTLY
	 */


	/**
	* @memberof remotemessage
	* @enum {string}
	*/
	var Method = {
	  ACK : "ACK",
	  ACTIVITY_MESSAGE_FROM_ACTIVITY : "ACTIVITY_MESSAGE_FROM_ACTIVITY",
	  ACTIVITY_MESSAGE_TO_ACTIVITY : "ACTIVITY_MESSAGE_TO_ACTIVITY",
	  ACTIVITY_REQUEST : "ACTIVITY_REQUEST",
	  EMPLOYEE_PERMISSIONS_REQUEST : "EMPLOYEE_PERMISSIONS_REQUEST",
	  ACTIVITY_RESPONSE : "ACTIVITY_RESPONSE",
	  BREAK : "BREAK",
	  CAPTURE_PREAUTH : "CAPTURE_PREAUTH",
	  CAPTURE_PREAUTH_RESPONSE : "CAPTURE_PREAUTH_RESPONSE",
	  CARD_DATA : "CARD_DATA",
	  CARD_DATA_RESPONSE : "CARD_DATA_RESPONSE",
	  CASHBACK_SELECTED : "CASHBACK_SELECTED",
	  CLEAR_SESSION : "CLEAR_SESSION",
	  CLOSEOUT_REQUEST : "CLOSEOUT_REQUEST",
	  CLOSEOUT_RESPONSE : "CLOSEOUT_RESPONSE",
	  CLOVER_DEVICE_LOG_REQUEST : "CLOVER_DEVICE_LOG_REQUEST",
	  CONFIGURATION_CHANGE : "CONFIGURATION_CHANGE",
	  CONFIRM_PAYMENT_MESSAGE : "CONFIRM_PAYMENT_MESSAGE",
	  CUSTOMER_INFO_MESSAGE : "CUSTOMER_INFO_MESSAGE",
	  DISCOVERY_REQUEST : "DISCOVERY_REQUEST",
	  DISCOVERY_RESPONSE : "DISCOVERY_RESPONSE",
	  FINISH_CANCEL : "FINISH_CANCEL",
	  FINISH_OK : "FINISH_OK",
	  FORCECONNECT : "FORCECONNECT",
	  GET_PRINTERS_REQUEST : "GET_PRINTERS_REQUEST",
	  GET_PRINTERS_RESPONSE : "GET_PRINTERS_RESPONSE",
	  INCREMENT_PREAUTH_REQUEST : "INCREMENT_PREAUTH_REQUEST",
	  INCREMENT_PREAUTH_RESPONSE : "INCREMENT_PREAUTH_RESPONSE",
	  INVALID_STATE_TRANSITION : "INVALID_STATE_TRANSITION",
	  KEY_PRESS : "KEY_PRESS",
	  LAST_MSG_REQUEST : "LAST_MSG_REQUEST",
	  LAST_MSG_RESPONSE : "LAST_MSG_RESPONSE",
	  LOG_MESSAGE : "LOG_MESSAGE",
	  OPEN_CASH_DRAWER : "OPEN_CASH_DRAWER",
	  ORDER_ACTION_ADD_DISCOUNT : "ORDER_ACTION_ADD_DISCOUNT",
	  ORDER_ACTION_ADD_LINE_ITEM : "ORDER_ACTION_ADD_LINE_ITEM",
	  ORDER_ACTION_REMOVE_DISCOUNT : "ORDER_ACTION_REMOVE_DISCOUNT",
	  ORDER_ACTION_REMOVE_LINE_ITEM : "ORDER_ACTION_REMOVE_LINE_ITEM",
	  ORDER_ACTION_RESPONSE : "ORDER_ACTION_RESPONSE",
	  PAIRING_CODE : "PAIRING_CODE",
	  PAIRING_REQUEST : "PAIRING_REQUEST",
	  PAIRING_RESPONSE : "PAIRING_RESPONSE",
	  PARTIAL_AUTH : "PARTIAL_AUTH",
	  PAYMENT_CONFIRMED : "PAYMENT_CONFIRMED",
	  PAYMENT_REJECTED : "PAYMENT_REJECTED",
	  PAYMENT_VOIDED : "PAYMENT_VOIDED",
	  PRINT_CREDIT : "PRINT_CREDIT",
	  PRINT_CREDIT_DECLINE : "PRINT_CREDIT_DECLINE",
	  PRINT_IMAGE : "PRINT_IMAGE",
	  PRINT_JOB_STATUS_REQUEST : "PRINT_JOB_STATUS_REQUEST",
	  PRINT_JOB_STATUS_RESPONSE : "PRINT_JOB_STATUS_RESPONSE",
	  PRINT_PAYMENT : "PRINT_PAYMENT",
	  PRINT_PAYMENT_DECLINE : "PRINT_PAYMENT_DECLINE",
	  PRINT_PAYMENT_MERCHANT_COPY : "PRINT_PAYMENT_MERCHANT_COPY",
	  PRINT_TEXT : "PRINT_TEXT",
	  REFUND_PRINT_PAYMENT : "REFUND_PRINT_PAYMENT",
	  REFUND_REQUEST : "REFUND_REQUEST",
	  REFUND_RESPONSE : "REFUND_RESPONSE",
	  REMOTE_ERROR : "REMOTE_ERROR",
	  RESET : "RESET",
	  RESET_DEVICE_RESPONSE : "RESET_DEVICE_RESPONSE",
	  RETRIEVE_CUSTOM_ACTIVITIES_REQUEST : "RETRIEVE_CUSTOM_ACTIVITIES_REQUEST",
	  RETRIEVE_CUSTOM_ACTIVITIES_RESPONSE : "RETRIEVE_CUSTOM_ACTIVITIES_RESPONSE",
	  RETRIEVE_DEVICE_STATUS_REQUEST : "RETRIEVE_DEVICE_STATUS_REQUEST",
	  RETRIEVE_DEVICE_STATUS_RESPONSE : "RETRIEVE_DEVICE_STATUS_RESPONSE",
	  RETRIEVE_PAYMENT_REQUEST : "RETRIEVE_PAYMENT_REQUEST",
	  RETRIEVE_PAYMENT_RESPONSE : "RETRIEVE_PAYMENT_RESPONSE",
	  RETRIEVE_PENDING_PAYMENTS : "RETRIEVE_PENDING_PAYMENTS",
	  RETRIEVE_PENDING_PAYMENTS_RESPONSE : "RETRIEVE_PENDING_PAYMENTS_RESPONSE",
	  SET_ORDER : "SET_ORDER",
	  SHOW_LOYALTY_POINTS_CALCULATED : "SHOW_LOYALTY_POINTS_CALCULATED",
	  SHOW_LOYALTY_POINTS_EARNED_SCREEN : "SHOW_LOYALTY_POINTS_EARNED_SCREEN",
	  SHOW_LOYALTY_POINTS_RECEIPT_PRINTED : "SHOW_LOYALTY_POINTS_RECEIPT_PRINTED",
	  SHOW_ORDER_SCREEN : "SHOW_ORDER_SCREEN",
	  SHOW_PAYMENT_RECEIPT_OPTIONS : "SHOW_PAYMENT_RECEIPT_OPTIONS",
	  SHOW_THANK_YOU_SCREEN : "SHOW_THANK_YOU_SCREEN",
	  SHOW_WELCOME_SCREEN : "SHOW_WELCOME_SCREEN",
	  SHUTDOWN : "SHUTDOWN",
	  SIGNATURE_VERIFIED : "SIGNATURE_VERIFIED",
	  START_VAS : "START_VAS",
	  STOP_VAS : "STOP_VAS",
	  TERMINAL_MESSAGE : "TERMINAL_MESSAGE",
	  TIP_ADDED : "TIP_ADDED",
	  TIP_ADJUST : "TIP_ADJUST",
	  TIP_ADJUST_RESPONSE : "TIP_ADJUST_RESPONSE",
	  TX_START : "TX_START",
	  TX_START_RESPONSE : "TX_START_RESPONSE",
	  TX_STATE : "TX_STATE",
	  UI_STATE : "UI_STATE",
	  VAS_CONFIG : "VAS_CONFIG",
	  VAS_CONFIG_CHANGED : "VAS_CONFIG_CHANGED",
	  VAS_PAYLOAD_MESSAGE : "VAS_PAYLOAD_MESSAGE",
	  VAS_STATE : "VAS_STATE",
	  VAULT_CARD : "VAULT_CARD",
	  VAULT_CARD_RESPONSE : "VAULT_CARD_RESPONSE",
	  VERIFY_SIGNATURE : "VERIFY_SIGNATURE",
	  VOID_PAYMENT : "VOID_PAYMENT",
	  VOID_PAYMENT_RESPONSE : "VOID_PAYMENT_RESPONSE",
	  VOID_PAYMENT_REFUND : "VOID_PAYMENT_REFUND",
	  VOID_PAYMENT_REFUND_RESPONSE : "VOID_PAYMENT_REFUND_RESPONSE",
	  VOID_CREDIT : "VOID_CREDIT",
	  VOID_CREDIT_RESPONSE : "VOID_CREDIT_RESPONSE",
	  REGISTER_FOR_CUST_DATA : "REGISTER_FOR_CUST_DATA",
	  CUSTOMER_PROVIDED_DATA_MESSAGE : "CUSTOMER_PROVIDED_DATA_MESSAGE",
	  LOYALTY_CONFIG : "LOYALTY_CONFIG",
	  SHOW_RECEIPT_OPTIONS : "SHOW_RECEIPT_OPTIONS",
	  SHOW_RECEIPT_OPTIONS_RESPONSE : "SHOW_RECEIPT_OPTIONS_RESPONSE",
	  REQUEST_SIGNATURE : "REQUEST_SIGNATURE",
	  REQUEST_SIGNATURE_RESPONSE : "REQUEST_SIGNATURE_RESPONSE",
	  BALANCE_INQUIRY : "BALANCE_INQUIRY",
	  BALANCE_INQUIRY_RESPONSE : "BALANCE_INQUIRY_RESPONSE",
	  REQUEST_TIP : "REQUEST_TIP",
	  REQUEST_TIP_RESPONSE : "REQUEST_TIP_RESPONSE",
	  CARD_DETAILS : "CARD_DETAILS",
	  CARD_DETAILS_RESPONSE : "CARD_DETAILS_RESPONSE"
	};


	//
	// Expose the module.
	//
	if (true) {
	module.exports = Method;
	}



/***/ }),
/* 3 */
/***/ (function(module, exports, __webpack_require__) {

	/**
	 * Autogenerated by Avro
	 * 
	 * DO NOT EDIT DIRECTLY
	 */

	var remotemessage_Method = __webpack_require__(2);

	/**
	* @constructor
	* @memberof remotemessage
	*/
	var Message = function() {
	  this._class_ = Message;
	  this.method = undefined;
	  this.messageId = undefined;
	  this.sourceMessageId = undefined;
	  this.version = 0;
	};


	/**
	* Set the field value
	* The list of message types
	*
	* @memberof remotemessage.Message
	* @param {remotemessage.Method} method 
	*/
	Message.prototype.setMethod = function(method) {
	  this.method = method;
	};

	/**
	* Get the field value
	* The list of message types
	* @memberof remotemessage.Message
	* @return {remotemessage.Method} 
	*/
	Message.prototype.getMethod = function() {
	  return this.method;
	};

	/**
	* Set the field value
	* The business message id for this message.  This can be used to set the 'sourceMessageId' for meesages that are 'caused' by this message.  This may be null.
	*
	* @memberof remotemessage.Message
	* @param {String} messageId 
	*/
	Message.prototype.setMessageId = function(messageId) {
	  this.messageId = messageId;
	};

	/**
	* Get the field value
	* The business message id for this message.  This can be used to set the 'sourceMessageId' for meesages that are 'caused' by this message.  This may be null.
	* @memberof remotemessage.Message
	* @return {String} 
	*/
	Message.prototype.getMessageId = function() {
	  return this.messageId;
	};

	/**
	* Set the field value
	* The remote message id that 'caused' this message to be sent.  This may not be set.
	*
	* @memberof remotemessage.Message
	* @param {String} sourceMessageId 
	*/
	Message.prototype.setSourceMessageId = function(sourceMessageId) {
	  this.sourceMessageId = sourceMessageId;
	};

	/**
	* Get the field value
	* The remote message id that 'caused' this message to be sent.  This may not be set.
	* @memberof remotemessage.Message
	* @return {String} 
	*/
	Message.prototype.getSourceMessageId = function() {
	  return this.sourceMessageId;
	};

	/**
	* Set the field value
	* The version of this message
	*
	* @memberof remotemessage.Message
	* @param {Number|Null} version must be an integer, 
	*/
	Message.prototype.setVersion = function(version) {
	  this.version = version;
	};

	/**
	* Get the field value
	* The version of this message
	* @memberof remotemessage.Message
	* @return {Number|Null} must be an integer, 
	*/
	Message.prototype.getVersion = function() {
	  return this.version;
	};

	/**
	* @memberof remotemessage.Message
	* @private
	*/
	Message.prototype.getMetaInfo = function(fieldName) {
	  var curclass = this._class_;
	  do {
	    var fieldMetaInfo = curclass._meta_.fields[fieldName];
	    if(fieldMetaInfo) {
	      return fieldMetaInfo;
	    }
	    if(curclass._meta_._superMeta_) {
	      curclass = curclass._meta_._superMeta_._class_;
	    } else {
	      curclass = null;
	    }
	  } while(curclass);
	  return null;
	};

	Message.prototype.toString = function() {
	  return JSON.stringify(this);
	};

	Message._meta_ =  {fields:  {}};
	Message._meta_._class_ =  Message;
	Message._meta_.fields["method"] = {};
	Message._meta_.fields["method"].type = remotemessage_Method;
	Message._meta_.fields["messageId"] = {};
	Message._meta_.fields["messageId"].type = String;
	Message._meta_.fields["sourceMessageId"] = {};
	Message._meta_.fields["sourceMessageId"].type = String;
	Message._meta_.fields["version"] = {};
	Message._meta_.fields["version"].type = Number;

	//
	// Expose the module.
	//
	if (true) {
	module.exports = Message;
	}



/***/ }),
/* 4 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';

	module.exports = __webpack_require__(98);


/***/ }),
/* 5 */
/***/ (function(module, exports, __webpack_require__) {

	/**
	 * Autogenerated by Avro
	 * 
	 * DO NOT EDIT DIRECTLY
	 */


	/**
	* @constructor
	* @memberof base
	*/
	var Reference = function() {
	  this._class_ = Reference;
	  this.id = undefined;
	};


	/**
	* Set the field value
	* Unique identifier
	*
	* @memberof base.Reference
	* @param {String} id 
	*/
	Reference.prototype.setId = function(id) {
	  this.id = id;
	};

	/**
	* Get the field value
	* Unique identifier
	* @memberof base.Reference
	* @return {String} 
	*/
	Reference.prototype.getId = function() {
	  return this.id;
	};

	/**
	* @memberof base.Reference
	* @private
	*/
	Reference.prototype.getMetaInfo = function(fieldName) {
	  var curclass = this._class_;
	  do {
	    var fieldMetaInfo = curclass._meta_.fields[fieldName];
	    if(fieldMetaInfo) {
	      return fieldMetaInfo;
	    }
	    if(curclass._meta_._superMeta_) {
	      curclass = curclass._meta_._superMeta_._class_;
	    } else {
	      curclass = null;
	    }
	  } while(curclass);
	  return null;
	};

	Reference.prototype.toString = function() {
	  return JSON.stringify(this);
	};

	Reference._meta_ =  {fields:  {}};
	Reference._meta_._class_ =  Reference;
	Reference._meta_.fields["id"] = {};
	Reference._meta_.fields["id"].type = String;

	//
	// Expose the module.
	//
	if (true) {
	module.exports = Reference;
	}



/***/ }),
/* 6 */
/***/ (function(module, exports, __webpack_require__) {

	var isObject = __webpack_require__(12);
	module.exports = function (it) {
	  if (!isObject(it)) throw TypeError(it + ' is not an object!');
	  return it;
	};


/***/ }),
/* 7 */
/***/ (function(module, exports, __webpack_require__) {

	/**
	 * Copyright (c) 2013-present, Facebook, Inc.
	 *
	 * This source code is licensed under the MIT license found in the
	 * LICENSE file in the root directory of this source tree.
	 *
	 */

	'use strict';

	/**
	 * Use invariant() to assert state which your program assumes to be true.
	 *
	 * Provide sprintf-style format (only %s is supported) and arguments
	 * to provide information about what broke and what you were
	 * expecting.
	 *
	 * The invariant message will be stripped in production, but the invariant
	 * will remain to ensure logic does not differ in production.
	 */

	var validateFormat = function validateFormat(format) {};

	if ((undefined) !== 'production') {
	  validateFormat = function validateFormat(format) {
	    if (format === undefined) {
	      throw new Error('invariant requires an error message argument');
	    }
	  };
	}

	function invariant(condition, format, a, b, c, d, e, f) {
	  validateFormat(format);

	  if (!condition) {
	    var error;
	    if (format === undefined) {
	      error = new Error('Minified exception occurred; use the non-minified dev environment ' + 'for the full error message and additional helpful warnings.');
	    } else {
	      var args = [a, b, c, d, e, f];
	      var argIndex = 0;
	      error = new Error(format.replace(/%s/g, function () {
	        return args[argIndex++];
	      }));
	      error.name = 'Invariant Violation';
	    }

	    error.framesToPop = 1; // we don't care about invariant's own frame
	    throw error;
	  }
	}

	module.exports = invariant;

/***/ }),
/* 8 */
/***/ (function(module, exports, __webpack_require__) {

	/**
	 * Copyright (c) 2014-present, Facebook, Inc.
	 *
	 * This source code is licensed under the MIT license found in the
	 * LICENSE file in the root directory of this source tree.
	 *
	 */

	'use strict';

	var emptyFunction = __webpack_require__(53);

	/**
	 * Similar to invariant but only logs a warning if the condition is not met.
	 * This can be used to log issues in development environments in critical
	 * paths. Removing the logging code for production environments will keep the
	 * same logic and follow the same code paths.
	 */

	var warning = emptyFunction;

	if ((undefined) !== 'production') {
	  var printWarning = function printWarning(format) {
	    for (var _len = arguments.length, args = Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
	      args[_key - 1] = arguments[_key];
	    }

	    var argIndex = 0;
	    var message = 'Warning: ' + format.replace(/%s/g, function () {
	      return args[argIndex++];
	    });
	    if (typeof console !== 'undefined') {
	      console.error(message);
	    }
	    try {
	      // --- Welcome to debugging React ---
	      // This error was thrown as a convenience so that you can use this stack
	      // to find the callsite that caused this warning to fire.
	      throw new Error(message);
	    } catch (x) {}
	  };

	  warning = function warning(condition, format) {
	    if (format === undefined) {
	      throw new Error('`warning(condition, format, ...args)` requires a warning ' + 'message argument');
	    }

	    if (format.indexOf('Failed Composite propType: ') === 0) {
	      return; // Ignore CompositeComponent proptype check.
	    }

	    if (!condition) {
	      for (var _len2 = arguments.length, args = Array(_len2 > 2 ? _len2 - 2 : 0), _key2 = 2; _key2 < _len2; _key2++) {
	        args[_key2 - 2] = arguments[_key2];
	      }

	      printWarning.apply(undefined, [format].concat(args));
	    }
	  };
	}

	module.exports = warning;

/***/ }),
/* 9 */
/***/ (function(module, exports) {

	// https://github.com/zloirock/core-js/issues/86#issuecomment-115759028
	var global = module.exports = typeof window != 'undefined' && window.Math == Math
	  ? window : typeof self != 'undefined' && self.Math == Math ? self
	  // eslint-disable-next-line no-new-func
	  : Function('return this')();
	if (typeof __g == 'number') __g = global; // eslint-disable-line no-undef


/***/ }),
/* 10 */
/***/ (function(module, exports) {

	module.exports = function (exec) {
	  try {
	    return !!exec();
	  } catch (e) {
	    return true;
	  }
	};


/***/ }),
/* 11 */
/***/ (function(module, exports, __webpack_require__) {

	/**
	 * Autogenerated by Avro
	 * 
	 * DO NOT EDIT DIRECTLY
	 */

	var payments_Result = __webpack_require__(120);
	var payments_AdditionalChargeAmount = __webpack_require__(245);
	var payments_ServiceChargeAmount = __webpack_require__(121);
	var payments_PaymentTaxRate = __webpack_require__(452);
	var payments_DCCInfo = __webpack_require__(250);
	var payments_CashAdvanceExtra = __webpack_require__(440);
	var payments_Refund = __webpack_require__(26);
	var payments_GermanInfo = __webpack_require__(103);
	var payments_CardTransaction = __webpack_require__(102);
	var payments_LineItemPayment = __webpack_require__(163);
	var order_VoidReason = __webpack_require__(87);
	var payments_IncrementalAuthorization = __webpack_require__(451);
	var apps_AppTracking = __webpack_require__(100);
	var payments_TransactionInfo = __webpack_require__(104);
	var base_Reference = __webpack_require__(5);
	var base_Tender = __webpack_require__(116);
	var payments_TransactionSettings = __webpack_require__(164);
	var payments_SignatureDisclaimer = __webpack_require__(457);

	/**
	* @constructor
	* @memberof payments
	*/
	var Payment = function() {
	  this._class_ = Payment;
	  this.id = undefined;
	  this.order = undefined;
	  this.device = undefined;
	  this.tender = undefined;
	  this.amount = undefined;
	  this.tipAmount = undefined;
	  this.taxAmount = undefined;
	  this.cashbackAmount = undefined;
	  this.cashTendered = undefined;
	  this.externalPaymentId = undefined;
	  this.employee = undefined;
	  this.createdTime = undefined;
	  this.clientCreatedTime = undefined;
	  this.modifiedTime = undefined;
	  this.offline = false;
	  this.result = undefined;
	  this.cardTransaction = undefined;
	  this.serviceCharge = undefined;
	  this.attributes = undefined;
	  this.additionalCharges = undefined;
	  this.taxRates = undefined;
	  this.refunds = undefined;
	  this.note = undefined;
	  this.lineItemPayments = undefined;
	  this.authorization = undefined;
	  this.voidPaymentRef = undefined;
	  this.voidReason = undefined;
	  this.dccInfo = undefined;
	  this.transactionSettings = undefined;
	  this.germanInfo = undefined;
	  this.appTracking = undefined;
	  this.cashAdvanceExtra = undefined;
	  this.transactionInfo = undefined;
	  this.signatureDisclaimer = undefined;
	  this.externalReferenceId = undefined;
	  this.merchant = undefined;
	  this.increments = undefined;
	};


	/**
	* Set the field value
	* Unique identifier
	*
	* @memberof payments.Payment
	* @param {String} id 
	*/
	Payment.prototype.setId = function(id) {
	  this.id = id;
	};

	/**
	* Get the field value
	* Unique identifier
	* @memberof payments.Payment
	* @return {String} 
	*/
	Payment.prototype.getId = function() {
	  return this.id;
	};

	/**
	* Set the field value
	* The order with which the payment is associated
	*
	* @memberof payments.Payment
	* @param {base.Reference} order 
	*/
	Payment.prototype.setOrder = function(order) {
	  this.order = order;
	};

	/**
	* Get the field value
	* The order with which the payment is associated
	* @memberof payments.Payment
	* @return {base.Reference} 
	*/
	Payment.prototype.getOrder = function() {
	  return this.order;
	};

	/**
	* Set the field value
	* Device which processed the transaction for this payment, a 128-bit UUID, not a normal base-13 Clover ID.
	*
	* @memberof payments.Payment
	* @param {base.Reference|Null} device 
	*/
	Payment.prototype.setDevice = function(device) {
	  this.device = device;
	};

	/**
	* Get the field value
	* Device which processed the transaction for this payment, a 128-bit UUID, not a normal base-13 Clover ID.
	* @memberof payments.Payment
	* @return {base.Reference|Null} 
	*/
	Payment.prototype.getDevice = function() {
	  return this.device;
	};

	/**
	* Set the field value
	* The tender type associated with this payment, e.g. credit card, cash, etc.
	*
	* @memberof payments.Payment
	* @param {base.Tender} tender 
	*/
	Payment.prototype.setTender = function(tender) {
	  this.tender = tender;
	};

	/**
	* Get the field value
	* The tender type associated with this payment, e.g. credit card, cash, etc.
	* @memberof payments.Payment
	* @return {base.Tender} 
	*/
	Payment.prototype.getTender = function() {
	  return this.tender;
	};

	/**
	* Set the field value
	* Total amount paid
	*
	* @memberof payments.Payment
	* @param {Number} amount must be a long integer
	*/
	Payment.prototype.setAmount = function(amount) {
	  this.amount = amount;
	};

	/**
	* Get the field value
	* Total amount paid
	* @memberof payments.Payment
	* @return {Number} must be a long integer
	*/
	Payment.prototype.getAmount = function() {
	  return this.amount;
	};

	/**
	* Set the field value
	* Amount paid in tips
	*
	* @memberof payments.Payment
	* @param {Number|Null} tipAmount must be a long integer, 
	*/
	Payment.prototype.setTipAmount = function(tipAmount) {
	  this.tipAmount = tipAmount;
	};

	/**
	* Get the field value
	* Amount paid in tips
	* @memberof payments.Payment
	* @return {Number|Null} must be a long integer, 
	*/
	Payment.prototype.getTipAmount = function() {
	  return this.tipAmount;
	};

	/**
	* Set the field value
	* Amount paid in tax
	*
	* @memberof payments.Payment
	* @param {Number|Null} taxAmount must be a long integer, 
	*/
	Payment.prototype.setTaxAmount = function(taxAmount) {
	  this.taxAmount = taxAmount;
	};

	/**
	* Get the field value
	* Amount paid in tax
	* @memberof payments.Payment
	* @return {Number|Null} must be a long integer, 
	*/
	Payment.prototype.getTaxAmount = function() {
	  return this.taxAmount;
	};

	/**
	* Set the field value
	* Amount given back in a cash back transaction
	*
	* @memberof payments.Payment
	* @param {Number|Null} cashbackAmount must be a long integer, 
	*/
	Payment.prototype.setCashbackAmount = function(cashbackAmount) {
	  this.cashbackAmount = cashbackAmount;
	};

	/**
	* Get the field value
	* Amount given back in a cash back transaction
	* @memberof payments.Payment
	* @return {Number|Null} must be a long integer, 
	*/
	Payment.prototype.getCashbackAmount = function() {
	  return this.cashbackAmount;
	};

	/**
	* Set the field value
	* Amount of cash given by the customer
	*
	* @memberof payments.Payment
	* @param {Number|Null} cashTendered must be a long integer, 
	*/
	Payment.prototype.setCashTendered = function(cashTendered) {
	  this.cashTendered = cashTendered;
	};

	/**
	* Get the field value
	* Amount of cash given by the customer
	* @memberof payments.Payment
	* @return {Number|Null} must be a long integer, 
	*/
	Payment.prototype.getCashTendered = function() {
	  return this.cashTendered;
	};

	/**
	* Set the field value
	* @memberof payments.Payment
	* @param {String} externalPaymentId 
	*/
	Payment.prototype.setExternalPaymentId = function(externalPaymentId) {
	  this.externalPaymentId = externalPaymentId;
	};

	/**
	* Get the field value
	* @memberof payments.Payment
	* @return {String} 
	*/
	Payment.prototype.getExternalPaymentId = function() {
	  return this.externalPaymentId;
	};

	/**
	* Set the field value
	* The employee who processed the payment
	*
	* @memberof payments.Payment
	* @param {base.Reference} employee 
	*/
	Payment.prototype.setEmployee = function(employee) {
	  this.employee = employee;
	};

	/**
	* Get the field value
	* The employee who processed the payment
	* @memberof payments.Payment
	* @return {base.Reference} 
	*/
	Payment.prototype.getEmployee = function() {
	  return this.employee;
	};

	/**
	* Set the field value
	* Time payment was recorded on server
	*
	* @memberof payments.Payment
	* @param {Number} createdTime must be a long integer
	*/
	Payment.prototype.setCreatedTime = function(createdTime) {
	  this.createdTime = createdTime;
	};

	/**
	* Get the field value
	* Time payment was recorded on server
	* @memberof payments.Payment
	* @return {Number} must be a long integer
	*/
	Payment.prototype.getCreatedTime = function() {
	  return this.createdTime;
	};

	/**
	* Set the field value
	* @memberof payments.Payment
	* @param {Number} clientCreatedTime must be a long integer
	*/
	Payment.prototype.setClientCreatedTime = function(clientCreatedTime) {
	  this.clientCreatedTime = clientCreatedTime;
	};

	/**
	* Get the field value
	* @memberof payments.Payment
	* @return {Number} must be a long integer
	*/
	Payment.prototype.getClientCreatedTime = function() {
	  return this.clientCreatedTime;
	};

	/**
	* Set the field value
	* Last modified time of the payment
	*
	* @memberof payments.Payment
	* @param {Number} modifiedTime must be a long integer
	*/
	Payment.prototype.setModifiedTime = function(modifiedTime) {
	  this.modifiedTime = modifiedTime;
	};

	/**
	* Get the field value
	* Last modified time of the payment
	* @memberof payments.Payment
	* @return {Number} must be a long integer
	*/
	Payment.prototype.getModifiedTime = function() {
	  return this.modifiedTime;
	};

	/**
	* Set the field value
	* @memberof payments.Payment
	* @param {Boolean} offline 
	*/
	Payment.prototype.setOffline = function(offline) {
	  this.offline = offline;
	};

	/**
	* Get the field value
	* @memberof payments.Payment
	* @return {Boolean} 
	*/
	Payment.prototype.getOffline = function() {
	  return this.offline;
	};

	/**
	* Set the field value
	* @memberof payments.Payment
	* @param {payments.Result} result 
	*/
	Payment.prototype.setResult = function(result) {
	  this.result = result;
	};

	/**
	* Get the field value
	* @memberof payments.Payment
	* @return {payments.Result} 
	*/
	Payment.prototype.getResult = function() {
	  return this.result;
	};

	/**
	* Set the field value
	* Information about the card used for credit/debit card payments
	*
	* @memberof payments.Payment
	* @param {payments.CardTransaction} cardTransaction 
	*/
	Payment.prototype.setCardTransaction = function(cardTransaction) {
	  this.cardTransaction = cardTransaction;
	};

	/**
	* Get the field value
	* Information about the card used for credit/debit card payments
	* @memberof payments.Payment
	* @return {payments.CardTransaction} 
	*/
	Payment.prototype.getCardTransaction = function() {
	  return this.cardTransaction;
	};

	/**
	* Set the field value
	* Amount record as a service charge
	*
	* @memberof payments.Payment
	* @param {payments.ServiceChargeAmount} serviceCharge 
	*/
	Payment.prototype.setServiceCharge = function(serviceCharge) {
	  this.serviceCharge = serviceCharge;
	};

	/**
	* Get the field value
	* Amount record as a service charge
	* @memberof payments.Payment
	* @return {payments.ServiceChargeAmount} 
	*/
	Payment.prototype.getServiceCharge = function() {
	  return this.serviceCharge;
	};

	/**
	* Set the field value
	* @memberof payments.Payment
	* @param {Object.<String,String>} attributes A map of <String> to <>
	*/
	Payment.prototype.setAttributes = function(attributes) {
	  this.attributes = attributes;
	};

	/**
	* Get the field value
	* @memberof payments.Payment
	* @return {Object.<String,String>} A map of <String> to <>
	*/
	Payment.prototype.getAttributes = function() {
	  return this.attributes;
	};

	/**
	* Set the field value
	* @memberof payments.Payment
	* @param {Array.<payments.AdditionalChargeAmount>} additionalCharges An array of 
	*/
	Payment.prototype.setAdditionalCharges = function(additionalCharges) {
	  this.additionalCharges = additionalCharges;
	};

	/**
	* Get the field value
	* @memberof payments.Payment
	* @return {Array.<payments.AdditionalChargeAmount>} An array of 
	*/
	Payment.prototype.getAdditionalCharges = function() {
	  return this.additionalCharges;
	};

	/**
	* Set the field value
	* @memberof payments.Payment
	* @param {Array.<payments.PaymentTaxRate>} taxRates An array of 
	*/
	Payment.prototype.setTaxRates = function(taxRates) {
	  this.taxRates = taxRates;
	};

	/**
	* Get the field value
	* @memberof payments.Payment
	* @return {Array.<payments.PaymentTaxRate>} An array of 
	*/
	Payment.prototype.getTaxRates = function() {
	  return this.taxRates;
	};

	/**
	* Set the field value
	* @memberof payments.Payment
	* @param {Array.<payments.Refund>} refunds An array of 
	*/
	Payment.prototype.setRefunds = function(refunds) {
	  this.refunds = refunds;
	};

	/**
	* Get the field value
	* @memberof payments.Payment
	* @return {Array.<payments.Refund>} An array of 
	*/
	Payment.prototype.getRefunds = function() {
	  return this.refunds;
	};

	/**
	* Set the field value
	* @memberof payments.Payment
	* @param {String} note 
	*/
	Payment.prototype.setNote = function(note) {
	  this.note = note;
	};

	/**
	* Get the field value
	* @memberof payments.Payment
	* @return {String} 
	*/
	Payment.prototype.getNote = function() {
	  return this.note;
	};

	/**
	* Set the field value
	* @memberof payments.Payment
	* @param {Array.<payments.LineItemPayment>} lineItemPayments An array of 
	*/
	Payment.prototype.setLineItemPayments = function(lineItemPayments) {
	  this.lineItemPayments = lineItemPayments;
	};

	/**
	* Get the field value
	* @memberof payments.Payment
	* @return {Array.<payments.LineItemPayment>} An array of 
	*/
	Payment.prototype.getLineItemPayments = function() {
	  return this.lineItemPayments;
	};

	/**
	* Set the field value
	* Authorization which this payment is associated to (opening or closing payment) if one exists
	*
	* @memberof payments.Payment
	* @param {base.Reference} authorization 
	*/
	Payment.prototype.setAuthorization = function(authorization) {
	  this.authorization = authorization;
	};

	/**
	* Get the field value
	* Authorization which this payment is associated to (opening or closing payment) if one exists
	* @memberof payments.Payment
	* @return {base.Reference} 
	*/
	Payment.prototype.getAuthorization = function() {
	  return this.authorization;
	};

	/**
	* Set the field value
	* If voided, the corresponding successful payment, and vice versa
	*
	* @memberof payments.Payment
	* @param {base.Reference} voidPaymentRef 
	*/
	Payment.prototype.setVoidPaymentRef = function(voidPaymentRef) {
	  this.voidPaymentRef = voidPaymentRef;
	};

	/**
	* Get the field value
	* If voided, the corresponding successful payment, and vice versa
	* @memberof payments.Payment
	* @return {base.Reference} 
	*/
	Payment.prototype.getVoidPaymentRef = function() {
	  return this.voidPaymentRef;
	};

	/**
	* Set the field value
	* If voided, the reason why (when available)
	*
	* @memberof payments.Payment
	* @param {order.VoidReason} voidReason 
	*/
	Payment.prototype.setVoidReason = function(voidReason) {
	  this.voidReason = voidReason;
	};

	/**
	* Get the field value
	* If voided, the reason why (when available)
	* @memberof payments.Payment
	* @return {order.VoidReason} 
	*/
	Payment.prototype.getVoidReason = function() {
	  return this.voidReason;
	};

	/**
	* Set the field value
	* Dynamic Currency Conversion information
	*
	* @memberof payments.Payment
	* @param {payments.DCCInfo|Null} dccInfo 
	*/
	Payment.prototype.setDccInfo = function(dccInfo) {
	  this.dccInfo = dccInfo;
	};

	/**
	* Get the field value
	* Dynamic Currency Conversion information
	* @memberof payments.Payment
	* @return {payments.DCCInfo|Null} 
	*/
	Payment.prototype.getDccInfo = function() {
	  return this.dccInfo;
	};

	/**
	* Set the field value
	* Per transaction settings for the payment
	*
	* @memberof payments.Payment
	* @param {payments.TransactionSettings} transactionSettings 
	*/
	Payment.prototype.setTransactionSettings = function(transactionSettings) {
	  this.transactionSettings = transactionSettings;
	};

	/**
	* Get the field value
	* Per transaction settings for the payment
	* @memberof payments.Payment
	* @return {payments.TransactionSettings} 
	*/
	Payment.prototype.getTransactionSettings = function() {
	  return this.transactionSettings;
	};

	/**
	* Set the field value
	* German region-specific information
	*
	* @memberof payments.Payment
	* @param {payments.GermanInfo|Null} germanInfo 
	*/
	Payment.prototype.setGermanInfo = function(germanInfo) {
	  this.germanInfo = germanInfo;
	};

	/**
	* Get the field value
	* German region-specific information
	* @memberof payments.Payment
	* @return {payments.GermanInfo|Null} 
	*/
	Payment.prototype.getGermanInfo = function() {
	  return this.germanInfo;
	};

	/**
	* Set the field value
	* Tracking information for the app that created this payment.
	*
	* @memberof payments.Payment
	* @param {apps.AppTracking|Null} appTracking 
	*/
	Payment.prototype.setAppTracking = function(appTracking) {
	  this.appTracking = appTracking;
	};

	/**
	* Get the field value
	* Tracking information for the app that created this payment.
	* @memberof payments.Payment
	* @return {apps.AppTracking|Null} 
	*/
	Payment.prototype.getAppTracking = function() {
	  return this.appTracking;
	};

	/**
	* Set the field value
	* Information specific to cash advance transactions.
	*
	* @memberof payments.Payment
	* @param {payments.CashAdvanceExtra|Null} cashAdvanceExtra 
	*/
	Payment.prototype.setCashAdvanceExtra = function(cashAdvanceExtra) {
	  this.cashAdvanceExtra = cashAdvanceExtra;
	};

	/**
	* Get the field value
	* Information specific to cash advance transactions.
	* @memberof payments.Payment
	* @return {payments.CashAdvanceExtra|Null} 
	*/
	Payment.prototype.getCashAdvanceExtra = function() {
	  return this.cashAdvanceExtra;
	};

	/**
	* Set the field value
	* Transaction information
	*
	* @memberof payments.Payment
	* @param {payments.TransactionInfo|Null} transactionInfo 
	*/
	Payment.prototype.setTransactionInfo = function(transactionInfo) {
	  this.transactionInfo = transactionInfo;
	};

	/**
	* Get the field value
	* Transaction information
	* @memberof payments.Payment
	* @return {payments.TransactionInfo|Null} 
	*/
	Payment.prototype.getTransactionInfo = function() {
	  return this.transactionInfo;
	};

	/**
	* Set the field value
	* Information displayed to customer for storing electronic signatures
	*
	* @memberof payments.Payment
	* @param {payments.SignatureDisclaimer|Null} signatureDisclaimer 
	*/
	Payment.prototype.setSignatureDisclaimer = function(signatureDisclaimer) {
	  this.signatureDisclaimer = signatureDisclaimer;
	};

	/**
	* Get the field value
	* Information displayed to customer for storing electronic signatures
	* @memberof payments.Payment
	* @return {payments.SignatureDisclaimer|Null} 
	*/
	Payment.prototype.getSignatureDisclaimer = function() {
	  return this.signatureDisclaimer;
	};

	/**
	* Set the field value
	* The external reference id if associated with the payment
	*
	* @memberof payments.Payment
	* @param {String|Null} externalReferenceId 
	*/
	Payment.prototype.setExternalReferenceId = function(externalReferenceId) {
	  this.externalReferenceId = externalReferenceId;
	};

	/**
	* Get the field value
	* The external reference id if associated with the payment
	* @memberof payments.Payment
	* @return {String|Null} 
	*/
	Payment.prototype.getExternalReferenceId = function() {
	  return this.externalReferenceId;
	};

	/**
	* Set the field value
	* @memberof payments.Payment
	* @param {base.Reference} merchant 
	*/
	Payment.prototype.setMerchant = function(merchant) {
	  this.merchant = merchant;
	};

	/**
	* Get the field value
	* @memberof payments.Payment
	* @return {base.Reference} 
	*/
	Payment.prototype.getMerchant = function() {
	  return this.merchant;
	};

	/**
	* Set the field value
	* @memberof payments.Payment
	* @param {Array.<payments.IncrementalAuthorization>} increments An array of 
	*/
	Payment.prototype.setIncrements = function(increments) {
	  this.increments = increments;
	};

	/**
	* Get the field value
	* @memberof payments.Payment
	* @return {Array.<payments.IncrementalAuthorization>} An array of 
	*/
	Payment.prototype.getIncrements = function() {
	  return this.increments;
	};

	/**
	* @memberof payments.Payment
	* @private
	*/
	Payment.prototype.getMetaInfo = function(fieldName) {
	  var curclass = this._class_;
	  do {
	    var fieldMetaInfo = curclass._meta_.fields[fieldName];
	    if(fieldMetaInfo) {
	      return fieldMetaInfo;
	    }
	    if(curclass._meta_._superMeta_) {
	      curclass = curclass._meta_._superMeta_._class_;
	    } else {
	      curclass = null;
	    }
	  } while(curclass);
	  return null;
	};

	Payment.prototype.toString = function() {
	  return JSON.stringify(this);
	};

	Payment._meta_ =  {fields:  {}};
	Payment._meta_._class_ =  Payment;
	Payment._meta_.fields["id"] = {};
	Payment._meta_.fields["id"].type = String;
	Payment._meta_.fields["order"] = {};
	Payment._meta_.fields["order"].type = base_Reference;
	Payment._meta_.fields["device"] = {};
	Payment._meta_.fields["device"].type = base_Reference;
	Payment._meta_.fields["tender"] = {};
	Payment._meta_.fields["tender"].type = base_Tender;
	Payment._meta_.fields["amount"] = {};
	Payment._meta_.fields["amount"].type = Number;
	Payment._meta_.fields["tipAmount"] = {};
	Payment._meta_.fields["tipAmount"].type = Number;
	Payment._meta_.fields["taxAmount"] = {};
	Payment._meta_.fields["taxAmount"].type = Number;
	Payment._meta_.fields["cashbackAmount"] = {};
	Payment._meta_.fields["cashbackAmount"].type = Number;
	Payment._meta_.fields["cashTendered"] = {};
	Payment._meta_.fields["cashTendered"].type = Number;
	Payment._meta_.fields["externalPaymentId"] = {};
	Payment._meta_.fields["externalPaymentId"].type = String;
	Payment._meta_.fields["employee"] = {};
	Payment._meta_.fields["employee"].type = base_Reference;
	Payment._meta_.fields["createdTime"] = {};
	Payment._meta_.fields["createdTime"].type = Number;
	Payment._meta_.fields["clientCreatedTime"] = {};
	Payment._meta_.fields["clientCreatedTime"].type = Number;
	Payment._meta_.fields["modifiedTime"] = {};
	Payment._meta_.fields["modifiedTime"].type = Number;
	Payment._meta_.fields["offline"] = {};
	Payment._meta_.fields["offline"].type = Boolean;
	Payment._meta_.fields["result"] = {};
	Payment._meta_.fields["result"].type = payments_Result;
	Payment._meta_.fields["cardTransaction"] = {};
	Payment._meta_.fields["cardTransaction"].type = payments_CardTransaction;
	Payment._meta_.fields["serviceCharge"] = {};
	Payment._meta_.fields["serviceCharge"].type = payments_ServiceChargeAmount;
	Payment._meta_.fields["attributes"] = {};
	Payment._meta_.fields["attributes"].type = Object;
	Payment._meta_.fields["additionalCharges"] = {};
	Payment._meta_.fields["additionalCharges"].type = Array;
	Payment._meta_.fields["additionalCharges"].elementType = payments_AdditionalChargeAmount;
	Payment._meta_.fields["taxRates"] = {};
	Payment._meta_.fields["taxRates"].type = Array;
	Payment._meta_.fields["taxRates"].elementType = payments_PaymentTaxRate;
	Payment._meta_.fields["refunds"] = {};
	Payment._meta_.fields["refunds"].type = Array;
	Payment._meta_.fields["refunds"].elementType = payments_Refund;
	Payment._meta_.fields["note"] = {};
	Payment._meta_.fields["note"].type = String;
	Payment._meta_.fields["lineItemPayments"] = {};
	Payment._meta_.fields["lineItemPayments"].type = Array;
	Payment._meta_.fields["lineItemPayments"].elementType = payments_LineItemPayment;
	Payment._meta_.fields["authorization"] = {};
	Payment._meta_.fields["authorization"].type = base_Reference;
	Payment._meta_.fields["voidPaymentRef"] = {};
	Payment._meta_.fields["voidPaymentRef"].type = base_Reference;
	Payment._meta_.fields["voidReason"] = {};
	Payment._meta_.fields["voidReason"].type = order_VoidReason;
	Payment._meta_.fields["dccInfo"] = {};
	Payment._meta_.fields["dccInfo"].type = payments_DCCInfo;
	Payment._meta_.fields["transactionSettings"] = {};
	Payment._meta_.fields["transactionSettings"].type = payments_TransactionSettings;
	Payment._meta_.fields["germanInfo"] = {};
	Payment._meta_.fields["germanInfo"].type = payments_GermanInfo;
	Payment._meta_.fields["appTracking"] = {};
	Payment._meta_.fields["appTracking"].type = apps_AppTracking;
	Payment._meta_.fields["cashAdvanceExtra"] = {};
	Payment._meta_.fields["cashAdvanceExtra"].type = payments_CashAdvanceExtra;
	Payment._meta_.fields["transactionInfo"] = {};
	Payment._meta_.fields["transactionInfo"].type = payments_TransactionInfo;
	Payment._meta_.fields["signatureDisclaimer"] = {};
	Payment._meta_.fields["signatureDisclaimer"].type = payments_SignatureDisclaimer;
	Payment._meta_.fields["externalReferenceId"] = {};
	Payment._meta_.fields["externalReferenceId"].type = String;
	Payment._meta_.fields["merchant"] = {};
	Payment._meta_.fields["merchant"].type = base_Reference;
	Payment._meta_.fields["increments"] = {};
	Payment._meta_.fields["increments"].type = Array;
	Payment._meta_.fields["increments"].elementType = payments_IncrementalAuthorization;

	//
	// Expose the module.
	//
	if (true) {
	module.exports = Payment;
	}



/***/ }),
/* 12 */
/***/ (function(module, exports) {

	module.exports = function (it) {
	  return typeof it === 'object' ? it !== null : typeof it === 'function';
	};


/***/ }),
/* 13 */
/***/ (function(module, exports) {

	/**
	 * Copyright (c) 2013-present, Facebook, Inc.
	 *
	 * This source code is licensed under the MIT license found in the
	 * LICENSE file in the root directory of this source tree.
	 *
	 * 
	 */
	'use strict';

	/**
	 * WARNING: DO NOT manually require this module.
	 * This is a replacement for `invariant(...)` used by the error code system
	 * and will _only_ be required by the corresponding babel pass.
	 * It always throws.
	 */

	function reactProdInvariant(code) {
	  var argCount = arguments.length - 1;

	  var message = 'Minified React error #' + code + '; visit ' + 'http://facebook.github.io/react/docs/error-decoder.html?invariant=' + code;

	  for (var argIdx = 0; argIdx < argCount; argIdx++) {
	    message += '&args[]=' + encodeURIComponent(arguments[argIdx + 1]);
	  }

	  message += ' for the full message or use the non-minified dev environment' + ' for full errors and additional helpful warnings.';

	  var error = new Error(message);
	  error.name = 'Invariant Violation';
	  error.framesToPop = 1; // we don't care about reactProdInvariant's own frame

	  throw error;
	}

	module.exports = reactProdInvariant;

/***/ }),
/* 14 */
/***/ (function(module, exports, __webpack_require__) {

	/**
	 * Autogenerated by Avro
	 * 
	 * DO NOT EDIT DIRECTLY
	 */


	/** The base for requests */
	/**
	* @constructor
	* @memberof remotepay
	*/
	var BaseRequest = function() {
	  this._class_ = BaseRequest;
	  this.requestId = undefined;
	  this.version = undefined;
	};


	/**
	* Set the field value
	* Identifier for the request
	*
	* @memberof remotepay.BaseRequest
	* @param {String|Null} requestId 
	*/
	BaseRequest.prototype.setRequestId = function(requestId) {
	  this.requestId = requestId;
	};

	/**
	* Get the field value
	* Identifier for the request
	* @memberof remotepay.BaseRequest
	* @return {String|Null} 
	*/
	BaseRequest.prototype.getRequestId = function() {
	  return this.requestId;
	};

	/**
	* Set the field value
	* Identifier for the version
	*
	* @memberof remotepay.BaseRequest
	* @param {Number|Null} version must be an integer, 
	*/
	BaseRequest.prototype.setVersion = function(version) {
	  this.version = version;
	};

	/**
	* Get the field value
	* Identifier for the version
	* @memberof remotepay.BaseRequest
	* @return {Number|Null} must be an integer, 
	*/
	BaseRequest.prototype.getVersion = function() {
	  return this.version;
	};

	/**
	* @memberof remotepay.BaseRequest
	* @private
	*/
	BaseRequest.prototype.getMetaInfo = function(fieldName) {
	  var curclass = this._class_;
	  do {
	    var fieldMetaInfo = curclass._meta_.fields[fieldName];
	    if(fieldMetaInfo) {
	      return fieldMetaInfo;
	    }
	    if(curclass._meta_._superMeta_) {
	      curclass = curclass._meta_._superMeta_._class_;
	    } else {
	      curclass = null;
	    }
	  } while(curclass);
	  return null;
	};

	BaseRequest.prototype.toString = function() {
	  return JSON.stringify(this);
	};

	BaseRequest._meta_ =  {fields:  {}};
	BaseRequest._meta_._class_ =  BaseRequest;
	BaseRequest._meta_.fields["requestId"] = {};
	BaseRequest._meta_.fields["requestId"].type = String;
	BaseRequest._meta_.fields["version"] = {};
	BaseRequest._meta_.fields["version"].type = Number;

	//
	// Expose the module.
	//
	if (true) {
	module.exports = BaseRequest;
	}



/***/ }),
/* 15 */
/***/ (function(module, exports, __webpack_require__) {

	/**
	 * Autogenerated by Avro
	 * 
	 * DO NOT EDIT DIRECTLY
	 */

	var remotepay_ResponseCode = __webpack_require__(272);

	/** The base for responses */
	/**
	* @constructor
	* @memberof remotepay
	*/
	var BaseResponse = function() {
	  this._class_ = BaseResponse;
	  this.success = undefined;
	  this.result = undefined;
	  this.reason = undefined;
	  this.message = undefined;
	};


	/**
	* Set the field value
	* If true then the requested operation succeeded
	*
	* @memberof remotepay.BaseResponse
	* @param {Boolean} success 
	*/
	BaseResponse.prototype.setSuccess = function(success) {
	  this.success = success;
	};

	/**
	* Get the field value
	* If true then the requested operation succeeded
	* @memberof remotepay.BaseResponse
	* @return {Boolean} 
	*/
	BaseResponse.prototype.getSuccess = function() {
	  return this.success;
	};

	/**
	* Set the field value
	* The result of the requested operation.
	*
	* @memberof remotepay.BaseResponse
	* @param {remotepay.ResponseCode} result 
	*/
	BaseResponse.prototype.setResult = function(result) {
	  this.result = result;
	};

	/**
	* Get the field value
	* The result of the requested operation.
	* @memberof remotepay.BaseResponse
	* @return {remotepay.ResponseCode} 
	*/
	BaseResponse.prototype.getResult = function() {
	  return this.result;
	};

	/**
	* Set the field value
	* Optional information about result.
	*
	* @memberof remotepay.BaseResponse
	* @param {String|Null} reason 
	*/
	BaseResponse.prototype.setReason = function(reason) {
	  this.reason = reason;
	};

	/**
	* Get the field value
	* Optional information about result.
	* @memberof remotepay.BaseResponse
	* @return {String|Null} 
	*/
	BaseResponse.prototype.getReason = function() {
	  return this.reason;
	};

	/**
	* Set the field value
	* Detailed information about result.
	*
	* @memberof remotepay.BaseResponse
	* @param {String|Null} message 
	*/
	BaseResponse.prototype.setMessage = function(message) {
	  this.message = message;
	};

	/**
	* Get the field value
	* Detailed information about result.
	* @memberof remotepay.BaseResponse
	* @return {String|Null} 
	*/
	BaseResponse.prototype.getMessage = function() {
	  return this.message;
	};

	/**
	* @memberof remotepay.BaseResponse
	* @private
	*/
	BaseResponse.prototype.getMetaInfo = function(fieldName) {
	  var curclass = this._class_;
	  do {
	    var fieldMetaInfo = curclass._meta_.fields[fieldName];
	    if(fieldMetaInfo) {
	      return fieldMetaInfo;
	    }
	    if(curclass._meta_._superMeta_) {
	      curclass = curclass._meta_._superMeta_._class_;
	    } else {
	      curclass = null;
	    }
	  } while(curclass);
	  return null;
	};

	BaseResponse.prototype.toString = function() {
	  return JSON.stringify(this);
	};

	BaseResponse._meta_ =  {fields:  {}};
	BaseResponse._meta_._class_ =  BaseResponse;
	BaseResponse._meta_.fields["success"] = {};
	BaseResponse._meta_.fields["success"].type = Boolean;
	BaseResponse._meta_.fields["result"] = {};
	BaseResponse._meta_.fields["result"].type = remotepay_ResponseCode;
	BaseResponse._meta_.fields["reason"] = {};
	BaseResponse._meta_.fields["reason"].type = String;
	BaseResponse._meta_.fields["message"] = {};
	BaseResponse._meta_.fields["message"].type = String;

	//
	// Expose the module.
	//
	if (true) {
	module.exports = BaseResponse;
	}



/***/ }),
/* 16 */
/***/ (function(module, exports, __webpack_require__) {

	var store = __webpack_require__(109)('wks');
	var uid = __webpack_require__(80);
	var Symbol = __webpack_require__(9).Symbol;
	var USE_SYMBOL = typeof Symbol == 'function';

	var $exports = module.exports = function (name) {
	  return store[name] || (store[name] =
	    USE_SYMBOL && Symbol[name] || (USE_SYMBOL ? Symbol : uid)('Symbol.' + name));
	};

	$exports.store = store;


/***/ }),
/* 17 */
/***/ (function(module, exports, __webpack_require__) {

	// 7.1.15 ToLength
	var toInteger = __webpack_require__(46);
	var min = Math.min;
	module.exports = function (it) {
	  return it > 0 ? min(toInteger(it), 0x1fffffffffffff) : 0; // pow(2, 53) - 1 == 9007199254740991
	};


/***/ }),
/* 18 */
/***/ (function(module, exports, __webpack_require__) {

	// Thank's IE8 for his funny defineProperty
	module.exports = !__webpack_require__(10)(function () {
	  return Object.defineProperty({}, 'a', { get: function () { return 7; } }).a != 7;
	});


/***/ }),
/* 19 */
/***/ (function(module, exports) {

	/*
	object-assign
	(c) Sindre Sorhus
	@license MIT
	*/

	'use strict';
	/* eslint-disable no-unused-vars */
	var getOwnPropertySymbols = Object.getOwnPropertySymbols;
	var hasOwnProperty = Object.prototype.hasOwnProperty;
	var propIsEnumerable = Object.prototype.propertyIsEnumerable;

	function toObject(val) {
		if (val === null || val === undefined) {
			throw new TypeError('Object.assign cannot be called with null or undefined');
		}

		return Object(val);
	}

	function shouldUseNative() {
		try {
			if (!Object.assign) {
				return false;
			}

			// Detect buggy property enumeration order in older V8 versions.

			// https://bugs.chromium.org/p/v8/issues/detail?id=4118
			var test1 = new String('abc');  // eslint-disable-line no-new-wrappers
			test1[5] = 'de';
			if (Object.getOwnPropertyNames(test1)[0] === '5') {
				return false;
			}

			// https://bugs.chromium.org/p/v8/issues/detail?id=3056
			var test2 = {};
			for (var i = 0; i < 10; i++) {
				test2['_' + String.fromCharCode(i)] = i;
			}
			var order2 = Object.getOwnPropertyNames(test2).map(function (n) {
				return test2[n];
			});
			if (order2.join('') !== '0123456789') {
				return false;
			}

			// https://bugs.chromium.org/p/v8/issues/detail?id=3056
			var test3 = {};
			'abcdefghijklmnopqrst'.split('').forEach(function (letter) {
				test3[letter] = letter;
			});
			if (Object.keys(Object.assign({}, test3)).join('') !==
					'abcdefghijklmnopqrst') {
				return false;
			}

			return true;
		} catch (err) {
			// We don't expect any of the above to throw, but better to be safe.
			return false;
		}
	}

	module.exports = shouldUseNative() ? Object.assign : function (target, source) {
		var from;
		var to = toObject(target);
		var symbols;

		for (var s = 1; s < arguments.length; s++) {
			from = Object(arguments[s]);

			for (var key in from) {
				if (hasOwnProperty.call(from, key)) {
					to[key] = from[key];
				}
			}

			if (getOwnPropertySymbols) {
				symbols = getOwnPropertySymbols(from);
				for (var i = 0; i < symbols.length; i++) {
					if (propIsEnumerable.call(from, symbols[i])) {
						to[symbols[i]] = from[symbols[i]];
					}
				}
			}
		}

		return to;
	};


/***/ }),
/* 20 */
/***/ (function(module, exports, __webpack_require__) {

	var anObject = __webpack_require__(6);
	var IE8_DOM_DEFINE = __webpack_require__(296);
	var toPrimitive = __webpack_require__(52);
	var dP = Object.defineProperty;

	exports.f = __webpack_require__(18) ? Object.defineProperty : function defineProperty(O, P, Attributes) {
	  anObject(O);
	  P = toPrimitive(P, true);
	  anObject(Attributes);
	  if (IE8_DOM_DEFINE) try {
	    return dP(O, P, Attributes);
	  } catch (e) { /* empty */ }
	  if ('get' in Attributes || 'set' in Attributes) throw TypeError('Accessors not supported!');
	  if ('value' in Attributes) O[P] = Attributes.value;
	  return O;
	};


/***/ }),
/* 21 */
/***/ (function(module, exports, __webpack_require__) {

	/**
	 * Copyright (c) 2013-present, Facebook, Inc.
	 *
	 * This source code is licensed under the MIT license found in the
	 * LICENSE file in the root directory of this source tree.
	 *
	 */

	'use strict';

	var _prodInvariant = __webpack_require__(13);

	var DOMProperty = __webpack_require__(65);
	var ReactDOMComponentFlags = __webpack_require__(342);

	var invariant = __webpack_require__(7);

	var ATTR_NAME = DOMProperty.ID_ATTRIBUTE_NAME;
	var Flags = ReactDOMComponentFlags;

	var internalInstanceKey = '__reactInternalInstance$' + Math.random().toString(36).slice(2);

	/**
	 * Check if a given node should be cached.
	 */
	function shouldPrecacheNode(node, nodeID) {
	  return node.nodeType === 1 && node.getAttribute(ATTR_NAME) === String(nodeID) || node.nodeType === 8 && node.nodeValue === ' react-text: ' + nodeID + ' ' || node.nodeType === 8 && node.nodeValue === ' react-empty: ' + nodeID + ' ';
	}

	/**
	 * Drill down (through composites and empty components) until we get a host or
	 * host text component.
	 *
	 * This is pretty polymorphic but unavoidable with the current structure we have
	 * for `_renderedChildren`.
	 */
	function getRenderedHostOrTextFromComponent(component) {
	  var rendered;
	  while (rendered = component._renderedComponent) {
	    component = rendered;
	  }
	  return component;
	}

	/**
	 * Populate `_hostNode` on the rendered host/text component with the given
	 * DOM node. The passed `inst` can be a composite.
	 */
	function precacheNode(inst, node) {
	  var hostInst = getRenderedHostOrTextFromComponent(inst);
	  hostInst._hostNode = node;
	  node[internalInstanceKey] = hostInst;
	}

	function uncacheNode(inst) {
	  var node = inst._hostNode;
	  if (node) {
	    delete node[internalInstanceKey];
	    inst._hostNode = null;
	  }
	}

	/**
	 * Populate `_hostNode` on each child of `inst`, assuming that the children
	 * match up with the DOM (element) children of `node`.
	 *
	 * We cache entire levels at once to avoid an n^2 problem where we access the
	 * children of a node sequentially and have to walk from the start to our target
	 * node every time.
	 *
	 * Since we update `_renderedChildren` and the actual DOM at (slightly)
	 * different times, we could race here and see a newer `_renderedChildren` than
	 * the DOM nodes we see. To avoid this, ReactMultiChild calls
	 * `prepareToManageChildren` before we change `_renderedChildren`, at which
	 * time the container's child nodes are always cached (until it unmounts).
	 */
	function precacheChildNodes(inst, node) {
	  if (inst._flags & Flags.hasCachedChildNodes) {
	    return;
	  }
	  var children = inst._renderedChildren;
	  var childNode = node.firstChild;
	  outer: for (var name in children) {
	    if (!children.hasOwnProperty(name)) {
	      continue;
	    }
	    var childInst = children[name];
	    var childID = getRenderedHostOrTextFromComponent(childInst)._domID;
	    if (childID === 0) {
	      // We're currently unmounting this child in ReactMultiChild; skip it.
	      continue;
	    }
	    // We assume the child nodes are in the same order as the child instances.
	    for (; childNode !== null; childNode = childNode.nextSibling) {
	      if (shouldPrecacheNode(childNode, childID)) {
	        precacheNode(childInst, childNode);
	        continue outer;
	      }
	    }
	    // We reached the end of the DOM children without finding an ID match.
	     true ? (undefined) !== 'production' ? invariant(false, 'Unable to find element with ID %s.', childID) : _prodInvariant('32', childID) : void 0;
	  }
	  inst._flags |= Flags.hasCachedChildNodes;
	}

	/**
	 * Given a DOM node, return the closest ReactDOMComponent or
	 * ReactDOMTextComponent instance ancestor.
	 */
	function getClosestInstanceFromNode(node) {
	  if (node[internalInstanceKey]) {
	    return node[internalInstanceKey];
	  }

	  // Walk up the tree until we find an ancestor whose instance we have cached.
	  var parents = [];
	  while (!node[internalInstanceKey]) {
	    parents.push(node);
	    if (node.parentNode) {
	      node = node.parentNode;
	    } else {
	      // Top of the tree. This node must not be part of a React tree (or is
	      // unmounted, potentially).
	      return null;
	    }
	  }

	  var closest;
	  var inst;
	  for (; node && (inst = node[internalInstanceKey]); node = parents.pop()) {
	    closest = inst;
	    if (parents.length) {
	      precacheChildNodes(inst, node);
	    }
	  }

	  return closest;
	}

	/**
	 * Given a DOM node, return the ReactDOMComponent or ReactDOMTextComponent
	 * instance, or null if the node was not rendered by this React.
	 */
	function getInstanceFromNode(node) {
	  var inst = getClosestInstanceFromNode(node);
	  if (inst != null && inst._hostNode === node) {
	    return inst;
	  } else {
	    return null;
	  }
	}

	/**
	 * Given a ReactDOMComponent or ReactDOMTextComponent, return the corresponding
	 * DOM node.
	 */
	function getNodeFromInstance(inst) {
	  // Without this first invariant, passing a non-DOM-component triggers the next
	  // invariant for a missing parent, which is super confusing.
	  !(inst._hostNode !== undefined) ? (undefined) !== 'production' ? invariant(false, 'getNodeFromInstance: Invalid argument.') : _prodInvariant('33') : void 0;

	  if (inst._hostNode) {
	    return inst._hostNode;
	  }

	  // Walk up the tree until we find an ancestor whose DOM node we have cached.
	  var parents = [];
	  while (!inst._hostNode) {
	    parents.push(inst);
	    !inst._hostParent ? (undefined) !== 'production' ? invariant(false, 'React DOM tree root should always have a node reference.') : _prodInvariant('34') : void 0;
	    inst = inst._hostParent;
	  }

	  // Now parents contains each ancestor that does *not* have a cached native
	  // node, and `inst` is the deepest ancestor that does.
	  for (; parents.length; inst = parents.pop()) {
	    precacheChildNodes(inst, inst._hostNode);
	  }

	  return inst._hostNode;
	}

	var ReactDOMComponentTree = {
	  getClosestInstanceFromNode: getClosestInstanceFromNode,
	  getInstanceFromNode: getInstanceFromNode,
	  getNodeFromInstance: getNodeFromInstance,
	  precacheChildNodes: precacheChildNodes,
	  precacheNode: precacheNode,
	  uncacheNode: uncacheNode
	};

	module.exports = ReactDOMComponentTree;

/***/ }),
/* 22 */
/***/ (function(module, exports, __webpack_require__) {

	// 7.1.13 ToObject(argument)
	var defined = __webpack_require__(50);
	module.exports = function (it) {
	  return Object(defined(it));
	};


/***/ }),
/* 23 */
/***/ (function(module, exports, __webpack_require__) {

	/**
	 * Autogenerated by Avro
	 * 
	 * DO NOT EDIT DIRECTLY
	 */


	/**
	* @memberof remotemessage
	* @enum {string}
	*/
	var ResultStatus = {
	  SUCCESS : "SUCCESS",
	  FAIL : "FAIL",
	  CANCEL : "CANCEL"
	};


	//
	// Expose the module.
	//
	if (true) {
	module.exports = ResultStatus;
	}



/***/ }),
/* 24 */
/***/ (function(module, exports) {

	/**
	 * Copyright (c) 2013-present, Facebook, Inc.
	 *
	 * This source code is licensed under the MIT license found in the
	 * LICENSE file in the root directory of this source tree.
	 *
	 */

	'use strict';

	var canUseDOM = !!(typeof window !== 'undefined' && window.document && window.document.createElement);

	/**
	 * Simple, lightweight module assisting with the detection and context of
	 * Worker. Helps avoid circular dependencies and allows code to reason about
	 * whether or not they are in a Worker, even if they never include the main
	 * `ReactWorker` dependency.
	 */
	var ExecutionEnvironment = {

	  canUseDOM: canUseDOM,

	  canUseWorkers: typeof Worker !== 'undefined',

	  canUseEventListeners: canUseDOM && !!(window.addEventListener || window.attachEvent),

	  canUseViewport: canUseDOM && !!window.screen,

	  isInWorker: !canUseDOM // For now, this is true - might change in the future.

	};

	module.exports = ExecutionEnvironment;

/***/ }),
/* 25 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';

	exports.__esModule = true;
	exports.default = routerWarning;
	exports._resetWarned = _resetWarned;

	var _warning = __webpack_require__(1241);

	var _warning2 = _interopRequireDefault(_warning);

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

	var warned = {};

	function routerWarning(falseToWarn, message) {
	  // Only issue deprecation warnings once.
	  if (message.indexOf('deprecated') !== -1) {
	    if (warned[message]) {
	      return;
	    }

	    warned[message] = true;
	  }

	  message = '[react-router] ' + message;

	  for (var _len = arguments.length, args = Array(_len > 2 ? _len - 2 : 0), _key = 2; _key < _len; _key++) {
	    args[_key - 2] = arguments[_key];
	  }

	  _warning2.default.apply(undefined, [falseToWarn, message].concat(args));
	}

	function _resetWarned() {
	  warned = {};
	}

/***/ }),
/* 26 */
/***/ (function(module, exports, __webpack_require__) {

	/**
	 * Autogenerated by Avro
	 * 
	 * DO NOT EDIT DIRECTLY
	 */

	var payments_CardTransaction = __webpack_require__(102);
	var payments_AdditionalChargeAmount = __webpack_require__(245);
	var payments_TaxableAmountRate = __webpack_require__(122);
	var apps_AppTracking = __webpack_require__(100);
	var payments_ServiceChargeAmount = __webpack_require__(121);
	var payments_TransactionInfo = __webpack_require__(104);
	var base_Reference = __webpack_require__(5);
	var base_Tender = __webpack_require__(116);
	var payments_GermanInfo = __webpack_require__(103);

	/**
	* @constructor
	* @memberof payments
	*/
	var Refund = function() {
	  this._class_ = Refund;
	  this.id = undefined;
	  this.orderRef = undefined;
	  this.device = undefined;
	  this.amount = undefined;
	  this.taxAmount = undefined;
	  this.tipAmount = undefined;
	  this.createdTime = undefined;
	  this.clientCreatedTime = undefined;
	  this.payment = undefined;
	  this.employee = undefined;
	  this.lineItems = undefined;
	  this.overrideMerchantTender = undefined;
	  this.taxableAmountRates = undefined;
	  this.serviceChargeAmount = undefined;
	  this.additionalCharges = undefined;
	  this.germanInfo = undefined;
	  this.appTracking = undefined;
	  this.voided = undefined;
	  this.voidReason = undefined;
	  this.cardTransaction = undefined;
	  this.transactionInfo = undefined;
	  this.merchant = undefined;
	  this.externalReferenceId = undefined;
	};


	/**
	* Set the field value
	* Unique identifier
	*
	* @memberof payments.Refund
	* @param {String} id 
	*/
	Refund.prototype.setId = function(id) {
	  this.id = id;
	};

	/**
	* Get the field value
	* Unique identifier
	* @memberof payments.Refund
	* @return {String} 
	*/
	Refund.prototype.getId = function() {
	  return this.id;
	};

	/**
	* Set the field value
	* The order with which the refund is associated
	*
	* @memberof payments.Refund
	* @param {base.Reference} orderRef 
	*/
	Refund.prototype.setOrderRef = function(orderRef) {
	  this.orderRef = orderRef;
	};

	/**
	* Get the field value
	* The order with which the refund is associated
	* @memberof payments.Refund
	* @return {base.Reference} 
	*/
	Refund.prototype.getOrderRef = function() {
	  return this.orderRef;
	};

	/**
	* Set the field value
	* Device which processed the transaction for this refund, a 128-bit UUID, not a normal base-13 Clover ID.
	*
	* @memberof payments.Refund
	* @param {base.Reference|Null} device 
	*/
	Refund.prototype.setDevice = function(device) {
	  this.device = device;
	};

	/**
	* Get the field value
	* Device which processed the transaction for this refund, a 128-bit UUID, not a normal base-13 Clover ID.
	* @memberof payments.Refund
	* @return {base.Reference|Null} 
	*/
	Refund.prototype.getDevice = function() {
	  return this.device;
	};

	/**
	* Set the field value
	* Total amount refunded, including tax and tip
	*
	* @memberof payments.Refund
	* @param {Number} amount must be a long integer
	*/
	Refund.prototype.setAmount = function(amount) {
	  this.amount = amount;
	};

	/**
	* Get the field value
	* Total amount refunded, including tax and tip
	* @memberof payments.Refund
	* @return {Number} must be a long integer
	*/
	Refund.prototype.getAmount = function() {
	  return this.amount;
	};

	/**
	* Set the field value
	* Tax amount refunded
	*
	* @memberof payments.Refund
	* @param {Number|Null} taxAmount must be a long integer, 
	*/
	Refund.prototype.setTaxAmount = function(taxAmount) {
	  this.taxAmount = taxAmount;
	};

	/**
	* Get the field value
	* Tax amount refunded
	* @memberof payments.Refund
	* @return {Number|Null} must be a long integer, 
	*/
	Refund.prototype.getTaxAmount = function() {
	  return this.taxAmount;
	};

	/**
	* Set the field value
	* Tip amount refunded
	*
	* @memberof payments.Refund
	* @param {Number|Null} tipAmount must be a long integer, 
	*/
	Refund.prototype.setTipAmount = function(tipAmount) {
	  this.tipAmount = tipAmount;
	};

	/**
	* Get the field value
	* Tip amount refunded
	* @memberof payments.Refund
	* @return {Number|Null} must be a long integer, 
	*/
	Refund.prototype.getTipAmount = function() {
	  return this.tipAmount;
	};

	/**
	* Set the field value
	* The time when the refund was recorded on the server
	*
	* @memberof payments.Refund
	* @param {Number} createdTime must be a long integer
	*/
	Refund.prototype.setCreatedTime = function(createdTime) {
	  this.createdTime = createdTime;
	};

	/**
	* Get the field value
	* The time when the refund was recorded on the server
	* @memberof payments.Refund
	* @return {Number} must be a long integer
	*/
	Refund.prototype.getCreatedTime = function() {
	  return this.createdTime;
	};

	/**
	* Set the field value
	* The time when the refund was recorded on the client
	*
	* @memberof payments.Refund
	* @param {Number} clientCreatedTime must be a long integer
	*/
	Refund.prototype.setClientCreatedTime = function(clientCreatedTime) {
	  this.clientCreatedTime = clientCreatedTime;
	};

	/**
	* Get the field value
	* The time when the refund was recorded on the client
	* @memberof payments.Refund
	* @return {Number} must be a long integer
	*/
	Refund.prototype.getClientCreatedTime = function() {
	  return this.clientCreatedTime;
	};

	/**
	* Set the field value
	* The payment with which the refund is associated
	*
	* @memberof payments.Refund
	* @param {base.Reference} payment 
	*/
	Refund.prototype.setPayment = function(payment) {
	  this.payment = payment;
	};

	/**
	* Get the field value
	* The payment with which the refund is associated
	* @memberof payments.Refund
	* @return {base.Reference} 
	*/
	Refund.prototype.getPayment = function() {
	  return this.payment;
	};

	/**
	* Set the field value
	* @memberof payments.Refund
	* @param {base.Reference} employee 
	*/
	Refund.prototype.setEmployee = function(employee) {
	  this.employee = employee;
	};

	/**
	* Get the field value
	* @memberof payments.Refund
	* @return {base.Reference} 
	*/
	Refund.prototype.getEmployee = function() {
	  return this.employee;
	};

	/**
	* Set the field value
	* @memberof payments.Refund
	* @param {Array.<base.Reference>} lineItems An array of 
	*/
	Refund.prototype.setLineItems = function(lineItems) {
	  this.lineItems = lineItems;
	};

	/**
	* Get the field value
	* @memberof payments.Refund
	* @return {Array.<base.Reference>} An array of 
	*/
	Refund.prototype.getLineItems = function() {
	  return this.lineItems;
	};

	/**
	* Set the field value
	* The tender type associated with this payment, e.g. credit card, cash, etc.
	*
	* @memberof payments.Refund
	* @param {base.Tender} overrideMerchantTender 
	*/
	Refund.prototype.setOverrideMerchantTender = function(overrideMerchantTender) {
	  this.overrideMerchantTender = overrideMerchantTender;
	};

	/**
	* Get the field value
	* The tender type associated with this payment, e.g. credit card, cash, etc.
	* @memberof payments.Refund
	* @return {base.Tender} 
	*/
	Refund.prototype.getOverrideMerchantTender = function() {
	  return this.overrideMerchantTender;
	};

	/**
	* Set the field value
	* @memberof payments.Refund
	* @param {Array.<payments.TaxableAmountRate>} taxableAmountRates An array of 
	*/
	Refund.prototype.setTaxableAmountRates = function(taxableAmountRates) {
	  this.taxableAmountRates = taxableAmountRates;
	};

	/**
	* Get the field value
	* @memberof payments.Refund
	* @return {Array.<payments.TaxableAmountRate>} An array of 
	*/
	Refund.prototype.getTaxableAmountRates = function() {
	  return this.taxableAmountRates;
	};

	/**
	* Set the field value
	* @memberof payments.Refund
	* @param {payments.ServiceChargeAmount} serviceChargeAmount 
	*/
	Refund.prototype.setServiceChargeAmount = function(serviceChargeAmount) {
	  this.serviceChargeAmount = serviceChargeAmount;
	};

	/**
	* Get the field value
	* @memberof payments.Refund
	* @return {payments.ServiceChargeAmount} 
	*/
	Refund.prototype.getServiceChargeAmount = function() {
	  return this.serviceChargeAmount;
	};

	/**
	* Set the field value
	* @memberof payments.Refund
	* @param {Array.<payments.AdditionalChargeAmount>} additionalCharges An array of 
	*/
	Refund.prototype.setAdditionalCharges = function(additionalCharges) {
	  this.additionalCharges = additionalCharges;
	};

	/**
	* Get the field value
	* @memberof payments.Refund
	* @return {Array.<payments.AdditionalChargeAmount>} An array of 
	*/
	Refund.prototype.getAdditionalCharges = function() {
	  return this.additionalCharges;
	};

	/**
	* Set the field value
	* German region-specific information
	*
	* @memberof payments.Refund
	* @param {payments.GermanInfo|Null} germanInfo 
	*/
	Refund.prototype.setGermanInfo = function(germanInfo) {
	  this.germanInfo = germanInfo;
	};

	/**
	* Get the field value
	* German region-specific information
	* @memberof payments.Refund
	* @return {payments.GermanInfo|Null} 
	*/
	Refund.prototype.getGermanInfo = function() {
	  return this.germanInfo;
	};

	/**
	* Set the field value
	* Tracking information for the app that created this refund.
	*
	* @memberof payments.Refund
	* @param {apps.AppTracking|Null} appTracking 
	*/
	Refund.prototype.setAppTracking = function(appTracking) {
	  this.appTracking = appTracking;
	};

	/**
	* Get the field value
	* Tracking information for the app that created this refund.
	* @memberof payments.Refund
	* @return {apps.AppTracking|Null} 
	*/
	Refund.prototype.getAppTracking = function() {
	  return this.appTracking;
	};

	/**
	* Set the field value
	* @memberof payments.Refund
	* @param {Boolean} voided 
	*/
	Refund.prototype.setVoided = function(voided) {
	  this.voided = voided;
	};

	/**
	* Get the field value
	* @memberof payments.Refund
	* @return {Boolean} 
	*/
	Refund.prototype.getVoided = function() {
	  return this.voided;
	};

	/**
	* Set the field value
	* @memberof payments.Refund
	* @param {String} voidReason 
	*/
	Refund.prototype.setVoidReason = function(voidReason) {
	  this.voidReason = voidReason;
	};

	/**
	* Get the field value
	* @memberof payments.Refund
	* @return {String} 
	*/
	Refund.prototype.getVoidReason = function() {
	  return this.voidReason;
	};

	/**
	* Set the field value
	* Information about the card used for credit or debit card refunds
	*
	* @memberof payments.Refund
	* @param {payments.CardTransaction} cardTransaction 
	*/
	Refund.prototype.setCardTransaction = function(cardTransaction) {
	  this.cardTransaction = cardTransaction;
	};

	/**
	* Get the field value
	* Information about the card used for credit or debit card refunds
	* @memberof payments.Refund
	* @return {payments.CardTransaction} 
	*/
	Refund.prototype.getCardTransaction = function() {
	  return this.cardTransaction;
	};

	/**
	* Set the field value
	* Transaction information
	*
	* @memberof payments.Refund
	* @param {payments.TransactionInfo|Null} transactionInfo 
	*/
	Refund.prototype.setTransactionInfo = function(transactionInfo) {
	  this.transactionInfo = transactionInfo;
	};

	/**
	* Get the field value
	* Transaction information
	* @memberof payments.Refund
	* @return {payments.TransactionInfo|Null} 
	*/
	Refund.prototype.getTransactionInfo = function() {
	  return this.transactionInfo;
	};

	/**
	* Set the field value
	* @memberof payments.Refund
	* @param {base.Reference} merchant 
	*/
	Refund.prototype.setMerchant = function(merchant) {
	  this.merchant = merchant;
	};

	/**
	* Get the field value
	* @memberof payments.Refund
	* @return {base.Reference} 
	*/
	Refund.prototype.getMerchant = function() {
	  return this.merchant;
	};

	/**
	* Set the field value
	* The external reference id if associated with the refund
	*
	* @memberof payments.Refund
	* @param {String|Null} externalReferenceId 
	*/
	Refund.prototype.setExternalReferenceId = function(externalReferenceId) {
	  this.externalReferenceId = externalReferenceId;
	};

	/**
	* Get the field value
	* The external reference id if associated with the refund
	* @memberof payments.Refund
	* @return {String|Null} 
	*/
	Refund.prototype.getExternalReferenceId = function() {
	  return this.externalReferenceId;
	};

	/**
	* @memberof payments.Refund
	* @private
	*/
	Refund.prototype.getMetaInfo = function(fieldName) {
	  var curclass = this._class_;
	  do {
	    var fieldMetaInfo = curclass._meta_.fields[fieldName];
	    if(fieldMetaInfo) {
	      return fieldMetaInfo;
	    }
	    if(curclass._meta_._superMeta_) {
	      curclass = curclass._meta_._superMeta_._class_;
	    } else {
	      curclass = null;
	    }
	  } while(curclass);
	  return null;
	};

	Refund.prototype.toString = function() {
	  return JSON.stringify(this);
	};

	Refund._meta_ =  {fields:  {}};
	Refund._meta_._class_ =  Refund;
	Refund._meta_.fields["id"] = {};
	Refund._meta_.fields["id"].type = String;
	Refund._meta_.fields["orderRef"] = {};
	Refund._meta_.fields["orderRef"].type = base_Reference;
	Refund._meta_.fields["device"] = {};
	Refund._meta_.fields["device"].type = base_Reference;
	Refund._meta_.fields["amount"] = {};
	Refund._meta_.fields["amount"].type = Number;
	Refund._meta_.fields["taxAmount"] = {};
	Refund._meta_.fields["taxAmount"].type = Number;
	Refund._meta_.fields["tipAmount"] = {};
	Refund._meta_.fields["tipAmount"].type = Number;
	Refund._meta_.fields["createdTime"] = {};
	Refund._meta_.fields["createdTime"].type = Number;
	Refund._meta_.fields["clientCreatedTime"] = {};
	Refund._meta_.fields["clientCreatedTime"].type = Number;
	Refund._meta_.fields["payment"] = {};
	Refund._meta_.fields["payment"].type = base_Reference;
	Refund._meta_.fields["employee"] = {};
	Refund._meta_.fields["employee"].type = base_Reference;
	Refund._meta_.fields["lineItems"] = {};
	Refund._meta_.fields["lineItems"].type = Array;
	Refund._meta_.fields["lineItems"].elementType = base_Reference;
	Refund._meta_.fields["overrideMerchantTender"] = {};
	Refund._meta_.fields["overrideMerchantTender"].type = base_Tender;
	Refund._meta_.fields["taxableAmountRates"] = {};
	Refund._meta_.fields["taxableAmountRates"].type = Array;
	Refund._meta_.fields["taxableAmountRates"].elementType = payments_TaxableAmountRate;
	Refund._meta_.fields["serviceChargeAmount"] = {};
	Refund._meta_.fields["serviceChargeAmount"].type = payments_ServiceChargeAmount;
	Refund._meta_.fields["additionalCharges"] = {};
	Refund._meta_.fields["additionalCharges"].type = Array;
	Refund._meta_.fields["additionalCharges"].elementType = payments_AdditionalChargeAmount;
	Refund._meta_.fields["germanInfo"] = {};
	Refund._meta_.fields["germanInfo"].type = payments_GermanInfo;
	Refund._meta_.fields["appTracking"] = {};
	Refund._meta_.fields["appTracking"].type = apps_AppTracking;
	Refund._meta_.fields["voided"] = {};
	Refund._meta_.fields["voided"].type = Boolean;
	Refund._meta_.fields["voidReason"] = {};
	Refund._meta_.fields["voidReason"].type = String;
	Refund._meta_.fields["cardTransaction"] = {};
	Refund._meta_.fields["cardTransaction"].type = payments_CardTransaction;
	Refund._meta_.fields["transactionInfo"] = {};
	Refund._meta_.fields["transactionInfo"].type = payments_TransactionInfo;
	Refund._meta_.fields["merchant"] = {};
	Refund._meta_.fields["merchant"].type = base_Reference;
	Refund._meta_.fields["externalReferenceId"] = {};
	Refund._meta_.fields["externalReferenceId"].type = String;

	//
	// Expose the module.
	//
	if (true) {
	module.exports = Refund;
	}



/***/ }),
/* 27 */
/***/ (function(module, exports) {

	'use strict';

	Object.defineProperty(exports, "__esModule", {
	    value: true
	});

	var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

	var CurrencyFormatter = function () {
	    function CurrencyFormatter() {
	        _classCallCheck(this, CurrencyFormatter);
	    }

	    _createClass(CurrencyFormatter, [{
	        key: 'formatCurrency',
	        value: function formatCurrency(currency) {
	            if (currency === 0) {
	                return '$0.00';
	            } else {
	                var number = currency.toString();
	                var first = number.substr(0, number.length - 2);
	                if (first.length < 1) {
	                    first = '0';
	                }
	                var last = number.substr(number.length - 2);
	                return '$' + first + '.' + last;
	            }
	        }
	    }, {
	        key: 'convertStringToFloat',
	        value: function convertStringToFloat(currency) {
	            var float = currency.substr(1, currency.length);
	            return parseFloat(float);
	        }
	    }, {
	        key: 'convertToFloat',
	        value: function convertToFloat(currency) {
	            if (currency === null || currency === undefined) {
	                return "";
	            } else if (currency === "0" || currency === "$0" || currency === "") {
	                return "$" + parseFloat(0.00).toFixed(2);
	            } else {
	                var number = currency.toString();
	                var negative = "";
	                if (number.includes('-')) {
	                    negative = "-";
	                }
	                number = number.replace('-', '');
	                number = number.replace('.', '');
	                number = number.replace('$', '');
	                number = number.replace(/\D/g, '');

	                var first = number.substr(0, number.length - 2);
	                var last = number.substr(number.length - 2);
	                if (last.length == 1) {
	                    last = "0" + last;
	                }
	                var float = first + "." + last;
	                return negative + parseFloat(float).toFixed(2);
	            }
	        }
	    }, {
	        key: 'convertToFloatDisplay',
	        value: function convertToFloatDisplay(currency) {
	            return "$" + this.convertToFloat(currency);
	        }
	    }, {
	        key: 'convertFromFloat',
	        value: function convertFromFloat(currency) {
	            currency = currency.replace('$', '');
	            currency = currency.replace(/\D/g, '');
	            var parts = currency.toString().split('.');
	            if (parts.length > 1) {
	                return parts[0] + parts[1];
	            } else {
	                return parts[0];
	            }
	        }
	    }]);

	    return CurrencyFormatter;
	}();

	exports.default = CurrencyFormatter;

/***/ }),
/* 28 */
/***/ (function(module, exports) {

	module.exports = function (it) {
	  if (typeof it != 'function') throw TypeError(it + ' is not a function!');
	  return it;
	};


/***/ }),
/* 29 */
/***/ (function(module, exports, __webpack_require__) {

	/**
	 * Copyright (c) 2013-present, Facebook, Inc.
	 *
	 * This source code is licensed under the MIT license found in the
	 * LICENSE file in the root directory of this source tree.
	 */

	'use strict';

	/**
	 * Use invariant() to assert state which your program assumes to be true.
	 *
	 * Provide sprintf-style format (only %s is supported) and arguments
	 * to provide information about what broke and what you were
	 * expecting.
	 *
	 * The invariant message will be stripped in production, but the invariant
	 * will remain to ensure logic does not differ in production.
	 */

	var invariant = function(condition, format, a, b, c, d, e, f) {
	  if ((undefined) !== 'production') {
	    if (format === undefined) {
	      throw new Error('invariant requires an error message argument');
	    }
	  }

	  if (!condition) {
	    var error;
	    if (format === undefined) {
	      error = new Error(
	        'Minified exception occurred; use the non-minified dev environment ' +
	        'for the full error message and additional helpful warnings.'
	      );
	    } else {
	      var args = [a, b, c, d, e, f];
	      var argIndex = 0;
	      error = new Error(
	        format.replace(/%s/g, function() { return args[argIndex++]; })
	      );
	      error.name = 'Invariant Violation';
	    }

	    error.framesToPop = 1; // we don't care about invariant's own frame
	    throw error;
	  }
	};

	module.exports = invariant;


/***/ }),
/* 30 */
/***/ (function(module, exports, __webpack_require__) {

	/**
	 * Autogenerated by Avro
	 * 
	 * DO NOT EDIT DIRECTLY
	 */

	var customers_Customer = __webpack_require__(67);
	var payments_CardTransaction = __webpack_require__(102);
	var payments_CreditRefund = __webpack_require__(162);
	var payments_Result = __webpack_require__(120);
	var payments_TaxableAmountRate = __webpack_require__(122);
	var apps_AppTracking = __webpack_require__(100);
	var payments_TransactionInfo = __webpack_require__(104);
	var payments_DCCInfo = __webpack_require__(250);
	var base_Reference = __webpack_require__(5);
	var base_Tender = __webpack_require__(116);
	var payments_TransactionSettings = __webpack_require__(164);
	var payments_GermanInfo = __webpack_require__(103);

	/**
	* @constructor
	* @memberof payments
	*/
	var Credit = function() {
	  this._class_ = Credit;
	  this.id = undefined;
	  this.orderRef = undefined;
	  this.device = undefined;
	  this.tender = undefined;
	  this.employee = undefined;
	  this.customers = undefined;
	  this.amount = undefined;
	  this.taxAmount = undefined;
	  this.taxRates = undefined;
	  this.createdTime = undefined;
	  this.clientCreatedTime = undefined;
	  this.cardTransaction = undefined;
	  this.voided = undefined;
	  this.voidReason = undefined;
	  this.dccInfo = undefined;
	  this.transactionSettings = undefined;
	  this.creditRefunds = undefined;
	  this.germanInfo = undefined;
	  this.appTracking = undefined;
	  this.result = undefined;
	  this.transactionInfo = undefined;
	  this.merchant = undefined;
	  this.externalReferenceId = undefined;
	};


	/**
	* Set the field value
	* Unique identifier
	*
	* @memberof payments.Credit
	* @param {String} id 
	*/
	Credit.prototype.setId = function(id) {
	  this.id = id;
	};

	/**
	* Get the field value
	* Unique identifier
	* @memberof payments.Credit
	* @return {String} 
	*/
	Credit.prototype.getId = function() {
	  return this.id;
	};

	/**
	* Set the field value
	* The order with which the credit is associated
	*
	* @memberof payments.Credit
	* @param {base.Reference} orderRef 
	*/
	Credit.prototype.setOrderRef = function(orderRef) {
	  this.orderRef = orderRef;
	};

	/**
	* Get the field value
	* The order with which the credit is associated
	* @memberof payments.Credit
	* @return {base.Reference} 
	*/
	Credit.prototype.getOrderRef = function() {
	  return this.orderRef;
	};

	/**
	* Set the field value
	* Device which processed this credit, a 128-bit UUID, not a normal base-13 Clover ID.
	*
	* @memberof payments.Credit
	* @param {base.Reference|Null} device 
	*/
	Credit.prototype.setDevice = function(device) {
	  this.device = device;
	};

	/**
	* Get the field value
	* Device which processed this credit, a 128-bit UUID, not a normal base-13 Clover ID.
	* @memberof payments.Credit
	* @return {base.Reference|Null} 
	*/
	Credit.prototype.getDevice = function() {
	  return this.device;
	};

	/**
	* Set the field value
	* The tender type associated with this payment, e.g. credit card, cash, etc.
	*
	* @memberof payments.Credit
	* @param {base.Tender} tender 
	*/
	Credit.prototype.setTender = function(tender) {
	  this.tender = tender;
	};

	/**
	* Get the field value
	* The tender type associated with this payment, e.g. credit card, cash, etc.
	* @memberof payments.Credit
	* @return {base.Tender} 
	*/
	Credit.prototype.getTender = function() {
	  return this.tender;
	};

	/**
	* Set the field value
	* The employee who processed the payment
	*
	* @memberof payments.Credit
	* @param {base.Reference} employee 
	*/
	Credit.prototype.setEmployee = function(employee) {
	  this.employee = employee;
	};

	/**
	* Get the field value
	* The employee who processed the payment
	* @memberof payments.Credit
	* @return {base.Reference} 
	*/
	Credit.prototype.getEmployee = function() {
	  return this.employee;
	};

	/**
	* Set the field value
	* Customer who received the credit/refund
	*
	* @memberof payments.Credit
	* @param {customers.Customer} customers 
	*/
	Credit.prototype.setCustomers = function(customers) {
	  this.customers = customers;
	};

	/**
	* Get the field value
	* Customer who received the credit/refund
	* @memberof payments.Credit
	* @return {customers.Customer} 
	*/
	Credit.prototype.getCustomers = function() {
	  return this.customers;
	};

	/**
	* Set the field value
	* Amount paid
	*
	* @memberof payments.Credit
	* @param {Number} amount must be a long integer
	*/
	Credit.prototype.setAmount = function(amount) {
	  this.amount = amount;
	};

	/**
	* Get the field value
	* Amount paid
	* @memberof payments.Credit
	* @return {Number} must be a long integer
	*/
	Credit.prototype.getAmount = function() {
	  return this.amount;
	};

	/**
	* Set the field value
	* Amount paid in tax
	*
	* @memberof payments.Credit
	* @param {Number|Null} taxAmount must be a long integer, 
	*/
	Credit.prototype.setTaxAmount = function(taxAmount) {
	  this.taxAmount = taxAmount;
	};

	/**
	* Get the field value
	* Amount paid in tax
	* @memberof payments.Credit
	* @return {Number|Null} must be a long integer, 
	*/
	Credit.prototype.getTaxAmount = function() {
	  return this.taxAmount;
	};

	/**
	* Set the field value
	* @memberof payments.Credit
	* @param {Array.<payments.TaxableAmountRate>} taxRates An array of 
	*/
	Credit.prototype.setTaxRates = function(taxRates) {
	  this.taxRates = taxRates;
	};

	/**
	* Get the field value
	* @memberof payments.Credit
	* @return {Array.<payments.TaxableAmountRate>} An array of 
	*/
	Credit.prototype.getTaxRates = function() {
	  return this.taxRates;
	};

	/**
	* Set the field value
	* Time payment was recorded on server
	*
	* @memberof payments.Credit
	* @param {Number} createdTime must be a long integer
	*/
	Credit.prototype.setCreatedTime = function(createdTime) {
	  this.createdTime = createdTime;
	};

	/**
	* Get the field value
	* Time payment was recorded on server
	* @memberof payments.Credit
	* @return {Number} must be a long integer
	*/
	Credit.prototype.getCreatedTime = function() {
	  return this.createdTime;
	};

	/**
	* Set the field value
	* @memberof payments.Credit
	* @param {Number} clientCreatedTime must be a long integer
	*/
	Credit.prototype.setClientCreatedTime = function(clientCreatedTime) {
	  this.clientCreatedTime = clientCreatedTime;
	};

	/**
	* Get the field value
	* @memberof payments.Credit
	* @return {Number} must be a long integer
	*/
	Credit.prototype.getClientCreatedTime = function() {
	  return this.clientCreatedTime;
	};

	/**
	* Set the field value
	* Information about the card used for credit/debit card payments
	*
	* @memberof payments.Credit
	* @param {payments.CardTransaction} cardTransaction 
	*/
	Credit.prototype.setCardTransaction = function(cardTransaction) {
	  this.cardTransaction = cardTransaction;
	};

	/**
	* Get the field value
	* Information about the card used for credit/debit card payments
	* @memberof payments.Credit
	* @return {payments.CardTransaction} 
	*/
	Credit.prototype.getCardTransaction = function() {
	  return this.cardTransaction;
	};

	/**
	* Set the field value
	* @memberof payments.Credit
	* @param {Boolean} voided 
	*/
	Credit.prototype.setVoided = function(voided) {
	  this.voided = voided;
	};

	/**
	* Get the field value
	* @memberof payments.Credit
	* @return {Boolean} 
	*/
	Credit.prototype.getVoided = function() {
	  return this.voided;
	};

	/**
	* Set the field value
	* @memberof payments.Credit
	* @param {String} voidReason 
	*/
	Credit.prototype.setVoidReason = function(voidReason) {
	  this.voidReason = voidReason;
	};

	/**
	* Get the field value
	* @memberof payments.Credit
	* @return {String} 
	*/
	Credit.prototype.getVoidReason = function() {
	  return this.voidReason;
	};

	/**
	* Set the field value
	* Dynamic Currency Conversion information
	*
	* @memberof payments.Credit
	* @param {payments.DCCInfo|Null} dccInfo 
	*/
	Credit.prototype.setDccInfo = function(dccInfo) {
	  this.dccInfo = dccInfo;
	};

	/**
	* Get the field value
	* Dynamic Currency Conversion information
	* @memberof payments.Credit
	* @return {payments.DCCInfo|Null} 
	*/
	Credit.prototype.getDccInfo = function() {
	  return this.dccInfo;
	};

	/**
	* Set the field value
	* Per transaction settings for the payment
	*
	* @memberof payments.Credit
	* @param {payments.TransactionSettings} transactionSettings 
	*/
	Credit.prototype.setTransactionSettings = function(transactionSettings) {
	  this.transactionSettings = transactionSettings;
	};

	/**
	* Get the field value
	* Per transaction settings for the payment
	* @memberof payments.Credit
	* @return {payments.TransactionSettings} 
	*/
	Credit.prototype.getTransactionSettings = function() {
	  return this.transactionSettings;
	};

	/**
	* Set the field value
	* @memberof payments.Credit
	* @param {Array.<payments.CreditRefund>} creditRefunds An array of 
	*/
	Credit.prototype.setCreditRefunds = function(creditRefunds) {
	  this.creditRefunds = creditRefunds;
	};

	/**
	* Get the field value
	* @memberof payments.Credit
	* @return {Array.<payments.CreditRefund>} An array of 
	*/
	Credit.prototype.getCreditRefunds = function() {
	  return this.creditRefunds;
	};

	/**
	* Set the field value
	* German region-specific information
	*
	* @memberof payments.Credit
	* @param {payments.GermanInfo|Null} germanInfo 
	*/
	Credit.prototype.setGermanInfo = function(germanInfo) {
	  this.germanInfo = germanInfo;
	};

	/**
	* Get the field value
	* German region-specific information
	* @memberof payments.Credit
	* @return {payments.GermanInfo|Null} 
	*/
	Credit.prototype.getGermanInfo = function() {
	  return this.germanInfo;
	};

	/**
	* Set the field value
	* Tracking information for the app that created this credit.
	*
	* @memberof payments.Credit
	* @param {apps.AppTracking|Null} appTracking 
	*/
	Credit.prototype.setAppTracking = function(appTracking) {
	  this.appTracking = appTracking;
	};

	/**
	* Get the field value
	* Tracking information for the app that created this credit.
	* @memberof payments.Credit
	* @return {apps.AppTracking|Null} 
	*/
	Credit.prototype.getAppTracking = function() {
	  return this.appTracking;
	};

	/**
	* Set the field value
	* @memberof payments.Credit
	* @param {payments.Result} result 
	*/
	Credit.prototype.setResult = function(result) {
	  this.result = result;
	};

	/**
	* Get the field value
	* @memberof payments.Credit
	* @return {payments.Result} 
	*/
	Credit.prototype.getResult = function() {
	  return this.result;
	};

	/**
	* Set the field value
	* Transaction information
	*
	* @memberof payments.Credit
	* @param {payments.TransactionInfo|Null} transactionInfo 
	*/
	Credit.prototype.setTransactionInfo = function(transactionInfo) {
	  this.transactionInfo = transactionInfo;
	};

	/**
	* Get the field value
	* Transaction information
	* @memberof payments.Credit
	* @return {payments.TransactionInfo|Null} 
	*/
	Credit.prototype.getTransactionInfo = function() {
	  return this.transactionInfo;
	};

	/**
	* Set the field value
	* @memberof payments.Credit
	* @param {base.Reference} merchant 
	*/
	Credit.prototype.setMerchant = function(merchant) {
	  this.merchant = merchant;
	};

	/**
	* Get the field value
	* @memberof payments.Credit
	* @return {base.Reference} 
	*/
	Credit.prototype.getMerchant = function() {
	  return this.merchant;
	};

	/**
	* Set the field value
	* The external reference id if associated with the credit
	*
	* @memberof payments.Credit
	* @param {String|Null} externalReferenceId 
	*/
	Credit.prototype.setExternalReferenceId = function(externalReferenceId) {
	  this.externalReferenceId = externalReferenceId;
	};

	/**
	* Get the field value
	* The external reference id if associated with the credit
	* @memberof payments.Credit
	* @return {String|Null} 
	*/
	Credit.prototype.getExternalReferenceId = function() {
	  return this.externalReferenceId;
	};

	/**
	* @memberof payments.Credit
	* @private
	*/
	Credit.prototype.getMetaInfo = function(fieldName) {
	  var curclass = this._class_;
	  do {
	    var fieldMetaInfo = curclass._meta_.fields[fieldName];
	    if(fieldMetaInfo) {
	      return fieldMetaInfo;
	    }
	    if(curclass._meta_._superMeta_) {
	      curclass = curclass._meta_._superMeta_._class_;
	    } else {
	      curclass = null;
	    }
	  } while(curclass);
	  return null;
	};

	Credit.prototype.toString = function() {
	  return JSON.stringify(this);
	};

	Credit._meta_ =  {fields:  {}};
	Credit._meta_._class_ =  Credit;
	Credit._meta_.fields["id"] = {};
	Credit._meta_.fields["id"].type = String;
	Credit._meta_.fields["orderRef"] = {};
	Credit._meta_.fields["orderRef"].type = base_Reference;
	Credit._meta_.fields["device"] = {};
	Credit._meta_.fields["device"].type = base_Reference;
	Credit._meta_.fields["tender"] = {};
	Credit._meta_.fields["tender"].type = base_Tender;
	Credit._meta_.fields["employee"] = {};
	Credit._meta_.fields["employee"].type = base_Reference;
	Credit._meta_.fields["customers"] = {};
	Credit._meta_.fields["customers"].type = customers_Customer;
	Credit._meta_.fields["amount"] = {};
	Credit._meta_.fields["amount"].type = Number;
	Credit._meta_.fields["taxAmount"] = {};
	Credit._meta_.fields["taxAmount"].type = Number;
	Credit._meta_.fields["taxRates"] = {};
	Credit._meta_.fields["taxRates"].type = Array;
	Credit._meta_.fields["taxRates"].elementType = payments_TaxableAmountRate;
	Credit._meta_.fields["createdTime"] = {};
	Credit._meta_.fields["createdTime"].type = Number;
	Credit._meta_.fields["clientCreatedTime"] = {};
	Credit._meta_.fields["clientCreatedTime"].type = Number;
	Credit._meta_.fields["cardTransaction"] = {};
	Credit._meta_.fields["cardTransaction"].type = payments_CardTransaction;
	Credit._meta_.fields["voided"] = {};
	Credit._meta_.fields["voided"].type = Boolean;
	Credit._meta_.fields["voidReason"] = {};
	Credit._meta_.fields["voidReason"].type = String;
	Credit._meta_.fields["dccInfo"] = {};
	Credit._meta_.fields["dccInfo"].type = payments_DCCInfo;
	Credit._meta_.fields["transactionSettings"] = {};
	Credit._meta_.fields["transactionSettings"].type = payments_TransactionSettings;
	Credit._meta_.fields["creditRefunds"] = {};
	Credit._meta_.fields["creditRefunds"].type = Array;
	Credit._meta_.fields["creditRefunds"].elementType = payments_CreditRefund;
	Credit._meta_.fields["germanInfo"] = {};
	Credit._meta_.fields["germanInfo"].type = payments_GermanInfo;
	Credit._meta_.fields["appTracking"] = {};
	Credit._meta_.fields["appTracking"].type = apps_AppTracking;
	Credit._meta_.fields["result"] = {};
	Credit._meta_.fields["result"].type = payments_Result;
	Credit._meta_.fields["transactionInfo"] = {};
	Credit._meta_.fields["transactionInfo"].type = payments_TransactionInfo;
	Credit._meta_.fields["merchant"] = {};
	Credit._meta_.fields["merchant"].type = base_Reference;
	Credit._meta_.fields["externalReferenceId"] = {};
	Credit._meta_.fields["externalReferenceId"].type = String;

	//
	// Expose the module.
	//
	if (true) {
	module.exports = Credit;
	}



/***/ }),
/* 31 */
/***/ (function(module, exports, __webpack_require__) {

	var dP = __webpack_require__(20);
	var createDesc = __webpack_require__(76);
	module.exports = __webpack_require__(18) ? function (object, key, value) {
	  return dP.f(object, key, createDesc(1, value));
	} : function (object, key, value) {
	  object[key] = value;
	  return object;
	};


/***/ }),
/* 32 */
/***/ (function(module, exports, __webpack_require__) {

	var global = __webpack_require__(9);
	var hide = __webpack_require__(31);
	var has = __webpack_require__(36);
	var SRC = __webpack_require__(80)('src');
	var $toString = __webpack_require__(572);
	var TO_STRING = 'toString';
	var TPL = ('' + $toString).split(TO_STRING);

	__webpack_require__(43).inspectSource = function (it) {
	  return $toString.call(it);
	};

	(module.exports = function (O, key, val, safe) {
	  var isFunction = typeof val == 'function';
	  if (isFunction) has(val, 'name') || hide(val, 'name', key);
	  if (O[key] === val) return;
	  if (isFunction) has(val, SRC) || hide(val, SRC, O[key] ? '' + O[key] : TPL.join(String(key)));
	  if (O === global) {
	    O[key] = val;
	  } else if (!safe) {
	    delete O[key];
	    hide(O, key, val);
	  } else if (O[key]) {
	    O[key] = val;
	  } else {
	    hide(O, key, val);
	  }
	// add fake Function#toString for correct work wrapped methods / constructors with methods like LoDash isNative
	})(Function.prototype, TO_STRING, function toString() {
	  return typeof this == 'function' && this[SRC] || $toString.call(this);
	});


/***/ }),
/* 33 */
/***/ (function(module, exports, __webpack_require__) {

	var $export = __webpack_require__(1);
	var fails = __webpack_require__(10);
	var defined = __webpack_require__(50);
	var quot = /"/g;
	// B.2.3.2.1 CreateHTML(string, tag, attribute, value)
	var createHTML = function (string, tag, attribute, value) {
	  var S = String(defined(string));
	  var p1 = '<' + tag;
	  if (attribute !== '') p1 += ' ' + attribute + '="' + String(value).replace(quot, '&quot;') + '"';
	  return p1 + '>' + S + '</' + tag + '>';
	};
	module.exports = function (NAME, exec) {
	  var O = {};
	  O[NAME] = exec(createHTML);
	  $export($export.P + $export.F * fails(function () {
	    var test = ''[NAME]('"');
	    return test !== test.toLowerCase() || test.split('"').length > 3;
	  }), 'String', O);
	};


/***/ }),
/* 34 */
/***/ (function(module, exports, __webpack_require__) {

	/**
	 * Copyright (c) 2016-present, Facebook, Inc.
	 *
	 * This source code is licensed under the MIT license found in the
	 * LICENSE file in the root directory of this source tree.
	 *
	 * 
	 */

	'use strict';

	var _prodInvariant = __webpack_require__(99);

	var ReactCurrentOwner = __webpack_require__(56);

	var invariant = __webpack_require__(7);
	var warning = __webpack_require__(8);

	function isNative(fn) {
	  // Based on isNative() from Lodash
	  var funcToString = Function.prototype.toString;
	  var hasOwnProperty = Object.prototype.hasOwnProperty;
	  var reIsNative = RegExp('^' + funcToString
	  // Take an example native function source for comparison
	  .call(hasOwnProperty
	  // Strip regex characters so we can use it for regex
	  ).replace(/[\\^$.*+?()[\]{}|]/g, '\\$&'
	  // Remove hasOwnProperty from the template to make it generic
	  ).replace(/hasOwnProperty|(function).*?(?=\\\()| for .+?(?=\\\])/g, '$1.*?') + '$');
	  try {
	    var source = funcToString.call(fn);
	    return reIsNative.test(source);
	  } catch (err) {
	    return false;
	  }
	}

	var canUseCollections =
	// Array.from
	typeof Array.from === 'function' &&
	// Map
	typeof Map === 'function' && isNative(Map) &&
	// Map.prototype.keys
	Map.prototype != null && typeof Map.prototype.keys === 'function' && isNative(Map.prototype.keys) &&
	// Set
	typeof Set === 'function' && isNative(Set) &&
	// Set.prototype.keys
	Set.prototype != null && typeof Set.prototype.keys === 'function' && isNative(Set.prototype.keys);

	var setItem;
	var getItem;
	var removeItem;
	var getItemIDs;
	var addRoot;
	var removeRoot;
	var getRootIDs;

	if (canUseCollections) {
	  var itemMap = new Map();
	  var rootIDSet = new Set();

	  setItem = function (id, item) {
	    itemMap.set(id, item);
	  };
	  getItem = function (id) {
	    return itemMap.get(id);
	  };
	  removeItem = function (id) {
	    itemMap['delete'](id);
	  };
	  getItemIDs = function () {
	    return Array.from(itemMap.keys());
	  };

	  addRoot = function (id) {
	    rootIDSet.add(id);
	  };
	  removeRoot = function (id) {
	    rootIDSet['delete'](id);
	  };
	  getRootIDs = function () {
	    return Array.from(rootIDSet.keys());
	  };
	} else {
	  var itemByKey = {};
	  var rootByKey = {};

	  // Use non-numeric keys to prevent V8 performance issues:
	  // https://github.com/facebook/react/pull/7232
	  var getKeyFromID = function (id) {
	    return '.' + id;
	  };
	  var getIDFromKey = function (key) {
	    return parseInt(key.substr(1), 10);
	  };

	  setItem = function (id, item) {
	    var key = getKeyFromID(id);
	    itemByKey[key] = item;
	  };
	  getItem = function (id) {
	    var key = getKeyFromID(id);
	    return itemByKey[key];
	  };
	  removeItem = function (id) {
	    var key = getKeyFromID(id);
	    delete itemByKey[key];
	  };
	  getItemIDs = function () {
	    return Object.keys(itemByKey).map(getIDFromKey);
	  };

	  addRoot = function (id) {
	    var key = getKeyFromID(id);
	    rootByKey[key] = true;
	  };
	  removeRoot = function (id) {
	    var key = getKeyFromID(id);
	    delete rootByKey[key];
	  };
	  getRootIDs = function () {
	    return Object.keys(rootByKey).map(getIDFromKey);
	  };
	}

	var unmountedIDs = [];

	function purgeDeep(id) {
	  var item = getItem(id);
	  if (item) {
	    var childIDs = item.childIDs;

	    removeItem(id);
	    childIDs.forEach(purgeDeep);
	  }
	}

	function describeComponentFrame(name, source, ownerName) {
	  return '\n    in ' + (name || 'Unknown') + (source ? ' (at ' + source.fileName.replace(/^.*[\\\/]/, '') + ':' + source.lineNumber + ')' : ownerName ? ' (created by ' + ownerName + ')' : '');
	}

	function getDisplayName(element) {
	  if (element == null) {
	    return '#empty';
	  } else if (typeof element === 'string' || typeof element === 'number') {
	    return '#text';
	  } else if (typeof element.type === 'string') {
	    return element.type;
	  } else {
	    return element.type.displayName || element.type.name || 'Unknown';
	  }
	}

	function describeID(id) {
	  var name = ReactComponentTreeHook.getDisplayName(id);
	  var element = ReactComponentTreeHook.getElement(id);
	  var ownerID = ReactComponentTreeHook.getOwnerID(id);
	  var ownerName;
	  if (ownerID) {
	    ownerName = ReactComponentTreeHook.getDisplayName(ownerID);
	  }
	  (undefined) !== 'production' ? warning(element, 'ReactComponentTreeHook: Missing React element for debugID %s when ' + 'building stack', id) : void 0;
	  return describeComponentFrame(name, element && element._source, ownerName);
	}

	var ReactComponentTreeHook = {
	  onSetChildren: function (id, nextChildIDs) {
	    var item = getItem(id);
	    !item ? (undefined) !== 'production' ? invariant(false, 'Item must have been set') : _prodInvariant('144') : void 0;
	    item.childIDs = nextChildIDs;

	    for (var i = 0; i < nextChildIDs.length; i++) {
	      var nextChildID = nextChildIDs[i];
	      var nextChild = getItem(nextChildID);
	      !nextChild ? (undefined) !== 'production' ? invariant(false, 'Expected hook events to fire for the child before its parent includes it in onSetChildren().') : _prodInvariant('140') : void 0;
	      !(nextChild.childIDs != null || typeof nextChild.element !== 'object' || nextChild.element == null) ? (undefined) !== 'production' ? invariant(false, 'Expected onSetChildren() to fire for a container child before its parent includes it in onSetChildren().') : _prodInvariant('141') : void 0;
	      !nextChild.isMounted ? (undefined) !== 'production' ? invariant(false, 'Expected onMountComponent() to fire for the child before its parent includes it in onSetChildren().') : _prodInvariant('71') : void 0;
	      if (nextChild.parentID == null) {
	        nextChild.parentID = id;
	        // TODO: This shouldn't be necessary but mounting a new root during in
	        // componentWillMount currently causes not-yet-mounted components to
	        // be purged from our tree data so their parent id is missing.
	      }
	      !(nextChild.parentID === id) ? (undefined) !== 'production' ? invariant(false, 'Expected onBeforeMountComponent() parent and onSetChildren() to be consistent (%s has parents %s and %s).', nextChildID, nextChild.parentID, id) : _prodInvariant('142', nextChildID, nextChild.parentID, id) : void 0;
	    }
	  },
	  onBeforeMountComponent: function (id, element, parentID) {
	    var item = {
	      element: element,
	      parentID: parentID,
	      text: null,
	      childIDs: [],
	      isMounted: false,
	      updateCount: 0
	    };
	    setItem(id, item);
	  },
	  onBeforeUpdateComponent: function (id, element) {
	    var item = getItem(id);
	    if (!item || !item.isMounted) {
	      // We may end up here as a result of setState() in componentWillUnmount().
	      // In this case, ignore the element.
	      return;
	    }
	    item.element = element;
	  },
	  onMountComponent: function (id) {
	    var item = getItem(id);
	    !item ? (undefined) !== 'production' ? invariant(false, 'Item must have been set') : _prodInvariant('144') : void 0;
	    item.isMounted = true;
	    var isRoot = item.parentID === 0;
	    if (isRoot) {
	      addRoot(id);
	    }
	  },
	  onUpdateComponent: function (id) {
	    var item = getItem(id);
	    if (!item || !item.isMounted) {
	      // We may end up here as a result of setState() in componentWillUnmount().
	      // In this case, ignore the element.
	      return;
	    }
	    item.updateCount++;
	  },
	  onUnmountComponent: function (id) {
	    var item = getItem(id);
	    if (item) {
	      // We need to check if it exists.
	      // `item` might not exist if it is inside an error boundary, and a sibling
	      // error boundary child threw while mounting. Then this instance never
	      // got a chance to mount, but it still gets an unmounting event during
	      // the error boundary cleanup.
	      item.isMounted = false;
	      var isRoot = item.parentID === 0;
	      if (isRoot) {
	        removeRoot(id);
	      }
	    }
	    unmountedIDs.push(id);
	  },
	  purgeUnmountedComponents: function () {
	    if (ReactComponentTreeHook._preventPurging) {
	      // Should only be used for testing.
	      return;
	    }

	    for (var i = 0; i < unmountedIDs.length; i++) {
	      var id = unmountedIDs[i];
	      purgeDeep(id);
	    }
	    unmountedIDs.length = 0;
	  },
	  isMounted: function (id) {
	    var item = getItem(id);
	    return item ? item.isMounted : false;
	  },
	  getCurrentStackAddendum: function (topElement) {
	    var info = '';
	    if (topElement) {
	      var name = getDisplayName(topElement);
	      var owner = topElement._owner;
	      info += describeComponentFrame(name, topElement._source, owner && owner.getName());
	    }

	    var currentOwner = ReactCurrentOwner.current;
	    var id = currentOwner && currentOwner._debugID;

	    info += ReactComponentTreeHook.getStackAddendumByID(id);
	    return info;
	  },
	  getStackAddendumByID: function (id) {
	    var info = '';
	    while (id) {
	      info += describeID(id);
	      id = ReactComponentTreeHook.getParentID(id);
	    }
	    return info;
	  },
	  getChildIDs: function (id) {
	    var item = getItem(id);
	    return item ? item.childIDs : [];
	  },
	  getDisplayName: function (id) {
	    var element = ReactComponentTreeHook.getElement(id);
	    if (!element) {
	      return null;
	    }
	    return getDisplayName(element);
	  },
	  getElement: function (id) {
	    var item = getItem(id);
	    return item ? item.element : null;
	  },
	  getOwnerID: function (id) {
	    var element = ReactComponentTreeHook.getElement(id);
	    if (!element || !element._owner) {
	      return null;
	    }
	    return element._owner._debugID;
	  },
	  getParentID: function (id) {
	    var item = getItem(id);
	    return item ? item.parentID : null;
	  },
	  getSource: function (id) {
	    var item = getItem(id);
	    var element = item ? item.element : null;
	    var source = element != null ? element._source : null;
	    return source;
	  },
	  getText: function (id) {
	    var element = ReactComponentTreeHook.getElement(id);
	    if (typeof element === 'string') {
	      return element;
	    } else if (typeof element === 'number') {
	      return '' + element;
	    } else {
	      return null;
	    }
	  },
	  getUpdateCount: function (id) {
	    var item = getItem(id);
	    return item ? item.updateCount : 0;
	  },


	  getRootIDs: getRootIDs,
	  getRegisteredIDs: getItemIDs,

	  pushNonStandardWarningStack: function (isCreatingElement, currentSource) {
	    if (typeof console.reactStack !== 'function') {
	      return;
	    }

	    var stack = [];
	    var currentOwner = ReactCurrentOwner.current;
	    var id = currentOwner && currentOwner._debugID;

	    try {
	      if (isCreatingElement) {
	        stack.push({
	          name: id ? ReactComponentTreeHook.getDisplayName(id) : null,
	          fileName: currentSource ? currentSource.fileName : null,
	          lineNumber: currentSource ? currentSource.lineNumber : null
	        });
	      }

	      while (id) {
	        var element = ReactComponentTreeHook.getElement(id);
	        var parentID = ReactComponentTreeHook.getParentID(id);
	        var ownerID = ReactComponentTreeHook.getOwnerID(id);
	        var ownerName = ownerID ? ReactComponentTreeHook.getDisplayName(ownerID) : null;
	        var source = element && element._source;
	        stack.push({
	          name: ownerName,
	          fileName: source ? source.fileName : null,
	          lineNumber: source ? source.lineNumber : null
	        });
	        id = parentID;
	      }
	    } catch (err) {
	      // Internal state is messed up.
	      // Stop building the stack (it's just a nice to have).
	    }

	    console.reactStack(stack);
	  },
	  popNonStandardWarningStack: function () {
	    if (typeof console.reactStackEnd !== 'function') {
	      return;
	    }
	    console.reactStackEnd();
	  }
	};

	module.exports = ReactComponentTreeHook;

/***/ }),
/* 35 */
/***/ (function(module, exports, __webpack_require__) {

	module.exports.sdk = sdk;
	/**
	 * @namespace base
	 */
	function sdk() {}

	sdk.apps = __webpack_require__(924);
	sdk.base = __webpack_require__(931);
	sdk.customers = __webpack_require__(937);
	sdk.device = __webpack_require__(954);
	sdk.employees = __webpack_require__(961);
	sdk.hours = __webpack_require__(962);
	sdk.inventory = __webpack_require__(977);
	sdk.order = __webpack_require__(997);
	sdk.pay = __webpack_require__(998);
	sdk.payments = __webpack_require__(1023);
	sdk.printer = __webpack_require__(1024);
	sdk.remotemessage = __webpack_require__(1142);
	sdk.remotepay = __webpack_require__(1222);
	sdk.merchant = __webpack_require__(980);
	sdk.loyalty = __webpack_require__(979);
	//
	// Expose the module.
	//
	if (true) {
	    module.exports = sdk;
	}

/***/ }),
/* 36 */
/***/ (function(module, exports) {

	var hasOwnProperty = {}.hasOwnProperty;
	module.exports = function (it, key) {
	  return hasOwnProperty.call(it, key);
	};


/***/ }),
/* 37 */
/***/ (function(module, exports, __webpack_require__) {

	var pIE = __webpack_require__(108);
	var createDesc = __webpack_require__(76);
	var toIObject = __webpack_require__(39);
	var toPrimitive = __webpack_require__(52);
	var has = __webpack_require__(36);
	var IE8_DOM_DEFINE = __webpack_require__(296);
	var gOPD = Object.getOwnPropertyDescriptor;

	exports.f = __webpack_require__(18) ? gOPD : function getOwnPropertyDescriptor(O, P) {
	  O = toIObject(O);
	  P = toPrimitive(P, true);
	  if (IE8_DOM_DEFINE) try {
	    return gOPD(O, P);
	  } catch (e) { /* empty */ }
	  if (has(O, P)) return createDesc(!pIE.f.call(O, P), O[P]);
	};


/***/ }),
/* 38 */
/***/ (function(module, exports, __webpack_require__) {

	// 19.1.2.9 / 15.2.3.2 Object.getPrototypeOf(O)
	var has = __webpack_require__(36);
	var toObject = __webpack_require__(22);
	var IE_PROTO = __webpack_require__(197)('IE_PROTO');
	var ObjectProto = Object.prototype;

	module.exports = Object.getPrototypeOf || function (O) {
	  O = toObject(O);
	  if (has(O, IE_PROTO)) return O[IE_PROTO];
	  if (typeof O.constructor == 'function' && O instanceof O.constructor) {
	    return O.constructor.prototype;
	  } return O instanceof Object ? ObjectProto : null;
	};


/***/ }),
/* 39 */
/***/ (function(module, exports, __webpack_require__) {

	// to indexed object, toObject with fallback for non-array-like ES3 strings
	var IObject = __webpack_require__(107);
	var defined = __webpack_require__(50);
	module.exports = function (it) {
	  return IObject(defined(it));
	};


/***/ }),
/* 40 */
/***/ (function(module, exports, __webpack_require__) {

	/**
	 * Copyright (c) 2016-present, Facebook, Inc.
	 *
	 * This source code is licensed under the MIT license found in the
	 * LICENSE file in the root directory of this source tree.
	 *
	 * 
	 */

	'use strict';

	// Trust the developer to only use ReactInstrumentation with a __DEV__ check

	var debugTool = null;

	if ((undefined) !== 'production') {
	  var ReactDebugTool = __webpack_require__(830);
	  debugTool = ReactDebugTool;
	}

	module.exports = { debugTool: debugTool };

/***/ }),
/* 41 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';

	Object.defineProperty(exports, "__esModule", {
	    value: true
	});

	var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

	var _react = __webpack_require__(4);

	var _react2 = _interopRequireDefault(_react);

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

	function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

	function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

	var ButtonNormal = function (_React$Component) {
	    _inherits(ButtonNormal, _React$Component);

	    function ButtonNormal(props) {
	        _classCallCheck(this, ButtonNormal);

	        return _possibleConstructorReturn(this, (ButtonNormal.__proto__ || Object.getPrototypeOf(ButtonNormal)).call(this, props));
	    }

	    _createClass(ButtonNormal, [{
	        key: 'render',
	        value: function render() {
	            var color = this.props.color;
	            var extraClassNames = this.props.extra;
	            var onClick = this.props.onClick;
	            var title = this.props.title;

	            var disabled = false;
	            if (this.props.disabled !== undefined) {
	                disabled = this.props.disabled;
	            }

	            var className = 'normal_button button_white';
	            if (color == 'green') {
	                className = 'normal_button button_green';
	            } else if (color == 'red') {
	                className = 'normal_button button_red';
	            }
	            className += ' ' + extraClassNames;

	            return _react2.default.createElement(
	                'button',
	                { className: className, onClick: onClick, disabled: disabled },
	                title
	            );
	        }
	    }]);

	    return ButtonNormal;
	}(_react2.default.Component);

	exports.default = ButtonNormal;

/***/ }),
/* 42 */
/***/ (function(module, exports) {

	var toString = {}.toString;

	module.exports = function (it) {
	  return toString.call(it).slice(8, -1);
	};


/***/ }),
/* 43 */
/***/ (function(module, exports) {

	var core = module.exports = { version: '2.6.12' };
	if (typeof __e == 'number') __e = core; // eslint-disable-line no-undef


/***/ }),
/* 44 */
/***/ (function(module, exports, __webpack_require__) {

	// optional / simple context binding
	var aFunction = __webpack_require__(28);
	module.exports = function (fn, that, length) {
	  aFunction(fn);
	  if (that === undefined) return fn;
	  switch (length) {
	    case 1: return function (a) {
	      return fn.call(that, a);
	    };
	    case 2: return function (a, b) {
	      return fn.call(that, a, b);
	    };
	    case 3: return function (a, b, c) {
	      return fn.call(that, a, b, c);
	    };
	  }
	  return function (/* ...args */) {
	    return fn.apply(that, arguments);
	  };
	};


/***/ }),
/* 45 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';
	var fails = __webpack_require__(10);

	module.exports = function (method, arg) {
	  return !!method && fails(function () {
	    // eslint-disable-next-line no-useless-call
	    arg ? method.call(null, function () { /* empty */ }, 1) : method.call(null);
	  });
	};


/***/ }),
/* 46 */
/***/ (function(module, exports) {

	// 7.1.4 ToInteger
	var ceil = Math.ceil;
	var floor = Math.floor;
	module.exports = function (it) {
	  return isNaN(it = +it) ? 0 : (it > 0 ? floor : ceil)(it);
	};


/***/ }),
/* 47 */
/***/ (function(module, exports) {

	/*
	 *  Copyright (c) 2016 The WebRTC project authors. All Rights Reserved.
	 *
	 *  Use of this source code is governed by a BSD-style license
	 *  that can be found in the LICENSE file in the root of the source
	 *  tree.
	 */
	 /* eslint-env node */
	'use strict';

	var logDisabled_ = true;

	// Utility methods.
	var utils = {
	  disableLog: function(bool) {
	    if (typeof bool !== 'boolean') {
	      return new Error('Argument type: ' + typeof bool +
	          '. Please use a boolean.');
	    }
	    logDisabled_ = bool;
	    return (bool) ? 'adapter.js logging disabled' :
	        'adapter.js logging enabled';
	  },

	  log: function() {
	    if (typeof window === 'object') {
	      if (logDisabled_) {
	        return;
	      }
	      if (typeof console !== 'undefined' && typeof console.log === 'function') {
	        console.log.apply(console, arguments);
	      }
	    }
	  },

	  /**
	   * Extract browser version out of the provided user agent string.
	   *
	   * @param {!string} uastring userAgent string.
	   * @param {!string} expr Regular expression used as match criteria.
	   * @param {!number} pos position in the version string to be returned.
	   * @return {!number} browser version.
	   */
	  extractVersion: function(uastring, expr, pos) {
	    var match = uastring.match(expr);
	    return match && match.length >= pos && parseInt(match[pos], 10);
	  },

	  /**
	   * Browser detector.
	   *
	   * @return {object} result containing browser and version
	   *     properties.
	   */
	  detectBrowser: function() {
	    // Returned result object.
	    var result = {};
	    result.browser = null;
	    result.version = null;

	    // Fail early if it's not a browser
	    if (typeof window === 'undefined' || !window.navigator) {
	      result.browser = 'Not a browser.';
	      return result;
	    }

	    // Firefox.
	    if (navigator.mozGetUserMedia) {
	      result.browser = 'firefox';
	      result.version = this.extractVersion(navigator.userAgent,
	          /Firefox\/([0-9]+)\./, 1);

	    // all webkit-based browsers
	    } else if (navigator.webkitGetUserMedia) {
	      // Chrome, Chromium, Webview, Opera, all use the chrome shim for now
	      if (window.webkitRTCPeerConnection) {
	        result.browser = 'chrome';
	        result.version = this.extractVersion(navigator.userAgent,
	          /Chrom(e|ium)\/([0-9]+)\./, 2);

	      // Safari or unknown webkit-based
	      // for the time being Safari has support for MediaStreams but not webRTC
	      } else {
	        // Safari UA substrings of interest for reference:
	        // - webkit version:           AppleWebKit/602.1.25 (also used in Op,Cr)
	        // - safari UI version:        Version/9.0.3 (unique to Safari)
	        // - safari UI webkit version: Safari/601.4.4 (also used in Op,Cr)
	        //
	        // if the webkit version and safari UI webkit versions are equals,
	        // ... this is a stable version.
	        //
	        // only the internal webkit version is important today to know if
	        // media streams are supported
	        //
	        if (navigator.userAgent.match(/Version\/(\d+).(\d+)/)) {
	          result.browser = 'safari';
	          result.version = this.extractVersion(navigator.userAgent,
	            /AppleWebKit\/([0-9]+)\./, 1);

	        // unknown webkit-based browser
	        } else {
	          result.browser = 'Unsupported webkit-based browser ' +
	              'with GUM support but no WebRTC support.';
	          return result;
	        }
	      }

	    // Edge.
	    } else if (navigator.mediaDevices &&
	        navigator.userAgent.match(/Edge\/(\d+).(\d+)$/)) {
	      result.browser = 'edge';
	      result.version = this.extractVersion(navigator.userAgent,
	          /Edge\/(\d+).(\d+)$/, 2);

	    // Default fallthrough: not supported.
	    } else {
	      result.browser = 'Not a supported browser.';
	      return result;
	    }

	    return result;
	  }
	};

	// Export.
	module.exports = {
	  log: utils.log,
	  disableLog: utils.disableLog,
	  browserDetails: utils.detectBrowser(),
	  extractVersion: utils.extractVersion
	};


/***/ }),
/* 48 */
/***/ (function(module, exports, __webpack_require__) {

	"use strict";
	var __extends = (this && this.__extends) || (function () {
	    var extendStatics = function (d, b) {
	        extendStatics = Object.setPrototypeOf ||
	            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
	            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
	        return extendStatics(d, b);
	    };
	    return function (d, b) {
	        extendStatics(d, b);
	        function __() { this.constructor = d; }
	        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
	    };
	})();
	Object.defineProperty(exports, "__esModule", { value: true });
	exports.Logger = void 0;
	var events_1 = __webpack_require__(769);
	var DebugConfig_1 = __webpack_require__(502);
	/**
	 * A simple logging utility that uses the underlying console.
	 */
	var Logger = /** @class */ (function (_super) {
	    __extends(Logger, _super);
	    function Logger() {
	        var _this = _super.call(this) || this;
	        _this.enabled = false;
	        return _this;
	    }
	    Logger.create = function () {
	        var log = new Logger();
	        var errString = "error";
	        log.on("log", toConsole);
	        log.silly = log.emit.bind(log, "log", "silly");
	        log.verbose = log.emit.bind(log, "log", "verbose");
	        log.info = log.emit.bind(log, "log", "info");
	        log.warn = log.emit.bind(log, "log", "warn");
	        log.error = log.emit.bind(log, "log", errString);
	        log.debug = log.emit.bind(log, "log", "debug");
	        log.enabled = false;
	        return log;
	        function toConsole() {
	            var args = [].slice.call(arguments), errorLog = args && args.length > 0 ? args[0] === errString : false;
	            if (errorLog || log.enabled || DebugConfig_1.DebugConfig.loggingEnabled) {
	                console.log.apply(console, arguments);
	                if (errorLog) {
	                    console.trace();
	                }
	            }
	        }
	    };
	    Logger.prototype.silly = function () {
	        var any = [];
	        for (var _i = 0; _i < arguments.length; _i++) {
	            any[_i] = arguments[_i];
	        }
	    };
	    Logger.prototype.verbose = function () {
	        var any = [];
	        for (var _i = 0; _i < arguments.length; _i++) {
	            any[_i] = arguments[_i];
	        }
	    };
	    Logger.prototype.info = function () {
	        var any = [];
	        for (var _i = 0; _i < arguments.length; _i++) {
	            any[_i] = arguments[_i];
	        }
	    };
	    Logger.prototype.warn = function () {
	        var any = [];
	        for (var _i = 0; _i < arguments.length; _i++) {
	            any[_i] = arguments[_i];
	        }
	    };
	    Logger.prototype.error = function () {
	        var any = [];
	        for (var _i = 0; _i < arguments.length; _i++) {
	            any[_i] = arguments[_i];
	        }
	    };
	    Logger.prototype.debug = function () {
	        var any = [];
	        for (var _i = 0; _i < arguments.length; _i++) {
	            any[_i] = arguments[_i];
	        }
	    };
	    return Logger;
	}(events_1.EventEmitter));
	exports.Logger = Logger;

	//# sourceMappingURL=../../../../../maps/com/clover/remote/client/util/Logger.js.map


/***/ }),
/* 49 */
/***/ (function(module, exports, __webpack_require__) {

	// 0 -> Array#forEach
	// 1 -> Array#map
	// 2 -> Array#filter
	// 3 -> Array#some
	// 4 -> Array#every
	// 5 -> Array#find
	// 6 -> Array#findIndex
	var ctx = __webpack_require__(44);
	var IObject = __webpack_require__(107);
	var toObject = __webpack_require__(22);
	var toLength = __webpack_require__(17);
	var asc = __webpack_require__(181);
	module.exports = function (TYPE, $create) {
	  var IS_MAP = TYPE == 1;
	  var IS_FILTER = TYPE == 2;
	  var IS_SOME = TYPE == 3;
	  var IS_EVERY = TYPE == 4;
	  var IS_FIND_INDEX = TYPE == 6;
	  var NO_HOLES = TYPE == 5 || IS_FIND_INDEX;
	  var create = $create || asc;
	  return function ($this, callbackfn, that) {
	    var O = toObject($this);
	    var self = IObject(O);
	    var f = ctx(callbackfn, that, 3);
	    var length = toLength(self.length);
	    var index = 0;
	    var result = IS_MAP ? create($this, length) : IS_FILTER ? create($this, 0) : undefined;
	    var val, res;
	    for (;length > index; index++) if (NO_HOLES || index in self) {
	      val = self[index];
	      res = f(val, index, O);
	      if (TYPE) {
	        if (IS_MAP) result[index] = res;   // map
	        else if (res) switch (TYPE) {
	          case 3: return true;             // some
	          case 5: return val;              // find
	          case 6: return index;            // findIndex
	          case 2: result.push(val);        // filter
	        } else if (IS_EVERY) return false; // every
	      }
	    }
	    return IS_FIND_INDEX ? -1 : IS_SOME || IS_EVERY ? IS_EVERY : result;
	  };
	};


/***/ }),
/* 50 */
/***/ (function(module, exports) {

	// 7.2.1 RequireObjectCoercible(argument)
	module.exports = function (it) {
	  if (it == undefined) throw TypeError("Can't call method on  " + it);
	  return it;
	};


/***/ }),
/* 51 */
/***/ (function(module, exports, __webpack_require__) {

	// most Object methods by ES6 should accept primitives
	var $export = __webpack_require__(1);
	var core = __webpack_require__(43);
	var fails = __webpack_require__(10);
	module.exports = function (KEY, exec) {
	  var fn = (core.Object || {})[KEY] || Object[KEY];
	  var exp = {};
	  exp[KEY] = exec(fn);
	  $export($export.S + $export.F * fails(function () { fn(1); }), 'Object', exp);
	};


/***/ }),
/* 52 */
/***/ (function(module, exports, __webpack_require__) {

	// 7.1.1 ToPrimitive(input [, PreferredType])
	var isObject = __webpack_require__(12);
	// instead of the ES6 spec version, we didn't implement @@toPrimitive case
	// and the second argument - flag - preferred type is a string
	module.exports = function (it, S) {
	  if (!isObject(it)) return it;
	  var fn, val;
	  if (S && typeof (fn = it.toString) == 'function' && !isObject(val = fn.call(it))) return val;
	  if (typeof (fn = it.valueOf) == 'function' && !isObject(val = fn.call(it))) return val;
	  if (!S && typeof (fn = it.toString) == 'function' && !isObject(val = fn.call(it))) return val;
	  throw TypeError("Can't convert object to primitive value");
	};


/***/ }),
/* 53 */
/***/ (function(module, exports) {

	"use strict";

	/**
	 * Copyright (c) 2013-present, Facebook, Inc.
	 *
	 * This source code is licensed under the MIT license found in the
	 * LICENSE file in the root directory of this source tree.
	 *
	 * 
	 */

	function makeEmptyFunction(arg) {
	  return function () {
	    return arg;
	  };
	}

	/**
	 * This function accepts and discards inputs; it has no side effects. This is
	 * primarily useful idiomatically for overridable function endpoints which
	 * always need to be callable, since JS lacks a null-call idiom ala Cocoa.
	 */
	var emptyFunction = function emptyFunction() {};

	emptyFunction.thatReturns = makeEmptyFunction;
	emptyFunction.thatReturnsFalse = makeEmptyFunction(false);
	emptyFunction.thatReturnsTrue = makeEmptyFunction(true);
	emptyFunction.thatReturnsNull = makeEmptyFunction(null);
	emptyFunction.thatReturnsThis = function () {
	  return this;
	};
	emptyFunction.thatReturnsArgument = function (arg) {
	  return arg;
	};

	module.exports = emptyFunction;

/***/ }),
/* 54 */
/***/ (function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2014-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 */

	'use strict';

	/**
	 * Similar to invariant but only logs a warning if the condition is not met.
	 * This can be used to log issues in development environments in critical
	 * paths. Removing the logging code for production environments will keep the
	 * same logic and follow the same code paths.
	 */

	var warning = function() {};

	if ((undefined) !== 'production') {
	  warning = function(condition, format, args) {
	    var len = arguments.length;
	    args = new Array(len > 2 ? len - 2 : 0);
	    for (var key = 2; key < len; key++) {
	      args[key - 2] = arguments[key];
	    }
	    if (format === undefined) {
	      throw new Error(
	        '`warning(condition, format, ...args)` requires a warning ' +
	        'message argument'
	      );
	    }

	    if (format.length < 10 || (/^[s\W]*$/).test(format)) {
	      throw new Error(
	        'The warning format should be able to uniquely identify this ' +
	        'warning. Please, use a more descriptive format than: ' + format
	      );
	    }

	    if (!condition) {
	      var argIndex = 0;
	      var message = 'Warning: ' +
	        format.replace(/%s/g, function() {
	          return args[argIndex++];
	        });
	      if (typeof console !== 'undefined') {
	        console.error(message);
	      }
	      try {
	        // This error was thrown as a convenience so that you can use this stack
	        // to find the callsite that caused this warning to fire.
	        throw new Error(message);
	      } catch(x) {}
	    }
	  };
	}

	module.exports = warning;


/***/ }),
/* 55 */
/***/ (function(module, exports, __webpack_require__) {

	/**
	 * Copyright (c) 2013-present, Facebook, Inc.
	 *
	 * This source code is licensed under the MIT license found in the
	 * LICENSE file in the root directory of this source tree.
	 *
	 */

	'use strict';

	var _prodInvariant = __webpack_require__(13),
	    _assign = __webpack_require__(19);

	var CallbackQueue = __webpack_require__(340);
	var PooledClass = __webpack_require__(83);
	var ReactFeatureFlags = __webpack_require__(345);
	var ReactReconciler = __webpack_require__(96);
	var Transaction = __webpack_require__(147);

	var invariant = __webpack_require__(7);

	var dirtyComponents = [];
	var updateBatchNumber = 0;
	var asapCallbackQueue = CallbackQueue.getPooled();
	var asapEnqueued = false;

	var batchingStrategy = null;

	function ensureInjected() {
	  !(ReactUpdates.ReactReconcileTransaction && batchingStrategy) ? (undefined) !== 'production' ? invariant(false, 'ReactUpdates: must inject a reconcile transaction class and batching strategy') : _prodInvariant('123') : void 0;
	}

	var NESTED_UPDATES = {
	  initialize: function () {
	    this.dirtyComponentsLength = dirtyComponents.length;
	  },
	  close: function () {
	    if (this.dirtyComponentsLength !== dirtyComponents.length) {
	      // Additional updates were enqueued by componentDidUpdate handlers or
	      // similar; before our own UPDATE_QUEUEING wrapper closes, we want to run
	      // these new updates so that if A's componentDidUpdate calls setState on
	      // B, B will update before the callback A's updater provided when calling
	      // setState.
	      dirtyComponents.splice(0, this.dirtyComponentsLength);
	      flushBatchedUpdates();
	    } else {
	      dirtyComponents.length = 0;
	    }
	  }
	};

	var UPDATE_QUEUEING = {
	  initialize: function () {
	    this.callbackQueue.reset();
	  },
	  close: function () {
	    this.callbackQueue.notifyAll();
	  }
	};

	var TRANSACTION_WRAPPERS = [NESTED_UPDATES, UPDATE_QUEUEING];

	function ReactUpdatesFlushTransaction() {
	  this.reinitializeTransaction();
	  this.dirtyComponentsLength = null;
	  this.callbackQueue = CallbackQueue.getPooled();
	  this.reconcileTransaction = ReactUpdates.ReactReconcileTransaction.getPooled(
	  /* useCreateElement */true);
	}

	_assign(ReactUpdatesFlushTransaction.prototype, Transaction, {
	  getTransactionWrappers: function () {
	    return TRANSACTION_WRAPPERS;
	  },

	  destructor: function () {
	    this.dirtyComponentsLength = null;
	    CallbackQueue.release(this.callbackQueue);
	    this.callbackQueue = null;
	    ReactUpdates.ReactReconcileTransaction.release(this.reconcileTransaction);
	    this.reconcileTransaction = null;
	  },

	  perform: function (method, scope, a) {
	    // Essentially calls `this.reconcileTransaction.perform(method, scope, a)`
	    // with this transaction's wrappers around it.
	    return Transaction.perform.call(this, this.reconcileTransaction.perform, this.reconcileTransaction, method, scope, a);
	  }
	});

	PooledClass.addPoolingTo(ReactUpdatesFlushTransaction);

	function batchedUpdates(callback, a, b, c, d, e) {
	  ensureInjected();
	  return batchingStrategy.batchedUpdates(callback, a, b, c, d, e);
	}

	/**
	 * Array comparator for ReactComponents by mount ordering.
	 *
	 * @param {ReactComponent} c1 first component you're comparing
	 * @param {ReactComponent} c2 second component you're comparing
	 * @return {number} Return value usable by Array.prototype.sort().
	 */
	function mountOrderComparator(c1, c2) {
	  return c1._mountOrder - c2._mountOrder;
	}

	function runBatchedUpdates(transaction) {
	  var len = transaction.dirtyComponentsLength;
	  !(len === dirtyComponents.length) ? (undefined) !== 'production' ? invariant(false, 'Expected flush transaction\'s stored dirty-components length (%s) to match dirty-components array length (%s).', len, dirtyComponents.length) : _prodInvariant('124', len, dirtyComponents.length) : void 0;

	  // Since reconciling a component higher in the owner hierarchy usually (not
	  // always -- see shouldComponentUpdate()) will reconcile children, reconcile
	  // them before their children by sorting the array.
	  dirtyComponents.sort(mountOrderComparator);

	  // Any updates enqueued while reconciling must be performed after this entire
	  // batch. Otherwise, if dirtyComponents is [A, B] where A has children B and
	  // C, B could update twice in a single batch if C's render enqueues an update
	  // to B (since B would have already updated, we should skip it, and the only
	  // way we can know to do so is by checking the batch counter).
	  updateBatchNumber++;

	  for (var i = 0; i < len; i++) {
	    // If a component is unmounted before pending changes apply, it will still
	    // be here, but we assume that it has cleared its _pendingCallbacks and
	    // that performUpdateIfNecessary is a noop.
	    var component = dirtyComponents[i];

	    // If performUpdateIfNecessary happens to enqueue any new updates, we
	    // shouldn't execute the callbacks until the next render happens, so
	    // stash the callbacks first
	    var callbacks = component._pendingCallbacks;
	    component._pendingCallbacks = null;

	    var markerName;
	    if (ReactFeatureFlags.logTopLevelRenders) {
	      var namedComponent = component;
	      // Duck type TopLevelWrapper. This is probably always true.
	      if (component._currentElement.type.isReactTopLevelWrapper) {
	        namedComponent = component._renderedComponent;
	      }
	      markerName = 'React update: ' + namedComponent.getName();
	      console.time(markerName);
	    }

	    ReactReconciler.performUpdateIfNecessary(component, transaction.reconcileTransaction, updateBatchNumber);

	    if (markerName) {
	      console.timeEnd(markerName);
	    }

	    if (callbacks) {
	      for (var j = 0; j < callbacks.length; j++) {
	        transaction.callbackQueue.enqueue(callbacks[j], component.getPublicInstance());
	      }
	    }
	  }
	}

	var flushBatchedUpdates = function () {
	  // ReactUpdatesFlushTransaction's wrappers will clear the dirtyComponents
	  // array and perform any updates enqueued by mount-ready handlers (i.e.,
	  // componentDidUpdate) but we need to check here too in order to catch
	  // updates enqueued by setState callbacks and asap calls.
	  while (dirtyComponents.length || asapEnqueued) {
	    if (dirtyComponents.length) {
	      var transaction = ReactUpdatesFlushTransaction.getPooled();
	      transaction.perform(runBatchedUpdates, null, transaction);
	      ReactUpdatesFlushTransaction.release(transaction);
	    }

	    if (asapEnqueued) {
	      asapEnqueued = false;
	      var queue = asapCallbackQueue;
	      asapCallbackQueue = CallbackQueue.getPooled();
	      queue.notifyAll();
	      CallbackQueue.release(queue);
	    }
	  }
	};

	/**
	 * Mark a component as needing a rerender, adding an optional callback to a
	 * list of functions which will be executed once the rerender occurs.
	 */
	function enqueueUpdate(component) {
	  ensureInjected();

	  // Various parts of our code (such as ReactCompositeComponent's
	  // _renderValidatedComponent) assume that calls to render aren't nested;
	  // verify that that's the case. (This is called by each top-level update
	  // function, like setState, forceUpdate, etc.; creation and
	  // destruction of top-level components is guarded in ReactMount.)

	  if (!batchingStrategy.isBatchingUpdates) {
	    batchingStrategy.batchedUpdates(enqueueUpdate, component);
	    return;
	  }

	  dirtyComponents.push(component);
	  if (component._updateBatchNumber == null) {
	    component._updateBatchNumber = updateBatchNumber + 1;
	  }
	}

	/**
	 * Enqueue a callback to be run at the end of the current batching cycle. Throws
	 * if no updates are currently being performed.
	 */
	function asap(callback, context) {
	  invariant(batchingStrategy.isBatchingUpdates, "ReactUpdates.asap: Can't enqueue an asap callback in a context where" + 'updates are not being batched.');
	  asapCallbackQueue.enqueue(callback, context);
	  asapEnqueued = true;
	}

	var ReactUpdatesInjection = {
	  injectReconcileTransaction: function (ReconcileTransaction) {
	    !ReconcileTransaction ? (undefined) !== 'production' ? invariant(false, 'ReactUpdates: must provide a reconcile transaction class') : _prodInvariant('126') : void 0;
	    ReactUpdates.ReactReconcileTransaction = ReconcileTransaction;
	  },

	  injectBatchingStrategy: function (_batchingStrategy) {
	    !_batchingStrategy ? (undefined) !== 'production' ? invariant(false, 'ReactUpdates: must provide a batching strategy') : _prodInvariant('127') : void 0;
	    !(typeof _batchingStrategy.batchedUpdates === 'function') ? (undefined) !== 'production' ? invariant(false, 'ReactUpdates: must provide a batchedUpdates() function') : _prodInvariant('128') : void 0;
	    !(typeof _batchingStrategy.isBatchingUpdates === 'boolean') ? (undefined) !== 'production' ? invariant(false, 'ReactUpdates: must provide an isBatchingUpdates boolean attribute') : _prodInvariant('129') : void 0;
	    batchingStrategy = _batchingStrategy;
	  }
	};

	var ReactUpdates = {
	  /**
	   * React references `ReactReconcileTransaction` using this property in order
	   * to allow dependency injection.
	   *
	   * @internal
	   */
	  ReactReconcileTransaction: null,

	  batchedUpdates: batchedUpdates,
	  enqueueUpdate: enqueueUpdate,
	  flushBatchedUpdates: flushBatchedUpdates,
	  injection: ReactUpdatesInjection,
	  asap: asap
	};

	module.exports = ReactUpdates;

/***/ }),
/* 56 */
/***/ (function(module, exports) {

	/**
	 * Copyright (c) 2013-present, Facebook, Inc.
	 *
	 * This source code is licensed under the MIT license found in the
	 * LICENSE file in the root directory of this source tree.
	 *
	 * 
	 */

	'use strict';

	/**
	 * Keeps track of the current owner.
	 *
	 * The current owner is the component who should own any components that are
	 * currently being constructed.
	 */
	var ReactCurrentOwner = {
	  /**
	   * @internal
	   * @type {ReactComponent}
	   */
	  current: null
	};

	module.exports = ReactCurrentOwner;

/***/ }),
/* 57 */
/***/ (function(module, exports, __webpack_require__) {

	// These exports expose the v1 interface and objects.
	var sdk = __webpack_require__(35);

	var base = sdk.base;
	var customers = sdk.customers;
	var device = sdk.device;
	var hours = sdk.hours;
	var inventory = sdk.inventory;
	var order = sdk.order;
	var payments = sdk.payments;
	var printer = sdk.printer;
	var remotepay = sdk.remotepay;
	var remotemessage = sdk.remotemessage;
	var loyalty = sdk.loyalty;

	// These exports expose the beta method of using the Clover device
	var CloverID = __webpack_require__(1224);

	// These exports expose the CloverConnector and supporting objects
	var CloverConnector = __webpack_require__(171).CloverConnector;
	var CloverDeviceFactory = __webpack_require__(498).CloverDeviceFactory;

	var Logger = __webpack_require__(48).Logger;
	var DebugConfig = __webpack_require__(502).DebugConfig;
	var HttpSupport = __webpack_require__(277).HttpSupport;
	var ImageUtil = __webpack_require__(172).ImageUtil;

	var WebSocketCloverDeviceConfiguration = __webpack_require__(275).WebSocketCloverDeviceConfiguration;
	var WebSocketPairedCloverDeviceConfiguration = __webpack_require__(500).WebSocketPairedCloverDeviceConfiguration;
	var WebSocketPairedCloverDeviceConfigurationBuilder = __webpack_require__(500).WebSocketPairedCloverDeviceConfigurationBuilder;
	var WebSocketCloudCloverDeviceConfiguration = __webpack_require__(274).WebSocketCloudCloverDeviceConfiguration;
	var WebSocketCloudCloverDeviceConfigurationBuilder = __webpack_require__(274).WebSocketCloudCloverDeviceConfigurationBuilder;

	var CloverTransport = __webpack_require__(501).CloverTransport;
	var CloverTransportObserver = __webpack_require__(1233).CloverTransportObserver;
	var WebSocketCloverTransport = __webpack_require__(276).WebSocketCloverTransport;
	var WebSocketState = __webpack_require__(174).WebSocketState;
	var CloverWebSocketInterface = __webpack_require__(505).CloverWebSocketInterface;
	var BrowserWebSocketImpl = __webpack_require__(173).BrowserWebSocketImpl;
	var JSONToCustomObject = __webpack_require__(494).JSONToCustomObject;
	var Version = __webpack_require__(493).Version;

	var CloverConnectorFactoryBuilder = __webpack_require__(1227).CloverConnectorFactoryBuilder;
	var ICloverConnectorFactory = __webpack_require__(1229).ICloverConnectorFactory;
	var LoyaltyDataTypes = __webpack_require__(1232).LoyaltyDataTypes;
	// Following is exported explicitly because of backwards compatibility
	var CloverConnectorFactory = __webpack_require__(497).CloverConnectorFactory;
	var CardEntryMethods = __webpack_require__(496).CardEntryMethods;

	// Export all of the pieces.
	module.exports = {
	    sdk: sdk,
	    base: base,
	    customers: customers,
	    device: device,
	    hours: hours,
	    inventory: inventory,
	    order: order,
	    payments: payments,
	    printer: printer,
	    remotepay: remotepay,
	    remotemessage: remotemessage,
	    CloverID: CloverID,
	    DebugConfig: DebugConfig,
	    version: Version.CLOVER_CLOUD_SDK_VERSION,
	    CloverConnector: CloverConnector,
	    CloverDeviceFactory: CloverDeviceFactory,
	    CloverTransport: CloverTransport,
	    CloverTransportObserver: CloverTransportObserver,
	    WebSocketCloverTransport: WebSocketCloverTransport,
	    CloverWebSocketInterface: CloverWebSocketInterface,
	    BrowserWebSocketImpl: BrowserWebSocketImpl,
	    JSONToCustomObject: JSONToCustomObject,
	    ImageUtil: ImageUtil,
	    Logger: Logger,
	    HttpSupport: HttpSupport,
	    WebSocketCloverDeviceConfiguration: WebSocketCloverDeviceConfiguration,
	    WebSocketPairedCloverDeviceConfiguration: WebSocketPairedCloverDeviceConfiguration,
	    WebSocketPairedCloverDeviceConfigurationBuilder: WebSocketPairedCloverDeviceConfigurationBuilder,
	    WebSocketCloudCloverDeviceConfiguration: WebSocketCloudCloverDeviceConfiguration,
	    WebSocketCloudCloverDeviceConfigurationBuilder: WebSocketCloudCloverDeviceConfigurationBuilder,
	    WebSocketState: WebSocketState,
	    CloverConnectorFactoryBuilder: CloverConnectorFactoryBuilder,
	    ICloverConnectorFactory: ICloverConnectorFactory,
	    CloverConnectorFactory: CloverConnectorFactory,
	    CardEntryMethods: CardEntryMethods,
	    LoyaltyDataTypes: LoyaltyDataTypes,
	    Version: Version,
	    loyalty: loyalty
	};

/***/ }),
/* 58 */
/***/ (function(module, exports, __webpack_require__) {

	var Map = __webpack_require__(318);
	var $export = __webpack_require__(1);
	var shared = __webpack_require__(109)('metadata');
	var store = shared.store || (shared.store = new (__webpack_require__(322))());

	var getOrCreateMetadataMap = function (target, targetKey, create) {
	  var targetMetadata = store.get(target);
	  if (!targetMetadata) {
	    if (!create) return undefined;
	    store.set(target, targetMetadata = new Map());
	  }
	  var keyMetadata = targetMetadata.get(targetKey);
	  if (!keyMetadata) {
	    if (!create) return undefined;
	    targetMetadata.set(targetKey, keyMetadata = new Map());
	  } return keyMetadata;
	};
	var ordinaryHasOwnMetadata = function (MetadataKey, O, P) {
	  var metadataMap = getOrCreateMetadataMap(O, P, false);
	  return metadataMap === undefined ? false : metadataMap.has(MetadataKey);
	};
	var ordinaryGetOwnMetadata = function (MetadataKey, O, P) {
	  var metadataMap = getOrCreateMetadataMap(O, P, false);
	  return metadataMap === undefined ? undefined : metadataMap.get(MetadataKey);
	};
	var ordinaryDefineOwnMetadata = function (MetadataKey, MetadataValue, O, P) {
	  getOrCreateMetadataMap(O, P, true).set(MetadataKey, MetadataValue);
	};
	var ordinaryOwnMetadataKeys = function (target, targetKey) {
	  var metadataMap = getOrCreateMetadataMap(target, targetKey, false);
	  var keys = [];
	  if (metadataMap) metadataMap.forEach(function (_, key) { keys.push(key); });
	  return keys;
	};
	var toMetaKey = function (it) {
	  return it === undefined || typeof it == 'symbol' ? it : String(it);
	};
	var exp = function (O) {
	  $export($export.S, 'Reflect', O);
	};

	module.exports = {
	  store: store,
	  map: getOrCreateMetadataMap,
	  has: ordinaryHasOwnMetadata,
	  get: ordinaryGetOwnMetadata,
	  set: ordinaryDefineOwnMetadata,
	  keys: ordinaryOwnMetadataKeys,
	  key: toMetaKey,
	  exp: exp
	};


/***/ }),
/* 59 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';
	if (__webpack_require__(18)) {
	  var LIBRARY = __webpack_require__(63);
	  var global = __webpack_require__(9);
	  var fails = __webpack_require__(10);
	  var $export = __webpack_require__(1);
	  var $typed = __webpack_require__(139);
	  var $buffer = __webpack_require__(202);
	  var ctx = __webpack_require__(44);
	  var anInstance = __webpack_require__(71);
	  var propertyDesc = __webpack_require__(76);
	  var hide = __webpack_require__(31);
	  var redefineAll = __webpack_require__(77);
	  var toInteger = __webpack_require__(46);
	  var toLength = __webpack_require__(17);
	  var toIndex = __webpack_require__(316);
	  var toAbsoluteIndex = __webpack_require__(79);
	  var toPrimitive = __webpack_require__(52);
	  var has = __webpack_require__(36);
	  var classof = __webpack_require__(90);
	  var isObject = __webpack_require__(12);
	  var toObject = __webpack_require__(22);
	  var isArrayIter = __webpack_require__(188);
	  var create = __webpack_require__(73);
	  var getPrototypeOf = __webpack_require__(38);
	  var gOPN = __webpack_require__(74).f;
	  var getIterFn = __webpack_require__(204);
	  var uid = __webpack_require__(80);
	  var wks = __webpack_require__(16);
	  var createArrayMethod = __webpack_require__(49);
	  var createArrayIncludes = __webpack_require__(127);
	  var speciesConstructor = __webpack_require__(110);
	  var ArrayIterators = __webpack_require__(205);
	  var Iterators = __webpack_require__(91);
	  var $iterDetect = __webpack_require__(132);
	  var setSpecies = __webpack_require__(78);
	  var arrayFill = __webpack_require__(180);
	  var arrayCopyWithin = __webpack_require__(288);
	  var $DP = __webpack_require__(20);
	  var $GOPD = __webpack_require__(37);
	  var dP = $DP.f;
	  var gOPD = $GOPD.f;
	  var RangeError = global.RangeError;
	  var TypeError = global.TypeError;
	  var Uint8Array = global.Uint8Array;
	  var ARRAY_BUFFER = 'ArrayBuffer';
	  var SHARED_BUFFER = 'Shared' + ARRAY_BUFFER;
	  var BYTES_PER_ELEMENT = 'BYTES_PER_ELEMENT';
	  var PROTOTYPE = 'prototype';
	  var ArrayProto = Array[PROTOTYPE];
	  var $ArrayBuffer = $buffer.ArrayBuffer;
	  var $DataView = $buffer.DataView;
	  var arrayForEach = createArrayMethod(0);
	  var arrayFilter = createArrayMethod(2);
	  var arraySome = createArrayMethod(3);
	  var arrayEvery = createArrayMethod(4);
	  var arrayFind = createArrayMethod(5);
	  var arrayFindIndex = createArrayMethod(6);
	  var arrayIncludes = createArrayIncludes(true);
	  var arrayIndexOf = createArrayIncludes(false);
	  var arrayValues = ArrayIterators.values;
	  var arrayKeys = ArrayIterators.keys;
	  var arrayEntries = ArrayIterators.entries;
	  var arrayLastIndexOf = ArrayProto.lastIndexOf;
	  var arrayReduce = ArrayProto.reduce;
	  var arrayReduceRight = ArrayProto.reduceRight;
	  var arrayJoin = ArrayProto.join;
	  var arraySort = ArrayProto.sort;
	  var arraySlice = ArrayProto.slice;
	  var arrayToString = ArrayProto.toString;
	  var arrayToLocaleString = ArrayProto.toLocaleString;
	  var ITERATOR = wks('iterator');
	  var TAG = wks('toStringTag');
	  var TYPED_CONSTRUCTOR = uid('typed_constructor');
	  var DEF_CONSTRUCTOR = uid('def_constructor');
	  var ALL_CONSTRUCTORS = $typed.CONSTR;
	  var TYPED_ARRAY = $typed.TYPED;
	  var VIEW = $typed.VIEW;
	  var WRONG_LENGTH = 'Wrong length!';

	  var $map = createArrayMethod(1, function (O, length) {
	    return allocate(speciesConstructor(O, O[DEF_CONSTRUCTOR]), length);
	  });

	  var LITTLE_ENDIAN = fails(function () {
	    // eslint-disable-next-line no-undef
	    return new Uint8Array(new Uint16Array([1]).buffer)[0] === 1;
	  });

	  var FORCED_SET = !!Uint8Array && !!Uint8Array[PROTOTYPE].set && fails(function () {
	    new Uint8Array(1).set({});
	  });

	  var toOffset = function (it, BYTES) {
	    var offset = toInteger(it);
	    if (offset < 0 || offset % BYTES) throw RangeError('Wrong offset!');
	    return offset;
	  };

	  var validate = function (it) {
	    if (isObject(it) && TYPED_ARRAY in it) return it;
	    throw TypeError(it + ' is not a typed array!');
	  };

	  var allocate = function (C, length) {
	    if (!(isObject(C) && TYPED_CONSTRUCTOR in C)) {
	      throw TypeError('It is not a typed array constructor!');
	    } return new C(length);
	  };

	  var speciesFromList = function (O, list) {
	    return fromList(speciesConstructor(O, O[DEF_CONSTRUCTOR]), list);
	  };

	  var fromList = function (C, list) {
	    var index = 0;
	    var length = list.length;
	    var result = allocate(C, length);
	    while (length > index) result[index] = list[index++];
	    return result;
	  };

	  var addGetter = function (it, key, internal) {
	    dP(it, key, { get: function () { return this._d[internal]; } });
	  };

	  var $from = function from(source /* , mapfn, thisArg */) {
	    var O = toObject(source);
	    var aLen = arguments.length;
	    var mapfn = aLen > 1 ? arguments[1] : undefined;
	    var mapping = mapfn !== undefined;
	    var iterFn = getIterFn(O);
	    var i, length, values, result, step, iterator;
	    if (iterFn != undefined && !isArrayIter(iterFn)) {
	      for (iterator = iterFn.call(O), values = [], i = 0; !(step = iterator.next()).done; i++) {
	        values.push(step.value);
	      } O = values;
	    }
	    if (mapping && aLen > 2) mapfn = ctx(mapfn, arguments[2], 2);
	    for (i = 0, length = toLength(O.length), result = allocate(this, length); length > i; i++) {
	      result[i] = mapping ? mapfn(O[i], i) : O[i];
	    }
	    return result;
	  };

	  var $of = function of(/* ...items */) {
	    var index = 0;
	    var length = arguments.length;
	    var result = allocate(this, length);
	    while (length > index) result[index] = arguments[index++];
	    return result;
	  };

	  // iOS Safari 6.x fails here
	  var TO_LOCALE_BUG = !!Uint8Array && fails(function () { arrayToLocaleString.call(new Uint8Array(1)); });

	  var $toLocaleString = function toLocaleString() {
	    return arrayToLocaleString.apply(TO_LOCALE_BUG ? arraySlice.call(validate(this)) : validate(this), arguments);
	  };

	  var proto = {
	    copyWithin: function copyWithin(target, start /* , end */) {
	      return arrayCopyWithin.call(validate(this), target, start, arguments.length > 2 ? arguments[2] : undefined);
	    },
	    every: function every(callbackfn /* , thisArg */) {
	      return arrayEvery(validate(this), callbackfn, arguments.length > 1 ? arguments[1] : undefined);
	    },
	    fill: function fill(value /* , start, end */) { // eslint-disable-line no-unused-vars
	      return arrayFill.apply(validate(this), arguments);
	    },
	    filter: function filter(callbackfn /* , thisArg */) {
	      return speciesFromList(this, arrayFilter(validate(this), callbackfn,
	        arguments.length > 1 ? arguments[1] : undefined));
	    },
	    find: function find(predicate /* , thisArg */) {
	      return arrayFind(validate(this), predicate, arguments.length > 1 ? arguments[1] : undefined);
	    },
	    findIndex: function findIndex(predicate /* , thisArg */) {
	      return arrayFindIndex(validate(this), predicate, arguments.length > 1 ? arguments[1] : undefined);
	    },
	    forEach: function forEach(callbackfn /* , thisArg */) {
	      arrayForEach(validate(this), callbackfn, arguments.length > 1 ? arguments[1] : undefined);
	    },
	    indexOf: function indexOf(searchElement /* , fromIndex */) {
	      return arrayIndexOf(validate(this), searchElement, arguments.length > 1 ? arguments[1] : undefined);
	    },
	    includes: function includes(searchElement /* , fromIndex */) {
	      return arrayIncludes(validate(this), searchElement, arguments.length > 1 ? arguments[1] : undefined);
	    },
	    join: function join(separator) { // eslint-disable-line no-unused-vars
	      return arrayJoin.apply(validate(this), arguments);
	    },
	    lastIndexOf: function lastIndexOf(searchElement /* , fromIndex */) { // eslint-disable-line no-unused-vars
	      return arrayLastIndexOf.apply(validate(this), arguments);
	    },
	    map: function map(mapfn /* , thisArg */) {
	      return $map(validate(this), mapfn, arguments.length > 1 ? arguments[1] : undefined);
	    },
	    reduce: function reduce(callbackfn /* , initialValue */) { // eslint-disable-line no-unused-vars
	      return arrayReduce.apply(validate(this), arguments);
	    },
	    reduceRight: function reduceRight(callbackfn /* , initialValue */) { // eslint-disable-line no-unused-vars
	      return arrayReduceRight.apply(validate(this), arguments);
	    },
	    reverse: function reverse() {
	      var that = this;
	      var length = validate(that).length;
	      var middle = Math.floor(length / 2);
	      var index = 0;
	      var value;
	      while (index < middle) {
	        value = that[index];
	        that[index++] = that[--length];
	        that[length] = value;
	      } return that;
	    },
	    some: function some(callbackfn /* , thisArg */) {
	      return arraySome(validate(this), callbackfn, arguments.length > 1 ? arguments[1] : undefined);
	    },
	    sort: function sort(comparefn) {
	      return arraySort.call(validate(this), comparefn);
	    },
	    subarray: function subarray(begin, end) {
	      var O = validate(this);
	      var length = O.length;
	      var $begin = toAbsoluteIndex(begin, length);
	      return new (speciesConstructor(O, O[DEF_CONSTRUCTOR]))(
	        O.buffer,
	        O.byteOffset + $begin * O.BYTES_PER_ELEMENT,
	        toLength((end === undefined ? length : toAbsoluteIndex(end, length)) - $begin)
	      );
	    }
	  };

	  var $slice = function slice(start, end) {
	    return speciesFromList(this, arraySlice.call(validate(this), start, end));
	  };

	  var $set = function set(arrayLike /* , offset */) {
	    validate(this);
	    var offset = toOffset(arguments[1], 1);
	    var length = this.length;
	    var src = toObject(arrayLike);
	    var len = toLength(src.length);
	    var index = 0;
	    if (len + offset > length) throw RangeError(WRONG_LENGTH);
	    while (index < len) this[offset + index] = src[index++];
	  };

	  var $iterators = {
	    entries: function entries() {
	      return arrayEntries.call(validate(this));
	    },
	    keys: function keys() {
	      return arrayKeys.call(validate(this));
	    },
	    values: function values() {
	      return arrayValues.call(validate(this));
	    }
	  };

	  var isTAIndex = function (target, key) {
	    return isObject(target)
	      && target[TYPED_ARRAY]
	      && typeof key != 'symbol'
	      && key in target
	      && String(+key) == String(key);
	  };
	  var $getDesc = function getOwnPropertyDescriptor(target, key) {
	    return isTAIndex(target, key = toPrimitive(key, true))
	      ? propertyDesc(2, target[key])
	      : gOPD(target, key);
	  };
	  var $setDesc = function defineProperty(target, key, desc) {
	    if (isTAIndex(target, key = toPrimitive(key, true))
	      && isObject(desc)
	      && has(desc, 'value')
	      && !has(desc, 'get')
	      && !has(desc, 'set')
	      // TODO: add validation descriptor w/o calling accessors
	      && !desc.configurable
	      && (!has(desc, 'writable') || desc.writable)
	      && (!has(desc, 'enumerable') || desc.enumerable)
	    ) {
	      target[key] = desc.value;
	      return target;
	    } return dP(target, key, desc);
	  };

	  if (!ALL_CONSTRUCTORS) {
	    $GOPD.f = $getDesc;
	    $DP.f = $setDesc;
	  }

	  $export($export.S + $export.F * !ALL_CONSTRUCTORS, 'Object', {
	    getOwnPropertyDescriptor: $getDesc,
	    defineProperty: $setDesc
	  });

	  if (fails(function () { arrayToString.call({}); })) {
	    arrayToString = arrayToLocaleString = function toString() {
	      return arrayJoin.call(this);
	    };
	  }

	  var $TypedArrayPrototype$ = redefineAll({}, proto);
	  redefineAll($TypedArrayPrototype$, $iterators);
	  hide($TypedArrayPrototype$, ITERATOR, $iterators.values);
	  redefineAll($TypedArrayPrototype$, {
	    slice: $slice,
	    set: $set,
	    constructor: function () { /* noop */ },
	    toString: arrayToString,
	    toLocaleString: $toLocaleString
	  });
	  addGetter($TypedArrayPrototype$, 'buffer', 'b');
	  addGetter($TypedArrayPrototype$, 'byteOffset', 'o');
	  addGetter($TypedArrayPrototype$, 'byteLength', 'l');
	  addGetter($TypedArrayPrototype$, 'length', 'e');
	  dP($TypedArrayPrototype$, TAG, {
	    get: function () { return this[TYPED_ARRAY]; }
	  });

	  // eslint-disable-next-line max-statements
	  module.exports = function (KEY, BYTES, wrapper, CLAMPED) {
	    CLAMPED = !!CLAMPED;
	    var NAME = KEY + (CLAMPED ? 'Clamped' : '') + 'Array';
	    var GETTER = 'get' + KEY;
	    var SETTER = 'set' + KEY;
	    var TypedArray = global[NAME];
	    var Base = TypedArray || {};
	    var TAC = TypedArray && getPrototypeOf(TypedArray);
	    var FORCED = !TypedArray || !$typed.ABV;
	    var O = {};
	    var TypedArrayPrototype = TypedArray && TypedArray[PROTOTYPE];
	    var getter = function (that, index) {
	      var data = that._d;
	      return data.v[GETTER](index * BYTES + data.o, LITTLE_ENDIAN);
	    };
	    var setter = function (that, index, value) {
	      var data = that._d;
	      if (CLAMPED) value = (value = Math.round(value)) < 0 ? 0 : value > 0xff ? 0xff : value & 0xff;
	      data.v[SETTER](index * BYTES + data.o, value, LITTLE_ENDIAN);
	    };
	    var addElement = function (that, index) {
	      dP(that, index, {
	        get: function () {
	          return getter(this, index);
	        },
	        set: function (value) {
	          return setter(this, index, value);
	        },
	        enumerable: true
	      });
	    };
	    if (FORCED) {
	      TypedArray = wrapper(function (that, data, $offset, $length) {
	        anInstance(that, TypedArray, NAME, '_d');
	        var index = 0;
	        var offset = 0;
	        var buffer, byteLength, length, klass;
	        if (!isObject(data)) {
	          length = toIndex(data);
	          byteLength = length * BYTES;
	          buffer = new $ArrayBuffer(byteLength);
	        } else if (data instanceof $ArrayBuffer || (klass = classof(data)) == ARRAY_BUFFER || klass == SHARED_BUFFER) {
	          buffer = data;
	          offset = toOffset($offset, BYTES);
	          var $len = data.byteLength;
	          if ($length === undefined) {
	            if ($len % BYTES) throw RangeError(WRONG_LENGTH);
	            byteLength = $len - offset;
	            if (byteLength < 0) throw RangeError(WRONG_LENGTH);
	          } else {
	            byteLength = toLength($length) * BYTES;
	            if (byteLength + offset > $len) throw RangeError(WRONG_LENGTH);
	          }
	          length = byteLength / BYTES;
	        } else if (TYPED_ARRAY in data) {
	          return fromList(TypedArray, data);
	        } else {
	          return $from.call(TypedArray, data);
	        }
	        hide(that, '_d', {
	          b: buffer,
	          o: offset,
	          l: byteLength,
	          e: length,
	          v: new $DataView(buffer)
	        });
	        while (index < length) addElement(that, index++);
	      });
	      TypedArrayPrototype = TypedArray[PROTOTYPE] = create($TypedArrayPrototype$);
	      hide(TypedArrayPrototype, 'constructor', TypedArray);
	    } else if (!fails(function () {
	      TypedArray(1);
	    }) || !fails(function () {
	      new TypedArray(-1); // eslint-disable-line no-new
	    }) || !$iterDetect(function (iter) {
	      new TypedArray(); // eslint-disable-line no-new
	      new TypedArray(null); // eslint-disable-line no-new
	      new TypedArray(1.5); // eslint-disable-line no-new
	      new TypedArray(iter); // eslint-disable-line no-new
	    }, true)) {
	      TypedArray = wrapper(function (that, data, $offset, $length) {
	        anInstance(that, TypedArray, NAME);
	        var klass;
	        // `ws` module bug, temporarily remove validation length for Uint8Array
	        // https://github.com/websockets/ws/pull/645
	        if (!isObject(data)) return new Base(toIndex(data));
	        if (data instanceof $ArrayBuffer || (klass = classof(data)) == ARRAY_BUFFER || klass == SHARED_BUFFER) {
	          return $length !== undefined
	            ? new Base(data, toOffset($offset, BYTES), $length)
	            : $offset !== undefined
	              ? new Base(data, toOffset($offset, BYTES))
	              : new Base(data);
	        }
	        if (TYPED_ARRAY in data) return fromList(TypedArray, data);
	        return $from.call(TypedArray, data);
	      });
	      arrayForEach(TAC !== Function.prototype ? gOPN(Base).concat(gOPN(TAC)) : gOPN(Base), function (key) {
	        if (!(key in TypedArray)) hide(TypedArray, key, Base[key]);
	      });
	      TypedArray[PROTOTYPE] = TypedArrayPrototype;
	      if (!LIBRARY) TypedArrayPrototype.constructor = TypedArray;
	    }
	    var $nativeIterator = TypedArrayPrototype[ITERATOR];
	    var CORRECT_ITER_NAME = !!$nativeIterator
	      && ($nativeIterator.name == 'values' || $nativeIterator.name == undefined);
	    var $iterator = $iterators.values;
	    hide(TypedArray, TYPED_CONSTRUCTOR, true);
	    hide(TypedArrayPrototype, TYPED_ARRAY, NAME);
	    hide(TypedArrayPrototype, VIEW, true);
	    hide(TypedArrayPrototype, DEF_CONSTRUCTOR, TypedArray);

	    if (CLAMPED ? new TypedArray(1)[TAG] != NAME : !(TAG in TypedArrayPrototype)) {
	      dP(TypedArrayPrototype, TAG, {
	        get: function () { return NAME; }
	      });
	    }

	    O[NAME] = TypedArray;

	    $export($export.G + $export.W + $export.F * (TypedArray != Base), O);

	    $export($export.S, NAME, {
	      BYTES_PER_ELEMENT: BYTES
	    });

	    $export($export.S + $export.F * fails(function () { Base.of.call(TypedArray, 1); }), NAME, {
	      from: $from,
	      of: $of
	    });

	    if (!(BYTES_PER_ELEMENT in TypedArrayPrototype)) hide(TypedArrayPrototype, BYTES_PER_ELEMENT, BYTES);

	    $export($export.P, NAME, proto);

	    setSpecies(NAME);

	    $export($export.P + $export.F * FORCED_SET, NAME, { set: $set });

	    $export($export.P + $export.F * !CORRECT_ITER_NAME, NAME, $iterators);

	    if (!LIBRARY && TypedArrayPrototype.toString != arrayToString) TypedArrayPrototype.toString = arrayToString;

	    $export($export.P + $export.F * fails(function () {
	      new TypedArray(1).slice();
	    }), NAME, { slice: $slice });

	    $export($export.P + $export.F * (fails(function () {
	      return [1, 2].toLocaleString() != new TypedArray([1, 2]).toLocaleString();
	    }) || !fails(function () {
	      TypedArrayPrototype.toLocaleString.call([1, 2]);
	    })), NAME, { toLocaleString: $toLocaleString });

	    Iterators[NAME] = CORRECT_ITER_NAME ? $nativeIterator : $iterator;
	    if (!LIBRARY && !CORRECT_ITER_NAME) hide(TypedArrayPrototype, ITERATOR, $iterator);
	  };
	} else module.exports = function () { /* empty */ };


/***/ }),
/* 60 */
/***/ (function(module, exports, __webpack_require__) {

	/**
	 * Copyright (c) 2013-present, Facebook, Inc.
	 *
	 * This source code is licensed under the MIT license found in the
	 * LICENSE file in the root directory of this source tree.
	 *
	 */

	'use strict';

	var _assign = __webpack_require__(19);

	var PooledClass = __webpack_require__(83);

	var emptyFunction = __webpack_require__(53);
	var warning = __webpack_require__(8);

	var didWarnForAddedNewProperty = false;
	var isProxySupported = typeof Proxy === 'function';

	var shouldBeReleasedProperties = ['dispatchConfig', '_targetInst', 'nativeEvent', 'isDefaultPrevented', 'isPropagationStopped', '_dispatchListeners', '_dispatchInstances'];

	/**
	 * @interface Event
	 * @see http://www.w3.org/TR/DOM-Level-3-Events/
	 */
	var EventInterface = {
	  type: null,
	  target: null,
	  // currentTarget is set when dispatching; no use in copying it here
	  currentTarget: emptyFunction.thatReturnsNull,
	  eventPhase: null,
	  bubbles: null,
	  cancelable: null,
	  timeStamp: function (event) {
	    return event.timeStamp || Date.now();
	  },
	  defaultPrevented: null,
	  isTrusted: null
	};

	/**
	 * Synthetic events are dispatched by event plugins, typically in response to a
	 * top-level event delegation handler.
	 *
	 * These systems should generally use pooling to reduce the frequency of garbage
	 * collection. The system should check `isPersistent` to determine whether the
	 * event should be released into the pool after being dispatched. Users that
	 * need a persisted event should invoke `persist`.
	 *
	 * Synthetic events (and subclasses) implement the DOM Level 3 Events API by
	 * normalizing browser quirks. Subclasses do not necessarily have to implement a
	 * DOM interface; custom application-specific events can also subclass this.
	 *
	 * @param {object} dispatchConfig Configuration used to dispatch this event.
	 * @param {*} targetInst Marker identifying the event target.
	 * @param {object} nativeEvent Native browser event.
	 * @param {DOMEventTarget} nativeEventTarget Target node.
	 */
	function SyntheticEvent(dispatchConfig, targetInst, nativeEvent, nativeEventTarget) {
	  if ((undefined) !== 'production') {
	    // these have a getter/setter for warnings
	    delete this.nativeEvent;
	    delete this.preventDefault;
	    delete this.stopPropagation;
	  }

	  this.dispatchConfig = dispatchConfig;
	  this._targetInst = targetInst;
	  this.nativeEvent = nativeEvent;

	  var Interface = this.constructor.Interface;
	  for (var propName in Interface) {
	    if (!Interface.hasOwnProperty(propName)) {
	      continue;
	    }
	    if ((undefined) !== 'production') {
	      delete this[propName]; // this has a getter/setter for warnings
	    }
	    var normalize = Interface[propName];
	    if (normalize) {
	      this[propName] = normalize(nativeEvent);
	    } else {
	      if (propName === 'target') {
	        this.target = nativeEventTarget;
	      } else {
	        this[propName] = nativeEvent[propName];
	      }
	    }
	  }

	  var defaultPrevented = nativeEvent.defaultPrevented != null ? nativeEvent.defaultPrevented : nativeEvent.returnValue === false;
	  if (defaultPrevented) {
	    this.isDefaultPrevented = emptyFunction.thatReturnsTrue;
	  } else {
	    this.isDefaultPrevented = emptyFunction.thatReturnsFalse;
	  }
	  this.isPropagationStopped = emptyFunction.thatReturnsFalse;
	  return this;
	}

	_assign(SyntheticEvent.prototype, {
	  preventDefault: function () {
	    this.defaultPrevented = true;
	    var event = this.nativeEvent;
	    if (!event) {
	      return;
	    }

	    if (event.preventDefault) {
	      event.preventDefault();
	      // eslint-disable-next-line valid-typeof
	    } else if (typeof event.returnValue !== 'unknown') {
	      event.returnValue = false;
	    }
	    this.isDefaultPrevented = emptyFunction.thatReturnsTrue;
	  },

	  stopPropagation: function () {
	    var event = this.nativeEvent;
	    if (!event) {
	      return;
	    }

	    if (event.stopPropagation) {
	      event.stopPropagation();
	      // eslint-disable-next-line valid-typeof
	    } else if (typeof event.cancelBubble !== 'unknown') {
	      // The ChangeEventPlugin registers a "propertychange" event for
	      // IE. This event does not support bubbling or cancelling, and
	      // any references to cancelBubble throw "Member not found".  A
	      // typeof check of "unknown" circumvents this issue (and is also
	      // IE specific).
	      event.cancelBubble = true;
	    }

	    this.isPropagationStopped = emptyFunction.thatReturnsTrue;
	  },

	  /**
	   * We release all dispatched `SyntheticEvent`s after each event loop, adding
	   * them back into the pool. This allows a way to hold onto a reference that
	   * won't be added back into the pool.
	   */
	  persist: function () {
	    this.isPersistent = emptyFunction.thatReturnsTrue;
	  },

	  /**
	   * Checks if this event should be released back into the pool.
	   *
	   * @return {boolean} True if this should not be released, false otherwise.
	   */
	  isPersistent: emptyFunction.thatReturnsFalse,

	  /**
	   * `PooledClass` looks for `destructor` on each instance it releases.
	   */
	  destructor: function () {
	    var Interface = this.constructor.Interface;
	    for (var propName in Interface) {
	      if ((undefined) !== 'production') {
	        Object.defineProperty(this, propName, getPooledWarningPropertyDefinition(propName, Interface[propName]));
	      } else {
	        this[propName] = null;
	      }
	    }
	    for (var i = 0; i < shouldBeReleasedProperties.length; i++) {
	      this[shouldBeReleasedProperties[i]] = null;
	    }
	    if ((undefined) !== 'production') {
	      Object.defineProperty(this, 'nativeEvent', getPooledWarningPropertyDefinition('nativeEvent', null));
	      Object.defineProperty(this, 'preventDefault', getPooledWarningPropertyDefinition('preventDefault', emptyFunction));
	      Object.defineProperty(this, 'stopPropagation', getPooledWarningPropertyDefinition('stopPropagation', emptyFunction));
	    }
	  }
	});

	SyntheticEvent.Interface = EventInterface;

	/**
	 * Helper to reduce boilerplate when creating subclasses.
	 *
	 * @param {function} Class
	 * @param {?object} Interface
	 */
	SyntheticEvent.augmentClass = function (Class, Interface) {
	  var Super = this;

	  var E = function () {};
	  E.prototype = Super.prototype;
	  var prototype = new E();

	  _assign(prototype, Class.prototype);
	  Class.prototype = prototype;
	  Class.prototype.constructor = Class;

	  Class.Interface = _assign({}, Super.Interface, Interface);
	  Class.augmentClass = Super.augmentClass;

	  PooledClass.addPoolingTo(Class, PooledClass.fourArgumentPooler);
	};

	/** Proxying after everything set on SyntheticEvent
	  * to resolve Proxy issue on some WebKit browsers
	  * in which some Event properties are set to undefined (GH#10010)
	  */
	if ((undefined) !== 'production') {
	  if (isProxySupported) {
	    /*eslint-disable no-func-assign */
	    SyntheticEvent = new Proxy(SyntheticEvent, {
	      construct: function (target, args) {
	        return this.apply(target, Object.create(target.prototype), args);
	      },
	      apply: function (constructor, that, args) {
	        return new Proxy(constructor.apply(that, args), {
	          set: function (target, prop, value) {
	            if (prop !== 'isPersistent' && !target.constructor.Interface.hasOwnProperty(prop) && shouldBeReleasedProperties.indexOf(prop) === -1) {
	              (undefined) !== 'production' ? warning(didWarnForAddedNewProperty || target.isPersistent(), "This synthetic event is reused for performance reasons. If you're " + "seeing this, you're adding a new property in the synthetic event object. " + 'The property is never released. See ' + 'https://fb.me/react-event-pooling for more information.') : void 0;
	              didWarnForAddedNewProperty = true;
	            }
	            target[prop] = value;
	            return true;
	          }
	        });
	      }
	    });
	    /*eslint-enable no-func-assign */
	  }
	}

	PooledClass.addPoolingTo(SyntheticEvent, PooledClass.fourArgumentPooler);

	module.exports = SyntheticEvent;

	/**
	  * Helper to nullify syntheticEvent instance properties when destructing
	  *
	  * @param {object} SyntheticEvent
	  * @param {String} propName
	  * @return {object} defineProperty object
	  */
	function getPooledWarningPropertyDefinition(propName, getVal) {
	  var isFunction = typeof getVal === 'function';
	  return {
	    configurable: true,
	    set: set,
	    get: get
	  };

	  function set(val) {
	    var action = isFunction ? 'setting the method' : 'setting the property';
	    warn(action, 'This is effectively a no-op');
	    return val;
	  }

	  function get() {
	    var action = isFunction ? 'accessing the method' : 'accessing the property';
	    var result = isFunction ? 'This is a no-op function' : 'This is set to null';
	    warn(action, result);
	    return getVal;
	  }

	  function warn(action, result) {
	    var warningCondition = false;
	    (undefined) !== 'production' ? warning(warningCondition, "This synthetic event is reused for performance reasons. If you're seeing this, " + "you're %s `%s` on a released/nullified synthetic event. %s. " + 'If you must keep the original synthetic event around, use event.persist(). ' + 'See https://fb.me/react-event-pooling for more information.', action, propName, result) : void 0;
	  }
	}

/***/ }),
/* 61 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';

	exports.__esModule = true;
	exports.createMemoryHistory = exports.hashHistory = exports.browserHistory = exports.applyRouterMiddleware = exports.formatPattern = exports.useRouterHistory = exports.match = exports.routerShape = exports.locationShape = exports.PropTypes = exports.RoutingContext = exports.RouterContext = exports.createRoutes = exports.useRoutes = exports.RouteContext = exports.Lifecycle = exports.History = exports.Route = exports.Redirect = exports.IndexRoute = exports.IndexRedirect = exports.withRouter = exports.IndexLink = exports.Link = exports.Router = undefined;

	var _RouteUtils = __webpack_require__(66);

	Object.defineProperty(exports, 'createRoutes', {
	  enumerable: true,
	  get: function get() {
	    return _RouteUtils.createRoutes;
	  }
	});

	var _PropTypes2 = __webpack_require__(230);

	Object.defineProperty(exports, 'locationShape', {
	  enumerable: true,
	  get: function get() {
	    return _PropTypes2.locationShape;
	  }
	});
	Object.defineProperty(exports, 'routerShape', {
	  enumerable: true,
	  get: function get() {
	    return _PropTypes2.routerShape;
	  }
	});

	var _PatternUtils = __webpack_require__(97);

	Object.defineProperty(exports, 'formatPattern', {
	  enumerable: true,
	  get: function get() {
	    return _PatternUtils.formatPattern;
	  }
	});

	var _Router2 = __webpack_require__(894);

	var _Router3 = _interopRequireDefault(_Router2);

	var _Link2 = __webpack_require__(362);

	var _Link3 = _interopRequireDefault(_Link2);

	var _IndexLink2 = __webpack_require__(888);

	var _IndexLink3 = _interopRequireDefault(_IndexLink2);

	var _withRouter2 = __webpack_require__(907);

	var _withRouter3 = _interopRequireDefault(_withRouter2);

	var _IndexRedirect2 = __webpack_require__(889);

	var _IndexRedirect3 = _interopRequireDefault(_IndexRedirect2);

	var _IndexRoute2 = __webpack_require__(890);

	var _IndexRoute3 = _interopRequireDefault(_IndexRoute2);

	var _Redirect2 = __webpack_require__(363);

	var _Redirect3 = _interopRequireDefault(_Redirect2);

	var _Route2 = __webpack_require__(892);

	var _Route3 = _interopRequireDefault(_Route2);

	var _History2 = __webpack_require__(887);

	var _History3 = _interopRequireDefault(_History2);

	var _Lifecycle2 = __webpack_require__(891);

	var _Lifecycle3 = _interopRequireDefault(_Lifecycle2);

	var _RouteContext2 = __webpack_require__(893);

	var _RouteContext3 = _interopRequireDefault(_RouteContext2);

	var _useRoutes2 = __webpack_require__(906);

	var _useRoutes3 = _interopRequireDefault(_useRoutes2);

	var _RouterContext2 = __webpack_require__(150);

	var _RouterContext3 = _interopRequireDefault(_RouterContext2);

	var _RoutingContext2 = __webpack_require__(895);

	var _RoutingContext3 = _interopRequireDefault(_RoutingContext2);

	var _PropTypes3 = _interopRequireDefault(_PropTypes2);

	var _match2 = __webpack_require__(904);

	var _match3 = _interopRequireDefault(_match2);

	var _useRouterHistory2 = __webpack_require__(368);

	var _useRouterHistory3 = _interopRequireDefault(_useRouterHistory2);

	var _applyRouterMiddleware2 = __webpack_require__(897);

	var _applyRouterMiddleware3 = _interopRequireDefault(_applyRouterMiddleware2);

	var _browserHistory2 = __webpack_require__(898);

	var _browserHistory3 = _interopRequireDefault(_browserHistory2);

	var _hashHistory2 = __webpack_require__(902);

	var _hashHistory3 = _interopRequireDefault(_hashHistory2);

	var _createMemoryHistory2 = __webpack_require__(365);

	var _createMemoryHistory3 = _interopRequireDefault(_createMemoryHistory2);

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

	exports.Router = _Router3.default; /* components */

	exports.Link = _Link3.default;
	exports.IndexLink = _IndexLink3.default;
	exports.withRouter = _withRouter3.default;

	/* components (configuration) */

	exports.IndexRedirect = _IndexRedirect3.default;
	exports.IndexRoute = _IndexRoute3.default;
	exports.Redirect = _Redirect3.default;
	exports.Route = _Route3.default;

	/* mixins */

	exports.History = _History3.default;
	exports.Lifecycle = _Lifecycle3.default;
	exports.RouteContext = _RouteContext3.default;

	/* utils */

	exports.useRoutes = _useRoutes3.default;
	exports.RouterContext = _RouterContext3.default;
	exports.RoutingContext = _RoutingContext3.default;
	exports.PropTypes = _PropTypes3.default;
	exports.match = _match3.default;
	exports.useRouterHistory = _useRouterHistory3.default;
	exports.applyRouterMiddleware = _applyRouterMiddleware3.default;

	/* histories */

	exports.browserHistory = _browserHistory3.default;
	exports.hashHistory = _hashHistory3.default;
	exports.createMemoryHistory = _createMemoryHistory3.default;

/***/ }),
/* 62 */
/***/ (function(module, exports, __webpack_require__) {

	// 22.1.3.31 Array.prototype[@@unscopables]
	var UNSCOPABLES = __webpack_require__(16)('unscopables');
	var ArrayProto = Array.prototype;
	if (ArrayProto[UNSCOPABLES] == undefined) __webpack_require__(31)(ArrayProto, UNSCOPABLES, {});
	module.exports = function (key) {
	  ArrayProto[UNSCOPABLES][key] = true;
	};


/***/ }),
/* 63 */
/***/ (function(module, exports) {

	module.exports = false;


/***/ }),
/* 64 */
/***/ (function(module, exports, __webpack_require__) {

	var META = __webpack_require__(80)('meta');
	var isObject = __webpack_require__(12);
	var has = __webpack_require__(36);
	var setDesc = __webpack_require__(20).f;
	var id = 0;
	var isExtensible = Object.isExtensible || function () {
	  return true;
	};
	var FREEZE = !__webpack_require__(10)(function () {
	  return isExtensible(Object.preventExtensions({}));
	});
	var setMeta = function (it) {
	  setDesc(it, META, { value: {
	    i: 'O' + ++id, // object ID
	    w: {}          // weak collections IDs
	  } });
	};
	var fastKey = function (it, create) {
	  // return primitive with prefix
	  if (!isObject(it)) return typeof it == 'symbol' ? it : (typeof it == 'string' ? 'S' : 'P') + it;
	  if (!has(it, META)) {
	    // can't set metadata to uncaught frozen object
	    if (!isExtensible(it)) return 'F';
	    // not necessary to add metadata
	    if (!create) return 'E';
	    // add missing metadata
	    setMeta(it);
	  // return object ID
	  } return it[META].i;
	};
	var getWeak = function (it, create) {
	  if (!has(it, META)) {
	    // can't set metadata to uncaught frozen object
	    if (!isExtensible(it)) return true;
	    // not necessary to add metadata
	    if (!create) return false;
	    // add missing metadata
	    setMeta(it);
	  // return hash weak collections IDs
	  } return it[META].w;
	};
	// add metadata on freeze-family methods calling
	var onFreeze = function (it) {
	  if (FREEZE && meta.NEED && isExtensible(it) && !has(it, META)) setMeta(it);
	  return it;
	};
	var meta = module.exports = {
	  KEY: META,
	  NEED: false,
	  fastKey: fastKey,
	  getWeak: getWeak,
	  onFreeze: onFreeze
	};


/***/ }),
/* 65 */
/***/ (function(module, exports, __webpack_require__) {

	/**
	 * Copyright (c) 2013-present, Facebook, Inc.
	 *
	 * This source code is licensed under the MIT license found in the
	 * LICENSE file in the root directory of this source tree.
	 *
	 */

	'use strict';

	var _prodInvariant = __webpack_require__(13);

	var invariant = __webpack_require__(7);

	function checkMask(value, bitmask) {
	  return (value & bitmask) === bitmask;
	}

	var DOMPropertyInjection = {
	  /**
	   * Mapping from normalized, camelcased property names to a configuration that
	   * specifies how the associated DOM property should be accessed or rendered.
	   */
	  MUST_USE_PROPERTY: 0x1,
	  HAS_BOOLEAN_VALUE: 0x4,
	  HAS_NUMERIC_VALUE: 0x8,
	  HAS_POSITIVE_NUMERIC_VALUE: 0x10 | 0x8,
	  HAS_OVERLOADED_BOOLEAN_VALUE: 0x20,

	  /**
	   * Inject some specialized knowledge about the DOM. This takes a config object
	   * with the following properties:
	   *
	   * isCustomAttribute: function that given an attribute name will return true
	   * if it can be inserted into the DOM verbatim. Useful for data-* or aria-*
	   * attributes where it's impossible to enumerate all of the possible
	   * attribute names,
	   *
	   * Properties: object mapping DOM property name to one of the
	   * DOMPropertyInjection constants or null. If your attribute isn't in here,
	   * it won't get written to the DOM.
	   *
	   * DOMAttributeNames: object mapping React attribute name to the DOM
	   * attribute name. Attribute names not specified use the **lowercase**
	   * normalized name.
	   *
	   * DOMAttributeNamespaces: object mapping React attribute name to the DOM
	   * attribute namespace URL. (Attribute names not specified use no namespace.)
	   *
	   * DOMPropertyNames: similar to DOMAttributeNames but for DOM properties.
	   * Property names not specified use the normalized name.
	   *
	   * DOMMutationMethods: Properties that require special mutation methods. If
	   * `value` is undefined, the mutation method should unset the property.
	   *
	   * @param {object} domPropertyConfig the config as described above.
	   */
	  injectDOMPropertyConfig: function (domPropertyConfig) {
	    var Injection = DOMPropertyInjection;
	    var Properties = domPropertyConfig.Properties || {};
	    var DOMAttributeNamespaces = domPropertyConfig.DOMAttributeNamespaces || {};
	    var DOMAttributeNames = domPropertyConfig.DOMAttributeNames || {};
	    var DOMPropertyNames = domPropertyConfig.DOMPropertyNames || {};
	    var DOMMutationMethods = domPropertyConfig.DOMMutationMethods || {};

	    if (domPropertyConfig.isCustomAttribute) {
	      DOMProperty._isCustomAttributeFunctions.push(domPropertyConfig.isCustomAttribute);
	    }

	    for (var propName in Properties) {
	      !!DOMProperty.properties.hasOwnProperty(propName) ? (undefined) !== 'production' ? invariant(false, 'injectDOMPropertyConfig(...): You\'re trying to inject DOM property \'%s\' which has already been injected. You may be accidentally injecting the same DOM property config twice, or you may be injecting two configs that have conflicting property names.', propName) : _prodInvariant('48', propName) : void 0;

	      var lowerCased = propName.toLowerCase();
	      var propConfig = Properties[propName];

	      var propertyInfo = {
	        attributeName: lowerCased,
	        attributeNamespace: null,
	        propertyName: propName,
	        mutationMethod: null,

	        mustUseProperty: checkMask(propConfig, Injection.MUST_USE_PROPERTY),
	        hasBooleanValue: checkMask(propConfig, Injection.HAS_BOOLEAN_VALUE),
	        hasNumericValue: checkMask(propConfig, Injection.HAS_NUMERIC_VALUE),
	        hasPositiveNumericValue: checkMask(propConfig, Injection.HAS_POSITIVE_NUMERIC_VALUE),
	        hasOverloadedBooleanValue: checkMask(propConfig, Injection.HAS_OVERLOADED_BOOLEAN_VALUE)
	      };
	      !(propertyInfo.hasBooleanValue + propertyInfo.hasNumericValue + propertyInfo.hasOverloadedBooleanValue <= 1) ? (undefined) !== 'production' ? invariant(false, 'DOMProperty: Value can be one of boolean, overloaded boolean, or numeric value, but not a combination: %s', propName) : _prodInvariant('50', propName) : void 0;

	      if ((undefined) !== 'production') {
	        DOMProperty.getPossibleStandardName[lowerCased] = propName;
	      }

	      if (DOMAttributeNames.hasOwnProperty(propName)) {
	        var attributeName = DOMAttributeNames[propName];
	        propertyInfo.attributeName = attributeName;
	        if ((undefined) !== 'production') {
	          DOMProperty.getPossibleStandardName[attributeName] = propName;
	        }
	      }

	      if (DOMAttributeNamespaces.hasOwnProperty(propName)) {
	        propertyInfo.attributeNamespace = DOMAttributeNamespaces[propName];
	      }

	      if (DOMPropertyNames.hasOwnProperty(propName)) {
	        propertyInfo.propertyName = DOMPropertyNames[propName];
	      }

	      if (DOMMutationMethods.hasOwnProperty(propName)) {
	        propertyInfo.mutationMethod = DOMMutationMethods[propName];
	      }

	      DOMProperty.properties[propName] = propertyInfo;
	    }
	  }
	};

	/* eslint-disable max-len */
	var ATTRIBUTE_NAME_START_CHAR = ':A-Z_a-z\\u00C0-\\u00D6\\u00D8-\\u00F6\\u00F8-\\u02FF\\u0370-\\u037D\\u037F-\\u1FFF\\u200C-\\u200D\\u2070-\\u218F\\u2C00-\\u2FEF\\u3001-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFFD';
	/* eslint-enable max-len */

	/**
	 * DOMProperty exports lookup objects that can be used like functions:
	 *
	 *   > DOMProperty.isValid['id']
	 *   true
	 *   > DOMProperty.isValid['foobar']
	 *   undefined
	 *
	 * Although this may be confusing, it performs better in general.
	 *
	 * @see http://jsperf.com/key-exists
	 * @see http://jsperf.com/key-missing
	 */
	var DOMProperty = {
	  ID_ATTRIBUTE_NAME: 'data-reactid',
	  ROOT_ATTRIBUTE_NAME: 'data-reactroot',

	  ATTRIBUTE_NAME_START_CHAR: ATTRIBUTE_NAME_START_CHAR,
	  ATTRIBUTE_NAME_CHAR: ATTRIBUTE_NAME_START_CHAR + '\\-.0-9\\u00B7\\u0300-\\u036F\\u203F-\\u2040',

	  /**
	   * Map from property "standard name" to an object with info about how to set
	   * the property in the DOM. Each object contains:
	   *
	   * attributeName:
	   *   Used when rendering markup or with `*Attribute()`.
	   * attributeNamespace
	   * propertyName:
	   *   Used on DOM node instances. (This includes properties that mutate due to
	   *   external factors.)
	   * mutationMethod:
	   *   If non-null, used instead of the property or `setAttribute()` after
	   *   initial render.
	   * mustUseProperty:
	   *   Whether the property must be accessed and mutated as an object property.
	   * hasBooleanValue:
	   *   Whether the property should be removed when set to a falsey value.
	   * hasNumericValue:
	   *   Whether the property must be numeric or parse as a numeric and should be
	   *   removed when set to a falsey value.
	   * hasPositiveNumericValue:
	   *   Whether the property must be positive numeric or parse as a positive
	   *   numeric and should be removed when set to a falsey value.
	   * hasOverloadedBooleanValue:
	   *   Whether the property can be used as a flag as well as with a value.
	   *   Removed when strictly equal to false; present without a value when
	   *   strictly equal to true; present with a value otherwise.
	   */
	  properties: {},

	  /**
	   * Mapping from lowercase property names to the properly cased version, used
	   * to warn in the case of missing properties. Available only in __DEV__.
	   *
	   * autofocus is predefined, because adding it to the property whitelist
	   * causes unintended side effects.
	   *
	   * @type {Object}
	   */
	  getPossibleStandardName: (undefined) !== 'production' ? { autofocus: 'autoFocus' } : null,

	  /**
	   * All of the isCustomAttribute() functions that have been injected.
	   */
	  _isCustomAttributeFunctions: [],

	  /**
	   * Checks whether a property name is a custom attribute.
	   * @method
	   */
	  isCustomAttribute: function (attributeName) {
	    for (var i = 0; i < DOMProperty._isCustomAttributeFunctions.length; i++) {
	      var isCustomAttributeFn = DOMProperty._isCustomAttributeFunctions[i];
	      if (isCustomAttributeFn(attributeName)) {
	        return true;
	      }
	    }
	    return false;
	  },

	  injection: DOMPropertyInjection
	};

	module.exports = DOMProperty;

/***/ }),
/* 66 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';

	exports.__esModule = true;

	var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

	exports.isReactChildren = isReactChildren;
	exports.createRouteFromReactElement = createRouteFromReactElement;
	exports.createRoutesFromReactChildren = createRoutesFromReactChildren;
	exports.createRoutes = createRoutes;

	var _react = __webpack_require__(4);

	var _react2 = _interopRequireDefault(_react);

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

	function isValidChild(object) {
	  return object == null || _react2.default.isValidElement(object);
	}

	function isReactChildren(object) {
	  return isValidChild(object) || Array.isArray(object) && object.every(isValidChild);
	}

	function createRoute(defaultProps, props) {
	  return _extends({}, defaultProps, props);
	}

	function createRouteFromReactElement(element) {
	  var type = element.type;
	  var route = createRoute(type.defaultProps, element.props);

	  if (route.children) {
	    var childRoutes = createRoutesFromReactChildren(route.children, route);

	    if (childRoutes.length) route.childRoutes = childRoutes;

	    delete route.children;
	  }

	  return route;
	}

	/**
	 * Creates and returns a routes object from the given ReactChildren. JSX
	 * provides a convenient way to visualize how routes in the hierarchy are
	 * nested.
	 *
	 *   import { Route, createRoutesFromReactChildren } from 'react-router'
	 *
	 *   const routes = createRoutesFromReactChildren(
	 *     <Route component={App}>
	 *       <Route path="home" component={Dashboard}/>
	 *       <Route path="news" component={NewsFeed}/>
	 *     </Route>
	 *   )
	 *
	 * Note: This method is automatically used when you provide <Route> children
	 * to a <Router> component.
	 */
	function createRoutesFromReactChildren(children, parentRoute) {
	  var routes = [];

	  _react2.default.Children.forEach(children, function (element) {
	    if (_react2.default.isValidElement(element)) {
	      // Component classes may have a static create* method.
	      if (element.type.createRouteFromReactElement) {
	        var route = element.type.createRouteFromReactElement(element, parentRoute);

	        if (route) routes.push(route);
	      } else {
	        routes.push(createRouteFromReactElement(element));
	      }
	    }
	  });

	  return routes;
	}

	/**
	 * Creates and returns an array of routes from the given object which
	 * may be a JSX route, a plain object route, or an array of either.
	 */
	function createRoutes(routes) {
	  if (isReactChildren(routes)) {
	    routes = createRoutesFromReactChildren(routes);
	  } else if (routes && !Array.isArray(routes)) {
	    routes = [routes];
	  }

	  return routes;
	}

/***/ }),
/* 67 */
/***/ (function(module, exports, __webpack_require__) {

	/**
	 * Autogenerated by Avro
	 * 
	 * DO NOT EDIT DIRECTLY
	 */

	var customers_EmailAddress = __webpack_require__(383);
	var customers_PhoneNumber = __webpack_require__(385);
	var customers_CustomerMetadata = __webpack_require__(382);
	var base_Reference = __webpack_require__(5);
	var customers_Address = __webpack_require__(379);
	var customers_Card = __webpack_require__(380);

	/**
	* @constructor
	* @memberof customers
	*/
	var Customer = function() {
	  this._class_ = Customer;
	  this.id = undefined;
	  this.merchant = undefined;
	  this.firstName = undefined;
	  this.lastName = undefined;
	  this.marketingAllowed = undefined;
	  this.customerSince = undefined;
	  this.orders = undefined;
	  this.addresses = undefined;
	  this.emailAddresses = undefined;
	  this.phoneNumbers = undefined;
	  this.cards = undefined;
	  this.metadata = undefined;
	};


	/**
	* Set the field value
	* Unique identifier
	*
	* @memberof customers.Customer
	* @param {String} id 
	*/
	Customer.prototype.setId = function(id) {
	  this.id = id;
	};

	/**
	* Get the field value
	* Unique identifier
	* @memberof customers.Customer
	* @return {String} 
	*/
	Customer.prototype.getId = function() {
	  return this.id;
	};

	/**
	* Set the field value
	* The merchant that is associated with this customer
	*
	* @memberof customers.Customer
	* @param {base.Reference} merchant 
	*/
	Customer.prototype.setMerchant = function(merchant) {
	  this.merchant = merchant;
	};

	/**
	* Get the field value
	* The merchant that is associated with this customer
	* @memberof customers.Customer
	* @return {base.Reference} 
	*/
	Customer.prototype.getMerchant = function() {
	  return this.merchant;
	};

	/**
	* Set the field value
	* First/given name of the customer
	*
	* @memberof customers.Customer
	* @param {Null|String} firstName 
	*/
	Customer.prototype.setFirstName = function(firstName) {
	  this.firstName = firstName;
	};

	/**
	* Get the field value
	* First/given name of the customer
	* @memberof customers.Customer
	* @return {Null|String} 
	*/
	Customer.prototype.getFirstName = function() {
	  return this.firstName;
	};

	/**
	* Set the field value
	* Last name/surname of the customer
	*
	* @memberof customers.Customer
	* @param {Null|String} lastName 
	*/
	Customer.prototype.setLastName = function(lastName) {
	  this.lastName = lastName;
	};

	/**
	* Get the field value
	* Last name/surname of the customer
	* @memberof customers.Customer
	* @return {Null|String} 
	*/
	Customer.prototype.getLastName = function() {
	  return this.lastName;
	};

	/**
	* Set the field value
	* @memberof customers.Customer
	* @param {Boolean} marketingAllowed 
	*/
	Customer.prototype.setMarketingAllowed = function(marketingAllowed) {
	  this.marketingAllowed = marketingAllowed;
	};

	/**
	* Get the field value
	* @memberof customers.Customer
	* @return {Boolean} 
	*/
	Customer.prototype.getMarketingAllowed = function() {
	  return this.marketingAllowed;
	};

	/**
	* Set the field value
	* @memberof customers.Customer
	* @param {Number} customerSince must be a long integer
	*/
	Customer.prototype.setCustomerSince = function(customerSince) {
	  this.customerSince = customerSince;
	};

	/**
	* Get the field value
	* @memberof customers.Customer
	* @return {Number} must be a long integer
	*/
	Customer.prototype.getCustomerSince = function() {
	  return this.customerSince;
	};

	/**
	* Set the field value
	* @memberof customers.Customer
	* @param {Array.<base.Reference>} orders An array of 
	*/
	Customer.prototype.setOrders = function(orders) {
	  this.orders = orders;
	};

	/**
	* Get the field value
	* @memberof customers.Customer
	* @return {Array.<base.Reference>} An array of 
	*/
	Customer.prototype.getOrders = function() {
	  return this.orders;
	};

	/**
	* Set the field value
	* @memberof customers.Customer
	* @param {Array.<customers.Address>} addresses An array of 
	*/
	Customer.prototype.setAddresses = function(addresses) {
	  this.addresses = addresses;
	};

	/**
	* Get the field value
	* @memberof customers.Customer
	* @return {Array.<customers.Address>} An array of 
	*/
	Customer.prototype.getAddresses = function() {
	  return this.addresses;
	};

	/**
	* Set the field value
	* @memberof customers.Customer
	* @param {Array.<customers.EmailAddress>} emailAddresses An array of 
	*/
	Customer.prototype.setEmailAddresses = function(emailAddresses) {
	  this.emailAddresses = emailAddresses;
	};

	/**
	* Get the field value
	* @memberof customers.Customer
	* @return {Array.<customers.EmailAddress>} An array of 
	*/
	Customer.prototype.getEmailAddresses = function() {
	  return this.emailAddresses;
	};

	/**
	* Set the field value
	* @memberof customers.Customer
	* @param {Array.<customers.PhoneNumber>} phoneNumbers An array of 
	*/
	Customer.prototype.setPhoneNumbers = function(phoneNumbers) {
	  this.phoneNumbers = phoneNumbers;
	};

	/**
	* Get the field value
	* @memberof customers.Customer
	* @return {Array.<customers.PhoneNumber>} An array of 
	*/
	Customer.prototype.getPhoneNumbers = function() {
	  return this.phoneNumbers;
	};

	/**
	* Set the field value
	* @memberof customers.Customer
	* @param {Array.<customers.Card>} cards An array of 
	*/
	Customer.prototype.setCards = function(cards) {
	  this.cards = cards;
	};

	/**
	* Get the field value
	* @memberof customers.Customer
	* @return {Array.<customers.Card>} An array of 
	*/
	Customer.prototype.getCards = function() {
	  return this.cards;
	};

	/**
	* Set the field value
	* Additional information about the customer.
	*
	* @memberof customers.Customer
	* @param {customers.CustomerMetadata} metadata 
	*/
	Customer.prototype.setMetadata = function(metadata) {
	  this.metadata = metadata;
	};

	/**
	* Get the field value
	* Additional information about the customer.
	* @memberof customers.Customer
	* @return {customers.CustomerMetadata} 
	*/
	Customer.prototype.getMetadata = function() {
	  return this.metadata;
	};

	/**
	* @memberof customers.Customer
	* @private
	*/
	Customer.prototype.getMetaInfo = function(fieldName) {
	  var curclass = this._class_;
	  do {
	    var fieldMetaInfo = curclass._meta_.fields[fieldName];
	    if(fieldMetaInfo) {
	      return fieldMetaInfo;
	    }
	    if(curclass._meta_._superMeta_) {
	      curclass = curclass._meta_._superMeta_._class_;
	    } else {
	      curclass = null;
	    }
	  } while(curclass);
	  return null;
	};

	Customer.prototype.toString = function() {
	  return JSON.stringify(this);
	};

	Customer._meta_ =  {fields:  {}};
	Customer._meta_._class_ =  Customer;
	Customer._meta_.fields["id"] = {};
	Customer._meta_.fields["id"].type = String;
	Customer._meta_.fields["merchant"] = {};
	Customer._meta_.fields["merchant"].type = base_Reference;
	Customer._meta_.fields["firstName"] = {};
	Customer._meta_.fields["firstName"].type = String;
	Customer._meta_.fields["lastName"] = {};
	Customer._meta_.fields["lastName"].type = String;
	Customer._meta_.fields["marketingAllowed"] = {};
	Customer._meta_.fields["marketingAllowed"].type = Boolean;
	Customer._meta_.fields["customerSince"] = {};
	Customer._meta_.fields["customerSince"].type = Number;
	Customer._meta_.fields["orders"] = {};
	Customer._meta_.fields["orders"].type = Array;
	Customer._meta_.fields["orders"].elementType = base_Reference;
	Customer._meta_.fields["addresses"] = {};
	Customer._meta_.fields["addresses"].type = Array;
	Customer._meta_.fields["addresses"].elementType = customers_Address;
	Customer._meta_.fields["emailAddresses"] = {};
	Customer._meta_.fields["emailAddresses"].type = Array;
	Customer._meta_.fields["emailAddresses"].elementType = customers_EmailAddress;
	Customer._meta_.fields["phoneNumbers"] = {};
	Customer._meta_.fields["phoneNumbers"].type = Array;
	Customer._meta_.fields["phoneNumbers"].elementType = customers_PhoneNumber;
	Customer._meta_.fields["cards"] = {};
	Customer._meta_.fields["cards"].type = Array;
	Customer._meta_.fields["cards"].elementType = customers_Card;
	Customer._meta_.fields["metadata"] = {};
	Customer._meta_.fields["metadata"].type = customers_CustomerMetadata;

	//
	// Expose the module.
	//
	if (true) {
	module.exports = Customer;
	}



/***/ }),
/* 68 */
/***/ (function(module, exports, __webpack_require__) {

	/**
	 * Autogenerated by Avro
	 * 
	 * DO NOT EDIT DIRECTLY
	 */

	var payments_Authorization = __webpack_require__(159);
	var order_Discount = __webpack_require__(242);
	var onlineorder_OnlineOrder = __webpack_require__(981);
	var order_PaymentState = __webpack_require__(414);
	var base_ServiceCharge = __webpack_require__(378);
	var payments_Refund = __webpack_require__(26);
	var payments_Credit = __webpack_require__(30);
	var customers_Customer = __webpack_require__(67);
	var order_PrintGroup = __webpack_require__(415);
	var order_PayType = __webpack_require__(413);
	var order_LineItem = __webpack_require__(157);
	var order_OrderType = __webpack_require__(244);
	var payments_Payment = __webpack_require__(11);
	var base_Reference = __webpack_require__(5);

	/** The Order object is at the core of Clover’s transaction data. Almost every transaction either creates or updates an Order. When an order is created or updated via one of the Clover SDKs, the order data is automatically synchronized between the Clover Server and the merchant’s Clover devices. */
	/**
	* @constructor
	* @memberof order
	*/
	var Order = function() {
	  this._class_ = Order;
	  this.id = undefined;
	  this.currency = undefined;
	  this.customerId = undefined;
	  this.customerUuid = undefined;
	  this.orderTypeId = undefined;
	  this.customers = undefined;
	  this.employee = undefined;
	  this.total = undefined;
	  this.externalReferenceId = undefined;
	  this.unpaidBalance = undefined;
	  this.paymentState = undefined;
	  this.title = undefined;
	  this.note = undefined;
	  this.orderType = undefined;
	  this.taxRemoved = false;
	  this.isVat = undefined;
	  this.state = undefined;
	  this.manualTransaction = undefined;
	  this.groupLineItems = undefined;
	  this.testMode = undefined;
	  this.payType = undefined;
	  this.createdTime = undefined;
	  this.clientCreatedTime = undefined;
	  this.modifiedTime = undefined;
	  this.deletedTimestamp = undefined;
	  this.serviceCharge = undefined;
	  this.discounts = undefined;
	  this.lineItems = undefined;
	  this.payments = undefined;
	  this.refunds = undefined;
	  this.credits = undefined;
	  this.voids = undefined;
	  this.preAuths = undefined;
	  this.device = undefined;
	  this.authorizations = undefined;
	  this.merchant = undefined;
	  this.onlineOrder = undefined;
	  this.printGroups = undefined;
	};


	/**
	* Set the field value
	* Unique identifier
	*
	* @memberof order.Order
	* @param {String} id 
	*/
	Order.prototype.setId = function(id) {
	  this.id = id;
	};

	/**
	* Get the field value
	* Unique identifier
	* @memberof order.Order
	* @return {String} 
	*/
	Order.prototype.getId = function() {
	  return this.id;
	};

	/**
	* Set the field value
	* Currency of this order. For example, "USD"
	*
	* @memberof order.Order
	* @param {String} currency 
	*/
	Order.prototype.setCurrency = function(currency) {
	  this.currency = currency;
	};

	/**
	* Get the field value
	* Currency of this order. For example, "USD"
	* @memberof order.Order
	* @return {String} 
	*/
	Order.prototype.getCurrency = function() {
	  return this.currency;
	};

	/**
	* Set the field value
	* @memberof order.Order
	* @param {Number} customerId must be a long integer
	*/
	Order.prototype.setCustomerId = function(customerId) {
	  this.customerId = customerId;
	};

	/**
	* Get the field value
	* @memberof order.Order
	* @return {Number} must be a long integer
	*/
	Order.prototype.getCustomerId = function() {
	  return this.customerId;
	};

	/**
	* Set the field value
	* @memberof order.Order
	* @param {String} customerUuid 
	*/
	Order.prototype.setCustomerUuid = function(customerUuid) {
	  this.customerUuid = customerUuid;
	};

	/**
	* Get the field value
	* @memberof order.Order
	* @return {String} 
	*/
	Order.prototype.getCustomerUuid = function() {
	  return this.customerUuid;
	};

	/**
	* Set the field value
	* @memberof order.Order
	* @param {Number} orderTypeId must be a long integer
	*/
	Order.prototype.setOrderTypeId = function(orderTypeId) {
	  this.orderTypeId = orderTypeId;
	};

	/**
	* Get the field value
	* @memberof order.Order
	* @return {Number} must be a long integer
	*/
	Order.prototype.getOrderTypeId = function() {
	  return this.orderTypeId;
	};

	/**
	* Set the field value
	* List of customers associated with this order.
	*
	* @memberof order.Order
	* @param {Array.<customers.Customer>} customers An array of 
	*/
	Order.prototype.setCustomers = function(customers) {
	  this.customers = customers;
	};

	/**
	* Get the field value
	* List of customers associated with this order.
	* @memberof order.Order
	* @return {Array.<customers.Customer>} An array of 
	*/
	Order.prototype.getCustomers = function() {
	  return this.customers;
	};

	/**
	* Set the field value
	* The employee who took this order
	*
	* @memberof order.Order
	* @param {Null|base.Reference} employee 
	*/
	Order.prototype.setEmployee = function(employee) {
	  this.employee = employee;
	};

	/**
	* Get the field value
	* The employee who took this order
	* @memberof order.Order
	* @return {Null|base.Reference} 
	*/
	Order.prototype.getEmployee = function() {
	  return this.employee;
	};

	/**
	* Set the field value
	* Total price of the order in cents
	*
	* @memberof order.Order
	* @param {Null|Number} total must be a long integer
	*/
	Order.prototype.setTotal = function(total) {
	  this.total = total;
	};

	/**
	* Get the field value
	* Total price of the order in cents
	* @memberof order.Order
	* @return {Null|Number} must be a long integer
	*/
	Order.prototype.getTotal = function() {
	  return this.total;
	};

	/**
	* Set the field value
	* External reference id if present in the order
	*
	* @memberof order.Order
	* @param {Null|String} externalReferenceId 
	*/
	Order.prototype.setExternalReferenceId = function(externalReferenceId) {
	  this.externalReferenceId = externalReferenceId;
	};

	/**
	* Get the field value
	* External reference id if present in the order
	* @memberof order.Order
	* @return {Null|String} 
	*/
	Order.prototype.getExternalReferenceId = function() {
	  return this.externalReferenceId;
	};

	/**
	* Set the field value
	* The net of orders with payment minus the amount collected. Includes refunds, manual refunds, tax, tip, service charge, non-revenue items, paid gift card activations and loads and discounts
	*
	* @memberof order.Order
	* @param {Null|Number} unpaidBalance must be a long integer
	*/
	Order.prototype.setUnpaidBalance = function(unpaidBalance) {
	  this.unpaidBalance = unpaidBalance;
	};

	/**
	* Get the field value
	* The net of orders with payment minus the amount collected. Includes refunds, manual refunds, tax, tip, service charge, non-revenue items, paid gift card activations and loads and discounts
	* @memberof order.Order
	* @return {Null|Number} must be a long integer
	*/
	Order.prototype.getUnpaidBalance = function() {
	  return this.unpaidBalance;
	};

	/**
	* Set the field value
	* Is this order paid or not?
	*
	* @memberof order.Order
	* @param {Null|order.PaymentState} paymentState 
	*/
	Order.prototype.setPaymentState = function(paymentState) {
	  this.paymentState = paymentState;
	};

	/**
	* Get the field value
	* Is this order paid or not?
	* @memberof order.Order
	* @return {Null|order.PaymentState} 
	*/
	Order.prototype.getPaymentState = function() {
	  return this.paymentState;
	};

	/**
	* Set the field value
	* @memberof order.Order
	* @param {Null|String} title 
	*/
	Order.prototype.setTitle = function(title) {
	  this.title = title;
	};

	/**
	* Get the field value
	* @memberof order.Order
	* @return {Null|String} 
	*/
	Order.prototype.getTitle = function() {
	  return this.title;
	};

	/**
	* Set the field value
	* An arbitrary string with information about this order, may be printed on the order receipt and displayed in apps
	*
	* @memberof order.Order
	* @param {Null|String} note 
	*/
	Order.prototype.setNote = function(note) {
	  this.note = note;
	};

	/**
	* Get the field value
	* An arbitrary string with information about this order, may be printed on the order receipt and displayed in apps
	* @memberof order.Order
	* @return {Null|String} 
	*/
	Order.prototype.getNote = function() {
	  return this.note;
	};

	/**
	* Set the field value
	* @memberof order.Order
	* @param {Null|order.OrderType} orderType 
	*/
	Order.prototype.setOrderType = function(orderType) {
	  this.orderType = orderType;
	};

	/**
	* Get the field value
	* @memberof order.Order
	* @return {Null|order.OrderType} 
	*/
	Order.prototype.getOrderType = function() {
	  return this.orderType;
	};

	/**
	* Set the field value
	* If true then this order should not have taxes applied to it
	*
	* @memberof order.Order
	* @param {Boolean} taxRemoved 
	*/
	Order.prototype.setTaxRemoved = function(taxRemoved) {
	  this.taxRemoved = taxRemoved;
	};

	/**
	* Get the field value
	* If true then this order should not have taxes applied to it
	* @memberof order.Order
	* @return {Boolean} 
	*/
	Order.prototype.getTaxRemoved = function() {
	  return this.taxRemoved;
	};

	/**
	* Set the field value
	* This order was created by merchant with VAT enabled.
	*
	* @memberof order.Order
	* @param {Boolean} isVat 
	*/
	Order.prototype.setIsVat = function(isVat) {
	  this.isVat = isVat;
	};

	/**
	* Get the field value
	* This order was created by merchant with VAT enabled.
	* @memberof order.Order
	* @return {Boolean} 
	*/
	Order.prototype.getIsVat = function() {
	  return this.isVat;
	};

	/**
	* Set the field value
	* A String generally describing the state of the Order. When creating an Order, the value must be manually set to "open". If no value is set, the state defaults to null, which indicates an unfinished Order. An unfinished order is not displayed in user interfaces and can only be retrieved by its id. Non-null values such as "open" and "locked" are not checked or enforced by the server. Therefore, these values should not be used to make any logical decisions about the Order.
	*
	* @memberof order.Order
	* @param {Null|String} state 
	*/
	Order.prototype.setState = function(state) {
	  this.state = state;
	};

	/**
	* Get the field value
	* A String generally describing the state of the Order. When creating an Order, the value must be manually set to "open". If no value is set, the state defaults to null, which indicates an unfinished Order. An unfinished order is not displayed in user interfaces and can only be retrieved by its id. Non-null values such as "open" and "locked" are not checked or enforced by the server. Therefore, these values should not be used to make any logical decisions about the Order.
	* @memberof order.Order
	* @return {Null|String} 
	*/
	Order.prototype.getState = function() {
	  return this.state;
	};

	/**
	* Set the field value
	* Whether this order represents a manual transaction. A manual transaction is a transaction that has an arbitrary amount defined and is not associated with any inventory items. For example, the Clover Sale App and Clover Manual Transaction App create manual transactions. A manual transactions will have a single associated line item to hold the sale amount, but the generated receipt will display this differently to indicate that it is not considered a typical order with inventory items.
	*
	* @memberof order.Order
	* @param {Boolean} manualTransaction 
	*/
	Order.prototype.setManualTransaction = function(manualTransaction) {
	  this.manualTransaction = manualTransaction;
	};

	/**
	* Get the field value
	* Whether this order represents a manual transaction. A manual transaction is a transaction that has an arbitrary amount defined and is not associated with any inventory items. For example, the Clover Sale App and Clover Manual Transaction App create manual transactions. A manual transactions will have a single associated line item to hold the sale amount, but the generated receipt will display this differently to indicate that it is not considered a typical order with inventory items.
	* @memberof order.Order
	* @return {Boolean} 
	*/
	Order.prototype.getManualTransaction = function() {
	  return this.manualTransaction;
	};

	/**
	* Set the field value
	* Whether similar line items should be grouped together on the receipt that this order generates. Item "similarity" is based on items having matching values for a set of properties including price, modifiers, and discounts.
	*
	* @memberof order.Order
	* @param {Boolean} groupLineItems 
	*/
	Order.prototype.setGroupLineItems = function(groupLineItems) {
	  this.groupLineItems = groupLineItems;
	};

	/**
	* Get the field value
	* Whether similar line items should be grouped together on the receipt that this order generates. Item "similarity" is based on items having matching values for a set of properties including price, modifiers, and discounts.
	* @memberof order.Order
	* @return {Boolean} 
	*/
	Order.prototype.getGroupLineItems = function() {
	  return this.groupLineItems;
	};

	/**
	* Set the field value
	* Whether this order was created in test mode. Payments made against test orders are not processed. Test mode orders can be deleted from the Orders App on the merchant's device or web dashboard (https://www.clover.com/orders/m/{mId}/orders). They will also be deleted when the device sends a POST to the /v2/merchant/{mId}/orders/delete_all_tests endpoint.
	*
	* @memberof order.Order
	* @param {Boolean} testMode 
	*/
	Order.prototype.setTestMode = function(testMode) {
	  this.testMode = testMode;
	};

	/**
	* Get the field value
	* Whether this order was created in test mode. Payments made against test orders are not processed. Test mode orders can be deleted from the Orders App on the merchant's device or web dashboard (https://www.clover.com/orders/m/{mId}/orders). They will also be deleted when the device sends a POST to the /v2/merchant/{mId}/orders/delete_all_tests endpoint.
	* @memberof order.Order
	* @return {Boolean} 
	*/
	Order.prototype.getTestMode = function() {
	  return this.testMode;
	};

	/**
	* Set the field value
	* Possible values: SPLIT_GUEST, SPLIT_ITEM, SPLIT_CUSTOM, FULL. During the payment flow, if the user chooses to split the payment for this order, this field will be set to one of the SPLIT_* values to indicate how the full amount should be split. If the user chooses to pay for the order in full with one payment, then this field will be FULL.
	*
	* @memberof order.Order
	* @param {order.PayType} payType 
	*/
	Order.prototype.setPayType = function(payType) {
	  this.payType = payType;
	};

	/**
	* Get the field value
	* Possible values: SPLIT_GUEST, SPLIT_ITEM, SPLIT_CUSTOM, FULL. During the payment flow, if the user chooses to split the payment for this order, this field will be set to one of the SPLIT_* values to indicate how the full amount should be split. If the user chooses to pay for the order in full with one payment, then this field will be FULL.
	* @memberof order.Order
	* @return {order.PayType} 
	*/
	Order.prototype.getPayType = function() {
	  return this.payType;
	};

	/**
	* Set the field value
	* Creation timestamp
	*
	* @memberof order.Order
	* @param {Number} createdTime must be a long integer
	*/
	Order.prototype.setCreatedTime = function(createdTime) {
	  this.createdTime = createdTime;
	};

	/**
	* Get the field value
	* Creation timestamp
	* @memberof order.Order
	* @return {Number} must be a long integer
	*/
	Order.prototype.getCreatedTime = function() {
	  return this.createdTime;
	};

	/**
	* Set the field value
	* The time at which the client created this order
	*
	* @memberof order.Order
	* @param {Number} clientCreatedTime must be a long integer
	*/
	Order.prototype.setClientCreatedTime = function(clientCreatedTime) {
	  this.clientCreatedTime = clientCreatedTime;
	};

	/**
	* Get the field value
	* The time at which the client created this order
	* @memberof order.Order
	* @return {Number} must be a long integer
	*/
	Order.prototype.getClientCreatedTime = function() {
	  return this.clientCreatedTime;
	};

	/**
	* Set the field value
	* Last modified time of the order
	*
	* @memberof order.Order
	* @param {Number} modifiedTime must be a long integer
	*/
	Order.prototype.setModifiedTime = function(modifiedTime) {
	  this.modifiedTime = modifiedTime;
	};

	/**
	* Get the field value
	* Last modified time of the order
	* @memberof order.Order
	* @return {Number} must be a long integer
	*/
	Order.prototype.getModifiedTime = function() {
	  return this.modifiedTime;
	};

	/**
	* Set the field value
	* @memberof order.Order
	* @param {Number} deletedTimestamp must be a long integer
	*/
	Order.prototype.setDeletedTimestamp = function(deletedTimestamp) {
	  this.deletedTimestamp = deletedTimestamp;
	};

	/**
	* Get the field value
	* @memberof order.Order
	* @return {Number} must be a long integer
	*/
	Order.prototype.getDeletedTimestamp = function() {
	  return this.deletedTimestamp;
	};

	/**
	* Set the field value
	* Optional service charge (gratuity) applied to this order
	*
	* @memberof order.Order
	* @param {Null|base.ServiceCharge} serviceCharge 
	*/
	Order.prototype.setServiceCharge = function(serviceCharge) {
	  this.serviceCharge = serviceCharge;
	};

	/**
	* Get the field value
	* Optional service charge (gratuity) applied to this order
	* @memberof order.Order
	* @return {Null|base.ServiceCharge} 
	*/
	Order.prototype.getServiceCharge = function() {
	  return this.serviceCharge;
	};

	/**
	* Set the field value
	* Amount or percentage discounts applied to the order subtotal. To retrieve discounts applied to individual items, use the Get all line items for an order endpoint with the discounts field expanded (v3/merchants/{mId}/orders/{orderId}/line_items?expand=discounts).
	*
	* @memberof order.Order
	* @param {Array.<order.Discount>} discounts An array of 
	*/
	Order.prototype.setDiscounts = function(discounts) {
	  this.discounts = discounts;
	};

	/**
	* Get the field value
	* Amount or percentage discounts applied to the order subtotal. To retrieve discounts applied to individual items, use the Get all line items for an order endpoint with the discounts field expanded (v3/merchants/{mId}/orders/{orderId}/line_items?expand=discounts).
	* @memberof order.Order
	* @return {Array.<order.Discount>} An array of 
	*/
	Order.prototype.getDiscounts = function() {
	  return this.discounts;
	};

	/**
	* Set the field value
	* Line items associated with this order
	*
	* @memberof order.Order
	* @param {Array.<order.LineItem>} lineItems An array of 
	*/
	Order.prototype.setLineItems = function(lineItems) {
	  this.lineItems = lineItems;
	};

	/**
	* Get the field value
	* Line items associated with this order
	* @memberof order.Order
	* @return {Array.<order.LineItem>} An array of 
	*/
	Order.prototype.getLineItems = function() {
	  return this.lineItems;
	};

	/**
	* Set the field value
	* Payments that were made for this order. If multiple payments were made, then the payType field should reflect the method used to split the total amount.
	*
	* @memberof order.Order
	* @param {Array.<payments.Payment>} payments An array of 
	*/
	Order.prototype.setPayments = function(payments) {
	  this.payments = payments;
	};

	/**
	* Get the field value
	* Payments that were made for this order. If multiple payments were made, then the payType field should reflect the method used to split the total amount.
	* @memberof order.Order
	* @return {Array.<payments.Payment>} An array of 
	*/
	Order.prototype.getPayments = function() {
	  return this.payments;
	};

	/**
	* Set the field value
	* Refunds that were made for this order
	*
	* @memberof order.Order
	* @param {Array.<payments.Refund>} refunds An array of 
	*/
	Order.prototype.setRefunds = function(refunds) {
	  this.refunds = refunds;
	};

	/**
	* Get the field value
	* Refunds that were made for this order
	* @memberof order.Order
	* @return {Array.<payments.Refund>} An array of 
	*/
	Order.prototype.getRefunds = function() {
	  return this.refunds;
	};

	/**
	* Set the field value
	* Credits associated with this order.
	*
	* @memberof order.Order
	* @param {Array.<payments.Credit>} credits An array of 
	*/
	Order.prototype.setCredits = function(credits) {
	  this.credits = credits;
	};

	/**
	* Get the field value
	* Credits associated with this order.
	* @memberof order.Order
	* @return {Array.<payments.Credit>} An array of 
	*/
	Order.prototype.getCredits = function() {
	  return this.credits;
	};

	/**
	* Set the field value
	* Voided payments associated with this order
	*
	* @memberof order.Order
	* @param {Array.<payments.Payment>} voids An array of 
	*/
	Order.prototype.setVoids = function(voids) {
	  this.voids = voids;
	};

	/**
	* Get the field value
	* Voided payments associated with this order
	* @memberof order.Order
	* @return {Array.<payments.Payment>} An array of 
	*/
	Order.prototype.getVoids = function() {
	  return this.voids;
	};

	/**
	* Set the field value
	* Pre-authorizations associated with this order
	*
	* @memberof order.Order
	* @param {Array.<payments.Payment>} preAuths An array of 
	*/
	Order.prototype.setPreAuths = function(preAuths) {
	  this.preAuths = preAuths;
	};

	/**
	* Get the field value
	* Pre-authorizations associated with this order
	* @memberof order.Order
	* @return {Array.<payments.Payment>} An array of 
	*/
	Order.prototype.getPreAuths = function() {
	  return this.preAuths;
	};

	/**
	* Set the field value
	* Device which created the order, a 128-bit UUID, not a normal base-13 Clover ID.
	*
	* @memberof order.Order
	* @param {base.Reference|Null} device 
	*/
	Order.prototype.setDevice = function(device) {
	  this.device = device;
	};

	/**
	* Get the field value
	* Device which created the order, a 128-bit UUID, not a normal base-13 Clover ID.
	* @memberof order.Order
	* @return {base.Reference|Null} 
	*/
	Order.prototype.getDevice = function() {
	  return this.device;
	};

	/**
	* Set the field value
	* Card authorizations associated with this order
	*
	* @memberof order.Order
	* @param {Array.<payments.Authorization>} authorizations An array of 
	*/
	Order.prototype.setAuthorizations = function(authorizations) {
	  this.authorizations = authorizations;
	};

	/**
	* Get the field value
	* Card authorizations associated with this order
	* @memberof order.Order
	* @return {Array.<payments.Authorization>} An array of 
	*/
	Order.prototype.getAuthorizations = function() {
	  return this.authorizations;
	};

	/**
	* Set the field value
	* @memberof order.Order
	* @param {base.Reference} merchant 
	*/
	Order.prototype.setMerchant = function(merchant) {
	  this.merchant = merchant;
	};

	/**
	* Get the field value
	* @memberof order.Order
	* @return {base.Reference} 
	*/
	Order.prototype.getMerchant = function() {
	  return this.merchant;
	};

	/**
	* Set the field value
	* @memberof order.Order
	* @param {Null|onlineorder.OnlineOrder} onlineOrder 
	*/
	Order.prototype.setOnlineOrder = function(onlineOrder) {
	  this.onlineOrder = onlineOrder;
	};

	/**
	* Get the field value
	* @memberof order.Order
	* @return {Null|onlineorder.OnlineOrder} 
	*/
	Order.prototype.getOnlineOrder = function() {
	  return this.onlineOrder;
	};

	/**
	* Set the field value
	* Print groups for line items of this order.
	*
	* @memberof order.Order
	* @param {Array.<order.PrintGroup>} printGroups An array of 
	*/
	Order.prototype.setPrintGroups = function(printGroups) {
	  this.printGroups = printGroups;
	};

	/**
	* Get the field value
	* Print groups for line items of this order.
	* @memberof order.Order
	* @return {Array.<order.PrintGroup>} An array of 
	*/
	Order.prototype.getPrintGroups = function() {
	  return this.printGroups;
	};

	/**
	* @memberof order.Order
	* @private
	*/
	Order.prototype.getMetaInfo = function(fieldName) {
	  var curclass = this._class_;
	  do {
	    var fieldMetaInfo = curclass._meta_.fields[fieldName];
	    if(fieldMetaInfo) {
	      return fieldMetaInfo;
	    }
	    if(curclass._meta_._superMeta_) {
	      curclass = curclass._meta_._superMeta_._class_;
	    } else {
	      curclass = null;
	    }
	  } while(curclass);
	  return null;
	};

	Order.prototype.toString = function() {
	  return JSON.stringify(this);
	};

	Order._meta_ =  {fields:  {}};
	Order._meta_._class_ =  Order;
	Order._meta_.fields["id"] = {};
	Order._meta_.fields["id"].type = String;
	Order._meta_.fields["currency"] = {};
	Order._meta_.fields["currency"].type = String;
	Order._meta_.fields["customerId"] = {};
	Order._meta_.fields["customerId"].type = Number;
	Order._meta_.fields["customerUuid"] = {};
	Order._meta_.fields["customerUuid"].type = String;
	Order._meta_.fields["orderTypeId"] = {};
	Order._meta_.fields["orderTypeId"].type = Number;
	Order._meta_.fields["customers"] = {};
	Order._meta_.fields["customers"].type = Array;
	Order._meta_.fields["customers"].elementType = customers_Customer;
	Order._meta_.fields["employee"] = {};
	Order._meta_.fields["employee"].type = base_Reference;
	Order._meta_.fields["total"] = {};
	Order._meta_.fields["total"].type = Number;
	Order._meta_.fields["externalReferenceId"] = {};
	Order._meta_.fields["externalReferenceId"].type = String;
	Order._meta_.fields["unpaidBalance"] = {};
	Order._meta_.fields["unpaidBalance"].type = Number;
	Order._meta_.fields["paymentState"] = {};
	Order._meta_.fields["paymentState"].type = order_PaymentState;
	Order._meta_.fields["title"] = {};
	Order._meta_.fields["title"].type = String;
	Order._meta_.fields["note"] = {};
	Order._meta_.fields["note"].type = String;
	Order._meta_.fields["orderType"] = {};
	Order._meta_.fields["orderType"].type = order_OrderType;
	Order._meta_.fields["taxRemoved"] = {};
	Order._meta_.fields["taxRemoved"].type = Boolean;
	Order._meta_.fields["isVat"] = {};
	Order._meta_.fields["isVat"].type = Boolean;
	Order._meta_.fields["state"] = {};
	Order._meta_.fields["state"].type = String;
	Order._meta_.fields["manualTransaction"] = {};
	Order._meta_.fields["manualTransaction"].type = Boolean;
	Order._meta_.fields["groupLineItems"] = {};
	Order._meta_.fields["groupLineItems"].type = Boolean;
	Order._meta_.fields["testMode"] = {};
	Order._meta_.fields["testMode"].type = Boolean;
	Order._meta_.fields["payType"] = {};
	Order._meta_.fields["payType"].type = order_PayType;
	Order._meta_.fields["createdTime"] = {};
	Order._meta_.fields["createdTime"].type = Number;
	Order._meta_.fields["clientCreatedTime"] = {};
	Order._meta_.fields["clientCreatedTime"].type = Number;
	Order._meta_.fields["modifiedTime"] = {};
	Order._meta_.fields["modifiedTime"].type = Number;
	Order._meta_.fields["deletedTimestamp"] = {};
	Order._meta_.fields["deletedTimestamp"].type = Number;
	Order._meta_.fields["serviceCharge"] = {};
	Order._meta_.fields["serviceCharge"].type = base_ServiceCharge;
	Order._meta_.fields["discounts"] = {};
	Order._meta_.fields["discounts"].type = Array;
	Order._meta_.fields["discounts"].elementType = order_Discount;
	Order._meta_.fields["lineItems"] = {};
	Order._meta_.fields["lineItems"].type = Array;
	Order._meta_.fields["lineItems"].elementType = order_LineItem;
	Order._meta_.fields["payments"] = {};
	Order._meta_.fields["payments"].type = Array;
	Order._meta_.fields["payments"].elementType = payments_Payment;
	Order._meta_.fields["refunds"] = {};
	Order._meta_.fields["refunds"].type = Array;
	Order._meta_.fields["refunds"].elementType = payments_Refund;
	Order._meta_.fields["credits"] = {};
	Order._meta_.fields["credits"].type = Array;
	Order._meta_.fields["credits"].elementType = payments_Credit;
	Order._meta_.fields["voids"] = {};
	Order._meta_.fields["voids"].type = Array;
	Order._meta_.fields["voids"].elementType = payments_Payment;
	Order._meta_.fields["preAuths"] = {};
	Order._meta_.fields["preAuths"].type = Array;
	Order._meta_.fields["preAuths"].elementType = payments_Payment;
	Order._meta_.fields["device"] = {};
	Order._meta_.fields["device"].type = base_Reference;
	Order._meta_.fields["authorizations"] = {};
	Order._meta_.fields["authorizations"].type = Array;
	Order._meta_.fields["authorizations"].elementType = payments_Authorization;
	Order._meta_.fields["merchant"] = {};
	Order._meta_.fields["merchant"].type = base_Reference;
	Order._meta_.fields["onlineOrder"] = {};
	Order._meta_.fields["onlineOrder"].type = onlineorder_OnlineOrder;
	Order._meta_.fields["printGroups"] = {};
	Order._meta_.fields["printGroups"].type = Array;
	Order._meta_.fields["printGroups"].elementType = order_PrintGroup;

	//
	// Expose the module.
	//
	if (true) {
	module.exports = Order;
	}



/***/ }),
/* 69 */
/***/ (function(module, exports, __webpack_require__) {

	/**
	 * Autogenerated by Avro
	 * 
	 * DO NOT EDIT DIRECTLY
	 */


	/**
	* @memberof payments
	* @enum {string}
	*/
	var CardType = {
	  VISA : "VISA",
	  MC : "MC",
	  AMEX : "AMEX",
	  DISCOVER : "DISCOVER",
	  DINERS_CLUB : "DINERS_CLUB",
	  JCB : "JCB",
	  MAESTRO : "MAESTRO",
	  SOLO : "SOLO",
	  LASER : "LASER",
	  CHINA_UNION_PAY : "CHINA_UNION_PAY",
	  CARTE_BLANCHE : "CARTE_BLANCHE",
	  UNKNOWN : "UNKNOWN",
	  GIFT_CARD : "GIFT_CARD",
	  EBT : "EBT",
	  GIROCARD : "GIROCARD",
	  INTERAC : "INTERAC",
	  OTHER : "OTHER"
	};


	//
	// Expose the module.
	//
	if (true) {
	module.exports = CardType;
	}



/***/ }),
/* 70 */
/***/ (function(module, exports, __webpack_require__) {

	/**
	 * Autogenerated by Avro
	 * 
	 * DO NOT EDIT DIRECTLY
	 */


	/**
	* @constructor
	* @memberof payments
	*/
	var VaultedCard = function() {
	  this._class_ = VaultedCard;
	  this.first6 = undefined;
	  this.last4 = undefined;
	  this.cardholderName = undefined;
	  this.expirationDate = undefined;
	  this.token = undefined;
	};


	/**
	* Set the field value
	* @memberof payments.VaultedCard
	* @param {String} first6 
	*/
	VaultedCard.prototype.setFirst6 = function(first6) {
	  this.first6 = first6;
	};

	/**
	* Get the field value
	* @memberof payments.VaultedCard
	* @return {String} 
	*/
	VaultedCard.prototype.getFirst6 = function() {
	  return this.first6;
	};

	/**
	* Set the field value
	* @memberof payments.VaultedCard
	* @param {String} last4 
	*/
	VaultedCard.prototype.setLast4 = function(last4) {
	  this.last4 = last4;
	};

	/**
	* Get the field value
	* @memberof payments.VaultedCard
	* @return {String} 
	*/
	VaultedCard.prototype.getLast4 = function() {
	  return this.last4;
	};

	/**
	* Set the field value
	* @memberof payments.VaultedCard
	* @param {String} cardholderName 
	*/
	VaultedCard.prototype.setCardholderName = function(cardholderName) {
	  this.cardholderName = cardholderName;
	};

	/**
	* Get the field value
	* @memberof payments.VaultedCard
	* @return {String} 
	*/
	VaultedCard.prototype.getCardholderName = function() {
	  return this.cardholderName;
	};

	/**
	* Set the field value
	* @memberof payments.VaultedCard
	* @param {String} expirationDate 
	*/
	VaultedCard.prototype.setExpirationDate = function(expirationDate) {
	  this.expirationDate = expirationDate;
	};

	/**
	* Get the field value
	* @memberof payments.VaultedCard
	* @return {String} 
	*/
	VaultedCard.prototype.getExpirationDate = function() {
	  return this.expirationDate;
	};

	/**
	* Set the field value
	* @memberof payments.VaultedCard
	* @param {String} token 
	*/
	VaultedCard.prototype.setToken = function(token) {
	  this.token = token;
	};

	/**
	* Get the field value
	* @memberof payments.VaultedCard
	* @return {String} 
	*/
	VaultedCard.prototype.getToken = function() {
	  return this.token;
	};

	/**
	* @memberof payments.VaultedCard
	* @private
	*/
	VaultedCard.prototype.getMetaInfo = function(fieldName) {
	  var curclass = this._class_;
	  do {
	    var fieldMetaInfo = curclass._meta_.fields[fieldName];
	    if(fieldMetaInfo) {
	      return fieldMetaInfo;
	    }
	    if(curclass._meta_._superMeta_) {
	      curclass = curclass._meta_._superMeta_._class_;
	    } else {
	      curclass = null;
	    }
	  } while(curclass);
	  return null;
	};

	VaultedCard.prototype.toString = function() {
	  return JSON.stringify(this);
	};

	VaultedCard._meta_ =  {fields:  {}};
	VaultedCard._meta_._class_ =  VaultedCard;
	VaultedCard._meta_.fields["first6"] = {};
	VaultedCard._meta_.fields["first6"].type = String;
	VaultedCard._meta_.fields["last4"] = {};
	VaultedCard._meta_.fields["last4"].type = String;
	VaultedCard._meta_.fields["cardholderName"] = {};
	VaultedCard._meta_.fields["cardholderName"].type = String;
	VaultedCard._meta_.fields["expirationDate"] = {};
	VaultedCard._meta_.fields["expirationDate"].type = String;
	VaultedCard._meta_.fields["token"] = {};
	VaultedCard._meta_.fields["token"].type = String;

	//
	// Expose the module.
	//
	if (true) {
	module.exports = VaultedCard;
	}



/***/ }),
/* 71 */
/***/ (function(module, exports) {

	module.exports = function (it, Constructor, name, forbiddenField) {
	  if (!(it instanceof Constructor) || (forbiddenField !== undefined && forbiddenField in it)) {
	    throw TypeError(name + ': incorrect invocation!');
	  } return it;
	};


/***/ }),
/* 72 */
/***/ (function(module, exports, __webpack_require__) {

	var ctx = __webpack_require__(44);
	var call = __webpack_require__(299);
	var isArrayIter = __webpack_require__(188);
	var anObject = __webpack_require__(6);
	var toLength = __webpack_require__(17);
	var getIterFn = __webpack_require__(204);
	var BREAK = {};
	var RETURN = {};
	var exports = module.exports = function (iterable, entries, fn, that, ITERATOR) {
	  var iterFn = ITERATOR ? function () { return iterable; } : getIterFn(iterable);
	  var f = ctx(fn, that, entries ? 2 : 1);
	  var index = 0;
	  var length, step, iterator, result;
	  if (typeof iterFn != 'function') throw TypeError(iterable + ' is not iterable!');
	  // fast case for arrays with default iterator
	  if (isArrayIter(iterFn)) for (length = toLength(iterable.length); length > index; index++) {
	    result = entries ? f(anObject(step = iterable[index])[0], step[1]) : f(iterable[index]);
	    if (result === BREAK || result === RETURN) return result;
	  } else for (iterator = iterFn.call(iterable); !(step = iterator.next()).done;) {
	    result = call(iterator, f, step.value, entries);
	    if (result === BREAK || result === RETURN) return result;
	  }
	};
	exports.BREAK = BREAK;
	exports.RETURN = RETURN;


/***/ }),
/* 73 */
/***/ (function(module, exports, __webpack_require__) {

	// 19.1.2.2 / 15.2.3.5 Object.create(O [, Properties])
	var anObject = __webpack_require__(6);
	var dPs = __webpack_require__(305);
	var enumBugKeys = __webpack_require__(184);
	var IE_PROTO = __webpack_require__(197)('IE_PROTO');
	var Empty = function () { /* empty */ };
	var PROTOTYPE = 'prototype';

	// Create object with fake `null` prototype: use iframe Object with cleared prototype
	var createDict = function () {
	  // Thrash, waste and sodomy: IE GC bug
	  var iframe = __webpack_require__(183)('iframe');
	  var i = enumBugKeys.length;
	  var lt = '<';
	  var gt = '>';
	  var iframeDocument;
	  iframe.style.display = 'none';
	  __webpack_require__(186).appendChild(iframe);
	  iframe.src = 'javascript:'; // eslint-disable-line no-script-url
	  // createDict = iframe.contentWindow.Object;
	  // html.removeChild(iframe);
	  iframeDocument = iframe.contentWindow.document;
	  iframeDocument.open();
	  iframeDocument.write(lt + 'script' + gt + 'document.F=Object' + lt + '/script' + gt);
	  iframeDocument.close();
	  createDict = iframeDocument.F;
	  while (i--) delete createDict[PROTOTYPE][enumBugKeys[i]];
	  return createDict();
	};

	module.exports = Object.create || function create(O, Properties) {
	  var result;
	  if (O !== null) {
	    Empty[PROTOTYPE] = anObject(O);
	    result = new Empty();
	    Empty[PROTOTYPE] = null;
	    // add "__proto__" for Object.getPrototypeOf polyfill
	    result[IE_PROTO] = O;
	  } else result = createDict();
	  return Properties === undefined ? result : dPs(result, Properties);
	};


/***/ }),
/* 74 */
/***/ (function(module, exports, __webpack_require__) {

	// 19.1.2.7 / 15.2.3.4 Object.getOwnPropertyNames(O)
	var $keys = __webpack_require__(307);
	var hiddenKeys = __webpack_require__(184).concat('length', 'prototype');

	exports.f = Object.getOwnPropertyNames || function getOwnPropertyNames(O) {
	  return $keys(O, hiddenKeys);
	};


/***/ }),
/* 75 */
/***/ (function(module, exports, __webpack_require__) {

	// 19.1.2.14 / 15.2.3.14 Object.keys(O)
	var $keys = __webpack_require__(307);
	var enumBugKeys = __webpack_require__(184);

	module.exports = Object.keys || function keys(O) {
	  return $keys(O, enumBugKeys);
	};


/***/ }),
/* 76 */
/***/ (function(module, exports) {

	module.exports = function (bitmap, value) {
	  return {
	    enumerable: !(bitmap & 1),
	    configurable: !(bitmap & 2),
	    writable: !(bitmap & 4),
	    value: value
	  };
	};


/***/ }),
/* 77 */
/***/ (function(module, exports, __webpack_require__) {

	var redefine = __webpack_require__(32);
	module.exports = function (target, src, safe) {
	  for (var key in src) redefine(target, key, src[key], safe);
	  return target;
	};


/***/ }),
/* 78 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';
	var global = __webpack_require__(9);
	var dP = __webpack_require__(20);
	var DESCRIPTORS = __webpack_require__(18);
	var SPECIES = __webpack_require__(16)('species');

	module.exports = function (KEY) {
	  var C = global[KEY];
	  if (DESCRIPTORS && C && !C[SPECIES]) dP.f(C, SPECIES, {
	    configurable: true,
	    get: function () { return this; }
	  });
	};


/***/ }),
/* 79 */
/***/ (function(module, exports, __webpack_require__) {

	var toInteger = __webpack_require__(46);
	var max = Math.max;
	var min = Math.min;
	module.exports = function (index, length) {
	  index = toInteger(index);
	  return index < 0 ? max(index + length, 0) : min(index, length);
	};


/***/ }),
/* 80 */
/***/ (function(module, exports) {

	var id = 0;
	var px = Math.random();
	module.exports = function (key) {
	  return 'Symbol('.concat(key === undefined ? '' : key, ')_', (++id + px).toString(36));
	};


/***/ }),
/* 81 */
/***/ (function(module, exports, __webpack_require__) {

	var isObject = __webpack_require__(12);
	module.exports = function (it, TYPE) {
	  if (!isObject(it) || it._t !== TYPE) throw TypeError('Incompatible receiver, ' + TYPE + ' required!');
	  return it;
	};


/***/ }),
/* 82 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';

	exports.__esModule = true;
	exports.extractPath = extractPath;
	exports.parsePath = parsePath;

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }

	var _warning = __webpack_require__(54);

	var _warning2 = _interopRequireDefault(_warning);

	function extractPath(string) {
	  var match = string.match(/^https?:\/\/[^\/]*/);

	  if (match == null) return string;

	  return string.substring(match[0].length);
	}

	function parsePath(path) {
	  var pathname = extractPath(path);
	  var search = '';
	  var hash = '';

	  (undefined) !== 'production' ? _warning2['default'](path === pathname, 'A path must be pathname + search + hash only, not a fully qualified URL like "%s"', path) : undefined;

	  var hashIndex = pathname.indexOf('#');
	  if (hashIndex !== -1) {
	    hash = pathname.substring(hashIndex);
	    pathname = pathname.substring(0, hashIndex);
	  }

	  var searchIndex = pathname.indexOf('?');
	  if (searchIndex !== -1) {
	    search = pathname.substring(searchIndex);
	    pathname = pathname.substring(0, searchIndex);
	  }

	  if (pathname === '') pathname = '/';

	  return {
	    pathname: pathname,
	    search: search,
	    hash: hash
	  };
	}

/***/ }),
/* 83 */
[1242, 13],
/* 84 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';

	exports.__esModule = true;
	exports.routes = exports.route = exports.components = exports.component = exports.history = undefined;
	exports.falsy = falsy;

	var _react = __webpack_require__(4);

	var func = _react.PropTypes.func;
	var object = _react.PropTypes.object;
	var arrayOf = _react.PropTypes.arrayOf;
	var oneOfType = _react.PropTypes.oneOfType;
	var element = _react.PropTypes.element;
	var shape = _react.PropTypes.shape;
	var string = _react.PropTypes.string;
	function falsy(props, propName, componentName) {
	  if (props[propName]) return new Error('<' + componentName + '> should not have a "' + propName + '" prop');
	}

	var history = exports.history = shape({
	  listen: func.isRequired,
	  push: func.isRequired,
	  replace: func.isRequired,
	  go: func.isRequired,
	  goBack: func.isRequired,
	  goForward: func.isRequired
	});

	var component = exports.component = oneOfType([func, string]);
	var components = exports.components = oneOfType([component, object]);
	var route = exports.route = oneOfType([object, element]);
	var routes = exports.routes = oneOfType([route, arrayOf(route)]);

/***/ }),
/* 85 */
/***/ (function(module, exports, __webpack_require__) {

	/**
	 * Copyright (c) 2014-present, Facebook, Inc.
	 *
	 * This source code is licensed under the MIT license found in the
	 * LICENSE file in the root directory of this source tree.
	 *
	 */

	'use strict';

	var _assign = __webpack_require__(19);

	var ReactCurrentOwner = __webpack_require__(56);

	var warning = __webpack_require__(8);
	var canDefineProperty = __webpack_require__(152);
	var hasOwnProperty = Object.prototype.hasOwnProperty;

	var REACT_ELEMENT_TYPE = __webpack_require__(370);

	var RESERVED_PROPS = {
	  key: true,
	  ref: true,
	  __self: true,
	  __source: true
	};

	var specialPropKeyWarningShown, specialPropRefWarningShown;

	function hasValidRef(config) {
	  if ((undefined) !== 'production') {
	    if (hasOwnProperty.call(config, 'ref')) {
	      var getter = Object.getOwnPropertyDescriptor(config, 'ref').get;
	      if (getter && getter.isReactWarning) {
	        return false;
	      }
	    }
	  }
	  return config.ref !== undefined;
	}

	function hasValidKey(config) {
	  if ((undefined) !== 'production') {
	    if (hasOwnProperty.call(config, 'key')) {
	      var getter = Object.getOwnPropertyDescriptor(config, 'key').get;
	      if (getter && getter.isReactWarning) {
	        return false;
	      }
	    }
	  }
	  return config.key !== undefined;
	}

	function defineKeyPropWarningGetter(props, displayName) {
	  var warnAboutAccessingKey = function () {
	    if (!specialPropKeyWarningShown) {
	      specialPropKeyWarningShown = true;
	      (undefined) !== 'production' ? warning(false, '%s: `key` is not a prop. Trying to access it will result ' + 'in `undefined` being returned. If you need to access the same ' + 'value within the child component, you should pass it as a different ' + 'prop. (https://fb.me/react-special-props)', displayName) : void 0;
	    }
	  };
	  warnAboutAccessingKey.isReactWarning = true;
	  Object.defineProperty(props, 'key', {
	    get: warnAboutAccessingKey,
	    configurable: true
	  });
	}

	function defineRefPropWarningGetter(props, displayName) {
	  var warnAboutAccessingRef = function () {
	    if (!specialPropRefWarningShown) {
	      specialPropRefWarningShown = true;
	      (undefined) !== 'production' ? warning(false, '%s: `ref` is not a prop. Trying to access it will result ' + 'in `undefined` being returned. If you need to access the same ' + 'value within the child component, you should pass it as a different ' + 'prop. (https://fb.me/react-special-props)', displayName) : void 0;
	    }
	  };
	  warnAboutAccessingRef.isReactWarning = true;
	  Object.defineProperty(props, 'ref', {
	    get: warnAboutAccessingRef,
	    configurable: true
	  });
	}

	/**
	 * Factory method to create a new React element. This no longer adheres to
	 * the class pattern, so do not use new to call it. Also, no instanceof check
	 * will work. Instead test $$typeof field against Symbol.for('react.element') to check
	 * if something is a React Element.
	 *
	 * @param {*} type
	 * @param {*} key
	 * @param {string|object} ref
	 * @param {*} self A *temporary* helper to detect places where `this` is
	 * different from the `owner` when React.createElement is called, so that we
	 * can warn. We want to get rid of owner and replace string `ref`s with arrow
	 * functions, and as long as `this` and owner are the same, there will be no
	 * change in behavior.
	 * @param {*} source An annotation object (added by a transpiler or otherwise)
	 * indicating filename, line number, and/or other information.
	 * @param {*} owner
	 * @param {*} props
	 * @internal
	 */
	var ReactElement = function (type, key, ref, self, source, owner, props) {
	  var element = {
	    // This tag allow us to uniquely identify this as a React Element
	    $$typeof: REACT_ELEMENT_TYPE,

	    // Built-in properties that belong on the element
	    type: type,
	    key: key,
	    ref: ref,
	    props: props,

	    // Record the component responsible for creating this element.
	    _owner: owner
	  };

	  if ((undefined) !== 'production') {
	    // The validation flag is currently mutative. We put it on
	    // an external backing store so that we can freeze the whole object.
	    // This can be replaced with a WeakMap once they are implemented in
	    // commonly used development environments.
	    element._store = {};

	    // To make comparing ReactElements easier for testing purposes, we make
	    // the validation flag non-enumerable (where possible, which should
	    // include every environment we run tests in), so the test framework
	    // ignores it.
	    if (canDefineProperty) {
	      Object.defineProperty(element._store, 'validated', {
	        configurable: false,
	        enumerable: false,
	        writable: true,
	        value: false
	      });
	      // self and source are DEV only properties.
	      Object.defineProperty(element, '_self', {
	        configurable: false,
	        enumerable: false,
	        writable: false,
	        value: self
	      });
	      // Two elements created in two different places should be considered
	      // equal for testing purposes and therefore we hide it from enumeration.
	      Object.defineProperty(element, '_source', {
	        configurable: false,
	        enumerable: false,
	        writable: false,
	        value: source
	      });
	    } else {
	      element._store.validated = false;
	      element._self = self;
	      element._source = source;
	    }
	    if (Object.freeze) {
	      Object.freeze(element.props);
	      Object.freeze(element);
	    }
	  }

	  return element;
	};

	/**
	 * Create and return a new ReactElement of the given type.
	 * See https://facebook.github.io/react/docs/top-level-api.html#react.createelement
	 */
	ReactElement.createElement = function (type, config, children) {
	  var propName;

	  // Reserved names are extracted
	  var props = {};

	  var key = null;
	  var ref = null;
	  var self = null;
	  var source = null;

	  if (config != null) {
	    if (hasValidRef(config)) {
	      ref = config.ref;
	    }
	    if (hasValidKey(config)) {
	      key = '' + config.key;
	    }

	    self = config.__self === undefined ? null : config.__self;
	    source = config.__source === undefined ? null : config.__source;
	    // Remaining properties are added to a new props object
	    for (propName in config) {
	      if (hasOwnProperty.call(config, propName) && !RESERVED_PROPS.hasOwnProperty(propName)) {
	        props[propName] = config[propName];
	      }
	    }
	  }

	  // Children can be more than one argument, and those are transferred onto
	  // the newly allocated props object.
	  var childrenLength = arguments.length - 2;
	  if (childrenLength === 1) {
	    props.children = children;
	  } else if (childrenLength > 1) {
	    var childArray = Array(childrenLength);
	    for (var i = 0; i < childrenLength; i++) {
	      childArray[i] = arguments[i + 2];
	    }
	    if ((undefined) !== 'production') {
	      if (Object.freeze) {
	        Object.freeze(childArray);
	      }
	    }
	    props.children = childArray;
	  }

	  // Resolve default props
	  if (type && type.defaultProps) {
	    var defaultProps = type.defaultProps;
	    for (propName in defaultProps) {
	      if (props[propName] === undefined) {
	        props[propName] = defaultProps[propName];
	      }
	    }
	  }
	  if ((undefined) !== 'production') {
	    if (key || ref) {
	      if (typeof props.$$typeof === 'undefined' || props.$$typeof !== REACT_ELEMENT_TYPE) {
	        var displayName = typeof type === 'function' ? type.displayName || type.name || 'Unknown' : type;
	        if (key) {
	          defineKeyPropWarningGetter(props, displayName);
	        }
	        if (ref) {
	          defineRefPropWarningGetter(props, displayName);
	        }
	      }
	    }
	  }
	  return ReactElement(type, key, ref, self, source, ReactCurrentOwner.current, props);
	};

	/**
	 * Return a function that produces ReactElements of a given type.
	 * See https://facebook.github.io/react/docs/top-level-api.html#react.createfactory
	 */
	ReactElement.createFactory = function (type) {
	  var factory = ReactElement.createElement.bind(null, type);
	  // Expose the type on the factory and the prototype so that it can be
	  // easily accessed on elements. E.g. `<Foo />.type === Foo`.
	  // This should not be named `constructor` since this may not be the function
	  // that created the element, and it may not even be a constructor.
	  // Legacy hook TODO: Warn if this is accessed
	  factory.type = type;
	  return factory;
	};

	ReactElement.cloneAndReplaceKey = function (oldElement, newKey) {
	  var newElement = ReactElement(oldElement.type, newKey, oldElement.ref, oldElement._self, oldElement._source, oldElement._owner, oldElement.props);

	  return newElement;
	};

	/**
	 * Clone and return a new ReactElement using element as the starting point.
	 * See https://facebook.github.io/react/docs/top-level-api.html#react.cloneelement
	 */
	ReactElement.cloneElement = function (element, config, children) {
	  var propName;

	  // Original props are copied
	  var props = _assign({}, element.props);

	  // Reserved names are extracted
	  var key = element.key;
	  var ref = element.ref;
	  // Self is preserved since the owner is preserved.
	  var self = element._self;
	  // Source is preserved since cloneElement is unlikely to be targeted by a
	  // transpiler, and the original source is probably a better indicator of the
	  // true owner.
	  var source = element._source;

	  // Owner will be preserved, unless ref is overridden
	  var owner = element._owner;

	  if (config != null) {
	    if (hasValidRef(config)) {
	      // Silently steal the ref from the parent.
	      ref = config.ref;
	      owner = ReactCurrentOwner.current;
	    }
	    if (hasValidKey(config)) {
	      key = '' + config.key;
	    }

	    // Remaining properties override existing props
	    var defaultProps;
	    if (element.type && element.type.defaultProps) {
	      defaultProps = element.type.defaultProps;
	    }
	    for (propName in config) {
	      if (hasOwnProperty.call(config, propName) && !RESERVED_PROPS.hasOwnProperty(propName)) {
	        if (config[propName] === undefined && defaultProps !== undefined) {
	          // Resolve default props
	          props[propName] = defaultProps[propName];
	        } else {
	          props[propName] = config[propName];
	        }
	      }
	    }
	  }

	  // Children can be more than one argument, and those are transferred onto
	  // the newly allocated props object.
	  var childrenLength = arguments.length - 2;
	  if (childrenLength === 1) {
	    props.children = children;
	  } else if (childrenLength > 1) {
	    var childArray = Array(childrenLength);
	    for (var i = 0; i < childrenLength; i++) {
	      childArray[i] = arguments[i + 2];
	    }
	    props.children = childArray;
	  }

	  return ReactElement(element.type, key, ref, self, source, owner, props);
	};

	/**
	 * Verifies the object is a ReactElement.
	 * See https://facebook.github.io/react/docs/top-level-api.html#react.isvalidelement
	 * @param {?object} object
	 * @return {boolean} True if `object` is a valid component.
	 * @final
	 */
	ReactElement.isValidElement = function (object) {
	  return typeof object === 'object' && object !== null && object.$$typeof === REACT_ELEMENT_TYPE;
	};

	module.exports = ReactElement;

/***/ }),
/* 86 */
/***/ (function(module, exports, __webpack_require__) {

	/**
	 * Autogenerated by Avro
	 * 
	 * DO NOT EDIT DIRECTLY
	 */

	var base_Points = __webpack_require__(377);

	/**
	* @constructor
	* @memberof base
	*/
	var Signature = function() {
	  this._class_ = Signature;
	  this.strokes = undefined;
	  this.width = undefined;
	  this.height = undefined;
	};


	/**
	* Set the field value
	* A series of strokes representing a signature
	*
	* @memberof base.Signature
	* @param {Array.<base.Points>} strokes An array of 
	*/
	Signature.prototype.setStrokes = function(strokes) {
	  this.strokes = strokes;
	};

	/**
	* Get the field value
	* A series of strokes representing a signature
	* @memberof base.Signature
	* @return {Array.<base.Points>} An array of 
	*/
	Signature.prototype.getStrokes = function() {
	  return this.strokes;
	};

	/**
	* Set the field value
	* The pixel width of the signature
	*
	* @memberof base.Signature
	* @param {Number} width must be an integer
	*/
	Signature.prototype.setWidth = function(width) {
	  this.width = width;
	};

	/**
	* Get the field value
	* The pixel width of the signature
	* @memberof base.Signature
	* @return {Number} must be an integer
	*/
	Signature.prototype.getWidth = function() {
	  return this.width;
	};

	/**
	* Set the field value
	* The pixel height of the signature
	*
	* @memberof base.Signature
	* @param {Number} height must be an integer
	*/
	Signature.prototype.setHeight = function(height) {
	  this.height = height;
	};

	/**
	* Get the field value
	* The pixel height of the signature
	* @memberof base.Signature
	* @return {Number} must be an integer
	*/
	Signature.prototype.getHeight = function() {
	  return this.height;
	};

	/**
	* @memberof base.Signature
	* @private
	*/
	Signature.prototype.getMetaInfo = function(fieldName) {
	  var curclass = this._class_;
	  do {
	    var fieldMetaInfo = curclass._meta_.fields[fieldName];
	    if(fieldMetaInfo) {
	      return fieldMetaInfo;
	    }
	    if(curclass._meta_._superMeta_) {
	      curclass = curclass._meta_._superMeta_._class_;
	    } else {
	      curclass = null;
	    }
	  } while(curclass);
	  return null;
	};

	Signature.prototype.toString = function() {
	  return JSON.stringify(this);
	};

	Signature._meta_ =  {fields:  {}};
	Signature._meta_._class_ =  Signature;
	Signature._meta_.fields["strokes"] = {};
	Signature._meta_.fields["strokes"].type = Array;
	Signature._meta_.fields["strokes"].elementType = base_Points;
	Signature._meta_.fields["width"] = {};
	Signature._meta_.fields["width"].type = Number;
	Signature._meta_.fields["height"] = {};
	Signature._meta_.fields["height"].type = Number;

	//
	// Expose the module.
	//
	if (true) {
	module.exports = Signature;
	}



/***/ }),
/* 87 */
/***/ (function(module, exports, __webpack_require__) {

	/**
	 * Autogenerated by Avro
	 * 
	 * DO NOT EDIT DIRECTLY
	 */


	/**
	Symbols beginning with USER_ or REJECT_ are user-initiated.  Others are client- or server-initiated.
	* @memberof order
	* @enum {string}
	*/
	var VoidReason = {
	  USER_CANCEL : "USER_CANCEL",
	  TRANSPORT_ERROR : "TRANSPORT_ERROR",
	  REJECT_SIGNATURE : "REJECT_SIGNATURE",
	  REJECT_PARTIAL_AUTH : "REJECT_PARTIAL_AUTH",
	  NOT_APPROVED : "NOT_APPROVED",
	  FAILED : "FAILED",
	  AUTH_CLOSED_NEW_CARD : "AUTH_CLOSED_NEW_CARD",
	  DEVELOPER_PAY_PARTIAL_AUTH : "DEVELOPER_PAY_PARTIAL_AUTH",
	  REJECT_DUPLICATE : "REJECT_DUPLICATE",
	  REJECT_OFFLINE : "REJECT_OFFLINE",
	  GIFTCARD_LOAD_FAILED : "GIFTCARD_LOAD_FAILED",
	  USER_GIFTCARD_LOAD_CANCEL : "USER_GIFTCARD_LOAD_CANCEL",
	  DEVELOPER_PAY_TIP_ADJUST_FAILED : "DEVELOPER_PAY_TIP_ADJUST_FAILED",
	  USER_CUSTOMER_CANCEL : "USER_CUSTOMER_CANCEL",
	  FRAUD : "FRAUD"
	};


	//
	// Expose the module.
	//
	if (true) {
	module.exports = VoidReason;
	}



/***/ }),
/* 88 */
/***/ (function(module, exports, __webpack_require__) {

	/**
	 * Autogenerated by Avro
	 * 
	 * DO NOT EDIT DIRECTLY
	 */

	var printer_PrinterType = __webpack_require__(470);

	/**
	* @constructor
	* @memberof printer
	*/
	var Printer = function() {
	  this._class_ = Printer;
	  this.id = undefined;
	  this.mac = undefined;
	  this.model = undefined;
	  this.name = undefined;
	  this.ipAddress = undefined;
	  this.type = undefined;
	};


	/**
	* Set the field value
	* Unique identifier
	*
	* @memberof printer.Printer
	* @param {String} id 
	*/
	Printer.prototype.setId = function(id) {
	  this.id = id;
	};

	/**
	* Get the field value
	* Unique identifier
	* @memberof printer.Printer
	* @return {String} 
	*/
	Printer.prototype.getId = function() {
	  return this.id;
	};

	/**
	* Set the field value
	* MAC address of a network printer
	*
	* @memberof printer.Printer
	* @param {String} mac 
	*/
	Printer.prototype.setMac = function(mac) {
	  this.mac = mac;
	};

	/**
	* Get the field value
	* MAC address of a network printer
	* @memberof printer.Printer
	* @return {String} 
	*/
	Printer.prototype.getMac = function() {
	  return this.mac;
	};

	/**
	* Set the field value
	* @memberof printer.Printer
	* @param {String} model 
	*/
	Printer.prototype.setModel = function(model) {
	  this.model = model;
	};

	/**
	* Get the field value
	* @memberof printer.Printer
	* @return {String} 
	*/
	Printer.prototype.getModel = function() {
	  return this.model;
	};

	/**
	* Set the field value
	* @memberof printer.Printer
	* @param {String} name 
	*/
	Printer.prototype.setName = function(name) {
	  this.name = name;
	};

	/**
	* Get the field value
	* @memberof printer.Printer
	* @return {String} 
	*/
	Printer.prototype.getName = function() {
	  return this.name;
	};

	/**
	* Set the field value
	* IP address of a network printer
	*
	* @memberof printer.Printer
	* @param {String} ipAddress 
	*/
	Printer.prototype.setIpAddress = function(ipAddress) {
	  this.ipAddress = ipAddress;
	};

	/**
	* Get the field value
	* IP address of a network printer
	* @memberof printer.Printer
	* @return {String} 
	*/
	Printer.prototype.getIpAddress = function() {
	  return this.ipAddress;
	};

	/**
	* Set the field value
	* NETWORK is a printer that's directly connected to the network.  MY_LOCAL represents the printer that's connected to the device that's making the request.
	*
	* @memberof printer.Printer
	* @param {printer.PrinterType} type 
	*/
	Printer.prototype.setType = function(type) {
	  this.type = type;
	};

	/**
	* Get the field value
	* NETWORK is a printer that's directly connected to the network.  MY_LOCAL represents the printer that's connected to the device that's making the request.
	* @memberof printer.Printer
	* @return {printer.PrinterType} 
	*/
	Printer.prototype.getType = function() {
	  return this.type;
	};

	/**
	* @memberof printer.Printer
	* @private
	*/
	Printer.prototype.getMetaInfo = function(fieldName) {
	  var curclass = this._class_;
	  do {
	    var fieldMetaInfo = curclass._meta_.fields[fieldName];
	    if(fieldMetaInfo) {
	      return fieldMetaInfo;
	    }
	    if(curclass._meta_._superMeta_) {
	      curclass = curclass._meta_._superMeta_._class_;
	    } else {
	      curclass = null;
	    }
	  } while(curclass);
	  return null;
	};

	Printer.prototype.toString = function() {
	  return JSON.stringify(this);
	};

	Printer._meta_ =  {fields:  {}};
	Printer._meta_._class_ =  Printer;
	Printer._meta_.fields["id"] = {};
	Printer._meta_.fields["id"].type = String;
	Printer._meta_.fields["mac"] = {};
	Printer._meta_.fields["mac"].type = String;
	Printer._meta_.fields["model"] = {};
	Printer._meta_.fields["model"].type = String;
	Printer._meta_.fields["name"] = {};
	Printer._meta_.fields["name"].type = String;
	Printer._meta_.fields["ipAddress"] = {};
	Printer._meta_.fields["ipAddress"].type = String;
	Printer._meta_.fields["type"] = {};
	Printer._meta_.fields["type"].type = printer_PrinterType;

	//
	// Expose the module.
	//
	if (true) {
	module.exports = Printer;
	}



/***/ }),
/* 89 */
/***/ (function(module, exports, __webpack_require__) {

	/**
	 * Autogenerated by Avro
	 * 
	 * DO NOT EDIT DIRECTLY
	 */


	/**
	* @memberof remotepay
	* @enum {string}
	*/
	var TransactionType = {
	  PAYMENT : "PAYMENT",
	  CREDIT : "CREDIT",
	  AUTH : "AUTH",
	  DATA : "DATA",
	  BALANCE_INQUIRY : "BALANCE_INQUIRY",
	  PAYMENT_REVERSAL : "PAYMENT_REVERSAL",
	  PAYMENT_ADJUSTMENT : "PAYMENT_ADJUSTMENT",
	  CREDIT_REVERSAL : "CREDIT_REVERSAL",
	  REFUND_ADJUSTMENT : "REFUND_ADJUSTMENT",
	  CASH_ADVANCE : "CASH_ADVANCE",
	  CAPTURE_PREAUTH : "CAPTURE_PREAUTH",
	  VAS_DATA : "VAS_DATA",
	  VERIFY_CARD : "VERIFY_CARD",
	  TOKENIZE_CARD : "TOKENIZE_CARD"
	};


	//
	// Expose the module.
	//
	if (true) {
	module.exports = TransactionType;
	}



/***/ }),
/* 90 */
/***/ (function(module, exports, __webpack_require__) {

	// getting tag from 19.1.3.6 Object.prototype.toString()
	var cof = __webpack_require__(42);
	var TAG = __webpack_require__(16)('toStringTag');
	// ES3 wrong here
	var ARG = cof(function () { return arguments; }()) == 'Arguments';

	// fallback for IE11 Script Access Denied error
	var tryGet = function (it, key) {
	  try {
	    return it[key];
	  } catch (e) { /* empty */ }
	};

	module.exports = function (it) {
	  var O, T, B;
	  return it === undefined ? 'Undefined' : it === null ? 'Null'
	    // @@toStringTag case
	    : typeof (T = tryGet(O = Object(it), TAG)) == 'string' ? T
	    // builtinTag case
	    : ARG ? cof(O)
	    // ES3 arguments fallback
	    : (B = cof(O)) == 'Object' && typeof O.callee == 'function' ? 'Arguments' : B;
	};


/***/ }),
/* 91 */
/***/ (function(module, exports) {

	module.exports = {};


/***/ }),
/* 92 */
/***/ (function(module, exports, __webpack_require__) {

	var def = __webpack_require__(20).f;
	var has = __webpack_require__(36);
	var TAG = __webpack_require__(16)('toStringTag');

	module.exports = function (it, tag, stat) {
	  if (it && !has(it = stat ? it : it.prototype, TAG)) def(it, TAG, { configurable: true, value: tag });
	};


/***/ }),
/* 93 */
/***/ (function(module, exports, __webpack_require__) {

	var $export = __webpack_require__(1);
	var defined = __webpack_require__(50);
	var fails = __webpack_require__(10);
	var spaces = __webpack_require__(200);
	var space = '[' + spaces + ']';
	var non = '\u200b\u0085';
	var ltrim = RegExp('^' + space + space + '*');
	var rtrim = RegExp(space + space + '*$');

	var exporter = function (KEY, exec, ALIAS) {
	  var exp = {};
	  var FORCE = fails(function () {
	    return !!spaces[KEY]() || non[KEY]() != non;
	  });
	  var fn = exp[KEY] = FORCE ? exec(trim) : spaces[KEY];
	  if (ALIAS) exp[ALIAS] = fn;
	  $export($export.P + $export.F * FORCE, 'String', exp);
	};

	// 1 -> String#trimLeft
	// 2 -> String#trimRight
	// 3 -> String#trim
	var trim = exporter.trim = function (string, TYPE) {
	  string = String(defined(string));
	  if (TYPE & 1) string = string.replace(ltrim, '');
	  if (TYPE & 2) string = string.replace(rtrim, '');
	  return string;
	};

	module.exports = exporter;


/***/ }),
/* 94 */
/***/ (function(module, exports) {

	/**
	 * Indicates that navigation was caused by a call to history.push.
	 */
	'use strict';

	exports.__esModule = true;
	var PUSH = 'PUSH';

	exports.PUSH = PUSH;
	/**
	 * Indicates that navigation was caused by a call to history.replace.
	 */
	var REPLACE = 'REPLACE';

	exports.REPLACE = REPLACE;
	/**
	 * Indicates that navigation was caused by some other action such
	 * as using a browser's back/forward buttons and/or manually manipulating
	 * the URL in a browser's location bar. This is the default.
	 *
	 * See https://developer.mozilla.org/en-US/docs/Web/API/WindowEventHandlers/onpopstate
	 * for more information.
	 */
	var POP = 'POP';

	exports.POP = POP;
	exports['default'] = {
	  PUSH: PUSH,
	  REPLACE: REPLACE,
	  POP: POP
	};

/***/ }),
/* 95 */
/***/ (function(module, exports, __webpack_require__) {

	/**
	 * Copyright (c) 2015-present, Facebook, Inc.
	 *
	 * This source code is licensed under the MIT license found in the
	 * LICENSE file in the root directory of this source tree.
	 *
	 */

	'use strict';

	var DOMNamespaces = __webpack_require__(215);
	var setInnerHTML = __webpack_require__(149);

	var createMicrosoftUnsafeLocalFunction = __webpack_require__(222);
	var setTextContent = __webpack_require__(359);

	var ELEMENT_NODE_TYPE = 1;
	var DOCUMENT_FRAGMENT_NODE_TYPE = 11;

	/**
	 * In IE (8-11) and Edge, appending nodes with no children is dramatically
	 * faster than appending a full subtree, so we essentially queue up the
	 * .appendChild calls here and apply them so each node is added to its parent
	 * before any children are added.
	 *
	 * In other browsers, doing so is slower or neutral compared to the other order
	 * (in Firefox, twice as slow) so we only do this inversion in IE.
	 *
	 * See https://github.com/spicyj/innerhtml-vs-createelement-vs-clonenode.
	 */
	var enableLazy = typeof document !== 'undefined' && typeof document.documentMode === 'number' || typeof navigator !== 'undefined' && typeof navigator.userAgent === 'string' && /\bEdge\/\d/.test(navigator.userAgent);

	function insertTreeChildren(tree) {
	  if (!enableLazy) {
	    return;
	  }
	  var node = tree.node;
	  var children = tree.children;
	  if (children.length) {
	    for (var i = 0; i < children.length; i++) {
	      insertTreeBefore(node, children[i], null);
	    }
	  } else if (tree.html != null) {
	    setInnerHTML(node, tree.html);
	  } else if (tree.text != null) {
	    setTextContent(node, tree.text);
	  }
	}

	var insertTreeBefore = createMicrosoftUnsafeLocalFunction(function (parentNode, tree, referenceNode) {
	  // DocumentFragments aren't actually part of the DOM after insertion so
	  // appending children won't update the DOM. We need to ensure the fragment
	  // is properly populated first, breaking out of our lazy approach for just
	  // this level. Also, some <object> plugins (like Flash Player) will read
	  // <param> nodes immediately upon insertion into the DOM, so <object>
	  // must also be populated prior to insertion into the DOM.
	  if (tree.node.nodeType === DOCUMENT_FRAGMENT_NODE_TYPE || tree.node.nodeType === ELEMENT_NODE_TYPE && tree.node.nodeName.toLowerCase() === 'object' && (tree.node.namespaceURI == null || tree.node.namespaceURI === DOMNamespaces.html)) {
	    insertTreeChildren(tree);
	    parentNode.insertBefore(tree.node, referenceNode);
	  } else {
	    parentNode.insertBefore(tree.node, referenceNode);
	    insertTreeChildren(tree);
	  }
	});

	function replaceChildWithTree(oldNode, newTree) {
	  oldNode.parentNode.replaceChild(newTree.node, oldNode);
	  insertTreeChildren(newTree);
	}

	function queueChild(parentTree, childTree) {
	  if (enableLazy) {
	    parentTree.children.push(childTree);
	  } else {
	    parentTree.node.appendChild(childTree.node);
	  }
	}

	function queueHTML(tree, html) {
	  if (enableLazy) {
	    tree.html = html;
	  } else {
	    setInnerHTML(tree.node, html);
	  }
	}

	function queueText(tree, text) {
	  if (enableLazy) {
	    tree.text = text;
	  } else {
	    setTextContent(tree.node, text);
	  }
	}

	function toString() {
	  return this.node.nodeName;
	}

	function DOMLazyTree(node) {
	  return {
	    node: node,
	    children: [],
	    html: null,
	    text: null,
	    toString: toString
	  };
	}

	DOMLazyTree.insertTreeBefore = insertTreeBefore;
	DOMLazyTree.replaceChildWithTree = replaceChildWithTree;
	DOMLazyTree.queueChild = queueChild;
	DOMLazyTree.queueHTML = queueHTML;
	DOMLazyTree.queueText = queueText;

	module.exports = DOMLazyTree;

/***/ }),
/* 96 */
/***/ (function(module, exports, __webpack_require__) {

	/**
	 * Copyright (c) 2013-present, Facebook, Inc.
	 *
	 * This source code is licensed under the MIT license found in the
	 * LICENSE file in the root directory of this source tree.
	 *
	 */

	'use strict';

	var ReactRef = __webpack_require__(844);
	var ReactInstrumentation = __webpack_require__(40);

	var warning = __webpack_require__(8);

	/**
	 * Helper to call ReactRef.attachRefs with this composite component, split out
	 * to avoid allocations in the transaction mount-ready queue.
	 */
	function attachRefs() {
	  ReactRef.attachRefs(this, this._currentElement);
	}

	var ReactReconciler = {
	  /**
	   * Initializes the component, renders markup, and registers event listeners.
	   *
	   * @param {ReactComponent} internalInstance
	   * @param {ReactReconcileTransaction|ReactServerRenderingTransaction} transaction
	   * @param {?object} the containing host component instance
	   * @param {?object} info about the host container
	   * @return {?string} Rendered markup to be inserted into the DOM.
	   * @final
	   * @internal
	   */
	  mountComponent: function (internalInstance, transaction, hostParent, hostContainerInfo, context, parentDebugID) // 0 in production and for roots
	  {
	    if ((undefined) !== 'production') {
	      if (internalInstance._debugID !== 0) {
	        ReactInstrumentation.debugTool.onBeforeMountComponent(internalInstance._debugID, internalInstance._currentElement, parentDebugID);
	      }
	    }
	    var markup = internalInstance.mountComponent(transaction, hostParent, hostContainerInfo, context, parentDebugID);
	    if (internalInstance._currentElement && internalInstance._currentElement.ref != null) {
	      transaction.getReactMountReady().enqueue(attachRefs, internalInstance);
	    }
	    if ((undefined) !== 'production') {
	      if (internalInstance._debugID !== 0) {
	        ReactInstrumentation.debugTool.onMountComponent(internalInstance._debugID);
	      }
	    }
	    return markup;
	  },

	  /**
	   * Returns a value that can be passed to
	   * ReactComponentEnvironment.replaceNodeWithMarkup.
	   */
	  getHostNode: function (internalInstance) {
	    return internalInstance.getHostNode();
	  },

	  /**
	   * Releases any resources allocated by `mountComponent`.
	   *
	   * @final
	   * @internal
	   */
	  unmountComponent: function (internalInstance, safely) {
	    if ((undefined) !== 'production') {
	      if (internalInstance._debugID !== 0) {
	        ReactInstrumentation.debugTool.onBeforeUnmountComponent(internalInstance._debugID);
	      }
	    }
	    ReactRef.detachRefs(internalInstance, internalInstance._currentElement);
	    internalInstance.unmountComponent(safely);
	    if ((undefined) !== 'production') {
	      if (internalInstance._debugID !== 0) {
	        ReactInstrumentation.debugTool.onUnmountComponent(internalInstance._debugID);
	      }
	    }
	  },

	  /**
	   * Update a component using a new element.
	   *
	   * @param {ReactComponent} internalInstance
	   * @param {ReactElement} nextElement
	   * @param {ReactReconcileTransaction} transaction
	   * @param {object} context
	   * @internal
	   */
	  receiveComponent: function (internalInstance, nextElement, transaction, context) {
	    var prevElement = internalInstance._currentElement;

	    if (nextElement === prevElement && context === internalInstance._context) {
	      // Since elements are immutable after the owner is rendered,
	      // we can do a cheap identity compare here to determine if this is a
	      // superfluous reconcile. It's possible for state to be mutable but such
	      // change should trigger an update of the owner which would recreate
	      // the element. We explicitly check for the existence of an owner since
	      // it's possible for an element created outside a composite to be
	      // deeply mutated and reused.

	      // TODO: Bailing out early is just a perf optimization right?
	      // TODO: Removing the return statement should affect correctness?
	      return;
	    }

	    if ((undefined) !== 'production') {
	      if (internalInstance._debugID !== 0) {
	        ReactInstrumentation.debugTool.onBeforeUpdateComponent(internalInstance._debugID, nextElement);
	      }
	    }

	    var refsChanged = ReactRef.shouldUpdateRefs(prevElement, nextElement);

	    if (refsChanged) {
	      ReactRef.detachRefs(internalInstance, prevElement);
	    }

	    internalInstance.receiveComponent(nextElement, transaction, context);

	    if (refsChanged && internalInstance._currentElement && internalInstance._currentElement.ref != null) {
	      transaction.getReactMountReady().enqueue(attachRefs, internalInstance);
	    }

	    if ((undefined) !== 'production') {
	      if (internalInstance._debugID !== 0) {
	        ReactInstrumentation.debugTool.onUpdateComponent(internalInstance._debugID);
	      }
	    }
	  },

	  /**
	   * Flush any dirty changes in a component.
	   *
	   * @param {ReactComponent} internalInstance
	   * @param {ReactReconcileTransaction} transaction
	   * @internal
	   */
	  performUpdateIfNecessary: function (internalInstance, transaction, updateBatchNumber) {
	    if (internalInstance._updateBatchNumber !== updateBatchNumber) {
	      // The component's enqueued batch number should always be the current
	      // batch or the following one.
	      (undefined) !== 'production' ? warning(internalInstance._updateBatchNumber == null || internalInstance._updateBatchNumber === updateBatchNumber + 1, 'performUpdateIfNecessary: Unexpected batch number (current %s, ' + 'pending %s)', updateBatchNumber, internalInstance._updateBatchNumber) : void 0;
	      return;
	    }
	    if ((undefined) !== 'production') {
	      if (internalInstance._debugID !== 0) {
	        ReactInstrumentation.debugTool.onBeforeUpdateComponent(internalInstance._debugID, internalInstance._currentElement);
	      }
	    }
	    internalInstance.performUpdateIfNecessary(transaction);
	    if ((undefined) !== 'production') {
	      if (internalInstance._debugID !== 0) {
	        ReactInstrumentation.debugTool.onUpdateComponent(internalInstance._debugID);
	      }
	    }
	  }
	};

	module.exports = ReactReconciler;

/***/ }),
/* 97 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';

	exports.__esModule = true;
	exports.compilePattern = compilePattern;
	exports.matchPattern = matchPattern;
	exports.getParamNames = getParamNames;
	exports.getParams = getParams;
	exports.formatPattern = formatPattern;

	var _invariant = __webpack_require__(29);

	var _invariant2 = _interopRequireDefault(_invariant);

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

	function escapeRegExp(string) {
	  return string.replace(/[.*+?^${}()|[\]\\]/g, '\\$&');
	}

	function _compilePattern(pattern) {
	  var regexpSource = '';
	  var paramNames = [];
	  var tokens = [];

	  var match = void 0,
	      lastIndex = 0,
	      matcher = /:([a-zA-Z_$][a-zA-Z0-9_$]*)|\*\*|\*|\(|\)/g;
	  while (match = matcher.exec(pattern)) {
	    if (match.index !== lastIndex) {
	      tokens.push(pattern.slice(lastIndex, match.index));
	      regexpSource += escapeRegExp(pattern.slice(lastIndex, match.index));
	    }

	    if (match[1]) {
	      regexpSource += '([^/]+)';
	      paramNames.push(match[1]);
	    } else if (match[0] === '**') {
	      regexpSource += '(.*)';
	      paramNames.push('splat');
	    } else if (match[0] === '*') {
	      regexpSource += '(.*?)';
	      paramNames.push('splat');
	    } else if (match[0] === '(') {
	      regexpSource += '(?:';
	    } else if (match[0] === ')') {
	      regexpSource += ')?';
	    }

	    tokens.push(match[0]);

	    lastIndex = matcher.lastIndex;
	  }

	  if (lastIndex !== pattern.length) {
	    tokens.push(pattern.slice(lastIndex, pattern.length));
	    regexpSource += escapeRegExp(pattern.slice(lastIndex, pattern.length));
	  }

	  return {
	    pattern: pattern,
	    regexpSource: regexpSource,
	    paramNames: paramNames,
	    tokens: tokens
	  };
	}

	var CompiledPatternsCache = Object.create(null);

	function compilePattern(pattern) {
	  if (!CompiledPatternsCache[pattern]) CompiledPatternsCache[pattern] = _compilePattern(pattern);

	  return CompiledPatternsCache[pattern];
	}

	/**
	 * Attempts to match a pattern on the given pathname. Patterns may use
	 * the following special characters:
	 *
	 * - :paramName     Matches a URL segment up to the next /, ?, or #. The
	 *                  captured string is considered a "param"
	 * - ()             Wraps a segment of the URL that is optional
	 * - *              Consumes (non-greedy) all characters up to the next
	 *                  character in the pattern, or to the end of the URL if
	 *                  there is none
	 * - **             Consumes (greedy) all characters up to the next character
	 *                  in the pattern, or to the end of the URL if there is none
	 *
	 *  The function calls callback(error, matched) when finished.
	 * The return value is an object with the following properties:
	 *
	 * - remainingPathname
	 * - paramNames
	 * - paramValues
	 */
	function matchPattern(pattern, pathname) {
	  // Ensure pattern starts with leading slash for consistency with pathname.
	  if (pattern.charAt(0) !== '/') {
	    pattern = '/' + pattern;
	  }

	  var _compilePattern2 = compilePattern(pattern);

	  var regexpSource = _compilePattern2.regexpSource;
	  var paramNames = _compilePattern2.paramNames;
	  var tokens = _compilePattern2.tokens;


	  if (pattern.charAt(pattern.length - 1) !== '/') {
	    regexpSource += '/?'; // Allow optional path separator at end.
	  }

	  // Special-case patterns like '*' for catch-all routes.
	  if (tokens[tokens.length - 1] === '*') {
	    regexpSource += '$';
	  }

	  var match = pathname.match(new RegExp('^' + regexpSource, 'i'));
	  if (match == null) {
	    return null;
	  }

	  var matchedPath = match[0];
	  var remainingPathname = pathname.substr(matchedPath.length);

	  if (remainingPathname) {
	    // Require that the match ends at a path separator, if we didn't match
	    // the full path, so any remaining pathname is a new path segment.
	    if (matchedPath.charAt(matchedPath.length - 1) !== '/') {
	      return null;
	    }

	    // If there is a remaining pathname, treat the path separator as part of
	    // the remaining pathname for properly continuing the match.
	    remainingPathname = '/' + remainingPathname;
	  }

	  return {
	    remainingPathname: remainingPathname,
	    paramNames: paramNames,
	    paramValues: match.slice(1).map(function (v) {
	      return v && decodeURIComponent(v);
	    })
	  };
	}

	function getParamNames(pattern) {
	  return compilePattern(pattern).paramNames;
	}

	function getParams(pattern, pathname) {
	  var match = matchPattern(pattern, pathname);
	  if (!match) {
	    return null;
	  }

	  var paramNames = match.paramNames;
	  var paramValues = match.paramValues;

	  var params = {};

	  paramNames.forEach(function (paramName, index) {
	    params[paramName] = paramValues[index];
	  });

	  return params;
	}

	/**
	 * Returns a version of the given pattern with params interpolated. Throws
	 * if there is a dynamic segment of the pattern for which there is no param.
	 */
	function formatPattern(pattern, params) {
	  params = params || {};

	  var _compilePattern3 = compilePattern(pattern);

	  var tokens = _compilePattern3.tokens;

	  var parenCount = 0,
	      pathname = '',
	      splatIndex = 0;

	  var token = void 0,
	      paramName = void 0,
	      paramValue = void 0;
	  for (var i = 0, len = tokens.length; i < len; ++i) {
	    token = tokens[i];

	    if (token === '*' || token === '**') {
	      paramValue = Array.isArray(params.splat) ? params.splat[splatIndex++] : params.splat;

	      !(paramValue != null || parenCount > 0) ? (undefined) !== 'production' ? (0, _invariant2.default)(false, 'Missing splat #%s for path "%s"', splatIndex, pattern) : (0, _invariant2.default)(false) : void 0;

	      if (paramValue != null) pathname += encodeURI(paramValue);
	    } else if (token === '(') {
	      parenCount += 1;
	    } else if (token === ')') {
	      parenCount -= 1;
	    } else if (token.charAt(0) === ':') {
	      paramName = token.substring(1);
	      paramValue = params[paramName];

	      !(paramValue != null || parenCount > 0) ? (undefined) !== 'production' ? (0, _invariant2.default)(false, 'Missing "%s" parameter for path "%s"', paramName, pattern) : (0, _invariant2.default)(false) : void 0;

	      if (paramValue != null) pathname += encodeURIComponent(paramValue);
	    } else {
	      pathname += token;
	    }
	  }

	  return pathname.replace(/\/+/g, '/');
	}

/***/ }),
/* 98 */
/***/ (function(module, exports, __webpack_require__) {

	/**
	 * Copyright (c) 2013-present, Facebook, Inc.
	 *
	 * This source code is licensed under the MIT license found in the
	 * LICENSE file in the root directory of this source tree.
	 *
	 */

	'use strict';

	var _assign = __webpack_require__(19);

	var ReactBaseClasses = __webpack_require__(369);
	var ReactChildren = __webpack_require__(910);
	var ReactDOMFactories = __webpack_require__(911);
	var ReactElement = __webpack_require__(85);
	var ReactPropTypes = __webpack_require__(913);
	var ReactVersion = __webpack_require__(915);

	var createReactClass = __webpack_require__(917);
	var onlyChild = __webpack_require__(919);

	var createElement = ReactElement.createElement;
	var createFactory = ReactElement.createFactory;
	var cloneElement = ReactElement.cloneElement;

	if ((undefined) !== 'production') {
	  var lowPriorityWarning = __webpack_require__(232);
	  var canDefineProperty = __webpack_require__(152);
	  var ReactElementValidator = __webpack_require__(371);
	  var didWarnPropTypesDeprecated = false;
	  createElement = ReactElementValidator.createElement;
	  createFactory = ReactElementValidator.createFactory;
	  cloneElement = ReactElementValidator.cloneElement;
	}

	var __spread = _assign;
	var createMixin = function (mixin) {
	  return mixin;
	};

	if ((undefined) !== 'production') {
	  var warnedForSpread = false;
	  var warnedForCreateMixin = false;
	  __spread = function () {
	    lowPriorityWarning(warnedForSpread, 'React.__spread is deprecated and should not be used. Use ' + 'Object.assign directly or another helper function with similar ' + 'semantics. You may be seeing this warning due to your compiler. ' + 'See https://fb.me/react-spread-deprecation for more details.');
	    warnedForSpread = true;
	    return _assign.apply(null, arguments);
	  };

	  createMixin = function (mixin) {
	    lowPriorityWarning(warnedForCreateMixin, 'React.createMixin is deprecated and should not be used. ' + 'In React v16.0, it will be removed. ' + 'You can use this mixin directly instead. ' + 'See https://fb.me/createmixin-was-never-implemented for more info.');
	    warnedForCreateMixin = true;
	    return mixin;
	  };
	}

	var React = {
	  // Modern

	  Children: {
	    map: ReactChildren.map,
	    forEach: ReactChildren.forEach,
	    count: ReactChildren.count,
	    toArray: ReactChildren.toArray,
	    only: onlyChild
	  },

	  Component: ReactBaseClasses.Component,
	  PureComponent: ReactBaseClasses.PureComponent,

	  createElement: createElement,
	  cloneElement: cloneElement,
	  isValidElement: ReactElement.isValidElement,

	  // Classic

	  PropTypes: ReactPropTypes,
	  createClass: createReactClass,
	  createFactory: createFactory,
	  createMixin: createMixin,

	  // This looks DOM specific but these are actually isomorphic helpers
	  // since they are just generating DOM strings.
	  DOM: ReactDOMFactories,

	  version: ReactVersion,

	  // Deprecated hook for JSX spread, don't use this for anything.
	  __spread: __spread
	};

	if ((undefined) !== 'production') {
	  var warnedForCreateClass = false;
	  if (canDefineProperty) {
	    Object.defineProperty(React, 'PropTypes', {
	      get: function () {
	        lowPriorityWarning(didWarnPropTypesDeprecated, 'Accessing PropTypes via the main React package is deprecated,' + ' and will be removed in  React v16.0.' + ' Use the latest available v15.* prop-types package from npm instead.' + ' For info on usage, compatibility, migration and more, see ' + 'https://fb.me/prop-types-docs');
	        didWarnPropTypesDeprecated = true;
	        return ReactPropTypes;
	      }
	    });

	    Object.defineProperty(React, 'createClass', {
	      get: function () {
	        lowPriorityWarning(warnedForCreateClass, 'Accessing createClass via the main React package is deprecated,' + ' and will be removed in React v16.0.' + " Use a plain JavaScript class instead. If you're not yet " + 'ready to migrate, create-react-class v15.* is available ' + 'on npm as a temporary, drop-in replacement. ' + 'For more info see https://fb.me/react-create-class');
	        warnedForCreateClass = true;
	        return createReactClass;
	      }
	    });
	  }

	  // React.DOM factories are deprecated. Wrap these methods so that
	  // invocations of the React.DOM namespace and alert users to switch
	  // to the `react-dom-factories` package.
	  React.DOM = {};
	  var warnedForFactories = false;
	  Object.keys(ReactDOMFactories).forEach(function (factory) {
	    React.DOM[factory] = function () {
	      if (!warnedForFactories) {
	        lowPriorityWarning(false, 'Accessing factories like React.DOM.%s has been deprecated ' + 'and will be removed in v16.0+. Use the ' + 'react-dom-factories package instead. ' + ' Version 1.0 provides a drop-in replacement.' + ' For more info, see https://fb.me/react-dom-factories', factory);
	        warnedForFactories = true;
	      }
	      return ReactDOMFactories[factory].apply(ReactDOMFactories, arguments);
	    };
	  });
	}

	module.exports = React;

/***/ }),
/* 99 */
13,
/* 100 */
/***/ (function(module, exports, __webpack_require__) {

	/**
	 * Autogenerated by Avro
	 * 
	 * DO NOT EDIT DIRECTLY
	 */


	/** Used to track the origin of a distributed call. */
	/**
	* @constructor
	* @memberof apps
	*/
	var AppTracking = function() {
	  this._class_ = AppTracking;
	  this.developerAppId = undefined;
	  this.applicationName = undefined;
	  this.applicationID = undefined;
	  this.applicationVersion = undefined;
	  this.sourceSDK = undefined;
	  this.sourceSDKVersion = undefined;
	};


	/**
	* Set the field value
	* The uuid from the developer application.  This is typically populated and used only on the back end.
	*
	* @memberof apps.AppTracking
	* @param {String} developerAppId 
	*/
	AppTracking.prototype.setDeveloperAppId = function(developerAppId) {
	  this.developerAppId = developerAppId;
	};

	/**
	* Get the field value
	* The uuid from the developer application.  This is typically populated and used only on the back end.
	* @memberof apps.AppTracking
	* @return {String} 
	*/
	AppTracking.prototype.getDeveloperAppId = function() {
	  return this.developerAppId;
	};

	/**
	* Set the field value
	* The name of the developer application.
	*
	* @memberof apps.AppTracking
	* @param {String} applicationName 
	*/
	AppTracking.prototype.setApplicationName = function(applicationName) {
	  this.applicationName = applicationName;
	};

	/**
	* Get the field value
	* The name of the developer application.
	* @memberof apps.AppTracking
	* @return {String} 
	*/
	AppTracking.prototype.getApplicationName = function() {
	  return this.applicationName;
	};

	/**
	* Set the field value
	* A string representing an application
	*
	* @memberof apps.AppTracking
	* @param {String} applicationID 
	*/
	AppTracking.prototype.setApplicationID = function(applicationID) {
	  this.applicationID = applicationID;
	};

	/**
	* Get the field value
	* A string representing an application
	* @memberof apps.AppTracking
	* @return {String} 
	*/
	AppTracking.prototype.getApplicationID = function() {
	  return this.applicationID;
	};

	/**
	* Set the field value
	* A string representing a semanticversion.  See http://semver.org/
	*
	* @memberof apps.AppTracking
	* @param {String} applicationVersion 
	*/
	AppTracking.prototype.setApplicationVersion = function(applicationVersion) {
	  this.applicationVersion = applicationVersion;
	};

	/**
	* Get the field value
	* A string representing a semanticversion.  See http://semver.org/
	* @memberof apps.AppTracking
	* @return {String} 
	*/
	AppTracking.prototype.getApplicationVersion = function() {
	  return this.applicationVersion;
	};

	/**
	* Set the field value
	* A string representing a SDK
	*
	* @memberof apps.AppTracking
	* @param {String} sourceSDK 
	*/
	AppTracking.prototype.setSourceSDK = function(sourceSDK) {
	  this.sourceSDK = sourceSDK;
	};

	/**
	* Get the field value
	* A string representing a SDK
	* @memberof apps.AppTracking
	* @return {String} 
	*/
	AppTracking.prototype.getSourceSDK = function() {
	  return this.sourceSDK;
	};

	/**
	* Set the field value
	* A string representing a semanticversion.  See http://semver.org/
	*
	* @memberof apps.AppTracking
	* @param {String} sourceSDKVersion 
	*/
	AppTracking.prototype.setSourceSDKVersion = function(sourceSDKVersion) {
	  this.sourceSDKVersion = sourceSDKVersion;
	};

	/**
	* Get the field value
	* A string representing a semanticversion.  See http://semver.org/
	* @memberof apps.AppTracking
	* @return {String} 
	*/
	AppTracking.prototype.getSourceSDKVersion = function() {
	  return this.sourceSDKVersion;
	};

	/**
	* @memberof apps.AppTracking
	* @private
	*/
	AppTracking.prototype.getMetaInfo = function(fieldName) {
	  var curclass = this._class_;
	  do {
	    var fieldMetaInfo = curclass._meta_.fields[fieldName];
	    if(fieldMetaInfo) {
	      return fieldMetaInfo;
	    }
	    if(curclass._meta_._superMeta_) {
	      curclass = curclass._meta_._superMeta_._class_;
	    } else {
	      curclass = null;
	    }
	  } while(curclass);
	  return null;
	};

	AppTracking.prototype.toString = function() {
	  return JSON.stringify(this);
	};

	AppTracking._meta_ =  {fields:  {}};
	AppTracking._meta_._class_ =  AppTracking;
	AppTracking._meta_.fields["developerAppId"] = {};
	AppTracking._meta_.fields["developerAppId"].type = String;
	AppTracking._meta_.fields["applicationName"] = {};
	AppTracking._meta_.fields["applicationName"].type = String;
	AppTracking._meta_.fields["applicationID"] = {};
	AppTracking._meta_.fields["applicationID"].type = String;
	AppTracking._meta_.fields["applicationVersion"] = {};
	AppTracking._meta_.fields["applicationVersion"].type = String;
	AppTracking._meta_.fields["sourceSDK"] = {};
	AppTracking._meta_.fields["sourceSDK"].type = String;
	AppTracking._meta_.fields["sourceSDKVersion"] = {};
	AppTracking._meta_.fields["sourceSDKVersion"].type = String;

	//
	// Expose the module.
	//
	if (true) {
	module.exports = AppTracking;
	}



/***/ }),
/* 101 */
/***/ (function(module, exports, __webpack_require__) {

	/**
	 * Autogenerated by Avro
	 * 
	 * DO NOT EDIT DIRECTLY
	 */

	var inventory_ItemStock = __webpack_require__(399);
	var inventory_TaxRate = __webpack_require__(117);
	var inventory_MenuItem = __webpack_require__(238);
	var inventory_ModifierGroup = __webpack_require__(154);
	var inventory_PriceType = __webpack_require__(403);
	var inventory_Category = __webpack_require__(153);
	var base_Reference = __webpack_require__(5);
	var inventory_Tag = __webpack_require__(155);
	var inventory_Option = __webpack_require__(240);

	/**
	* @constructor
	* @memberof inventory
	*/
	var Item = function() {
	  this._class_ = Item;
	  this.id = undefined;
	  this.hidden = false;
	  this.itemGroup = undefined;
	  this.options = undefined;
	  this.name = undefined;
	  this.alternateName = undefined;
	  this.code = undefined;
	  this.sku = undefined;
	  this.price = undefined;
	  this.priceType = undefined;
	  this.defaultTaxRates = true;
	  this.unitName = undefined;
	  this.cost = undefined;
	  this.isRevenue = false;
	  this.stockCount = undefined;
	  this.taxRates = undefined;
	  this.modifierGroups = undefined;
	  this.categories = undefined;
	  this.tags = undefined;
	  this.canonical = undefined;
	  this.itemStock = undefined;
	  this.menuItem = undefined;
	  this.modifiedTime = undefined;
	  this.deletedTime = undefined;
	  this.priceWithoutVat = undefined;
	};


	/**
	* Set the field value
	* Unique identifier
	*
	* @memberof inventory.Item
	* @param {String} id 
	*/
	Item.prototype.setId = function(id) {
	  this.id = id;
	};

	/**
	* Get the field value
	* Unique identifier
	* @memberof inventory.Item
	* @return {String} 
	*/
	Item.prototype.getId = function() {
	  return this.id;
	};

	/**
	* Set the field value
	* True if this item is hidden from Clover Register App
	*
	* @memberof inventory.Item
	* @param {Boolean|Null} hidden 
	*/
	Item.prototype.setHidden = function(hidden) {
	  this.hidden = hidden;
	};

	/**
	* Get the field value
	* True if this item is hidden from Clover Register App
	* @memberof inventory.Item
	* @return {Boolean|Null} 
	*/
	Item.prototype.getHidden = function() {
	  return this.hidden;
	};

	/**
	* Set the field value
	* Reference to an item group
	*
	* @memberof inventory.Item
	* @param {Null|base.Reference} itemGroup 
	*/
	Item.prototype.setItemGroup = function(itemGroup) {
	  this.itemGroup = itemGroup;
	};

	/**
	* Get the field value
	* Reference to an item group
	* @memberof inventory.Item
	* @return {Null|base.Reference} 
	*/
	Item.prototype.getItemGroup = function() {
	  return this.itemGroup;
	};

	/**
	* Set the field value
	* List of options pertaining to this item's attribute variation
	*
	* @memberof inventory.Item
	* @param {Null|Array.<inventory.Option>} options An array of 
	*/
	Item.prototype.setOptions = function(options) {
	  this.options = options;
	};

	/**
	* Get the field value
	* List of options pertaining to this item's attribute variation
	* @memberof inventory.Item
	* @return {Null|Array.<inventory.Option>} An array of 
	*/
	Item.prototype.getOptions = function() {
	  return this.options;
	};

	/**
	* Set the field value
	* Name of the item
	*
	* @memberof inventory.Item
	* @param {String} name 
	*/
	Item.prototype.setName = function(name) {
	  this.name = name;
	};

	/**
	* Get the field value
	* Name of the item
	* @memberof inventory.Item
	* @return {String} 
	*/
	Item.prototype.getName = function() {
	  return this.name;
	};

	/**
	* Set the field value
	* Alternate name of the item
	*
	* @memberof inventory.Item
	* @param {Null|String} alternateName 
	*/
	Item.prototype.setAlternateName = function(alternateName) {
	  this.alternateName = alternateName;
	};

	/**
	* Get the field value
	* Alternate name of the item
	* @memberof inventory.Item
	* @return {Null|String} 
	*/
	Item.prototype.getAlternateName = function() {
	  return this.alternateName;
	};

	/**
	* Set the field value
	* Product code, e.g. UPC or EAN
	*
	* @memberof inventory.Item
	* @param {Null|String} code 
	*/
	Item.prototype.setCode = function(code) {
	  this.code = code;
	};

	/**
	* Get the field value
	* Product code, e.g. UPC or EAN
	* @memberof inventory.Item
	* @return {Null|String} 
	*/
	Item.prototype.getCode = function() {
	  return this.code;
	};

	/**
	* Set the field value
	* SKU of the item
	*
	* @memberof inventory.Item
	* @param {Null|String} sku 
	*/
	Item.prototype.setSku = function(sku) {
	  this.sku = sku;
	};

	/**
	* Get the field value
	* SKU of the item
	* @memberof inventory.Item
	* @return {Null|String} 
	*/
	Item.prototype.getSku = function() {
	  return this.sku;
	};

	/**
	* Set the field value
	* Price of the item, typically in cents; use priceType and merchant currency to determine actual item price. For non-VAT merchants, this field is exclusive of tax. For VAT merchants, this field is inclusive of tax.
	*
	* @memberof inventory.Item
	* @param {Number} price must be a long integer
	*/
	Item.prototype.setPrice = function(price) {
	  this.price = price;
	};

	/**
	* Get the field value
	* Price of the item, typically in cents; use priceType and merchant currency to determine actual item price. For non-VAT merchants, this field is exclusive of tax. For VAT merchants, this field is inclusive of tax.
	* @memberof inventory.Item
	* @return {Number} must be a long integer
	*/
	Item.prototype.getPrice = function() {
	  return this.price;
	};

	/**
	* Set the field value
	* @memberof inventory.Item
	* @param {inventory.PriceType} priceType 
	*/
	Item.prototype.setPriceType = function(priceType) {
	  this.priceType = priceType;
	};

	/**
	* Get the field value
	* @memberof inventory.Item
	* @return {inventory.PriceType} 
	*/
	Item.prototype.getPriceType = function() {
	  return this.priceType;
	};

	/**
	* Set the field value
	* Flag to indicate whether or not to use default tax rates
	*
	* @memberof inventory.Item
	* @param {Boolean|Null} defaultTaxRates 
	*/
	Item.prototype.setDefaultTaxRates = function(defaultTaxRates) {
	  this.defaultTaxRates = defaultTaxRates;
	};

	/**
	* Get the field value
	* Flag to indicate whether or not to use default tax rates
	* @memberof inventory.Item
	* @return {Boolean|Null} 
	*/
	Item.prototype.getDefaultTaxRates = function() {
	  return this.defaultTaxRates;
	};

	/**
	* Set the field value
	* Unit name, e.g. oz, lb
	*
	* @memberof inventory.Item
	* @param {Null|String} unitName 
	*/
	Item.prototype.setUnitName = function(unitName) {
	  this.unitName = unitName;
	};

	/**
	* Get the field value
	* Unit name, e.g. oz, lb
	* @memberof inventory.Item
	* @return {Null|String} 
	*/
	Item.prototype.getUnitName = function() {
	  return this.unitName;
	};

	/**
	* Set the field value
	* Cost of the item to merchant, as opposed to customer price
	*
	* @memberof inventory.Item
	* @param {Null|Number} cost must be a long integer
	*/
	Item.prototype.setCost = function(cost) {
	  this.cost = cost;
	};

	/**
	* Get the field value
	* Cost of the item to merchant, as opposed to customer price
	* @memberof inventory.Item
	* @return {Null|Number} must be a long integer
	*/
	Item.prototype.getCost = function() {
	  return this.cost;
	};

	/**
	* Set the field value
	* True if this item should be counted as revenue, for example gift cards and donations would not
	*
	* @memberof inventory.Item
	* @param {Boolean|Null} isRevenue 
	*/
	Item.prototype.setIsRevenue = function(isRevenue) {
	  this.isRevenue = isRevenue;
	};

	/**
	* Get the field value
	* True if this item should be counted as revenue, for example gift cards and donations would not
	* @memberof inventory.Item
	* @return {Boolean|Null} 
	*/
	Item.prototype.getIsRevenue = function() {
	  return this.isRevenue;
	};

	/**
	* Set the field value
	* Deprecated, use itemStock instead.
	*
	* @memberof inventory.Item
	* @param {Null|Number} stockCount must be a long integer
	*/
	Item.prototype.setStockCount = function(stockCount) {
	  this.stockCount = stockCount;
	};

	/**
	* Get the field value
	* Deprecated, use itemStock instead.
	* @memberof inventory.Item
	* @return {Null|Number} must be a long integer
	*/
	Item.prototype.getStockCount = function() {
	  return this.stockCount;
	};

	/**
	* Set the field value
	* @memberof inventory.Item
	* @param {Null|Array.<inventory.TaxRate>} taxRates An array of 
	*/
	Item.prototype.setTaxRates = function(taxRates) {
	  this.taxRates = taxRates;
	};

	/**
	* Get the field value
	* @memberof inventory.Item
	* @return {Null|Array.<inventory.TaxRate>} An array of 
	*/
	Item.prototype.getTaxRates = function() {
	  return this.taxRates;
	};

	/**
	* Set the field value
	* @memberof inventory.Item
	* @param {Null|Array.<inventory.ModifierGroup>} modifierGroups An array of 
	*/
	Item.prototype.setModifierGroups = function(modifierGroups) {
	  this.modifierGroups = modifierGroups;
	};

	/**
	* Get the field value
	* @memberof inventory.Item
	* @return {Null|Array.<inventory.ModifierGroup>} An array of 
	*/
	Item.prototype.getModifierGroups = function() {
	  return this.modifierGroups;
	};

	/**
	* Set the field value
	* Categories associated with this item
	*
	* @memberof inventory.Item
	* @param {Null|Array.<inventory.Category>} categories An array of 
	*/
	Item.prototype.setCategories = function(categories) {
	  this.categories = categories;
	};

	/**
	* Get the field value
	* Categories associated with this item
	* @memberof inventory.Item
	* @return {Null|Array.<inventory.Category>} An array of 
	*/
	Item.prototype.getCategories = function() {
	  return this.categories;
	};

	/**
	* Set the field value
	* Tags associated with this item
	*
	* @memberof inventory.Item
	* @param {Null|Array.<inventory.Tag>} tags An array of 
	*/
	Item.prototype.setTags = function(tags) {
	  this.tags = tags;
	};

	/**
	* Get the field value
	* Tags associated with this item
	* @memberof inventory.Item
	* @return {Null|Array.<inventory.Tag>} An array of 
	*/
	Item.prototype.getTags = function() {
	  return this.tags;
	};

	/**
	* Set the field value
	* Reference to canonical items
	*
	* @memberof inventory.Item
	* @param {Null|base.Reference} canonical 
	*/
	Item.prototype.setCanonical = function(canonical) {
	  this.canonical = canonical;
	};

	/**
	* Get the field value
	* Reference to canonical items
	* @memberof inventory.Item
	* @return {Null|base.Reference} 
	*/
	Item.prototype.getCanonical = function() {
	  return this.canonical;
	};

	/**
	* Set the field value
	* Item stock attribute that can be expanded to show stock quantity
	*
	* @memberof inventory.Item
	* @param {Null|inventory.ItemStock} itemStock 
	*/
	Item.prototype.setItemStock = function(itemStock) {
	  this.itemStock = itemStock;
	};

	/**
	* Get the field value
	* Item stock attribute that can be expanded to show stock quantity
	* @memberof inventory.Item
	* @return {Null|inventory.ItemStock} 
	*/
	Item.prototype.getItemStock = function() {
	  return this.itemStock;
	};

	/**
	* Set the field value
	* Menu Item attribute that can be expanded to menu specific attributes
	*
	* @memberof inventory.Item
	* @param {Null|inventory.MenuItem} menuItem 
	*/
	Item.prototype.setMenuItem = function(menuItem) {
	  this.menuItem = menuItem;
	};

	/**
	* Get the field value
	* Menu Item attribute that can be expanded to menu specific attributes
	* @memberof inventory.Item
	* @return {Null|inventory.MenuItem} 
	*/
	Item.prototype.getMenuItem = function() {
	  return this.menuItem;
	};

	/**
	* Set the field value
	* @memberof inventory.Item
	* @param {Null|Number} modifiedTime must be a long integer
	*/
	Item.prototype.setModifiedTime = function(modifiedTime) {
	  this.modifiedTime = modifiedTime;
	};

	/**
	* Get the field value
	* @memberof inventory.Item
	* @return {Null|Number} must be a long integer
	*/
	Item.prototype.getModifiedTime = function() {
	  return this.modifiedTime;
	};

	/**
	* Set the field value
	* Timestamp when item was last deleted
	*
	* @memberof inventory.Item
	* @param {Null|Number} deletedTime must be a long integer
	*/
	Item.prototype.setDeletedTime = function(deletedTime) {
	  this.deletedTime = deletedTime;
	};

	/**
	* Get the field value
	* Timestamp when item was last deleted
	* @memberof inventory.Item
	* @return {Null|Number} must be a long integer
	*/
	Item.prototype.getDeletedTime = function() {
	  return this.deletedTime;
	};

	/**
	* Set the field value
	* The price without value-added tax (VAT). For non-VAT merchants, this field is ignored. For VAT merchants, this field is the base price of an item.
	*
	* @memberof inventory.Item
	* @param {Null|Number} priceWithoutVat must be a long integer
	*/
	Item.prototype.setPriceWithoutVat = function(priceWithoutVat) {
	  this.priceWithoutVat = priceWithoutVat;
	};

	/**
	* Get the field value
	* The price without value-added tax (VAT). For non-VAT merchants, this field is ignored. For VAT merchants, this field is the base price of an item.
	* @memberof inventory.Item
	* @return {Null|Number} must be a long integer
	*/
	Item.prototype.getPriceWithoutVat = function() {
	  return this.priceWithoutVat;
	};

	/**
	* @memberof inventory.Item
	* @private
	*/
	Item.prototype.getMetaInfo = function(fieldName) {
	  var curclass = this._class_;
	  do {
	    var fieldMetaInfo = curclass._meta_.fields[fieldName];
	    if(fieldMetaInfo) {
	      return fieldMetaInfo;
	    }
	    if(curclass._meta_._superMeta_) {
	      curclass = curclass._meta_._superMeta_._class_;
	    } else {
	      curclass = null;
	    }
	  } while(curclass);
	  return null;
	};

	Item.prototype.toString = function() {
	  return JSON.stringify(this);
	};

	Item._meta_ =  {fields:  {}};
	Item._meta_._class_ =  Item;
	Item._meta_.fields["id"] = {};
	Item._meta_.fields["id"].type = String;
	Item._meta_.fields["hidden"] = {};
	Item._meta_.fields["hidden"].type = Boolean;
	Item._meta_.fields["itemGroup"] = {};
	Item._meta_.fields["itemGroup"].type = base_Reference;
	Item._meta_.fields["options"] = {};
	Item._meta_.fields["options"].type = Array;
	Item._meta_.fields["options"].elementType = inventory_Option;
	Item._meta_.fields["name"] = {};
	Item._meta_.fields["name"].type = String;
	Item._meta_.fields["alternateName"] = {};
	Item._meta_.fields["alternateName"].type = String;
	Item._meta_.fields["code"] = {};
	Item._meta_.fields["code"].type = String;
	Item._meta_.fields["sku"] = {};
	Item._meta_.fields["sku"].type = String;
	Item._meta_.fields["price"] = {};
	Item._meta_.fields["price"].type = Number;
	Item._meta_.fields["priceType"] = {};
	Item._meta_.fields["priceType"].type = inventory_PriceType;
	Item._meta_.fields["defaultTaxRates"] = {};
	Item._meta_.fields["defaultTaxRates"].type = Boolean;
	Item._meta_.fields["unitName"] = {};
	Item._meta_.fields["unitName"].type = String;
	Item._meta_.fields["cost"] = {};
	Item._meta_.fields["cost"].type = Number;
	Item._meta_.fields["isRevenue"] = {};
	Item._meta_.fields["isRevenue"].type = Boolean;
	Item._meta_.fields["stockCount"] = {};
	Item._meta_.fields["stockCount"].type = Number;
	Item._meta_.fields["taxRates"] = {};
	Item._meta_.fields["taxRates"].type = Array;
	Item._meta_.fields["taxRates"].elementType = inventory_TaxRate;
	Item._meta_.fields["modifierGroups"] = {};
	Item._meta_.fields["modifierGroups"].type = Array;
	Item._meta_.fields["modifierGroups"].elementType = inventory_ModifierGroup;
	Item._meta_.fields["categories"] = {};
	Item._meta_.fields["categories"].type = Array;
	Item._meta_.fields["categories"].elementType = inventory_Category;
	Item._meta_.fields["tags"] = {};
	Item._meta_.fields["tags"].type = Array;
	Item._meta_.fields["tags"].elementType = inventory_Tag;
	Item._meta_.fields["canonical"] = {};
	Item._meta_.fields["canonical"].type = base_Reference;
	Item._meta_.fields["itemStock"] = {};
	Item._meta_.fields["itemStock"].type = inventory_ItemStock;
	Item._meta_.fields["menuItem"] = {};
	Item._meta_.fields["menuItem"].type = inventory_MenuItem;
	Item._meta_.fields["modifiedTime"] = {};
	Item._meta_.fields["modifiedTime"].type = Number;
	Item._meta_.fields["deletedTime"] = {};
	Item._meta_.fields["deletedTime"].type = Number;
	Item._meta_.fields["priceWithoutVat"] = {};
	Item._meta_.fields["priceWithoutVat"].type = Number;

	//
	// Expose the module.
	//
	if (true) {
	module.exports = Item;
	}



/***/ }),
/* 102 */
/***/ (function(module, exports, __webpack_require__) {

	/**
	 * Autogenerated by Avro
	 * 
	 * DO NOT EDIT DIRECTLY
	 */

	var payments_CardType = __webpack_require__(69);
	var payments_CardTransactionState = __webpack_require__(436);
	var payments_CardEntryType = __webpack_require__(119);
	var payments_VaultedCard = __webpack_require__(70);
	var payments_CardTransactionType = __webpack_require__(437);
	var payments_GatewayTxState = __webpack_require__(253);
	var payments_AVSResult = __webpack_require__(430);

	/**
	* @constructor
	* @memberof payments
	*/
	var CardTransaction = function() {
	  this._class_ = CardTransaction;
	  this.cardType = undefined;
	  this.entryType = undefined;
	  this.first6 = undefined;
	  this.last4 = undefined;
	  this.type = undefined;
	  this.authCode = undefined;
	  this.referenceId = undefined;
	  this.transactionNo = undefined;
	  this.state = undefined;
	  this.extra = undefined;
	  this.begBalance = undefined;
	  this.endBalance = undefined;
	  this.avsResult = undefined;
	  this.cardholderName = undefined;
	  this.token = undefined;
	  this.vaultedCard = undefined;
	  this.gatewayTxState = undefined;
	  this.currency = undefined;
	  this.captured = undefined;
	};


	/**
	* Set the field value
	* @memberof payments.CardTransaction
	* @param {payments.CardType} cardType 
	*/
	CardTransaction.prototype.setCardType = function(cardType) {
	  this.cardType = cardType;
	};

	/**
	* Get the field value
	* @memberof payments.CardTransaction
	* @return {payments.CardType} 
	*/
	CardTransaction.prototype.getCardType = function() {
	  return this.cardType;
	};

	/**
	* Set the field value
	* @memberof payments.CardTransaction
	* @param {payments.CardEntryType} entryType 
	*/
	CardTransaction.prototype.setEntryType = function(entryType) {
	  this.entryType = entryType;
	};

	/**
	* Get the field value
	* @memberof payments.CardTransaction
	* @return {payments.CardEntryType} 
	*/
	CardTransaction.prototype.getEntryType = function() {
	  return this.entryType;
	};

	/**
	* Set the field value
	* The first four digits of the card number
	*
	* @memberof payments.CardTransaction
	* @param {String} first6 
	*/
	CardTransaction.prototype.setFirst6 = function(first6) {
	  this.first6 = first6;
	};

	/**
	* Get the field value
	* The first four digits of the card number
	* @memberof payments.CardTransaction
	* @return {String} 
	*/
	CardTransaction.prototype.getFirst6 = function() {
	  return this.first6;
	};

	/**
	* Set the field value
	* The last four digits of the card number
	*
	* @memberof payments.CardTransaction
	* @param {String} last4 
	*/
	CardTransaction.prototype.setLast4 = function(last4) {
	  this.last4 = last4;
	};

	/**
	* Get the field value
	* The last four digits of the card number
	* @memberof payments.CardTransaction
	* @return {String} 
	*/
	CardTransaction.prototype.getLast4 = function() {
	  return this.last4;
	};

	/**
	* Set the field value
	* @memberof payments.CardTransaction
	* @param {payments.CardTransactionType} type 
	*/
	CardTransaction.prototype.setType = function(type) {
	  this.type = type;
	};

	/**
	* Get the field value
	* @memberof payments.CardTransaction
	* @return {payments.CardTransactionType} 
	*/
	CardTransaction.prototype.getType = function() {
	  return this.type;
	};

	/**
	* Set the field value
	* Authorization code (if successful)
	*
	* @memberof payments.CardTransaction
	* @param {String} authCode 
	*/
	CardTransaction.prototype.setAuthCode = function(authCode) {
	  this.authCode = authCode;
	};

	/**
	* Get the field value
	* Authorization code (if successful)
	* @memberof payments.CardTransaction
	* @return {String} 
	*/
	CardTransaction.prototype.getAuthCode = function() {
	  return this.authCode;
	};

	/**
	* Set the field value
	* @memberof payments.CardTransaction
	* @param {String} referenceId 
	*/
	CardTransaction.prototype.setReferenceId = function(referenceId) {
	  this.referenceId = referenceId;
	};

	/**
	* Get the field value
	* @memberof payments.CardTransaction
	* @return {String} 
	*/
	CardTransaction.prototype.getReferenceId = function() {
	  return this.referenceId;
	};

	/**
	* Set the field value
	* @memberof payments.CardTransaction
	* @param {String} transactionNo 
	*/
	CardTransaction.prototype.setTransactionNo = function(transactionNo) {
	  this.transactionNo = transactionNo;
	};

	/**
	* Get the field value
	* @memberof payments.CardTransaction
	* @return {String} 
	*/
	CardTransaction.prototype.getTransactionNo = function() {
	  return this.transactionNo;
	};

	/**
	* Set the field value
	* A state inferred from transaction type and whether the gateway captured the transaction
	*
	* @memberof payments.CardTransaction
	* @param {payments.CardTransactionState} state 
	*/
	CardTransaction.prototype.setState = function(state) {
	  this.state = state;
	};

	/**
	* Get the field value
	* A state inferred from transaction type and whether the gateway captured the transaction
	* @memberof payments.CardTransaction
	* @return {payments.CardTransactionState} 
	*/
	CardTransaction.prototype.getState = function() {
	  return this.state;
	};

	/**
	* Set the field value
	* Extra info to be stored as part of gateway/card transaction
	*
	* @memberof payments.CardTransaction
	* @param {Object.<String,String>} extra A map of <String> to <>
	*/
	CardTransaction.prototype.setExtra = function(extra) {
	  this.extra = extra;
	};

	/**
	* Get the field value
	* Extra info to be stored as part of gateway/card transaction
	* @memberof payments.CardTransaction
	* @return {Object.<String,String>} A map of <String> to <>
	*/
	CardTransaction.prototype.getExtra = function() {
	  return this.extra;
	};

	/**
	* Set the field value
	* @memberof payments.CardTransaction
	* @param {Number|Null} begBalance must be a long integer, 
	*/
	CardTransaction.prototype.setBegBalance = function(begBalance) {
	  this.begBalance = begBalance;
	};

	/**
	* Get the field value
	* @memberof payments.CardTransaction
	* @return {Number|Null} must be a long integer, 
	*/
	CardTransaction.prototype.getBegBalance = function() {
	  return this.begBalance;
	};

	/**
	* Set the field value
	* @memberof payments.CardTransaction
	* @param {Number|Null} endBalance must be a long integer, 
	*/
	CardTransaction.prototype.setEndBalance = function(endBalance) {
	  this.endBalance = endBalance;
	};

	/**
	* Get the field value
	* @memberof payments.CardTransaction
	* @return {Number|Null} must be a long integer, 
	*/
	CardTransaction.prototype.getEndBalance = function() {
	  return this.endBalance;
	};

	/**
	* Set the field value
	* @memberof payments.CardTransaction
	* @param {payments.AVSResult} avsResult 
	*/
	CardTransaction.prototype.setAvsResult = function(avsResult) {
	  this.avsResult = avsResult;
	};

	/**
	* Get the field value
	* @memberof payments.CardTransaction
	* @return {payments.AVSResult} 
	*/
	CardTransaction.prototype.getAvsResult = function() {
	  return this.avsResult;
	};

	/**
	* Set the field value
	* @memberof payments.CardTransaction
	* @param {String} cardholderName 
	*/
	CardTransaction.prototype.setCardholderName = function(cardholderName) {
	  this.cardholderName = cardholderName;
	};

	/**
	* Get the field value
	* @memberof payments.CardTransaction
	* @return {String} 
	*/
	CardTransaction.prototype.getCardholderName = function() {
	  return this.cardholderName;
	};

	/**
	* Set the field value
	* @memberof payments.CardTransaction
	* @param {String} token 
	*/
	CardTransaction.prototype.setToken = function(token) {
	  this.token = token;
	};

	/**
	* Get the field value
	* @memberof payments.CardTransaction
	* @return {String} 
	*/
	CardTransaction.prototype.getToken = function() {
	  return this.token;
	};

	/**
	* Set the field value
	* Vaulted card which can be used for subsequent transactions
	*
	* @memberof payments.CardTransaction
	* @param {Null|payments.VaultedCard} vaultedCard 
	*/
	CardTransaction.prototype.setVaultedCard = function(vaultedCard) {
	  this.vaultedCard = vaultedCard;
	};

	/**
	* Get the field value
	* Vaulted card which can be used for subsequent transactions
	* @memberof payments.CardTransaction
	* @return {Null|payments.VaultedCard} 
	*/
	CardTransaction.prototype.getVaultedCard = function() {
	  return this.vaultedCard;
	};

	/**
	* Set the field value
	* The state as currently recorded. This differs from the legacy 'state' field. The legacy 'state' field is calculated from the 'type' field and whether the transaction was captured.
	*
	* @memberof payments.CardTransaction
	* @param {payments.GatewayTxState} gatewayTxState 
	*/
	CardTransaction.prototype.setGatewayTxState = function(gatewayTxState) {
	  this.gatewayTxState = gatewayTxState;
	};

	/**
	* Get the field value
	* The state as currently recorded. This differs from the legacy 'state' field. The legacy 'state' field is calculated from the 'type' field and whether the transaction was captured.
	* @memberof payments.CardTransaction
	* @return {payments.GatewayTxState} 
	*/
	CardTransaction.prototype.getGatewayTxState = function() {
	  return this.gatewayTxState;
	};

	/**
	* Set the field value
	* Currency code
	*
	* @memberof payments.CardTransaction
	* @param {String} currency 
	*/
	CardTransaction.prototype.setCurrency = function(currency) {
	  this.currency = currency;
	};

	/**
	* Get the field value
	* Currency code
	* @memberof payments.CardTransaction
	* @return {String} 
	*/
	CardTransaction.prototype.getCurrency = function() {
	  return this.currency;
	};

	/**
	* Set the field value
	* @memberof payments.CardTransaction
	* @param {Boolean} captured 
	*/
	CardTransaction.prototype.setCaptured = function(captured) {
	  this.captured = captured;
	};

	/**
	* Get the field value
	* @memberof payments.CardTransaction
	* @return {Boolean} 
	*/
	CardTransaction.prototype.getCaptured = function() {
	  return this.captured;
	};

	/**
	* @memberof payments.CardTransaction
	* @private
	*/
	CardTransaction.prototype.getMetaInfo = function(fieldName) {
	  var curclass = this._class_;
	  do {
	    var fieldMetaInfo = curclass._meta_.fields[fieldName];
	    if(fieldMetaInfo) {
	      return fieldMetaInfo;
	    }
	    if(curclass._meta_._superMeta_) {
	      curclass = curclass._meta_._superMeta_._class_;
	    } else {
	      curclass = null;
	    }
	  } while(curclass);
	  return null;
	};

	CardTransaction.prototype.toString = function() {
	  return JSON.stringify(this);
	};

	CardTransaction._meta_ =  {fields:  {}};
	CardTransaction._meta_._class_ =  CardTransaction;
	CardTransaction._meta_.fields["cardType"] = {};
	CardTransaction._meta_.fields["cardType"].type = payments_CardType;
	CardTransaction._meta_.fields["entryType"] = {};
	CardTransaction._meta_.fields["entryType"].type = payments_CardEntryType;
	CardTransaction._meta_.fields["first6"] = {};
	CardTransaction._meta_.fields["first6"].type = String;
	CardTransaction._meta_.fields["last4"] = {};
	CardTransaction._meta_.fields["last4"].type = String;
	CardTransaction._meta_.fields["type"] = {};
	CardTransaction._meta_.fields["type"].type = payments_CardTransactionType;
	CardTransaction._meta_.fields["authCode"] = {};
	CardTransaction._meta_.fields["authCode"].type = String;
	CardTransaction._meta_.fields["referenceId"] = {};
	CardTransaction._meta_.fields["referenceId"].type = String;
	CardTransaction._meta_.fields["transactionNo"] = {};
	CardTransaction._meta_.fields["transactionNo"].type = String;
	CardTransaction._meta_.fields["state"] = {};
	CardTransaction._meta_.fields["state"].type = payments_CardTransactionState;
	CardTransaction._meta_.fields["extra"] = {};
	CardTransaction._meta_.fields["extra"].type = Object;
	CardTransaction._meta_.fields["begBalance"] = {};
	CardTransaction._meta_.fields["begBalance"].type = Number;
	CardTransaction._meta_.fields["endBalance"] = {};
	CardTransaction._meta_.fields["endBalance"].type = Number;
	CardTransaction._meta_.fields["avsResult"] = {};
	CardTransaction._meta_.fields["avsResult"].type = payments_AVSResult;
	CardTransaction._meta_.fields["cardholderName"] = {};
	CardTransaction._meta_.fields["cardholderName"].type = String;
	CardTransaction._meta_.fields["token"] = {};
	CardTransaction._meta_.fields["token"].type = String;
	CardTransaction._meta_.fields["vaultedCard"] = {};
	CardTransaction._meta_.fields["vaultedCard"].type = payments_VaultedCard;
	CardTransaction._meta_.fields["gatewayTxState"] = {};
	CardTransaction._meta_.fields["gatewayTxState"].type = payments_GatewayTxState;
	CardTransaction._meta_.fields["currency"] = {};
	CardTransaction._meta_.fields["currency"].type = String;
	CardTransaction._meta_.fields["captured"] = {};
	CardTransaction._meta_.fields["captured"].type = Boolean;

	//
	// Expose the module.
	//
	if (true) {
	module.exports = CardTransaction;
	}



/***/ }),
/* 103 */
/***/ (function(module, exports, __webpack_require__) {

	/**
	 * Autogenerated by Avro
	 * 
	 * DO NOT EDIT DIRECTLY
	 */


	/**
	* @constructor
	* @memberof payments
	*/
	var GermanInfo = function() {
	  this._class_ = GermanInfo;
	  this.cardTrack2 = undefined;
	  this.cardSequenceNumber = undefined;
	  this.transactionCaseGermany = undefined;
	  this.transactionTypeGermany = undefined;
	  this.terminalID = undefined;
	  this.traceNumber = undefined;
	  this.oldTraceNumber = undefined;
	  this.receiptNumber = undefined;
	  this.transactionAID = undefined;
	  this.transactionMSApp = undefined;
	  this.transactionScriptResults = undefined;
	  this.receiptType = undefined;
	  this.customerTransactionDOLValues = undefined;
	  this.merchantTransactionDOLValues = undefined;
	  this.merchantJournalDOL = undefined;
	  this.merchantJournalDOLValues = undefined;
	  this.configMerchantId = undefined;
	  this.configProductLabel = undefined;
	  this.hostResponseAidParBMP53 = undefined;
	  this.hostResponsePrintDataBM60 = undefined;
	  this.sepaElvReceiptFormat = undefined;
	  this.sepaElvExtAppLabel = undefined;
	  this.sepaElvPreNotification = undefined;
	  this.sepaElvMandate = undefined;
	  this.sepaElvCreditorId = undefined;
	  this.sepaElvMandateId = undefined;
	  this.sepaElvIban = undefined;
	};


	/**
	* Set the field value
	* @memberof payments.GermanInfo
	* @param {String} cardTrack2 
	*/
	GermanInfo.prototype.setCardTrack2 = function(cardTrack2) {
	  this.cardTrack2 = cardTrack2;
	};

	/**
	* Get the field value
	* @memberof payments.GermanInfo
	* @return {String} 
	*/
	GermanInfo.prototype.getCardTrack2 = function() {
	  return this.cardTrack2;
	};

	/**
	* Set the field value
	* @memberof payments.GermanInfo
	* @param {String} cardSequenceNumber 
	*/
	GermanInfo.prototype.setCardSequenceNumber = function(cardSequenceNumber) {
	  this.cardSequenceNumber = cardSequenceNumber;
	};

	/**
	* Get the field value
	* @memberof payments.GermanInfo
	* @return {String} 
	*/
	GermanInfo.prototype.getCardSequenceNumber = function() {
	  return this.cardSequenceNumber;
	};

	/**
	* Set the field value
	* @memberof payments.GermanInfo
	* @param {String} transactionCaseGermany 
	*/
	GermanInfo.prototype.setTransactionCaseGermany = function(transactionCaseGermany) {
	  this.transactionCaseGermany = transactionCaseGermany;
	};

	/**
	* Get the field value
	* @memberof payments.GermanInfo
	* @return {String} 
	*/
	GermanInfo.prototype.getTransactionCaseGermany = function() {
	  return this.transactionCaseGermany;
	};

	/**
	* Set the field value
	* @memberof payments.GermanInfo
	* @param {String} transactionTypeGermany 
	*/
	GermanInfo.prototype.setTransactionTypeGermany = function(transactionTypeGermany) {
	  this.transactionTypeGermany = transactionTypeGermany;
	};

	/**
	* Get the field value
	* @memberof payments.GermanInfo
	* @return {String} 
	*/
	GermanInfo.prototype.getTransactionTypeGermany = function() {
	  return this.transactionTypeGermany;
	};

	/**
	* Set the field value
	* @memberof payments.GermanInfo
	* @param {String} terminalID 
	*/
	GermanInfo.prototype.setTerminalID = function(terminalID) {
	  this.terminalID = terminalID;
	};

	/**
	* Get the field value
	* @memberof payments.GermanInfo
	* @return {String} 
	*/
	GermanInfo.prototype.getTerminalID = function() {
	  return this.terminalID;
	};

	/**
	* Set the field value
	* @memberof payments.GermanInfo
	* @param {String} traceNumber 
	*/
	GermanInfo.prototype.setTraceNumber = function(traceNumber) {
	  this.traceNumber = traceNumber;
	};

	/**
	* Get the field value
	* @memberof payments.GermanInfo
	* @return {String} 
	*/
	GermanInfo.prototype.getTraceNumber = function() {
	  return this.traceNumber;
	};

	/**
	* Set the field value
	* @memberof payments.GermanInfo
	* @param {String} oldTraceNumber 
	*/
	GermanInfo.prototype.setOldTraceNumber = function(oldTraceNumber) {
	  this.oldTraceNumber = oldTraceNumber;
	};

	/**
	* Get the field value
	* @memberof payments.GermanInfo
	* @return {String} 
	*/
	GermanInfo.prototype.getOldTraceNumber = function() {
	  return this.oldTraceNumber;
	};

	/**
	* Set the field value
	* @memberof payments.GermanInfo
	* @param {String} receiptNumber 
	*/
	GermanInfo.prototype.setReceiptNumber = function(receiptNumber) {
	  this.receiptNumber = receiptNumber;
	};

	/**
	* Get the field value
	* @memberof payments.GermanInfo
	* @return {String} 
	*/
	GermanInfo.prototype.getReceiptNumber = function() {
	  return this.receiptNumber;
	};

	/**
	* Set the field value
	* @memberof payments.GermanInfo
	* @param {String} transactionAID 
	*/
	GermanInfo.prototype.setTransactionAID = function(transactionAID) {
	  this.transactionAID = transactionAID;
	};

	/**
	* Get the field value
	* @memberof payments.GermanInfo
	* @return {String} 
	*/
	GermanInfo.prototype.getTransactionAID = function() {
	  return this.transactionAID;
	};

	/**
	* Set the field value
	* @memberof payments.GermanInfo
	* @param {String} transactionMSApp 
	*/
	GermanInfo.prototype.setTransactionMSApp = function(transactionMSApp) {
	  this.transactionMSApp = transactionMSApp;
	};

	/**
	* Get the field value
	* @memberof payments.GermanInfo
	* @return {String} 
	*/
	GermanInfo.prototype.getTransactionMSApp = function() {
	  return this.transactionMSApp;
	};

	/**
	* Set the field value
	* @memberof payments.GermanInfo
	* @param {String} transactionScriptResults 
	*/
	GermanInfo.prototype.setTransactionScriptResults = function(transactionScriptResults) {
	  this.transactionScriptResults = transactionScriptResults;
	};

	/**
	* Get the field value
	* @memberof payments.GermanInfo
	* @return {String} 
	*/
	GermanInfo.prototype.getTransactionScriptResults = function() {
	  return this.transactionScriptResults;
	};

	/**
	* Set the field value
	* @memberof payments.GermanInfo
	* @param {String} receiptType 
	*/
	GermanInfo.prototype.setReceiptType = function(receiptType) {
	  this.receiptType = receiptType;
	};

	/**
	* Get the field value
	* @memberof payments.GermanInfo
	* @return {String} 
	*/
	GermanInfo.prototype.getReceiptType = function() {
	  return this.receiptType;
	};

	/**
	* Set the field value
	* @memberof payments.GermanInfo
	* @param {String} customerTransactionDOLValues 
	*/
	GermanInfo.prototype.setCustomerTransactionDOLValues = function(customerTransactionDOLValues) {
	  this.customerTransactionDOLValues = customerTransactionDOLValues;
	};

	/**
	* Get the field value
	* @memberof payments.GermanInfo
	* @return {String} 
	*/
	GermanInfo.prototype.getCustomerTransactionDOLValues = function() {
	  return this.customerTransactionDOLValues;
	};

	/**
	* Set the field value
	* @memberof payments.GermanInfo
	* @param {String} merchantTransactionDOLValues 
	*/
	GermanInfo.prototype.setMerchantTransactionDOLValues = function(merchantTransactionDOLValues) {
	  this.merchantTransactionDOLValues = merchantTransactionDOLValues;
	};

	/**
	* Get the field value
	* @memberof payments.GermanInfo
	* @return {String} 
	*/
	GermanInfo.prototype.getMerchantTransactionDOLValues = function() {
	  return this.merchantTransactionDOLValues;
	};

	/**
	* Set the field value
	* @memberof payments.GermanInfo
	* @param {String} merchantJournalDOL 
	*/
	GermanInfo.prototype.setMerchantJournalDOL = function(merchantJournalDOL) {
	  this.merchantJournalDOL = merchantJournalDOL;
	};

	/**
	* Get the field value
	* @memberof payments.GermanInfo
	* @return {String} 
	*/
	GermanInfo.prototype.getMerchantJournalDOL = function() {
	  return this.merchantJournalDOL;
	};

	/**
	* Set the field value
	* @memberof payments.GermanInfo
	* @param {String} merchantJournalDOLValues 
	*/
	GermanInfo.prototype.setMerchantJournalDOLValues = function(merchantJournalDOLValues) {
	  this.merchantJournalDOLValues = merchantJournalDOLValues;
	};

	/**
	* Get the field value
	* @memberof payments.GermanInfo
	* @return {String} 
	*/
	GermanInfo.prototype.getMerchantJournalDOLValues = function() {
	  return this.merchantJournalDOLValues;
	};

	/**
	* Set the field value
	* @memberof payments.GermanInfo
	* @param {String} configMerchantId 
	*/
	GermanInfo.prototype.setConfigMerchantId = function(configMerchantId) {
	  this.configMerchantId = configMerchantId;
	};

	/**
	* Get the field value
	* @memberof payments.GermanInfo
	* @return {String} 
	*/
	GermanInfo.prototype.getConfigMerchantId = function() {
	  return this.configMerchantId;
	};

	/**
	* Set the field value
	* @memberof payments.GermanInfo
	* @param {String} configProductLabel 
	*/
	GermanInfo.prototype.setConfigProductLabel = function(configProductLabel) {
	  this.configProductLabel = configProductLabel;
	};

	/**
	* Get the field value
	* @memberof payments.GermanInfo
	* @return {String} 
	*/
	GermanInfo.prototype.getConfigProductLabel = function() {
	  return this.configProductLabel;
	};

	/**
	* Set the field value
	* @memberof payments.GermanInfo
	* @param {String} hostResponseAidParBMP53 
	*/
	GermanInfo.prototype.setHostResponseAidParBMP53 = function(hostResponseAidParBMP53) {
	  this.hostResponseAidParBMP53 = hostResponseAidParBMP53;
	};

	/**
	* Get the field value
	* @memberof payments.GermanInfo
	* @return {String} 
	*/
	GermanInfo.prototype.getHostResponseAidParBMP53 = function() {
	  return this.hostResponseAidParBMP53;
	};

	/**
	* Set the field value
	* @memberof payments.GermanInfo
	* @param {String} hostResponsePrintDataBM60 
	*/
	GermanInfo.prototype.setHostResponsePrintDataBM60 = function(hostResponsePrintDataBM60) {
	  this.hostResponsePrintDataBM60 = hostResponsePrintDataBM60;
	};

	/**
	* Get the field value
	* @memberof payments.GermanInfo
	* @return {String} 
	*/
	GermanInfo.prototype.getHostResponsePrintDataBM60 = function() {
	  return this.hostResponsePrintDataBM60;
	};

	/**
	* Set the field value
	* @memberof payments.GermanInfo
	* @param {String} sepaElvReceiptFormat 
	*/
	GermanInfo.prototype.setSepaElvReceiptFormat = function(sepaElvReceiptFormat) {
	  this.sepaElvReceiptFormat = sepaElvReceiptFormat;
	};

	/**
	* Get the field value
	* @memberof payments.GermanInfo
	* @return {String} 
	*/
	GermanInfo.prototype.getSepaElvReceiptFormat = function() {
	  return this.sepaElvReceiptFormat;
	};

	/**
	* Set the field value
	* @memberof payments.GermanInfo
	* @param {String} sepaElvExtAppLabel 
	*/
	GermanInfo.prototype.setSepaElvExtAppLabel = function(sepaElvExtAppLabel) {
	  this.sepaElvExtAppLabel = sepaElvExtAppLabel;
	};

	/**
	* Get the field value
	* @memberof payments.GermanInfo
	* @return {String} 
	*/
	GermanInfo.prototype.getSepaElvExtAppLabel = function() {
	  return this.sepaElvExtAppLabel;
	};

	/**
	* Set the field value
	* @memberof payments.GermanInfo
	* @param {String} sepaElvPreNotification 
	*/
	GermanInfo.prototype.setSepaElvPreNotification = function(sepaElvPreNotification) {
	  this.sepaElvPreNotification = sepaElvPreNotification;
	};

	/**
	* Get the field value
	* @memberof payments.GermanInfo
	* @return {String} 
	*/
	GermanInfo.prototype.getSepaElvPreNotification = function() {
	  return this.sepaElvPreNotification;
	};

	/**
	* Set the field value
	* @memberof payments.GermanInfo
	* @param {String} sepaElvMandate 
	*/
	GermanInfo.prototype.setSepaElvMandate = function(sepaElvMandate) {
	  this.sepaElvMandate = sepaElvMandate;
	};

	/**
	* Get the field value
	* @memberof payments.GermanInfo
	* @return {String} 
	*/
	GermanInfo.prototype.getSepaElvMandate = function() {
	  return this.sepaElvMandate;
	};

	/**
	* Set the field value
	* @memberof payments.GermanInfo
	* @param {String} sepaElvCreditorId 
	*/
	GermanInfo.prototype.setSepaElvCreditorId = function(sepaElvCreditorId) {
	  this.sepaElvCreditorId = sepaElvCreditorId;
	};

	/**
	* Get the field value
	* @memberof payments.GermanInfo
	* @return {String} 
	*/
	GermanInfo.prototype.getSepaElvCreditorId = function() {
	  return this.sepaElvCreditorId;
	};

	/**
	* Set the field value
	* @memberof payments.GermanInfo
	* @param {String} sepaElvMandateId 
	*/
	GermanInfo.prototype.setSepaElvMandateId = function(sepaElvMandateId) {
	  this.sepaElvMandateId = sepaElvMandateId;
	};

	/**
	* Get the field value
	* @memberof payments.GermanInfo
	* @return {String} 
	*/
	GermanInfo.prototype.getSepaElvMandateId = function() {
	  return this.sepaElvMandateId;
	};

	/**
	* Set the field value
	* @memberof payments.GermanInfo
	* @param {String} sepaElvIban 
	*/
	GermanInfo.prototype.setSepaElvIban = function(sepaElvIban) {
	  this.sepaElvIban = sepaElvIban;
	};

	/**
	* Get the field value
	* @memberof payments.GermanInfo
	* @return {String} 
	*/
	GermanInfo.prototype.getSepaElvIban = function() {
	  return this.sepaElvIban;
	};

	/**
	* @memberof payments.GermanInfo
	* @private
	*/
	GermanInfo.prototype.getMetaInfo = function(fieldName) {
	  var curclass = this._class_;
	  do {
	    var fieldMetaInfo = curclass._meta_.fields[fieldName];
	    if(fieldMetaInfo) {
	      return fieldMetaInfo;
	    }
	    if(curclass._meta_._superMeta_) {
	      curclass = curclass._meta_._superMeta_._class_;
	    } else {
	      curclass = null;
	    }
	  } while(curclass);
	  return null;
	};

	GermanInfo.prototype.toString = function() {
	  return JSON.stringify(this);
	};

	GermanInfo._meta_ =  {fields:  {}};
	GermanInfo._meta_._class_ =  GermanInfo;
	GermanInfo._meta_.fields["cardTrack2"] = {};
	GermanInfo._meta_.fields["cardTrack2"].type = String;
	GermanInfo._meta_.fields["cardSequenceNumber"] = {};
	GermanInfo._meta_.fields["cardSequenceNumber"].type = String;
	GermanInfo._meta_.fields["transactionCaseGermany"] = {};
	GermanInfo._meta_.fields["transactionCaseGermany"].type = String;
	GermanInfo._meta_.fields["transactionTypeGermany"] = {};
	GermanInfo._meta_.fields["transactionTypeGermany"].type = String;
	GermanInfo._meta_.fields["terminalID"] = {};
	GermanInfo._meta_.fields["terminalID"].type = String;
	GermanInfo._meta_.fields["traceNumber"] = {};
	GermanInfo._meta_.fields["traceNumber"].type = String;
	GermanInfo._meta_.fields["oldTraceNumber"] = {};
	GermanInfo._meta_.fields["oldTraceNumber"].type = String;
	GermanInfo._meta_.fields["receiptNumber"] = {};
	GermanInfo._meta_.fields["receiptNumber"].type = String;
	GermanInfo._meta_.fields["transactionAID"] = {};
	GermanInfo._meta_.fields["transactionAID"].type = String;
	GermanInfo._meta_.fields["transactionMSApp"] = {};
	GermanInfo._meta_.fields["transactionMSApp"].type = String;
	GermanInfo._meta_.fields["transactionScriptResults"] = {};
	GermanInfo._meta_.fields["transactionScriptResults"].type = String;
	GermanInfo._meta_.fields["receiptType"] = {};
	GermanInfo._meta_.fields["receiptType"].type = String;
	GermanInfo._meta_.fields["customerTransactionDOLValues"] = {};
	GermanInfo._meta_.fields["customerTransactionDOLValues"].type = String;
	GermanInfo._meta_.fields["merchantTransactionDOLValues"] = {};
	GermanInfo._meta_.fields["merchantTransactionDOLValues"].type = String;
	GermanInfo._meta_.fields["merchantJournalDOL"] = {};
	GermanInfo._meta_.fields["merchantJournalDOL"].type = String;
	GermanInfo._meta_.fields["merchantJournalDOLValues"] = {};
	GermanInfo._meta_.fields["merchantJournalDOLValues"].type = String;
	GermanInfo._meta_.fields["configMerchantId"] = {};
	GermanInfo._meta_.fields["configMerchantId"].type = String;
	GermanInfo._meta_.fields["configProductLabel"] = {};
	GermanInfo._meta_.fields["configProductLabel"].type = String;
	GermanInfo._meta_.fields["hostResponseAidParBMP53"] = {};
	GermanInfo._meta_.fields["hostResponseAidParBMP53"].type = String;
	GermanInfo._meta_.fields["hostResponsePrintDataBM60"] = {};
	GermanInfo._meta_.fields["hostResponsePrintDataBM60"].type = String;
	GermanInfo._meta_.fields["sepaElvReceiptFormat"] = {};
	GermanInfo._meta_.fields["sepaElvReceiptFormat"].type = String;
	GermanInfo._meta_.fields["sepaElvExtAppLabel"] = {};
	GermanInfo._meta_.fields["sepaElvExtAppLabel"].type = String;
	GermanInfo._meta_.fields["sepaElvPreNotification"] = {};
	GermanInfo._meta_.fields["sepaElvPreNotification"].type = String;
	GermanInfo._meta_.fields["sepaElvMandate"] = {};
	GermanInfo._meta_.fields["sepaElvMandate"].type = String;
	GermanInfo._meta_.fields["sepaElvCreditorId"] = {};
	GermanInfo._meta_.fields["sepaElvCreditorId"].type = String;
	GermanInfo._meta_.fields["sepaElvMandateId"] = {};
	GermanInfo._meta_.fields["sepaElvMandateId"].type = String;
	GermanInfo._meta_.fields["sepaElvIban"] = {};
	GermanInfo._meta_.fields["sepaElvIban"].type = String;

	//
	// Expose the module.
	//
	if (true) {
	module.exports = GermanInfo;
	}



/***/ }),
/* 104 */
/***/ (function(module, exports, __webpack_require__) {

	/**
	 * Autogenerated by Avro
	 * 
	 * DO NOT EDIT DIRECTLY
	 */

	var payments_SelectedService = __webpack_require__(455);
	var payments_PromotionalMessage = __webpack_require__(453);
	var payments_TxFormat = __webpack_require__(460);
	var payments_ECommTransactionInfo = __webpack_require__(444);
	var payments_CardType = __webpack_require__(69);
	var payments_CardEntryType = __webpack_require__(119);
	var payments_ReversalReason = __webpack_require__(454);
	var payments_TransactionResult = __webpack_require__(459);
	var payments_AccountType = __webpack_require__(431);
	var customers_IdentityDocument = __webpack_require__(384);

	/**
	* @constructor
	* @memberof payments
	*/
	var TransactionInfo = function() {
	  this._class_ = TransactionInfo;
	  this.languageIndicator = undefined;
	  this.transactionLocale = undefined;
	  this.accountSelection = undefined;
	  this.fiscalInvoiceNumber = undefined;
	  this.installmentsQuantity = undefined;
	  this.installmentsPlanCode = undefined;
	  this.installmentsPlanId = undefined;
	  this.installmentsPlanDesc = undefined;
	  this.cardTypeLabel = undefined;
	  this.cardSymbol = undefined;
	  this.stan = undefined;
	  this.identityDocument = undefined;
	  this.batchNumber = undefined;
	  this.receiptNumber = undefined;
	  this.reversalStanRefNum = undefined;
	  this.reversalStan = undefined;
	  this.reversalMac = undefined;
	  this.reversalMacKsn = undefined;
	  this.terminalIdentification = undefined;
	  this.merchantIdentifier = undefined;
	  this.merchantNameLocation = undefined;
	  this.maskedTrack2 = undefined;
	  this.receiptExtraData = undefined;
	  this.selectedService = undefined;
	  this.transactionResult = undefined;
	  this.transactionTags = undefined;
	  this.txFormat = undefined;
	  this.panMask = undefined;
	  this.transactionSequenceCounter = undefined;
	  this.applicationPanSequenceNumber = undefined;
	  this.reversalReason = undefined;
	  this.isTokenBasedTx = false;
	  this.origTransactionSequenceCounter = undefined;
	  this.transactionSequenceCounterUpdate = undefined;
	  this.emergencyFlag = false;
	  this.entryType = undefined;
	  this.promotionalMessage = undefined;
	  this.eCommTransactionInfo = undefined;
	  this.clientCardType = undefined;
	};


	/**
	* Set the field value
	* 2 character language used for the transaction. Deprecated in factor of transactionLocale.
	*
	* @memberof payments.TransactionInfo
	* @param {String} languageIndicator 
	*/
	TransactionInfo.prototype.setLanguageIndicator = function(languageIndicator) {
	  this.languageIndicator = languageIndicator;
	};

	/**
	* Get the field value
	* 2 character language used for the transaction. Deprecated in factor of transactionLocale.
	* @memberof payments.TransactionInfo
	* @return {String} 
	*/
	TransactionInfo.prototype.getLanguageIndicator = function() {
	  return this.languageIndicator;
	};

	/**
	* Set the field value
	* Locale for the transaction (e.g. en-CA)
	*
	* @memberof payments.TransactionInfo
	* @param {String} transactionLocale 
	*/
	TransactionInfo.prototype.setTransactionLocale = function(transactionLocale) {
	  this.transactionLocale = transactionLocale;
	};

	/**
	* Get the field value
	* Locale for the transaction (e.g. en-CA)
	* @memberof payments.TransactionInfo
	* @return {String} 
	*/
	TransactionInfo.prototype.getTransactionLocale = function() {
	  return this.transactionLocale;
	};

	/**
	* Set the field value
	* @memberof payments.TransactionInfo
	* @param {payments.AccountType} accountSelection 
	*/
	TransactionInfo.prototype.setAccountSelection = function(accountSelection) {
	  this.accountSelection = accountSelection;
	};

	/**
	* Get the field value
	* @memberof payments.TransactionInfo
	* @return {payments.AccountType} 
	*/
	TransactionInfo.prototype.getAccountSelection = function() {
	  return this.accountSelection;
	};

	/**
	* Set the field value
	* Consists of 4 digits prefix + 8 digits
	*
	* @memberof payments.TransactionInfo
	* @param {String} fiscalInvoiceNumber 
	*/
	TransactionInfo.prototype.setFiscalInvoiceNumber = function(fiscalInvoiceNumber) {
	  this.fiscalInvoiceNumber = fiscalInvoiceNumber;
	};

	/**
	* Get the field value
	* Consists of 4 digits prefix + 8 digits
	* @memberof payments.TransactionInfo
	* @return {String} 
	*/
	TransactionInfo.prototype.getFiscalInvoiceNumber = function() {
	  return this.fiscalInvoiceNumber;
	};

	/**
	* Set the field value
	* AR Installments: number of installments
	*
	* @memberof payments.TransactionInfo
	* @param {Number} installmentsQuantity must be an integer
	*/
	TransactionInfo.prototype.setInstallmentsQuantity = function(installmentsQuantity) {
	  this.installmentsQuantity = installmentsQuantity;
	};

	/**
	* Get the field value
	* AR Installments: number of installments
	* @memberof payments.TransactionInfo
	* @return {Number} must be an integer
	*/
	TransactionInfo.prototype.getInstallmentsQuantity = function() {
	  return this.installmentsQuantity;
	};

	/**
	* Set the field value
	* AR Installments: plan alphanum code
	*
	* @memberof payments.TransactionInfo
	* @param {String} installmentsPlanCode 
	*/
	TransactionInfo.prototype.setInstallmentsPlanCode = function(installmentsPlanCode) {
	  this.installmentsPlanCode = installmentsPlanCode;
	};

	/**
	* Get the field value
	* AR Installments: plan alphanum code
	* @memberof payments.TransactionInfo
	* @return {String} 
	*/
	TransactionInfo.prototype.getInstallmentsPlanCode = function() {
	  return this.installmentsPlanCode;
	};

	/**
	* Set the field value
	* AR Installments: selected plan id
	*
	* @memberof payments.TransactionInfo
	* @param {String} installmentsPlanId 
	*/
	TransactionInfo.prototype.setInstallmentsPlanId = function(installmentsPlanId) {
	  this.installmentsPlanId = installmentsPlanId;
	};

	/**
	* Get the field value
	* AR Installments: selected plan id
	* @memberof payments.TransactionInfo
	* @return {String} 
	*/
	TransactionInfo.prototype.getInstallmentsPlanId = function() {
	  return this.installmentsPlanId;
	};

	/**
	* Set the field value
	* AR Installments: selected plan desc
	*
	* @memberof payments.TransactionInfo
	* @param {String} installmentsPlanDesc 
	*/
	TransactionInfo.prototype.setInstallmentsPlanDesc = function(installmentsPlanDesc) {
	  this.installmentsPlanDesc = installmentsPlanDesc;
	};

	/**
	* Get the field value
	* AR Installments: selected plan desc
	* @memberof payments.TransactionInfo
	* @return {String} 
	*/
	TransactionInfo.prototype.getInstallmentsPlanDesc = function() {
	  return this.installmentsPlanDesc;
	};

	/**
	* Set the field value
	* Card type label
	*
	* @memberof payments.TransactionInfo
	* @param {String} cardTypeLabel 
	*/
	TransactionInfo.prototype.setCardTypeLabel = function(cardTypeLabel) {
	  this.cardTypeLabel = cardTypeLabel;
	};

	/**
	* Get the field value
	* Card type label
	* @memberof payments.TransactionInfo
	* @return {String} 
	*/
	TransactionInfo.prototype.getCardTypeLabel = function() {
	  return this.cardTypeLabel;
	};

	/**
	* Set the field value
	* Card Symbol for identify in payment_card_config table
	*
	* @memberof payments.TransactionInfo
	* @param {String} cardSymbol 
	*/
	TransactionInfo.prototype.setCardSymbol = function(cardSymbol) {
	  this.cardSymbol = cardSymbol;
	};

	/**
	* Get the field value
	* Card Symbol for identify in payment_card_config table
	* @memberof payments.TransactionInfo
	* @return {String} 
	*/
	TransactionInfo.prototype.getCardSymbol = function() {
	  return this.cardSymbol;
	};

	/**
	* Set the field value
	* STAN(System Audit Trace Number)
	*
	* @memberof payments.TransactionInfo
	* @param {Number} stan must be an integer
	*/
	TransactionInfo.prototype.setStan = function(stan) {
	  this.stan = stan;
	};

	/**
	* Get the field value
	* STAN(System Audit Trace Number)
	* @memberof payments.TransactionInfo
	* @return {Number} must be an integer
	*/
	TransactionInfo.prototype.getStan = function() {
	  return this.stan;
	};

	/**
	* Set the field value
	* Customers identification number and type
	*
	* @memberof payments.TransactionInfo
	* @param {customers.IdentityDocument|Null} identityDocument 
	*/
	TransactionInfo.prototype.setIdentityDocument = function(identityDocument) {
	  this.identityDocument = identityDocument;
	};

	/**
	* Get the field value
	* Customers identification number and type
	* @memberof payments.TransactionInfo
	* @return {customers.IdentityDocument|Null} 
	*/
	TransactionInfo.prototype.getIdentityDocument = function() {
	  return this.identityDocument;
	};

	/**
	* Set the field value
	* Transaction Batch Number
	*
	* @memberof payments.TransactionInfo
	* @param {String} batchNumber 
	*/
	TransactionInfo.prototype.setBatchNumber = function(batchNumber) {
	  this.batchNumber = batchNumber;
	};

	/**
	* Get the field value
	* Transaction Batch Number
	* @memberof payments.TransactionInfo
	* @return {String} 
	*/
	TransactionInfo.prototype.getBatchNumber = function() {
	  return this.batchNumber;
	};

	/**
	* Set the field value
	* Transaction Receipt Number
	*
	* @memberof payments.TransactionInfo
	* @param {String} receiptNumber 
	*/
	TransactionInfo.prototype.setReceiptNumber = function(receiptNumber) {
	  this.receiptNumber = receiptNumber;
	};

	/**
	* Get the field value
	* Transaction Receipt Number
	* @memberof payments.TransactionInfo
	* @return {String} 
	*/
	TransactionInfo.prototype.getReceiptNumber = function() {
	  return this.receiptNumber;
	};

	/**
	* Set the field value
	* Reversal STAN Ref Num
	*
	* @memberof payments.TransactionInfo
	* @param {String} reversalStanRefNum 
	*/
	TransactionInfo.prototype.setReversalStanRefNum = function(reversalStanRefNum) {
	  this.reversalStanRefNum = reversalStanRefNum;
	};

	/**
	* Get the field value
	* Reversal STAN Ref Num
	* @memberof payments.TransactionInfo
	* @return {String} 
	*/
	TransactionInfo.prototype.getReversalStanRefNum = function() {
	  return this.reversalStanRefNum;
	};

	/**
	* Set the field value
	* STAN for reversal
	*
	* @memberof payments.TransactionInfo
	* @param {Number} reversalStan must be an integer
	*/
	TransactionInfo.prototype.setReversalStan = function(reversalStan) {
	  this.reversalStan = reversalStan;
	};

	/**
	* Get the field value
	* STAN for reversal
	* @memberof payments.TransactionInfo
	* @return {Number} must be an integer
	*/
	TransactionInfo.prototype.getReversalStan = function() {
	  return this.reversalStan;
	};

	/**
	* Set the field value
	* MAC for reversal
	*
	* @memberof payments.TransactionInfo
	* @param {String} reversalMac 
	*/
	TransactionInfo.prototype.setReversalMac = function(reversalMac) {
	  this.reversalMac = reversalMac;
	};

	/**
	* Get the field value
	* MAC for reversal
	* @memberof payments.TransactionInfo
	* @return {String} 
	*/
	TransactionInfo.prototype.getReversalMac = function() {
	  return this.reversalMac;
	};

	/**
	* Set the field value
	* MAC KSN for reversal
	*
	* @memberof payments.TransactionInfo
	* @param {String} reversalMacKsn 
	*/
	TransactionInfo.prototype.setReversalMacKsn = function(reversalMacKsn) {
	  this.reversalMacKsn = reversalMacKsn;
	};

	/**
	* Get the field value
	* MAC KSN for reversal
	* @memberof payments.TransactionInfo
	* @return {String} 
	*/
	TransactionInfo.prototype.getReversalMacKsn = function() {
	  return this.reversalMacKsn;
	};

	/**
	* Set the field value
	* Designates the unique location of a terminal at a merchant
	*
	* @memberof payments.TransactionInfo
	* @param {String} terminalIdentification 
	*/
	TransactionInfo.prototype.setTerminalIdentification = function(terminalIdentification) {
	  this.terminalIdentification = terminalIdentification;
	};

	/**
	* Get the field value
	* Designates the unique location of a terminal at a merchant
	* @memberof payments.TransactionInfo
	* @return {String} 
	*/
	TransactionInfo.prototype.getTerminalIdentification = function() {
	  return this.terminalIdentification;
	};

	/**
	* Set the field value
	* When concatenated with the Acquirer Identifier, uniquely identifies a given merchant
	*
	* @memberof payments.TransactionInfo
	* @param {String} merchantIdentifier 
	*/
	TransactionInfo.prototype.setMerchantIdentifier = function(merchantIdentifier) {
	  this.merchantIdentifier = merchantIdentifier;
	};

	/**
	* Get the field value
	* When concatenated with the Acquirer Identifier, uniquely identifies a given merchant
	* @memberof payments.TransactionInfo
	* @return {String} 
	*/
	TransactionInfo.prototype.getMerchantIdentifier = function() {
	  return this.merchantIdentifier;
	};

	/**
	* Set the field value
	* Indicates the name and location of the merchant
	*
	* @memberof payments.TransactionInfo
	* @param {String} merchantNameLocation 
	*/
	TransactionInfo.prototype.setMerchantNameLocation = function(merchantNameLocation) {
	  this.merchantNameLocation = merchantNameLocation;
	};

	/**
	* Get the field value
	* Indicates the name and location of the merchant
	* @memberof payments.TransactionInfo
	* @return {String} 
	*/
	TransactionInfo.prototype.getMerchantNameLocation = function() {
	  return this.merchantNameLocation;
	};

	/**
	* Set the field value
	* Masked track2 data
	*
	* @memberof payments.TransactionInfo
	* @param {String} maskedTrack2 
	*/
	TransactionInfo.prototype.setMaskedTrack2 = function(maskedTrack2) {
	  this.maskedTrack2 = maskedTrack2;
	};

	/**
	* Get the field value
	* Masked track2 data
	* @memberof payments.TransactionInfo
	* @return {String} 
	*/
	TransactionInfo.prototype.getMaskedTrack2 = function() {
	  return this.maskedTrack2;
	};

	/**
	* Set the field value
	* Extra data for receipt
	*
	* @memberof payments.TransactionInfo
	* @param {String} receiptExtraData 
	*/
	TransactionInfo.prototype.setReceiptExtraData = function(receiptExtraData) {
	  this.receiptExtraData = receiptExtraData;
	};

	/**
	* Get the field value
	* Extra data for receipt
	* @memberof payments.TransactionInfo
	* @return {String} 
	*/
	TransactionInfo.prototype.getReceiptExtraData = function() {
	  return this.receiptExtraData;
	};

	/**
	* Set the field value
	* Defines the Financial Service selected for the transaction
	*
	* @memberof payments.TransactionInfo
	* @param {payments.SelectedService} selectedService 
	*/
	TransactionInfo.prototype.setSelectedService = function(selectedService) {
	  this.selectedService = selectedService;
	};

	/**
	* Get the field value
	* Defines the Financial Service selected for the transaction
	* @memberof payments.TransactionInfo
	* @return {payments.SelectedService} 
	*/
	TransactionInfo.prototype.getSelectedService = function() {
	  return this.selectedService;
	};

	/**
	* Set the field value
	* Result of the transaction
	*
	* @memberof payments.TransactionInfo
	* @param {payments.TransactionResult} transactionResult 
	*/
	TransactionInfo.prototype.setTransactionResult = function(transactionResult) {
	  this.transactionResult = transactionResult;
	};

	/**
	* Get the field value
	* Result of the transaction
	* @memberof payments.TransactionInfo
	* @return {payments.TransactionResult} 
	*/
	TransactionInfo.prototype.getTransactionResult = function() {
	  return this.transactionResult;
	};

	/**
	* Set the field value
	* Contains a hex string with needed TLV tags for certification
	*
	* @memberof payments.TransactionInfo
	* @param {String} transactionTags 
	*/
	TransactionInfo.prototype.setTransactionTags = function(transactionTags) {
	  this.transactionTags = transactionTags;
	};

	/**
	* Get the field value
	* Contains a hex string with needed TLV tags for certification
	* @memberof payments.TransactionInfo
	* @return {String} 
	*/
	TransactionInfo.prototype.getTransactionTags = function() {
	  return this.transactionTags;
	};

	/**
	* Set the field value
	* Contains the information how the data inside transactionTags should be coded - initially we cause default and nexo as formats
	*
	* @memberof payments.TransactionInfo
	* @param {payments.TxFormat} txFormat 
	*/
	TransactionInfo.prototype.setTxFormat = function(txFormat) {
	  this.txFormat = txFormat;
	};

	/**
	* Get the field value
	* Contains the information how the data inside transactionTags should be coded - initially we cause default and nexo as formats
	* @memberof payments.TransactionInfo
	* @return {payments.TxFormat} 
	*/
	TransactionInfo.prototype.getTxFormat = function() {
	  return this.txFormat;
	};

	/**
	* Set the field value
	* Contains the information how the PAN should masked.
	*
	* @memberof payments.TransactionInfo
	* @param {String} panMask 
	*/
	TransactionInfo.prototype.setPanMask = function(panMask) {
	  this.panMask = panMask;
	};

	/**
	* Get the field value
	* Contains the information how the PAN should masked.
	* @memberof payments.TransactionInfo
	* @return {String} 
	*/
	TransactionInfo.prototype.getPanMask = function() {
	  return this.panMask;
	};

	/**
	* Set the field value
	* Counter maintained by the terminal that is incremented for each transaction at the beginning of the Perform Service function.
	*
	* @memberof payments.TransactionInfo
	* @param {String} transactionSequenceCounter 
	*/
	TransactionInfo.prototype.setTransactionSequenceCounter = function(transactionSequenceCounter) {
	  this.transactionSequenceCounter = transactionSequenceCounter;
	};

	/**
	* Get the field value
	* Counter maintained by the terminal that is incremented for each transaction at the beginning of the Perform Service function.
	* @memberof payments.TransactionInfo
	* @return {String} 
	*/
	TransactionInfo.prototype.getTransactionSequenceCounter = function() {
	  return this.transactionSequenceCounter;
	};

	/**
	* Set the field value
	* Identifies and differentiates cards with the same PAN.
	*
	* @memberof payments.TransactionInfo
	* @param {String} applicationPanSequenceNumber 
	*/
	TransactionInfo.prototype.setApplicationPanSequenceNumber = function(applicationPanSequenceNumber) {
	  this.applicationPanSequenceNumber = applicationPanSequenceNumber;
	};

	/**
	* Get the field value
	* Identifies and differentiates cards with the same PAN.
	* @memberof payments.TransactionInfo
	* @return {String} 
	*/
	TransactionInfo.prototype.getApplicationPanSequenceNumber = function() {
	  return this.applicationPanSequenceNumber;
	};

	/**
	* Set the field value
	* Contains the reason why the transaction should be reversed in the host. It has to be mapped in server with the expected value by the corresponding gateway
	*
	* @memberof payments.TransactionInfo
	* @param {payments.ReversalReason} reversalReason 
	*/
	TransactionInfo.prototype.setReversalReason = function(reversalReason) {
	  this.reversalReason = reversalReason;
	};

	/**
	* Get the field value
	* Contains the reason why the transaction should be reversed in the host. It has to be mapped in server with the expected value by the corresponding gateway
	* @memberof payments.TransactionInfo
	* @return {payments.ReversalReason} 
	*/
	TransactionInfo.prototype.getReversalReason = function() {
	  return this.reversalReason;
	};

	/**
	* Set the field value
	* Boolean to determine if the transaction done using a vaulted card is a token based transaction
	*
	* @memberof payments.TransactionInfo
	* @param {Boolean} isTokenBasedTx 
	*/
	TransactionInfo.prototype.setIsTokenBasedTx = function(isTokenBasedTx) {
	  this.isTokenBasedTx = isTokenBasedTx;
	};

	/**
	* Get the field value
	* Boolean to determine if the transaction done using a vaulted card is a token based transaction
	* @memberof payments.TransactionInfo
	* @return {Boolean} 
	*/
	TransactionInfo.prototype.getIsTokenBasedTx = function() {
	  return this.isTokenBasedTx;
	};

	/**
	* Set the field value
	* For reversal and capture transactions, this contains the reference (transactionSequenceCounter) to the originating transaction.
	*
	* @memberof payments.TransactionInfo
	* @param {String} origTransactionSequenceCounter 
	*/
	TransactionInfo.prototype.setOrigTransactionSequenceCounter = function(origTransactionSequenceCounter) {
	  this.origTransactionSequenceCounter = origTransactionSequenceCounter;
	};

	/**
	* Get the field value
	* For reversal and capture transactions, this contains the reference (transactionSequenceCounter) to the originating transaction.
	* @memberof payments.TransactionInfo
	* @return {String} 
	*/
	TransactionInfo.prototype.getOrigTransactionSequenceCounter = function() {
	  return this.origTransactionSequenceCounter;
	};

	/**
	* Set the field value
	* This field is populated when the TSC of a terminal is out of sync and is provided with an update.
	*
	* @memberof payments.TransactionInfo
	* @param {String} transactionSequenceCounterUpdate 
	*/
	TransactionInfo.prototype.setTransactionSequenceCounterUpdate = function(transactionSequenceCounterUpdate) {
	  this.transactionSequenceCounterUpdate = transactionSequenceCounterUpdate;
	};

	/**
	* Get the field value
	* This field is populated when the TSC of a terminal is out of sync and is provided with an update.
	* @memberof payments.TransactionInfo
	* @return {String} 
	*/
	TransactionInfo.prototype.getTransactionSequenceCounterUpdate = function() {
	  return this.transactionSequenceCounterUpdate;
	};

	/**
	* Set the field value
	* Boolean value defining if the corresponding TX was performed in NEXO emergency mode according NEXO IS Spec chapter 10.2
	*
	* @memberof payments.TransactionInfo
	* @param {Boolean} emergencyFlag 
	*/
	TransactionInfo.prototype.setEmergencyFlag = function(emergencyFlag) {
	  this.emergencyFlag = emergencyFlag;
	};

	/**
	* Get the field value
	* Boolean value defining if the corresponding TX was performed in NEXO emergency mode according NEXO IS Spec chapter 10.2
	* @memberof payments.TransactionInfo
	* @return {Boolean} 
	*/
	TransactionInfo.prototype.getEmergencyFlag = function() {
	  return this.emergencyFlag;
	};

	/**
	* Set the field value
	* This field contains the entry type of a transaction.
	*
	* @memberof payments.TransactionInfo
	* @param {payments.CardEntryType} entryType 
	*/
	TransactionInfo.prototype.setEntryType = function(entryType) {
	  this.entryType = entryType;
	};

	/**
	* Get the field value
	* This field contains the entry type of a transaction.
	* @memberof payments.TransactionInfo
	* @return {payments.CardEntryType} 
	*/
	TransactionInfo.prototype.getEntryType = function() {
	  return this.entryType;
	};

	/**
	* Set the field value
	* @memberof payments.TransactionInfo
	* @param {payments.PromotionalMessage} promotionalMessage 
	*/
	TransactionInfo.prototype.setPromotionalMessage = function(promotionalMessage) {
	  this.promotionalMessage = promotionalMessage;
	};

	/**
	* Get the field value
	* @memberof payments.TransactionInfo
	* @return {payments.PromotionalMessage} 
	*/
	TransactionInfo.prototype.getPromotionalMessage = function() {
	  return this.promotionalMessage;
	};

	/**
	* Set the field value
	* @memberof payments.TransactionInfo
	* @param {payments.ECommTransactionInfo} eCommTransactionInfo 
	*/
	TransactionInfo.prototype.setECommTransactionInfo = function(eCommTransactionInfo) {
	  this.eCommTransactionInfo = eCommTransactionInfo;
	};

	/**
	* Get the field value
	* @memberof payments.TransactionInfo
	* @return {payments.ECommTransactionInfo} 
	*/
	TransactionInfo.prototype.getECommTransactionInfo = function() {
	  return this.eCommTransactionInfo;
	};

	/**
	* Set the field value
	* Client card type should be used only limited purpose only and should not be confused with cardType in other objects.
	 This is a read only field and must not to be overwritten on server or client once set on client. 
	 This is set on client only for MSR tx for now as the AIDs are not identified for MSR. 
	 For few MSR tx, the card type was identified incorrectly on client side, and also on server side based on the bin match. 
	 In order to get the correct card types, this client card type will be sent to the server
	*
	* @memberof payments.TransactionInfo
	* @param {payments.CardType} clientCardType 
	*/
	TransactionInfo.prototype.setClientCardType = function(clientCardType) {
	  this.clientCardType = clientCardType;
	};

	/**
	* Get the field value
	* Client card type should be used only limited purpose only and should not be confused with cardType in other objects.
	 This is a read only field and must not to be overwritten on server or client once set on client. 
	 This is set on client only for MSR tx for now as the AIDs are not identified for MSR. 
	 For few MSR tx, the card type was identified incorrectly on client side, and also on server side based on the bin match. 
	 In order to get the correct card types, this client card type will be sent to the server
	* @memberof payments.TransactionInfo
	* @return {payments.CardType} 
	*/
	TransactionInfo.prototype.getClientCardType = function() {
	  return this.clientCardType;
	};

	/**
	* @memberof payments.TransactionInfo
	* @private
	*/
	TransactionInfo.prototype.getMetaInfo = function(fieldName) {
	  var curclass = this._class_;
	  do {
	    var fieldMetaInfo = curclass._meta_.fields[fieldName];
	    if(fieldMetaInfo) {
	      return fieldMetaInfo;
	    }
	    if(curclass._meta_._superMeta_) {
	      curclass = curclass._meta_._superMeta_._class_;
	    } else {
	      curclass = null;
	    }
	  } while(curclass);
	  return null;
	};

	TransactionInfo.prototype.toString = function() {
	  return JSON.stringify(this);
	};

	TransactionInfo._meta_ =  {fields:  {}};
	TransactionInfo._meta_._class_ =  TransactionInfo;
	TransactionInfo._meta_.fields["languageIndicator"] = {};
	TransactionInfo._meta_.fields["languageIndicator"].type = String;
	TransactionInfo._meta_.fields["transactionLocale"] = {};
	TransactionInfo._meta_.fields["transactionLocale"].type = String;
	TransactionInfo._meta_.fields["accountSelection"] = {};
	TransactionInfo._meta_.fields["accountSelection"].type = payments_AccountType;
	TransactionInfo._meta_.fields["fiscalInvoiceNumber"] = {};
	TransactionInfo._meta_.fields["fiscalInvoiceNumber"].type = String;
	TransactionInfo._meta_.fields["installmentsQuantity"] = {};
	TransactionInfo._meta_.fields["installmentsQuantity"].type = Number;
	TransactionInfo._meta_.fields["installmentsPlanCode"] = {};
	TransactionInfo._meta_.fields["installmentsPlanCode"].type = String;
	TransactionInfo._meta_.fields["installmentsPlanId"] = {};
	TransactionInfo._meta_.fields["installmentsPlanId"].type = String;
	TransactionInfo._meta_.fields["installmentsPlanDesc"] = {};
	TransactionInfo._meta_.fields["installmentsPlanDesc"].type = String;
	TransactionInfo._meta_.fields["cardTypeLabel"] = {};
	TransactionInfo._meta_.fields["cardTypeLabel"].type = String;
	TransactionInfo._meta_.fields["cardSymbol"] = {};
	TransactionInfo._meta_.fields["cardSymbol"].type = String;
	TransactionInfo._meta_.fields["stan"] = {};
	TransactionInfo._meta_.fields["stan"].type = Number;
	TransactionInfo._meta_.fields["identityDocument"] = {};
	TransactionInfo._meta_.fields["identityDocument"].type = customers_IdentityDocument;
	TransactionInfo._meta_.fields["batchNumber"] = {};
	TransactionInfo._meta_.fields["batchNumber"].type = String;
	TransactionInfo._meta_.fields["receiptNumber"] = {};
	TransactionInfo._meta_.fields["receiptNumber"].type = String;
	TransactionInfo._meta_.fields["reversalStanRefNum"] = {};
	TransactionInfo._meta_.fields["reversalStanRefNum"].type = String;
	TransactionInfo._meta_.fields["reversalStan"] = {};
	TransactionInfo._meta_.fields["reversalStan"].type = Number;
	TransactionInfo._meta_.fields["reversalMac"] = {};
	TransactionInfo._meta_.fields["reversalMac"].type = String;
	TransactionInfo._meta_.fields["reversalMacKsn"] = {};
	TransactionInfo._meta_.fields["reversalMacKsn"].type = String;
	TransactionInfo._meta_.fields["terminalIdentification"] = {};
	TransactionInfo._meta_.fields["terminalIdentification"].type = String;
	TransactionInfo._meta_.fields["merchantIdentifier"] = {};
	TransactionInfo._meta_.fields["merchantIdentifier"].type = String;
	TransactionInfo._meta_.fields["merchantNameLocation"] = {};
	TransactionInfo._meta_.fields["merchantNameLocation"].type = String;
	TransactionInfo._meta_.fields["maskedTrack2"] = {};
	TransactionInfo._meta_.fields["maskedTrack2"].type = String;
	TransactionInfo._meta_.fields["receiptExtraData"] = {};
	TransactionInfo._meta_.fields["receiptExtraData"].type = String;
	TransactionInfo._meta_.fields["selectedService"] = {};
	TransactionInfo._meta_.fields["selectedService"].type = payments_SelectedService;
	TransactionInfo._meta_.fields["transactionResult"] = {};
	TransactionInfo._meta_.fields["transactionResult"].type = payments_TransactionResult;
	TransactionInfo._meta_.fields["transactionTags"] = {};
	TransactionInfo._meta_.fields["transactionTags"].type = String;
	TransactionInfo._meta_.fields["txFormat"] = {};
	TransactionInfo._meta_.fields["txFormat"].type = payments_TxFormat;
	TransactionInfo._meta_.fields["panMask"] = {};
	TransactionInfo._meta_.fields["panMask"].type = String;
	TransactionInfo._meta_.fields["transactionSequenceCounter"] = {};
	TransactionInfo._meta_.fields["transactionSequenceCounter"].type = String;
	TransactionInfo._meta_.fields["applicationPanSequenceNumber"] = {};
	TransactionInfo._meta_.fields["applicationPanSequenceNumber"].type = String;
	TransactionInfo._meta_.fields["reversalReason"] = {};
	TransactionInfo._meta_.fields["reversalReason"].type = payments_ReversalReason;
	TransactionInfo._meta_.fields["isTokenBasedTx"] = {};
	TransactionInfo._meta_.fields["isTokenBasedTx"].type = Boolean;
	TransactionInfo._meta_.fields["origTransactionSequenceCounter"] = {};
	TransactionInfo._meta_.fields["origTransactionSequenceCounter"].type = String;
	TransactionInfo._meta_.fields["transactionSequenceCounterUpdate"] = {};
	TransactionInfo._meta_.fields["transactionSequenceCounterUpdate"].type = String;
	TransactionInfo._meta_.fields["emergencyFlag"] = {};
	TransactionInfo._meta_.fields["emergencyFlag"].type = Boolean;
	TransactionInfo._meta_.fields["entryType"] = {};
	TransactionInfo._meta_.fields["entryType"].type = payments_CardEntryType;
	TransactionInfo._meta_.fields["promotionalMessage"] = {};
	TransactionInfo._meta_.fields["promotionalMessage"].type = payments_PromotionalMessage;
	TransactionInfo._meta_.fields["eCommTransactionInfo"] = {};
	TransactionInfo._meta_.fields["eCommTransactionInfo"].type = payments_ECommTransactionInfo;
	TransactionInfo._meta_.fields["clientCardType"] = {};
	TransactionInfo._meta_.fields["clientCardType"].type = payments_CardType;

	//
	// Expose the module.
	//
	if (true) {
	module.exports = TransactionInfo;
	}



/***/ }),
/* 105 */
/***/ (function(module, exports, __webpack_require__) {

	"use strict";

	Object.defineProperty(exports, "__esModule", {
	    value: true
	});

	var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

	var _react = __webpack_require__(4);

	var _react2 = _interopRequireDefault(_react);

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

	function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

	function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

	var TitleBar = function (_React$Component) {
	    _inherits(TitleBar, _React$Component);

	    function TitleBar() {
	        _classCallCheck(this, TitleBar);

	        return _possibleConstructorReturn(this, (TitleBar.__proto__ || Object.getPrototypeOf(TitleBar)).apply(this, arguments));
	    }

	    _createClass(TitleBar, [{
	        key: "render",
	        value: function render() {
	            var title = this.props.title;

	            return _react2.default.createElement(
	                "div",
	                { className: "title_bar" },
	                _react2.default.createElement(
	                    "span",
	                    null,
	                    title
	                )
	            );
	        }
	    }]);

	    return TitleBar;
	}(_react2.default.Component);

	exports.default = TitleBar;

/***/ }),
/* 106 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';
	// 21.2.5.3 get RegExp.prototype.flags
	var anObject = __webpack_require__(6);
	module.exports = function () {
	  var that = anObject(this);
	  var result = '';
	  if (that.global) result += 'g';
	  if (that.ignoreCase) result += 'i';
	  if (that.multiline) result += 'm';
	  if (that.unicode) result += 'u';
	  if (that.sticky) result += 'y';
	  return result;
	};


/***/ }),
/* 107 */
/***/ (function(module, exports, __webpack_require__) {

	// fallback for non-array-like ES3 and non-enumerable old V8 strings
	var cof = __webpack_require__(42);
	// eslint-disable-next-line no-prototype-builtins
	module.exports = Object('z').propertyIsEnumerable(0) ? Object : function (it) {
	  return cof(it) == 'String' ? it.split('') : Object(it);
	};


/***/ }),
/* 108 */
/***/ (function(module, exports) {

	exports.f = {}.propertyIsEnumerable;


/***/ }),
/* 109 */
/***/ (function(module, exports, __webpack_require__) {

	var core = __webpack_require__(43);
	var global = __webpack_require__(9);
	var SHARED = '__core-js_shared__';
	var store = global[SHARED] || (global[SHARED] = {});

	(module.exports = function (key, value) {
	  return store[key] || (store[key] = value !== undefined ? value : {});
	})('versions', []).push({
	  version: core.version,
	  mode: __webpack_require__(63) ? 'pure' : 'global',
	  copyright: '© 2020 Denis Pushkarev (zloirock.ru)'
	});


/***/ }),
/* 110 */
/***/ (function(module, exports, __webpack_require__) {

	// 7.3.20 SpeciesConstructor(O, defaultConstructor)
	var anObject = __webpack_require__(6);
	var aFunction = __webpack_require__(28);
	var SPECIES = __webpack_require__(16)('species');
	module.exports = function (O, D) {
	  var C = anObject(O).constructor;
	  var S;
	  return C === undefined || (S = anObject(C)[SPECIES]) == undefined ? D : aFunction(S);
	};


/***/ }),
/* 111 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';

	var keys = __webpack_require__(335);
	var hasSymbols = typeof Symbol === 'function' && typeof Symbol('foo') === 'symbol';

	var toStr = Object.prototype.toString;
	var concat = Array.prototype.concat;
	var origDefineProperty = Object.defineProperty;

	var isFunction = function (fn) {
		return typeof fn === 'function' && toStr.call(fn) === '[object Function]';
	};

	var arePropertyDescriptorsSupported = function () {
		var obj = {};
		try {
			origDefineProperty(obj, 'x', { enumerable: false, value: obj });
			// eslint-disable-next-line no-unused-vars, no-restricted-syntax
			for (var _ in obj) { // jscs:ignore disallowUnusedVariables
				return false;
			}
			return obj.x === obj;
		} catch (e) { /* this is IE 8. */
			return false;
		}
	};
	var supportsDescriptors = origDefineProperty && arePropertyDescriptorsSupported();

	var defineProperty = function (object, name, value, predicate) {
		if (name in object && (!isFunction(predicate) || !predicate())) {
			return;
		}
		if (supportsDescriptors) {
			origDefineProperty(object, name, {
				configurable: true,
				enumerable: false,
				value: value,
				writable: true
			});
		} else {
			object[name] = value;
		}
	};

	var defineProperties = function (object, map) {
		var predicates = arguments.length > 2 ? arguments[2] : {};
		var props = keys(map);
		if (hasSymbols) {
			props = concat.call(props, Object.getOwnPropertySymbols(map));
		}
		for (var i = 0; i < props.length; i += 1) {
			defineProperty(object, props[i], map[props[i]], predicates[props[i]]);
		}
	};

	defineProperties.supportsDescriptors = !!supportsDescriptors;

	module.exports = defineProperties;


/***/ }),
/* 112 */
/***/ (function(module, exports, __webpack_require__) {

	/**
	 * Copyright (c) 2013-present, Facebook, Inc.
	 *
	 * This source code is licensed under the MIT license found in the
	 * LICENSE file in the root directory of this source tree.
	 *
	 */

	'use strict';

	var _prodInvariant = __webpack_require__(13);

	var EventPluginRegistry = __webpack_require__(144);
	var EventPluginUtils = __webpack_require__(216);
	var ReactErrorUtils = __webpack_require__(220);

	var accumulateInto = __webpack_require__(352);
	var forEachAccumulated = __webpack_require__(353);
	var invariant = __webpack_require__(7);

	/**
	 * Internal store for event listeners
	 */
	var listenerBank = {};

	/**
	 * Internal queue of events that have accumulated their dispatches and are
	 * waiting to have their dispatches executed.
	 */
	var eventQueue = null;

	/**
	 * Dispatches an event and releases it back into the pool, unless persistent.
	 *
	 * @param {?object} event Synthetic event to be dispatched.
	 * @param {boolean} simulated If the event is simulated (changes exn behavior)
	 * @private
	 */
	var executeDispatchesAndRelease = function (event, simulated) {
	  if (event) {
	    EventPluginUtils.executeDispatchesInOrder(event, simulated);

	    if (!event.isPersistent()) {
	      event.constructor.release(event);
	    }
	  }
	};
	var executeDispatchesAndReleaseSimulated = function (e) {
	  return executeDispatchesAndRelease(e, true);
	};
	var executeDispatchesAndReleaseTopLevel = function (e) {
	  return executeDispatchesAndRelease(e, false);
	};

	var getDictionaryKey = function (inst) {
	  // Prevents V8 performance issue:
	  // https://github.com/facebook/react/pull/7232
	  return '.' + inst._rootNodeID;
	};

	function isInteractive(tag) {
	  return tag === 'button' || tag === 'input' || tag === 'select' || tag === 'textarea';
	}

	function shouldPreventMouseEvent(name, type, props) {
	  switch (name) {
	    case 'onClick':
	    case 'onClickCapture':
	    case 'onDoubleClick':
	    case 'onDoubleClickCapture':
	    case 'onMouseDown':
	    case 'onMouseDownCapture':
	    case 'onMouseMove':
	    case 'onMouseMoveCapture':
	    case 'onMouseUp':
	    case 'onMouseUpCapture':
	      return !!(props.disabled && isInteractive(type));
	    default:
	      return false;
	  }
	}

	/**
	 * This is a unified interface for event plugins to be installed and configured.
	 *
	 * Event plugins can implement the following properties:
	 *
	 *   `extractEvents` {function(string, DOMEventTarget, string, object): *}
	 *     Required. When a top-level event is fired, this method is expected to
	 *     extract synthetic events that will in turn be queued and dispatched.
	 *
	 *   `eventTypes` {object}
	 *     Optional, plugins that fire events must publish a mapping of registration
	 *     names that are used to register listeners. Values of this mapping must
	 *     be objects that contain `registrationName` or `phasedRegistrationNames`.
	 *
	 *   `executeDispatch` {function(object, function, string)}
	 *     Optional, allows plugins to override how an event gets dispatched. By
	 *     default, the listener is simply invoked.
	 *
	 * Each plugin that is injected into `EventsPluginHub` is immediately operable.
	 *
	 * @public
	 */
	var EventPluginHub = {
	  /**
	   * Methods for injecting dependencies.
	   */
	  injection: {
	    /**
	     * @param {array} InjectedEventPluginOrder
	     * @public
	     */
	    injectEventPluginOrder: EventPluginRegistry.injectEventPluginOrder,

	    /**
	     * @param {object} injectedNamesToPlugins Map from names to plugin modules.
	     */
	    injectEventPluginsByName: EventPluginRegistry.injectEventPluginsByName
	  },

	  /**
	   * Stores `listener` at `listenerBank[registrationName][key]`. Is idempotent.
	   *
	   * @param {object} inst The instance, which is the source of events.
	   * @param {string} registrationName Name of listener (e.g. `onClick`).
	   * @param {function} listener The callback to store.
	   */
	  putListener: function (inst, registrationName, listener) {
	    !(typeof listener === 'function') ? (undefined) !== 'production' ? invariant(false, 'Expected %s listener to be a function, instead got type %s', registrationName, typeof listener) : _prodInvariant('94', registrationName, typeof listener) : void 0;

	    var key = getDictionaryKey(inst);
	    var bankForRegistrationName = listenerBank[registrationName] || (listenerBank[registrationName] = {});
	    bankForRegistrationName[key] = listener;

	    var PluginModule = EventPluginRegistry.registrationNameModules[registrationName];
	    if (PluginModule && PluginModule.didPutListener) {
	      PluginModule.didPutListener(inst, registrationName, listener);
	    }
	  },

	  /**
	   * @param {object} inst The instance, which is the source of events.
	   * @param {string} registrationName Name of listener (e.g. `onClick`).
	   * @return {?function} The stored callback.
	   */
	  getListener: function (inst, registrationName) {
	    // TODO: shouldPreventMouseEvent is DOM-specific and definitely should not
	    // live here; needs to be moved to a better place soon
	    var bankForRegistrationName = listenerBank[registrationName];
	    if (shouldPreventMouseEvent(registrationName, inst._currentElement.type, inst._currentElement.props)) {
	      return null;
	    }
	    var key = getDictionaryKey(inst);
	    return bankForRegistrationName && bankForRegistrationName[key];
	  },

	  /**
	   * Deletes a listener from the registration bank.
	   *
	   * @param {object} inst The instance, which is the source of events.
	   * @param {string} registrationName Name of listener (e.g. `onClick`).
	   */
	  deleteListener: function (inst, registrationName) {
	    var PluginModule = EventPluginRegistry.registrationNameModules[registrationName];
	    if (PluginModule && PluginModule.willDeleteListener) {
	      PluginModule.willDeleteListener(inst, registrationName);
	    }

	    var bankForRegistrationName = listenerBank[registrationName];
	    // TODO: This should never be null -- when is it?
	    if (bankForRegistrationName) {
	      var key = getDictionaryKey(inst);
	      delete bankForRegistrationName[key];
	    }
	  },

	  /**
	   * Deletes all listeners for the DOM element with the supplied ID.
	   *
	   * @param {object} inst The instance, which is the source of events.
	   */
	  deleteAllListeners: function (inst) {
	    var key = getDictionaryKey(inst);
	    for (var registrationName in listenerBank) {
	      if (!listenerBank.hasOwnProperty(registrationName)) {
	        continue;
	      }

	      if (!listenerBank[registrationName][key]) {
	        continue;
	      }

	      var PluginModule = EventPluginRegistry.registrationNameModules[registrationName];
	      if (PluginModule && PluginModule.willDeleteListener) {
	        PluginModule.willDeleteListener(inst, registrationName);
	      }

	      delete listenerBank[registrationName][key];
	    }
	  },

	  /**
	   * Allows registered plugins an opportunity to extract events from top-level
	   * native browser events.
	   *
	   * @return {*} An accumulation of synthetic events.
	   * @internal
	   */
	  extractEvents: function (topLevelType, targetInst, nativeEvent, nativeEventTarget) {
	    var events;
	    var plugins = EventPluginRegistry.plugins;
	    for (var i = 0; i < plugins.length; i++) {
	      // Not every plugin in the ordering may be loaded at runtime.
	      var possiblePlugin = plugins[i];
	      if (possiblePlugin) {
	        var extractedEvents = possiblePlugin.extractEvents(topLevelType, targetInst, nativeEvent, nativeEventTarget);
	        if (extractedEvents) {
	          events = accumulateInto(events, extractedEvents);
	        }
	      }
	    }
	    return events;
	  },

	  /**
	   * Enqueues a synthetic event that should be dispatched when
	   * `processEventQueue` is invoked.
	   *
	   * @param {*} events An accumulation of synthetic events.
	   * @internal
	   */
	  enqueueEvents: function (events) {
	    if (events) {
	      eventQueue = accumulateInto(eventQueue, events);
	    }
	  },

	  /**
	   * Dispatches all synthetic events on the event queue.
	   *
	   * @internal
	   */
	  processEventQueue: function (simulated) {
	    // Set `eventQueue` to null before processing it so that we can tell if more
	    // events get enqueued while processing.
	    var processingEventQueue = eventQueue;
	    eventQueue = null;
	    if (simulated) {
	      forEachAccumulated(processingEventQueue, executeDispatchesAndReleaseSimulated);
	    } else {
	      forEachAccumulated(processingEventQueue, executeDispatchesAndReleaseTopLevel);
	    }
	    !!eventQueue ? (undefined) !== 'production' ? invariant(false, 'processEventQueue(): Additional events were enqueued while processing an event queue. Support for this has not yet been implemented.') : _prodInvariant('95') : void 0;
	    // This would be a good time to rethrow if any of the event handlers threw.
	    ReactErrorUtils.rethrowCaughtError();
	  },

	  /**
	   * These are needed for tests only. Do not use!
	   */
	  __purge: function () {
	    listenerBank = {};
	  },

	  __getListenerBank: function () {
	    return listenerBank;
	  }
	};

	module.exports = EventPluginHub;

/***/ }),
/* 113 */
/***/ (function(module, exports, __webpack_require__) {

	/**
	 * Copyright (c) 2013-present, Facebook, Inc.
	 *
	 * This source code is licensed under the MIT license found in the
	 * LICENSE file in the root directory of this source tree.
	 *
	 */

	'use strict';

	var EventPluginHub = __webpack_require__(112);
	var EventPluginUtils = __webpack_require__(216);

	var accumulateInto = __webpack_require__(352);
	var forEachAccumulated = __webpack_require__(353);
	var warning = __webpack_require__(8);

	var getListener = EventPluginHub.getListener;

	/**
	 * Some event types have a notion of different registration names for different
	 * "phases" of propagation. This finds listeners by a given phase.
	 */
	function listenerAtPhase(inst, event, propagationPhase) {
	  var registrationName = event.dispatchConfig.phasedRegistrationNames[propagationPhase];
	  return getListener(inst, registrationName);
	}

	/**
	 * Tags a `SyntheticEvent` with dispatched listeners. Creating this function
	 * here, allows us to not have to bind or create functions for each event.
	 * Mutating the event's members allows us to not have to create a wrapping
	 * "dispatch" object that pairs the event with the listener.
	 */
	function accumulateDirectionalDispatches(inst, phase, event) {
	  if ((undefined) !== 'production') {
	    (undefined) !== 'production' ? warning(inst, 'Dispatching inst must not be null') : void 0;
	  }
	  var listener = listenerAtPhase(inst, event, phase);
	  if (listener) {
	    event._dispatchListeners = accumulateInto(event._dispatchListeners, listener);
	    event._dispatchInstances = accumulateInto(event._dispatchInstances, inst);
	  }
	}

	/**
	 * Collect dispatches (must be entirely collected before dispatching - see unit
	 * tests). Lazily allocate the array to conserve memory.  We must loop through
	 * each event and perform the traversal for each one. We cannot perform a
	 * single traversal for the entire collection of events because each event may
	 * have a different target.
	 */
	function accumulateTwoPhaseDispatchesSingle(event) {
	  if (event && event.dispatchConfig.phasedRegistrationNames) {
	    EventPluginUtils.traverseTwoPhase(event._targetInst, accumulateDirectionalDispatches, event);
	  }
	}

	/**
	 * Same as `accumulateTwoPhaseDispatchesSingle`, but skips over the targetID.
	 */
	function accumulateTwoPhaseDispatchesSingleSkipTarget(event) {
	  if (event && event.dispatchConfig.phasedRegistrationNames) {
	    var targetInst = event._targetInst;
	    var parentInst = targetInst ? EventPluginUtils.getParentInstance(targetInst) : null;
	    EventPluginUtils.traverseTwoPhase(parentInst, accumulateDirectionalDispatches, event);
	  }
	}

	/**
	 * Accumulates without regard to direction, does not look for phased
	 * registration names. Same as `accumulateDirectDispatchesSingle` but without
	 * requiring that the `dispatchMarker` be the same as the dispatched ID.
	 */
	function accumulateDispatches(inst, ignoredDirection, event) {
	  if (event && event.dispatchConfig.registrationName) {
	    var registrationName = event.dispatchConfig.registrationName;
	    var listener = getListener(inst, registrationName);
	    if (listener) {
	      event._dispatchListeners = accumulateInto(event._dispatchListeners, listener);
	      event._dispatchInstances = accumulateInto(event._dispatchInstances, inst);
	    }
	  }
	}

	/**
	 * Accumulates dispatches on an `SyntheticEvent`, but only for the
	 * `dispatchMarker`.
	 * @param {SyntheticEvent} event
	 */
	function accumulateDirectDispatchesSingle(event) {
	  if (event && event.dispatchConfig.registrationName) {
	    accumulateDispatches(event._targetInst, null, event);
	  }
	}

	function accumulateTwoPhaseDispatches(events) {
	  forEachAccumulated(events, accumulateTwoPhaseDispatchesSingle);
	}

	function accumulateTwoPhaseDispatchesSkipTarget(events) {
	  forEachAccumulated(events, accumulateTwoPhaseDispatchesSingleSkipTarget);
	}

	function accumulateEnterLeaveDispatches(leave, enter, from, to) {
	  EventPluginUtils.traverseEnterLeave(from, to, accumulateDispatches, leave, enter);
	}

	function accumulateDirectDispatches(events) {
	  forEachAccumulated(events, accumulateDirectDispatchesSingle);
	}

	/**
	 * A small set of propagation patterns, each of which will accept a small amount
	 * of information, and generate a set of "dispatch ready event objects" - which
	 * are sets of events that have already been annotated with a set of dispatched
	 * listener functions/ids. The API is designed this way to discourage these
	 * propagation strategies from actually executing the dispatches, since we
	 * always want to collect the entire set of dispatches before executing event a
	 * single one.
	 *
	 * @constructor EventPropagators
	 */
	var EventPropagators = {
	  accumulateTwoPhaseDispatches: accumulateTwoPhaseDispatches,
	  accumulateTwoPhaseDispatchesSkipTarget: accumulateTwoPhaseDispatchesSkipTarget,
	  accumulateDirectDispatches: accumulateDirectDispatches,
	  accumulateEnterLeaveDispatches: accumulateEnterLeaveDispatches
	};

	module.exports = EventPropagators;

/***/ }),
/* 114 */
/***/ (function(module, exports) {

	/**
	 * Copyright (c) 2013-present, Facebook, Inc.
	 *
	 * This source code is licensed under the MIT license found in the
	 * LICENSE file in the root directory of this source tree.
	 *
	 */

	'use strict';

	/**
	 * `ReactInstanceMap` maintains a mapping from a public facing stateful
	 * instance (key) and the internal representation (value). This allows public
	 * methods to accept the user facing instance as an argument and map them back
	 * to internal methods.
	 */

	// TODO: Replace this with ES6: var ReactInstanceMap = new Map();

	var ReactInstanceMap = {
	  /**
	   * This API should be called `delete` but we'd have to make sure to always
	   * transform these to strings for IE support. When this transform is fully
	   * supported we can rename it.
	   */
	  remove: function (key) {
	    key._reactInternalInstance = undefined;
	  },

	  get: function (key) {
	    return key._reactInternalInstance;
	  },

	  has: function (key) {
	    return key._reactInternalInstance !== undefined;
	  },

	  set: function (key, value) {
	    key._reactInternalInstance = value;
	  }
	};

	module.exports = ReactInstanceMap;

/***/ }),
/* 115 */
/***/ (function(module, exports, __webpack_require__) {

	/**
	 * Copyright (c) 2013-present, Facebook, Inc.
	 *
	 * This source code is licensed under the MIT license found in the
	 * LICENSE file in the root directory of this source tree.
	 *
	 */

	'use strict';

	var SyntheticEvent = __webpack_require__(60);

	var getEventTarget = __webpack_require__(225);

	/**
	 * @interface UIEvent
	 * @see http://www.w3.org/TR/DOM-Level-3-Events/
	 */
	var UIEventInterface = {
	  view: function (event) {
	    if (event.view) {
	      return event.view;
	    }

	    var target = getEventTarget(event);
	    if (target.window === target) {
	      // target is a window object
	      return target;
	    }

	    var doc = target.ownerDocument;
	    // TODO: Figure out why `ownerDocument` is sometimes undefined in IE8.
	    if (doc) {
	      return doc.defaultView || doc.parentWindow;
	    } else {
	      return window;
	    }
	  },
	  detail: function (event) {
	    return event.detail || 0;
	  }
	};

	/**
	 * @param {object} dispatchConfig Configuration used to dispatch this event.
	 * @param {string} dispatchMarker Marker identifying the event target.
	 * @param {object} nativeEvent Native browser event.
	 * @extends {SyntheticEvent}
	 */
	function SyntheticUIEvent(dispatchConfig, dispatchMarker, nativeEvent, nativeEventTarget) {
	  return SyntheticEvent.call(this, dispatchConfig, dispatchMarker, nativeEvent, nativeEventTarget);
	}

	SyntheticEvent.augmentClass(SyntheticUIEvent, UIEventInterface);

	module.exports = SyntheticUIEvent;

/***/ }),
/* 116 */
/***/ (function(module, exports, __webpack_require__) {

	/**
	 * Autogenerated by Avro
	 * 
	 * DO NOT EDIT DIRECTLY
	 */


	/**
	* @constructor
	* @memberof base
	*/
	var Tender = function() {
	  this._class_ = Tender;
	  this.id = undefined;
	  this.editable = undefined;
	  this.labelKey = undefined;
	  this.label = undefined;
	  this.opensCashDrawer = undefined;
	  this.supportsTipping = undefined;
	  this.enabled = undefined;
	  this.visible = undefined;
	  this.instructions = undefined;
	};


	/**
	* Set the field value
	* Unique identifier
	*
	* @memberof base.Tender
	* @param {String} id 
	*/
	Tender.prototype.setId = function(id) {
	  this.id = id;
	};

	/**
	* Get the field value
	* Unique identifier
	* @memberof base.Tender
	* @return {String} 
	*/
	Tender.prototype.getId = function() {
	  return this.id;
	};

	/**
	* Set the field value
	* If this merchant tender is editable
	*
	* @memberof base.Tender
	* @param {Boolean} editable 
	*/
	Tender.prototype.setEditable = function(editable) {
	  this.editable = editable;
	};

	/**
	* Get the field value
	* If this merchant tender is editable
	* @memberof base.Tender
	* @return {Boolean} 
	*/
	Tender.prototype.getEditable = function() {
	  return this.editable;
	};

	/**
	* Set the field value
	* Label Key
	*
	* @memberof base.Tender
	* @param {String} labelKey 
	*/
	Tender.prototype.setLabelKey = function(labelKey) {
	  this.labelKey = labelKey;
	};

	/**
	* Get the field value
	* Label Key
	* @memberof base.Tender
	* @return {String} 
	*/
	Tender.prototype.getLabelKey = function() {
	  return this.labelKey;
	};

	/**
	* Set the field value
	* Label Key
	*
	* @memberof base.Tender
	* @param {String} label 
	*/
	Tender.prototype.setLabel = function(label) {
	  this.label = label;
	};

	/**
	* Get the field value
	* Label Key
	* @memberof base.Tender
	* @return {String} 
	*/
	Tender.prototype.getLabel = function() {
	  return this.label;
	};

	/**
	* Set the field value
	* If this tender opens the cash drawer
	*
	* @memberof base.Tender
	* @param {Boolean} opensCashDrawer 
	*/
	Tender.prototype.setOpensCashDrawer = function(opensCashDrawer) {
	  this.opensCashDrawer = opensCashDrawer;
	};

	/**
	* Get the field value
	* If this tender opens the cash drawer
	* @memberof base.Tender
	* @return {Boolean} 
	*/
	Tender.prototype.getOpensCashDrawer = function() {
	  return this.opensCashDrawer;
	};

	/**
	* Set the field value
	* Allow tipping on payment from tender
	*
	* @memberof base.Tender
	* @param {Boolean} supportsTipping 
	*/
	Tender.prototype.setSupportsTipping = function(supportsTipping) {
	  this.supportsTipping = supportsTipping;
	};

	/**
	* Get the field value
	* Allow tipping on payment from tender
	* @memberof base.Tender
	* @return {Boolean} 
	*/
	Tender.prototype.getSupportsTipping = function() {
	  return this.supportsTipping;
	};

	/**
	* Set the field value
	* If this merchant tender is enabled
	*
	* @memberof base.Tender
	* @param {Boolean} enabled 
	*/
	Tender.prototype.setEnabled = function(enabled) {
	  this.enabled = enabled;
	};

	/**
	* Get the field value
	* If this merchant tender is enabled
	* @memberof base.Tender
	* @return {Boolean} 
	*/
	Tender.prototype.getEnabled = function() {
	  return this.enabled;
	};

	/**
	* Set the field value
	* If this merchant tender is visible
	*
	* @memberof base.Tender
	* @param {Boolean} visible 
	*/
	Tender.prototype.setVisible = function(visible) {
	  this.visible = visible;
	};

	/**
	* Get the field value
	* If this merchant tender is visible
	* @memberof base.Tender
	* @return {Boolean} 
	*/
	Tender.prototype.getVisible = function() {
	  return this.visible;
	};

	/**
	* Set the field value
	* Label Key
	*
	* @memberof base.Tender
	* @param {String} instructions 
	*/
	Tender.prototype.setInstructions = function(instructions) {
	  this.instructions = instructions;
	};

	/**
	* Get the field value
	* Label Key
	* @memberof base.Tender
	* @return {String} 
	*/
	Tender.prototype.getInstructions = function() {
	  return this.instructions;
	};

	/**
	* @memberof base.Tender
	* @private
	*/
	Tender.prototype.getMetaInfo = function(fieldName) {
	  var curclass = this._class_;
	  do {
	    var fieldMetaInfo = curclass._meta_.fields[fieldName];
	    if(fieldMetaInfo) {
	      return fieldMetaInfo;
	    }
	    if(curclass._meta_._superMeta_) {
	      curclass = curclass._meta_._superMeta_._class_;
	    } else {
	      curclass = null;
	    }
	  } while(curclass);
	  return null;
	};

	Tender.prototype.toString = function() {
	  return JSON.stringify(this);
	};

	Tender._meta_ =  {fields:  {}};
	Tender._meta_._class_ =  Tender;
	Tender._meta_.fields["id"] = {};
	Tender._meta_.fields["id"].type = String;
	Tender._meta_.fields["editable"] = {};
	Tender._meta_.fields["editable"].type = Boolean;
	Tender._meta_.fields["labelKey"] = {};
	Tender._meta_.fields["labelKey"].type = String;
	Tender._meta_.fields["label"] = {};
	Tender._meta_.fields["label"].type = String;
	Tender._meta_.fields["opensCashDrawer"] = {};
	Tender._meta_.fields["opensCashDrawer"].type = Boolean;
	Tender._meta_.fields["supportsTipping"] = {};
	Tender._meta_.fields["supportsTipping"].type = Boolean;
	Tender._meta_.fields["enabled"] = {};
	Tender._meta_.fields["enabled"].type = Boolean;
	Tender._meta_.fields["visible"] = {};
	Tender._meta_.fields["visible"].type = Boolean;
	Tender._meta_.fields["instructions"] = {};
	Tender._meta_.fields["instructions"].type = String;

	//
	// Expose the module.
	//
	if (true) {
	module.exports = Tender;
	}



/***/ }),
/* 117 */
/***/ (function(module, exports, __webpack_require__) {

	/**
	 * Autogenerated by Avro
	 * 
	 * DO NOT EDIT DIRECTLY
	 */

	var inventory_TaxType = __webpack_require__(404);
	var base_Reference = __webpack_require__(5);

	/**
	* @constructor
	* @memberof inventory
	*/
	var TaxRate = function() {
	  this._class_ = TaxRate;
	  this.id = undefined;
	  this.name = undefined;
	  this.taxType = undefined;
	  this.rate = undefined;
	  this.isDefault = undefined;
	  this.items = undefined;
	  this.taxAmount = undefined;
	  this.deletedTime = undefined;
	  this.modifiedTime = undefined;
	};


	/**
	* Set the field value
	* @memberof inventory.TaxRate
	* @param {String} id 
	*/
	TaxRate.prototype.setId = function(id) {
	  this.id = id;
	};

	/**
	* Get the field value
	* @memberof inventory.TaxRate
	* @return {String} 
	*/
	TaxRate.prototype.getId = function() {
	  return this.id;
	};

	/**
	* Set the field value
	* @memberof inventory.TaxRate
	* @param {String} name 
	*/
	TaxRate.prototype.setName = function(name) {
	  this.name = name;
	};

	/**
	* Get the field value
	* @memberof inventory.TaxRate
	* @return {String} 
	*/
	TaxRate.prototype.getName = function() {
	  return this.name;
	};

	/**
	* Set the field value
	* to support Argentina's tax type
	*
	* @memberof inventory.TaxRate
	* @param {Null|inventory.TaxType} taxType 
	*/
	TaxRate.prototype.setTaxType = function(taxType) {
	  this.taxType = taxType;
	};

	/**
	* Get the field value
	* to support Argentina's tax type
	* @memberof inventory.TaxRate
	* @return {Null|inventory.TaxType} 
	*/
	TaxRate.prototype.getTaxType = function() {
	  return this.taxType;
	};

	/**
	* Set the field value
	* For percentage based discounts like sales tax
	*
	* @memberof inventory.TaxRate
	* @param {Number} rate must be a long integer
	*/
	TaxRate.prototype.setRate = function(rate) {
	  this.rate = rate;
	};

	/**
	* Get the field value
	* For percentage based discounts like sales tax
	* @memberof inventory.TaxRate
	* @return {Number} must be a long integer
	*/
	TaxRate.prototype.getRate = function() {
	  return this.rate;
	};

	/**
	* Set the field value
	* @memberof inventory.TaxRate
	* @param {Null|Boolean} isDefault 
	*/
	TaxRate.prototype.setIsDefault = function(isDefault) {
	  this.isDefault = isDefault;
	};

	/**
	* Get the field value
	* @memberof inventory.TaxRate
	* @return {Null|Boolean} 
	*/
	TaxRate.prototype.getIsDefault = function() {
	  return this.isDefault;
	};

	/**
	* Set the field value
	* Items associated with this tax rate
	*
	* @memberof inventory.TaxRate
	* @param {Null|Array.<base.Reference>} items An array of 
	*/
	TaxRate.prototype.setItems = function(items) {
	  this.items = items;
	};

	/**
	* Get the field value
	* Items associated with this tax rate
	* @memberof inventory.TaxRate
	* @return {Null|Array.<base.Reference>} An array of 
	*/
	TaxRate.prototype.getItems = function() {
	  return this.items;
	};

	/**
	* Set the field value
	* For a flat tax like recycling redemption fee, expressed as number of cents
	*
	* @memberof inventory.TaxRate
	* @param {Null|Number} taxAmount must be a long integer
	*/
	TaxRate.prototype.setTaxAmount = function(taxAmount) {
	  this.taxAmount = taxAmount;
	};

	/**
	* Get the field value
	* For a flat tax like recycling redemption fee, expressed as number of cents
	* @memberof inventory.TaxRate
	* @return {Null|Number} must be a long integer
	*/
	TaxRate.prototype.getTaxAmount = function() {
	  return this.taxAmount;
	};

	/**
	* Set the field value
	* Timestamp when tax rate was last deleted
	*
	* @memberof inventory.TaxRate
	* @param {Null|Number} deletedTime must be a long integer
	*/
	TaxRate.prototype.setDeletedTime = function(deletedTime) {
	  this.deletedTime = deletedTime;
	};

	/**
	* Get the field value
	* Timestamp when tax rate was last deleted
	* @memberof inventory.TaxRate
	* @return {Null|Number} must be a long integer
	*/
	TaxRate.prototype.getDeletedTime = function() {
	  return this.deletedTime;
	};

	/**
	* Set the field value
	* Timestamp when tax rate was last modified
	*
	* @memberof inventory.TaxRate
	* @param {Null|Number} modifiedTime must be a long integer
	*/
	TaxRate.prototype.setModifiedTime = function(modifiedTime) {
	  this.modifiedTime = modifiedTime;
	};

	/**
	* Get the field value
	* Timestamp when tax rate was last modified
	* @memberof inventory.TaxRate
	* @return {Null|Number} must be a long integer
	*/
	TaxRate.prototype.getModifiedTime = function() {
	  return this.modifiedTime;
	};

	/**
	* @memberof inventory.TaxRate
	* @private
	*/
	TaxRate.prototype.getMetaInfo = function(fieldName) {
	  var curclass = this._class_;
	  do {
	    var fieldMetaInfo = curclass._meta_.fields[fieldName];
	    if(fieldMetaInfo) {
	      return fieldMetaInfo;
	    }
	    if(curclass._meta_._superMeta_) {
	      curclass = curclass._meta_._superMeta_._class_;
	    } else {
	      curclass = null;
	    }
	  } while(curclass);
	  return null;
	};

	TaxRate.prototype.toString = function() {
	  return JSON.stringify(this);
	};

	TaxRate._meta_ =  {fields:  {}};
	TaxRate._meta_._class_ =  TaxRate;
	TaxRate._meta_.fields["id"] = {};
	TaxRate._meta_.fields["id"].type = String;
	TaxRate._meta_.fields["name"] = {};
	TaxRate._meta_.fields["name"].type = String;
	TaxRate._meta_.fields["taxType"] = {};
	TaxRate._meta_.fields["taxType"].type = inventory_TaxType;
	TaxRate._meta_.fields["rate"] = {};
	TaxRate._meta_.fields["rate"].type = Number;
	TaxRate._meta_.fields["isDefault"] = {};
	TaxRate._meta_.fields["isDefault"].type = Boolean;
	TaxRate._meta_.fields["items"] = {};
	TaxRate._meta_.fields["items"].type = Array;
	TaxRate._meta_.fields["items"].elementType = base_Reference;
	TaxRate._meta_.fields["taxAmount"] = {};
	TaxRate._meta_.fields["taxAmount"].type = Number;
	TaxRate._meta_.fields["deletedTime"] = {};
	TaxRate._meta_.fields["deletedTime"].type = Number;
	TaxRate._meta_.fields["modifiedTime"] = {};
	TaxRate._meta_.fields["modifiedTime"].type = Number;

	//
	// Expose the module.
	//
	if (true) {
	module.exports = TaxRate;
	}



/***/ }),
/* 118 */
/***/ (function(module, exports, __webpack_require__) {

	/**
	 * Autogenerated by Avro
	 * 
	 * DO NOT EDIT DIRECTLY
	 */


	/**
	* @constructor
	* @memberof merchant
	*/
	var TipSuggestion = function() {
	  this._class_ = TipSuggestion;
	  this.id = undefined;
	  this.name = undefined;
	  this.percentage = undefined;
	  this.amount = undefined;
	  this.isEnabled = undefined;
	};


	/**
	* Set the field value
	* @memberof merchant.TipSuggestion
	* @param {String} id 
	*/
	TipSuggestion.prototype.setId = function(id) {
	  this.id = id;
	};

	/**
	* Get the field value
	* @memberof merchant.TipSuggestion
	* @return {String} 
	*/
	TipSuggestion.prototype.getId = function() {
	  return this.id;
	};

	/**
	* Set the field value
	* Name of the tip
	*
	* @memberof merchant.TipSuggestion
	* @param {String} name 
	*/
	TipSuggestion.prototype.setName = function(name) {
	  this.name = name;
	};

	/**
	* Get the field value
	* Name of the tip
	* @memberof merchant.TipSuggestion
	* @return {String} 
	*/
	TipSuggestion.prototype.getName = function() {
	  return this.name;
	};

	/**
	* Set the field value
	* Suggested tip percentage
	*
	* @memberof merchant.TipSuggestion
	* @param {Number} percentage must be a long integer
	*/
	TipSuggestion.prototype.setPercentage = function(percentage) {
	  this.percentage = percentage;
	};

	/**
	* Get the field value
	* Suggested tip percentage
	* @memberof merchant.TipSuggestion
	* @return {Number} must be a long integer
	*/
	TipSuggestion.prototype.getPercentage = function() {
	  return this.percentage;
	};

	/**
	* Set the field value
	* Suggested tip amount
	*
	* @memberof merchant.TipSuggestion
	* @param {Number} amount must be a long integer
	*/
	TipSuggestion.prototype.setAmount = function(amount) {
	  this.amount = amount;
	};

	/**
	* Get the field value
	* Suggested tip amount
	* @memberof merchant.TipSuggestion
	* @return {Number} must be a long integer
	*/
	TipSuggestion.prototype.getAmount = function() {
	  return this.amount;
	};

	/**
	* Set the field value
	* @memberof merchant.TipSuggestion
	* @param {Boolean} isEnabled 
	*/
	TipSuggestion.prototype.setIsEnabled = function(isEnabled) {
	  this.isEnabled = isEnabled;
	};

	/**
	* Get the field value
	* @memberof merchant.TipSuggestion
	* @return {Boolean} 
	*/
	TipSuggestion.prototype.getIsEnabled = function() {
	  return this.isEnabled;
	};

	/**
	* @memberof merchant.TipSuggestion
	* @private
	*/
	TipSuggestion.prototype.getMetaInfo = function(fieldName) {
	  var curclass = this._class_;
	  do {
	    var fieldMetaInfo = curclass._meta_.fields[fieldName];
	    if(fieldMetaInfo) {
	      return fieldMetaInfo;
	    }
	    if(curclass._meta_._superMeta_) {
	      curclass = curclass._meta_._superMeta_._class_;
	    } else {
	      curclass = null;
	    }
	  } while(curclass);
	  return null;
	};

	TipSuggestion.prototype.toString = function() {
	  return JSON.stringify(this);
	};

	TipSuggestion._meta_ =  {fields:  {}};
	TipSuggestion._meta_._class_ =  TipSuggestion;
	TipSuggestion._meta_.fields["id"] = {};
	TipSuggestion._meta_.fields["id"].type = String;
	TipSuggestion._meta_.fields["name"] = {};
	TipSuggestion._meta_.fields["name"].type = String;
	TipSuggestion._meta_.fields["percentage"] = {};
	TipSuggestion._meta_.fields["percentage"].type = Number;
	TipSuggestion._meta_.fields["amount"] = {};
	TipSuggestion._meta_.fields["amount"].type = Number;
	TipSuggestion._meta_.fields["isEnabled"] = {};
	TipSuggestion._meta_.fields["isEnabled"].type = Boolean;

	//
	// Expose the module.
	//
	if (true) {
	module.exports = TipSuggestion;
	}



/***/ }),
/* 119 */
/***/ (function(module, exports, __webpack_require__) {

	/**
	 * Autogenerated by Avro
	 * 
	 * DO NOT EDIT DIRECTLY
	 */


	/**
	* @memberof payments
	* @enum {string}
	*/
	var CardEntryType = {
	  SWIPED : "SWIPED",
	  KEYED : "KEYED",
	  VOICE : "VOICE",
	  VAULTED : "VAULTED",
	  OFFLINE_SWIPED : "OFFLINE_SWIPED",
	  OFFLINE_KEYED : "OFFLINE_KEYED",
	  EMV_CONTACT : "EMV_CONTACT",
	  EMV_CONTACTLESS : "EMV_CONTACTLESS",
	  MSD_CONTACTLESS : "MSD_CONTACTLESS",
	  PINPAD_MANUAL_ENTRY : "PINPAD_MANUAL_ENTRY",
	  QR_CODE : "QR_CODE",
	  SCANNED : "SCANNED"
	};


	//
	// Expose the module.
	//
	if (true) {
	module.exports = CardEntryType;
	}



/***/ }),
/* 120 */
/***/ (function(module, exports, __webpack_require__) {

	/**
	 * Autogenerated by Avro
	 * 
	 * DO NOT EDIT DIRECTLY
	 */


	/**
	The expected values of the payment.result and credit.result fields
	* @memberof payments
	* @enum {string}
	*/
	var Result = {
	  SUCCESS : "SUCCESS",
	  FAIL : "FAIL",
	  INITIATED : "INITIATED",
	  VOIDED : "VOIDED",
	  VOIDING : "VOIDING",
	  VOID_FAILED : "VOID_FAILED",
	  AUTH : "AUTH",
	  AUTH_COMPLETED : "AUTH_COMPLETED",
	  DISCOUNT : "DISCOUNT"
	};


	//
	// Expose the module.
	//
	if (true) {
	module.exports = Result;
	}



/***/ }),
/* 121 */
/***/ (function(module, exports, __webpack_require__) {

	/**
	 * Autogenerated by Avro
	 * 
	 * DO NOT EDIT DIRECTLY
	 */


	/**
	* @constructor
	* @memberof payments
	*/
	var ServiceChargeAmount = function() {
	  this._class_ = ServiceChargeAmount;
	  this.id = undefined;
	  this.name = undefined;
	  this.amount = undefined;
	};


	/**
	* Set the field value
	* @memberof payments.ServiceChargeAmount
	* @param {String} id 
	*/
	ServiceChargeAmount.prototype.setId = function(id) {
	  this.id = id;
	};

	/**
	* Get the field value
	* @memberof payments.ServiceChargeAmount
	* @return {String} 
	*/
	ServiceChargeAmount.prototype.getId = function() {
	  return this.id;
	};

	/**
	* Set the field value
	* @memberof payments.ServiceChargeAmount
	* @param {String} name 
	*/
	ServiceChargeAmount.prototype.setName = function(name) {
	  this.name = name;
	};

	/**
	* Get the field value
	* @memberof payments.ServiceChargeAmount
	* @return {String} 
	*/
	ServiceChargeAmount.prototype.getName = function() {
	  return this.name;
	};

	/**
	* Set the field value
	* @memberof payments.ServiceChargeAmount
	* @param {Number} amount must be a long integer
	*/
	ServiceChargeAmount.prototype.setAmount = function(amount) {
	  this.amount = amount;
	};

	/**
	* Get the field value
	* @memberof payments.ServiceChargeAmount
	* @return {Number} must be a long integer
	*/
	ServiceChargeAmount.prototype.getAmount = function() {
	  return this.amount;
	};

	/**
	* @memberof payments.ServiceChargeAmount
	* @private
	*/
	ServiceChargeAmount.prototype.getMetaInfo = function(fieldName) {
	  var curclass = this._class_;
	  do {
	    var fieldMetaInfo = curclass._meta_.fields[fieldName];
	    if(fieldMetaInfo) {
	      return fieldMetaInfo;
	    }
	    if(curclass._meta_._superMeta_) {
	      curclass = curclass._meta_._superMeta_._class_;
	    } else {
	      curclass = null;
	    }
	  } while(curclass);
	  return null;
	};

	ServiceChargeAmount.prototype.toString = function() {
	  return JSON.stringify(this);
	};

	ServiceChargeAmount._meta_ =  {fields:  {}};
	ServiceChargeAmount._meta_._class_ =  ServiceChargeAmount;
	ServiceChargeAmount._meta_.fields["id"] = {};
	ServiceChargeAmount._meta_.fields["id"].type = String;
	ServiceChargeAmount._meta_.fields["name"] = {};
	ServiceChargeAmount._meta_.fields["name"].type = String;
	ServiceChargeAmount._meta_.fields["amount"] = {};
	ServiceChargeAmount._meta_.fields["amount"].type = Number;

	//
	// Expose the module.
	//
	if (true) {
	module.exports = ServiceChargeAmount;
	}



/***/ }),
/* 122 */
/***/ (function(module, exports, __webpack_require__) {

	/**
	 * Autogenerated by Avro
	 * 
	 * DO NOT EDIT DIRECTLY
	 */

	var base_Reference = __webpack_require__(5);

	/**
	* @constructor
	* @memberof payments
	*/
	var TaxableAmountRate = function() {
	  this._class_ = TaxableAmountRate;
	  this.id = undefined;
	  this.name = undefined;
	  this.taxableAmount = undefined;
	  this.rate = undefined;
	  this.isVat = undefined;
	  this.taxAmount = undefined;
	  this.transactionRef = undefined;
	};


	/**
	* Set the field value
	* Tax rate id.
	*
	* @memberof payments.TaxableAmountRate
	* @param {String} id 
	*/
	TaxableAmountRate.prototype.setId = function(id) {
	  this.id = id;
	};

	/**
	* Get the field value
	* Tax rate id.
	* @memberof payments.TaxableAmountRate
	* @return {String} 
	*/
	TaxableAmountRate.prototype.getId = function() {
	  return this.id;
	};

	/**
	* Set the field value
	* Tax rate name. This field is optional.
	*
	* @memberof payments.TaxableAmountRate
	* @param {String} name 
	*/
	TaxableAmountRate.prototype.setName = function(name) {
	  this.name = name;
	};

	/**
	* Get the field value
	* Tax rate name. This field is optional.
	* @memberof payments.TaxableAmountRate
	* @return {String} 
	*/
	TaxableAmountRate.prototype.getName = function() {
	  return this.name;
	};

	/**
	* Set the field value
	* The sub-total of line items that the tax was based on. For VAT, this amount includes tax. For all others, this amount does not include tax.
	*
	* @memberof payments.TaxableAmountRate
	* @param {Number} taxableAmount must be a long integer
	*/
	TaxableAmountRate.prototype.setTaxableAmount = function(taxableAmount) {
	  this.taxableAmount = taxableAmount;
	};

	/**
	* Get the field value
	* The sub-total of line items that the tax was based on. For VAT, this amount includes tax. For all others, this amount does not include tax.
	* @memberof payments.TaxableAmountRate
	* @return {Number} must be a long integer
	*/
	TaxableAmountRate.prototype.getTaxableAmount = function() {
	  return this.taxableAmount;
	};

	/**
	* Set the field value
	* The tax rate. 100% = 1e7.
	*
	* @memberof payments.TaxableAmountRate
	* @param {Number} rate must be a long integer
	*/
	TaxableAmountRate.prototype.setRate = function(rate) {
	  this.rate = rate;
	};

	/**
	* Get the field value
	* The tax rate. 100% = 1e7.
	* @memberof payments.TaxableAmountRate
	* @return {Number} must be a long integer
	*/
	TaxableAmountRate.prototype.getRate = function() {
	  return this.rate;
	};

	/**
	* Set the field value
	* Whether the taxable amount includes tax.
	*
	* @memberof payments.TaxableAmountRate
	* @param {Boolean} isVat 
	*/
	TaxableAmountRate.prototype.setIsVat = function(isVat) {
	  this.isVat = isVat;
	};

	/**
	* Get the field value
	* Whether the taxable amount includes tax.
	* @memberof payments.TaxableAmountRate
	* @return {Boolean} 
	*/
	TaxableAmountRate.prototype.getIsVat = function() {
	  return this.isVat;
	};

	/**
	* Set the field value
	* The amount of tax collected. In cases where there are multiple payments for an order then it may be necessary to add an extra cent of tax to the last payment.
	*
	* @memberof payments.TaxableAmountRate
	* @param {Number} taxAmount must be a long integer
	*/
	TaxableAmountRate.prototype.setTaxAmount = function(taxAmount) {
	  this.taxAmount = taxAmount;
	};

	/**
	* Get the field value
	* The amount of tax collected. In cases where there are multiple payments for an order then it may be necessary to add an extra cent of tax to the last payment.
	* @memberof payments.TaxableAmountRate
	* @return {Number} must be a long integer
	*/
	TaxableAmountRate.prototype.getTaxAmount = function() {
	  return this.taxAmount;
	};

	/**
	* Set the field value
	* The refund with which the tax rate is associated
	*
	* @memberof payments.TaxableAmountRate
	* @param {base.Reference} transactionRef 
	*/
	TaxableAmountRate.prototype.setTransactionRef = function(transactionRef) {
	  this.transactionRef = transactionRef;
	};

	/**
	* Get the field value
	* The refund with which the tax rate is associated
	* @memberof payments.TaxableAmountRate
	* @return {base.Reference} 
	*/
	TaxableAmountRate.prototype.getTransactionRef = function() {
	  return this.transactionRef;
	};

	/**
	* @memberof payments.TaxableAmountRate
	* @private
	*/
	TaxableAmountRate.prototype.getMetaInfo = function(fieldName) {
	  var curclass = this._class_;
	  do {
	    var fieldMetaInfo = curclass._meta_.fields[fieldName];
	    if(fieldMetaInfo) {
	      return fieldMetaInfo;
	    }
	    if(curclass._meta_._superMeta_) {
	      curclass = curclass._meta_._superMeta_._class_;
	    } else {
	      curclass = null;
	    }
	  } while(curclass);
	  return null;
	};

	TaxableAmountRate.prototype.toString = function() {
	  return JSON.stringify(this);
	};

	TaxableAmountRate._meta_ =  {fields:  {}};
	TaxableAmountRate._meta_._class_ =  TaxableAmountRate;
	TaxableAmountRate._meta_.fields["id"] = {};
	TaxableAmountRate._meta_.fields["id"].type = String;
	TaxableAmountRate._meta_.fields["name"] = {};
	TaxableAmountRate._meta_.fields["name"].type = String;
	TaxableAmountRate._meta_.fields["taxableAmount"] = {};
	TaxableAmountRate._meta_.fields["taxableAmount"].type = Number;
	TaxableAmountRate._meta_.fields["rate"] = {};
	TaxableAmountRate._meta_.fields["rate"].type = Number;
	TaxableAmountRate._meta_.fields["isVat"] = {};
	TaxableAmountRate._meta_.fields["isVat"].type = Boolean;
	TaxableAmountRate._meta_.fields["taxAmount"] = {};
	TaxableAmountRate._meta_.fields["taxAmount"].type = Number;
	TaxableAmountRate._meta_.fields["transactionRef"] = {};
	TaxableAmountRate._meta_.fields["transactionRef"].type = base_Reference;

	//
	// Expose the module.
	//
	if (true) {
	module.exports = TaxableAmountRate;
	}



/***/ }),
/* 123 */
/***/ (function(module, exports, __webpack_require__) {

	/**
	 * Autogenerated by Avro
	 * 
	 * DO NOT EDIT DIRECTLY
	 */


	/**
	* @memberof remotemessage
	* @enum {string}
	*/
	var ExternalDeviceState = {
	  IDLE : "IDLE",
	  BUSY : "BUSY",
	  WAITING_FOR_POS : "WAITING_FOR_POS",
	  WAITING_FOR_CUSTOMER : "WAITING_FOR_CUSTOMER",
	  UNKNOWN : "UNKNOWN"
	};


	//
	// Expose the module.
	//
	if (true) {
	module.exports = ExternalDeviceState;
	}



/***/ }),
/* 124 */
/***/ (function(module, exports, __webpack_require__) {

	/**
	 * Autogenerated by Avro
	 * 
	 * DO NOT EDIT DIRECTLY
	 */


	/**
	* @memberof remotepay
	* @enum {string}
	*/
	var ExternalDeviceState = {
	  IDLE : "IDLE",
	  BUSY : "BUSY",
	  WAITING_FOR_POS : "WAITING_FOR_POS",
	  WAITING_FOR_CUSTOMER : "WAITING_FOR_CUSTOMER",
	  UNKNOWN : "UNKNOWN"
	};


	//
	// Expose the module.
	//
	if (true) {
	module.exports = ExternalDeviceState;
	}



/***/ }),
/* 125 */
/***/ (function(module, exports, __webpack_require__) {

	/**
	 * Autogenerated by Avro
	 * 
	 * DO NOT EDIT DIRECTLY
	 */

	var payments_Payment = __webpack_require__(11);
	var remotepay_BaseResponse = __webpack_require__(15);
	var base_Signature = __webpack_require__(86);

	/**
	* @constructor
	* @augments remotepay.BaseResponse
	* @memberof remotepay
	*/
	var PaymentResponse = function() {
	  remotepay_BaseResponse.call(this);
	  this._superClass_ = remotepay_BaseResponse;
	  this._class_ = PaymentResponse;
	  this.payment = undefined;
	  this.isSale = false;
	  this.isPreAuth = false;
	  this.isAuth = false;
	  this.signature = undefined;
	};

	PaymentResponse.prototype = Object.create(remotepay_BaseResponse.prototype);
	PaymentResponse.prototype.constructor = PaymentResponse;

	/**
	* Set the field value
	* The payment from the sale
	*
	* @memberof remotepay.PaymentResponse
	* @param {payments.Payment} payment 
	*/
	PaymentResponse.prototype.setPayment = function(payment) {
	  this.payment = payment;
	};

	/**
	* Get the field value
	* The payment from the sale
	* @memberof remotepay.PaymentResponse
	* @return {payments.Payment} 
	*/
	PaymentResponse.prototype.getPayment = function() {
	  return this.payment;
	};

	/**
	* Set the field value
	* @memberof remotepay.PaymentResponse
	* @param {Boolean} isSale 
	*/
	PaymentResponse.prototype.setIsSale = function(isSale) {
	  this.isSale = isSale;
	};

	/**
	* Get the field value
	* @memberof remotepay.PaymentResponse
	* @return {Boolean} 
	*/
	PaymentResponse.prototype.getIsSale = function() {
	  return this.isSale;
	};

	/**
	* Set the field value
	* @memberof remotepay.PaymentResponse
	* @param {Boolean} isPreAuth 
	*/
	PaymentResponse.prototype.setIsPreAuth = function(isPreAuth) {
	  this.isPreAuth = isPreAuth;
	};

	/**
	* Get the field value
	* @memberof remotepay.PaymentResponse
	* @return {Boolean} 
	*/
	PaymentResponse.prototype.getIsPreAuth = function() {
	  return this.isPreAuth;
	};

	/**
	* Set the field value
	* @memberof remotepay.PaymentResponse
	* @param {Boolean} isAuth 
	*/
	PaymentResponse.prototype.setIsAuth = function(isAuth) {
	  this.isAuth = isAuth;
	};

	/**
	* Get the field value
	* @memberof remotepay.PaymentResponse
	* @return {Boolean} 
	*/
	PaymentResponse.prototype.getIsAuth = function() {
	  return this.isAuth;
	};

	/**
	* Set the field value
	* @memberof remotepay.PaymentResponse
	* @param {base.Signature|Null} signature 
	*/
	PaymentResponse.prototype.setSignature = function(signature) {
	  this.signature = signature;
	};

	/**
	* Get the field value
	* @memberof remotepay.PaymentResponse
	* @return {base.Signature|Null} 
	*/
	PaymentResponse.prototype.getSignature = function() {
	  return this.signature;
	};

	PaymentResponse._meta_ =  {fields:  {}};
	PaymentResponse._meta_._class_ =  PaymentResponse;
	PaymentResponse._meta_._superMeta_ = remotepay_BaseResponse._meta_;
	PaymentResponse._meta_.fields["payment"] = {};
	PaymentResponse._meta_.fields["payment"].type = payments_Payment;
	PaymentResponse._meta_.fields["isSale"] = {};
	PaymentResponse._meta_.fields["isSale"].type = Boolean;
	PaymentResponse._meta_.fields["isPreAuth"] = {};
	PaymentResponse._meta_.fields["isPreAuth"].type = Boolean;
	PaymentResponse._meta_.fields["isAuth"] = {};
	PaymentResponse._meta_.fields["isAuth"].type = Boolean;
	PaymentResponse._meta_.fields["signature"] = {};
	PaymentResponse._meta_.fields["signature"].type = base_Signature;

	//
	// Expose the module.
	//
	if (true) {
	module.exports = PaymentResponse;
	}



/***/ }),
/* 126 */
/***/ (function(module, exports) {

	'use strict';

	Object.defineProperty(exports, "__esModule", {
	    value: true
	});

	var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

	var ImageHelper = function () {
	    function ImageHelper() {
	        _classCallCheck(this, ImageHelper);
	    }

	    _createClass(ImageHelper, [{
	        key: 'getCardTypeImage',
	        value: function getCardTypeImage(cardType) {
	            var image = 'images/tender_default.png';
	            if (cardType === 'VISA') {
	                image = 'images/tender_visa.png';
	            } else if (cardType === 'AMEX') {
	                image = 'images/tender_amex.png';
	            } else if (cardType === 'MC') {
	                image = 'images/tender_mc.png';
	            } else if (cardType === 'DISCOVER') {
	                image = 'images/tender_disc.png';
	            } else if (cardType === 'EBT') {
	                image = 'images/tender_ebt.png';
	            }
	            return image;
	        }
	    }, {
	        key: 'getPrinterTypeImage',
	        value: function getPrinterTypeImage(printerType) {
	            var image = 'images/star.png';
	            if (printerType === 'Mini') {
	                image = 'images/mini_printer.png';
	            }
	            return image;
	        }
	    }, {
	        key: 'getDeviceImage',
	        value: function getDeviceImage(deviceTypeName) {
	            var image = '';
	            if (deviceTypeName === 'BAYLEAF') {
	                image = 'images/flex.png';
	            } else if (deviceTypeName === 'MAPLECUTTER' || 'KNOTTYPINE') {
	                image = 'images/mini.png';
	            } else if (deviceTypeName === 'LEAFCUTTER') {
	                image = 'images/mobile.png';
	            }
	            return image;
	        }
	    }]);

	    return ImageHelper;
	}();

	exports.default = ImageHelper;

/***/ }),
/* 127 */
/***/ (function(module, exports, __webpack_require__) {

	// false -> Array#indexOf
	// true  -> Array#includes
	var toIObject = __webpack_require__(39);
	var toLength = __webpack_require__(17);
	var toAbsoluteIndex = __webpack_require__(79);
	module.exports = function (IS_INCLUDES) {
	  return function ($this, el, fromIndex) {
	    var O = toIObject($this);
	    var length = toLength(O.length);
	    var index = toAbsoluteIndex(fromIndex, length);
	    var value;
	    // Array#includes uses SameValueZero equality algorithm
	    // eslint-disable-next-line no-self-compare
	    if (IS_INCLUDES && el != el) while (length > index) {
	      value = O[index++];
	      // eslint-disable-next-line no-self-compare
	      if (value != value) return true;
	    // Array#indexOf ignores holes, Array#includes - not
	    } else for (;length > index; index++) if (IS_INCLUDES || index in O) {
	      if (O[index] === el) return IS_INCLUDES || index || 0;
	    } return !IS_INCLUDES && -1;
	  };
	};


/***/ }),
/* 128 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';
	var global = __webpack_require__(9);
	var $export = __webpack_require__(1);
	var redefine = __webpack_require__(32);
	var redefineAll = __webpack_require__(77);
	var meta = __webpack_require__(64);
	var forOf = __webpack_require__(72);
	var anInstance = __webpack_require__(71);
	var isObject = __webpack_require__(12);
	var fails = __webpack_require__(10);
	var $iterDetect = __webpack_require__(132);
	var setToStringTag = __webpack_require__(92);
	var inheritIfRequired = __webpack_require__(187);

	module.exports = function (NAME, wrapper, methods, common, IS_MAP, IS_WEAK) {
	  var Base = global[NAME];
	  var C = Base;
	  var ADDER = IS_MAP ? 'set' : 'add';
	  var proto = C && C.prototype;
	  var O = {};
	  var fixMethod = function (KEY) {
	    var fn = proto[KEY];
	    redefine(proto, KEY,
	      KEY == 'delete' ? function (a) {
	        return IS_WEAK && !isObject(a) ? false : fn.call(this, a === 0 ? 0 : a);
	      } : KEY == 'has' ? function has(a) {
	        return IS_WEAK && !isObject(a) ? false : fn.call(this, a === 0 ? 0 : a);
	      } : KEY == 'get' ? function get(a) {
	        return IS_WEAK && !isObject(a) ? undefined : fn.call(this, a === 0 ? 0 : a);
	      } : KEY == 'add' ? function add(a) { fn.call(this, a === 0 ? 0 : a); return this; }
	        : function set(a, b) { fn.call(this, a === 0 ? 0 : a, b); return this; }
	    );
	  };
	  if (typeof C != 'function' || !(IS_WEAK || proto.forEach && !fails(function () {
	    new C().entries().next();
	  }))) {
	    // create collection constructor
	    C = common.getConstructor(wrapper, NAME, IS_MAP, ADDER);
	    redefineAll(C.prototype, methods);
	    meta.NEED = true;
	  } else {
	    var instance = new C();
	    // early implementations not supports chaining
	    var HASNT_CHAINING = instance[ADDER](IS_WEAK ? {} : -0, 1) != instance;
	    // V8 ~  Chromium 40- weak-collections throws on primitives, but should return false
	    var THROWS_ON_PRIMITIVES = fails(function () { instance.has(1); });
	    // most early implementations doesn't supports iterables, most modern - not close it correctly
	    var ACCEPT_ITERABLES = $iterDetect(function (iter) { new C(iter); }); // eslint-disable-line no-new
	    // for early implementations -0 and +0 not the same
	    var BUGGY_ZERO = !IS_WEAK && fails(function () {
	      // V8 ~ Chromium 42- fails only with 5+ elements
	      var $instance = new C();
	      var index = 5;
	      while (index--) $instance[ADDER](index, index);
	      return !$instance.has(-0);
	    });
	    if (!ACCEPT_ITERABLES) {
	      C = wrapper(function (target, iterable) {
	        anInstance(target, C, NAME);
	        var that = inheritIfRequired(new Base(), target, C);
	        if (iterable != undefined) forOf(iterable, IS_MAP, that[ADDER], that);
	        return that;
	      });
	      C.prototype = proto;
	      proto.constructor = C;
	    }
	    if (THROWS_ON_PRIMITIVES || BUGGY_ZERO) {
	      fixMethod('delete');
	      fixMethod('has');
	      IS_MAP && fixMethod('get');
	    }
	    if (BUGGY_ZERO || HASNT_CHAINING) fixMethod(ADDER);
	    // weak collections should not contains .clear method
	    if (IS_WEAK && proto.clear) delete proto.clear;
	  }

	  setToStringTag(C, NAME);

	  O[NAME] = C;
	  $export($export.G + $export.W + $export.F * (C != Base), O);

	  if (!IS_WEAK) common.setStrong(C, NAME, IS_MAP);

	  return C;
	};


/***/ }),
/* 129 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';
	__webpack_require__(319);
	var redefine = __webpack_require__(32);
	var hide = __webpack_require__(31);
	var fails = __webpack_require__(10);
	var defined = __webpack_require__(50);
	var wks = __webpack_require__(16);
	var regexpExec = __webpack_require__(195);

	var SPECIES = wks('species');

	var REPLACE_SUPPORTS_NAMED_GROUPS = !fails(function () {
	  // #replace needs built-in support for named groups.
	  // #match works fine because it just return the exec results, even if it has
	  // a "grops" property.
	  var re = /./;
	  re.exec = function () {
	    var result = [];
	    result.groups = { a: '7' };
	    return result;
	  };
	  return ''.replace(re, '$<a>') !== '7';
	});

	var SPLIT_WORKS_WITH_OVERWRITTEN_EXEC = (function () {
	  // Chrome 51 has a buggy "split" implementation when RegExp#exec !== nativeExec
	  var re = /(?:)/;
	  var originalExec = re.exec;
	  re.exec = function () { return originalExec.apply(this, arguments); };
	  var result = 'ab'.split(re);
	  return result.length === 2 && result[0] === 'a' && result[1] === 'b';
	})();

	module.exports = function (KEY, length, exec) {
	  var SYMBOL = wks(KEY);

	  var DELEGATES_TO_SYMBOL = !fails(function () {
	    // String methods call symbol-named RegEp methods
	    var O = {};
	    O[SYMBOL] = function () { return 7; };
	    return ''[KEY](O) != 7;
	  });

	  var DELEGATES_TO_EXEC = DELEGATES_TO_SYMBOL ? !fails(function () {
	    // Symbol-named RegExp methods call .exec
	    var execCalled = false;
	    var re = /a/;
	    re.exec = function () { execCalled = true; return null; };
	    if (KEY === 'split') {
	      // RegExp[@@split] doesn't call the regex's exec method, but first creates
	      // a new one. We need to return the patched regex when creating the new one.
	      re.constructor = {};
	      re.constructor[SPECIES] = function () { return re; };
	    }
	    re[SYMBOL]('');
	    return !execCalled;
	  }) : undefined;

	  if (
	    !DELEGATES_TO_SYMBOL ||
	    !DELEGATES_TO_EXEC ||
	    (KEY === 'replace' && !REPLACE_SUPPORTS_NAMED_GROUPS) ||
	    (KEY === 'split' && !SPLIT_WORKS_WITH_OVERWRITTEN_EXEC)
	  ) {
	    var nativeRegExpMethod = /./[SYMBOL];
	    var fns = exec(
	      defined,
	      SYMBOL,
	      ''[KEY],
	      function maybeCallNative(nativeMethod, regexp, str, arg2, forceStringMethod) {
	        if (regexp.exec === regexpExec) {
	          if (DELEGATES_TO_SYMBOL && !forceStringMethod) {
	            // The native String method already delegates to @@method (this
	            // polyfilled function), leasing to infinite recursion.
	            // We avoid it by directly calling the native @@method method.
	            return { done: true, value: nativeRegExpMethod.call(regexp, str, arg2) };
	          }
	          return { done: true, value: nativeMethod.call(str, regexp, arg2) };
	        }
	        return { done: false };
	      }
	    );
	    var strfn = fns[0];
	    var rxfn = fns[1];

	    redefine(String.prototype, KEY, strfn);
	    hide(RegExp.prototype, SYMBOL, length == 2
	      // 21.2.5.8 RegExp.prototype[@@replace](string, replaceValue)
	      // 21.2.5.11 RegExp.prototype[@@split](string, limit)
	      ? function (string, arg) { return rxfn.call(string, this, arg); }
	      // 21.2.5.6 RegExp.prototype[@@match](string)
	      // 21.2.5.9 RegExp.prototype[@@search](string)
	      : function (string) { return rxfn.call(string, this); }
	    );
	  }
	};


/***/ }),
/* 130 */
/***/ (function(module, exports, __webpack_require__) {

	// 7.2.2 IsArray(argument)
	var cof = __webpack_require__(42);
	module.exports = Array.isArray || function isArray(arg) {
	  return cof(arg) == 'Array';
	};


/***/ }),
/* 131 */
/***/ (function(module, exports, __webpack_require__) {

	// 7.2.8 IsRegExp(argument)
	var isObject = __webpack_require__(12);
	var cof = __webpack_require__(42);
	var MATCH = __webpack_require__(16)('match');
	module.exports = function (it) {
	  var isRegExp;
	  return isObject(it) && ((isRegExp = it[MATCH]) !== undefined ? !!isRegExp : cof(it) == 'RegExp');
	};


/***/ }),
/* 132 */
/***/ (function(module, exports, __webpack_require__) {

	var ITERATOR = __webpack_require__(16)('iterator');
	var SAFE_CLOSING = false;

	try {
	  var riter = [7][ITERATOR]();
	  riter['return'] = function () { SAFE_CLOSING = true; };
	  // eslint-disable-next-line no-throw-literal
	  Array.from(riter, function () { throw 2; });
	} catch (e) { /* empty */ }

	module.exports = function (exec, skipClosing) {
	  if (!skipClosing && !SAFE_CLOSING) return false;
	  var safe = false;
	  try {
	    var arr = [7];
	    var iter = arr[ITERATOR]();
	    iter.next = function () { return { done: safe = true }; };
	    arr[ITERATOR] = function () { return iter; };
	    exec(arr);
	  } catch (e) { /* empty */ }
	  return safe;
	};


/***/ }),
/* 133 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';
	// Forced replacement prototype accessors methods
	module.exports = __webpack_require__(63) || !__webpack_require__(10)(function () {
	  var K = Math.random();
	  // In FF throws only define methods
	  // eslint-disable-next-line no-undef, no-useless-call
	  __defineSetter__.call(null, K, function () { /* empty */ });
	  delete __webpack_require__(9)[K];
	});


/***/ }),
/* 134 */
/***/ (function(module, exports) {

	exports.f = Object.getOwnPropertySymbols;


/***/ }),
/* 135 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';

	var classof = __webpack_require__(90);
	var builtinExec = RegExp.prototype.exec;

	 // `RegExpExec` abstract operation
	// https://tc39.github.io/ecma262/#sec-regexpexec
	module.exports = function (R, S) {
	  var exec = R.exec;
	  if (typeof exec === 'function') {
	    var result = exec.call(R, S);
	    if (typeof result !== 'object') {
	      throw new TypeError('RegExp exec method returned something other than an Object or null');
	    }
	    return result;
	  }
	  if (classof(R) !== 'RegExp') {
	    throw new TypeError('RegExp#exec called on incompatible receiver');
	  }
	  return builtinExec.call(R, S);
	};


/***/ }),
/* 136 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';
	// https://tc39.github.io/proposal-setmap-offrom/
	var $export = __webpack_require__(1);
	var aFunction = __webpack_require__(28);
	var ctx = __webpack_require__(44);
	var forOf = __webpack_require__(72);

	module.exports = function (COLLECTION) {
	  $export($export.S, COLLECTION, { from: function from(source /* , mapFn, thisArg */) {
	    var mapFn = arguments[1];
	    var mapping, A, n, cb;
	    aFunction(this);
	    mapping = mapFn !== undefined;
	    if (mapping) aFunction(mapFn);
	    if (source == undefined) return new this();
	    A = [];
	    if (mapping) {
	      n = 0;
	      cb = ctx(mapFn, arguments[2], 2);
	      forOf(source, false, function (nextItem) {
	        A.push(cb(nextItem, n++));
	      });
	    } else {
	      forOf(source, false, A.push, A);
	    }
	    return new this(A);
	  } });
	};


/***/ }),
/* 137 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';
	// https://tc39.github.io/proposal-setmap-offrom/
	var $export = __webpack_require__(1);

	module.exports = function (COLLECTION) {
	  $export($export.S, COLLECTION, { of: function of() {
	    var length = arguments.length;
	    var A = new Array(length);
	    while (length--) A[length] = arguments[length];
	    return new this(A);
	  } });
	};


/***/ }),
/* 138 */
/***/ (function(module, exports, __webpack_require__) {

	var toInteger = __webpack_require__(46);
	var defined = __webpack_require__(50);
	// true  -> String#at
	// false -> String#codePointAt
	module.exports = function (TO_STRING) {
	  return function (that, pos) {
	    var s = String(defined(that));
	    var i = toInteger(pos);
	    var l = s.length;
	    var a, b;
	    if (i < 0 || i >= l) return TO_STRING ? '' : undefined;
	    a = s.charCodeAt(i);
	    return a < 0xd800 || a > 0xdbff || i + 1 === l || (b = s.charCodeAt(i + 1)) < 0xdc00 || b > 0xdfff
	      ? TO_STRING ? s.charAt(i) : a
	      : TO_STRING ? s.slice(i, i + 2) : (a - 0xd800 << 10) + (b - 0xdc00) + 0x10000;
	  };
	};


/***/ }),
/* 139 */
/***/ (function(module, exports, __webpack_require__) {

	var global = __webpack_require__(9);
	var hide = __webpack_require__(31);
	var uid = __webpack_require__(80);
	var TYPED = uid('typed_array');
	var VIEW = uid('view');
	var ABV = !!(global.ArrayBuffer && global.DataView);
	var CONSTR = ABV;
	var i = 0;
	var l = 9;
	var Typed;

	var TypedArrayConstructors = (
	  'Int8Array,Uint8Array,Uint8ClampedArray,Int16Array,Uint16Array,Int32Array,Uint32Array,Float32Array,Float64Array'
	).split(',');

	while (i < l) {
	  if (Typed = global[TypedArrayConstructors[i++]]) {
	    hide(Typed.prototype, TYPED, true);
	    hide(Typed.prototype, VIEW, true);
	  } else CONSTR = false;
	}

	module.exports = {
	  ABV: ABV,
	  CONSTR: CONSTR,
	  TYPED: TYPED,
	  VIEW: VIEW
	};


/***/ }),
/* 140 */
/***/ (function(module, exports, __webpack_require__) {

	var global = __webpack_require__(9);
	var navigator = global.navigator;

	module.exports = navigator && navigator.userAgent || '';


/***/ }),
/* 141 */
/***/ (function(module, exports) {

	'use strict';

	exports.__esModule = true;
	var canUseDOM = !!(typeof window !== 'undefined' && window.document && window.document.createElement);
	exports.canUseDOM = canUseDOM;

/***/ }),
/* 142 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';

	exports.__esModule = true;

	var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }

	var _warning = __webpack_require__(54);

	var _warning2 = _interopRequireDefault(_warning);

	var _queryString = __webpack_require__(800);

	var _runTransitionHook = __webpack_require__(211);

	var _runTransitionHook2 = _interopRequireDefault(_runTransitionHook);

	var _PathUtils = __webpack_require__(82);

	var _deprecate = __webpack_require__(210);

	var _deprecate2 = _interopRequireDefault(_deprecate);

	var SEARCH_BASE_KEY = '$searchBase';

	function defaultStringifyQuery(query) {
	  return _queryString.stringify(query).replace(/%20/g, '+');
	}

	var defaultParseQueryString = _queryString.parse;

	function isNestedObject(object) {
	  for (var p in object) {
	    if (Object.prototype.hasOwnProperty.call(object, p) && typeof object[p] === 'object' && !Array.isArray(object[p]) && object[p] !== null) return true;
	  }return false;
	}

	/**
	 * Returns a new createHistory function that may be used to create
	 * history objects that know how to handle URL queries.
	 */
	function useQueries(createHistory) {
	  return function () {
	    var options = arguments.length <= 0 || arguments[0] === undefined ? {} : arguments[0];

	    var history = createHistory(options);

	    var stringifyQuery = options.stringifyQuery;
	    var parseQueryString = options.parseQueryString;

	    if (typeof stringifyQuery !== 'function') stringifyQuery = defaultStringifyQuery;

	    if (typeof parseQueryString !== 'function') parseQueryString = defaultParseQueryString;

	    function addQuery(location) {
	      if (location.query == null) {
	        var search = location.search;

	        location.query = parseQueryString(search.substring(1));
	        location[SEARCH_BASE_KEY] = { search: search, searchBase: '' };
	      }

	      // TODO: Instead of all the book-keeping here, this should just strip the
	      // stringified query from the search.

	      return location;
	    }

	    function appendQuery(location, query) {
	      var _extends2;

	      var searchBaseSpec = location[SEARCH_BASE_KEY];
	      var queryString = query ? stringifyQuery(query) : '';
	      if (!searchBaseSpec && !queryString) {
	        return location;
	      }

	      (undefined) !== 'production' ? _warning2['default'](stringifyQuery !== defaultStringifyQuery || !isNestedObject(query), 'useQueries does not stringify nested query objects by default; ' + 'use a custom stringifyQuery function') : undefined;

	      if (typeof location === 'string') location = _PathUtils.parsePath(location);

	      var searchBase = undefined;
	      if (searchBaseSpec && location.search === searchBaseSpec.search) {
	        searchBase = searchBaseSpec.searchBase;
	      } else {
	        searchBase = location.search || '';
	      }

	      var search = searchBase;
	      if (queryString) {
	        search += (search ? '&' : '?') + queryString;
	      }

	      return _extends({}, location, (_extends2 = {
	        search: search
	      }, _extends2[SEARCH_BASE_KEY] = { search: search, searchBase: searchBase }, _extends2));
	    }

	    // Override all read methods with query-aware versions.
	    function listenBefore(hook) {
	      return history.listenBefore(function (location, callback) {
	        _runTransitionHook2['default'](hook, addQuery(location), callback);
	      });
	    }

	    function listen(listener) {
	      return history.listen(function (location) {
	        listener(addQuery(location));
	      });
	    }

	    // Override all write methods with query-aware versions.
	    function push(location) {
	      history.push(appendQuery(location, location.query));
	    }

	    function replace(location) {
	      history.replace(appendQuery(location, location.query));
	    }

	    function createPath(location, query) {
	      (undefined) !== 'production' ? _warning2['default'](!query, 'the query argument to createPath is deprecated; use a location descriptor instead') : undefined;

	      return history.createPath(appendQuery(location, query || location.query));
	    }

	    function createHref(location, query) {
	      (undefined) !== 'production' ? _warning2['default'](!query, 'the query argument to createHref is deprecated; use a location descriptor instead') : undefined;

	      return history.createHref(appendQuery(location, query || location.query));
	    }

	    function createLocation(location) {
	      for (var _len = arguments.length, args = Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
	        args[_key - 1] = arguments[_key];
	      }

	      var fullLocation = history.createLocation.apply(history, [appendQuery(location, location.query)].concat(args));
	      if (location.query) {
	        fullLocation.query = location.query;
	      }
	      return addQuery(fullLocation);
	    }

	    // deprecated
	    function pushState(state, path, query) {
	      if (typeof path === 'string') path = _PathUtils.parsePath(path);

	      push(_extends({ state: state }, path, { query: query }));
	    }

	    // deprecated
	    function replaceState(state, path, query) {
	      if (typeof path === 'string') path = _PathUtils.parsePath(path);

	      replace(_extends({ state: state }, path, { query: query }));
	    }

	    return _extends({}, history, {
	      listenBefore: listenBefore,
	      listen: listen,
	      push: push,
	      replace: replace,
	      createPath: createPath,
	      createHref: createHref,
	      createLocation: createLocation,

	      pushState: _deprecate2['default'](pushState, 'pushState is deprecated; use push instead'),
	      replaceState: _deprecate2['default'](replaceState, 'replaceState is deprecated; use replace instead')
	    });
	  };
	}

	exports['default'] = useQueries;
	module.exports = exports['default'];

/***/ }),
/* 143 */
/***/ (function(module, exports) {

	// shim for using process in browser
	var process = module.exports = {};

	// cached from whatever global is present so that test runners that stub it
	// don't break things.  But we need to wrap it in a try catch in case it is
	// wrapped in strict mode code which doesn't define any globals.  It's inside a
	// function because try/catches deoptimize in certain engines.

	var cachedSetTimeout;
	var cachedClearTimeout;

	function defaultSetTimout() {
	    throw new Error('setTimeout has not been defined');
	}
	function defaultClearTimeout () {
	    throw new Error('clearTimeout has not been defined');
	}
	(function () {
	    try {
	        if (typeof setTimeout === 'function') {
	            cachedSetTimeout = setTimeout;
	        } else {
	            cachedSetTimeout = defaultSetTimout;
	        }
	    } catch (e) {
	        cachedSetTimeout = defaultSetTimout;
	    }
	    try {
	        if (typeof clearTimeout === 'function') {
	            cachedClearTimeout = clearTimeout;
	        } else {
	            cachedClearTimeout = defaultClearTimeout;
	        }
	    } catch (e) {
	        cachedClearTimeout = defaultClearTimeout;
	    }
	} ())
	function runTimeout(fun) {
	    if (cachedSetTimeout === setTimeout) {
	        //normal enviroments in sane situations
	        return setTimeout(fun, 0);
	    }
	    // if setTimeout wasn't available but was latter defined
	    if ((cachedSetTimeout === defaultSetTimout || !cachedSetTimeout) && setTimeout) {
	        cachedSetTimeout = setTimeout;
	        return setTimeout(fun, 0);
	    }
	    try {
	        // when when somebody has screwed with setTimeout but no I.E. maddness
	        return cachedSetTimeout(fun, 0);
	    } catch(e){
	        try {
	            // When we are in I.E. but the script has been evaled so I.E. doesn't trust the global object when called normally
	            return cachedSetTimeout.call(null, fun, 0);
	        } catch(e){
	            // same as above but when it's a version of I.E. that must have the global object for 'this', hopfully our context correct otherwise it will throw a global error
	            return cachedSetTimeout.call(this, fun, 0);
	        }
	    }


	}
	function runClearTimeout(marker) {
	    if (cachedClearTimeout === clearTimeout) {
	        //normal enviroments in sane situations
	        return clearTimeout(marker);
	    }
	    // if clearTimeout wasn't available but was latter defined
	    if ((cachedClearTimeout === defaultClearTimeout || !cachedClearTimeout) && clearTimeout) {
	        cachedClearTimeout = clearTimeout;
	        return clearTimeout(marker);
	    }
	    try {
	        // when when somebody has screwed with setTimeout but no I.E. maddness
	        return cachedClearTimeout(marker);
	    } catch (e){
	        try {
	            // When we are in I.E. but the script has been evaled so I.E. doesn't  trust the global object when called normally
	            return cachedClearTimeout.call(null, marker);
	        } catch (e){
	            // same as above but when it's a version of I.E. that must have the global object for 'this', hopfully our context correct otherwise it will throw a global error.
	            // Some versions of I.E. have different rules for clearTimeout vs setTimeout
	            return cachedClearTimeout.call(this, marker);
	        }
	    }



	}
	var queue = [];
	var draining = false;
	var currentQueue;
	var queueIndex = -1;

	function cleanUpNextTick() {
	    if (!draining || !currentQueue) {
	        return;
	    }
	    draining = false;
	    if (currentQueue.length) {
	        queue = currentQueue.concat(queue);
	    } else {
	        queueIndex = -1;
	    }
	    if (queue.length) {
	        drainQueue();
	    }
	}

	function drainQueue() {
	    if (draining) {
	        return;
	    }
	    var timeout = runTimeout(cleanUpNextTick);
	    draining = true;

	    var len = queue.length;
	    while(len) {
	        currentQueue = queue;
	        queue = [];
	        while (++queueIndex < len) {
	            if (currentQueue) {
	                currentQueue[queueIndex].run();
	            }
	        }
	        queueIndex = -1;
	        len = queue.length;
	    }
	    currentQueue = null;
	    draining = false;
	    runClearTimeout(timeout);
	}

	process.nextTick = function (fun) {
	    var args = new Array(arguments.length - 1);
	    if (arguments.length > 1) {
	        for (var i = 1; i < arguments.length; i++) {
	            args[i - 1] = arguments[i];
	        }
	    }
	    queue.push(new Item(fun, args));
	    if (queue.length === 1 && !draining) {
	        runTimeout(drainQueue);
	    }
	};

	// v8 likes predictible objects
	function Item(fun, array) {
	    this.fun = fun;
	    this.array = array;
	}
	Item.prototype.run = function () {
	    this.fun.apply(null, this.array);
	};
	process.title = 'browser';
	process.browser = true;
	process.env = {};
	process.argv = [];
	process.version = ''; // empty string to avoid regexp issues
	process.versions = {};

	function noop() {}

	process.on = noop;
	process.addListener = noop;
	process.once = noop;
	process.off = noop;
	process.removeListener = noop;
	process.removeAllListeners = noop;
	process.emit = noop;
	process.prependListener = noop;
	process.prependOnceListener = noop;

	process.listeners = function (name) { return [] }

	process.binding = function (name) {
	    throw new Error('process.binding is not supported');
	};

	process.cwd = function () { return '/' };
	process.chdir = function (dir) {
	    throw new Error('process.chdir is not supported');
	};
	process.umask = function() { return 0; };


/***/ }),
/* 144 */
/***/ (function(module, exports, __webpack_require__) {

	/**
	 * Copyright (c) 2013-present, Facebook, Inc.
	 *
	 * This source code is licensed under the MIT license found in the
	 * LICENSE file in the root directory of this source tree.
	 *
	 * 
	 */

	'use strict';

	var _prodInvariant = __webpack_require__(13);

	var invariant = __webpack_require__(7);

	/**
	 * Injectable ordering of event plugins.
	 */
	var eventPluginOrder = null;

	/**
	 * Injectable mapping from names to event plugin modules.
	 */
	var namesToPlugins = {};

	/**
	 * Recomputes the plugin list using the injected plugins and plugin ordering.
	 *
	 * @private
	 */
	function recomputePluginOrdering() {
	  if (!eventPluginOrder) {
	    // Wait until an `eventPluginOrder` is injected.
	    return;
	  }
	  for (var pluginName in namesToPlugins) {
	    var pluginModule = namesToPlugins[pluginName];
	    var pluginIndex = eventPluginOrder.indexOf(pluginName);
	    !(pluginIndex > -1) ? (undefined) !== 'production' ? invariant(false, 'EventPluginRegistry: Cannot inject event plugins that do not exist in the plugin ordering, `%s`.', pluginName) : _prodInvariant('96', pluginName) : void 0;
	    if (EventPluginRegistry.plugins[pluginIndex]) {
	      continue;
	    }
	    !pluginModule.extractEvents ? (undefined) !== 'production' ? invariant(false, 'EventPluginRegistry: Event plugins must implement an `extractEvents` method, but `%s` does not.', pluginName) : _prodInvariant('97', pluginName) : void 0;
	    EventPluginRegistry.plugins[pluginIndex] = pluginModule;
	    var publishedEvents = pluginModule.eventTypes;
	    for (var eventName in publishedEvents) {
	      !publishEventForPlugin(publishedEvents[eventName], pluginModule, eventName) ? (undefined) !== 'production' ? invariant(false, 'EventPluginRegistry: Failed to publish event `%s` for plugin `%s`.', eventName, pluginName) : _prodInvariant('98', eventName, pluginName) : void 0;
	    }
	  }
	}

	/**
	 * Publishes an event so that it can be dispatched by the supplied plugin.
	 *
	 * @param {object} dispatchConfig Dispatch configuration for the event.
	 * @param {object} PluginModule Plugin publishing the event.
	 * @return {boolean} True if the event was successfully published.
	 * @private
	 */
	function publishEventForPlugin(dispatchConfig, pluginModule, eventName) {
	  !!EventPluginRegistry.eventNameDispatchConfigs.hasOwnProperty(eventName) ? (undefined) !== 'production' ? invariant(false, 'EventPluginHub: More than one plugin attempted to publish the same event name, `%s`.', eventName) : _prodInvariant('99', eventName) : void 0;
	  EventPluginRegistry.eventNameDispatchConfigs[eventName] = dispatchConfig;

	  var phasedRegistrationNames = dispatchConfig.phasedRegistrationNames;
	  if (phasedRegistrationNames) {
	    for (var phaseName in phasedRegistrationNames) {
	      if (phasedRegistrationNames.hasOwnProperty(phaseName)) {
	        var phasedRegistrationName = phasedRegistrationNames[phaseName];
	        publishRegistrationName(phasedRegistrationName, pluginModule, eventName);
	      }
	    }
	    return true;
	  } else if (dispatchConfig.registrationName) {
	    publishRegistrationName(dispatchConfig.registrationName, pluginModule, eventName);
	    return true;
	  }
	  return false;
	}

	/**
	 * Publishes a registration name that is used to identify dispatched events and
	 * can be used with `EventPluginHub.putListener` to register listeners.
	 *
	 * @param {string} registrationName Registration name to add.
	 * @param {object} PluginModule Plugin publishing the event.
	 * @private
	 */
	function publishRegistrationName(registrationName, pluginModule, eventName) {
	  !!EventPluginRegistry.registrationNameModules[registrationName] ? (undefined) !== 'production' ? invariant(false, 'EventPluginHub: More than one plugin attempted to publish the same registration name, `%s`.', registrationName) : _prodInvariant('100', registrationName) : void 0;
	  EventPluginRegistry.registrationNameModules[registrationName] = pluginModule;
	  EventPluginRegistry.registrationNameDependencies[registrationName] = pluginModule.eventTypes[eventName].dependencies;

	  if ((undefined) !== 'production') {
	    var lowerCasedName = registrationName.toLowerCase();
	    EventPluginRegistry.possibleRegistrationNames[lowerCasedName] = registrationName;

	    if (registrationName === 'onDoubleClick') {
	      EventPluginRegistry.possibleRegistrationNames.ondblclick = registrationName;
	    }
	  }
	}

	/**
	 * Registers plugins so that they can extract and dispatch events.
	 *
	 * @see {EventPluginHub}
	 */
	var EventPluginRegistry = {
	  /**
	   * Ordered list of injected plugins.
	   */
	  plugins: [],

	  /**
	   * Mapping from event name to dispatch config
	   */
	  eventNameDispatchConfigs: {},

	  /**
	   * Mapping from registration name to plugin module
	   */
	  registrationNameModules: {},

	  /**
	   * Mapping from registration name to event name
	   */
	  registrationNameDependencies: {},

	  /**
	   * Mapping from lowercase registration names to the properly cased version,
	   * used to warn in the case of missing event handlers. Available
	   * only in __DEV__.
	   * @type {Object}
	   */
	  possibleRegistrationNames: (undefined) !== 'production' ? {} : null,
	  // Trust the developer to only use possibleRegistrationNames in __DEV__

	  /**
	   * Injects an ordering of plugins (by plugin name). This allows the ordering
	   * to be decoupled from injection of the actual plugins so that ordering is
	   * always deterministic regardless of packaging, on-the-fly injection, etc.
	   *
	   * @param {array} InjectedEventPluginOrder
	   * @internal
	   * @see {EventPluginHub.injection.injectEventPluginOrder}
	   */
	  injectEventPluginOrder: function (injectedEventPluginOrder) {
	    !!eventPluginOrder ? (undefined) !== 'production' ? invariant(false, 'EventPluginRegistry: Cannot inject event plugin ordering more than once. You are likely trying to load more than one copy of React.') : _prodInvariant('101') : void 0;
	    // Clone the ordering so it cannot be dynamically mutated.
	    eventPluginOrder = Array.prototype.slice.call(injectedEventPluginOrder);
	    recomputePluginOrdering();
	  },

	  /**
	   * Injects plugins to be used by `EventPluginHub`. The plugin names must be
	   * in the ordering injected by `injectEventPluginOrder`.
	   *
	   * Plugins can be injected as part of page initialization or on-the-fly.
	   *
	   * @param {object} injectedNamesToPlugins Map from names to plugin modules.
	   * @internal
	   * @see {EventPluginHub.injection.injectEventPluginsByName}
	   */
	  injectEventPluginsByName: function (injectedNamesToPlugins) {
	    var isOrderingDirty = false;
	    for (var pluginName in injectedNamesToPlugins) {
	      if (!injectedNamesToPlugins.hasOwnProperty(pluginName)) {
	        continue;
	      }
	      var pluginModule = injectedNamesToPlugins[pluginName];
	      if (!namesToPlugins.hasOwnProperty(pluginName) || namesToPlugins[pluginName] !== pluginModule) {
	        !!namesToPlugins[pluginName] ? (undefined) !== 'production' ? invariant(false, 'EventPluginRegistry: Cannot inject two different event plugins using the same name, `%s`.', pluginName) : _prodInvariant('102', pluginName) : void 0;
	        namesToPlugins[pluginName] = pluginModule;
	        isOrderingDirty = true;
	      }
	    }
	    if (isOrderingDirty) {
	      recomputePluginOrdering();
	    }
	  },

	  /**
	   * Looks up the plugin for the supplied event.
	   *
	   * @param {object} event A synthetic event.
	   * @return {?object} The plugin that created the supplied event.
	   * @internal
	   */
	  getPluginModuleForEvent: function (event) {
	    var dispatchConfig = event.dispatchConfig;
	    if (dispatchConfig.registrationName) {
	      return EventPluginRegistry.registrationNameModules[dispatchConfig.registrationName] || null;
	    }
	    if (dispatchConfig.phasedRegistrationNames !== undefined) {
	      // pulling phasedRegistrationNames out of dispatchConfig helps Flow see
	      // that it is not undefined.
	      var phasedRegistrationNames = dispatchConfig.phasedRegistrationNames;

	      for (var phase in phasedRegistrationNames) {
	        if (!phasedRegistrationNames.hasOwnProperty(phase)) {
	          continue;
	        }
	        var pluginModule = EventPluginRegistry.registrationNameModules[phasedRegistrationNames[phase]];
	        if (pluginModule) {
	          return pluginModule;
	        }
	      }
	    }
	    return null;
	  },

	  /**
	   * Exposed for unit testing.
	   * @private
	   */
	  _resetEventPlugins: function () {
	    eventPluginOrder = null;
	    for (var pluginName in namesToPlugins) {
	      if (namesToPlugins.hasOwnProperty(pluginName)) {
	        delete namesToPlugins[pluginName];
	      }
	    }
	    EventPluginRegistry.plugins.length = 0;

	    var eventNameDispatchConfigs = EventPluginRegistry.eventNameDispatchConfigs;
	    for (var eventName in eventNameDispatchConfigs) {
	      if (eventNameDispatchConfigs.hasOwnProperty(eventName)) {
	        delete eventNameDispatchConfigs[eventName];
	      }
	    }

	    var registrationNameModules = EventPluginRegistry.registrationNameModules;
	    for (var registrationName in registrationNameModules) {
	      if (registrationNameModules.hasOwnProperty(registrationName)) {
	        delete registrationNameModules[registrationName];
	      }
	    }

	    if ((undefined) !== 'production') {
	      var possibleRegistrationNames = EventPluginRegistry.possibleRegistrationNames;
	      for (var lowerCasedName in possibleRegistrationNames) {
	        if (possibleRegistrationNames.hasOwnProperty(lowerCasedName)) {
	          delete possibleRegistrationNames[lowerCasedName];
	        }
	      }
	    }
	  }
	};

	module.exports = EventPluginRegistry;

/***/ }),
/* 145 */
/***/ (function(module, exports, __webpack_require__) {

	/**
	 * Copyright (c) 2013-present, Facebook, Inc.
	 *
	 * This source code is licensed under the MIT license found in the
	 * LICENSE file in the root directory of this source tree.
	 *
	 */

	'use strict';

	var _assign = __webpack_require__(19);

	var EventPluginRegistry = __webpack_require__(144);
	var ReactEventEmitterMixin = __webpack_require__(834);
	var ViewportMetrics = __webpack_require__(351);

	var getVendorPrefixedEventName = __webpack_require__(869);
	var isEventSupported = __webpack_require__(226);

	/**
	 * Summary of `ReactBrowserEventEmitter` event handling:
	 *
	 *  - Top-level delegation is used to trap most native browser events. This
	 *    may only occur in the main thread and is the responsibility of
	 *    ReactEventListener, which is injected and can therefore support pluggable
	 *    event sources. This is the only work that occurs in the main thread.
	 *
	 *  - We normalize and de-duplicate events to account for browser quirks. This
	 *    may be done in the worker thread.
	 *
	 *  - Forward these native events (with the associated top-level type used to
	 *    trap it) to `EventPluginHub`, which in turn will ask plugins if they want
	 *    to extract any synthetic events.
	 *
	 *  - The `EventPluginHub` will then process each event by annotating them with
	 *    "dispatches", a sequence of listeners and IDs that care about that event.
	 *
	 *  - The `EventPluginHub` then dispatches the events.
	 *
	 * Overview of React and the event system:
	 *
	 * +------------+    .
	 * |    DOM     |    .
	 * +------------+    .
	 *       |           .
	 *       v           .
	 * +------------+    .
	 * | ReactEvent |    .
	 * |  Listener  |    .
	 * +------------+    .                         +-----------+
	 *       |           .               +--------+|SimpleEvent|
	 *       |           .               |         |Plugin     |
	 * +-----|------+    .               v         +-----------+
	 * |     |      |    .    +--------------+                    +------------+
	 * |     +-----------.--->|EventPluginHub|                    |    Event   |
	 * |            |    .    |              |     +-----------+  | Propagators|
	 * | ReactEvent |    .    |              |     |TapEvent   |  |------------|
	 * |  Emitter   |    .    |              |<---+|Plugin     |  |other plugin|
	 * |            |    .    |              |     +-----------+  |  utilities |
	 * |     +-----------.--->|              |                    +------------+
	 * |     |      |    .    +--------------+
	 * +-----|------+    .                ^        +-----------+
	 *       |           .                |        |Enter/Leave|
	 *       +           .                +-------+|Plugin     |
	 * +-------------+   .                         +-----------+
	 * | application |   .
	 * |-------------|   .
	 * |             |   .
	 * |             |   .
	 * +-------------+   .
	 *                   .
	 *    React Core     .  General Purpose Event Plugin System
	 */

	var hasEventPageXY;
	var alreadyListeningTo = {};
	var isMonitoringScrollValue = false;
	var reactTopListenersCounter = 0;

	// For events like 'submit' which don't consistently bubble (which we trap at a
	// lower node than `document`), binding at `document` would cause duplicate
	// events so we don't include them here
	var topEventMapping = {
	  topAbort: 'abort',
	  topAnimationEnd: getVendorPrefixedEventName('animationend') || 'animationend',
	  topAnimationIteration: getVendorPrefixedEventName('animationiteration') || 'animationiteration',
	  topAnimationStart: getVendorPrefixedEventName('animationstart') || 'animationstart',
	  topBlur: 'blur',
	  topCanPlay: 'canplay',
	  topCanPlayThrough: 'canplaythrough',
	  topChange: 'change',
	  topClick: 'click',
	  topCompositionEnd: 'compositionend',
	  topCompositionStart: 'compositionstart',
	  topCompositionUpdate: 'compositionupdate',
	  topContextMenu: 'contextmenu',
	  topCopy: 'copy',
	  topCut: 'cut',
	  topDoubleClick: 'dblclick',
	  topDrag: 'drag',
	  topDragEnd: 'dragend',
	  topDragEnter: 'dragenter',
	  topDragExit: 'dragexit',
	  topDragLeave: 'dragleave',
	  topDragOver: 'dragover',
	  topDragStart: 'dragstart',
	  topDrop: 'drop',
	  topDurationChange: 'durationchange',
	  topEmptied: 'emptied',
	  topEncrypted: 'encrypted',
	  topEnded: 'ended',
	  topError: 'error',
	  topFocus: 'focus',
	  topInput: 'input',
	  topKeyDown: 'keydown',
	  topKeyPress: 'keypress',
	  topKeyUp: 'keyup',
	  topLoadedData: 'loadeddata',
	  topLoadedMetadata: 'loadedmetadata',
	  topLoadStart: 'loadstart',
	  topMouseDown: 'mousedown',
	  topMouseMove: 'mousemove',
	  topMouseOut: 'mouseout',
	  topMouseOver: 'mouseover',
	  topMouseUp: 'mouseup',
	  topPaste: 'paste',
	  topPause: 'pause',
	  topPlay: 'play',
	  topPlaying: 'playing',
	  topProgress: 'progress',
	  topRateChange: 'ratechange',
	  topScroll: 'scroll',
	  topSeeked: 'seeked',
	  topSeeking: 'seeking',
	  topSelectionChange: 'selectionchange',
	  topStalled: 'stalled',
	  topSuspend: 'suspend',
	  topTextInput: 'textInput',
	  topTimeUpdate: 'timeupdate',
	  topTouchCancel: 'touchcancel',
	  topTouchEnd: 'touchend',
	  topTouchMove: 'touchmove',
	  topTouchStart: 'touchstart',
	  topTransitionEnd: getVendorPrefixedEventName('transitionend') || 'transitionend',
	  topVolumeChange: 'volumechange',
	  topWaiting: 'waiting',
	  topWheel: 'wheel'
	};

	/**
	 * To ensure no conflicts with other potential React instances on the page
	 */
	var topListenersIDKey = '_reactListenersID' + String(Math.random()).slice(2);

	function getListeningForDocument(mountAt) {
	  // In IE8, `mountAt` is a host object and doesn't have `hasOwnProperty`
	  // directly.
	  if (!Object.prototype.hasOwnProperty.call(mountAt, topListenersIDKey)) {
	    mountAt[topListenersIDKey] = reactTopListenersCounter++;
	    alreadyListeningTo[mountAt[topListenersIDKey]] = {};
	  }
	  return alreadyListeningTo[mountAt[topListenersIDKey]];
	}

	/**
	 * `ReactBrowserEventEmitter` is used to attach top-level event listeners. For
	 * example:
	 *
	 *   EventPluginHub.putListener('myID', 'onClick', myFunction);
	 *
	 * This would allocate a "registration" of `('onClick', myFunction)` on 'myID'.
	 *
	 * @internal
	 */
	var ReactBrowserEventEmitter = _assign({}, ReactEventEmitterMixin, {
	  /**
	   * Injectable event backend
	   */
	  ReactEventListener: null,

	  injection: {
	    /**
	     * @param {object} ReactEventListener
	     */
	    injectReactEventListener: function (ReactEventListener) {
	      ReactEventListener.setHandleTopLevel(ReactBrowserEventEmitter.handleTopLevel);
	      ReactBrowserEventEmitter.ReactEventListener = ReactEventListener;
	    }
	  },

	  /**
	   * Sets whether or not any created callbacks should be enabled.
	   *
	   * @param {boolean} enabled True if callbacks should be enabled.
	   */
	  setEnabled: function (enabled) {
	    if (ReactBrowserEventEmitter.ReactEventListener) {
	      ReactBrowserEventEmitter.ReactEventListener.setEnabled(enabled);
	    }
	  },

	  /**
	   * @return {boolean} True if callbacks are enabled.
	   */
	  isEnabled: function () {
	    return !!(ReactBrowserEventEmitter.ReactEventListener && ReactBrowserEventEmitter.ReactEventListener.isEnabled());
	  },

	  /**
	   * We listen for bubbled touch events on the document object.
	   *
	   * Firefox v8.01 (and possibly others) exhibited strange behavior when
	   * mounting `onmousemove` events at some node that was not the document
	   * element. The symptoms were that if your mouse is not moving over something
	   * contained within that mount point (for example on the background) the
	   * top-level listeners for `onmousemove` won't be called. However, if you
	   * register the `mousemove` on the document object, then it will of course
	   * catch all `mousemove`s. This along with iOS quirks, justifies restricting
	   * top-level listeners to the document object only, at least for these
	   * movement types of events and possibly all events.
	   *
	   * @see http://www.quirksmode.org/blog/archives/2010/09/click_event_del.html
	   *
	   * Also, `keyup`/`keypress`/`keydown` do not bubble to the window on IE, but
	   * they bubble to document.
	   *
	   * @param {string} registrationName Name of listener (e.g. `onClick`).
	   * @param {object} contentDocumentHandle Document which owns the container
	   */
	  listenTo: function (registrationName, contentDocumentHandle) {
	    var mountAt = contentDocumentHandle;
	    var isListening = getListeningForDocument(mountAt);
	    var dependencies = EventPluginRegistry.registrationNameDependencies[registrationName];

	    for (var i = 0; i < dependencies.length; i++) {
	      var dependency = dependencies[i];
	      if (!(isListening.hasOwnProperty(dependency) && isListening[dependency])) {
	        if (dependency === 'topWheel') {
	          if (isEventSupported('wheel')) {
	            ReactBrowserEventEmitter.ReactEventListener.trapBubbledEvent('topWheel', 'wheel', mountAt);
	          } else if (isEventSupported('mousewheel')) {
	            ReactBrowserEventEmitter.ReactEventListener.trapBubbledEvent('topWheel', 'mousewheel', mountAt);
	          } else {
	            // Firefox needs to capture a different mouse scroll event.
	            // @see http://www.quirksmode.org/dom/events/tests/scroll.html
	            ReactBrowserEventEmitter.ReactEventListener.trapBubbledEvent('topWheel', 'DOMMouseScroll', mountAt);
	          }
	        } else if (dependency === 'topScroll') {
	          if (isEventSupported('scroll', true)) {
	            ReactBrowserEventEmitter.ReactEventListener.trapCapturedEvent('topScroll', 'scroll', mountAt);
	          } else {
	            ReactBrowserEventEmitter.ReactEventListener.trapBubbledEvent('topScroll', 'scroll', ReactBrowserEventEmitter.ReactEventListener.WINDOW_HANDLE);
	          }
	        } else if (dependency === 'topFocus' || dependency === 'topBlur') {
	          if (isEventSupported('focus', true)) {
	            ReactBrowserEventEmitter.ReactEventListener.trapCapturedEvent('topFocus', 'focus', mountAt);
	            ReactBrowserEventEmitter.ReactEventListener.trapCapturedEvent('topBlur', 'blur', mountAt);
	          } else if (isEventSupported('focusin')) {
	            // IE has `focusin` and `focusout` events which bubble.
	            // @see http://www.quirksmode.org/blog/archives/2008/04/delegating_the.html
	            ReactBrowserEventEmitter.ReactEventListener.trapBubbledEvent('topFocus', 'focusin', mountAt);
	            ReactBrowserEventEmitter.ReactEventListener.trapBubbledEvent('topBlur', 'focusout', mountAt);
	          }

	          // to make sure blur and focus event listeners are only attached once
	          isListening.topBlur = true;
	          isListening.topFocus = true;
	        } else if (topEventMapping.hasOwnProperty(dependency)) {
	          ReactBrowserEventEmitter.ReactEventListener.trapBubbledEvent(dependency, topEventMapping[dependency], mountAt);
	        }

	        isListening[dependency] = true;
	      }
	    }
	  },

	  trapBubbledEvent: function (topLevelType, handlerBaseName, handle) {
	    return ReactBrowserEventEmitter.ReactEventListener.trapBubbledEvent(topLevelType, handlerBaseName, handle);
	  },

	  trapCapturedEvent: function (topLevelType, handlerBaseName, handle) {
	    return ReactBrowserEventEmitter.ReactEventListener.trapCapturedEvent(topLevelType, handlerBaseName, handle);
	  },

	  /**
	   * Protect against document.createEvent() returning null
	   * Some popup blocker extensions appear to do this:
	   * https://github.com/facebook/react/issues/6887
	   */
	  supportsEventPageXY: function () {
	    if (!document.createEvent) {
	      return false;
	    }
	    var ev = document.createEvent('MouseEvent');
	    return ev != null && 'pageX' in ev;
	  },

	  /**
	   * Listens to window scroll and resize events. We cache scroll values so that
	   * application code can access them without triggering reflows.
	   *
	   * ViewportMetrics is only used by SyntheticMouse/TouchEvent and only when
	   * pageX/pageY isn't supported (legacy browsers).
	   *
	   * NOTE: Scroll events do not bubble.
	   *
	   * @see http://www.quirksmode.org/dom/events/scroll.html
	   */
	  ensureScrollValueMonitoring: function () {
	    if (hasEventPageXY === undefined) {
	      hasEventPageXY = ReactBrowserEventEmitter.supportsEventPageXY();
	    }
	    if (!hasEventPageXY && !isMonitoringScrollValue) {
	      var refresh = ViewportMetrics.refreshScrollValues;
	      ReactBrowserEventEmitter.ReactEventListener.monitorScrollValue(refresh);
	      isMonitoringScrollValue = true;
	    }
	  }
	});

	module.exports = ReactBrowserEventEmitter;

/***/ }),
/* 146 */
/***/ (function(module, exports, __webpack_require__) {

	/**
	 * Copyright (c) 2013-present, Facebook, Inc.
	 *
	 * This source code is licensed under the MIT license found in the
	 * LICENSE file in the root directory of this source tree.
	 *
	 */

	'use strict';

	var SyntheticUIEvent = __webpack_require__(115);
	var ViewportMetrics = __webpack_require__(351);

	var getEventModifierState = __webpack_require__(224);

	/**
	 * @interface MouseEvent
	 * @see http://www.w3.org/TR/DOM-Level-3-Events/
	 */
	var MouseEventInterface = {
	  screenX: null,
	  screenY: null,
	  clientX: null,
	  clientY: null,
	  ctrlKey: null,
	  shiftKey: null,
	  altKey: null,
	  metaKey: null,
	  getModifierState: getEventModifierState,
	  button: function (event) {
	    // Webkit, Firefox, IE9+
	    // which:  1 2 3
	    // button: 0 1 2 (standard)
	    var button = event.button;
	    if ('which' in event) {
	      return button;
	    }
	    // IE<9
	    // which:  undefined
	    // button: 0 0 0
	    // button: 1 4 2 (onmouseup)
	    return button === 2 ? 2 : button === 4 ? 1 : 0;
	  },
	  buttons: null,
	  relatedTarget: function (event) {
	    return event.relatedTarget || (event.fromElement === event.srcElement ? event.toElement : event.fromElement);
	  },
	  // "Proprietary" Interface.
	  pageX: function (event) {
	    return 'pageX' in event ? event.pageX : event.clientX + ViewportMetrics.currentScrollLeft;
	  },
	  pageY: function (event) {
	    return 'pageY' in event ? event.pageY : event.clientY + ViewportMetrics.currentScrollTop;
	  }
	};

	/**
	 * @param {object} dispatchConfig Configuration used to dispatch this event.
	 * @param {string} dispatchMarker Marker identifying the event target.
	 * @param {object} nativeEvent Native browser event.
	 * @extends {SyntheticUIEvent}
	 */
	function SyntheticMouseEvent(dispatchConfig, dispatchMarker, nativeEvent, nativeEventTarget) {
	  return SyntheticUIEvent.call(this, dispatchConfig, dispatchMarker, nativeEvent, nativeEventTarget);
	}

	SyntheticUIEvent.augmentClass(SyntheticMouseEvent, MouseEventInterface);

	module.exports = SyntheticMouseEvent;

/***/ }),
/* 147 */
/***/ (function(module, exports, __webpack_require__) {

	/**
	 * Copyright (c) 2013-present, Facebook, Inc.
	 *
	 * This source code is licensed under the MIT license found in the
	 * LICENSE file in the root directory of this source tree.
	 *
	 * 
	 */

	'use strict';

	var _prodInvariant = __webpack_require__(13);

	var invariant = __webpack_require__(7);

	var OBSERVED_ERROR = {};

	/**
	 * `Transaction` creates a black box that is able to wrap any method such that
	 * certain invariants are maintained before and after the method is invoked
	 * (Even if an exception is thrown while invoking the wrapped method). Whoever
	 * instantiates a transaction can provide enforcers of the invariants at
	 * creation time. The `Transaction` class itself will supply one additional
	 * automatic invariant for you - the invariant that any transaction instance
	 * should not be run while it is already being run. You would typically create a
	 * single instance of a `Transaction` for reuse multiple times, that potentially
	 * is used to wrap several different methods. Wrappers are extremely simple -
	 * they only require implementing two methods.
	 *
	 * <pre>
	 *                       wrappers (injected at creation time)
	 *                                      +        +
	 *                                      |        |
	 *                    +-----------------|--------|--------------+
	 *                    |                 v        |              |
	 *                    |      +---------------+   |              |
	 *                    |   +--|    wrapper1   |---|----+         |
	 *                    |   |  +---------------+   v    |         |
	 *                    |   |          +-------------+  |         |
	 *                    |   |     +----|   wrapper2  |--------+   |
	 *                    |   |     |    +-------------+  |     |   |
	 *                    |   |     |                     |     |   |
	 *                    |   v     v                     v     v   | wrapper
	 *                    | +---+ +---+   +---------+   +---+ +---+ | invariants
	 * perform(anyMethod) | |   | |   |   |         |   |   | |   | | maintained
	 * +----------------->|-|---|-|---|-->|anyMethod|---|---|-|---|-|-------->
	 *                    | |   | |   |   |         |   |   | |   | |
	 *                    | |   | |   |   |         |   |   | |   | |
	 *                    | |   | |   |   |         |   |   | |   | |
	 *                    | +---+ +---+   +---------+   +---+ +---+ |
	 *                    |  initialize                    close    |
	 *                    +-----------------------------------------+
	 * </pre>
	 *
	 * Use cases:
	 * - Preserving the input selection ranges before/after reconciliation.
	 *   Restoring selection even in the event of an unexpected error.
	 * - Deactivating events while rearranging the DOM, preventing blurs/focuses,
	 *   while guaranteeing that afterwards, the event system is reactivated.
	 * - Flushing a queue of collected DOM mutations to the main UI thread after a
	 *   reconciliation takes place in a worker thread.
	 * - Invoking any collected `componentDidUpdate` callbacks after rendering new
	 *   content.
	 * - (Future use case): Wrapping particular flushes of the `ReactWorker` queue
	 *   to preserve the `scrollTop` (an automatic scroll aware DOM).
	 * - (Future use case): Layout calculations before and after DOM updates.
	 *
	 * Transactional plugin API:
	 * - A module that has an `initialize` method that returns any precomputation.
	 * - and a `close` method that accepts the precomputation. `close` is invoked
	 *   when the wrapped process is completed, or has failed.
	 *
	 * @param {Array<TransactionalWrapper>} transactionWrapper Wrapper modules
	 * that implement `initialize` and `close`.
	 * @return {Transaction} Single transaction for reuse in thread.
	 *
	 * @class Transaction
	 */
	var TransactionImpl = {
	  /**
	   * Sets up this instance so that it is prepared for collecting metrics. Does
	   * so such that this setup method may be used on an instance that is already
	   * initialized, in a way that does not consume additional memory upon reuse.
	   * That can be useful if you decide to make your subclass of this mixin a
	   * "PooledClass".
	   */
	  reinitializeTransaction: function () {
	    this.transactionWrappers = this.getTransactionWrappers();
	    if (this.wrapperInitData) {
	      this.wrapperInitData.length = 0;
	    } else {
	      this.wrapperInitData = [];
	    }
	    this._isInTransaction = false;
	  },

	  _isInTransaction: false,

	  /**
	   * @abstract
	   * @return {Array<TransactionWrapper>} Array of transaction wrappers.
	   */
	  getTransactionWrappers: null,

	  isInTransaction: function () {
	    return !!this._isInTransaction;
	  },

	  /* eslint-disable space-before-function-paren */

	  /**
	   * Executes the function within a safety window. Use this for the top level
	   * methods that result in large amounts of computation/mutations that would
	   * need to be safety checked. The optional arguments helps prevent the need
	   * to bind in many cases.
	   *
	   * @param {function} method Member of scope to call.
	   * @param {Object} scope Scope to invoke from.
	   * @param {Object?=} a Argument to pass to the method.
	   * @param {Object?=} b Argument to pass to the method.
	   * @param {Object?=} c Argument to pass to the method.
	   * @param {Object?=} d Argument to pass to the method.
	   * @param {Object?=} e Argument to pass to the method.
	   * @param {Object?=} f Argument to pass to the method.
	   *
	   * @return {*} Return value from `method`.
	   */
	  perform: function (method, scope, a, b, c, d, e, f) {
	    /* eslint-enable space-before-function-paren */
	    !!this.isInTransaction() ? (undefined) !== 'production' ? invariant(false, 'Transaction.perform(...): Cannot initialize a transaction when there is already an outstanding transaction.') : _prodInvariant('27') : void 0;
	    var errorThrown;
	    var ret;
	    try {
	      this._isInTransaction = true;
	      // Catching errors makes debugging more difficult, so we start with
	      // errorThrown set to true before setting it to false after calling
	      // close -- if it's still set to true in the finally block, it means
	      // one of these calls threw.
	      errorThrown = true;
	      this.initializeAll(0);
	      ret = method.call(scope, a, b, c, d, e, f);
	      errorThrown = false;
	    } finally {
	      try {
	        if (errorThrown) {
	          // If `method` throws, prefer to show that stack trace over any thrown
	          // by invoking `closeAll`.
	          try {
	            this.closeAll(0);
	          } catch (err) {}
	        } else {
	          // Since `method` didn't throw, we don't want to silence the exception
	          // here.
	          this.closeAll(0);
	        }
	      } finally {
	        this._isInTransaction = false;
	      }
	    }
	    return ret;
	  },

	  initializeAll: function (startIndex) {
	    var transactionWrappers = this.transactionWrappers;
	    for (var i = startIndex; i < transactionWrappers.length; i++) {
	      var wrapper = transactionWrappers[i];
	      try {
	        // Catching errors makes debugging more difficult, so we start with the
	        // OBSERVED_ERROR state before overwriting it with the real return value
	        // of initialize -- if it's still set to OBSERVED_ERROR in the finally
	        // block, it means wrapper.initialize threw.
	        this.wrapperInitData[i] = OBSERVED_ERROR;
	        this.wrapperInitData[i] = wrapper.initialize ? wrapper.initialize.call(this) : null;
	      } finally {
	        if (this.wrapperInitData[i] === OBSERVED_ERROR) {
	          // The initializer for wrapper i threw an error; initialize the
	          // remaining wrappers but silence any exceptions from them to ensure
	          // that the first error is the one to bubble up.
	          try {
	            this.initializeAll(i + 1);
	          } catch (err) {}
	        }
	      }
	    }
	  },

	  /**
	   * Invokes each of `this.transactionWrappers.close[i]` functions, passing into
	   * them the respective return values of `this.transactionWrappers.init[i]`
	   * (`close`rs that correspond to initializers that failed will not be
	   * invoked).
	   */
	  closeAll: function (startIndex) {
	    !this.isInTransaction() ? (undefined) !== 'production' ? invariant(false, 'Transaction.closeAll(): Cannot close transaction when none are open.') : _prodInvariant('28') : void 0;
	    var transactionWrappers = this.transactionWrappers;
	    for (var i = startIndex; i < transactionWrappers.length; i++) {
	      var wrapper = transactionWrappers[i];
	      var initData = this.wrapperInitData[i];
	      var errorThrown;
	      try {
	        // Catching errors makes debugging more difficult, so we start with
	        // errorThrown set to true before setting it to false after calling
	        // close -- if it's still set to true in the finally block, it means
	        // wrapper.close threw.
	        errorThrown = true;
	        if (initData !== OBSERVED_ERROR && wrapper.close) {
	          wrapper.close.call(this, initData);
	        }
	        errorThrown = false;
	      } finally {
	        if (errorThrown) {
	          // The closer for wrapper i threw an error; close the remaining
	          // wrappers but silence any exceptions from them to ensure that the
	          // first error is the one to bubble up.
	          try {
	            this.closeAll(i + 1);
	          } catch (e) {}
	        }
	      }
	    }
	    this.wrapperInitData.length = 0;
	  }
	};

	module.exports = TransactionImpl;

/***/ }),
/* 148 */
/***/ (function(module, exports) {

	/**
	 * Copyright (c) 2016-present, Facebook, Inc.
	 *
	 * This source code is licensed under the MIT license found in the
	 * LICENSE file in the root directory of this source tree.
	 *
	 * Based on the escape-html library, which is used under the MIT License below:
	 *
	 * Copyright (c) 2012-2013 TJ Holowaychuk
	 * Copyright (c) 2015 Andreas Lubbe
	 * Copyright (c) 2015 Tiancheng "Timothy" Gu
	 *
	 * Permission is hereby granted, free of charge, to any person obtaining
	 * a copy of this software and associated documentation files (the
	 * 'Software'), to deal in the Software without restriction, including
	 * without limitation the rights to use, copy, modify, merge, publish,
	 * distribute, sublicense, and/or sell copies of the Software, and to
	 * permit persons to whom the Software is furnished to do so, subject to
	 * the following conditions:
	 *
	 * The above copyright notice and this permission notice shall be
	 * included in all copies or substantial portions of the Software.
	 *
	 * THE SOFTWARE IS PROVIDED 'AS IS', WITHOUT WARRANTY OF ANY KIND,
	 * EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
	 * MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.
	 * IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY
	 * CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT,
	 * TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE
	 * SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
	 *
	 */

	'use strict';

	// code copied and modified from escape-html
	/**
	 * Module variables.
	 * @private
	 */

	var matchHtmlRegExp = /["'&<>]/;

	/**
	 * Escape special characters in the given string of html.
	 *
	 * @param  {string} string The string to escape for inserting into HTML
	 * @return {string}
	 * @public
	 */

	function escapeHtml(string) {
	  var str = '' + string;
	  var match = matchHtmlRegExp.exec(str);

	  if (!match) {
	    return str;
	  }

	  var escape;
	  var html = '';
	  var index = 0;
	  var lastIndex = 0;

	  for (index = match.index; index < str.length; index++) {
	    switch (str.charCodeAt(index)) {
	      case 34:
	        // "
	        escape = '&quot;';
	        break;
	      case 38:
	        // &
	        escape = '&amp;';
	        break;
	      case 39:
	        // '
	        escape = '&#x27;'; // modified from escape-html; used to be '&#39'
	        break;
	      case 60:
	        // <
	        escape = '&lt;';
	        break;
	      case 62:
	        // >
	        escape = '&gt;';
	        break;
	      default:
	        continue;
	    }

	    if (lastIndex !== index) {
	      html += str.substring(lastIndex, index);
	    }

	    lastIndex = index + 1;
	    html += escape;
	  }

	  return lastIndex !== index ? html + str.substring(lastIndex, index) : html;
	}
	// end code copied and modified from escape-html

	/**
	 * Escapes text to prevent scripting attacks.
	 *
	 * @param {*} text Text value to escape.
	 * @return {string} An escaped string.
	 */
	function escapeTextContentForBrowser(text) {
	  if (typeof text === 'boolean' || typeof text === 'number') {
	    // this shortcircuit helps perf for types that we know will never have
	    // special characters, especially given that this function is used often
	    // for numeric dom ids.
	    return '' + text;
	  }
	  return escapeHtml(text);
	}

	module.exports = escapeTextContentForBrowser;

/***/ }),
/* 149 */
/***/ (function(module, exports, __webpack_require__) {

	/**
	 * Copyright (c) 2013-present, Facebook, Inc.
	 *
	 * This source code is licensed under the MIT license found in the
	 * LICENSE file in the root directory of this source tree.
	 *
	 */

	'use strict';

	var ExecutionEnvironment = __webpack_require__(24);
	var DOMNamespaces = __webpack_require__(215);

	var WHITESPACE_TEST = /^[ \r\n\t\f]/;
	var NONVISIBLE_TEST = /<(!--|link|noscript|meta|script|style)[ \r\n\t\f\/>]/;

	var createMicrosoftUnsafeLocalFunction = __webpack_require__(222);

	// SVG temp container for IE lacking innerHTML
	var reusableSVGContainer;

	/**
	 * Set the innerHTML property of a node, ensuring that whitespace is preserved
	 * even in IE8.
	 *
	 * @param {DOMElement} node
	 * @param {string} html
	 * @internal
	 */
	var setInnerHTML = createMicrosoftUnsafeLocalFunction(function (node, html) {
	  // IE does not have innerHTML for SVG nodes, so instead we inject the
	  // new markup in a temp node and then move the child nodes across into
	  // the target node
	  if (node.namespaceURI === DOMNamespaces.svg && !('innerHTML' in node)) {
	    reusableSVGContainer = reusableSVGContainer || document.createElement('div');
	    reusableSVGContainer.innerHTML = '<svg>' + html + '</svg>';
	    var svgNode = reusableSVGContainer.firstChild;
	    while (svgNode.firstChild) {
	      node.appendChild(svgNode.firstChild);
	    }
	  } else {
	    node.innerHTML = html;
	  }
	});

	if (ExecutionEnvironment.canUseDOM) {
	  // IE8: When updating a just created node with innerHTML only leading
	  // whitespace is removed. When updating an existing node with innerHTML
	  // whitespace in root TextNodes is also collapsed.
	  // @see quirksmode.org/bugreports/archives/2004/11/innerhtml_and_t.html

	  // Feature detection; only IE8 is known to behave improperly like this.
	  var testElement = document.createElement('div');
	  testElement.innerHTML = ' ';
	  if (testElement.innerHTML === '') {
	    setInnerHTML = function (node, html) {
	      // Magic theory: IE8 supposedly differentiates between added and updated
	      // nodes when processing innerHTML, innerHTML on updated nodes suffers
	      // from worse whitespace behavior. Re-adding a node like this triggers
	      // the initial and more favorable whitespace behavior.
	      // TODO: What to do on a detached node?
	      if (node.parentNode) {
	        node.parentNode.replaceChild(node, node);
	      }

	      // We also implement a workaround for non-visible tags disappearing into
	      // thin air on IE8, this only happens if there is no visible text
	      // in-front of the non-visible tags. Piggyback on the whitespace fix
	      // and simply check if any non-visible tags appear in the source.
	      if (WHITESPACE_TEST.test(html) || html[0] === '<' && NONVISIBLE_TEST.test(html)) {
	        // Recover leading whitespace by temporarily prepending any character.
	        // \uFEFF has the potential advantage of being zero-width/invisible.
	        // UglifyJS drops U+FEFF chars when parsing, so use String.fromCharCode
	        // in hopes that this is preserved even if "\uFEFF" is transformed to
	        // the actual Unicode character (by Babel, for example).
	        // https://github.com/mishoo/UglifyJS2/blob/v2.4.20/lib/parse.js#L216
	        node.innerHTML = String.fromCharCode(0xfeff) + html;

	        // deleteData leaves an empty `TextNode` which offsets the index of all
	        // children. Definitely want to avoid this.
	        var textNode = node.firstChild;
	        if (textNode.data.length === 1) {
	          node.removeChild(textNode);
	        } else {
	          textNode.deleteData(0, 1);
	        }
	      } else {
	        node.innerHTML = html;
	      }
	    };
	  }
	  testElement = null;
	}

	module.exports = setInnerHTML;

/***/ }),
/* 150 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';

	exports.__esModule = true;

	var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol ? "symbol" : typeof obj; };

	var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

	var _invariant = __webpack_require__(29);

	var _invariant2 = _interopRequireDefault(_invariant);

	var _react = __webpack_require__(4);

	var _react2 = _interopRequireDefault(_react);

	var _deprecateObjectProperties = __webpack_require__(151);

	var _deprecateObjectProperties2 = _interopRequireDefault(_deprecateObjectProperties);

	var _getRouteParams = __webpack_require__(901);

	var _getRouteParams2 = _interopRequireDefault(_getRouteParams);

	var _RouteUtils = __webpack_require__(66);

	var _routerWarning = __webpack_require__(25);

	var _routerWarning2 = _interopRequireDefault(_routerWarning);

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

	var _React$PropTypes = _react2.default.PropTypes;
	var array = _React$PropTypes.array;
	var func = _React$PropTypes.func;
	var object = _React$PropTypes.object;

	/**
	 * A <RouterContext> renders the component tree for a given router state
	 * and sets the history object and the current location in context.
	 */

	var RouterContext = _react2.default.createClass({
	  displayName: 'RouterContext',


	  propTypes: {
	    history: object,
	    router: object.isRequired,
	    location: object.isRequired,
	    routes: array.isRequired,
	    params: object.isRequired,
	    components: array.isRequired,
	    createElement: func.isRequired
	  },

	  getDefaultProps: function getDefaultProps() {
	    return {
	      createElement: _react2.default.createElement
	    };
	  },


	  childContextTypes: {
	    history: object,
	    location: object.isRequired,
	    router: object.isRequired
	  },

	  getChildContext: function getChildContext() {
	    var _props = this.props;
	    var router = _props.router;
	    var history = _props.history;
	    var location = _props.location;

	    if (!router) {
	      (undefined) !== 'production' ? (0, _routerWarning2.default)(false, '`<RouterContext>` expects a `router` rather than a `history`') : void 0;

	      router = _extends({}, history, {
	        setRouteLeaveHook: history.listenBeforeLeavingRoute
	      });
	      delete router.listenBeforeLeavingRoute;
	    }

	    if ((undefined) !== 'production') {
	      location = (0, _deprecateObjectProperties2.default)(location, '`context.location` is deprecated, please use a route component\'s `props.location` instead. http://tiny.cc/router-accessinglocation');
	    }

	    return { history: history, location: location, router: router };
	  },
	  createElement: function createElement(component, props) {
	    return component == null ? null : this.props.createElement(component, props);
	  },
	  render: function render() {
	    var _this = this;

	    var _props2 = this.props;
	    var history = _props2.history;
	    var location = _props2.location;
	    var routes = _props2.routes;
	    var params = _props2.params;
	    var components = _props2.components;

	    var element = null;

	    if (components) {
	      element = components.reduceRight(function (element, components, index) {
	        if (components == null) return element; // Don't create new children; use the grandchildren.

	        var route = routes[index];
	        var routeParams = (0, _getRouteParams2.default)(route, params);
	        var props = {
	          history: history,
	          location: location,
	          params: params,
	          route: route,
	          routeParams: routeParams,
	          routes: routes
	        };

	        if ((0, _RouteUtils.isReactChildren)(element)) {
	          props.children = element;
	        } else if (element) {
	          for (var prop in element) {
	            if (Object.prototype.hasOwnProperty.call(element, prop)) props[prop] = element[prop];
	          }
	        }

	        if ((typeof components === 'undefined' ? 'undefined' : _typeof(components)) === 'object') {
	          var elements = {};

	          for (var key in components) {
	            if (Object.prototype.hasOwnProperty.call(components, key)) {
	              // Pass through the key as a prop to createElement to allow
	              // custom createElement functions to know which named component
	              // they're rendering, for e.g. matching up to fetched data.
	              elements[key] = _this.createElement(components[key], _extends({
	                key: key }, props));
	            }
	          }

	          return elements;
	        }

	        return _this.createElement(components, props);
	      }, element);
	    }

	    !(element === null || element === false || _react2.default.isValidElement(element)) ? (undefined) !== 'production' ? (0, _invariant2.default)(false, 'The root route must render a single element') : (0, _invariant2.default)(false) : void 0;

	    return element;
	  }
	});

	exports.default = RouterContext;
	module.exports = exports['default'];

/***/ }),
/* 151 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';

	exports.__esModule = true;
	exports.canUseMembrane = undefined;

	var _routerWarning = __webpack_require__(25);

	var _routerWarning2 = _interopRequireDefault(_routerWarning);

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

	var canUseMembrane = exports.canUseMembrane = false;

	// No-op by default.
	var deprecateObjectProperties = function deprecateObjectProperties(object) {
	  return object;
	};

	if ((undefined) !== 'production') {
	  try {
	    if (Object.defineProperty({}, 'x', {
	      get: function get() {
	        return true;
	      }
	    }).x) {
	      exports.canUseMembrane = canUseMembrane = true;
	    }
	    /* eslint-disable no-empty */
	  } catch (e) {}
	  /* eslint-enable no-empty */

	  if (canUseMembrane) {
	    deprecateObjectProperties = function deprecateObjectProperties(object, message) {
	      // Wrap the deprecated object in a membrane to warn on property access.
	      var membrane = {};

	      var _loop = function _loop(prop) {
	        if (!Object.prototype.hasOwnProperty.call(object, prop)) {
	          return 'continue';
	        }

	        if (typeof object[prop] === 'function') {
	          // Can't use fat arrow here because of use of arguments below.
	          membrane[prop] = function () {
	            (undefined) !== 'production' ? (0, _routerWarning2.default)(false, message) : void 0;
	            return object[prop].apply(object, arguments);
	          };
	          return 'continue';
	        }

	        // These properties are non-enumerable to prevent React dev tools from
	        // seeing them and causing spurious warnings when accessing them. In
	        // principle this could be done with a proxy, but support for the
	        // ownKeys trap on proxies is not universal, even among browsers that
	        // otherwise support proxies.
	        Object.defineProperty(membrane, prop, {
	          get: function get() {
	            (undefined) !== 'production' ? (0, _routerWarning2.default)(false, message) : void 0;
	            return object[prop];
	          }
	        });
	      };

	      for (var prop in object) {
	        var _ret = _loop(prop);

	        if (_ret === 'continue') continue;
	      }

	      return membrane;
	    };
	  }
	}

	exports.default = deprecateObjectProperties;

/***/ }),
/* 152 */
/***/ (function(module, exports, __webpack_require__) {

	/**
	 * Copyright (c) 2013-present, Facebook, Inc.
	 *
	 * This source code is licensed under the MIT license found in the
	 * LICENSE file in the root directory of this source tree.
	 *
	 * 
	 */

	'use strict';

	var canDefineProperty = false;
	if ((undefined) !== 'production') {
	  try {
	    // $FlowFixMe https://github.com/facebook/flow/issues/285
	    Object.defineProperty({}, 'x', { get: function () {} });
	    canDefineProperty = true;
	  } catch (x) {
	    // IE will fail on defineProperty
	  }
	}

	module.exports = canDefineProperty;

/***/ }),
/* 153 */
/***/ (function(module, exports, __webpack_require__) {

	/**
	 * Autogenerated by Avro
	 * 
	 * DO NOT EDIT DIRECTLY
	 */

	var inventory_MenuSection = __webpack_require__(402);
	var base_Reference = __webpack_require__(5);

	/**
	* @constructor
	* @memberof inventory
	*/
	var Category = function() {
	  this._class_ = Category;
	  this.id = undefined;
	  this.name = undefined;
	  this.sortOrder = undefined;
	  this.items = undefined;
	  this.deleted = undefined;
	  this.modifiedTime = undefined;
	  this.canonical = undefined;
	  this.menuSection = undefined;
	};


	/**
	* Set the field value
	* Unique identifier
	*
	* @memberof inventory.Category
	* @param {String} id 
	*/
	Category.prototype.setId = function(id) {
	  this.id = id;
	};

	/**
	* Get the field value
	* Unique identifier
	* @memberof inventory.Category
	* @return {String} 
	*/
	Category.prototype.getId = function() {
	  return this.id;
	};

	/**
	* Set the field value
	* The name of the category which will appear in Clover Register App.
	*
	* @memberof inventory.Category
	* @param {String} name 
	*/
	Category.prototype.setName = function(name) {
	  this.name = name;
	};

	/**
	* Get the field value
	* The name of the category which will appear in Clover Register App.
	* @memberof inventory.Category
	* @return {String} 
	*/
	Category.prototype.getName = function() {
	  return this.name;
	};

	/**
	* Set the field value
	* Integer used to determine how this category is sorted against other categories.
	*
	* @memberof inventory.Category
	* @param {Null|Number} sortOrder must be an integer
	*/
	Category.prototype.setSortOrder = function(sortOrder) {
	  this.sortOrder = sortOrder;
	};

	/**
	* Get the field value
	* Integer used to determine how this category is sorted against other categories.
	* @memberof inventory.Category
	* @return {Null|Number} must be an integer
	*/
	Category.prototype.getSortOrder = function() {
	  return this.sortOrder;
	};

	/**
	* Set the field value
	* Ordered list of items associated with this category.
	*
	* @memberof inventory.Category
	* @param {Null|Array.<base.Reference>} items An array of 
	*/
	Category.prototype.setItems = function(items) {
	  this.items = items;
	};

	/**
	* Get the field value
	* Ordered list of items associated with this category.
	* @memberof inventory.Category
	* @return {Null|Array.<base.Reference>} An array of 
	*/
	Category.prototype.getItems = function() {
	  return this.items;
	};

	/**
	* Set the field value
	* Whether the category has been deleted.
	*
	* @memberof inventory.Category
	* @param {Null|Boolean} deleted 
	*/
	Category.prototype.setDeleted = function(deleted) {
	  this.deleted = deleted;
	};

	/**
	* Get the field value
	* Whether the category has been deleted.
	* @memberof inventory.Category
	* @return {Null|Boolean} 
	*/
	Category.prototype.getDeleted = function() {
	  return this.deleted;
	};

	/**
	* Set the field value
	* The time this category was last modified
	*
	* @memberof inventory.Category
	* @param {Null|Number} modifiedTime must be a long integer
	*/
	Category.prototype.setModifiedTime = function(modifiedTime) {
	  this.modifiedTime = modifiedTime;
	};

	/**
	* Get the field value
	* The time this category was last modified
	* @memberof inventory.Category
	* @return {Null|Number} must be a long integer
	*/
	Category.prototype.getModifiedTime = function() {
	  return this.modifiedTime;
	};

	/**
	* Set the field value
	* Reference to canonical category
	*
	* @memberof inventory.Category
	* @param {Null|base.Reference} canonical 
	*/
	Category.prototype.setCanonical = function(canonical) {
	  this.canonical = canonical;
	};

	/**
	* Get the field value
	* Reference to canonical category
	* @memberof inventory.Category
	* @return {Null|base.Reference} 
	*/
	Category.prototype.getCanonical = function() {
	  return this.canonical;
	};

	/**
	* Set the field value
	* Menu Section attribute that can be expanded to menu section specific attributes
	*
	* @memberof inventory.Category
	* @param {Null|inventory.MenuSection} menuSection 
	*/
	Category.prototype.setMenuSection = function(menuSection) {
	  this.menuSection = menuSection;
	};

	/**
	* Get the field value
	* Menu Section attribute that can be expanded to menu section specific attributes
	* @memberof inventory.Category
	* @return {Null|inventory.MenuSection} 
	*/
	Category.prototype.getMenuSection = function() {
	  return this.menuSection;
	};

	/**
	* @memberof inventory.Category
	* @private
	*/
	Category.prototype.getMetaInfo = function(fieldName) {
	  var curclass = this._class_;
	  do {
	    var fieldMetaInfo = curclass._meta_.fields[fieldName];
	    if(fieldMetaInfo) {
	      return fieldMetaInfo;
	    }
	    if(curclass._meta_._superMeta_) {
	      curclass = curclass._meta_._superMeta_._class_;
	    } else {
	      curclass = null;
	    }
	  } while(curclass);
	  return null;
	};

	Category.prototype.toString = function() {
	  return JSON.stringify(this);
	};

	Category._meta_ =  {fields:  {}};
	Category._meta_._class_ =  Category;
	Category._meta_.fields["id"] = {};
	Category._meta_.fields["id"].type = String;
	Category._meta_.fields["name"] = {};
	Category._meta_.fields["name"].type = String;
	Category._meta_.fields["sortOrder"] = {};
	Category._meta_.fields["sortOrder"].type = Number;
	Category._meta_.fields["items"] = {};
	Category._meta_.fields["items"].type = Array;
	Category._meta_.fields["items"].elementType = base_Reference;
	Category._meta_.fields["deleted"] = {};
	Category._meta_.fields["deleted"].type = Boolean;
	Category._meta_.fields["modifiedTime"] = {};
	Category._meta_.fields["modifiedTime"].type = Number;
	Category._meta_.fields["canonical"] = {};
	Category._meta_.fields["canonical"].type = base_Reference;
	Category._meta_.fields["menuSection"] = {};
	Category._meta_.fields["menuSection"].type = inventory_MenuSection;

	//
	// Expose the module.
	//
	if (true) {
	module.exports = Category;
	}



/***/ }),
/* 154 */
/***/ (function(module, exports, __webpack_require__) {

	/**
	 * Autogenerated by Avro
	 * 
	 * DO NOT EDIT DIRECTLY
	 */

	var inventory_MenuModifierGroup = __webpack_require__(401);
	var base_Reference = __webpack_require__(5);
	var inventory_Modifier = __webpack_require__(239);

	/**
	* @constructor
	* @memberof inventory
	*/
	var ModifierGroup = function() {
	  this._class_ = ModifierGroup;
	  this.id = undefined;
	  this.name = undefined;
	  this.alternateName = undefined;
	  this.minRequired = undefined;
	  this.maxAllowed = undefined;
	  this.showByDefault = true;
	  this.modifiers = undefined;
	  this.modifierIds = undefined;
	  this.items = undefined;
	  this.menuModifierGroup = undefined;
	  this.sortOrder = undefined;
	};


	/**
	* Set the field value
	* Unique identifier
	*
	* @memberof inventory.ModifierGroup
	* @param {String} id 
	*/
	ModifierGroup.prototype.setId = function(id) {
	  this.id = id;
	};

	/**
	* Get the field value
	* Unique identifier
	* @memberof inventory.ModifierGroup
	* @return {String} 
	*/
	ModifierGroup.prototype.getId = function() {
	  return this.id;
	};

	/**
	* Set the field value
	* Name of the modifier group
	*
	* @memberof inventory.ModifierGroup
	* @param {String} name 
	*/
	ModifierGroup.prototype.setName = function(name) {
	  this.name = name;
	};

	/**
	* Get the field value
	* Name of the modifier group
	* @memberof inventory.ModifierGroup
	* @return {String} 
	*/
	ModifierGroup.prototype.getName = function() {
	  return this.name;
	};

	/**
	* Set the field value
	* @memberof inventory.ModifierGroup
	* @param {Null|String} alternateName 
	*/
	ModifierGroup.prototype.setAlternateName = function(alternateName) {
	  this.alternateName = alternateName;
	};

	/**
	* Get the field value
	* @memberof inventory.ModifierGroup
	* @return {Null|String} 
	*/
	ModifierGroup.prototype.getAlternateName = function() {
	  return this.alternateName;
	};

	/**
	* Set the field value
	* The minimum amount of modifiers from this group that must be applied to associated lineItems when using Register
	*
	* @memberof inventory.ModifierGroup
	* @param {Null|Number} minRequired must be an integer
	*/
	ModifierGroup.prototype.setMinRequired = function(minRequired) {
	  this.minRequired = minRequired;
	};

	/**
	* Get the field value
	* The minimum amount of modifiers from this group that must be applied to associated lineItems when using Register
	* @memberof inventory.ModifierGroup
	* @return {Null|Number} must be an integer
	*/
	ModifierGroup.prototype.getMinRequired = function() {
	  return this.minRequired;
	};

	/**
	* Set the field value
	* The maximum amount of modifiers from this group that can be applied to associated lineItems when using Register
	*
	* @memberof inventory.ModifierGroup
	* @param {Null|Number} maxAllowed must be an integer
	*/
	ModifierGroup.prototype.setMaxAllowed = function(maxAllowed) {
	  this.maxAllowed = maxAllowed;
	};

	/**
	* Get the field value
	* The maximum amount of modifiers from this group that can be applied to associated lineItems when using Register
	* @memberof inventory.ModifierGroup
	* @return {Null|Number} must be an integer
	*/
	ModifierGroup.prototype.getMaxAllowed = function() {
	  return this.maxAllowed;
	};

	/**
	* Set the field value
	* Whether employees will be automatically prompted to add modifiers from this category when using Register
	*
	* @memberof inventory.ModifierGroup
	* @param {Null|Boolean} showByDefault 
	*/
	ModifierGroup.prototype.setShowByDefault = function(showByDefault) {
	  this.showByDefault = showByDefault;
	};

	/**
	* Get the field value
	* Whether employees will be automatically prompted to add modifiers from this category when using Register
	* @memberof inventory.ModifierGroup
	* @return {Null|Boolean} 
	*/
	ModifierGroup.prototype.getShowByDefault = function() {
	  return this.showByDefault;
	};

	/**
	* Set the field value
	* @memberof inventory.ModifierGroup
	* @param {Null|Array.<inventory.Modifier>} modifiers An array of 
	*/
	ModifierGroup.prototype.setModifiers = function(modifiers) {
	  this.modifiers = modifiers;
	};

	/**
	* Get the field value
	* @memberof inventory.ModifierGroup
	* @return {Null|Array.<inventory.Modifier>} An array of 
	*/
	ModifierGroup.prototype.getModifiers = function() {
	  return this.modifiers;
	};

	/**
	* Set the field value
	* An ordered, comma-separated list of modifier ids in this group. (READ ONLY)
	*
	* @memberof inventory.ModifierGroup
	* @param {Null|String} modifierIds 
	*/
	ModifierGroup.prototype.setModifierIds = function(modifierIds) {
	  this.modifierIds = modifierIds;
	};

	/**
	* Get the field value
	* An ordered, comma-separated list of modifier ids in this group. (READ ONLY)
	* @memberof inventory.ModifierGroup
	* @return {Null|String} 
	*/
	ModifierGroup.prototype.getModifierIds = function() {
	  return this.modifierIds;
	};

	/**
	* Set the field value
	* @memberof inventory.ModifierGroup
	* @param {Null|Array.<base.Reference>} items An array of 
	*/
	ModifierGroup.prototype.setItems = function(items) {
	  this.items = items;
	};

	/**
	* Get the field value
	* @memberof inventory.ModifierGroup
	* @return {Null|Array.<base.Reference>} An array of 
	*/
	ModifierGroup.prototype.getItems = function() {
	  return this.items;
	};

	/**
	* Set the field value
	* Menu Modifier Group attribute that can be expanded to menu group specific attributes
	*
	* @memberof inventory.ModifierGroup
	* @param {Null|inventory.MenuModifierGroup} menuModifierGroup 
	*/
	ModifierGroup.prototype.setMenuModifierGroup = function(menuModifierGroup) {
	  this.menuModifierGroup = menuModifierGroup;
	};

	/**
	* Get the field value
	* Menu Modifier Group attribute that can be expanded to menu group specific attributes
	* @memberof inventory.ModifierGroup
	* @return {Null|inventory.MenuModifierGroup} 
	*/
	ModifierGroup.prototype.getMenuModifierGroup = function() {
	  return this.menuModifierGroup;
	};

	/**
	* Set the field value
	* The ordinal value used to determine where in an ordered list this modifier group should appear relative to others.
	*
	* @memberof inventory.ModifierGroup
	* @param {Null|Number} sortOrder must be an integer
	*/
	ModifierGroup.prototype.setSortOrder = function(sortOrder) {
	  this.sortOrder = sortOrder;
	};

	/**
	* Get the field value
	* The ordinal value used to determine where in an ordered list this modifier group should appear relative to others.
	* @memberof inventory.ModifierGroup
	* @return {Null|Number} must be an integer
	*/
	ModifierGroup.prototype.getSortOrder = function() {
	  return this.sortOrder;
	};

	/**
	* @memberof inventory.ModifierGroup
	* @private
	*/
	ModifierGroup.prototype.getMetaInfo = function(fieldName) {
	  var curclass = this._class_;
	  do {
	    var fieldMetaInfo = curclass._meta_.fields[fieldName];
	    if(fieldMetaInfo) {
	      return fieldMetaInfo;
	    }
	    if(curclass._meta_._superMeta_) {
	      curclass = curclass._meta_._superMeta_._class_;
	    } else {
	      curclass = null;
	    }
	  } while(curclass);
	  return null;
	};

	ModifierGroup.prototype.toString = function() {
	  return JSON.stringify(this);
	};

	ModifierGroup._meta_ =  {fields:  {}};
	ModifierGroup._meta_._class_ =  ModifierGroup;
	ModifierGroup._meta_.fields["id"] = {};
	ModifierGroup._meta_.fields["id"].type = String;
	ModifierGroup._meta_.fields["name"] = {};
	ModifierGroup._meta_.fields["name"].type = String;
	ModifierGroup._meta_.fields["alternateName"] = {};
	ModifierGroup._meta_.fields["alternateName"].type = String;
	ModifierGroup._meta_.fields["minRequired"] = {};
	ModifierGroup._meta_.fields["minRequired"].type = Number;
	ModifierGroup._meta_.fields["maxAllowed"] = {};
	ModifierGroup._meta_.fields["maxAllowed"].type = Number;
	ModifierGroup._meta_.fields["showByDefault"] = {};
	ModifierGroup._meta_.fields["showByDefault"].type = Boolean;
	ModifierGroup._meta_.fields["modifiers"] = {};
	ModifierGroup._meta_.fields["modifiers"].type = Array;
	ModifierGroup._meta_.fields["modifiers"].elementType = inventory_Modifier;
	ModifierGroup._meta_.fields["modifierIds"] = {};
	ModifierGroup._meta_.fields["modifierIds"].type = String;
	ModifierGroup._meta_.fields["items"] = {};
	ModifierGroup._meta_.fields["items"].type = Array;
	ModifierGroup._meta_.fields["items"].elementType = base_Reference;
	ModifierGroup._meta_.fields["menuModifierGroup"] = {};
	ModifierGroup._meta_.fields["menuModifierGroup"].type = inventory_MenuModifierGroup;
	ModifierGroup._meta_.fields["sortOrder"] = {};
	ModifierGroup._meta_.fields["sortOrder"].type = Number;

	//
	// Expose the module.
	//
	if (true) {
	module.exports = ModifierGroup;
	}



/***/ }),
/* 155 */
/***/ (function(module, exports, __webpack_require__) {

	/**
	 * Autogenerated by Avro
	 * 
	 * DO NOT EDIT DIRECTLY
	 */

	var base_Reference = __webpack_require__(5);

	/**
	* @constructor
	* @memberof inventory
	*/
	var Tag = function() {
	  this._class_ = Tag;
	  this.id = undefined;
	  this.name = "";
	  this.showInReporting = false;
	  this.items = undefined;
	  this.printers = undefined;
	};


	/**
	* Set the field value
	* Unique identifier
	*
	* @memberof inventory.Tag
	* @param {String} id 
	*/
	Tag.prototype.setId = function(id) {
	  this.id = id;
	};

	/**
	* Get the field value
	* Unique identifier
	* @memberof inventory.Tag
	* @return {String} 
	*/
	Tag.prototype.getId = function() {
	  return this.id;
	};

	/**
	* Set the field value
	* Tag name
	*
	* @memberof inventory.Tag
	* @param {String|Null} name 
	*/
	Tag.prototype.setName = function(name) {
	  this.name = name;
	};

	/**
	* Get the field value
	* Tag name
	* @memberof inventory.Tag
	* @return {String|Null} 
	*/
	Tag.prototype.getName = function() {
	  return this.name;
	};

	/**
	* Set the field value
	* True if tag is a summary label in the reporting app
	*
	* @memberof inventory.Tag
	* @param {Boolean|Null} showInReporting 
	*/
	Tag.prototype.setShowInReporting = function(showInReporting) {
	  this.showInReporting = showInReporting;
	};

	/**
	* Get the field value
	* True if tag is a summary label in the reporting app
	* @memberof inventory.Tag
	* @return {Boolean|Null} 
	*/
	Tag.prototype.getShowInReporting = function() {
	  return this.showInReporting;
	};

	/**
	* Set the field value
	* Items associated with this tag
	*
	* @memberof inventory.Tag
	* @param {Null|Array.<base.Reference>} items An array of 
	*/
	Tag.prototype.setItems = function(items) {
	  this.items = items;
	};

	/**
	* Get the field value
	* Items associated with this tag
	* @memberof inventory.Tag
	* @return {Null|Array.<base.Reference>} An array of 
	*/
	Tag.prototype.getItems = function() {
	  return this.items;
	};

	/**
	* Set the field value
	* Printers associated with this tag
	*
	* @memberof inventory.Tag
	* @param {Null|Array.<base.Reference>} printers An array of 
	*/
	Tag.prototype.setPrinters = function(printers) {
	  this.printers = printers;
	};

	/**
	* Get the field value
	* Printers associated with this tag
	* @memberof inventory.Tag
	* @return {Null|Array.<base.Reference>} An array of 
	*/
	Tag.prototype.getPrinters = function() {
	  return this.printers;
	};

	/**
	* @memberof inventory.Tag
	* @private
	*/
	Tag.prototype.getMetaInfo = function(fieldName) {
	  var curclass = this._class_;
	  do {
	    var fieldMetaInfo = curclass._meta_.fields[fieldName];
	    if(fieldMetaInfo) {
	      return fieldMetaInfo;
	    }
	    if(curclass._meta_._superMeta_) {
	      curclass = curclass._meta_._superMeta_._class_;
	    } else {
	      curclass = null;
	    }
	  } while(curclass);
	  return null;
	};

	Tag.prototype.toString = function() {
	  return JSON.stringify(this);
	};

	Tag._meta_ =  {fields:  {}};
	Tag._meta_._class_ =  Tag;
	Tag._meta_.fields["id"] = {};
	Tag._meta_.fields["id"].type = String;
	Tag._meta_.fields["name"] = {};
	Tag._meta_.fields["name"].type = String;
	Tag._meta_.fields["showInReporting"] = {};
	Tag._meta_.fields["showInReporting"].type = Boolean;
	Tag._meta_.fields["items"] = {};
	Tag._meta_.fields["items"].type = Array;
	Tag._meta_.fields["items"].elementType = base_Reference;
	Tag._meta_.fields["printers"] = {};
	Tag._meta_.fields["printers"].type = Array;
	Tag._meta_.fields["printers"].elementType = base_Reference;

	//
	// Expose the module.
	//
	if (true) {
	module.exports = Tag;
	}



/***/ }),
/* 156 */
/***/ (function(module, exports, __webpack_require__) {

	/**
	 * Autogenerated by Avro
	 * 
	 * DO NOT EDIT DIRECTLY
	 */


	/**
	* @constructor
	* @memberof order
	*/
	var DisplayDiscount = function() {
	  this._class_ = DisplayDiscount;
	  this.id = undefined;
	  this.lineItemId = undefined;
	  this.name = undefined;
	  this.amount = undefined;
	  this.percentage = undefined;
	};


	/**
	* Set the field value
	* Unique identifier
	*
	* @memberof order.DisplayDiscount
	* @param {String} id 
	*/
	DisplayDiscount.prototype.setId = function(id) {
	  this.id = id;
	};

	/**
	* Get the field value
	* Unique identifier
	* @memberof order.DisplayDiscount
	* @return {String} 
	*/
	DisplayDiscount.prototype.getId = function() {
	  return this.id;
	};

	/**
	* Set the field value
	* The lineItem with which the discount is associated
	*
	* @memberof order.DisplayDiscount
	* @param {String} lineItemId 
	*/
	DisplayDiscount.prototype.setLineItemId = function(lineItemId) {
	  this.lineItemId = lineItemId;
	};

	/**
	* Get the field value
	* The lineItem with which the discount is associated
	* @memberof order.DisplayDiscount
	* @return {String} 
	*/
	DisplayDiscount.prototype.getLineItemId = function() {
	  return this.lineItemId;
	};

	/**
	* Set the field value
	* Name of the discount
	*
	* @memberof order.DisplayDiscount
	* @param {String} name 
	*/
	DisplayDiscount.prototype.setName = function(name) {
	  this.name = name;
	};

	/**
	* Get the field value
	* Name of the discount
	* @memberof order.DisplayDiscount
	* @return {String} 
	*/
	DisplayDiscount.prototype.getName = function() {
	  return this.name;
	};

	/**
	* Set the field value
	* Formatted discount amount
	*
	* @memberof order.DisplayDiscount
	* @param {String} amount 
	*/
	DisplayDiscount.prototype.setAmount = function(amount) {
	  this.amount = amount;
	};

	/**
	* Get the field value
	* Formatted discount amount
	* @memberof order.DisplayDiscount
	* @return {String} 
	*/
	DisplayDiscount.prototype.getAmount = function() {
	  return this.amount;
	};

	/**
	* Set the field value
	* Discount amount in percent
	*
	* @memberof order.DisplayDiscount
	* @param {String} percentage 
	*/
	DisplayDiscount.prototype.setPercentage = function(percentage) {
	  this.percentage = percentage;
	};

	/**
	* Get the field value
	* Discount amount in percent
	* @memberof order.DisplayDiscount
	* @return {String} 
	*/
	DisplayDiscount.prototype.getPercentage = function() {
	  return this.percentage;
	};

	/**
	* @memberof order.DisplayDiscount
	* @private
	*/
	DisplayDiscount.prototype.getMetaInfo = function(fieldName) {
	  var curclass = this._class_;
	  do {
	    var fieldMetaInfo = curclass._meta_.fields[fieldName];
	    if(fieldMetaInfo) {
	      return fieldMetaInfo;
	    }
	    if(curclass._meta_._superMeta_) {
	      curclass = curclass._meta_._superMeta_._class_;
	    } else {
	      curclass = null;
	    }
	  } while(curclass);
	  return null;
	};

	DisplayDiscount.prototype.toString = function() {
	  return JSON.stringify(this);
	};

	DisplayDiscount._meta_ =  {fields:  {}};
	DisplayDiscount._meta_._class_ =  DisplayDiscount;
	DisplayDiscount._meta_.fields["id"] = {};
	DisplayDiscount._meta_.fields["id"].type = String;
	DisplayDiscount._meta_.fields["lineItemId"] = {};
	DisplayDiscount._meta_.fields["lineItemId"].type = String;
	DisplayDiscount._meta_.fields["name"] = {};
	DisplayDiscount._meta_.fields["name"].type = String;
	DisplayDiscount._meta_.fields["amount"] = {};
	DisplayDiscount._meta_.fields["amount"].type = String;
	DisplayDiscount._meta_.fields["percentage"] = {};
	DisplayDiscount._meta_.fields["percentage"].type = String;

	//
	// Expose the module.
	//
	if (true) {
	module.exports = DisplayDiscount;
	}



/***/ }),
/* 157 */
/***/ (function(module, exports, __webpack_require__) {

	/**
	 * Autogenerated by Avro
	 * 
	 * DO NOT EDIT DIRECTLY
	 */

	var order_Modification = __webpack_require__(412);
	var inventory_TaxRate = __webpack_require__(117);
	var payments_LineItemPayment = __webpack_require__(163);
	var order_Discount = __webpack_require__(242);
	var base_Reference = __webpack_require__(5);
	var payments_Refund = __webpack_require__(26);

	/**
	* @constructor
	* @memberof order
	*/
	var LineItem = function() {
	  this._class_ = LineItem;
	  this.id = undefined;
	  this.item = undefined;
	  this.name = undefined;
	  this.alternateName = undefined;
	  this.price = undefined;
	  this.priceWithModifiers = undefined;
	  this.priceWithModifiersAndItemAndOrderDiscounts = undefined;
	  this.unitQty = undefined;
	  this.unitName = undefined;
	  this.itemCode = undefined;
	  this.note = undefined;
	  this.printed = false;
	  this.exchangedLineItem = undefined;
	  this.binName = undefined;
	  this.userData = undefined;
	  this.createdTime = undefined;
	  this.orderClientCreatedTime = undefined;
	  this.discounts = undefined;
	  this.orderLevelDiscounts = undefined;
	  this.discountAmount = undefined;
	  this.orderLevelDiscountAmount = undefined;
	  this.exchanged = false;
	  this.modifications = undefined;
	  this.refunded = false;
	  this.refund = undefined;
	  this.isRevenue = false;
	  this.taxRates = undefined;
	  this.payments = undefined;
	  this.revenueAmount = undefined;
	  this.quantitySold = undefined;
	  this.printGroup = undefined;
	};


	/**
	* Set the field value
	* Unique identifier.
	*
	* @memberof order.LineItem
	* @param {String} id 
	*/
	LineItem.prototype.setId = function(id) {
	  this.id = id;
	};

	/**
	* Get the field value
	* Unique identifier.
	* @memberof order.LineItem
	* @return {String} 
	*/
	LineItem.prototype.getId = function() {
	  return this.id;
	};

	/**
	* Set the field value
	* A reference to the inventory item that was used to create this line item. Note that since this a reference the item can be changed and deleted any time such that it no longer matches this line item.
	*
	* @memberof order.LineItem
	* @param {Null|base.Reference} item 
	*/
	LineItem.prototype.setItem = function(item) {
	  this.item = item;
	};

	/**
	* Get the field value
	* A reference to the inventory item that was used to create this line item. Note that since this a reference the item can be changed and deleted any time such that it no longer matches this line item.
	* @memberof order.LineItem
	* @return {Null|base.Reference} 
	*/
	LineItem.prototype.getItem = function() {
	  return this.item;
	};

	/**
	* Set the field value
	* Line item name.
	*
	* @memberof order.LineItem
	* @param {Null|String} name 
	*/
	LineItem.prototype.setName = function(name) {
	  this.name = name;
	};

	/**
	* Get the field value
	* Line item name.
	* @memberof order.LineItem
	* @return {Null|String} 
	*/
	LineItem.prototype.getName = function() {
	  return this.name;
	};

	/**
	* Set the field value
	* Alternate name of the line item.
	*
	* @memberof order.LineItem
	* @param {Null|String} alternateName 
	*/
	LineItem.prototype.setAlternateName = function(alternateName) {
	  this.alternateName = alternateName;
	};

	/**
	* Get the field value
	* Alternate name of the line item.
	* @memberof order.LineItem
	* @return {Null|String} 
	*/
	LineItem.prototype.getAlternateName = function() {
	  return this.alternateName;
	};

	/**
	* Set the field value
	* Price of the item, typically in cents of merchant currency. When unit quantity is not null then this is the price for a single unit and is not the complete price.
	*
	* @memberof order.LineItem
	* @param {Number} price must be a long integer
	*/
	LineItem.prototype.setPrice = function(price) {
	  this.price = price;
	};

	/**
	* Get the field value
	* Price of the item, typically in cents of merchant currency. When unit quantity is not null then this is the price for a single unit and is not the complete price.
	* @memberof order.LineItem
	* @return {Number} must be a long integer
	*/
	LineItem.prototype.getPrice = function() {
	  return this.price;
	};

	/**
	* Set the field value
	* Price of item after adding all modifications. This is used only for reporting.
	*
	* @memberof order.LineItem
	* @param {Number} priceWithModifiers must be a long integer
	*/
	LineItem.prototype.setPriceWithModifiers = function(priceWithModifiers) {
	  this.priceWithModifiers = priceWithModifiers;
	};

	/**
	* Get the field value
	* Price of item after adding all modifications. This is used only for reporting.
	* @memberof order.LineItem
	* @return {Number} must be a long integer
	*/
	LineItem.prototype.getPriceWithModifiers = function() {
	  return this.priceWithModifiers;
	};

	/**
	* Set the field value
	* Price of item after adding all modifications and subtracting all line item and order level discounts. This is used only for reporting.
	*
	* @memberof order.LineItem
	* @param {Number} priceWithModifiersAndItemAndOrderDiscounts must be a long integer
	*/
	LineItem.prototype.setPriceWithModifiersAndItemAndOrderDiscounts = function(priceWithModifiersAndItemAndOrderDiscounts) {
	  this.priceWithModifiersAndItemAndOrderDiscounts = priceWithModifiersAndItemAndOrderDiscounts;
	};

	/**
	* Get the field value
	* Price of item after adding all modifications and subtracting all line item and order level discounts. This is used only for reporting.
	* @memberof order.LineItem
	* @return {Number} must be a long integer
	*/
	LineItem.prototype.getPriceWithModifiersAndItemAndOrderDiscounts = function() {
	  return this.priceWithModifiersAndItemAndOrderDiscounts;
	};

	/**
	* Set the field value
	* Unit quantity if this line item is priced by quantity, or null if the item is not priced by quantity. The value is a fixed-point integer with scaling factor of 1000 (e.g. if charging by ounces then the value should be set to 2500 for 2.5 ounces). To compute the complete price perform the following calculation: PRICE * (UNIT QTY / 1000).
	*
	* @memberof order.LineItem
	* @param {Null|Number} unitQty must be an integer
	*/
	LineItem.prototype.setUnitQty = function(unitQty) {
	  this.unitQty = unitQty;
	};

	/**
	* Get the field value
	* Unit quantity if this line item is priced by quantity, or null if the item is not priced by quantity. The value is a fixed-point integer with scaling factor of 1000 (e.g. if charging by ounces then the value should be set to 2500 for 2.5 ounces). To compute the complete price perform the following calculation: PRICE * (UNIT QTY / 1000).
	* @memberof order.LineItem
	* @return {Null|Number} must be an integer
	*/
	LineItem.prototype.getUnitQty = function() {
	  return this.unitQty;
	};

	/**
	* Set the field value
	* Unit name (e.g. oz, lb, etc) if priced by unit, otherwise null.
	*
	* @memberof order.LineItem
	* @param {Null|String} unitName 
	*/
	LineItem.prototype.setUnitName = function(unitName) {
	  this.unitName = unitName;
	};

	/**
	* Get the field value
	* Unit name (e.g. oz, lb, etc) if priced by unit, otherwise null.
	* @memberof order.LineItem
	* @return {Null|String} 
	*/
	LineItem.prototype.getUnitName = function() {
	  return this.unitName;
	};

	/**
	* Set the field value
	* @memberof order.LineItem
	* @param {Null|String} itemCode 
	*/
	LineItem.prototype.setItemCode = function(itemCode) {
	  this.itemCode = itemCode;
	};

	/**
	* Get the field value
	* @memberof order.LineItem
	* @return {Null|String} 
	*/
	LineItem.prototype.getItemCode = function() {
	  return this.itemCode;
	};

	/**
	* Set the field value
	* @memberof order.LineItem
	* @param {Null|String} note 
	*/
	LineItem.prototype.setNote = function(note) {
	  this.note = note;
	};

	/**
	* Get the field value
	* @memberof order.LineItem
	* @return {Null|String} 
	*/
	LineItem.prototype.getNote = function() {
	  return this.note;
	};

	/**
	* Set the field value
	* True if this line item has been printed out on an order printer at least once already.
	*
	* @memberof order.LineItem
	* @param {Boolean} printed 
	*/
	LineItem.prototype.setPrinted = function(printed) {
	  this.printed = printed;
	};

	/**
	* Get the field value
	* True if this line item has been printed out on an order printer at least once already.
	* @memberof order.LineItem
	* @return {Boolean} 
	*/
	LineItem.prototype.getPrinted = function() {
	  return this.printed;
	};

	/**
	* Set the field value
	* @memberof order.LineItem
	* @param {Null|base.Reference} exchangedLineItem 
	*/
	LineItem.prototype.setExchangedLineItem = function(exchangedLineItem) {
	  this.exchangedLineItem = exchangedLineItem;
	};

	/**
	* Get the field value
	* @memberof order.LineItem
	* @return {Null|base.Reference} 
	*/
	LineItem.prototype.getExchangedLineItem = function() {
	  return this.exchangedLineItem;
	};

	/**
	* Set the field value
	* @memberof order.LineItem
	* @param {Null|String} binName 
	*/
	LineItem.prototype.setBinName = function(binName) {
	  this.binName = binName;
	};

	/**
	* Get the field value
	* @memberof order.LineItem
	* @return {Null|String} 
	*/
	LineItem.prototype.getBinName = function() {
	  return this.binName;
	};

	/**
	* Set the field value
	* @memberof order.LineItem
	* @param {Null|String} userData 
	*/
	LineItem.prototype.setUserData = function(userData) {
	  this.userData = userData;
	};

	/**
	* Get the field value
	* @memberof order.LineItem
	* @return {Null|String} 
	*/
	LineItem.prototype.getUserData = function() {
	  return this.userData;
	};

	/**
	* Set the field value
	* @memberof order.LineItem
	* @param {Number} createdTime must be a long integer
	*/
	LineItem.prototype.setCreatedTime = function(createdTime) {
	  this.createdTime = createdTime;
	};

	/**
	* Get the field value
	* @memberof order.LineItem
	* @return {Number} must be a long integer
	*/
	LineItem.prototype.getCreatedTime = function() {
	  return this.createdTime;
	};

	/**
	* Set the field value
	* @memberof order.LineItem
	* @param {Number} orderClientCreatedTime must be a long integer
	*/
	LineItem.prototype.setOrderClientCreatedTime = function(orderClientCreatedTime) {
	  this.orderClientCreatedTime = orderClientCreatedTime;
	};

	/**
	* Get the field value
	* @memberof order.LineItem
	* @return {Number} must be a long integer
	*/
	LineItem.prototype.getOrderClientCreatedTime = function() {
	  return this.orderClientCreatedTime;
	};

	/**
	* Set the field value
	* List of discounts applied to the line item. Each line item on an order may have zero or more percentage or amount discounts. Line item discounts are separate from order-level discounts (which are applied to the order subtotal).
	*
	* @memberof order.LineItem
	* @param {Array.<order.Discount>} discounts An array of 
	*/
	LineItem.prototype.setDiscounts = function(discounts) {
	  this.discounts = discounts;
	};

	/**
	* Get the field value
	* List of discounts applied to the line item. Each line item on an order may have zero or more percentage or amount discounts. Line item discounts are separate from order-level discounts (which are applied to the order subtotal).
	* @memberof order.LineItem
	* @return {Array.<order.Discount>} An array of 
	*/
	LineItem.prototype.getDiscounts = function() {
	  return this.discounts;
	};

	/**
	* Set the field value
	* List of order level discounts attributed to this line item. Amounts are rounded to the nearest penny. This is for reporting purposes only. These rounding approximates are not used when calculating the transaction.
	*
	* @memberof order.LineItem
	* @param {Array.<order.Discount>} orderLevelDiscounts An array of 
	*/
	LineItem.prototype.setOrderLevelDiscounts = function(orderLevelDiscounts) {
	  this.orderLevelDiscounts = orderLevelDiscounts;
	};

	/**
	* Get the field value
	* List of order level discounts attributed to this line item. Amounts are rounded to the nearest penny. This is for reporting purposes only. These rounding approximates are not used when calculating the transaction.
	* @memberof order.LineItem
	* @return {Array.<order.Discount>} An array of 
	*/
	LineItem.prototype.getOrderLevelDiscounts = function() {
	  return this.orderLevelDiscounts;
	};

	/**
	* Set the field value
	* Unnamed fixed discount amount in cents. Or, in reporting, this may be the calculated sum of all the line item discounts.
	*
	* @memberof order.LineItem
	* @param {Null|Number} discountAmount must be a long integer
	*/
	LineItem.prototype.setDiscountAmount = function(discountAmount) {
	  this.discountAmount = discountAmount;
	};

	/**
	* Get the field value
	* Unnamed fixed discount amount in cents. Or, in reporting, this may be the calculated sum of all the line item discounts.
	* @memberof order.LineItem
	* @return {Null|Number} must be a long integer
	*/
	LineItem.prototype.getDiscountAmount = function() {
	  return this.discountAmount;
	};

	/**
	* Set the field value
	* The calculated sum of order level discounts attributed, approximately to the nearest cent, to this the line item. This is only used in reporting.
	*
	* @memberof order.LineItem
	* @param {Number} orderLevelDiscountAmount must be a long integer
	*/
	LineItem.prototype.setOrderLevelDiscountAmount = function(orderLevelDiscountAmount) {
	  this.orderLevelDiscountAmount = orderLevelDiscountAmount;
	};

	/**
	* Get the field value
	* The calculated sum of order level discounts attributed, approximately to the nearest cent, to this the line item. This is only used in reporting.
	* @memberof order.LineItem
	* @return {Number} must be a long integer
	*/
	LineItem.prototype.getOrderLevelDiscountAmount = function() {
	  return this.orderLevelDiscountAmount;
	};

	/**
	* Set the field value
	* @memberof order.LineItem
	* @param {Boolean} exchanged 
	*/
	LineItem.prototype.setExchanged = function(exchanged) {
	  this.exchanged = exchanged;
	};

	/**
	* Get the field value
	* @memberof order.LineItem
	* @return {Boolean} 
	*/
	LineItem.prototype.getExchanged = function() {
	  return this.exchanged;
	};

	/**
	* Set the field value
	* List of references to modifications applied to this line item.
	*
	* @memberof order.LineItem
	* @param {Array.<order.Modification>} modifications An array of 
	*/
	LineItem.prototype.setModifications = function(modifications) {
	  this.modifications = modifications;
	};

	/**
	* Get the field value
	* List of references to modifications applied to this line item.
	* @memberof order.LineItem
	* @return {Array.<order.Modification>} An array of 
	*/
	LineItem.prototype.getModifications = function() {
	  return this.modifications;
	};

	/**
	* Set the field value
	* True if this line item has been refunded
	*
	* @memberof order.LineItem
	* @param {Boolean} refunded 
	*/
	LineItem.prototype.setRefunded = function(refunded) {
	  this.refunded = refunded;
	};

	/**
	* Get the field value
	* True if this line item has been refunded
	* @memberof order.LineItem
	* @return {Boolean} 
	*/
	LineItem.prototype.getRefunded = function() {
	  return this.refunded;
	};

	/**
	* Set the field value
	* direct item refund
	*
	* @memberof order.LineItem
	* @param {payments.Refund} refund 
	*/
	LineItem.prototype.setRefund = function(refund) {
	  this.refund = refund;
	};

	/**
	* Get the field value
	* direct item refund
	* @memberof order.LineItem
	* @return {payments.Refund} 
	*/
	LineItem.prototype.getRefund = function() {
	  return this.refund;
	};

	/**
	* Set the field value
	* True if this item should be counted as revenue, for example gift cards and donations would not.
	*
	* @memberof order.LineItem
	* @param {Boolean} isRevenue 
	*/
	LineItem.prototype.setIsRevenue = function(isRevenue) {
	  this.isRevenue = isRevenue;
	};

	/**
	* Get the field value
	* True if this item should be counted as revenue, for example gift cards and donations would not.
	* @memberof order.LineItem
	* @return {Boolean} 
	*/
	LineItem.prototype.getIsRevenue = function() {
	  return this.isRevenue;
	};

	/**
	* Set the field value
	* Tax rates that apply to this line item
	*
	* @memberof order.LineItem
	* @param {Array.<inventory.TaxRate>} taxRates An array of 
	*/
	LineItem.prototype.setTaxRates = function(taxRates) {
	  this.taxRates = taxRates;
	};

	/**
	* Get the field value
	* Tax rates that apply to this line item
	* @memberof order.LineItem
	* @return {Array.<inventory.TaxRate>} An array of 
	*/
	LineItem.prototype.getTaxRates = function() {
	  return this.taxRates;
	};

	/**
	* Set the field value
	* Payments that apply to this line item
	*
	* @memberof order.LineItem
	* @param {Array.<payments.LineItemPayment>} payments An array of 
	*/
	LineItem.prototype.setPayments = function(payments) {
	  this.payments = payments;
	};

	/**
	* Get the field value
	* Payments that apply to this line item
	* @memberof order.LineItem
	* @return {Array.<payments.LineItemPayment>} An array of 
	*/
	LineItem.prototype.getPayments = function() {
	  return this.payments;
	};

	/**
	* Set the field value
	* Revenue collected for this. This field is only used in reporting.
	*
	* @memberof order.LineItem
	* @param {Number} revenueAmount must be a long integer
	*/
	LineItem.prototype.setRevenueAmount = function(revenueAmount) {
	  this.revenueAmount = revenueAmount;
	};

	/**
	* Get the field value
	* Revenue collected for this. This field is only used in reporting.
	* @memberof order.LineItem
	* @return {Number} must be a long integer
	*/
	LineItem.prototype.getRevenueAmount = function() {
	  return this.revenueAmount;
	};

	/**
	* Set the field value
	* Quantity sold for this line item. This field is only used in reporting
	*
	* @memberof order.LineItem
	* @param {Number} quantitySold must be a double
	*/
	LineItem.prototype.setQuantitySold = function(quantitySold) {
	  this.quantitySold = quantitySold;
	};

	/**
	* Get the field value
	* Quantity sold for this line item. This field is only used in reporting
	* @memberof order.LineItem
	* @return {Number} must be a double
	*/
	LineItem.prototype.getQuantitySold = function() {
	  return this.quantitySold;
	};

	/**
	* Set the field value
	* Optional reference to the print group that this line item belongs to.
	*
	* @memberof order.LineItem
	* @param {Null|base.Reference} printGroup 
	*/
	LineItem.prototype.setPrintGroup = function(printGroup) {
	  this.printGroup = printGroup;
	};

	/**
	* Get the field value
	* Optional reference to the print group that this line item belongs to.
	* @memberof order.LineItem
	* @return {Null|base.Reference} 
	*/
	LineItem.prototype.getPrintGroup = function() {
	  return this.printGroup;
	};

	/**
	* @memberof order.LineItem
	* @private
	*/
	LineItem.prototype.getMetaInfo = function(fieldName) {
	  var curclass = this._class_;
	  do {
	    var fieldMetaInfo = curclass._meta_.fields[fieldName];
	    if(fieldMetaInfo) {
	      return fieldMetaInfo;
	    }
	    if(curclass._meta_._superMeta_) {
	      curclass = curclass._meta_._superMeta_._class_;
	    } else {
	      curclass = null;
	    }
	  } while(curclass);
	  return null;
	};

	LineItem.prototype.toString = function() {
	  return JSON.stringify(this);
	};

	LineItem._meta_ =  {fields:  {}};
	LineItem._meta_._class_ =  LineItem;
	LineItem._meta_.fields["id"] = {};
	LineItem._meta_.fields["id"].type = String;
	LineItem._meta_.fields["item"] = {};
	LineItem._meta_.fields["item"].type = base_Reference;
	LineItem._meta_.fields["name"] = {};
	LineItem._meta_.fields["name"].type = String;
	LineItem._meta_.fields["alternateName"] = {};
	LineItem._meta_.fields["alternateName"].type = String;
	LineItem._meta_.fields["price"] = {};
	LineItem._meta_.fields["price"].type = Number;
	LineItem._meta_.fields["priceWithModifiers"] = {};
	LineItem._meta_.fields["priceWithModifiers"].type = Number;
	LineItem._meta_.fields["priceWithModifiersAndItemAndOrderDiscounts"] = {};
	LineItem._meta_.fields["priceWithModifiersAndItemAndOrderDiscounts"].type = Number;
	LineItem._meta_.fields["unitQty"] = {};
	LineItem._meta_.fields["unitQty"].type = Number;
	LineItem._meta_.fields["unitName"] = {};
	LineItem._meta_.fields["unitName"].type = String;
	LineItem._meta_.fields["itemCode"] = {};
	LineItem._meta_.fields["itemCode"].type = String;
	LineItem._meta_.fields["note"] = {};
	LineItem._meta_.fields["note"].type = String;
	LineItem._meta_.fields["printed"] = {};
	LineItem._meta_.fields["printed"].type = Boolean;
	LineItem._meta_.fields["exchangedLineItem"] = {};
	LineItem._meta_.fields["exchangedLineItem"].type = base_Reference;
	LineItem._meta_.fields["binName"] = {};
	LineItem._meta_.fields["binName"].type = String;
	LineItem._meta_.fields["userData"] = {};
	LineItem._meta_.fields["userData"].type = String;
	LineItem._meta_.fields["createdTime"] = {};
	LineItem._meta_.fields["createdTime"].type = Number;
	LineItem._meta_.fields["orderClientCreatedTime"] = {};
	LineItem._meta_.fields["orderClientCreatedTime"].type = Number;
	LineItem._meta_.fields["discounts"] = {};
	LineItem._meta_.fields["discounts"].type = Array;
	LineItem._meta_.fields["discounts"].elementType = order_Discount;
	LineItem._meta_.fields["orderLevelDiscounts"] = {};
	LineItem._meta_.fields["orderLevelDiscounts"].type = Array;
	LineItem._meta_.fields["orderLevelDiscounts"].elementType = order_Discount;
	LineItem._meta_.fields["discountAmount"] = {};
	LineItem._meta_.fields["discountAmount"].type = Number;
	LineItem._meta_.fields["orderLevelDiscountAmount"] = {};
	LineItem._meta_.fields["orderLevelDiscountAmount"].type = Number;
	LineItem._meta_.fields["exchanged"] = {};
	LineItem._meta_.fields["exchanged"].type = Boolean;
	LineItem._meta_.fields["modifications"] = {};
	LineItem._meta_.fields["modifications"].type = Array;
	LineItem._meta_.fields["modifications"].elementType = order_Modification;
	LineItem._meta_.fields["refunded"] = {};
	LineItem._meta_.fields["refunded"].type = Boolean;
	LineItem._meta_.fields["refund"] = {};
	LineItem._meta_.fields["refund"].type = payments_Refund;
	LineItem._meta_.fields["isRevenue"] = {};
	LineItem._meta_.fields["isRevenue"].type = Boolean;
	LineItem._meta_.fields["taxRates"] = {};
	LineItem._meta_.fields["taxRates"].type = Array;
	LineItem._meta_.fields["taxRates"].elementType = inventory_TaxRate;
	LineItem._meta_.fields["payments"] = {};
	LineItem._meta_.fields["payments"].type = Array;
	LineItem._meta_.fields["payments"].elementType = payments_LineItemPayment;
	LineItem._meta_.fields["revenueAmount"] = {};
	LineItem._meta_.fields["revenueAmount"].type = Number;
	LineItem._meta_.fields["quantitySold"] = {};
	LineItem._meta_.fields["quantitySold"].type = Number;
	LineItem._meta_.fields["printGroup"] = {};
	LineItem._meta_.fields["printGroup"].type = base_Reference;

	//
	// Expose the module.
	//
	if (true) {
	module.exports = LineItem;
	}



/***/ }),
/* 158 */
/***/ (function(module, exports, __webpack_require__) {

	/**
	 * Autogenerated by Avro
	 * 
	 * DO NOT EDIT DIRECTLY
	 */

	var payments_CardType = __webpack_require__(69);
	var pay_TransactionData = __webpack_require__(428);
	var payments_CardEntryType = __webpack_require__(119);
	var pay_CardFunction = __webpack_require__(422);

	/**
	* @constructor
	* @memberof pay
	*/
	var PaymentRequestCardDetails = function() {
	  this._class_ = PaymentRequestCardDetails;
	  this.track1 = undefined;
	  this.track2 = undefined;
	  this.track3 = undefined;
	  this.encrypted = undefined;
	  this.maskedTrack1 = undefined;
	  this.maskedTrack2 = undefined;
	  this.maskedTrack3 = undefined;
	  this.uniqueToken = undefined;
	  this.pan = undefined;
	  this.firstName = undefined;
	  this.lastName = undefined;
	  this.countryCode = undefined;
	  this.exp = undefined;
	  this.streetAddress = undefined;
	  this.zip = undefined;
	  this.cvv = undefined;
	  this.last4 = undefined;
	  this.first4 = undefined;
	  this.dukptSerial = undefined;
	  this.swipeStatus = undefined;
	  this.fingerprint = undefined;
	  this.deviceSerial = undefined;
	  this.manualEntered = undefined;
	  this.async = undefined;
	  this.isFallback = undefined;
	  this.isAuth = undefined;
	  this.isPrepaid = undefined;
	  this.cardFunction = undefined;
	  this.qrCode = undefined;
	  this.cardType = undefined;
	  this.entryType = undefined;
	  this.transactionNo = undefined;
	  this.cardholderName = undefined;
	  this.plainCardData = undefined;
	  this.transactionData = undefined;
	};


	/**
	* Set the field value
	* @memberof pay.PaymentRequestCardDetails
	* @param {String} track1 
	*/
	PaymentRequestCardDetails.prototype.setTrack1 = function(track1) {
	  this.track1 = track1;
	};

	/**
	* Get the field value
	* @memberof pay.PaymentRequestCardDetails
	* @return {String} 
	*/
	PaymentRequestCardDetails.prototype.getTrack1 = function() {
	  return this.track1;
	};

	/**
	* Set the field value
	* @memberof pay.PaymentRequestCardDetails
	* @param {String} track2 
	*/
	PaymentRequestCardDetails.prototype.setTrack2 = function(track2) {
	  this.track2 = track2;
	};

	/**
	* Get the field value
	* @memberof pay.PaymentRequestCardDetails
	* @return {String} 
	*/
	PaymentRequestCardDetails.prototype.getTrack2 = function() {
	  return this.track2;
	};

	/**
	* Set the field value
	* @memberof pay.PaymentRequestCardDetails
	* @param {String} track3 
	*/
	PaymentRequestCardDetails.prototype.setTrack3 = function(track3) {
	  this.track3 = track3;
	};

	/**
	* Get the field value
	* @memberof pay.PaymentRequestCardDetails
	* @return {String} 
	*/
	PaymentRequestCardDetails.prototype.getTrack3 = function() {
	  return this.track3;
	};

	/**
	* Set the field value
	* @memberof pay.PaymentRequestCardDetails
	* @param {Boolean} encrypted 
	*/
	PaymentRequestCardDetails.prototype.setEncrypted = function(encrypted) {
	  this.encrypted = encrypted;
	};

	/**
	* Get the field value
	* @memberof pay.PaymentRequestCardDetails
	* @return {Boolean} 
	*/
	PaymentRequestCardDetails.prototype.getEncrypted = function() {
	  return this.encrypted;
	};

	/**
	* Set the field value
	* @memberof pay.PaymentRequestCardDetails
	* @param {String} maskedTrack1 
	*/
	PaymentRequestCardDetails.prototype.setMaskedTrack1 = function(maskedTrack1) {
	  this.maskedTrack1 = maskedTrack1;
	};

	/**
	* Get the field value
	* @memberof pay.PaymentRequestCardDetails
	* @return {String} 
	*/
	PaymentRequestCardDetails.prototype.getMaskedTrack1 = function() {
	  return this.maskedTrack1;
	};

	/**
	* Set the field value
	* @memberof pay.PaymentRequestCardDetails
	* @param {String} maskedTrack2 
	*/
	PaymentRequestCardDetails.prototype.setMaskedTrack2 = function(maskedTrack2) {
	  this.maskedTrack2 = maskedTrack2;
	};

	/**
	* Get the field value
	* @memberof pay.PaymentRequestCardDetails
	* @return {String} 
	*/
	PaymentRequestCardDetails.prototype.getMaskedTrack2 = function() {
	  return this.maskedTrack2;
	};

	/**
	* Set the field value
	* @memberof pay.PaymentRequestCardDetails
	* @param {String} maskedTrack3 
	*/
	PaymentRequestCardDetails.prototype.setMaskedTrack3 = function(maskedTrack3) {
	  this.maskedTrack3 = maskedTrack3;
	};

	/**
	* Get the field value
	* @memberof pay.PaymentRequestCardDetails
	* @return {String} 
	*/
	PaymentRequestCardDetails.prototype.getMaskedTrack3 = function() {
	  return this.maskedTrack3;
	};

	/**
	* Set the field value
	* @memberof pay.PaymentRequestCardDetails
	* @param {String} uniqueToken 
	*/
	PaymentRequestCardDetails.prototype.setUniqueToken = function(uniqueToken) {
	  this.uniqueToken = uniqueToken;
	};

	/**
	* Get the field value
	* @memberof pay.PaymentRequestCardDetails
	* @return {String} 
	*/
	PaymentRequestCardDetails.prototype.getUniqueToken = function() {
	  return this.uniqueToken;
	};

	/**
	* Set the field value
	* @memberof pay.PaymentRequestCardDetails
	* @param {String} pan 
	*/
	PaymentRequestCardDetails.prototype.setPan = function(pan) {
	  this.pan = pan;
	};

	/**
	* Get the field value
	* @memberof pay.PaymentRequestCardDetails
	* @return {String} 
	*/
	PaymentRequestCardDetails.prototype.getPan = function() {
	  return this.pan;
	};

	/**
	* Set the field value
	* @memberof pay.PaymentRequestCardDetails
	* @param {String} firstName 
	*/
	PaymentRequestCardDetails.prototype.setFirstName = function(firstName) {
	  this.firstName = firstName;
	};

	/**
	* Get the field value
	* @memberof pay.PaymentRequestCardDetails
	* @return {String} 
	*/
	PaymentRequestCardDetails.prototype.getFirstName = function() {
	  return this.firstName;
	};

	/**
	* Set the field value
	* @memberof pay.PaymentRequestCardDetails
	* @param {String} lastName 
	*/
	PaymentRequestCardDetails.prototype.setLastName = function(lastName) {
	  this.lastName = lastName;
	};

	/**
	* Get the field value
	* @memberof pay.PaymentRequestCardDetails
	* @return {String} 
	*/
	PaymentRequestCardDetails.prototype.getLastName = function() {
	  return this.lastName;
	};

	/**
	* Set the field value
	* @memberof pay.PaymentRequestCardDetails
	* @param {String} countryCode 
	*/
	PaymentRequestCardDetails.prototype.setCountryCode = function(countryCode) {
	  this.countryCode = countryCode;
	};

	/**
	* Get the field value
	* @memberof pay.PaymentRequestCardDetails
	* @return {String} 
	*/
	PaymentRequestCardDetails.prototype.getCountryCode = function() {
	  return this.countryCode;
	};

	/**
	* Set the field value
	* @memberof pay.PaymentRequestCardDetails
	* @param {String} exp 
	*/
	PaymentRequestCardDetails.prototype.setExp = function(exp) {
	  this.exp = exp;
	};

	/**
	* Get the field value
	* @memberof pay.PaymentRequestCardDetails
	* @return {String} 
	*/
	PaymentRequestCardDetails.prototype.getExp = function() {
	  return this.exp;
	};

	/**
	* Set the field value
	* @memberof pay.PaymentRequestCardDetails
	* @param {String} streetAddress 
	*/
	PaymentRequestCardDetails.prototype.setStreetAddress = function(streetAddress) {
	  this.streetAddress = streetAddress;
	};

	/**
	* Get the field value
	* @memberof pay.PaymentRequestCardDetails
	* @return {String} 
	*/
	PaymentRequestCardDetails.prototype.getStreetAddress = function() {
	  return this.streetAddress;
	};

	/**
	* Set the field value
	* @memberof pay.PaymentRequestCardDetails
	* @param {String} zip 
	*/
	PaymentRequestCardDetails.prototype.setZip = function(zip) {
	  this.zip = zip;
	};

	/**
	* Get the field value
	* @memberof pay.PaymentRequestCardDetails
	* @return {String} 
	*/
	PaymentRequestCardDetails.prototype.getZip = function() {
	  return this.zip;
	};

	/**
	* Set the field value
	* @memberof pay.PaymentRequestCardDetails
	* @param {String} cvv 
	*/
	PaymentRequestCardDetails.prototype.setCvv = function(cvv) {
	  this.cvv = cvv;
	};

	/**
	* Get the field value
	* @memberof pay.PaymentRequestCardDetails
	* @return {String} 
	*/
	PaymentRequestCardDetails.prototype.getCvv = function() {
	  return this.cvv;
	};

	/**
	* Set the field value
	* @memberof pay.PaymentRequestCardDetails
	* @param {String} last4 
	*/
	PaymentRequestCardDetails.prototype.setLast4 = function(last4) {
	  this.last4 = last4;
	};

	/**
	* Get the field value
	* @memberof pay.PaymentRequestCardDetails
	* @return {String} 
	*/
	PaymentRequestCardDetails.prototype.getLast4 = function() {
	  return this.last4;
	};

	/**
	* Set the field value
	* @memberof pay.PaymentRequestCardDetails
	* @param {String} first4 
	*/
	PaymentRequestCardDetails.prototype.setFirst4 = function(first4) {
	  this.first4 = first4;
	};

	/**
	* Get the field value
	* @memberof pay.PaymentRequestCardDetails
	* @return {String} 
	*/
	PaymentRequestCardDetails.prototype.getFirst4 = function() {
	  return this.first4;
	};

	/**
	* Set the field value
	* @memberof pay.PaymentRequestCardDetails
	* @param {String} dukptSerial 
	*/
	PaymentRequestCardDetails.prototype.setDukptSerial = function(dukptSerial) {
	  this.dukptSerial = dukptSerial;
	};

	/**
	* Get the field value
	* @memberof pay.PaymentRequestCardDetails
	* @return {String} 
	*/
	PaymentRequestCardDetails.prototype.getDukptSerial = function() {
	  return this.dukptSerial;
	};

	/**
	* Set the field value
	* @memberof pay.PaymentRequestCardDetails
	* @param {String} swipeStatus 
	*/
	PaymentRequestCardDetails.prototype.setSwipeStatus = function(swipeStatus) {
	  this.swipeStatus = swipeStatus;
	};

	/**
	* Get the field value
	* @memberof pay.PaymentRequestCardDetails
	* @return {String} 
	*/
	PaymentRequestCardDetails.prototype.getSwipeStatus = function() {
	  return this.swipeStatus;
	};

	/**
	* Set the field value
	* @memberof pay.PaymentRequestCardDetails
	* @param {String} fingerprint 
	*/
	PaymentRequestCardDetails.prototype.setFingerprint = function(fingerprint) {
	  this.fingerprint = fingerprint;
	};

	/**
	* Get the field value
	* @memberof pay.PaymentRequestCardDetails
	* @return {String} 
	*/
	PaymentRequestCardDetails.prototype.getFingerprint = function() {
	  return this.fingerprint;
	};

	/**
	* Set the field value
	* @memberof pay.PaymentRequestCardDetails
	* @param {String} deviceSerial 
	*/
	PaymentRequestCardDetails.prototype.setDeviceSerial = function(deviceSerial) {
	  this.deviceSerial = deviceSerial;
	};

	/**
	* Get the field value
	* @memberof pay.PaymentRequestCardDetails
	* @return {String} 
	*/
	PaymentRequestCardDetails.prototype.getDeviceSerial = function() {
	  return this.deviceSerial;
	};

	/**
	* Set the field value
	* @memberof pay.PaymentRequestCardDetails
	* @param {Boolean} manualEntered 
	*/
	PaymentRequestCardDetails.prototype.setManualEntered = function(manualEntered) {
	  this.manualEntered = manualEntered;
	};

	/**
	* Get the field value
	* @memberof pay.PaymentRequestCardDetails
	* @return {Boolean} 
	*/
	PaymentRequestCardDetails.prototype.getManualEntered = function() {
	  return this.manualEntered;
	};

	/**
	* Set the field value
	* @memberof pay.PaymentRequestCardDetails
	* @param {Boolean} async 
	*/
	PaymentRequestCardDetails.prototype.setAsync = function(async) {
	  this.async = async;
	};

	/**
	* Get the field value
	* @memberof pay.PaymentRequestCardDetails
	* @return {Boolean} 
	*/
	PaymentRequestCardDetails.prototype.getAsync = function() {
	  return this.async;
	};

	/**
	* Set the field value
	* @memberof pay.PaymentRequestCardDetails
	* @param {Boolean} isFallback 
	*/
	PaymentRequestCardDetails.prototype.setIsFallback = function(isFallback) {
	  this.isFallback = isFallback;
	};

	/**
	* Get the field value
	* @memberof pay.PaymentRequestCardDetails
	* @return {Boolean} 
	*/
	PaymentRequestCardDetails.prototype.getIsFallback = function() {
	  return this.isFallback;
	};

	/**
	* Set the field value
	* @memberof pay.PaymentRequestCardDetails
	* @param {Boolean} isAuth 
	*/
	PaymentRequestCardDetails.prototype.setIsAuth = function(isAuth) {
	  this.isAuth = isAuth;
	};

	/**
	* Get the field value
	* @memberof pay.PaymentRequestCardDetails
	* @return {Boolean} 
	*/
	PaymentRequestCardDetails.prototype.getIsAuth = function() {
	  return this.isAuth;
	};

	/**
	* Set the field value
	* @memberof pay.PaymentRequestCardDetails
	* @param {Boolean} isPrepaid 
	*/
	PaymentRequestCardDetails.prototype.setIsPrepaid = function(isPrepaid) {
	  this.isPrepaid = isPrepaid;
	};

	/**
	* Get the field value
	* @memberof pay.PaymentRequestCardDetails
	* @return {Boolean} 
	*/
	PaymentRequestCardDetails.prototype.getIsPrepaid = function() {
	  return this.isPrepaid;
	};

	/**
	* Set the field value
	* @memberof pay.PaymentRequestCardDetails
	* @param {pay.CardFunction} cardFunction 
	*/
	PaymentRequestCardDetails.prototype.setCardFunction = function(cardFunction) {
	  this.cardFunction = cardFunction;
	};

	/**
	* Get the field value
	* @memberof pay.PaymentRequestCardDetails
	* @return {pay.CardFunction} 
	*/
	PaymentRequestCardDetails.prototype.getCardFunction = function() {
	  return this.cardFunction;
	};

	/**
	* Set the field value
	* @memberof pay.PaymentRequestCardDetails
	* @param {Boolean} qrCode 
	*/
	PaymentRequestCardDetails.prototype.setQrCode = function(qrCode) {
	  this.qrCode = qrCode;
	};

	/**
	* Get the field value
	* @memberof pay.PaymentRequestCardDetails
	* @return {Boolean} 
	*/
	PaymentRequestCardDetails.prototype.getQrCode = function() {
	  return this.qrCode;
	};

	/**
	* Set the field value
	* @memberof pay.PaymentRequestCardDetails
	* @param {payments.CardType} cardType 
	*/
	PaymentRequestCardDetails.prototype.setCardType = function(cardType) {
	  this.cardType = cardType;
	};

	/**
	* Get the field value
	* @memberof pay.PaymentRequestCardDetails
	* @return {payments.CardType} 
	*/
	PaymentRequestCardDetails.prototype.getCardType = function() {
	  return this.cardType;
	};

	/**
	* Set the field value
	* @memberof pay.PaymentRequestCardDetails
	* @param {payments.CardEntryType} entryType 
	*/
	PaymentRequestCardDetails.prototype.setEntryType = function(entryType) {
	  this.entryType = entryType;
	};

	/**
	* Get the field value
	* @memberof pay.PaymentRequestCardDetails
	* @return {payments.CardEntryType} 
	*/
	PaymentRequestCardDetails.prototype.getEntryType = function() {
	  return this.entryType;
	};

	/**
	* Set the field value
	* @memberof pay.PaymentRequestCardDetails
	* @param {String} transactionNo 
	*/
	PaymentRequestCardDetails.prototype.setTransactionNo = function(transactionNo) {
	  this.transactionNo = transactionNo;
	};

	/**
	* Get the field value
	* @memberof pay.PaymentRequestCardDetails
	* @return {String} 
	*/
	PaymentRequestCardDetails.prototype.getTransactionNo = function() {
	  return this.transactionNo;
	};

	/**
	* Set the field value
	* @memberof pay.PaymentRequestCardDetails
	* @param {String} cardholderName 
	*/
	PaymentRequestCardDetails.prototype.setCardholderName = function(cardholderName) {
	  this.cardholderName = cardholderName;
	};

	/**
	* Get the field value
	* @memberof pay.PaymentRequestCardDetails
	* @return {String} 
	*/
	PaymentRequestCardDetails.prototype.getCardholderName = function() {
	  return this.cardholderName;
	};

	/**
	* Set the field value
	* @memberof pay.PaymentRequestCardDetails
	* @param {String} plainCardData 
	*/
	PaymentRequestCardDetails.prototype.setPlainCardData = function(plainCardData) {
	  this.plainCardData = plainCardData;
	};

	/**
	* Get the field value
	* @memberof pay.PaymentRequestCardDetails
	* @return {String} 
	*/
	PaymentRequestCardDetails.prototype.getPlainCardData = function() {
	  return this.plainCardData;
	};

	/**
	* Set the field value
	* @memberof pay.PaymentRequestCardDetails
	* @param {pay.TransactionData} transactionData 
	*/
	PaymentRequestCardDetails.prototype.setTransactionData = function(transactionData) {
	  this.transactionData = transactionData;
	};

	/**
	* Get the field value
	* @memberof pay.PaymentRequestCardDetails
	* @return {pay.TransactionData} 
	*/
	PaymentRequestCardDetails.prototype.getTransactionData = function() {
	  return this.transactionData;
	};

	/**
	* @memberof pay.PaymentRequestCardDetails
	* @private
	*/
	PaymentRequestCardDetails.prototype.getMetaInfo = function(fieldName) {
	  var curclass = this._class_;
	  do {
	    var fieldMetaInfo = curclass._meta_.fields[fieldName];
	    if(fieldMetaInfo) {
	      return fieldMetaInfo;
	    }
	    if(curclass._meta_._superMeta_) {
	      curclass = curclass._meta_._superMeta_._class_;
	    } else {
	      curclass = null;
	    }
	  } while(curclass);
	  return null;
	};

	PaymentRequestCardDetails.prototype.toString = function() {
	  return JSON.stringify(this);
	};

	PaymentRequestCardDetails._meta_ =  {fields:  {}};
	PaymentRequestCardDetails._meta_._class_ =  PaymentRequestCardDetails;
	PaymentRequestCardDetails._meta_.fields["track1"] = {};
	PaymentRequestCardDetails._meta_.fields["track1"].type = String;
	PaymentRequestCardDetails._meta_.fields["track2"] = {};
	PaymentRequestCardDetails._meta_.fields["track2"].type = String;
	PaymentRequestCardDetails._meta_.fields["track3"] = {};
	PaymentRequestCardDetails._meta_.fields["track3"].type = String;
	PaymentRequestCardDetails._meta_.fields["encrypted"] = {};
	PaymentRequestCardDetails._meta_.fields["encrypted"].type = Boolean;
	PaymentRequestCardDetails._meta_.fields["maskedTrack1"] = {};
	PaymentRequestCardDetails._meta_.fields["maskedTrack1"].type = String;
	PaymentRequestCardDetails._meta_.fields["maskedTrack2"] = {};
	PaymentRequestCardDetails._meta_.fields["maskedTrack2"].type = String;
	PaymentRequestCardDetails._meta_.fields["maskedTrack3"] = {};
	PaymentRequestCardDetails._meta_.fields["maskedTrack3"].type = String;
	PaymentRequestCardDetails._meta_.fields["uniqueToken"] = {};
	PaymentRequestCardDetails._meta_.fields["uniqueToken"].type = String;
	PaymentRequestCardDetails._meta_.fields["pan"] = {};
	PaymentRequestCardDetails._meta_.fields["pan"].type = String;
	PaymentRequestCardDetails._meta_.fields["firstName"] = {};
	PaymentRequestCardDetails._meta_.fields["firstName"].type = String;
	PaymentRequestCardDetails._meta_.fields["lastName"] = {};
	PaymentRequestCardDetails._meta_.fields["lastName"].type = String;
	PaymentRequestCardDetails._meta_.fields["countryCode"] = {};
	PaymentRequestCardDetails._meta_.fields["countryCode"].type = String;
	PaymentRequestCardDetails._meta_.fields["exp"] = {};
	PaymentRequestCardDetails._meta_.fields["exp"].type = String;
	PaymentRequestCardDetails._meta_.fields["streetAddress"] = {};
	PaymentRequestCardDetails._meta_.fields["streetAddress"].type = String;
	PaymentRequestCardDetails._meta_.fields["zip"] = {};
	PaymentRequestCardDetails._meta_.fields["zip"].type = String;
	PaymentRequestCardDetails._meta_.fields["cvv"] = {};
	PaymentRequestCardDetails._meta_.fields["cvv"].type = String;
	PaymentRequestCardDetails._meta_.fields["last4"] = {};
	PaymentRequestCardDetails._meta_.fields["last4"].type = String;
	PaymentRequestCardDetails._meta_.fields["first4"] = {};
	PaymentRequestCardDetails._meta_.fields["first4"].type = String;
	PaymentRequestCardDetails._meta_.fields["dukptSerial"] = {};
	PaymentRequestCardDetails._meta_.fields["dukptSerial"].type = String;
	PaymentRequestCardDetails._meta_.fields["swipeStatus"] = {};
	PaymentRequestCardDetails._meta_.fields["swipeStatus"].type = String;
	PaymentRequestCardDetails._meta_.fields["fingerprint"] = {};
	PaymentRequestCardDetails._meta_.fields["fingerprint"].type = String;
	PaymentRequestCardDetails._meta_.fields["deviceSerial"] = {};
	PaymentRequestCardDetails._meta_.fields["deviceSerial"].type = String;
	PaymentRequestCardDetails._meta_.fields["manualEntered"] = {};
	PaymentRequestCardDetails._meta_.fields["manualEntered"].type = Boolean;
	PaymentRequestCardDetails._meta_.fields["async"] = {};
	PaymentRequestCardDetails._meta_.fields["async"].type = Boolean;
	PaymentRequestCardDetails._meta_.fields["isFallback"] = {};
	PaymentRequestCardDetails._meta_.fields["isFallback"].type = Boolean;
	PaymentRequestCardDetails._meta_.fields["isAuth"] = {};
	PaymentRequestCardDetails._meta_.fields["isAuth"].type = Boolean;
	PaymentRequestCardDetails._meta_.fields["isPrepaid"] = {};
	PaymentRequestCardDetails._meta_.fields["isPrepaid"].type = Boolean;
	PaymentRequestCardDetails._meta_.fields["cardFunction"] = {};
	PaymentRequestCardDetails._meta_.fields["cardFunction"].type = pay_CardFunction;
	PaymentRequestCardDetails._meta_.fields["qrCode"] = {};
	PaymentRequestCardDetails._meta_.fields["qrCode"].type = Boolean;
	PaymentRequestCardDetails._meta_.fields["cardType"] = {};
	PaymentRequestCardDetails._meta_.fields["cardType"].type = payments_CardType;
	PaymentRequestCardDetails._meta_.fields["entryType"] = {};
	PaymentRequestCardDetails._meta_.fields["entryType"].type = payments_CardEntryType;
	PaymentRequestCardDetails._meta_.fields["transactionNo"] = {};
	PaymentRequestCardDetails._meta_.fields["transactionNo"].type = String;
	PaymentRequestCardDetails._meta_.fields["cardholderName"] = {};
	PaymentRequestCardDetails._meta_.fields["cardholderName"].type = String;
	PaymentRequestCardDetails._meta_.fields["plainCardData"] = {};
	PaymentRequestCardDetails._meta_.fields["plainCardData"].type = String;
	PaymentRequestCardDetails._meta_.fields["transactionData"] = {};
	PaymentRequestCardDetails._meta_.fields["transactionData"].type = pay_TransactionData;

	//
	// Expose the module.
	//
	if (true) {
	module.exports = PaymentRequestCardDetails;
	}



/***/ }),
/* 159 */
/***/ (function(module, exports, __webpack_require__) {

	/**
	 * Autogenerated by Avro
	 * 
	 * DO NOT EDIT DIRECTLY
	 */

	var payments_CardType = __webpack_require__(69);
	var payments_Payment = __webpack_require__(11);
	var payments_Type = __webpack_require__(462);

	/**
	* @constructor
	* @memberof payments
	*/
	var Authorization = function() {
	  this._class_ = Authorization;
	  this.id = undefined;
	  this.payment = undefined;
	  this.tabName = undefined;
	  this.amount = undefined;
	  this.cardType = undefined;
	  this.last4 = undefined;
	  this.authcode = undefined;
	  this.token = undefined;
	  this.type = undefined;
	  this.note = undefined;
	  this.externalReferenceId = undefined;
	  this.closingPayment = undefined;
	  this.createdTime = undefined;
	};


	/**
	* Set the field value
	* Unique identifier
	*
	* @memberof payments.Authorization
	* @param {String} id 
	*/
	Authorization.prototype.setId = function(id) {
	  this.id = id;
	};

	/**
	* Get the field value
	* Unique identifier
	* @memberof payments.Authorization
	* @return {String} 
	*/
	Authorization.prototype.getId = function() {
	  return this.id;
	};

	/**
	* Set the field value
	* Payment that the auth was opened with
	*
	* @memberof payments.Authorization
	* @param {payments.Payment} payment 
	*/
	Authorization.prototype.setPayment = function(payment) {
	  this.payment = payment;
	};

	/**
	* Get the field value
	* Payment that the auth was opened with
	* @memberof payments.Authorization
	* @return {payments.Payment} 
	*/
	Authorization.prototype.getPayment = function() {
	  return this.payment;
	};

	/**
	* Set the field value
	* Name of tab
	*
	* @memberof payments.Authorization
	* @param {String|Null} tabName 
	*/
	Authorization.prototype.setTabName = function(tabName) {
	  this.tabName = tabName;
	};

	/**
	* Get the field value
	* Name of tab
	* @memberof payments.Authorization
	* @return {String|Null} 
	*/
	Authorization.prototype.getTabName = function() {
	  return this.tabName;
	};

	/**
	* Set the field value
	* Amount authorized
	*
	* @memberof payments.Authorization
	* @param {Number} amount must be a long integer
	*/
	Authorization.prototype.setAmount = function(amount) {
	  this.amount = amount;
	};

	/**
	* Get the field value
	* Amount authorized
	* @memberof payments.Authorization
	* @return {Number} must be a long integer
	*/
	Authorization.prototype.getAmount = function() {
	  return this.amount;
	};

	/**
	* Set the field value
	* Type of credit card used for authorization
	*
	* @memberof payments.Authorization
	* @param {payments.CardType} cardType 
	*/
	Authorization.prototype.setCardType = function(cardType) {
	  this.cardType = cardType;
	};

	/**
	* Get the field value
	* Type of credit card used for authorization
	* @memberof payments.Authorization
	* @return {payments.CardType} 
	*/
	Authorization.prototype.getCardType = function() {
	  return this.cardType;
	};

	/**
	* Set the field value
	* Last 4 digits of credit card used for authorization
	*
	* @memberof payments.Authorization
	* @param {String} last4 
	*/
	Authorization.prototype.setLast4 = function(last4) {
	  this.last4 = last4;
	};

	/**
	* Get the field value
	* Last 4 digits of credit card used for authorization
	* @memberof payments.Authorization
	* @return {String} 
	*/
	Authorization.prototype.getLast4 = function() {
	  return this.last4;
	};

	/**
	* Set the field value
	* Authorization code
	*
	* @memberof payments.Authorization
	* @param {String} authcode 
	*/
	Authorization.prototype.setAuthcode = function(authcode) {
	  this.authcode = authcode;
	};

	/**
	* Get the field value
	* Authorization code
	* @memberof payments.Authorization
	* @return {String} 
	*/
	Authorization.prototype.getAuthcode = function() {
	  return this.authcode;
	};

	/**
	* Set the field value
	* Token used for the authorization
	*
	* @memberof payments.Authorization
	* @param {String} token 
	*/
	Authorization.prototype.setToken = function(token) {
	  this.token = token;
	};

	/**
	* Get the field value
	* Token used for the authorization
	* @memberof payments.Authorization
	* @return {String} 
	*/
	Authorization.prototype.getToken = function() {
	  return this.token;
	};

	/**
	* Set the field value
	* @memberof payments.Authorization
	* @param {payments.Type} type 
	*/
	Authorization.prototype.setType = function(type) {
	  this.type = type;
	};

	/**
	* Get the field value
	* @memberof payments.Authorization
	* @return {payments.Type} 
	*/
	Authorization.prototype.getType = function() {
	  return this.type;
	};

	/**
	* Set the field value
	* @memberof payments.Authorization
	* @param {String|Null} note 
	*/
	Authorization.prototype.setNote = function(note) {
	  this.note = note;
	};

	/**
	* Get the field value
	* @memberof payments.Authorization
	* @return {String|Null} 
	*/
	Authorization.prototype.getNote = function() {
	  return this.note;
	};

	/**
	* Set the field value
	* The external reference id if associated with the payment
	*
	* @memberof payments.Authorization
	* @param {String|Null} externalReferenceId 
	*/
	Authorization.prototype.setExternalReferenceId = function(externalReferenceId) {
	  this.externalReferenceId = externalReferenceId;
	};

	/**
	* Get the field value
	* The external reference id if associated with the payment
	* @memberof payments.Authorization
	* @return {String|Null} 
	*/
	Authorization.prototype.getExternalReferenceId = function() {
	  return this.externalReferenceId;
	};

	/**
	* Set the field value
	* Payment that the auth was closed with
	*
	* @memberof payments.Authorization
	* @param {payments.Payment} closingPayment 
	*/
	Authorization.prototype.setClosingPayment = function(closingPayment) {
	  this.closingPayment = closingPayment;
	};

	/**
	* Get the field value
	* Payment that the auth was closed with
	* @memberof payments.Authorization
	* @return {payments.Payment} 
	*/
	Authorization.prototype.getClosingPayment = function() {
	  return this.closingPayment;
	};

	/**
	* Set the field value
	* Time authorization was recorded on server
	*
	* @memberof payments.Authorization
	* @param {Number} createdTime must be a long integer
	*/
	Authorization.prototype.setCreatedTime = function(createdTime) {
	  this.createdTime = createdTime;
	};

	/**
	* Get the field value
	* Time authorization was recorded on server
	* @memberof payments.Authorization
	* @return {Number} must be a long integer
	*/
	Authorization.prototype.getCreatedTime = function() {
	  return this.createdTime;
	};

	/**
	* @memberof payments.Authorization
	* @private
	*/
	Authorization.prototype.getMetaInfo = function(fieldName) {
	  var curclass = this._class_;
	  do {
	    var fieldMetaInfo = curclass._meta_.fields[fieldName];
	    if(fieldMetaInfo) {
	      return fieldMetaInfo;
	    }
	    if(curclass._meta_._superMeta_) {
	      curclass = curclass._meta_._superMeta_._class_;
	    } else {
	      curclass = null;
	    }
	  } while(curclass);
	  return null;
	};

	Authorization.prototype.toString = function() {
	  return JSON.stringify(this);
	};

	Authorization._meta_ =  {fields:  {}};
	Authorization._meta_._class_ =  Authorization;
	Authorization._meta_.fields["id"] = {};
	Authorization._meta_.fields["id"].type = String;
	Authorization._meta_.fields["payment"] = {};
	Authorization._meta_.fields["payment"].type = payments_Payment;
	Authorization._meta_.fields["tabName"] = {};
	Authorization._meta_.fields["tabName"].type = String;
	Authorization._meta_.fields["amount"] = {};
	Authorization._meta_.fields["amount"].type = Number;
	Authorization._meta_.fields["cardType"] = {};
	Authorization._meta_.fields["cardType"].type = payments_CardType;
	Authorization._meta_.fields["last4"] = {};
	Authorization._meta_.fields["last4"].type = String;
	Authorization._meta_.fields["authcode"] = {};
	Authorization._meta_.fields["authcode"].type = String;
	Authorization._meta_.fields["token"] = {};
	Authorization._meta_.fields["token"].type = String;
	Authorization._meta_.fields["type"] = {};
	Authorization._meta_.fields["type"].type = payments_Type;
	Authorization._meta_.fields["note"] = {};
	Authorization._meta_.fields["note"].type = String;
	Authorization._meta_.fields["externalReferenceId"] = {};
	Authorization._meta_.fields["externalReferenceId"].type = String;
	Authorization._meta_.fields["closingPayment"] = {};
	Authorization._meta_.fields["closingPayment"].type = payments_Payment;
	Authorization._meta_.fields["createdTime"] = {};
	Authorization._meta_.fields["createdTime"].type = Number;

	//
	// Expose the module.
	//
	if (true) {
	module.exports = Authorization;
	}



/***/ }),
/* 160 */
/***/ (function(module, exports, __webpack_require__) {

	/**
	 * Autogenerated by Avro
	 * 
	 * DO NOT EDIT DIRECTLY
	 */

	var payments_CardType = __webpack_require__(69);

	/**
	* @constructor
	* @memberof payments
	*/
	var BatchCardTotal = function() {
	  this._class_ = BatchCardTotal;
	  this.cardType = undefined;
	  this.cardTypeLabel = undefined;
	  this.installments = undefined;
	  this.count = undefined;
	  this.total = undefined;
	};


	/**
	* Set the field value
	* @memberof payments.BatchCardTotal
	* @param {payments.CardType} cardType 
	*/
	BatchCardTotal.prototype.setCardType = function(cardType) {
	  this.cardType = cardType;
	};

	/**
	* Get the field value
	* @memberof payments.BatchCardTotal
	* @return {payments.CardType} 
	*/
	BatchCardTotal.prototype.getCardType = function() {
	  return this.cardType;
	};

	/**
	* Set the field value
	* In the case of CardType.OTHER, an optional label might be provided
	*
	* @memberof payments.BatchCardTotal
	* @param {String} cardTypeLabel 
	*/
	BatchCardTotal.prototype.setCardTypeLabel = function(cardTypeLabel) {
	  this.cardTypeLabel = cardTypeLabel;
	};

	/**
	* Get the field value
	* In the case of CardType.OTHER, an optional label might be provided
	* @memberof payments.BatchCardTotal
	* @return {String} 
	*/
	BatchCardTotal.prototype.getCardTypeLabel = function() {
	  return this.cardTypeLabel;
	};

	/**
	* Set the field value
	* Number of installments for this CardTotal
	*
	* @memberof payments.BatchCardTotal
	* @param {Number} installments must be a long integer
	*/
	BatchCardTotal.prototype.setInstallments = function(installments) {
	  this.installments = installments;
	};

	/**
	* Get the field value
	* Number of installments for this CardTotal
	* @memberof payments.BatchCardTotal
	* @return {Number} must be a long integer
	*/
	BatchCardTotal.prototype.getInstallments = function() {
	  return this.installments;
	};

	/**
	* Set the field value
	* Total count of types
	*
	* @memberof payments.BatchCardTotal
	* @param {Number} count must be a long integer
	*/
	BatchCardTotal.prototype.setCount = function(count) {
	  this.count = count;
	};

	/**
	* Get the field value
	* Total count of types
	* @memberof payments.BatchCardTotal
	* @return {Number} must be a long integer
	*/
	BatchCardTotal.prototype.getCount = function() {
	  return this.count;
	};

	/**
	* Set the field value
	* Total amount for type
	*
	* @memberof payments.BatchCardTotal
	* @param {Number} total must be a long integer
	*/
	BatchCardTotal.prototype.setTotal = function(total) {
	  this.total = total;
	};

	/**
	* Get the field value
	* Total amount for type
	* @memberof payments.BatchCardTotal
	* @return {Number} must be a long integer
	*/
	BatchCardTotal.prototype.getTotal = function() {
	  return this.total;
	};

	/**
	* @memberof payments.BatchCardTotal
	* @private
	*/
	BatchCardTotal.prototype.getMetaInfo = function(fieldName) {
	  var curclass = this._class_;
	  do {
	    var fieldMetaInfo = curclass._meta_.fields[fieldName];
	    if(fieldMetaInfo) {
	      return fieldMetaInfo;
	    }
	    if(curclass._meta_._superMeta_) {
	      curclass = curclass._meta_._superMeta_._class_;
	    } else {
	      curclass = null;
	    }
	  } while(curclass);
	  return null;
	};

	BatchCardTotal.prototype.toString = function() {
	  return JSON.stringify(this);
	};

	BatchCardTotal._meta_ =  {fields:  {}};
	BatchCardTotal._meta_._class_ =  BatchCardTotal;
	BatchCardTotal._meta_.fields["cardType"] = {};
	BatchCardTotal._meta_.fields["cardType"].type = payments_CardType;
	BatchCardTotal._meta_.fields["cardTypeLabel"] = {};
	BatchCardTotal._meta_.fields["cardTypeLabel"].type = String;
	BatchCardTotal._meta_.fields["installments"] = {};
	BatchCardTotal._meta_.fields["installments"].type = Number;
	BatchCardTotal._meta_.fields["count"] = {};
	BatchCardTotal._meta_.fields["count"].type = Number;
	BatchCardTotal._meta_.fields["total"] = {};
	BatchCardTotal._meta_.fields["total"].type = Number;

	//
	// Expose the module.
	//
	if (true) {
	module.exports = BatchCardTotal;
	}



/***/ }),
/* 161 */
/***/ (function(module, exports, __webpack_require__) {

	/**
	 * Autogenerated by Avro
	 * 
	 * DO NOT EDIT DIRECTLY
	 */


	/**
	* @constructor
	* @memberof payments
	*/
	var BatchTotalType = function() {
	  this._class_ = BatchTotalType;
	  this.count = undefined;
	  this.total = undefined;
	};


	/**
	* Set the field value
	* Total count of types
	*
	* @memberof payments.BatchTotalType
	* @param {Number} count must be a long integer
	*/
	BatchTotalType.prototype.setCount = function(count) {
	  this.count = count;
	};

	/**
	* Get the field value
	* Total count of types
	* @memberof payments.BatchTotalType
	* @return {Number} must be a long integer
	*/
	BatchTotalType.prototype.getCount = function() {
	  return this.count;
	};

	/**
	* Set the field value
	* Total amount for type
	*
	* @memberof payments.BatchTotalType
	* @param {Number} total must be a long integer
	*/
	BatchTotalType.prototype.setTotal = function(total) {
	  this.total = total;
	};

	/**
	* Get the field value
	* Total amount for type
	* @memberof payments.BatchTotalType
	* @return {Number} must be a long integer
	*/
	BatchTotalType.prototype.getTotal = function() {
	  return this.total;
	};

	/**
	* @memberof payments.BatchTotalType
	* @private
	*/
	BatchTotalType.prototype.getMetaInfo = function(fieldName) {
	  var curclass = this._class_;
	  do {
	    var fieldMetaInfo = curclass._meta_.fields[fieldName];
	    if(fieldMetaInfo) {
	      return fieldMetaInfo;
	    }
	    if(curclass._meta_._superMeta_) {
	      curclass = curclass._meta_._superMeta_._class_;
	    } else {
	      curclass = null;
	    }
	  } while(curclass);
	  return null;
	};

	BatchTotalType.prototype.toString = function() {
	  return JSON.stringify(this);
	};

	BatchTotalType._meta_ =  {fields:  {}};
	BatchTotalType._meta_._class_ =  BatchTotalType;
	BatchTotalType._meta_.fields["count"] = {};
	BatchTotalType._meta_.fields["count"].type = Number;
	BatchTotalType._meta_.fields["total"] = {};
	BatchTotalType._meta_.fields["total"].type = Number;

	//
	// Expose the module.
	//
	if (true) {
	module.exports = BatchTotalType;
	}



/***/ }),
/* 162 */
/***/ (function(module, exports, __webpack_require__) {

	/**
	 * Autogenerated by Avro
	 * 
	 * DO NOT EDIT DIRECTLY
	 */

	var apps_AppTracking = __webpack_require__(100);
	var payments_TransactionInfo = __webpack_require__(104);
	var base_Reference = __webpack_require__(5);
	var payments_GermanInfo = __webpack_require__(103);

	/**
	* @constructor
	* @memberof payments
	*/
	var CreditRefund = function() {
	  this._class_ = CreditRefund;
	  this.id = undefined;
	  this.orderRef = undefined;
	  this.device = undefined;
	  this.createdTime = undefined;
	  this.clientCreatedTime = undefined;
	  this.credit = undefined;
	  this.employee = undefined;
	  this.germanInfo = undefined;
	  this.appTracking = undefined;
	  this.transactionInfo = undefined;
	};


	/**
	* Set the field value
	* Unique identifier
	*
	* @memberof payments.CreditRefund
	* @param {String} id 
	*/
	CreditRefund.prototype.setId = function(id) {
	  this.id = id;
	};

	/**
	* Get the field value
	* Unique identifier
	* @memberof payments.CreditRefund
	* @return {String} 
	*/
	CreditRefund.prototype.getId = function() {
	  return this.id;
	};

	/**
	* Set the field value
	* The order with which the refund is associated
	*
	* @memberof payments.CreditRefund
	* @param {base.Reference} orderRef 
	*/
	CreditRefund.prototype.setOrderRef = function(orderRef) {
	  this.orderRef = orderRef;
	};

	/**
	* Get the field value
	* The order with which the refund is associated
	* @memberof payments.CreditRefund
	* @return {base.Reference} 
	*/
	CreditRefund.prototype.getOrderRef = function() {
	  return this.orderRef;
	};

	/**
	* Set the field value
	* Device which processed the transaction for this refund, a 128-bit UUID, not a normal base-13 Clover ID.
	*
	* @memberof payments.CreditRefund
	* @param {base.Reference|Null} device 
	*/
	CreditRefund.prototype.setDevice = function(device) {
	  this.device = device;
	};

	/**
	* Get the field value
	* Device which processed the transaction for this refund, a 128-bit UUID, not a normal base-13 Clover ID.
	* @memberof payments.CreditRefund
	* @return {base.Reference|Null} 
	*/
	CreditRefund.prototype.getDevice = function() {
	  return this.device;
	};

	/**
	* Set the field value
	* The time when the refund was recorded on the server
	*
	* @memberof payments.CreditRefund
	* @param {Number} createdTime must be a long integer
	*/
	CreditRefund.prototype.setCreatedTime = function(createdTime) {
	  this.createdTime = createdTime;
	};

	/**
	* Get the field value
	* The time when the refund was recorded on the server
	* @memberof payments.CreditRefund
	* @return {Number} must be a long integer
	*/
	CreditRefund.prototype.getCreatedTime = function() {
	  return this.createdTime;
	};

	/**
	* Set the field value
	* The time when the refund was recorded on the client
	*
	* @memberof payments.CreditRefund
	* @param {Number} clientCreatedTime must be a long integer
	*/
	CreditRefund.prototype.setClientCreatedTime = function(clientCreatedTime) {
	  this.clientCreatedTime = clientCreatedTime;
	};

	/**
	* Get the field value
	* The time when the refund was recorded on the client
	* @memberof payments.CreditRefund
	* @return {Number} must be a long integer
	*/
	CreditRefund.prototype.getClientCreatedTime = function() {
	  return this.clientCreatedTime;
	};

	/**
	* Set the field value
	* The credit with which the credit refund is associated
	*
	* @memberof payments.CreditRefund
	* @param {base.Reference} credit 
	*/
	CreditRefund.prototype.setCredit = function(credit) {
	  this.credit = credit;
	};

	/**
	* Get the field value
	* The credit with which the credit refund is associated
	* @memberof payments.CreditRefund
	* @return {base.Reference} 
	*/
	CreditRefund.prototype.getCredit = function() {
	  return this.credit;
	};

	/**
	* Set the field value
	* @memberof payments.CreditRefund
	* @param {base.Reference} employee 
	*/
	CreditRefund.prototype.setEmployee = function(employee) {
	  this.employee = employee;
	};

	/**
	* Get the field value
	* @memberof payments.CreditRefund
	* @return {base.Reference} 
	*/
	CreditRefund.prototype.getEmployee = function() {
	  return this.employee;
	};

	/**
	* Set the field value
	* German region-specific information
	*
	* @memberof payments.CreditRefund
	* @param {payments.GermanInfo|Null} germanInfo 
	*/
	CreditRefund.prototype.setGermanInfo = function(germanInfo) {
	  this.germanInfo = germanInfo;
	};

	/**
	* Get the field value
	* German region-specific information
	* @memberof payments.CreditRefund
	* @return {payments.GermanInfo|Null} 
	*/
	CreditRefund.prototype.getGermanInfo = function() {
	  return this.germanInfo;
	};

	/**
	* Set the field value
	* Tracking information for the app that created this payment.
	*
	* @memberof payments.CreditRefund
	* @param {apps.AppTracking|Null} appTracking 
	*/
	CreditRefund.prototype.setAppTracking = function(appTracking) {
	  this.appTracking = appTracking;
	};

	/**
	* Get the field value
	* Tracking information for the app that created this payment.
	* @memberof payments.CreditRefund
	* @return {apps.AppTracking|Null} 
	*/
	CreditRefund.prototype.getAppTracking = function() {
	  return this.appTracking;
	};

	/**
	* Set the field value
	* Transaction information
	*
	* @memberof payments.CreditRefund
	* @param {payments.TransactionInfo|Null} transactionInfo 
	*/
	CreditRefund.prototype.setTransactionInfo = function(transactionInfo) {
	  this.transactionInfo = transactionInfo;
	};

	/**
	* Get the field value
	* Transaction information
	* @memberof payments.CreditRefund
	* @return {payments.TransactionInfo|Null} 
	*/
	CreditRefund.prototype.getTransactionInfo = function() {
	  return this.transactionInfo;
	};

	/**
	* @memberof payments.CreditRefund
	* @private
	*/
	CreditRefund.prototype.getMetaInfo = function(fieldName) {
	  var curclass = this._class_;
	  do {
	    var fieldMetaInfo = curclass._meta_.fields[fieldName];
	    if(fieldMetaInfo) {
	      return fieldMetaInfo;
	    }
	    if(curclass._meta_._superMeta_) {
	      curclass = curclass._meta_._superMeta_._class_;
	    } else {
	      curclass = null;
	    }
	  } while(curclass);
	  return null;
	};

	CreditRefund.prototype.toString = function() {
	  return JSON.stringify(this);
	};

	CreditRefund._meta_ =  {fields:  {}};
	CreditRefund._meta_._class_ =  CreditRefund;
	CreditRefund._meta_.fields["id"] = {};
	CreditRefund._meta_.fields["id"].type = String;
	CreditRefund._meta_.fields["orderRef"] = {};
	CreditRefund._meta_.fields["orderRef"].type = base_Reference;
	CreditRefund._meta_.fields["device"] = {};
	CreditRefund._meta_.fields["device"].type = base_Reference;
	CreditRefund._meta_.fields["createdTime"] = {};
	CreditRefund._meta_.fields["createdTime"].type = Number;
	CreditRefund._meta_.fields["clientCreatedTime"] = {};
	CreditRefund._meta_.fields["clientCreatedTime"].type = Number;
	CreditRefund._meta_.fields["credit"] = {};
	CreditRefund._meta_.fields["credit"].type = base_Reference;
	CreditRefund._meta_.fields["employee"] = {};
	CreditRefund._meta_.fields["employee"].type = base_Reference;
	CreditRefund._meta_.fields["germanInfo"] = {};
	CreditRefund._meta_.fields["germanInfo"].type = payments_GermanInfo;
	CreditRefund._meta_.fields["appTracking"] = {};
	CreditRefund._meta_.fields["appTracking"].type = apps_AppTracking;
	CreditRefund._meta_.fields["transactionInfo"] = {};
	CreditRefund._meta_.fields["transactionInfo"].type = payments_TransactionInfo;

	//
	// Expose the module.
	//
	if (true) {
	module.exports = CreditRefund;
	}



/***/ }),
/* 163 */
/***/ (function(module, exports, __webpack_require__) {

	/**
	 * Autogenerated by Avro
	 * 
	 * DO NOT EDIT DIRECTLY
	 */


	/**
	* @constructor
	* @memberof payments
	*/
	var LineItemPayment = function() {
	  this._class_ = LineItemPayment;
	  this.id = undefined;
	  this.percentage = undefined;
	  this.binName = undefined;
	  this.refunded = undefined;
	};


	/**
	* Set the field value
	* Unique identifier; TBD this is confusing because it's used as either line item id or payment id
	*
	* @memberof payments.LineItemPayment
	* @param {String} id 
	*/
	LineItemPayment.prototype.setId = function(id) {
	  this.id = id;
	};

	/**
	* Get the field value
	* Unique identifier; TBD this is confusing because it's used as either line item id or payment id
	* @memberof payments.LineItemPayment
	* @return {String} 
	*/
	LineItemPayment.prototype.getId = function() {
	  return this.id;
	};

	/**
	* Set the field value
	* Percent of this line item covered by this payment
	*
	* @memberof payments.LineItemPayment
	* @param {Number} percentage must be a long integer
	*/
	LineItemPayment.prototype.setPercentage = function(percentage) {
	  this.percentage = percentage;
	};

	/**
	* Get the field value
	* Percent of this line item covered by this payment
	* @memberof payments.LineItemPayment
	* @return {Number} must be a long integer
	*/
	LineItemPayment.prototype.getPercentage = function() {
	  return this.percentage;
	};

	/**
	* Set the field value
	* Bin this line item payment was for
	*
	* @memberof payments.LineItemPayment
	* @param {Null|String} binName 
	*/
	LineItemPayment.prototype.setBinName = function(binName) {
	  this.binName = binName;
	};

	/**
	* Get the field value
	* Bin this line item payment was for
	* @memberof payments.LineItemPayment
	* @return {Null|String} 
	*/
	LineItemPayment.prototype.getBinName = function() {
	  return this.binName;
	};

	/**
	* Set the field value
	* Payment has been refunded
	*
	* @memberof payments.LineItemPayment
	* @param {Boolean} refunded 
	*/
	LineItemPayment.prototype.setRefunded = function(refunded) {
	  this.refunded = refunded;
	};

	/**
	* Get the field value
	* Payment has been refunded
	* @memberof payments.LineItemPayment
	* @return {Boolean} 
	*/
	LineItemPayment.prototype.getRefunded = function() {
	  return this.refunded;
	};

	/**
	* @memberof payments.LineItemPayment
	* @private
	*/
	LineItemPayment.prototype.getMetaInfo = function(fieldName) {
	  var curclass = this._class_;
	  do {
	    var fieldMetaInfo = curclass._meta_.fields[fieldName];
	    if(fieldMetaInfo) {
	      return fieldMetaInfo;
	    }
	    if(curclass._meta_._superMeta_) {
	      curclass = curclass._meta_._superMeta_._class_;
	    } else {
	      curclass = null;
	    }
	  } while(curclass);
	  return null;
	};

	LineItemPayment.prototype.toString = function() {
	  return JSON.stringify(this);
	};

	LineItemPayment._meta_ =  {fields:  {}};
	LineItemPayment._meta_._class_ =  LineItemPayment;
	LineItemPayment._meta_.fields["id"] = {};
	LineItemPayment._meta_.fields["id"].type = String;
	LineItemPayment._meta_.fields["percentage"] = {};
	LineItemPayment._meta_.fields["percentage"].type = Number;
	LineItemPayment._meta_.fields["binName"] = {};
	LineItemPayment._meta_.fields["binName"].type = String;
	LineItemPayment._meta_.fields["refunded"] = {};
	LineItemPayment._meta_.fields["refunded"].type = Boolean;

	//
	// Expose the module.
	//
	if (true) {
	module.exports = LineItemPayment;
	}



/***/ }),
/* 164 */
/***/ (function(module, exports, __webpack_require__) {

	/**
	 * Autogenerated by Avro
	 * 
	 * DO NOT EDIT DIRECTLY
	 */

	var payments_TipMode = __webpack_require__(254);
	var payments_DataEntryLocation = __webpack_require__(251);
	var merchant_TipSuggestion = __webpack_require__(118);

	/**
	* @constructor
	* @memberof payments
	*/
	var TransactionSettings = function() {
	  this._class_ = TransactionSettings;
	  this.cardEntryMethods = undefined;
	  this.disableCashBack = false;
	  this.cloverShouldHandleReceipts = true;
	  this.forcePinEntryOnSwipe = false;
	  this.disableRestartTransactionOnFailure = false;
	  this.allowOfflinePayment = false;
	  this.approveOfflinePaymentWithoutPrompt = false;
	  this.forceOfflinePayment = false;
	  this.signatureThreshold = undefined;
	  this.signatureEntryLocation = undefined;
	  this.tipMode = undefined;
	  this.tippableAmount = undefined;
	  this.disableReceiptSelection = false;
	  this.disableDuplicateCheck = false;
	  this.autoAcceptPaymentConfirmations = false;
	  this.autoAcceptSignature = false;
	  this.returnResultOnTransactionComplete = false;
	  this.tipSuggestions = undefined;
	  this.regionalExtras = undefined;
	};


	/**
	* Set the field value
	* @memberof payments.TransactionSettings
	* @param {Number} cardEntryMethods must be an integer
	*/
	TransactionSettings.prototype.setCardEntryMethods = function(cardEntryMethods) {
	  this.cardEntryMethods = cardEntryMethods;
	};

	/**
	* Get the field value
	* @memberof payments.TransactionSettings
	* @return {Number} must be an integer
	*/
	TransactionSettings.prototype.getCardEntryMethods = function() {
	  return this.cardEntryMethods;
	};

	/**
	* Set the field value
	* @memberof payments.TransactionSettings
	* @param {Boolean} disableCashBack 
	*/
	TransactionSettings.prototype.setDisableCashBack = function(disableCashBack) {
	  this.disableCashBack = disableCashBack;
	};

	/**
	* Get the field value
	* @memberof payments.TransactionSettings
	* @return {Boolean} 
	*/
	TransactionSettings.prototype.getDisableCashBack = function() {
	  return this.disableCashBack;
	};

	/**
	* Set the field value
	* @memberof payments.TransactionSettings
	* @param {Boolean} cloverShouldHandleReceipts 
	*/
	TransactionSettings.prototype.setCloverShouldHandleReceipts = function(cloverShouldHandleReceipts) {
	  this.cloverShouldHandleReceipts = cloverShouldHandleReceipts;
	};

	/**
	* Get the field value
	* @memberof payments.TransactionSettings
	* @return {Boolean} 
	*/
	TransactionSettings.prototype.getCloverShouldHandleReceipts = function() {
	  return this.cloverShouldHandleReceipts;
	};

	/**
	* Set the field value
	* @memberof payments.TransactionSettings
	* @param {Boolean} forcePinEntryOnSwipe 
	*/
	TransactionSettings.prototype.setForcePinEntryOnSwipe = function(forcePinEntryOnSwipe) {
	  this.forcePinEntryOnSwipe = forcePinEntryOnSwipe;
	};

	/**
	* Get the field value
	* @memberof payments.TransactionSettings
	* @return {Boolean} 
	*/
	TransactionSettings.prototype.getForcePinEntryOnSwipe = function() {
	  return this.forcePinEntryOnSwipe;
	};

	/**
	* Set the field value
	* @memberof payments.TransactionSettings
	* @param {Boolean} disableRestartTransactionOnFailure 
	*/
	TransactionSettings.prototype.setDisableRestartTransactionOnFailure = function(disableRestartTransactionOnFailure) {
	  this.disableRestartTransactionOnFailure = disableRestartTransactionOnFailure;
	};

	/**
	* Get the field value
	* @memberof payments.TransactionSettings
	* @return {Boolean} 
	*/
	TransactionSettings.prototype.getDisableRestartTransactionOnFailure = function() {
	  return this.disableRestartTransactionOnFailure;
	};

	/**
	* Set the field value
	* @memberof payments.TransactionSettings
	* @param {Boolean} allowOfflinePayment 
	*/
	TransactionSettings.prototype.setAllowOfflinePayment = function(allowOfflinePayment) {
	  this.allowOfflinePayment = allowOfflinePayment;
	};

	/**
	* Get the field value
	* @memberof payments.TransactionSettings
	* @return {Boolean} 
	*/
	TransactionSettings.prototype.getAllowOfflinePayment = function() {
	  return this.allowOfflinePayment;
	};

	/**
	* Set the field value
	* @memberof payments.TransactionSettings
	* @param {Boolean} approveOfflinePaymentWithoutPrompt 
	*/
	TransactionSettings.prototype.setApproveOfflinePaymentWithoutPrompt = function(approveOfflinePaymentWithoutPrompt) {
	  this.approveOfflinePaymentWithoutPrompt = approveOfflinePaymentWithoutPrompt;
	};

	/**
	* Get the field value
	* @memberof payments.TransactionSettings
	* @return {Boolean} 
	*/
	TransactionSettings.prototype.getApproveOfflinePaymentWithoutPrompt = function() {
	  return this.approveOfflinePaymentWithoutPrompt;
	};

	/**
	* Set the field value
	* @memberof payments.TransactionSettings
	* @param {Boolean} forceOfflinePayment 
	*/
	TransactionSettings.prototype.setForceOfflinePayment = function(forceOfflinePayment) {
	  this.forceOfflinePayment = forceOfflinePayment;
	};

	/**
	* Get the field value
	* @memberof payments.TransactionSettings
	* @return {Boolean} 
	*/
	TransactionSettings.prototype.getForceOfflinePayment = function() {
	  return this.forceOfflinePayment;
	};

	/**
	* Set the field value
	* @memberof payments.TransactionSettings
	* @param {Number} signatureThreshold must be a long integer
	*/
	TransactionSettings.prototype.setSignatureThreshold = function(signatureThreshold) {
	  this.signatureThreshold = signatureThreshold;
	};

	/**
	* Get the field value
	* @memberof payments.TransactionSettings
	* @return {Number} must be a long integer
	*/
	TransactionSettings.prototype.getSignatureThreshold = function() {
	  return this.signatureThreshold;
	};

	/**
	* Set the field value
	* @memberof payments.TransactionSettings
	* @param {payments.DataEntryLocation} signatureEntryLocation 
	*/
	TransactionSettings.prototype.setSignatureEntryLocation = function(signatureEntryLocation) {
	  this.signatureEntryLocation = signatureEntryLocation;
	};

	/**
	* Get the field value
	* @memberof payments.TransactionSettings
	* @return {payments.DataEntryLocation} 
	*/
	TransactionSettings.prototype.getSignatureEntryLocation = function() {
	  return this.signatureEntryLocation;
	};

	/**
	* Set the field value
	* @memberof payments.TransactionSettings
	* @param {payments.TipMode} tipMode 
	*/
	TransactionSettings.prototype.setTipMode = function(tipMode) {
	  this.tipMode = tipMode;
	};

	/**
	* Get the field value
	* @memberof payments.TransactionSettings
	* @return {payments.TipMode} 
	*/
	TransactionSettings.prototype.getTipMode = function() {
	  return this.tipMode;
	};

	/**
	* Set the field value
	* @memberof payments.TransactionSettings
	* @param {Number} tippableAmount must be a long integer
	*/
	TransactionSettings.prototype.setTippableAmount = function(tippableAmount) {
	  this.tippableAmount = tippableAmount;
	};

	/**
	* Get the field value
	* @memberof payments.TransactionSettings
	* @return {Number} must be a long integer
	*/
	TransactionSettings.prototype.getTippableAmount = function() {
	  return this.tippableAmount;
	};

	/**
	* Set the field value
	* @memberof payments.TransactionSettings
	* @param {Boolean} disableReceiptSelection 
	*/
	TransactionSettings.prototype.setDisableReceiptSelection = function(disableReceiptSelection) {
	  this.disableReceiptSelection = disableReceiptSelection;
	};

	/**
	* Get the field value
	* @memberof payments.TransactionSettings
	* @return {Boolean} 
	*/
	TransactionSettings.prototype.getDisableReceiptSelection = function() {
	  return this.disableReceiptSelection;
	};

	/**
	* Set the field value
	* @memberof payments.TransactionSettings
	* @param {Boolean} disableDuplicateCheck 
	*/
	TransactionSettings.prototype.setDisableDuplicateCheck = function(disableDuplicateCheck) {
	  this.disableDuplicateCheck = disableDuplicateCheck;
	};

	/**
	* Get the field value
	* @memberof payments.TransactionSettings
	* @return {Boolean} 
	*/
	TransactionSettings.prototype.getDisableDuplicateCheck = function() {
	  return this.disableDuplicateCheck;
	};

	/**
	* Set the field value
	* If set to true, confirmation requests triggered by a challenge at the payment gateway are automatically accepted, and confirmation requests are not transmitted back to the calling program. Be sure you are willing to accept the risk associated with accepting offline or duplicate payment challenges. See https://docs.clover.com/build/working-with-challenges for more information.
	*
	* @memberof payments.TransactionSettings
	* @param {Boolean} autoAcceptPaymentConfirmations 
	*/
	TransactionSettings.prototype.setAutoAcceptPaymentConfirmations = function(autoAcceptPaymentConfirmations) {
	  this.autoAcceptPaymentConfirmations = autoAcceptPaymentConfirmations;
	};

	/**
	* Get the field value
	* If set to true, confirmation requests triggered by a challenge at the payment gateway are automatically accepted, and confirmation requests are not transmitted back to the calling program. Be sure you are willing to accept the risk associated with accepting offline or duplicate payment challenges. See https://docs.clover.com/build/working-with-challenges for more information.
	* @memberof payments.TransactionSettings
	* @return {Boolean} 
	*/
	TransactionSettings.prototype.getAutoAcceptPaymentConfirmations = function() {
	  return this.autoAcceptPaymentConfirmations;
	};

	/**
	* Set the field value
	* @memberof payments.TransactionSettings
	* @param {Boolean} autoAcceptSignature 
	*/
	TransactionSettings.prototype.setAutoAcceptSignature = function(autoAcceptSignature) {
	  this.autoAcceptSignature = autoAcceptSignature;
	};

	/**
	* Get the field value
	* @memberof payments.TransactionSettings
	* @return {Boolean} 
	*/
	TransactionSettings.prototype.getAutoAcceptSignature = function() {
	  return this.autoAcceptSignature;
	};

	/**
	* Set the field value
	* @memberof payments.TransactionSettings
	* @param {Boolean} returnResultOnTransactionComplete 
	*/
	TransactionSettings.prototype.setReturnResultOnTransactionComplete = function(returnResultOnTransactionComplete) {
	  this.returnResultOnTransactionComplete = returnResultOnTransactionComplete;
	};

	/**
	* Get the field value
	* @memberof payments.TransactionSettings
	* @return {Boolean} 
	*/
	TransactionSettings.prototype.getReturnResultOnTransactionComplete = function() {
	  return this.returnResultOnTransactionComplete;
	};

	/**
	* Set the field value
	* @memberof payments.TransactionSettings
	* @param {Array.<merchant.TipSuggestion>} tipSuggestions An array of 
	*/
	TransactionSettings.prototype.setTipSuggestions = function(tipSuggestions) {
	  this.tipSuggestions = tipSuggestions;
	};

	/**
	* Get the field value
	* @memberof payments.TransactionSettings
	* @return {Array.<merchant.TipSuggestion>} An array of 
	*/
	TransactionSettings.prototype.getTipSuggestions = function() {
	  return this.tipSuggestions;
	};

	/**
	* Set the field value
	* @memberof payments.TransactionSettings
	* @param {Object.<String,String>} regionalExtras A map of <String> to <>
	*/
	TransactionSettings.prototype.setRegionalExtras = function(regionalExtras) {
	  this.regionalExtras = regionalExtras;
	};

	/**
	* Get the field value
	* @memberof payments.TransactionSettings
	* @return {Object.<String,String>} A map of <String> to <>
	*/
	TransactionSettings.prototype.getRegionalExtras = function() {
	  return this.regionalExtras;
	};

	/**
	* @memberof payments.TransactionSettings
	* @private
	*/
	TransactionSettings.prototype.getMetaInfo = function(fieldName) {
	  var curclass = this._class_;
	  do {
	    var fieldMetaInfo = curclass._meta_.fields[fieldName];
	    if(fieldMetaInfo) {
	      return fieldMetaInfo;
	    }
	    if(curclass._meta_._superMeta_) {
	      curclass = curclass._meta_._superMeta_._class_;
	    } else {
	      curclass = null;
	    }
	  } while(curclass);
	  return null;
	};

	TransactionSettings.prototype.toString = function() {
	  return JSON.stringify(this);
	};

	TransactionSettings._meta_ =  {fields:  {}};
	TransactionSettings._meta_._class_ =  TransactionSettings;
	TransactionSettings._meta_.fields["cardEntryMethods"] = {};
	TransactionSettings._meta_.fields["cardEntryMethods"].type = Number;
	TransactionSettings._meta_.fields["disableCashBack"] = {};
	TransactionSettings._meta_.fields["disableCashBack"].type = Boolean;
	TransactionSettings._meta_.fields["cloverShouldHandleReceipts"] = {};
	TransactionSettings._meta_.fields["cloverShouldHandleReceipts"].type = Boolean;
	TransactionSettings._meta_.fields["forcePinEntryOnSwipe"] = {};
	TransactionSettings._meta_.fields["forcePinEntryOnSwipe"].type = Boolean;
	TransactionSettings._meta_.fields["disableRestartTransactionOnFailure"] = {};
	TransactionSettings._meta_.fields["disableRestartTransactionOnFailure"].type = Boolean;
	TransactionSettings._meta_.fields["allowOfflinePayment"] = {};
	TransactionSettings._meta_.fields["allowOfflinePayment"].type = Boolean;
	TransactionSettings._meta_.fields["approveOfflinePaymentWithoutPrompt"] = {};
	TransactionSettings._meta_.fields["approveOfflinePaymentWithoutPrompt"].type = Boolean;
	TransactionSettings._meta_.fields["forceOfflinePayment"] = {};
	TransactionSettings._meta_.fields["forceOfflinePayment"].type = Boolean;
	TransactionSettings._meta_.fields["signatureThreshold"] = {};
	TransactionSettings._meta_.fields["signatureThreshold"].type = Number;
	TransactionSettings._meta_.fields["signatureEntryLocation"] = {};
	TransactionSettings._meta_.fields["signatureEntryLocation"].type = payments_DataEntryLocation;
	TransactionSettings._meta_.fields["tipMode"] = {};
	TransactionSettings._meta_.fields["tipMode"].type = payments_TipMode;
	TransactionSettings._meta_.fields["tippableAmount"] = {};
	TransactionSettings._meta_.fields["tippableAmount"].type = Number;
	TransactionSettings._meta_.fields["disableReceiptSelection"] = {};
	TransactionSettings._meta_.fields["disableReceiptSelection"].type = Boolean;
	TransactionSettings._meta_.fields["disableDuplicateCheck"] = {};
	TransactionSettings._meta_.fields["disableDuplicateCheck"].type = Boolean;
	TransactionSettings._meta_.fields["autoAcceptPaymentConfirmations"] = {};
	TransactionSettings._meta_.fields["autoAcceptPaymentConfirmations"].type = Boolean;
	TransactionSettings._meta_.fields["autoAcceptSignature"] = {};
	TransactionSettings._meta_.fields["autoAcceptSignature"].type = Boolean;
	TransactionSettings._meta_.fields["returnResultOnTransactionComplete"] = {};
	TransactionSettings._meta_.fields["returnResultOnTransactionComplete"].type = Boolean;
	TransactionSettings._meta_.fields["tipSuggestions"] = {};
	TransactionSettings._meta_.fields["tipSuggestions"].type = Array;
	TransactionSettings._meta_.fields["tipSuggestions"].elementType = merchant_TipSuggestion;
	TransactionSettings._meta_.fields["regionalExtras"] = {};
	TransactionSettings._meta_.fields["regionalExtras"].type = Object;

	//
	// Expose the module.
	//
	if (true) {
	module.exports = TransactionSettings;
	}



/***/ }),
/* 165 */
/***/ (function(module, exports, __webpack_require__) {

	/**
	 * Autogenerated by Avro
	 * 
	 * DO NOT EDIT DIRECTLY
	 */

	var payments_VasDataTypeType = __webpack_require__(463);

	/** Service types supported by the vas provider. */
	/**
	* @constructor
	* @memberof payments
	*/
	var VasDataType = function() {
	  this._class_ = VasDataType;
	  this.dataType = undefined;
	};


	/**
	* Set the field value
	* @memberof payments.VasDataType
	* @param {payments.VasDataTypeType} dataType 
	*/
	VasDataType.prototype.setDataType = function(dataType) {
	  this.dataType = dataType;
	};

	/**
	* Get the field value
	* @memberof payments.VasDataType
	* @return {payments.VasDataTypeType} 
	*/
	VasDataType.prototype.getDataType = function() {
	  return this.dataType;
	};

	/**
	* @memberof payments.VasDataType
	* @private
	*/
	VasDataType.prototype.getMetaInfo = function(fieldName) {
	  var curclass = this._class_;
	  do {
	    var fieldMetaInfo = curclass._meta_.fields[fieldName];
	    if(fieldMetaInfo) {
	      return fieldMetaInfo;
	    }
	    if(curclass._meta_._superMeta_) {
	      curclass = curclass._meta_._superMeta_._class_;
	    } else {
	      curclass = null;
	    }
	  } while(curclass);
	  return null;
	};

	VasDataType.prototype.toString = function() {
	  return JSON.stringify(this);
	};

	VasDataType._meta_ =  {fields:  {}};
	VasDataType._meta_._class_ =  VasDataType;
	VasDataType._meta_.fields["dataType"] = {};
	VasDataType._meta_.fields["dataType"].type = payments_VasDataTypeType;

	//
	// Expose the module.
	//
	if (true) {
	module.exports = VasDataType;
	}



/***/ }),
/* 166 */
/***/ (function(module, exports, __webpack_require__) {

	/**
	 * Autogenerated by Avro
	 * 
	 * DO NOT EDIT DIRECTLY
	 */


	/**
	* @memberof printer
	* @enum {string}
	*/
	var PrintCategory = {
	  ORDER : "ORDER",
	  RECEIPT : "RECEIPT",
	  FISCAL : "FISCAL",
	  LABEL : "LABEL"
	};


	//
	// Expose the module.
	//
	if (true) {
	module.exports = PrintCategory;
	}



/***/ }),
/* 167 */
/***/ (function(module, exports, __webpack_require__) {

	/**
	 * Autogenerated by Avro
	 * 
	 * DO NOT EDIT DIRECTLY
	 */


	/**
	* @memberof remotemessage
	* @enum {string}
	*/
	var KeyPress = {
	  NONE : "NONE",
	  ENTER : "ENTER",
	  ESC : "ESC",
	  BACKSPACE : "BACKSPACE",
	  TAB : "TAB",
	  STAR : "STAR",
	  BUTTON_1 : "BUTTON_1",
	  BUTTON_2 : "BUTTON_2",
	  BUTTON_3 : "BUTTON_3",
	  BUTTON_4 : "BUTTON_4",
	  BUTTON_5 : "BUTTON_5",
	  BUTTON_6 : "BUTTON_6",
	  BUTTON_7 : "BUTTON_7",
	  BUTTON_8 : "BUTTON_8",
	  DIGIT_1 : "DIGIT_1",
	  DIGIT_2 : "DIGIT_2",
	  DIGIT_3 : "DIGIT_3",
	  DIGIT_4 : "DIGIT_4",
	  DIGIT_5 : "DIGIT_5",
	  DIGIT_6 : "DIGIT_6",
	  DIGIT_7 : "DIGIT_7",
	  DIGIT_8 : "DIGIT_8",
	  DIGIT_9 : "DIGIT_9",
	  DIGIT_0 : "DIGIT_0"
	};


	//
	// Expose the module.
	//
	if (true) {
	module.exports = KeyPress;
	}



/***/ }),
/* 168 */
/***/ (function(module, exports, __webpack_require__) {

	/**
	 * Autogenerated by Avro
	 * 
	 * DO NOT EDIT DIRECTLY
	 */


	/**
	* @memberof remotemessage
	* @enum {string}
	*/
	var TxState = {
	  START : "START",
	  SUCCESS : "SUCCESS",
	  FAIL : "FAIL"
	};


	//
	// Expose the module.
	//
	if (true) {
	module.exports = TxState;
	}



/***/ }),
/* 169 */
/***/ (function(module, exports, __webpack_require__) {

	/**
	 * Autogenerated by Avro
	 *
	 * DO NOT EDIT DIRECTLY
	 */

	var remotepay_BaseRequest = __webpack_require__(14);
	var remotepay_TransactionType = __webpack_require__(89);
	var payments_VaultedCard = __webpack_require__(70);

	/**
	 * @constructor
	 * @augments remotepay.BaseRequest
	 * @memberof remotepay
	 */
	var BaseTransactionRequest = function() {
	  remotepay_BaseRequest.call(this);
	  this._superClass_ = remotepay_BaseRequest;
	  this._class_ = BaseTransactionRequest;
	  this.disablePrinting = undefined;
	  this.disableReceiptSelection = undefined;
	  this.disableDuplicateChecking = undefined;
	  this.cardNotPresent = undefined;
	  this.disableRestartTransactionOnFail = undefined;
	  this.amount = undefined;
	  this.cardEntryMethods = undefined;
	  this.presentQrcOnly = undefined;
	  this.vaultedCard = undefined;
	  this.externalId = undefined;
	  this.type = undefined;
	  this.autoAcceptPaymentConfirmations = undefined;
	  this.extras = undefined;
	  this.regionalExtras = undefined;
	  this.externalReferenceId = undefined;
	};

	BaseTransactionRequest.prototype = Object.create(remotepay_BaseRequest.prototype);
	BaseTransactionRequest.prototype.constructor = BaseTransactionRequest;

	/**
	 * Set the field value
	 * If true, then do not print using the clover printer.  Return print information.
	 *
	 * @memberof remotepay.BaseTransactionRequest
	 * @param {Boolean|Null} disablePrinting
	 */
	BaseTransactionRequest.prototype.setDisablePrinting = function(disablePrinting) {
	  this.disablePrinting = disablePrinting;
	};

	/**
	 * Get the field value
	 * If true, then do not print using the clover printer.  Return print information.
	 * @memberof remotepay.BaseTransactionRequest
	 * @return {Boolean|Null}
	 */
	BaseTransactionRequest.prototype.getDisablePrinting = function() {
	  return this.disablePrinting;
	};

	/**
	 * Set the field value
	 * Do not show the receipt options screen
	 *
	 * @memberof remotepay.BaseTransactionRequest
	 * @param {Boolean|Null} disableReceiptSelection
	 */
	BaseTransactionRequest.prototype.setDisableReceiptSelection = function(disableReceiptSelection) {
	  this.disableReceiptSelection = disableReceiptSelection;
	};

	/**
	 * Get the field value
	 * Do not show the receipt options screen
	 * @memberof remotepay.BaseTransactionRequest
	 * @return {Boolean|Null}
	 */
	BaseTransactionRequest.prototype.getDisableReceiptSelection = function() {
	  return this.disableReceiptSelection;
	};

	/**
	 * Set the field value
	 * Do not do heuristic duplicate checking
	 *
	 * @memberof remotepay.BaseTransactionRequest
	 * @param {Boolean|Null} disableDuplicateChecking
	 */
	BaseTransactionRequest.prototype.setDisableDuplicateChecking = function(disableDuplicateChecking) {
	  this.disableDuplicateChecking = disableDuplicateChecking;
	};

	/**
	 * Get the field value
	 * Do not do heuristic duplicate checking
	 * @memberof remotepay.BaseTransactionRequest
	 * @return {Boolean|Null}
	 */
	BaseTransactionRequest.prototype.getDisableDuplicateChecking = function() {
	  return this.disableDuplicateChecking;
	};

	/**
	 * Set the field value
	 * If true then card not present is accepted
	 *
	 * @memberof remotepay.BaseTransactionRequest
	 * @param {Boolean|Null} cardNotPresent
	 */
	BaseTransactionRequest.prototype.setCardNotPresent = function(cardNotPresent) {
	  this.cardNotPresent = cardNotPresent;
	};

	/**
	 * Get the field value
	 * If true then card not present is accepted
	 * @memberof remotepay.BaseTransactionRequest
	 * @return {Boolean|Null}
	 */
	BaseTransactionRequest.prototype.getCardNotPresent = function() {
	  return this.cardNotPresent;
	};

	/**
	 * Set the field value
	 * If the transaction times out or fails because of decline, do not restart it
	 *
	 * @memberof remotepay.BaseTransactionRequest
	 * @param {Boolean|Null} disableRestartTransactionOnFail
	 */
	BaseTransactionRequest.prototype.setDisableRestartTransactionOnFail = function(disableRestartTransactionOnFail) {
	  this.disableRestartTransactionOnFail = disableRestartTransactionOnFail;
	};

	/**
	 * Get the field value
	 * If the transaction times out or fails because of decline, do not restart it
	 * @memberof remotepay.BaseTransactionRequest
	 * @return {Boolean|Null}
	 */
	BaseTransactionRequest.prototype.getDisableRestartTransactionOnFail = function() {
	  return this.disableRestartTransactionOnFail;
	};

	/**
	 * Set the field value
	 * Total amount paid
	 *
	 * @memberof remotepay.BaseTransactionRequest
	 * @param {Number} amount must be a long integer
	 */
	BaseTransactionRequest.prototype.setAmount = function(amount) {
	  this.amount = amount;
	};

	/**
	 * Get the field value
	 * Total amount paid
	 * @memberof remotepay.BaseTransactionRequest
	 * @return {Number} must be a long integer
	 */
	BaseTransactionRequest.prototype.getAmount = function() {
	  return this.amount;
	};

	/**
	 * Set the field value
	 * Allowed entry methods
	 *
	 * @memberof remotepay.BaseTransactionRequest
	 * @param {Number|Null} cardEntryMethods must be an integer,
	 */
	BaseTransactionRequest.prototype.setCardEntryMethods = function(cardEntryMethods) {
	  this.cardEntryMethods = cardEntryMethods;
	};

	/**
	 * Get the field value
	 * Allowed entry methods
	 * @memberof remotepay.BaseTransactionRequest
	 * @return {Number|Null} must be an integer,
	 */
	BaseTransactionRequest.prototype.getCardEntryMethods = function () {
	  return this.cardEntryMethods;
	};

	/**
	 * Set the field value
	 * Present only the QR Code for Payment
	 *
	 * @memberof remotepay.BaseTransactionRequest
	 * @param {Boolean|Null} presentQrcOnly
	 */
	BaseTransactionRequest.prototype.setPresentQrcOnly = function (presentQrcOnly) {
	  this.presentQrcOnly = presentQrcOnly;
	};

	/**
	 * Get the field value
	 * Present only the QR Code for Payment
	 * @memberof remotepay.BaseTransactionRequest
	 * @return {Boolean|Null}
	 */
	BaseTransactionRequest.prototype.getPresentQrcOnly = function () {
	  return this.presentQrcOnly;
	};

	/**
	 * Set the field value
	 * A saved card
	 *
	 * @memberof remotepay.BaseTransactionRequest
	 * @param {payments.VaultedCard|Null} vaultedCard
	 */
	BaseTransactionRequest.prototype.setVaultedCard = function (vaultedCard) {
	  this.vaultedCard = vaultedCard;
	};

	/**
	 * Get the field value
	 * A saved card
	 * @memberof remotepay.BaseTransactionRequest
	 * @return {payments.VaultedCard|Null}
	 */
	BaseTransactionRequest.prototype.getVaultedCard = function() {
	  return this.vaultedCard;
	};

	/**
	 * Set the field value
	 * An id that will be persisted with transactions.
	 *
	 * @memberof remotepay.BaseTransactionRequest
	 * @param {String} externalId
	 */
	BaseTransactionRequest.prototype.setExternalId = function(externalId) {
	  this.externalId = externalId;
	};

	/**
	 * Get the field value
	 * An id that will be persisted with transactions.
	 * @memberof remotepay.BaseTransactionRequest
	 * @return {String}
	 */
	BaseTransactionRequest.prototype.getExternalId = function() {
	  return this.externalId;
	};

	/**
	 * Get the field value
	 * The type of the transaction.
	 * @memberof remotepay.BaseTransactionRequest
	 * @return {remotepay.TransactionType}
	 */
	BaseTransactionRequest.prototype.getType = function() {
	  return this.type;
	};

	/**
	 * Set the field value
	 * Do not show/send potential duplicate challenges
	 *
	 * @memberof remotepay.BaseTransactionRequest
	 * @param {Boolean|Null} autoAcceptPaymentConfirmations
	 */
	BaseTransactionRequest.prototype.setAutoAcceptPaymentConfirmations = function(autoAcceptPaymentConfirmations) {
	  this.autoAcceptPaymentConfirmations = autoAcceptPaymentConfirmations;
	};

	/**
	 * Get the field value
	 * Do not show/send potential duplicate challenges
	 * @memberof remotepay.BaseTransactionRequest
	 * @return {Boolean|Null}
	 */
	BaseTransactionRequest.prototype.getAutoAcceptPaymentConfirmations = function() {
	  return this.autoAcceptPaymentConfirmations;
	};

	/**
	 * Set the field value
	 * Extra pass-through data used by external systems.
	 *
	 * @memberof remotepay.BaseTransactionRequest
	 * @param {Object.<String,String>} extras A map of <String> to <>
	 */
	BaseTransactionRequest.prototype.setExtras = function(extras) {
	  this.extras = extras;
	};

	/**
	 * Get the field value
	 * Extra pass-through data used by external systems.
	 * @memberof remotepay.BaseTransactionRequest
	 * @return {Object.<String,String>} A map of <String> to <>
	 */
	BaseTransactionRequest.prototype.getExtras = function() {
	  return this.extras;
	};

	/**
	 * Set the field value
	 * A map of values for regional specific data
	 *
	 * @memberof remotepay.BaseTransactionRequest
	 * @param {Object.<String,String>} regionalExtras A map of <String> to <>
	 */
	BaseTransactionRequest.prototype.setRegionalExtras = function(regionalExtras) {
	  this.regionalExtras = regionalExtras;
	};

	/**
	 * Get the field value
	 * A map of values for regional specific data
	 * @memberof remotepay.BaseTransactionRequest
	 * @return {Object.<String,String>} A map of <String> to <>
	 */
	BaseTransactionRequest.prototype.getRegionalExtras = function() {
	  return this.regionalExtras;
	};

	/**
	 * Set the field value
	 * An id that can be passed to the merchant's gateway, and ultimately appear in settlement records.
	 *
	 * @memberof remotepay.BaseTransactionRequest
	 * @param {String} externalReferenceId
	 */
	BaseTransactionRequest.prototype.setExternalReferenceId = function(externalReferenceId) {
	  this.externalReferenceId = externalReferenceId;
	};

	/**
	 * Get the field value
	 * An id that can be passed to the merchant's gateway, and ultimately appear in settlement records.
	 * @memberof remotepay.BaseTransactionRequest
	 * @return {String}
	 */
	BaseTransactionRequest.prototype.getExternalReferenceId = function() {
	  return this.externalReferenceId;
	};

	BaseTransactionRequest._meta_ =  {fields:  {}};
	BaseTransactionRequest._meta_._class_ =  BaseTransactionRequest;
	BaseTransactionRequest._meta_._superMeta_ = remotepay_BaseRequest._meta_;
	BaseTransactionRequest._meta_.fields["disablePrinting"] = {};
	BaseTransactionRequest._meta_.fields["disablePrinting"].type = Boolean;
	BaseTransactionRequest._meta_.fields["disableReceiptSelection"] = {};
	BaseTransactionRequest._meta_.fields["disableReceiptSelection"].type = Boolean;
	BaseTransactionRequest._meta_.fields["disableDuplicateChecking"] = {};
	BaseTransactionRequest._meta_.fields["disableDuplicateChecking"].type = Boolean;
	BaseTransactionRequest._meta_.fields["cardNotPresent"] = {};
	BaseTransactionRequest._meta_.fields["cardNotPresent"].type = Boolean;
	BaseTransactionRequest._meta_.fields["disableRestartTransactionOnFail"] = {};
	BaseTransactionRequest._meta_.fields["disableRestartTransactionOnFail"].type = Boolean;
	BaseTransactionRequest._meta_.fields["amount"] = {};
	BaseTransactionRequest._meta_.fields["amount"].type = Number;
	BaseTransactionRequest._meta_.fields["cardEntryMethods"] = {};
	BaseTransactionRequest._meta_.fields["cardEntryMethods"].type = Number;
	BaseTransactionRequest._meta_.fields["presentQrcOnly"] = {};
	BaseTransactionRequest._meta_.fields["presentQrcOnly"].type = Boolean;
	BaseTransactionRequest._meta_.fields["vaultedCard"] = {};
	BaseTransactionRequest._meta_.fields["vaultedCard"].type = payments_VaultedCard;
	BaseTransactionRequest._meta_.fields["externalId"] = {};
	BaseTransactionRequest._meta_.fields["externalId"].type = String;
	BaseTransactionRequest._meta_.fields["type"] = {};
	BaseTransactionRequest._meta_.fields["type"].type = remotepay_TransactionType;
	BaseTransactionRequest._meta_.fields["autoAcceptPaymentConfirmations"] = {};
	BaseTransactionRequest._meta_.fields["autoAcceptPaymentConfirmations"].type = Boolean;
	BaseTransactionRequest._meta_.fields["extras"] = {};
	BaseTransactionRequest._meta_.fields["extras"].type = Object;
	BaseTransactionRequest._meta_.fields["regionalExtras"] = {};
	BaseTransactionRequest._meta_.fields["regionalExtras"].type = Object;
	BaseTransactionRequest._meta_.fields["externalReferenceId"] = {};
	BaseTransactionRequest._meta_.fields["externalReferenceId"].type = String;

	//
	// Expose the module.
	//
	if (true) {
	  module.exports = BaseTransactionRequest;
	}


/***/ }),
/* 170 */
/***/ (function(module, exports, __webpack_require__) {

	/**
	 * Autogenerated by Avro
	 * 
	 * DO NOT EDIT DIRECTLY
	 */


	/**
	* @memberof remotepay
	* @enum {string}
	*/
	var ResultStatus = {
	  SUCCESS : "SUCCESS",
	  FAIL : "FAIL",
	  CANCEL : "CANCEL"
	};


	//
	// Expose the module.
	//
	if (true) {
	module.exports = ResultStatus;
	}



/***/ }),
/* 171 */
/***/ (function(module, exports, __webpack_require__) {

	"use strict";
	Object.defineProperty(exports, "__esModule", { value: true });
	exports.CloverConnector = void 0;
	var sdk = __webpack_require__(35);
	var CardEntryMethods_1 = __webpack_require__(496);
	var CloverConnectorBroadcaster_1 = __webpack_require__(1226);
	var CloverDeviceFactory_1 = __webpack_require__(498);
	var Logger_1 = __webpack_require__(48);
	var Builder_1 = __webpack_require__(1238);
	/**
	 * Clover Connector
	 *
	 * The clover connector implements the ICloverConnector interface. This is where
	 * we define how the connector interacts with remote pay adapters.
	 */
	var CloverConnector = /** @class */ (function () {
	    function CloverConnector(config) {
	        // manual is not enabled by default
	        this.cardEntryMethods = CardEntryMethods_1.CardEntryMethods.DEFAULT;
	        // Create a logger
	        this.logger = Logger_1.Logger.create();
	        // List of listeners to broadcast notifications to
	        this.broadcaster = new CloverConnectorBroadcaster_1.CloverConnectorBroadcaster();
	        // Flag indicating whether the device is ready or not
	        this.isReady = false;
	        // Set the cancel input option
	        CloverConnector.CANCEL_INPUT_OPTION = new sdk.remotemessage.InputOption();
	        CloverConnector.CANCEL_INPUT_OPTION.setKeyPress(sdk.remotemessage.KeyPress.ESC);
	        CloverConnector.CANCEL_INPUT_OPTION.setDescription("Cancel");
	        // Try to load the configuration.
	        if (config) {
	            this.configuration = config;
	        }
	    }
	    /**
	     * Initialize the connector with a new config
	     *
	     * @param {CloverDeviceConfiguration} config - the configuration for the connector
	     */
	    CloverConnector.prototype.initialize = function (config) {
	        this.configuration = config;
	        this.deviceObserver = new CloverConnector.InnerDeviceObserver(this);
	        // Get the device and subscribe to it.
	        this.device = CloverDeviceFactory_1.CloverDeviceFactory.get(config);
	        if (this.device) {
	            this.device.subscribe(this.deviceObserver);
	        }
	    };
	    CloverConnector.prototype.initializeConnection = function () {
	        if (!this.device) {
	            this.initialize(this.configuration);
	        }
	    };
	    /**
	     * Add new listener to receive broadcast notifications
	     *
	     * @param {sdk.remotepay.ICloverConnectorListener} connectorListener - the listener to add
	     */
	    CloverConnector.prototype.addCloverConnectorListener = function (connectorListener) {
	        this.broadcaster.push(connectorListener);
	    };
	    /**
	     * Remove a listener
	     *
	     * @param {sdk.remotepay.ICloverConnectorListener} connectorListener - the listener to remove
	     */
	    CloverConnector.prototype.removeCloverConnectorListener = function (connectorListener) {
	        var indexOfListener = this.broadcaster.indexOf(connectorListener);
	        if (indexOfListener != -1) {
	            this.broadcaster.splice(indexOfListener, 1);
	        }
	    };
	    CloverConnector.prototype.sale = function (request) {
	        if (!this.device || !this.isReady) {
	            this.deviceObserver.onFinishCancelSale(sdk.remotepay.ResponseCode.ERROR, "Device Connection Error", "In sale: SaleRequest - The Clover device is not connected.");
	        }
	        else if (request.getVaultedCard() && !this.merchantInfo.getSupportsVaultCards()) {
	            this.deviceObserver.onFinishCancel_rmm(sdk.remotepay.ResponseCode.UNSUPPORTED, "Merchant Configuration Validation Error", "In sale: SaleRequest - Vault Card support is not enabled for the payment gateway. Original Request = " + request, CloverConnector.TxTypeRequestInfo.SALE_REQUEST);
	        }
	        else {
	            if (request.getTipAmount() == null) {
	                request.setTipAmount(0);
	            }
	            try {
	                this.setupSaleRequest(request);
	            }
	            catch (e) {
	                this.logger.debug("Error in sale", e);
	                this.deviceObserver.onFinishCancel_rmm(sdk.remotepay.ResponseCode.ERROR, e, null, CloverConnector.TxTypeRequestInfo.SALE_REQUEST);
	            }
	        }
	    };
	    CloverConnector.prototype.setupPreauthRequest = function (request) {
	        this.setupBaseTransactionRequest(request, new sdk.payments.TransactionSettings(), new Builder_1.PayIntent.Builder(), CloverConnector.TxTypeRequestInfo.PREAUTH_REQUEST);
	    };
	    CloverConnector.prototype.setupAuthRequest = function (request) {
	        var transactionSettings = new sdk.payments.TransactionSettings();
	        transactionSettings.setTipMode(sdk.payments.TipMode.ON_PAPER); // overriding TipMode, since it's an Auth request
	        this.setupTransactionRequest(request, transactionSettings, new Builder_1.PayIntent.Builder(), CloverConnector.TxTypeRequestInfo.AUTH_REQUEST);
	    };
	    CloverConnector.prototype.setupSaleRequest = function (request) {
	        var transactionSettings = new sdk.payments.TransactionSettings();
	        if (request.getTipMode() != null) {
	            transactionSettings.setTipMode(request.getTipMode());
	        }
	        var builder = new Builder_1.PayIntent.Builder();
	        if (request.getTipAmount() != null) {
	            builder.setTipAmount(request.getTipAmount());
	        }
	        this.setupTransactionRequest(request, transactionSettings, builder, CloverConnector.TxTypeRequestInfo.SALE_REQUEST);
	    };
	    CloverConnector.prototype.setupTransactionRequest = function (request, transactionSettings, builder, paymentRequestType) {
	        if (request.getSignatureEntryLocation() != null) {
	            transactionSettings.setSignatureEntryLocation(request.getSignatureEntryLocation());
	        }
	        if (request.getSignatureThreshold() != null) {
	            transactionSettings.setSignatureThreshold(request.getSignatureThreshold());
	        }
	        if (request.getAutoAcceptSignature() != null) {
	            transactionSettings.setAutoAcceptSignature(request.getAutoAcceptSignature());
	        }
	        if (request.getDisableCashback() != null) {
	            transactionSettings.setDisableCashBack(request.getDisableCashback());
	        }
	        if (request.getAllowOfflinePayment() != null) {
	            transactionSettings.setAllowOfflinePayment(request.getAllowOfflinePayment());
	        }
	        if (request.getForceOfflinePayment() != null) {
	            transactionSettings.setForceOfflinePayment(request.getForceOfflinePayment());
	        }
	        if (request.getApproveOfflinePaymentWithoutPrompt() != null) {
	            transactionSettings.setApproveOfflinePaymentWithoutPrompt(request.getApproveOfflinePaymentWithoutPrompt());
	        }
	        if (request.getTaxAmount() != null) {
	            builder.setTaxAmount(request.getTaxAmount());
	        }
	        if (request.getTippableAmount() != null) {
	            transactionSettings.setTippableAmount(request.getTippableAmount());
	        }
	        if (request.getTipSuggestions() != null) {
	            transactionSettings.setTipSuggestions(request.getTipSuggestions());
	        }
	        this.setupBaseTransactionRequest(request, transactionSettings, builder, paymentRequestType);
	    };
	    CloverConnector.prototype.setupBaseTransactionRequest = function (request, transactionSettings, builder, paymentRequestType) {
	        if (this.device != null && this.isReady) {
	            builder.setTransactionType(request.getType());
	            builder.setAmount(request.getAmount());
	            builder.setVaultedCard(request.getVaultedCard());
	            builder.setExternalPaymentId(request.getExternalId() != null ? request.getExternalId().trim() : null);
	            builder.setRequiresRemoteConfirmation(true);
	            if (request.getCardNotPresent() != null) {
	                builder.setCardNotPresent(request.getCardNotPresent());
	            }
	            transactionSettings.setCardEntryMethods(request.getCardEntryMethods() != null ? request.getCardEntryMethods() : this.cardEntryMethods);
	            if (request.getDisablePrinting() != null) {
	                transactionSettings.setCloverShouldHandleReceipts(!request.getDisablePrinting());
	            }
	            if (request.getDisableRestartTransactionOnFail() != null) {
	                transactionSettings.setDisableRestartTransactionOnFailure(request.getDisableRestartTransactionOnFail());
	            }
	            if (request.getDisableReceiptSelection() != null) {
	                transactionSettings.setDisableReceiptSelection(request.getDisableReceiptSelection());
	            }
	            if (request.getDisableDuplicateChecking() != null) {
	                transactionSettings.setDisableDuplicateCheck(request.getDisableDuplicateChecking());
	            }
	            if (request.getAutoAcceptPaymentConfirmations() != null) {
	                transactionSettings.setAutoAcceptPaymentConfirmations(request.getAutoAcceptPaymentConfirmations());
	            }
	            if (request.getRegionalExtras() != null) {
	                transactionSettings.setRegionalExtras(request.getRegionalExtras());
	            }
	            if (request.getExtras() != null) {
	                builder.setPassThroughValues(request.getExtras());
	            }
	            if (request.getExternalReferenceId() != null) {
	                builder.setExternalReferenceId(request.getExternalReferenceId());
	            }
	            if (request.getPresentQrcOnly() != null) {
	                builder.setIsPresentQrcOnly(request.getPresentQrcOnly());
	            }
	            builder.setTransactionSettings(transactionSettings);
	            var payIntent = builder.build();
	            this.device.doTxStart(payIntent, null, paymentRequestType);
	        }
	    };
	    CloverConnector.prototype.notifyDeviceNotConnected = function (message) {
	        this.notifyDeviceError(sdk.remotepay.ErrorType.COMMUNICATION, sdk.remotepay.DeviceErrorEventCode.NotConnected, null, message + ": Device is not connected.");
	    };
	    CloverConnector.prototype.notifyInvalidData = function (message) {
	        this.notifyDeviceError(sdk.remotepay.ErrorType.VALIDATION, sdk.remotepay.DeviceErrorEventCode.InvalidParam, null, message);
	    };
	    CloverConnector.prototype.notifyDeviceError = function (errorType, errorCode, cause, message) {
	        var deviceErrorEvent = new sdk.remotepay.CloverDeviceErrorEvent();
	        deviceErrorEvent.setType(errorType);
	        deviceErrorEvent.setCode(errorCode);
	        deviceErrorEvent.setCause(cause);
	        deviceErrorEvent.setMessage(message);
	        this.broadcaster.notifyOnDeviceError(deviceErrorEvent);
	    };
	    CloverConnector.prototype.acceptSignature = function (request) {
	        var logLocation = "In acceptSignature";
	        if (!this.device || !this.isReady) {
	            this.notifyDeviceNotConnected(logLocation);
	        }
	        else if (request == null) {
	            this.notifyInvalidData(logLocation + ": VerifySignatureRequest cannot be null.");
	        }
	        else if (request.getPayment() == null || request.getPayment().getId() == null) {
	            this.notifyInvalidData(logLocation + ": VerifySignatureRequest. Payment must have an ID.");
	        }
	        else {
	            this.device.doSignatureVerified(request.getPayment(), true);
	        }
	    };
	    CloverConnector.prototype.rejectSignature = function (request) {
	        var logLocation = "In rejectSignature";
	        if (!this.device || !this.isReady) {
	            this.notifyDeviceNotConnected(logLocation);
	        }
	        else if (request == null) {
	            this.notifyInvalidData(logLocation + ": VerifySignatureRequest cannot be null.");
	        }
	        else if (request.getPayment() == null || request.getPayment().getId() == null) {
	            this.notifyInvalidData(logLocation + ": VerifySignatureRequest. Payment must have an ID.");
	        }
	        else {
	            this.device.doSignatureVerified(request.getPayment(), false);
	        }
	    };
	    CloverConnector.prototype.acceptPayment = function (payment) {
	        var logLocation = "In acceptPayment";
	        if (!this.device || !this.isReady) {
	            this.notifyDeviceNotConnected(logLocation);
	        }
	        else if (payment == null) {
	            this.notifyInvalidData(logLocation + ": Payment cannot be null.");
	        }
	        else if (payment.getId() == null) {
	            this.notifyInvalidData(logLocation + ": Payment must have an ID.");
	        }
	        else {
	            this.device.doAcceptPayment(payment);
	        }
	    };
	    CloverConnector.prototype.rejectPayment = function (payment, challenge) {
	        var logLocation = "In rejectPayment";
	        if (!this.device || !this.isReady) {
	            this.notifyDeviceNotConnected(logLocation);
	        }
	        else if (payment == null) {
	            this.notifyInvalidData(logLocation + ": Payment cannot be null.");
	        }
	        else if (payment.getId() == null) {
	            this.notifyInvalidData(logLocation + ": Payment must have an ID.");
	        }
	        else if (challenge == null) {
	            this.notifyInvalidData(logLocation + ": Challenge cannot be null.");
	        }
	        else {
	            this.device.doRejectPayment(payment, challenge);
	        }
	    };
	    CloverConnector.prototype.auth = function (request) {
	        if (!this.device || !this.isReady) {
	            this.deviceObserver.onFinishCancelAuth(sdk.remotepay.ResponseCode.ERROR, "Device connection Error", "In auth: Auth Request - The Clover device is not connected.");
	        }
	        else if (!this.merchantInfo.getSupportsAuths()) {
	            this.deviceObserver.onFinishCancelAuth(sdk.remotepay.ResponseCode.UNSUPPORTED, "Merchant Configuration Validation Error", "In auth: AuthRequest - Auths are not enabled for the payment gateway. Original Request = " + request);
	        }
	        else if (request.getVaultedCard() && !this.merchantInfo.getSupportsVaultCards()) {
	            this.deviceObserver.onFinishCancel_rmm(sdk.remotepay.ResponseCode.UNSUPPORTED, "Merchant Configuration Validation Error", "In auth: AuthRequest - Vault Card support is not enabled for the payment gateway. Original Request = " + request, CloverConnector.TxTypeRequestInfo.AUTH_REQUEST);
	        }
	        else {
	            try {
	                this.setupAuthRequest(request);
	            }
	            catch (e) {
	                this.logger.debug("Error in auth", e);
	                this.deviceObserver.onFinishCancel_rmm(sdk.remotepay.ResponseCode.ERROR, e, null, CloverConnector.TxTypeRequestInfo.AUTH_REQUEST);
	            }
	        }
	    };
	    CloverConnector.prototype.preAuth = function (request) {
	        if (!this.device || !this.isReady) {
	            this.deviceObserver.onFinishCancelPreAuth(sdk.remotepay.ResponseCode.ERROR, "Device connection Error", "In preAuth: PreAuthRequest - The Clover device is not connected.");
	        }
	        else if (!this.merchantInfo.getSupportsPreAuths()) {
	            this.deviceObserver.onFinishCancelPreAuth(sdk.remotepay.ResponseCode.UNSUPPORTED, "Merchant Configuration Validation Error", "In preAuth: PreAuthRequest - " +
	                "PreAuths are not enabled for the payment gateway. Original Request = " + request);
	        }
	        else if (request.getVaultedCard() && !this.merchantInfo.getSupportsVaultCards()) {
	            this.deviceObserver.onFinishCancel_rmm(sdk.remotepay.ResponseCode.UNSUPPORTED, "Merchant Configuration Validation Error", "In preAuth: PreAuthRequest - " +
	                "Vault Card support is not enabled for the payment gateway. Original Request = " + request, CloverConnector.TxTypeRequestInfo.PREAUTH_REQUEST);
	        }
	        else {
	            try {
	                this.setupPreauthRequest(request);
	            }
	            catch (e) {
	                this.logger.debug("Error in preAuth", e);
	                this.deviceObserver.onFinishCancel_rmm(sdk.remotepay.ResponseCode.ERROR, e, null, CloverConnector.TxTypeRequestInfo.PREAUTH_REQUEST);
	            }
	        }
	    };
	    CloverConnector.prototype.capturePreAuth = function (request) {
	        if (!this.device || !this.isReady) {
	            this.deviceObserver.onCapturePreAuthError(sdk.remotepay.ResponseCode.ERROR, "Device connection Error", "In capturePreAuth: CapturePreAuth - The Clover device is not connected.", request.getPaymentId());
	        }
	        else if (!this.merchantInfo.getSupportsPreAuths()) {
	            this.deviceObserver.onCapturePreAuthError(sdk.remotepay.ResponseCode.UNSUPPORTED, "Merchant Configuration Validation Error", "In capturePreAuth: PreAuth Captures are not enabled for the payment gateway. Original Request = " + request, request.getPaymentId());
	        }
	        else {
	            try {
	                this.device.doCaptureAuth(request.getPaymentId(), request.getAmount(), request.getTipAmount());
	            }
	            catch (e) {
	                var response = new sdk.remotepay.CapturePreAuthResponse();
	                CloverConnector.populateBaseResponse(response, false, sdk.remotepay.ResponseCode.UNSUPPORTED, "Pre Auths unsupported", "The currently configured merchant gateway does not support Capture Auth requests.");
	                this.broadcaster.notifyOnCapturePreAuth(response);
	            }
	        }
	    };
	    CloverConnector.prototype.incrementPreAuth = function (request) {
	        if (!this.device || !this.isReady) {
	            this.deviceObserver.onIncrementPreAuthError(sdk.remotepay.ResponseCode.ERROR, "Device connection Error", "In incrementPreAuth: IncrementPreAuth - The Clover device is not connected.");
	        }
	        else if (!this.merchantInfo.getSupportsPreAuths()) {
	            this.deviceObserver.onIncrementPreAuthError(sdk.remotepay.ResponseCode.UNSUPPORTED, "Merchant Configuration Validation Error", "In incrementPreAuth: Pre Auths are not enabled for the payment gateway. Original Request = " + request);
	        }
	        else {
	            try {
	                this.device.doIncrementPreAuth(request.getPaymentId(), request.getAmount());
	            }
	            catch (e) {
	                var response = new sdk.remotepay.IncrementPreAuthResponse();
	                CloverConnector.populateBaseResponse(response, false, sdk.remotepay.ResponseCode.UNSUPPORTED, "Pre Auths unsupported", "The currently configured merchant gateway does not support Incremental Pre Auth requests.");
	                this.broadcaster.notifyOnIncrementPreAuthResponse(response);
	            }
	        }
	    };
	    CloverConnector.prototype.tipAdjustAuth = function (request) {
	        var tarm = new sdk.remotemessage.TipAdjustResponseMessage();
	        if (!this.device || !this.isReady) {
	            tarm.setReason("Device connection Error");
	            tarm.setMessage("In tipAdjustAuth: TipAdjustAuthRequest - The Clover device is not connected.");
	            this.deviceObserver.onAuthTipAdjusted(tarm, sdk.remotepay.ResponseCode.ERROR);
	        }
	        else if (!this.merchantInfo.getSupportsTipAdjust()) {
	            tarm.setReason("Merchant Configuration Validation Error");
	            tarm.setMessage("In tipAdjustAuth: TipAdjustAuthRequest - Tip Adjustments are not enabled for the payment gateway. Original Request = " + request);
	            this.deviceObserver.onAuthTipAdjusted(tarm, sdk.remotepay.ResponseCode.UNSUPPORTED);
	        }
	        else {
	            this.device.doTipAdjustAuth(request.getOrderId(), request.getPaymentId(), request.getTipAmount());
	        }
	    };
	    CloverConnector.prototype.vaultCard = function (cardEntryMethods) {
	        var shortCircuitVaultCardResponseMessage = new sdk.remotemessage.VaultCardResponseMessage();
	        shortCircuitVaultCardResponseMessage.setCard(null);
	        if (!this.device || !this.isReady) {
	            shortCircuitVaultCardResponseMessage.setReason("Device connection Error");
	            this.deviceObserver.onVaultCardResponse(shortCircuitVaultCardResponseMessage, sdk.remotepay.ResponseCode.ERROR, "In vaultCard: The Clover device is not connected.");
	        }
	        else if (!this.merchantInfo.getSupportsVaultCards()) {
	            shortCircuitVaultCardResponseMessage.setReason("Merchant Configuration Validation Error");
	            this.deviceObserver.onVaultCardResponse(shortCircuitVaultCardResponseMessage, sdk.remotepay.ResponseCode.UNSUPPORTED, "In vaultCard: VaultCard/Payment Tokens are not enabled for the payment gateway.");
	        }
	        else {
	            this.device.doVaultCard(cardEntryMethods ? cardEntryMethods : this.getCardEntryMethods());
	        }
	    };
	    CloverConnector.prototype.voidPayment = function (request) {
	        if (!this.device || !this.isReady) {
	            this.deviceObserver.onPaymentVoided_responseCode(sdk.remotepay.ResponseCode.ERROR, "Device connection Error", "In voidPayment: VoidPaymentRequest - The Clover device is not connected.");
	        }
	        else {
	            var payment = new sdk.payments.Payment();
	            payment.setId(request.getPaymentId());
	            payment.setOrder(new sdk.base.Reference());
	            payment.getOrder().setId(request.getOrderId());
	            payment.setEmployee(new sdk.base.Reference());
	            payment.getEmployee().setId(request.getEmployeeId());
	            var reason = sdk.order.VoidReason[request.getVoidReason()];
	            this.device.doVoidPayment(payment, reason, request.getDisablePrinting(), request.getDisableReceiptSelection(), request.getExtras());
	        }
	    };
	    CloverConnector.prototype.refundPayment = function (request) {
	        if (!this.device || !this.isReady) {
	            this.deviceObserver.onFinishCancel_rmm(sdk.remotepay.ResponseCode.CANCEL, "Device Connection Error", "In refundPayment: RefundPaymentRequest - The Clover device is not connected.", CloverConnector.TxTypeRequestInfo.REFUND_REQUEST);
	        }
	        else {
	            this.device.doPaymentRefundByRequest(request);
	        }
	    };
	    CloverConnector.prototype.voidPaymentRefund = function (request) {
	        this.deviceObserver.onPaymentRefundVoided(null, sdk.remotepay.ResponseCode.ERROR, "Cannot do Void Payment Refund", "This version of the SDK does not support voidPaymentRefunds");
	    };
	    CloverConnector.prototype.manualRefund = function (request) {
	        var transactionSettings = new sdk.payments.TransactionSettings();
	        if (!this.device || !this.isReady) {
	            this.deviceObserver.onFinishCancelManualRefund(sdk.remotepay.ResponseCode.ERROR, "Device connection Error", "In manualRefund: ManualRefundRequest - The Clover device is not connected.");
	        }
	        else if (!this.merchantInfo.getSupportsManualRefunds()) {
	            this.deviceObserver.onFinishCancelManualRefund(sdk.remotepay.ResponseCode.UNSUPPORTED, "Merchant Configuration Validation Error", "In manualRefund: ManualRefundRequest - Manual Refunds are not enabled for the payment gateway. Original Request = " + request);
	        }
	        else if (request.getVaultedCard() && !this.merchantInfo.getSupportsVaultCards()) {
	            this.deviceObserver.onFinishCancel_rmm(sdk.remotepay.ResponseCode.UNSUPPORTED, "Merchant Configuration Validation Error", "In manualRefund: ManualRefundRequest - Vault Card support is not enabled for the payment gateway. Original Request = " + request, CloverConnector.TxTypeRequestInfo.CREDIT_REQUEST);
	        }
	        else {
	            var builder = new Builder_1.PayIntent.Builder();
	            builder.setAmount(-Math.abs(request.getAmount()))
	                .setTransactionType(sdk.remotepay.TransactionType.CREDIT)
	                .setVaultedCard(request.getVaultedCard())
	                .setRequiresRemoteConfirmation(true)
	                .setExternalPaymentId(request.getExternalId());
	            transactionSettings.setCardEntryMethods(request.getCardEntryMethods() ? request.getCardEntryMethods() : this.cardEntryMethods);
	            if (request.getDisablePrinting()) {
	                transactionSettings.setCloverShouldHandleReceipts(!request.getDisablePrinting());
	            }
	            if (request.getDisableRestartTransactionOnFail()) {
	                transactionSettings.setDisableRestartTransactionOnFailure(request.getDisableRestartTransactionOnFail());
	            }
	            if (request.getDisableReceiptSelection()) {
	                transactionSettings.setDisableReceiptSelection(request.getDisableReceiptSelection());
	            }
	            if (request.getExtras() != null) {
	                builder.setPassThroughValues(request.getExtras());
	            }
	            builder.setTransactionSettings(transactionSettings);
	            var payIntent = builder.build();
	            this.device.doTxStart(payIntent, null, CloverConnector.TxTypeRequestInfo.CREDIT_REQUEST);
	        }
	    };
	    CloverConnector.prototype.retrievePendingPayments = function () {
	        if (!this.device || !this.isReady) {
	            this.deviceObserver.onPendingPaymentsResponse(false, null, "Device connection Error", "In retrievePendingPayments: The Clover device is not connected.");
	        }
	        else {
	            this.device.doRetrievePendingPayments();
	        }
	    };
	    CloverConnector.prototype.readCardData = function (request) {
	        if (!this.device || !this.isReady) {
	            this.deviceObserver.onReadCardDataResponse(sdk.remotepay.ResponseCode.ERROR, "Device connection Error", "In readCardData: The Clover device is not connected.");
	        }
	        else if (request == null) {
	            this.deviceObserver.onReadCardDataResponse(sdk.remotepay.ResponseCode.FAIL, "Invalid Argument.", "In readCardData: ReadCardDataRequest - The request that was passed in for processing is null.");
	        }
	        else {
	            // create pay intent...
	            var builder = new Builder_1.PayIntent.Builder();
	            builder.setTransactionType(sdk.remotepay.TransactionType.DATA);
	            builder.setCardEntryMethods(request.getCardEntryMethods() ? request.getCardEntryMethods() : this.cardEntryMethods);
	            builder.setForceSwipePinEntry(request.getIsForceSwipePinEntry());
	            var pi = builder.build();
	            this.device.doReadCardData(pi);
	        }
	    };
	    CloverConnector.prototype.sendMessageToActivity = function (request) {
	        if (!this.device || !this.isReady) {
	            this.notifyDeviceNotConnected("In sendMessageToActivity");
	        }
	        else if (request == null) {
	            this.notifyInvalidData("In sendMessageToActivity: Invalid argument. Null is not allowed.");
	        }
	        else {
	            this.device.doSendMessageToActivity(request.getAction(), request.getPayload());
	        }
	    };
	    CloverConnector.prototype.retrievePayment = function (request) {
	        if (!this.device || !this.isReady) {
	            this.notifyDeviceNotConnected("In retrievePayment");
	        }
	        else {
	            this.device.doRetrievePayment(request.getExternalPaymentId());
	        }
	    };
	    CloverConnector.prototype.registerForCustomerProvidedData = function (request) {
	        if (!this.device || !this.isReady) {
	            this.notifyDeviceNotConnected("In registerForCustomerProvidedData");
	        }
	        else {
	            var dataProviderConfigs = request.getConfigurations();
	            var configurations = this.convertConfigurations(dataProviderConfigs);
	            console.log(configurations);
	            this.device.doRegisterForCustomerProvidedData(configurations);
	        }
	    };
	    CloverConnector.prototype.convertConfigurations = function (dataProviderConfigs) {
	        var _this = this;
	        // this is here so we have a buffer between the public api and the private one.
	        var configs = new Array();
	        if (dataProviderConfigs != null) {
	            dataProviderConfigs.forEach(function (dataProviderConfig) { return configs.push(_this.convertConfiguration(dataProviderConfig)); });
	        }
	        return configs;
	    };
	    CloverConnector.prototype.convertConfiguration = function (dataProviderConfig) {
	        var loyaltyDataConfig = new sdk.loyalty.LoyaltyDataConfig();
	        loyaltyDataConfig.setType(dataProviderConfig.getType());
	        loyaltyDataConfig.setConfiguration(dataProviderConfig.getConfiguration());
	        return loyaltyDataConfig;
	    };
	    CloverConnector.prototype.setCustomerInfo = function (request) {
	        if (!this.device || !this.isReady) {
	            this.notifyDeviceNotConnected("In setCustomerInfo: The Clover device is not connected.");
	        }
	        else {
	            this.device.doSetCustomerInfo(request.getCustomerInfo());
	        }
	    };
	    CloverConnector.prototype.retrievePrinters = function (request) {
	        if (!this.device || !this.isReady) {
	            this.notifyDeviceNotConnected("In retrievePrinters");
	        }
	        else if (!request) {
	            this.notifyInvalidData("In retrievePrinters: Invalid argument. Null is not allowed.");
	        }
	        else {
	            this.device.doRetrievePrinters(request.getCategory());
	        }
	    };
	    CloverConnector.prototype.retrievePrintJobStatus = function (request) {
	        if (!this.device || !this.isReady) {
	            this.notifyDeviceNotConnected("In retrievePrintJobStatus");
	        }
	        else if (!request || !request.getPrintRequestId()) {
	            this.notifyInvalidData("In retrievePrintJobStatus: Invalid argument. Null is not allowed.");
	        }
	        else {
	            this.device.doRetrievePrintJobStatus(request.getPrintRequestId());
	        }
	    };
	    CloverConnector.prototype.closeout = function (request) {
	        if (!this.device || !this.isReady) {
	            this.notifyDeviceNotConnected("In closeout");
	        }
	        else {
	            this.device.doCloseout(request.getAllowOpenTabs(), request.getBatchId());
	        }
	    };
	    CloverConnector.prototype.print = function (request) {
	        if (!this.device || !this.isReady) {
	            this.notifyDeviceNotConnected("In print");
	        }
	        else if (!request) {
	            this.notifyInvalidData("In print: Invalid argument. Null is not allowed.");
	        }
	        else if (!this.validatePrintRequest(request)) {
	            return;
	        }
	        else {
	            var images = request.getImages();
	            var urls = request.getImageUrls();
	            if (images) {
	                if (Array.isArray(images) && images.length > 1) {
	                    this.notifyInvalidData("In print: Invalid argument. Only one image can be printed at a time in the current API.");
	                }
	                var singleOrArr = (Array.isArray(images) ? images[0] : images);
	                this.device.doPrintImageObject(singleOrArr, request.getPrintRequestId(), request.getPrintDeviceId());
	            }
	            else if (request.getText()) {
	                this.device.doPrintText(request.getText(), request.getPrintRequestId(), request.getPrintDeviceId());
	            }
	            else if (urls) {
	                if (Array.isArray(urls) && urls.length > 1) {
	                    this.notifyInvalidData("In print: Invalid argument. Only one imageUrl can be printed at a time in the current API.");
	                }
	                var singleOrArr = (Array.isArray(urls) ? urls[0] : urls);
	                this.device.doPrintImageUrl(singleOrArr, request.getPrintRequestId(), request.getPrintDeviceId());
	            }
	            else {
	                this.notifyInvalidData("In print: Invalid argument. PrintRequest element was not formatted correctly.");
	            }
	        }
	    };
	    CloverConnector.prototype.validatePrintRequest = function (request) {
	        if (!request.getImages() && !request.getText() && !request.getImageUrls()) {
	            this.notifyInvalidData("In validatePrintRequest: There are no items to print.");
	            return false;
	        }
	        else if ((request.getImages() && request.getText()) ||
	            (request.getImages() && request.getImageUrls()) ||
	            (request.getText() && request.getImageUrls())) {
	            this.notifyInvalidData("In validatePrintRequest: There are too may different kinds of items to print.  Can only have one.");
	            return false;
	        }
	        else {
	            return true;
	        }
	    };
	    CloverConnector.prototype.showMessage = function (message) {
	        if (!this.device || !this.isReady) {
	            this.notifyDeviceNotConnected("In showMessage");
	        }
	        else if (message == null) {
	            this.notifyInvalidData("In showMessage: Invalid argument.  Null is not allowed.");
	        }
	        else {
	            this.device.doTerminalMessage(message);
	        }
	    };
	    CloverConnector.prototype.sendDebugLog = function (message) {
	        if (!this.device || !this.isReady) {
	            this.notifyDeviceNotConnected("In sendDebugLog");
	        }
	        else if (message == null) {
	            this.notifyInvalidData("In showMessage: Invalid argument.  Null is not allowed.");
	        }
	        else {
	            this.device.doSendDebugLog(message);
	        }
	    };
	    CloverConnector.prototype.showWelcomeScreen = function () {
	        if (!this.device || !this.isReady) {
	            this.notifyDeviceNotConnected("In showWelcomeScreen");
	        }
	        else {
	            this.device.doShowWelcomeScreen();
	        }
	    };
	    CloverConnector.prototype.showThankYouScreen = function () {
	        if (!this.device || !this.isReady) {
	            this.notifyDeviceNotConnected("In showThankYouScreen");
	        }
	        else {
	            this.device.doShowThankYouScreen();
	        }
	    };
	    CloverConnector.prototype.displayReceiptOptions = function (displayReceiptOptionsRequest) {
	        if (!this.device || !this.isReady) {
	            this.notifyDeviceNotConnected("In displayReceiptOptions");
	        }
	        else {
	            this.device.doShowReceiptScreen(displayReceiptOptionsRequest.getOrderId(), displayReceiptOptionsRequest.getPaymentId(), displayReceiptOptionsRequest.getRefundId(), displayReceiptOptionsRequest.getCreditId(), displayReceiptOptionsRequest.getDisablePrinting());
	        }
	    };
	    CloverConnector.prototype.openCashDrawer = function (request) {
	        if (!this.device || !this.isReady) {
	            this.notifyDeviceNotConnected("In openCashDrawer");
	        }
	        else if (!request) {
	            this.notifyInvalidData("In openCashDrawer: Invalid argument. The request cannot be null.");
	        }
	        else if (typeof request === "string") {
	            this.device.doOpenCashDrawer(request);
	        }
	        else {
	            this.device.doOpenCashDrawer(request.getReason(), request.getDeviceId());
	        }
	    };
	    CloverConnector.prototype.showDisplayOrder = function (order) {
	        if (!this.device || !this.isReady) {
	            this.notifyDeviceNotConnected("In showDisplayOrder");
	        }
	        else if (order == null) {
	            this.notifyInvalidData("In showDisplayOrder: Invalid argument.  The order cannot be null.");
	        }
	        else {
	            this.device.doOrderUpdate(order, null);
	        }
	    };
	    CloverConnector.prototype.removeDisplayOrder = function (order) {
	        if (!this.device || !this.isReady) {
	            this.notifyDeviceNotConnected("In removeDisplayOrder");
	        }
	        else if (order == null) {
	            this.notifyInvalidData("In removeDisplayOrder: Invalid argument.  The order cannot be null.");
	        }
	        else {
	            var dao = new sdk.order.operation.OrderDeletedOperation();
	            dao.setId(order.getId());
	            this.device.doOrderUpdate(order, dao);
	        }
	    };
	    // I spoke to Hammer about this, there are no plans to implement it.
	    CloverConnector.prototype.discountAddedToDisplayOrder = function (discount, order) {
	        this.notifyDeviceError(sdk.remotepay.ErrorType.EXCEPTION, sdk.remotepay.DeviceErrorEventCode.NotSupported, null, "discountAddedToDisplayOrder has not been implemented.");
	    };
	    // I spoke to Hammer about this, there are no plans to implement it.
	    CloverConnector.prototype.discountRemovedFromDisplayOrder = function (discount, order) {
	        this.notifyDeviceError(sdk.remotepay.ErrorType.EXCEPTION, sdk.remotepay.DeviceErrorEventCode.NotSupported, null, "discountRemovedFromDisplayOrder has not been implemented.");
	    };
	    // I spoke to Hammer about this, there are no plans to implement it.
	    CloverConnector.prototype.lineItemAddedToDisplayOrder = function (lineItem, order) {
	        this.notifyDeviceError(sdk.remotepay.ErrorType.EXCEPTION, sdk.remotepay.DeviceErrorEventCode.NotSupported, null, "lineItemAddedToDisplayOrder has not been implemented.");
	    };
	    // I spoke to Hammer about this, there are no plans to implement it.
	    CloverConnector.prototype.lineItemRemovedFromDisplayOrder = function (lineItem, order) {
	        this.notifyDeviceError(sdk.remotepay.ErrorType.EXCEPTION, sdk.remotepay.DeviceErrorEventCode.NotSupported, null, "lineItemRemovedFromDisplayOrder has not been implemented.");
	    };
	    CloverConnector.prototype.dispose = function () {
	        this.broadcaster.clear();
	        if (this.device) {
	            this.device.dispose();
	        }
	    };
	    CloverConnector.prototype.invokeInputOption = function (io) {
	        if (!this.device || !this.isReady) {
	            this.notifyDeviceNotConnected("In invokeInputOption");
	        }
	        else {
	            this.device.doKeyPress(io.getKeyPress());
	        }
	    };
	    CloverConnector.prototype.resetDevice = function () {
	        if (!this.device || !this.isReady) {
	            this.notifyDeviceNotConnected("In resetDevice");
	        }
	        else {
	            this.device.doResetDevice();
	        }
	    };
	    CloverConnector.prototype.retrieveDeviceStatus = function (request) {
	        if (!this.device || !this.isReady) {
	            this.notifyDeviceNotConnected("In retrieveDeviceStatus");
	        }
	        else {
	            this.device.doRetrieveDeviceStatus(request);
	        }
	    };
	    CloverConnector.prototype.getCardEntryMethods = function () {
	        return this.cardEntryMethods;
	    };
	    CloverConnector.prototype.startCustomActivity = function (request) {
	        if (!this.device || !this.isReady) {
	            this.notifyDeviceNotConnected("In startCustomActivity");
	        }
	        else {
	            this.device.doStartActivity(request.getAction(), request.getPayload(), request.getNonBlocking());
	        }
	    };
	    CloverConnector.prototype.checkBalance = function (request) {
	        if (!this.device || !this.isReady) {
	            this.notifyDeviceNotConnected("In checkBalance");
	        }
	        else {
	            this.device.doCheckBalance(request.getCardEntryMethods());
	        }
	    };
	    CloverConnector.prototype.requestSignature = function (request) {
	        if (!this.device || !this.isReady) {
	            this.notifyDeviceNotConnected("In requestSignature");
	        }
	        else {
	            this.device.doCollectSignature(request.getAcknowledgementMessage());
	        }
	    };
	    CloverConnector.prototype.requestTip = function (request) {
	        if (!this.device || !this.isReady) {
	            this.notifyDeviceNotConnected("In requestTip");
	        }
	        else {
	            this.device.doRequestTip(request.getTippableAmount(), request.getTipSuggestions());
	        }
	    };
	    CloverConnector.populateBaseResponse = function (response, success, responseCode, reason, message) {
	        response.setSuccess(success);
	        response.setResult(responseCode);
	        response.setReason(reason ? reason : responseCode ? responseCode.toString() : "No extended information provided.");
	        response.setMessage(message ? message : "No extended information provided.");
	        // See SSDK-549.  The setting of the response flags (isSale, etc.) is handled in each SDK.
	        // The problem is that non-traditional payment responses (finishOk not called) may contain payment information.
	        // To avoid the SDK of having to be aware of this we are inspecting the response and setting the flags if they
	        // exist on the response and if a payment exists on the response.
	        if (response["getPayment"]) {
	            var payment = response["getPayment"]();
	            if (payment) {
	                this.setResponseFlags(response, payment);
	            }
	        }
	    };
	    CloverConnector.populatePaymentResponse = function (response, success, responseCode, payment, signature, reason, message) {
	        CloverConnector.populateBaseResponse(response, success, responseCode, reason, message);
	        response.setPayment(payment);
	        response.setSignature(signature);
	        this.setResponseFlags(response, payment);
	    };
	    CloverConnector.setResponseFlags = function (response, payment) {
	        if (response && payment) {
	            var cardTransaction = payment.getCardTransaction();
	            if (cardTransaction) {
	                var transactionType = cardTransaction.getType();
	                if (response.setIsSale) {
	                    response.setIsSale(sdk.payments.CardTransactionType.AUTH == transactionType &&
	                        sdk.payments.Result.SUCCESS == payment.getResult());
	                }
	                if (response.setIsAuth) {
	                    response.setIsAuth(sdk.payments.CardTransactionType.PREAUTH == transactionType &&
	                        sdk.payments.Result.SUCCESS == payment.getResult());
	                }
	                if (response.setIsPreAuth) {
	                    response.setIsPreAuth(sdk.payments.CardTransactionType.PREAUTH == transactionType &&
	                        sdk.payments.Result.AUTH == payment.getResult());
	                }
	            }
	        }
	    };
	    CloverConnector.MAX_PAYLOAD_SIZE = 10000000; // maximum size of the payload of a full message.  if the payload exceeds this, the message will not be sent.
	    return CloverConnector;
	}());
	exports.CloverConnector = CloverConnector;
	(function (CloverConnector) {
	    var TxTypeRequestInfo = /** @class */ (function () {
	        function TxTypeRequestInfo() {
	        }
	        TxTypeRequestInfo.SALE_REQUEST = "SALE";
	        TxTypeRequestInfo.AUTH_REQUEST = "AUTH";
	        TxTypeRequestInfo.PREAUTH_REQUEST = "PREAUTH";
	        TxTypeRequestInfo.CREDIT_REQUEST = "CREDIT";
	        TxTypeRequestInfo.REFUND_REQUEST = "REFUND";
	        return TxTypeRequestInfo;
	    }());
	    CloverConnector.TxTypeRequestInfo = TxTypeRequestInfo;
	    var InnerDeviceObserver = /** @class */ (function () {
	        function InnerDeviceObserver(cc) {
	            // Create a logger
	            this.logger = Logger_1.Logger.create();
	            this.cloverConnector = cc;
	        }
	        InnerDeviceObserver.prototype.onTxState = function (txState) {
	        };
	        InnerDeviceObserver.prototype.resultSuccessToResponseCode = function (success) {
	            return this.resultStatusToResponseCode(success ? sdk.remotemessage.ResultStatus.SUCCESS : sdk.remotemessage.ResultStatus.FAIL);
	        };
	        InnerDeviceObserver.prototype.resultStatusToResponseCode = function (resultStatus) {
	            return resultStatus == sdk.remotemessage.ResultStatus.SUCCESS ? sdk.remotepay.ResponseCode.SUCCESS : (resultStatus == sdk.remotemessage.ResultStatus.CANCEL ? sdk.remotepay.ResponseCode.CANCEL : sdk.remotepay.ResponseCode.FAIL);
	        };
	        InnerDeviceObserver.prototype.onTxStartResponse = function (txStartResponseMessage) {
	            var reason = txStartResponseMessage.getReason();
	            var result = txStartResponseMessage.getResult();
	            if (result == sdk.remotemessage.TxStartResponseResult.SUCCESS)
	                return;
	            var duplicate = (result == sdk.remotemessage.TxStartResponseResult.DUPLICATE);
	            var code = duplicate ? sdk.remotepay.ResponseCode.CANCEL : sdk.remotepay.ResponseCode.FAIL;
	            var duplicateMessage = duplicate ? "The provided transaction id of " + txStartResponseMessage.getExternalPaymentId() + " has already been processed and cannot be resubmitted." : null;
	            var messageToUse = duplicate ? duplicateMessage : txStartResponseMessage.getMessage();
	            // Use the requestInfo if it exists, to determine the request type
	            var requestInfo = txStartResponseMessage.getRequestInfo();
	            if (requestInfo == TxTypeRequestInfo.PREAUTH_REQUEST) {
	                var response = new sdk.remotepay.PreAuthResponse();
	                CloverConnector.populateBaseResponse(response, false, code, reason, messageToUse);
	                this.cloverConnector.broadcaster.notifyOnPreAuthResponse(response);
	            }
	            else if (requestInfo == TxTypeRequestInfo.AUTH_REQUEST) {
	                var response = new sdk.remotepay.AuthResponse();
	                CloverConnector.populateBaseResponse(response, false, code, reason, messageToUse);
	                this.cloverConnector.broadcaster.notifyOnAuthResponse(response);
	            }
	            else if (requestInfo == TxTypeRequestInfo.SALE_REQUEST) {
	                var response = new sdk.remotepay.SaleResponse();
	                CloverConnector.populateBaseResponse(response, false, code, reason, messageToUse);
	                this.cloverConnector.broadcaster.notifyOnSaleResponse(response);
	            }
	            else if (requestInfo == TxTypeRequestInfo.CREDIT_REQUEST) {
	                var response = new sdk.remotepay.ManualRefundResponse();
	                CloverConnector.populateBaseResponse(response, false, code, reason, messageToUse);
	                this.cloverConnector.broadcaster.notifyOnManualRefundResponse(response);
	            }
	            else {
	                this.logger.error("Could not determine request type. requestInfo = " + requestInfo);
	            }
	        };
	        InnerDeviceObserver.prototype.onUiState = function (uiState, uiText, uiDirection, inputOptions) {
	            var deviceEvent = new sdk.remotepay.CloverDeviceEvent();
	            deviceEvent.setInputOptions(inputOptions);
	            deviceEvent.setEventState(sdk.remotepay.DeviceEventState[uiState.toString()]);
	            deviceEvent.setMessage(uiText);
	            if (uiDirection == sdk.remotemessage.UiDirection.ENTER) {
	                this.cloverConnector.broadcaster.notifyOnDeviceActivityStart(deviceEvent);
	            }
	            else if (uiDirection == sdk.remotemessage.UiDirection.EXIT) {
	                this.cloverConnector.broadcaster.notifyOnDeviceActivityEnd(deviceEvent);
	                if (uiState.toString() == sdk.remotepay.DeviceEventState.RECEIPT_OPTIONS.toString()) {
	                    this.cloverConnector.device.doShowWelcomeScreen();
	                }
	            }
	        };
	        InnerDeviceObserver.prototype.onTipAdded = function (tip) {
	            this.cloverConnector.broadcaster.notifyOnTipAdded(tip);
	        };
	        InnerDeviceObserver.prototype.onAuthTipAdjusted = function (tarm, responseCode) {
	            var response = new sdk.remotepay.TipAdjustAuthResponse();
	            var success = tarm.getSuccess();
	            if (!responseCode) {
	                responseCode = this.resultSuccessToResponseCode(success);
	            }
	            CloverConnector.populateBaseResponse(response, success, responseCode, tarm.getReason(), tarm.getMessage());
	            response.setPaymentId(tarm.getPaymentId());
	            response.setTipAmount(tarm.getAmount());
	            this.cloverConnector.broadcaster.notifyOnTipAdjustAuthResponse(response);
	        };
	        InnerDeviceObserver.prototype.onCashbackSelected = function (cashbackAmount) {
	            //TODO: For future use
	        };
	        InnerDeviceObserver.prototype.onPartialAuth = function (partialAmount) {
	            //TODO: For future use
	        };
	        InnerDeviceObserver.prototype.onFinishOkPayment = function (payment, signature, requestInfo) {
	            try {
	                this.cloverConnector.device.doShowThankYouScreen(); //need to do this first, so Listener implementation can replace the screen as desired
	                if (requestInfo == TxTypeRequestInfo.PREAUTH_REQUEST) {
	                    var response = new sdk.remotepay.PreAuthResponse();
	                    CloverConnector.populatePaymentResponse(response, true, sdk.remotepay.ResponseCode.SUCCESS, payment, signature);
	                    this.cloverConnector.broadcaster.notifyOnPreAuthResponse(response);
	                }
	                else if (requestInfo == TxTypeRequestInfo.AUTH_REQUEST) {
	                    var response = new sdk.remotepay.AuthResponse();
	                    CloverConnector.populatePaymentResponse(response, true, sdk.remotepay.ResponseCode.SUCCESS, payment, signature);
	                    this.cloverConnector.broadcaster.notifyOnAuthResponse(response);
	                }
	                else if (requestInfo == TxTypeRequestInfo.SALE_REQUEST) {
	                    var response = new sdk.remotepay.SaleResponse();
	                    CloverConnector.populatePaymentResponse(response, true, sdk.remotepay.ResponseCode.SUCCESS, payment, signature);
	                    this.cloverConnector.broadcaster.notifyOnSaleResponse(response);
	                }
	                else {
	                    this.logger.error("Failed to pair this response: " + payment);
	                }
	            }
	            finally {
	                // do nothing for now...
	            }
	        };
	        InnerDeviceObserver.prototype.onFinishOkCredit = function (credit) {
	            this.cloverConnector.device.doShowWelcomeScreen();
	            var response = new sdk.remotepay.ManualRefundResponse();
	            CloverConnector.populateBaseResponse(response, true, sdk.remotepay.ResponseCode.SUCCESS);
	            response.setCredit(credit);
	            this.cloverConnector.broadcaster.notifyOnManualRefundResponse(response);
	        };
	        InnerDeviceObserver.prototype.onFinishOkRefund = function (refund) {
	            this.cloverConnector.device.doShowWelcomeScreen();
	            // NOTE: these two lines can eventually be removed (once refunds have the orderRef populated correctly):
	            var lastRefundResponse = this.lastPRR; //only needed for the order ID
	            this.lastPRR = null;
	            if (refund.getOrderRef() != null) {
	                var success = true;
	                var response = new sdk.remotepay.RefundPaymentResponse();
	                CloverConnector.populateBaseResponse(response, success, this.resultSuccessToResponseCode(success));
	                response.setOrderId(refund.getOrderRef().getId());
	                if (refund.getPayment()) {
	                    response.setPaymentId(refund.getPayment().getId());
	                }
	                response.setRefund(refund);
	                this.cloverConnector.broadcaster.notifyOnRefundPaymentResponse(response);
	            }
	            else {
	                if (lastRefundResponse && lastRefundResponse.getRefund().getId() == refund.getId()) { //need to make sure it's the same refund before sending
	                    this.cloverConnector.broadcaster.notifyOnRefundPaymentResponse(lastRefundResponse);
	                }
	                else {
	                    var success = true;
	                    var response = new sdk.remotepay.RefundPaymentResponse();
	                    CloverConnector.populateBaseResponse(response, success, this.resultSuccessToResponseCode(success));
	                    if (refund.getPayment()) {
	                        response.setPaymentId(refund.getPayment().getId());
	                    }
	                    response.setRefund(refund);
	                    this.cloverConnector.broadcaster.notifyOnRefundPaymentResponse(response);
	                }
	            }
	        };
	        // Weird mechanism to overload via TypeScript - https://blog.mariusschulz.com/2016/08/18/function-overloads-in-typescript
	        InnerDeviceObserver.prototype.onFinishOk = function (paymentCreditOrRefund, signature, requestInfo) {
	            if (paymentCreditOrRefund instanceof sdk.payments.Payment) {
	                this.onFinishOkPayment(paymentCreditOrRefund, signature, requestInfo);
	            }
	            else if (paymentCreditOrRefund instanceof sdk.payments.Credit) {
	                this.onFinishOkCredit(paymentCreditOrRefund);
	            }
	            else {
	                this.onFinishOkRefund(paymentCreditOrRefund);
	            }
	        };
	        InnerDeviceObserver.prototype.onFinishCancel_rmm = function (result, reason, message, requestInfo) {
	            try {
	                if (this.cloverConnector.device) {
	                    this.cloverConnector.device.doShowWelcomeScreen();
	                }
	                if (requestInfo == TxTypeRequestInfo.PREAUTH_REQUEST) {
	                    this.onFinishCancelPreAuth(result, reason, message);
	                }
	                else if (requestInfo == TxTypeRequestInfo.SALE_REQUEST) {
	                    this.onFinishCancelSale(result, reason, message);
	                }
	                else if (requestInfo == TxTypeRequestInfo.AUTH_REQUEST) {
	                    this.onFinishCancelAuth(result, reason, message);
	                }
	                else if (requestInfo == TxTypeRequestInfo.CREDIT_REQUEST) {
	                    this.onFinishCancelManualRefund(result, reason, message);
	                }
	                else if (requestInfo == TxTypeRequestInfo.REFUND_REQUEST) {
	                    if (this.lastPRR) {
	                        this.cloverConnector.broadcaster.notifyOnRefundPaymentResponse(this.lastPRR);
	                    }
	                    else {
	                        this.onFinishCancelRefund(result, reason, message);
	                    }
	                }
	                else {
	                    // Complete any un-resolved payment refund requests.
	                    if (this.lastPRR) {
	                        this.cloverConnector.broadcaster.notifyOnRefundPaymentResponse(this.lastPRR);
	                        this.lastPRR = null;
	                    }
	                    else {
	                        if (!requestInfo) {
	                            this.logger.error('onFinishCancel called, requestInfo was null, and ' +
	                                'could not determine the type of the message from the last request', arguments);
	                        }
	                        else {
	                            this.logger.error('onFinishCancel called, but could not determine how to respond!', arguments);
	                        }
	                    }
	                }
	            }
	            finally {
	                // do nothing
	            }
	        };
	        InnerDeviceObserver.prototype.onFinishCancel = function (requestInfo) {
	            this.onFinishCancel_rmm(sdk.remotepay.ResponseCode.CANCEL, null, null, requestInfo);
	        };
	        InnerDeviceObserver.prototype.onFinishCancelPreAuth = function (result, reason, message) {
	            var response = new sdk.remotepay.PreAuthResponse();
	            CloverConnector.populateBaseResponse(response, false, result, reason ? reason : "Request Canceled", message ? message : "The PreAuth Request was canceled.");
	            this.cloverConnector.broadcaster.notifyOnPreAuthResponse(response);
	        };
	        InnerDeviceObserver.prototype.onFinishCancelSale = function (result, reason, message) {
	            var response = new sdk.remotepay.SaleResponse();
	            CloverConnector.populateBaseResponse(response, false, result, reason ? reason : "Request Canceled", message ? message : "The Sale Request was canceled.");
	            this.cloverConnector.broadcaster.notifyOnSaleResponse(response);
	        };
	        InnerDeviceObserver.prototype.onFinishCancelAuth = function (result, reason, message) {
	            var response = new sdk.remotepay.AuthResponse();
	            CloverConnector.populateBaseResponse(response, false, result, reason ? reason : "Request Canceled", message ? message : "The Auth Request was canceled.");
	            this.cloverConnector.broadcaster.notifyOnAuthResponse(response);
	        };
	        InnerDeviceObserver.prototype.onFinishCancelManualRefund = function (result, reason, message) {
	            var response = new sdk.remotepay.ManualRefundResponse();
	            CloverConnector.populateBaseResponse(response, false, result, reason ? reason : "Request Canceled", message ? message : "The Manual Refund Request was canceled.");
	            this.cloverConnector.broadcaster.notifyOnManualRefundResponse(response);
	        };
	        InnerDeviceObserver.prototype.onFinishCancelRefund = function (result, reason, message) {
	            var response = new sdk.remotepay.RefundPaymentResponse();
	            CloverConnector.populateBaseResponse(response, false, result, reason ? reason : "Request Canceled", message ? message : "The Refund Request was canceled.");
	            this.cloverConnector.broadcaster.notifyOnRefundPaymentResponse(response);
	        };
	        InnerDeviceObserver.prototype.onVerifySignature = function (payment, signature) {
	            var request = new sdk.remotepay.VerifySignatureRequest();
	            request.setSignature(signature);
	            request.setPayment(payment);
	            this.cloverConnector.broadcaster.notifyOnVerifySignatureRequest(request);
	        };
	        InnerDeviceObserver.prototype.onConfirmPayment = function (payment, challenges) {
	            var cpr = new sdk.remotepay.ConfirmPaymentRequest();
	            cpr.setPayment(payment);
	            cpr.setChallenges(challenges);
	            this.cloverConnector.broadcaster.notifyOnConfirmPaymentRequest(cpr);
	        };
	        InnerDeviceObserver.prototype.onPaymentVoided = function (voidPaymentResponseMessage) {
	            this.cloverConnector.showWelcomeScreen();
	            var success = voidPaymentResponseMessage.getStatus() == sdk.remotemessage.ResultStatus.SUCCESS;
	            var result = this.resultStatusToResponseCode(voidPaymentResponseMessage.getStatus());
	            var response = new sdk.remotepay.VoidPaymentResponse();
	            var payment = voidPaymentResponseMessage.getPayment();
	            response.setPayment(payment);
	            response.setPaymentId(payment != null ? payment.getId() : null);
	            CloverConnector.populateBaseResponse(response, success, result, voidPaymentResponseMessage.getReason(), voidPaymentResponseMessage.getMessage());
	            this.cloverConnector.broadcaster.notifyOnVoidPaymentResponse(response);
	        };
	        InnerDeviceObserver.prototype.onPaymentVoided_responseCode = function (code, reason, message) {
	            var success = (code == sdk.remotepay.ResponseCode.SUCCESS);
	            var response = new sdk.remotepay.VoidPaymentResponse();
	            CloverConnector.populateBaseResponse(response, success, code, reason, message);
	            this.cloverConnector.broadcaster.notifyOnVoidPaymentResponse(response);
	        };
	        InnerDeviceObserver.prototype.onPaymentRefundVoided = function (refund, code, reason, message) {
	            var response = new sdk.remotepay.VoidPaymentRefundResponse();
	            response.setSuccess(code == sdk.remotepay.ResponseCode.SUCCESS);
	            response.setReason(reason != null ? reason : code.toString());
	            response.setMessage(message != null ? message : "No extended information provided.");
	            response.setRefund(refund);
	            this.cloverConnector.broadcaster.notifyOnVoidPaymentRefundResponse(response);
	        };
	        InnerDeviceObserver.prototype.onKeyPressed = function (keyPress) {
	            //TODO: For future use
	        };
	        InnerDeviceObserver.prototype.onPaymentRefundResponse = function (refundResponseMessage) {
	            // hold the response for finishOk for the refund. See comments in onFinishOk(Refund)
	            var success = refundResponseMessage.getCode() == sdk.remotemessage.TxState.SUCCESS;
	            var response = new sdk.remotepay.RefundPaymentResponse();
	            var reason = refundResponseMessage.getReason();
	            CloverConnector.populateBaseResponse(response, success, this.resultSuccessToResponseCode(success), reason, refundResponseMessage.getMessage());
	            response.setOrderId(refundResponseMessage.getOrderId());
	            response.setPaymentId(refundResponseMessage.getPaymentId());
	            response.setRefund(refundResponseMessage.getRefund());
	            // NOTE: While this is currently needed, we are attempting to move away from this requirement
	            this.lastPRR = response; // set this so we have the appropriate information for when onFinish(Refund) is called
	        };
	        InnerDeviceObserver.prototype.onPaymentRefundVoidResponse = function (voidPaymentRefundResponseMessage) {
	            var success = (sdk.remotemessage.ResultStatus.SUCCESS == status);
	            var response = new sdk.remotepay.VoidPaymentRefundResponse();
	            var reason = voidPaymentRefundResponseMessage.getReason();
	            CloverConnector.populateBaseResponse(response, success, this.resultSuccessToResponseCode(success), reason, voidPaymentRefundResponseMessage.getMessage());
	            response.setRefundId(voidPaymentRefundResponseMessage.getRefund() ? voidPaymentRefundResponseMessage.getRefund().getId() : null);
	            response.setReason(voidPaymentRefundResponseMessage.getReason());
	        };
	        InnerDeviceObserver.prototype.onVaultCardResponse = function (vaultCardResponseMessage, code, message) {
	            var success = (sdk.remotemessage.ResultStatus.SUCCESS == vaultCardResponseMessage.getStatus());
	            this.cloverConnector.device.doShowWelcomeScreen();
	            var response = new sdk.remotepay.VaultCardResponse();
	            response.setCard(vaultCardResponseMessage.getCard());
	            CloverConnector.populateBaseResponse(response, success, code || this.resultSuccessToResponseCode(success), vaultCardResponseMessage.getReason(), message);
	            this.cloverConnector.broadcaster.notifyOnVaultCardRespose(response);
	        };
	        InnerDeviceObserver.prototype.onCapturePreAuthError = function (result, reason, message, paymentId) {
	            var response = new sdk.remotepay.CapturePreAuthResponse();
	            CloverConnector.populateBaseResponse(response, false, result, reason, message);
	            response.setPaymentId(paymentId);
	            response.setTipAmount(0);
	            this.cloverConnector.broadcaster.notifyOnTipAdjustAuthResponse(response);
	        };
	        InnerDeviceObserver.prototype.onCapturePreAuth = function (capturePreAuthResponseMessage) {
	            var success = (sdk.remotemessage.ResultStatus.SUCCESS == capturePreAuthResponseMessage.getStatus());
	            var response = new sdk.remotepay.CapturePreAuthResponse();
	            CloverConnector.populateBaseResponse(response, success, this.resultStatusToResponseCode(capturePreAuthResponseMessage.getStatus()), capturePreAuthResponseMessage.getReason(), capturePreAuthResponseMessage.getMessage());
	            response.setPaymentId(capturePreAuthResponseMessage.getPaymentId());
	            response.setAmount(capturePreAuthResponseMessage.getAmount());
	            response.setTipAmount(capturePreAuthResponseMessage.getTipAmount());
	            this.cloverConnector.broadcaster.notifyOnCapturePreAuth(response);
	        };
	        InnerDeviceObserver.prototype.onIncrementPreAuthError = function (result, reason, message) {
	            var response = new sdk.remotepay.IncrementPreAuthResponse();
	            CloverConnector.populateBaseResponse(response, false, result, reason, message);
	            this.cloverConnector.broadcaster.notifyOnIncrementPreAuthResponse(response);
	        };
	        InnerDeviceObserver.prototype.onIncrementPreAuthResponse = function (responseMsg) {
	            var success = (sdk.remotemessage.ResultStatus.SUCCESS == responseMsg.getStatus());
	            var response = new sdk.remotepay.IncrementPreAuthResponse();
	            CloverConnector.populateBaseResponse(response, success, this.resultStatusToResponseCode(responseMsg.getStatus()), responseMsg.getReason(), null);
	            response.setAuthorization(responseMsg.getAuthorization());
	            this.cloverConnector.broadcaster.notifyOnIncrementPreAuthResponse(response);
	        };
	        InnerDeviceObserver.prototype.onCloseoutResponse = function (status, reason, batch) {
	            var success = (status == sdk.remotemessage.ResultStatus.SUCCESS);
	            var response = new sdk.remotepay.CloseoutResponse();
	            CloverConnector.populateBaseResponse(response, success, this.resultSuccessToResponseCode(success), reason, null);
	            response.setBatch(batch);
	            this.cloverConnector.broadcaster.notifyCloseout(response);
	        };
	        InnerDeviceObserver.prototype.onDeviceDisconnected = function (device, message) {
	            this.logger.debug('Disconnected ', message);
	            this.cloverConnector.isReady = false;
	            this.cloverConnector.broadcaster.notifyOnDisconnect(message);
	        };
	        InnerDeviceObserver.prototype.onDeviceConnected = function () {
	            this.logger.debug('Connected');
	            this.cloverConnector.isReady = false;
	            this.cloverConnector.broadcaster.notifyOnConnect();
	        };
	        InnerDeviceObserver.prototype.onDeviceReady = function (device, drm) {
	            this.logger.debug('Ready');
	            this.cloverConnector.isReady = drm.getReady();
	            // Build merchant info from the discoveryrequest
	            var merchantInfo = new sdk.remotepay.MerchantInfo();
	            merchantInfo.setMerchantID(drm.getMerchantId());
	            merchantInfo.setMerchantMID(drm.getMerchantMId());
	            merchantInfo.setMerchantName(drm.getMerchantName());
	            var deviceInfo = new sdk.remotepay.DeviceInfo();
	            merchantInfo.setDeviceInfo(deviceInfo);
	            deviceInfo.setName(drm.getName());
	            deviceInfo.setModel(drm.getModel());
	            deviceInfo.setSerial(drm.getSerial());
	            deviceInfo.setSupportsAcks(drm.getSupportsAcknowledgement());
	            merchantInfo.setSupportsPreAuths(drm.getSupportsPreAuth());
	            merchantInfo.setSupportsManualRefunds(drm.getSupportsManualRefund());
	            merchantInfo.setSupportsTipAdjust(drm.getSupportsTipAdjust());
	            merchantInfo.setSupportsAuths(drm.getSupportsAuth());
	            merchantInfo.setSupportsVaultCards(drm.getSupportsVaultCard());
	            this.cloverConnector.merchantInfo = merchantInfo;
	            this.cloverConnector.device.setSupportsAck(drm.getSupportsAcknowledgement());
	            this.cloverConnector.device.setSupportsVoidPaymentResponse(drm.getSupportsVoidPaymentResponse());
	            if (drm.getReady()) {
	                this.cloverConnector.broadcaster.notifyOnReady(merchantInfo);
	            }
	            else {
	                this.cloverConnector.broadcaster.notifyOnConnect();
	            }
	        };
	        InnerDeviceObserver.prototype.onDeviceError = function (errorEvent) {
	            this.cloverConnector.broadcaster.notifyOnDeviceError(errorEvent);
	        };
	        InnerDeviceObserver.prototype.onPrintRefundPayment = function (payment, order, refund) {
	            var response = new sdk.remotepay.PrintRefundPaymentReceiptResponse();
	            response.setPayment(payment);
	            response.setOrder(order);
	            response.setRefund(refund);
	            this.cloverConnector.broadcaster.notifyOnPrintRefundPaymentReceipt(response);
	        };
	        InnerDeviceObserver.prototype.onPrintMerchantReceipt = function (payment) {
	            var message = new sdk.remotepay.PrintPaymentMerchantCopyReceiptMessage();
	            message.setPayment(payment);
	            this.cloverConnector.broadcaster.notifyOnPrintPaymentMerchantCopyReceipt(message);
	        };
	        InnerDeviceObserver.prototype.onPrintPaymentDecline = function (payment, reason) {
	            var message = new sdk.remotepay.PrintPaymentDeclineReceiptMessage();
	            message.setPayment(payment);
	            message.setReason(reason);
	            this.cloverConnector.broadcaster.notifyOnPrintPaymentDeclineReceipt(message);
	        };
	        InnerDeviceObserver.prototype.onPrintPayment = function (payment, order) {
	            var message = new sdk.remotepay.PrintPaymentReceiptMessage();
	            message.setPayment(payment);
	            message.setOrder(order);
	            this.cloverConnector.broadcaster.notifyOnPrintPaymentReceipt(message);
	        };
	        InnerDeviceObserver.prototype.onPrintCredit = function (credit) {
	            var message = new sdk.remotepay.PrintManualRefundReceiptMessage();
	            message.setCredit(credit);
	            this.cloverConnector.broadcaster.notifyOnPrintCreditReceipt(message);
	        };
	        InnerDeviceObserver.prototype.onPrintCreditDecline = function (credit, reason) {
	            var message = new sdk.remotepay.PrintManualRefundDeclineReceiptMessage();
	            message.setCredit(credit);
	            message.setReason(reason);
	            this.cloverConnector.broadcaster.notifyOnPrintCreditDeclineReceipt(message);
	        };
	        InnerDeviceObserver.prototype.onMessageAck = function (messageId) {
	            // TODO: for future use
	        };
	        InnerDeviceObserver.prototype.onPendingPaymentsResponse = function (success, pendingPayments, reason, message) {
	            var result = success ? sdk.remotepay.ResponseCode.SUCCESS : sdk.remotepay.ResponseCode.ERROR;
	            var response = new sdk.remotepay.RetrievePendingPaymentsResponse();
	            CloverConnector.populateBaseResponse(response, success, result, reason, message);
	            if (pendingPayments) {
	                response.setPendingPaymentEntries(pendingPayments);
	            }
	            else {
	                this.cloverConnector.device.doShowWelcomeScreen();
	            }
	            this.cloverConnector.broadcaster.notifyOnRetrievePendingPaymentResponse(response);
	        };
	        InnerDeviceObserver.prototype.onReadCardResponse = function (status, reason, cardData) {
	            var success = (status == sdk.remotemessage.ResultStatus.SUCCESS);
	            if (success) {
	                var response = new sdk.remotepay.ReadCardDataResponse();
	                CloverConnector.populateBaseResponse(response, success, this.resultSuccessToResponseCode(success), reason);
	                response.setCardData(cardData);
	                this.cloverConnector.device.doShowWelcomeScreen();
	                this.cloverConnector.broadcaster.notifyOnReadCardDataResponse(response);
	            }
	            else if (status == sdk.remotemessage.ResultStatus.CANCEL) {
	                this.onReadCardDataResponse(sdk.remotepay.ResponseCode.CANCEL, reason, '');
	            }
	            else {
	                this.onReadCardDataResponse(sdk.remotepay.ResponseCode.FAIL, reason, '');
	            }
	        };
	        InnerDeviceObserver.prototype.onMessageFromActivity = function (actionId, payload) {
	            var message = new sdk.remotepay.MessageFromActivity();
	            message.setAction(actionId);
	            message.setPayload(payload);
	            this.cloverConnector.broadcaster.notifyOnActivityMessage(message);
	        };
	        InnerDeviceObserver.prototype.onReadCardDataResponse = function (result, reason, message) {
	            var success = (result == sdk.remotepay.ResponseCode.SUCCESS);
	            this.cloverConnector.device.doShowWelcomeScreen();
	            var response = new sdk.remotepay.ReadCardDataResponse();
	            CloverConnector.populateBaseResponse(response, success, result, reason, message);
	            this.cloverConnector.broadcaster.notifyOnReadCardDataResponse(response);
	        };
	        InnerDeviceObserver.prototype.onActivityResponse = function (status, payload, reason, actionId) {
	            var success = (status == sdk.remotemessage.ResultStatus.SUCCESS);
	            var result = success ? sdk.remotepay.ResponseCode.SUCCESS : sdk.remotepay.ResponseCode.CANCEL;
	            var response = new sdk.remotepay.CustomActivityResponse();
	            CloverConnector.populateBaseResponse(response, success, result, reason);
	            response.setPayload(payload);
	            response.setAction(actionId);
	            this.cloverConnector.broadcaster.notifyOnActivityResponse(response);
	        };
	        InnerDeviceObserver.prototype.onDeviceStatusResponse = function (retrieveDeviceStatusResponseMessage) {
	            var success = retrieveDeviceStatusResponseMessage.getStatus() ? retrieveDeviceStatusResponseMessage.getStatus() == sdk.remotemessage.ResultStatus.SUCCESS : true;
	            var response = new sdk.remotepay.RetrieveDeviceStatusResponse();
	            CloverConnector.populateBaseResponse(response, success, this.resultStatusToResponseCode(retrieveDeviceStatusResponseMessage.getStatus()), retrieveDeviceStatusResponseMessage.getReason());
	            response.setState(retrieveDeviceStatusResponseMessage.getState());
	            response.setData(retrieveDeviceStatusResponseMessage.getData());
	            this.cloverConnector.broadcaster.notifyOnRetrieveDeviceStatusResponse(response);
	        };
	        InnerDeviceObserver.prototype.onInvalidStateTransitionResponse = function (status, reason, requestedTransition, state, data) {
	            var success = (status == sdk.remotemessage.ResultStatus.SUCCESS);
	            var response = new sdk.remotepay.InvalidStateTransitionResponse();
	            var responseCode = this.resultStatusToResponseCode(status);
	            CloverConnector.populateBaseResponse(response, success, responseCode, reason);
	            response.setRequestedTransition(requestedTransition);
	            response.setState(state);
	            response.setData(data);
	            this.cloverConnector.broadcaster.notifyOnInvalidStateTransitionResponse(response);
	        };
	        InnerDeviceObserver.prototype.onResetDeviceResponse = function (result, reason, state) {
	            var success = (result == sdk.remotepay.ResponseCode.SUCCESS);
	            var response = new sdk.remotepay.ResetDeviceResponse();
	            CloverConnector.populateBaseResponse(response, success, result, reason);
	            response.setState(state);
	            this.cloverConnector.broadcaster.notifyOnResetDeviceResponse(response);
	        };
	        InnerDeviceObserver.prototype.onRetrievePaymentResponse = function (retrievePaymentResponseMessage) {
	            var success = (retrievePaymentResponseMessage.getStatus() == sdk.remotemessage.ResultStatus.SUCCESS);
	            var response = new sdk.remotepay.RetrievePaymentResponse();
	            var responseCode = this.resultStatusToResponseCode(retrievePaymentResponseMessage.getStatus());
	            CloverConnector.populateBaseResponse(response, success, responseCode, retrievePaymentResponseMessage.getReason(), retrievePaymentResponseMessage.getMessage());
	            response.setExternalPaymentId(retrievePaymentResponseMessage.getExternalPaymentId());
	            response.setQueryStatus(retrievePaymentResponseMessage.getQueryStatus());
	            response.setPayment(retrievePaymentResponseMessage.getPayment());
	            this.cloverConnector.broadcaster.notifyOnRetrievePaymentResponse(response);
	        };
	        InnerDeviceObserver.prototype.onRetrievePrintersResponse = function (result, printers) {
	            var success = (result == sdk.remotepay.ResponseCode.SUCCESS);
	            var response = new sdk.remotepay.RetrievePrintersResponse();
	            CloverConnector.populateBaseResponse(response, success, result, null);
	            response.setPrinters(printers);
	            this.cloverConnector.broadcaster.notifyOnRetrievePrintersResponse(response);
	        };
	        InnerDeviceObserver.prototype.onPrintJobStatusResponse = function (result, printRequestId, printStatus) {
	            var success = (result == sdk.remotepay.ResponseCode.SUCCESS);
	            var response = new sdk.remotepay.PrintJobStatusResponse();
	            CloverConnector.populateBaseResponse(response, success, result, printStatus);
	            response.setStatus(printStatus);
	            response.setPrintRequestId(printRequestId);
	            this.cloverConnector.broadcaster.notifyOnPrintJobStatusResponse(response);
	        };
	        InnerDeviceObserver.prototype.onCustomerProvidedDataMessage = function (result, eventId, config, data) {
	            var event = new sdk.remotepay.CustomerProvidedDataEvent();
	            event.setResult(result);
	            event.setSuccess(result === sdk.remotepay.ResponseCode.SUCCESS);
	            event.setEventId(eventId);
	            var dataProviderConfig = new sdk.remotepay.DataProviderConfig();
	            dataProviderConfig.setType(config.getType());
	            dataProviderConfig.setConfiguration(config.getConfiguration());
	            event.setConfig(dataProviderConfig);
	            event.setData(data);
	            this.cloverConnector.broadcaster.notifyOnCustomerProvidedDataEvent(event);
	        };
	        InnerDeviceObserver.prototype.onDisplayReceiptOptionsResponse = function (status, reason) {
	            var response = new sdk.remotepay.DisplayReceiptOptionsResponse();
	            var responseCode = this.resultStatusToResponseCode(status);
	            response.setReason(reason);
	            response.setResult(responseCode);
	            response.setSuccess(response.getResult() == sdk.remotepay.ResponseCode.SUCCESS);
	            this.cloverConnector.broadcaster.notifyOnDisplayReceiptOptionsResponse(response);
	        };
	        InnerDeviceObserver.prototype.onSignatureCollected = function (signatureResponseMessage) {
	            var response = new sdk.remotepay.SignatureResponse();
	            var responseCode = this.resultStatusToResponseCode(signatureResponseMessage.getStatus());
	            response.setReason(signatureResponseMessage.getReason());
	            response.setResult(responseCode);
	            response.setSuccess(response.getResult() == sdk.remotepay.ResponseCode.SUCCESS);
	            response.setSignature(signatureResponseMessage.getSignature());
	            this.cloverConnector.broadcaster.notifyOnSignatureCollected(response);
	        };
	        InnerDeviceObserver.prototype.onBalanceInquiryResponse = function (balanceInquiryResponseMessage) {
	            var response = new sdk.remotepay.CheckBalanceResponse();
	            var responseCode = this.resultStatusToResponseCode(balanceInquiryResponseMessage.getStatus());
	            response.setReason(balanceInquiryResponseMessage.getReason());
	            response.setResult(responseCode);
	            response.setSuccess(response.getResult() == sdk.remotepay.ResponseCode.SUCCESS);
	            var payment = balanceInquiryResponseMessage.getPayment();
	            if (payment) {
	                response.setAmount(payment.getAmount());
	            }
	            this.cloverConnector.broadcaster.notifyOnCheckBalanceResponse(response);
	        };
	        InnerDeviceObserver.prototype.onRequestTipResponse = function (requestTipResponseMessage) {
	            var response = new sdk.remotepay.TipResponse();
	            var responseCode = this.resultStatusToResponseCode(requestTipResponseMessage.getStatus());
	            response.setReason(requestTipResponseMessage.getReason());
	            response.setResult(responseCode);
	            response.setSuccess(response.getResult() == sdk.remotepay.ResponseCode.SUCCESS);
	            response.setTipAmount(requestTipResponseMessage.getAmount());
	            this.cloverConnector.broadcaster.notifyOnTipResponse(response);
	        };
	        return InnerDeviceObserver;
	    }());
	    CloverConnector.InnerDeviceObserver = InnerDeviceObserver;
	})(CloverConnector = exports.CloverConnector || (exports.CloverConnector = {}));
	exports.CloverConnector = CloverConnector;

	//# sourceMappingURL=../../../../maps/com/clover/remote/client/CloverConnector.js.map


/***/ }),
/* 172 */
/***/ (function(module, exports) {

	"use strict";
	Object.defineProperty(exports, "__esModule", { value: true });
	exports.ImageUtil = void 0;
	var ImageUtil = /** @class */ (function () {
	    function ImageUtil() {
	    }
	    /**
	     * Appropriate for browsers. Uses a canvas element to base64
	     * encode the image.
	     *
	     * @param {HTMLImageElement} img
	     * @param {(response: any) => void} onEncode
	     */
	    ImageUtil.prototype.getBase64Image = function (img, onEncode) {
	        // Create an empty canvas element
	        var canvas = document.createElement("canvas");
	        canvas.width = img.naturalWidth;
	        canvas.height = img.naturalHeight;
	        // Copy the image contents to the canvas
	        var ctx = canvas.getContext("2d");
	        ctx.drawImage(img, 0, 0);
	        // Get the data-URL formatted image
	        // Firefox supports PNG and JPEG. You could check img.src to
	        // guess the original format, but be aware the using "image/jpg"
	        // will re-encode the image.
	        var dataURL = canvas.toDataURL("image/png");
	        onEncode(dataURL.replace(/^data:image\/(png|jpg);base64,/, ""));
	    };
	    /**
	     * Appropriate for browsers.  Uses an image tag and the load event to load an image from a url.
	     *
	     * @param {string} url
	     * @param {(image: any) => void} onLoad
	     * @param {(errorMessage: string) => void} onError
	     */
	    ImageUtil.prototype.loadImageFromURL = function (url, onLoad, onError) {
	        var image = new Image();
	        var imageLoadHandler = function () {
	            if (onLoad) {
	                onLoad(image);
	            }
	            clearEventListeners();
	        };
	        var imageErrorHandler = function () {
	            if (onError) {
	                onError("An Image could not be loaded. Please check that the URL (" + url + ") is accessible.");
	            }
	            clearEventListeners();
	        };
	        var clearEventListeners = function () {
	            image.removeEventListener("load", imageLoadHandler);
	            image.removeEventListener("error", imageErrorHandler);
	        };
	        image.addEventListener("load", imageLoadHandler);
	        image.addEventListener("error", imageErrorHandler);
	        image.crossOrigin = "Anonymous";
	        image.src = url;
	    };
	    return ImageUtil;
	}());
	exports.ImageUtil = ImageUtil;

	//# sourceMappingURL=../../../maps/com/clover/util/ImageUtil.js.map


/***/ }),
/* 173 */
/***/ (function(module, exports, __webpack_require__) {

	"use strict";
	var __extends = (this && this.__extends) || (function () {
	    var extendStatics = function (d, b) {
	        extendStatics = Object.setPrototypeOf ||
	            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
	            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
	        return extendStatics(d, b);
	    };
	    return function (d, b) {
	        extendStatics(d, b);
	        function __() { this.constructor = d; }
	        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
	    };
	})();
	Object.defineProperty(exports, "__esModule", { value: true });
	exports.BrowserWebSocketImpl = void 0;
	var CloverWebSocketInterface_1 = __webpack_require__(505);
	/**
	 * Uses a browser Websocket.
	 *
	 *
	 */
	var BrowserWebSocketImpl = /** @class */ (function (_super) {
	    __extends(BrowserWebSocketImpl, _super);
	    function BrowserWebSocketImpl(endpoint) {
	        return _super.call(this, endpoint) || this;
	    }
	    /**
	     *
	     * @override
	     * @param endpoint - the url that will connected to
	     * @param accessToken - Here the access token is passed as a second param to `new WebSocket()` and will be read
	     * by the support server as a "subprotocol" in the Sec-WebSocket-Protocol header value.
	     * @returns {WebSocket} - the specific implementation of a websocket
	     */
	    BrowserWebSocketImpl.prototype.createWebSocket = function (endpoint, accessToken) {
	        return new WebSocket(endpoint, accessToken);
	    };
	    /**
	     * Browser implementations do not do pong frames
	     */
	    BrowserWebSocketImpl.prototype.sendPong = function () {
	        return this;
	    };
	    /**
	     * Browser implementations do not do ping frames
	     */
	    BrowserWebSocketImpl.prototype.sendPing = function () {
	        return this;
	    };
	    /**
	     * Create an instance of this class
	     *
	     * @param endpoint
	     * @returns {BrowserWebSocketImpl}
	     */
	    BrowserWebSocketImpl.createInstance = function (endpoint) {
	        return new BrowserWebSocketImpl(endpoint);
	    };
	    return BrowserWebSocketImpl;
	}(CloverWebSocketInterface_1.CloverWebSocketInterface));
	exports.BrowserWebSocketImpl = BrowserWebSocketImpl;

	//# sourceMappingURL=../../../maps/com/clover/websocket/BrowserWebSocketImpl.js.map


/***/ }),
/* 174 */
/***/ (function(module, exports) {

	"use strict";
	Object.defineProperty(exports, "__esModule", { value: true });
	exports.WebSocketState = void 0;
	/**
	 * WebSocket state.
	 *
	 *
	 * </p>
	 */
	var WebSocketState;
	(function (WebSocketState) {
	    /**
	     * This value does not exist in the web
	     *
	     * The initial state of a {@link WebSocket} instance.
	     */
	    // CREATED,
	    /**
	     * An <a href="https://tools.ietf.org/html/rfc6455#section-4">opening
	     * handshake</a> is being performed.
	     */
	    WebSocketState[WebSocketState["CONNECTING"] = 0] = "CONNECTING";
	    /**
	     * The WebSocket connection is established ( the <a href=
	     * "https://tools.ietf.org/html/rfc6455#section-4">opening handshake</a>
	     * has succeeded) and usable.
	     */
	    WebSocketState[WebSocketState["OPEN"] = 1] = "OPEN";
	    /**
	     * A <a href="https://tools.ietf.org/html/rfc6455#section-7">closing
	     * handshake</a> is being performed.
	     */
	    WebSocketState[WebSocketState["CLOSING"] = 2] = "CLOSING";
	    /**
	     * The WebSocket connection is closed.
	     */
	    WebSocketState[WebSocketState["CLOSED"] = 3] = "CLOSED";
	})(WebSocketState = exports.WebSocketState || (exports.WebSocketState = {}));

	//# sourceMappingURL=../../../maps/com/clover/websocket/WebSocketState.js.map


/***/ }),
/* 175 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';

	Object.defineProperty(exports, "__esModule", {
	    value: true
	});

	var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

	var _react = __webpack_require__(4);

	var _react2 = _interopRequireDefault(_react);

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

	function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

	function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

	var Checkmark = function (_React$Component) {
	    _inherits(Checkmark, _React$Component);

	    function Checkmark() {
	        _classCallCheck(this, Checkmark);

	        return _possibleConstructorReturn(this, (Checkmark.__proto__ || Object.getPrototypeOf(Checkmark)).call(this));
	    }

	    _createClass(Checkmark, [{
	        key: 'render',
	        value: function render() {
	            var className = 'checkmark';
	            if (this.props.class !== undefined) {
	                className = this.props.class;
	            }

	            return _react2.default.createElement(
	                'svg',
	                { className: className, viewBox: '0 0 24 24', xmlns: 'http://www.w3.org/2000/svg' },
	                _react2.default.createElement('path', { d: 'M0 0h24v24H0z', fill: 'none' }),
	                _react2.default.createElement('path', { d: 'M9 16.2L4.8 12l-1.4 1.4L9 19 21 7l-1.4-1.4L9 16.2z' })
	            );
	        }
	    }]);

	    return Checkmark;
	}(_react2.default.Component);

	exports.default = Checkmark;

/***/ }),
/* 176 */
/***/ (function(module, exports) {

	'use strict';

	Object.defineProperty(exports, "__esModule", {
	    value: true
	});

	var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

	var PayloadMessage = function () {
	    function PayloadMessage(payloadClassName, messageType) {
	        _classCallCheck(this, PayloadMessage);

	        this.payloadClassName = payloadClassName.length < 1 ? 'PayloadMessage' : payloadClassName;
	        this.messageType = messageType;
	    }

	    _createClass(PayloadMessage, [{
	        key: 'getPayload',
	        value: function getPayload() {
	            return {
	                messageType: this.messageType,
	                payloadClassName: this.payloadClassName
	            };
	        }
	    }]);

	    return PayloadMessage;
	}();

	exports.default = PayloadMessage;

/***/ }),
/* 177 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';

	Object.defineProperty(exports, "__esModule", {
	    value: true
	});

	var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

	var _CurrencyFormatter = __webpack_require__(27);

	var _CurrencyFormatter2 = _interopRequireDefault(_CurrencyFormatter);

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

	var Refund = function () {
	    function Refund() {
	        _classCallCheck(this, Refund);

	        this.amount = 0;
	        this.cardDetails = null;
	        this.cardType = 'Default';
	        this.date = new Date();
	        this.employee = 'Employee';
	        this.entryMethod = '';
	        this.formatter = new _CurrencyFormatter2.default();
	        this.id = null;
	        this.refund = true;
	        this.tender = 'Credit Card';
	        this.transactionState = 'OPEN';
	        this.transactionTitle = null;
	        this.transactionType = '';
	    }

	    _createClass(Refund, [{
	        key: 'getAmount',
	        value: function getAmount() {
	            return this.formatter.convertToFloat(this.amount);
	        }
	    }, {
	        key: 'setAmount',
	        value: function setAmount(amount) {
	            this.amount = amount;
	        }
	    }, {
	        key: 'getCardDetails',
	        value: function getCardDetails() {
	            return this.cardDetails;
	        }
	    }, {
	        key: 'setCardDetails',
	        value: function setCardDetails(cardDetails) {
	            this.cardDetails = cardDetails;
	        }
	    }, {
	        key: 'getCardType',
	        value: function getCardType() {
	            return this.cardType;
	        }
	    }, {
	        key: 'setCardType',
	        value: function setCardType(cardType) {
	            this.cardType = cardType;
	        }
	    }, {
	        key: 'getDate',
	        value: function getDate() {
	            return this.date;
	        }
	    }, {
	        key: 'setDate',
	        value: function setDate(date) {
	            this.date = date;
	        }
	    }, {
	        key: 'getEmployee',
	        value: function getEmployee() {
	            return this.employee;
	        }
	    }, {
	        key: 'setEmployee',
	        value: function setEmployee(employee) {
	            this.employee = employee;
	        }
	    }, {
	        key: 'getId',
	        value: function getId() {
	            return this.id;
	        }
	    }, {
	        key: 'setId',
	        value: function setId(id) {
	            this.id = id;
	        }
	    }, {
	        key: 'getTender',
	        value: function getTender() {
	            return this.tender;
	        }
	    }, {
	        key: 'setTender',
	        value: function setTender(tender) {
	            this.tender = tender;
	        }
	    }, {
	        key: 'getTotal',
	        value: function getTotal() {
	            return parseFloat(this.amount).toFixed(2);
	        }
	    }, {
	        key: 'getTransactionTitle',
	        value: function getTransactionTitle() {
	            return this.transactionTitle;
	        }
	    }, {
	        key: 'setTransactionTitle',
	        value: function setTransactionTitle(transactionTitle) {
	            this.transactionTitle = transactionTitle;
	        }
	    }, {
	        key: 'getTransactionType',
	        value: function getTransactionType() {
	            return this.transactionType;
	        }
	    }, {
	        key: 'setTransactionType',
	        value: function setTransactionType(transactionType) {
	            this.transactionType = transactionType;
	        }
	    }, {
	        key: 'getEntryMethod',
	        value: function getEntryMethod() {
	            return this.entryMethod;
	        }
	    }, {
	        key: 'setEntryMethod',
	        value: function setEntryMethod(entryMethod) {
	            this.entryMethod = entryMethod;
	        }
	    }, {
	        key: 'getTransactionState',
	        value: function getTransactionState() {
	            return this.transactionState;
	        }
	    }, {
	        key: 'setTransactionState',
	        value: function setTransactionState(state) {
	            this.transactionState = state;
	        }
	    }]);

	    return Refund;
	}();

	exports.default = Refund;

/***/ }),
/* 178 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';

	var bind = __webpack_require__(208);
	var GetIntrinsic = __webpack_require__(326);

	var $apply = GetIntrinsic('%Function.prototype.apply%');
	var $call = GetIntrinsic('%Function.prototype.call%');
	var $reflectApply = GetIntrinsic('%Reflect.apply%', true) || bind.call($call, $apply);

	var $gOPD = GetIntrinsic('%Object.getOwnPropertyDescriptor%', true);
	var $defineProperty = GetIntrinsic('%Object.defineProperty%', true);
	var $max = GetIntrinsic('%Math.max%');

	if ($defineProperty) {
		try {
			$defineProperty({}, 'a', { value: 1 });
		} catch (e) {
			// IE 8 has a broken defineProperty
			$defineProperty = null;
		}
	}

	module.exports = function callBind(originalFunction) {
		var func = $reflectApply(bind, $call, arguments);
		if ($gOPD && $defineProperty) {
			var desc = $gOPD(func, 'length');
			if (desc.configurable) {
				// original length, plus the receiver, minus any additional arguments (after the receiver)
				$defineProperty(
					func,
					'length',
					{ value: 1 + $max(0, originalFunction.length - (arguments.length - 1)) }
				);
			}
		}
		return func;
	};

	var applyBind = function applyBind() {
		return $reflectApply(bind, $apply, arguments);
	};

	if ($defineProperty) {
		$defineProperty(module.exports, 'apply', { value: applyBind });
	} else {
		module.exports.apply = applyBind;
	}


/***/ }),
/* 179 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';
	var at = __webpack_require__(138)(true);

	 // `AdvanceStringIndex` abstract operation
	// https://tc39.github.io/ecma262/#sec-advancestringindex
	module.exports = function (S, index, unicode) {
	  return index + (unicode ? at(S, index).length : 1);
	};


/***/ }),
/* 180 */
/***/ (function(module, exports, __webpack_require__) {

	// 22.1.3.6 Array.prototype.fill(value, start = 0, end = this.length)
	'use strict';
	var toObject = __webpack_require__(22);
	var toAbsoluteIndex = __webpack_require__(79);
	var toLength = __webpack_require__(17);
	module.exports = function fill(value /* , start = 0, end = @length */) {
	  var O = toObject(this);
	  var length = toLength(O.length);
	  var aLen = arguments.length;
	  var index = toAbsoluteIndex(aLen > 1 ? arguments[1] : undefined, length);
	  var end = aLen > 2 ? arguments[2] : undefined;
	  var endPos = end === undefined ? length : toAbsoluteIndex(end, length);
	  while (endPos > index) O[index++] = value;
	  return O;
	};


/***/ }),
/* 181 */
/***/ (function(module, exports, __webpack_require__) {

	// 9.4.2.3 ArraySpeciesCreate(originalArray, length)
	var speciesConstructor = __webpack_require__(568);

	module.exports = function (original, length) {
	  return new (speciesConstructor(original))(length);
	};


/***/ }),
/* 182 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';
	var $defineProperty = __webpack_require__(20);
	var createDesc = __webpack_require__(76);

	module.exports = function (object, index, value) {
	  if (index in object) $defineProperty.f(object, index, createDesc(0, value));
	  else object[index] = value;
	};


/***/ }),
/* 183 */
/***/ (function(module, exports, __webpack_require__) {

	var isObject = __webpack_require__(12);
	var document = __webpack_require__(9).document;
	// typeof document.createElement is 'object' in old IE
	var is = isObject(document) && isObject(document.createElement);
	module.exports = function (it) {
	  return is ? document.createElement(it) : {};
	};


/***/ }),
/* 184 */
/***/ (function(module, exports) {

	// IE 8- don't enum bug keys
	module.exports = (
	  'constructor,hasOwnProperty,isPrototypeOf,propertyIsEnumerable,toLocaleString,toString,valueOf'
	).split(',');


/***/ }),
/* 185 */
/***/ (function(module, exports, __webpack_require__) {

	var MATCH = __webpack_require__(16)('match');
	module.exports = function (KEY) {
	  var re = /./;
	  try {
	    '/./'[KEY](re);
	  } catch (e) {
	    try {
	      re[MATCH] = false;
	      return !'/./'[KEY](re);
	    } catch (f) { /* empty */ }
	  } return true;
	};


/***/ }),
/* 186 */
/***/ (function(module, exports, __webpack_require__) {

	var document = __webpack_require__(9).document;
	module.exports = document && document.documentElement;


/***/ }),
/* 187 */
/***/ (function(module, exports, __webpack_require__) {

	var isObject = __webpack_require__(12);
	var setPrototypeOf = __webpack_require__(196).set;
	module.exports = function (that, target, C) {
	  var S = target.constructor;
	  var P;
	  if (S !== C && typeof S == 'function' && (P = S.prototype) !== C.prototype && isObject(P) && setPrototypeOf) {
	    setPrototypeOf(that, P);
	  } return that;
	};


/***/ }),
/* 188 */
/***/ (function(module, exports, __webpack_require__) {

	// check on default Array iterator
	var Iterators = __webpack_require__(91);
	var ITERATOR = __webpack_require__(16)('iterator');
	var ArrayProto = Array.prototype;

	module.exports = function (it) {
	  return it !== undefined && (Iterators.Array === it || ArrayProto[ITERATOR] === it);
	};


/***/ }),
/* 189 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';
	var create = __webpack_require__(73);
	var descriptor = __webpack_require__(76);
	var setToStringTag = __webpack_require__(92);
	var IteratorPrototype = {};

	// 25.1.2.1.1 %IteratorPrototype%[@@iterator]()
	__webpack_require__(31)(IteratorPrototype, __webpack_require__(16)('iterator'), function () { return this; });

	module.exports = function (Constructor, NAME, next) {
	  Constructor.prototype = create(IteratorPrototype, { next: descriptor(1, next) });
	  setToStringTag(Constructor, NAME + ' Iterator');
	};


/***/ }),
/* 190 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';
	var LIBRARY = __webpack_require__(63);
	var $export = __webpack_require__(1);
	var redefine = __webpack_require__(32);
	var hide = __webpack_require__(31);
	var Iterators = __webpack_require__(91);
	var $iterCreate = __webpack_require__(189);
	var setToStringTag = __webpack_require__(92);
	var getPrototypeOf = __webpack_require__(38);
	var ITERATOR = __webpack_require__(16)('iterator');
	var BUGGY = !([].keys && 'next' in [].keys()); // Safari has buggy iterators w/o `next`
	var FF_ITERATOR = '@@iterator';
	var KEYS = 'keys';
	var VALUES = 'values';

	var returnThis = function () { return this; };

	module.exports = function (Base, NAME, Constructor, next, DEFAULT, IS_SET, FORCED) {
	  $iterCreate(Constructor, NAME, next);
	  var getMethod = function (kind) {
	    if (!BUGGY && kind in proto) return proto[kind];
	    switch (kind) {
	      case KEYS: return function keys() { return new Constructor(this, kind); };
	      case VALUES: return function values() { return new Constructor(this, kind); };
	    } return function entries() { return new Constructor(this, kind); };
	  };
	  var TAG = NAME + ' Iterator';
	  var DEF_VALUES = DEFAULT == VALUES;
	  var VALUES_BUG = false;
	  var proto = Base.prototype;
	  var $native = proto[ITERATOR] || proto[FF_ITERATOR] || DEFAULT && proto[DEFAULT];
	  var $default = $native || getMethod(DEFAULT);
	  var $entries = DEFAULT ? !DEF_VALUES ? $default : getMethod('entries') : undefined;
	  var $anyNative = NAME == 'Array' ? proto.entries || $native : $native;
	  var methods, key, IteratorPrototype;
	  // Fix native
	  if ($anyNative) {
	    IteratorPrototype = getPrototypeOf($anyNative.call(new Base()));
	    if (IteratorPrototype !== Object.prototype && IteratorPrototype.next) {
	      // Set @@toStringTag to native iterators
	      setToStringTag(IteratorPrototype, TAG, true);
	      // fix for some old engines
	      if (!LIBRARY && typeof IteratorPrototype[ITERATOR] != 'function') hide(IteratorPrototype, ITERATOR, returnThis);
	    }
	  }
	  // fix Array#{values, @@iterator}.name in V8 / FF
	  if (DEF_VALUES && $native && $native.name !== VALUES) {
	    VALUES_BUG = true;
	    $default = function values() { return $native.call(this); };
	  }
	  // Define iterator
	  if ((!LIBRARY || FORCED) && (BUGGY || VALUES_BUG || !proto[ITERATOR])) {
	    hide(proto, ITERATOR, $default);
	  }
	  // Plug for library
	  Iterators[NAME] = $default;
	  Iterators[TAG] = returnThis;
	  if (DEFAULT) {
	    methods = {
	      values: DEF_VALUES ? $default : getMethod(VALUES),
	      keys: IS_SET ? $default : getMethod(KEYS),
	      entries: $entries
	    };
	    if (FORCED) for (key in methods) {
	      if (!(key in proto)) redefine(proto, key, methods[key]);
	    } else $export($export.P + $export.F * (BUGGY || VALUES_BUG), NAME, methods);
	  }
	  return methods;
	};


/***/ }),
/* 191 */
/***/ (function(module, exports) {

	// 20.2.2.14 Math.expm1(x)
	var $expm1 = Math.expm1;
	module.exports = (!$expm1
	  // Old FF bug
	  || $expm1(10) > 22025.465794806719 || $expm1(10) < 22025.4657948067165168
	  // Tor Browser bug
	  || $expm1(-2e-17) != -2e-17
	) ? function expm1(x) {
	  return (x = +x) == 0 ? x : x > -1e-6 && x < 1e-6 ? x + x * x / 2 : Math.exp(x) - 1;
	} : $expm1;


/***/ }),
/* 192 */
/***/ (function(module, exports) {

	// 20.2.2.28 Math.sign(x)
	module.exports = Math.sign || function sign(x) {
	  // eslint-disable-next-line no-self-compare
	  return (x = +x) == 0 || x != x ? x : x < 0 ? -1 : 1;
	};


/***/ }),
/* 193 */
/***/ (function(module, exports, __webpack_require__) {

	var global = __webpack_require__(9);
	var macrotask = __webpack_require__(201).set;
	var Observer = global.MutationObserver || global.WebKitMutationObserver;
	var process = global.process;
	var Promise = global.Promise;
	var isNode = __webpack_require__(42)(process) == 'process';

	module.exports = function () {
	  var head, last, notify;

	  var flush = function () {
	    var parent, fn;
	    if (isNode && (parent = process.domain)) parent.exit();
	    while (head) {
	      fn = head.fn;
	      head = head.next;
	      try {
	        fn();
	      } catch (e) {
	        if (head) notify();
	        else last = undefined;
	        throw e;
	      }
	    } last = undefined;
	    if (parent) parent.enter();
	  };

	  // Node.js
	  if (isNode) {
	    notify = function () {
	      process.nextTick(flush);
	    };
	  // browsers with MutationObserver, except iOS Safari - https://github.com/zloirock/core-js/issues/339
	  } else if (Observer && !(global.navigator && global.navigator.standalone)) {
	    var toggle = true;
	    var node = document.createTextNode('');
	    new Observer(flush).observe(node, { characterData: true }); // eslint-disable-line no-new
	    notify = function () {
	      node.data = toggle = !toggle;
	    };
	  // environments with maybe non-completely correct, but existent Promise
	  } else if (Promise && Promise.resolve) {
	    // Promise.resolve without an argument throws an error in LG WebOS 2
	    var promise = Promise.resolve(undefined);
	    notify = function () {
	      promise.then(flush);
	    };
	  // for other environments - macrotask based on:
	  // - setImmediate
	  // - MessageChannel
	  // - window.postMessag
	  // - onreadystatechange
	  // - setTimeout
	  } else {
	    notify = function () {
	      // strange IE + webpack dev server bug - use .call(global)
	      macrotask.call(global, flush);
	    };
	  }

	  return function (fn) {
	    var task = { fn: fn, next: undefined };
	    if (last) last.next = task;
	    if (!head) {
	      head = task;
	      notify();
	    } last = task;
	  };
	};


/***/ }),
/* 194 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';
	// 25.4.1.5 NewPromiseCapability(C)
	var aFunction = __webpack_require__(28);

	function PromiseCapability(C) {
	  var resolve, reject;
	  this.promise = new C(function ($$resolve, $$reject) {
	    if (resolve !== undefined || reject !== undefined) throw TypeError('Bad Promise constructor');
	    resolve = $$resolve;
	    reject = $$reject;
	  });
	  this.resolve = aFunction(resolve);
	  this.reject = aFunction(reject);
	}

	module.exports.f = function (C) {
	  return new PromiseCapability(C);
	};


/***/ }),
/* 195 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';

	var regexpFlags = __webpack_require__(106);

	var nativeExec = RegExp.prototype.exec;
	// This always refers to the native implementation, because the
	// String#replace polyfill uses ./fix-regexp-well-known-symbol-logic.js,
	// which loads this file before patching the method.
	var nativeReplace = String.prototype.replace;

	var patchedExec = nativeExec;

	var LAST_INDEX = 'lastIndex';

	var UPDATES_LAST_INDEX_WRONG = (function () {
	  var re1 = /a/,
	      re2 = /b*/g;
	  nativeExec.call(re1, 'a');
	  nativeExec.call(re2, 'a');
	  return re1[LAST_INDEX] !== 0 || re2[LAST_INDEX] !== 0;
	})();

	// nonparticipating capturing group, copied from es5-shim's String#split patch.
	var NPCG_INCLUDED = /()??/.exec('')[1] !== undefined;

	var PATCH = UPDATES_LAST_INDEX_WRONG || NPCG_INCLUDED;

	if (PATCH) {
	  patchedExec = function exec(str) {
	    var re = this;
	    var lastIndex, reCopy, match, i;

	    if (NPCG_INCLUDED) {
	      reCopy = new RegExp('^' + re.source + '$(?!\\s)', regexpFlags.call(re));
	    }
	    if (UPDATES_LAST_INDEX_WRONG) lastIndex = re[LAST_INDEX];

	    match = nativeExec.call(re, str);

	    if (UPDATES_LAST_INDEX_WRONG && match) {
	      re[LAST_INDEX] = re.global ? match.index + match[0].length : lastIndex;
	    }
	    if (NPCG_INCLUDED && match && match.length > 1) {
	      // Fix browsers whose `exec` methods don't consistently return `undefined`
	      // for NPCG, like IE8. NOTE: This doesn' work for /(.?)?/
	      // eslint-disable-next-line no-loop-func
	      nativeReplace.call(match[0], reCopy, function () {
	        for (i = 1; i < arguments.length - 2; i++) {
	          if (arguments[i] === undefined) match[i] = undefined;
	        }
	      });
	    }

	    return match;
	  };
	}

	module.exports = patchedExec;


/***/ }),
/* 196 */
/***/ (function(module, exports, __webpack_require__) {

	// Works with __proto__ only. Old v8 can't work with null proto objects.
	/* eslint-disable no-proto */
	var isObject = __webpack_require__(12);
	var anObject = __webpack_require__(6);
	var check = function (O, proto) {
	  anObject(O);
	  if (!isObject(proto) && proto !== null) throw TypeError(proto + ": can't set as prototype!");
	};
	module.exports = {
	  set: Object.setPrototypeOf || ('__proto__' in {} ? // eslint-disable-line
	    function (test, buggy, set) {
	      try {
	        set = __webpack_require__(44)(Function.call, __webpack_require__(37).f(Object.prototype, '__proto__').set, 2);
	        set(test, []);
	        buggy = !(test instanceof Array);
	      } catch (e) { buggy = true; }
	      return function setPrototypeOf(O, proto) {
	        check(O, proto);
	        if (buggy) O.__proto__ = proto;
	        else set(O, proto);
	        return O;
	      };
	    }({}, false) : undefined),
	  check: check
	};


/***/ }),
/* 197 */
/***/ (function(module, exports, __webpack_require__) {

	var shared = __webpack_require__(109)('keys');
	var uid = __webpack_require__(80);
	module.exports = function (key) {
	  return shared[key] || (shared[key] = uid(key));
	};


/***/ }),
/* 198 */
/***/ (function(module, exports, __webpack_require__) {

	// helper for String#{startsWith, endsWith, includes}
	var isRegExp = __webpack_require__(131);
	var defined = __webpack_require__(50);

	module.exports = function (that, searchString, NAME) {
	  if (isRegExp(searchString)) throw TypeError('String#' + NAME + " doesn't accept regex!");
	  return String(defined(that));
	};


/***/ }),
/* 199 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';
	var toInteger = __webpack_require__(46);
	var defined = __webpack_require__(50);

	module.exports = function repeat(count) {
	  var str = String(defined(this));
	  var res = '';
	  var n = toInteger(count);
	  if (n < 0 || n == Infinity) throw RangeError("Count can't be negative");
	  for (;n > 0; (n >>>= 1) && (str += str)) if (n & 1) res += str;
	  return res;
	};


/***/ }),
/* 200 */
/***/ (function(module, exports) {

	module.exports = '\x09\x0A\x0B\x0C\x0D\x20\xA0\u1680\u180E\u2000\u2001\u2002\u2003' +
	  '\u2004\u2005\u2006\u2007\u2008\u2009\u200A\u202F\u205F\u3000\u2028\u2029\uFEFF';


/***/ }),
/* 201 */
/***/ (function(module, exports, __webpack_require__) {

	var ctx = __webpack_require__(44);
	var invoke = __webpack_require__(297);
	var html = __webpack_require__(186);
	var cel = __webpack_require__(183);
	var global = __webpack_require__(9);
	var process = global.process;
	var setTask = global.setImmediate;
	var clearTask = global.clearImmediate;
	var MessageChannel = global.MessageChannel;
	var Dispatch = global.Dispatch;
	var counter = 0;
	var queue = {};
	var ONREADYSTATECHANGE = 'onreadystatechange';
	var defer, channel, port;
	var run = function () {
	  var id = +this;
	  // eslint-disable-next-line no-prototype-builtins
	  if (queue.hasOwnProperty(id)) {
	    var fn = queue[id];
	    delete queue[id];
	    fn();
	  }
	};
	var listener = function (event) {
	  run.call(event.data);
	};
	// Node.js 0.9+ & IE10+ has setImmediate, otherwise:
	if (!setTask || !clearTask) {
	  setTask = function setImmediate(fn) {
	    var args = [];
	    var i = 1;
	    while (arguments.length > i) args.push(arguments[i++]);
	    queue[++counter] = function () {
	      // eslint-disable-next-line no-new-func
	      invoke(typeof fn == 'function' ? fn : Function(fn), args);
	    };
	    defer(counter);
	    return counter;
	  };
	  clearTask = function clearImmediate(id) {
	    delete queue[id];
	  };
	  // Node.js 0.8-
	  if (__webpack_require__(42)(process) == 'process') {
	    defer = function (id) {
	      process.nextTick(ctx(run, id, 1));
	    };
	  // Sphere (JS game engine) Dispatch API
	  } else if (Dispatch && Dispatch.now) {
	    defer = function (id) {
	      Dispatch.now(ctx(run, id, 1));
	    };
	  // Browsers with MessageChannel, includes WebWorkers
	  } else if (MessageChannel) {
	    channel = new MessageChannel();
	    port = channel.port2;
	    channel.port1.onmessage = listener;
	    defer = ctx(port.postMessage, port, 1);
	  // Browsers with postMessage, skip WebWorkers
	  // IE8 has postMessage, but it's sync & typeof its postMessage is 'object'
	  } else if (global.addEventListener && typeof postMessage == 'function' && !global.importScripts) {
	    defer = function (id) {
	      global.postMessage(id + '', '*');
	    };
	    global.addEventListener('message', listener, false);
	  // IE8-
	  } else if (ONREADYSTATECHANGE in cel('script')) {
	    defer = function (id) {
	      html.appendChild(cel('script'))[ONREADYSTATECHANGE] = function () {
	        html.removeChild(this);
	        run.call(id);
	      };
	    };
	  // Rest old browsers
	  } else {
	    defer = function (id) {
	      setTimeout(ctx(run, id, 1), 0);
	    };
	  }
	}
	module.exports = {
	  set: setTask,
	  clear: clearTask
	};


/***/ }),
/* 202 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';
	var global = __webpack_require__(9);
	var DESCRIPTORS = __webpack_require__(18);
	var LIBRARY = __webpack_require__(63);
	var $typed = __webpack_require__(139);
	var hide = __webpack_require__(31);
	var redefineAll = __webpack_require__(77);
	var fails = __webpack_require__(10);
	var anInstance = __webpack_require__(71);
	var toInteger = __webpack_require__(46);
	var toLength = __webpack_require__(17);
	var toIndex = __webpack_require__(316);
	var gOPN = __webpack_require__(74).f;
	var dP = __webpack_require__(20).f;
	var arrayFill = __webpack_require__(180);
	var setToStringTag = __webpack_require__(92);
	var ARRAY_BUFFER = 'ArrayBuffer';
	var DATA_VIEW = 'DataView';
	var PROTOTYPE = 'prototype';
	var WRONG_LENGTH = 'Wrong length!';
	var WRONG_INDEX = 'Wrong index!';
	var $ArrayBuffer = global[ARRAY_BUFFER];
	var $DataView = global[DATA_VIEW];
	var Math = global.Math;
	var RangeError = global.RangeError;
	// eslint-disable-next-line no-shadow-restricted-names
	var Infinity = global.Infinity;
	var BaseBuffer = $ArrayBuffer;
	var abs = Math.abs;
	var pow = Math.pow;
	var floor = Math.floor;
	var log = Math.log;
	var LN2 = Math.LN2;
	var BUFFER = 'buffer';
	var BYTE_LENGTH = 'byteLength';
	var BYTE_OFFSET = 'byteOffset';
	var $BUFFER = DESCRIPTORS ? '_b' : BUFFER;
	var $LENGTH = DESCRIPTORS ? '_l' : BYTE_LENGTH;
	var $OFFSET = DESCRIPTORS ? '_o' : BYTE_OFFSET;

	// IEEE754 conversions based on https://github.com/feross/ieee754
	function packIEEE754(value, mLen, nBytes) {
	  var buffer = new Array(nBytes);
	  var eLen = nBytes * 8 - mLen - 1;
	  var eMax = (1 << eLen) - 1;
	  var eBias = eMax >> 1;
	  var rt = mLen === 23 ? pow(2, -24) - pow(2, -77) : 0;
	  var i = 0;
	  var s = value < 0 || value === 0 && 1 / value < 0 ? 1 : 0;
	  var e, m, c;
	  value = abs(value);
	  // eslint-disable-next-line no-self-compare
	  if (value != value || value === Infinity) {
	    // eslint-disable-next-line no-self-compare
	    m = value != value ? 1 : 0;
	    e = eMax;
	  } else {
	    e = floor(log(value) / LN2);
	    if (value * (c = pow(2, -e)) < 1) {
	      e--;
	      c *= 2;
	    }
	    if (e + eBias >= 1) {
	      value += rt / c;
	    } else {
	      value += rt * pow(2, 1 - eBias);
	    }
	    if (value * c >= 2) {
	      e++;
	      c /= 2;
	    }
	    if (e + eBias >= eMax) {
	      m = 0;
	      e = eMax;
	    } else if (e + eBias >= 1) {
	      m = (value * c - 1) * pow(2, mLen);
	      e = e + eBias;
	    } else {
	      m = value * pow(2, eBias - 1) * pow(2, mLen);
	      e = 0;
	    }
	  }
	  for (; mLen >= 8; buffer[i++] = m & 255, m /= 256, mLen -= 8);
	  e = e << mLen | m;
	  eLen += mLen;
	  for (; eLen > 0; buffer[i++] = e & 255, e /= 256, eLen -= 8);
	  buffer[--i] |= s * 128;
	  return buffer;
	}
	function unpackIEEE754(buffer, mLen, nBytes) {
	  var eLen = nBytes * 8 - mLen - 1;
	  var eMax = (1 << eLen) - 1;
	  var eBias = eMax >> 1;
	  var nBits = eLen - 7;
	  var i = nBytes - 1;
	  var s = buffer[i--];
	  var e = s & 127;
	  var m;
	  s >>= 7;
	  for (; nBits > 0; e = e * 256 + buffer[i], i--, nBits -= 8);
	  m = e & (1 << -nBits) - 1;
	  e >>= -nBits;
	  nBits += mLen;
	  for (; nBits > 0; m = m * 256 + buffer[i], i--, nBits -= 8);
	  if (e === 0) {
	    e = 1 - eBias;
	  } else if (e === eMax) {
	    return m ? NaN : s ? -Infinity : Infinity;
	  } else {
	    m = m + pow(2, mLen);
	    e = e - eBias;
	  } return (s ? -1 : 1) * m * pow(2, e - mLen);
	}

	function unpackI32(bytes) {
	  return bytes[3] << 24 | bytes[2] << 16 | bytes[1] << 8 | bytes[0];
	}
	function packI8(it) {
	  return [it & 0xff];
	}
	function packI16(it) {
	  return [it & 0xff, it >> 8 & 0xff];
	}
	function packI32(it) {
	  return [it & 0xff, it >> 8 & 0xff, it >> 16 & 0xff, it >> 24 & 0xff];
	}
	function packF64(it) {
	  return packIEEE754(it, 52, 8);
	}
	function packF32(it) {
	  return packIEEE754(it, 23, 4);
	}

	function addGetter(C, key, internal) {
	  dP(C[PROTOTYPE], key, { get: function () { return this[internal]; } });
	}

	function get(view, bytes, index, isLittleEndian) {
	  var numIndex = +index;
	  var intIndex = toIndex(numIndex);
	  if (intIndex + bytes > view[$LENGTH]) throw RangeError(WRONG_INDEX);
	  var store = view[$BUFFER]._b;
	  var start = intIndex + view[$OFFSET];
	  var pack = store.slice(start, start + bytes);
	  return isLittleEndian ? pack : pack.reverse();
	}
	function set(view, bytes, index, conversion, value, isLittleEndian) {
	  var numIndex = +index;
	  var intIndex = toIndex(numIndex);
	  if (intIndex + bytes > view[$LENGTH]) throw RangeError(WRONG_INDEX);
	  var store = view[$BUFFER]._b;
	  var start = intIndex + view[$OFFSET];
	  var pack = conversion(+value);
	  for (var i = 0; i < bytes; i++) store[start + i] = pack[isLittleEndian ? i : bytes - i - 1];
	}

	if (!$typed.ABV) {
	  $ArrayBuffer = function ArrayBuffer(length) {
	    anInstance(this, $ArrayBuffer, ARRAY_BUFFER);
	    var byteLength = toIndex(length);
	    this._b = arrayFill.call(new Array(byteLength), 0);
	    this[$LENGTH] = byteLength;
	  };

	  $DataView = function DataView(buffer, byteOffset, byteLength) {
	    anInstance(this, $DataView, DATA_VIEW);
	    anInstance(buffer, $ArrayBuffer, DATA_VIEW);
	    var bufferLength = buffer[$LENGTH];
	    var offset = toInteger(byteOffset);
	    if (offset < 0 || offset > bufferLength) throw RangeError('Wrong offset!');
	    byteLength = byteLength === undefined ? bufferLength - offset : toLength(byteLength);
	    if (offset + byteLength > bufferLength) throw RangeError(WRONG_LENGTH);
	    this[$BUFFER] = buffer;
	    this[$OFFSET] = offset;
	    this[$LENGTH] = byteLength;
	  };

	  if (DESCRIPTORS) {
	    addGetter($ArrayBuffer, BYTE_LENGTH, '_l');
	    addGetter($DataView, BUFFER, '_b');
	    addGetter($DataView, BYTE_LENGTH, '_l');
	    addGetter($DataView, BYTE_OFFSET, '_o');
	  }

	  redefineAll($DataView[PROTOTYPE], {
	    getInt8: function getInt8(byteOffset) {
	      return get(this, 1, byteOffset)[0] << 24 >> 24;
	    },
	    getUint8: function getUint8(byteOffset) {
	      return get(this, 1, byteOffset)[0];
	    },
	    getInt16: function getInt16(byteOffset /* , littleEndian */) {
	      var bytes = get(this, 2, byteOffset, arguments[1]);
	      return (bytes[1] << 8 | bytes[0]) << 16 >> 16;
	    },
	    getUint16: function getUint16(byteOffset /* , littleEndian */) {
	      var bytes = get(this, 2, byteOffset, arguments[1]);
	      return bytes[1] << 8 | bytes[0];
	    },
	    getInt32: function getInt32(byteOffset /* , littleEndian */) {
	      return unpackI32(get(this, 4, byteOffset, arguments[1]));
	    },
	    getUint32: function getUint32(byteOffset /* , littleEndian */) {
	      return unpackI32(get(this, 4, byteOffset, arguments[1])) >>> 0;
	    },
	    getFloat32: function getFloat32(byteOffset /* , littleEndian */) {
	      return unpackIEEE754(get(this, 4, byteOffset, arguments[1]), 23, 4);
	    },
	    getFloat64: function getFloat64(byteOffset /* , littleEndian */) {
	      return unpackIEEE754(get(this, 8, byteOffset, arguments[1]), 52, 8);
	    },
	    setInt8: function setInt8(byteOffset, value) {
	      set(this, 1, byteOffset, packI8, value);
	    },
	    setUint8: function setUint8(byteOffset, value) {
	      set(this, 1, byteOffset, packI8, value);
	    },
	    setInt16: function setInt16(byteOffset, value /* , littleEndian */) {
	      set(this, 2, byteOffset, packI16, value, arguments[2]);
	    },
	    setUint16: function setUint16(byteOffset, value /* , littleEndian */) {
	      set(this, 2, byteOffset, packI16, value, arguments[2]);
	    },
	    setInt32: function setInt32(byteOffset, value /* , littleEndian */) {
	      set(this, 4, byteOffset, packI32, value, arguments[2]);
	    },
	    setUint32: function setUint32(byteOffset, value /* , littleEndian */) {
	      set(this, 4, byteOffset, packI32, value, arguments[2]);
	    },
	    setFloat32: function setFloat32(byteOffset, value /* , littleEndian */) {
	      set(this, 4, byteOffset, packF32, value, arguments[2]);
	    },
	    setFloat64: function setFloat64(byteOffset, value /* , littleEndian */) {
	      set(this, 8, byteOffset, packF64, value, arguments[2]);
	    }
	  });
	} else {
	  if (!fails(function () {
	    $ArrayBuffer(1);
	  }) || !fails(function () {
	    new $ArrayBuffer(-1); // eslint-disable-line no-new
	  }) || fails(function () {
	    new $ArrayBuffer(); // eslint-disable-line no-new
	    new $ArrayBuffer(1.5); // eslint-disable-line no-new
	    new $ArrayBuffer(NaN); // eslint-disable-line no-new
	    return $ArrayBuffer.name != ARRAY_BUFFER;
	  })) {
	    $ArrayBuffer = function ArrayBuffer(length) {
	      anInstance(this, $ArrayBuffer);
	      return new BaseBuffer(toIndex(length));
	    };
	    var ArrayBufferProto = $ArrayBuffer[PROTOTYPE] = BaseBuffer[PROTOTYPE];
	    for (var keys = gOPN(BaseBuffer), j = 0, key; keys.length > j;) {
	      if (!((key = keys[j++]) in $ArrayBuffer)) hide($ArrayBuffer, key, BaseBuffer[key]);
	    }
	    if (!LIBRARY) ArrayBufferProto.constructor = $ArrayBuffer;
	  }
	  // iOS Safari 7.x bug
	  var view = new $DataView(new $ArrayBuffer(2));
	  var $setInt8 = $DataView[PROTOTYPE].setInt8;
	  view.setInt8(0, 2147483648);
	  view.setInt8(1, 2147483649);
	  if (view.getInt8(0) || !view.getInt8(1)) redefineAll($DataView[PROTOTYPE], {
	    setInt8: function setInt8(byteOffset, value) {
	      $setInt8.call(this, byteOffset, value << 24 >> 24);
	    },
	    setUint8: function setUint8(byteOffset, value) {
	      $setInt8.call(this, byteOffset, value << 24 >> 24);
	    }
	  }, true);
	}
	setToStringTag($ArrayBuffer, ARRAY_BUFFER);
	setToStringTag($DataView, DATA_VIEW);
	hide($DataView[PROTOTYPE], $typed.VIEW, true);
	exports[ARRAY_BUFFER] = $ArrayBuffer;
	exports[DATA_VIEW] = $DataView;


/***/ }),
/* 203 */
/***/ (function(module, exports, __webpack_require__) {

	var global = __webpack_require__(9);
	var core = __webpack_require__(43);
	var LIBRARY = __webpack_require__(63);
	var wksExt = __webpack_require__(317);
	var defineProperty = __webpack_require__(20).f;
	module.exports = function (name) {
	  var $Symbol = core.Symbol || (core.Symbol = LIBRARY ? {} : global.Symbol || {});
	  if (name.charAt(0) != '_' && !(name in $Symbol)) defineProperty($Symbol, name, { value: wksExt.f(name) });
	};


/***/ }),
/* 204 */
/***/ (function(module, exports, __webpack_require__) {

	var classof = __webpack_require__(90);
	var ITERATOR = __webpack_require__(16)('iterator');
	var Iterators = __webpack_require__(91);
	module.exports = __webpack_require__(43).getIteratorMethod = function (it) {
	  if (it != undefined) return it[ITERATOR]
	    || it['@@iterator']
	    || Iterators[classof(it)];
	};


/***/ }),
/* 205 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';
	var addToUnscopables = __webpack_require__(62);
	var step = __webpack_require__(300);
	var Iterators = __webpack_require__(91);
	var toIObject = __webpack_require__(39);

	// 22.1.3.4 Array.prototype.entries()
	// 22.1.3.13 Array.prototype.keys()
	// 22.1.3.29 Array.prototype.values()
	// 22.1.3.30 Array.prototype[@@iterator]()
	module.exports = __webpack_require__(190)(Array, 'Array', function (iterated, kind) {
	  this._t = toIObject(iterated); // target
	  this._i = 0;                   // next index
	  this._k = kind;                // kind
	// 22.1.5.2.1 %ArrayIteratorPrototype%.next()
	}, function () {
	  var O = this._t;
	  var kind = this._k;
	  var index = this._i++;
	  if (!O || index >= O.length) {
	    this._t = undefined;
	    return step(1);
	  }
	  if (kind == 'keys') return step(0, index);
	  if (kind == 'values') return step(0, O[index]);
	  return step(0, [index, O[index]]);
	}, 'values');

	// argumentsList[@@iterator] is %ArrayProto_values% (9.4.4.6, 9.4.4.7)
	Iterators.Arguments = Iterators.Array;

	addToUnscopables('keys');
	addToUnscopables('values');
	addToUnscopables('entries');


/***/ }),
/* 206 */
/***/ (function(module, exports, __webpack_require__) {

	/**
	 * Copyright (c) 2013-present, Facebook, Inc.
	 *
	 * This source code is licensed under the MIT license found in the
	 * LICENSE file in the root directory of this source tree.
	 *
	 */

	'use strict';

	var emptyObject = {};

	if ((undefined) !== 'production') {
	  Object.freeze(emptyObject);
	}

	module.exports = emptyObject;

/***/ }),
/* 207 */
/***/ (function(module, exports) {

	/**
	 * Copyright (c) 2013-present, Facebook, Inc.
	 *
	 * This source code is licensed under the MIT license found in the
	 * LICENSE file in the root directory of this source tree.
	 *
	 * @typechecks
	 * 
	 */

	/*eslint-disable no-self-compare */

	'use strict';

	var hasOwnProperty = Object.prototype.hasOwnProperty;

	/**
	 * inlined Object.is polyfill to avoid requiring consumers ship their own
	 * https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/is
	 */
	function is(x, y) {
	  // SameValue algorithm
	  if (x === y) {
	    // Steps 1-5, 7-10
	    // Steps 6.b-6.e: +0 != -0
	    // Added the nonzero y check to make Flow happy, but it is redundant
	    return x !== 0 || y !== 0 || 1 / x === 1 / y;
	  } else {
	    // Step 6.a: NaN == NaN
	    return x !== x && y !== y;
	  }
	}

	/**
	 * Performs equality by iterating through keys on an object and returning false
	 * when any key has values which are not strictly equal between the arguments.
	 * Returns true when the values of all keys are strictly equal.
	 */
	function shallowEqual(objA, objB) {
	  if (is(objA, objB)) {
	    return true;
	  }

	  if (typeof objA !== 'object' || objA === null || typeof objB !== 'object' || objB === null) {
	    return false;
	  }

	  var keysA = Object.keys(objA);
	  var keysB = Object.keys(objB);

	  if (keysA.length !== keysB.length) {
	    return false;
	  }

	  // Test for A's keys different from B.
	  for (var i = 0; i < keysA.length; i++) {
	    if (!hasOwnProperty.call(objB, keysA[i]) || !is(objA[keysA[i]], objB[keysA[i]])) {
	      return false;
	    }
	  }

	  return true;
	}

	module.exports = shallowEqual;

/***/ }),
/* 208 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';

	var implementation = __webpack_require__(784);

	module.exports = Function.prototype.bind || implementation;


/***/ }),
/* 209 */
/***/ (function(module, exports) {

	'use strict';

	exports.__esModule = true;
	exports.addEventListener = addEventListener;
	exports.removeEventListener = removeEventListener;
	exports.getHashPath = getHashPath;
	exports.replaceHashPath = replaceHashPath;
	exports.getWindowPath = getWindowPath;
	exports.go = go;
	exports.getUserConfirmation = getUserConfirmation;
	exports.supportsHistory = supportsHistory;
	exports.supportsGoWithoutReloadUsingHash = supportsGoWithoutReloadUsingHash;

	function addEventListener(node, event, listener) {
	  if (node.addEventListener) {
	    node.addEventListener(event, listener, false);
	  } else {
	    node.attachEvent('on' + event, listener);
	  }
	}

	function removeEventListener(node, event, listener) {
	  if (node.removeEventListener) {
	    node.removeEventListener(event, listener, false);
	  } else {
	    node.detachEvent('on' + event, listener);
	  }
	}

	function getHashPath() {
	  // We can't use window.location.hash here because it's not
	  // consistent across browsers - Firefox will pre-decode it!
	  return window.location.href.split('#')[1] || '';
	}

	function replaceHashPath(path) {
	  window.location.replace(window.location.pathname + window.location.search + '#' + path);
	}

	function getWindowPath() {
	  return window.location.pathname + window.location.search + window.location.hash;
	}

	function go(n) {
	  if (n) window.history.go(n);
	}

	function getUserConfirmation(message, callback) {
	  callback(window.confirm(message));
	}

	/**
	 * Returns true if the HTML5 history API is supported. Taken from Modernizr.
	 *
	 * https://github.com/Modernizr/Modernizr/blob/master/LICENSE
	 * https://github.com/Modernizr/Modernizr/blob/master/feature-detects/history.js
	 * changed to avoid false negatives for Windows Phones: https://github.com/rackt/react-router/issues/586
	 */

	function supportsHistory() {
	  var ua = navigator.userAgent;
	  if ((ua.indexOf('Android 2.') !== -1 || ua.indexOf('Android 4.0') !== -1) && ua.indexOf('Mobile Safari') !== -1 && ua.indexOf('Chrome') === -1 && ua.indexOf('Windows Phone') === -1) {
	    return false;
	  }
	  return window.history && 'pushState' in window.history;
	}

	/**
	 * Returns false if using go(n) with hash history causes a full page reload.
	 */

	function supportsGoWithoutReloadUsingHash() {
	  var ua = navigator.userAgent;
	  return ua.indexOf('Firefox') === -1;
	}

/***/ }),
/* 210 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';

	exports.__esModule = true;

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }

	var _warning = __webpack_require__(54);

	var _warning2 = _interopRequireDefault(_warning);

	function deprecate(fn, message) {
	  return function () {
	    (undefined) !== 'production' ? _warning2['default'](false, '[history] ' + message) : undefined;
	    return fn.apply(this, arguments);
	  };
	}

	exports['default'] = deprecate;
	module.exports = exports['default'];

/***/ }),
/* 211 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';

	exports.__esModule = true;

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }

	var _warning = __webpack_require__(54);

	var _warning2 = _interopRequireDefault(_warning);

	function runTransitionHook(hook, location, callback) {
	  var result = hook(location, callback);

	  if (hook.length < 2) {
	    // Assume the hook runs synchronously and automatically
	    // call the callback with the return value.
	    callback(result);
	  } else {
	    (undefined) !== 'production' ? _warning2['default'](result === undefined, 'You should not "return" in a transition hook with a callback argument; call the callback instead') : undefined;
	  }
	}

	exports['default'] = runTransitionHook;
	module.exports = exports['default'];

/***/ }),
/* 212 */
/***/ (function(module, exports, __webpack_require__) {

	/**
	 * Copyright (c) 2013-present, Facebook, Inc.
	 *
	 * This source code is licensed under the MIT license found in the
	 * LICENSE file in the root directory of this source tree.
	 */

	if ((undefined) !== 'production') {
	  var ReactIs = __webpack_require__(361);

	  // By explicitly using `prop-types` you are opting into new development behavior.
	  // http://fb.me/prop-types-in-prod
	  var throwOnDirectAccess = true;
	  module.exports = __webpack_require__(338)(ReactIs.isElement, throwOnDirectAccess);
	} else {
	  // By explicitly using `prop-types` you are opting into new production behavior.
	  // http://fb.me/prop-types-in-prod
	  module.exports = __webpack_require__(799)();
	}


/***/ }),
/* 213 */
/***/ (function(module, exports) {

	/**
	 * Copyright (c) 2013-present, Facebook, Inc.
	 *
	 * This source code is licensed under the MIT license found in the
	 * LICENSE file in the root directory of this source tree.
	 */

	'use strict';

	var ReactPropTypesSecret = 'SECRET_DO_NOT_PASS_THIS_OR_YOU_WILL_BE_FIRED';

	module.exports = ReactPropTypesSecret;


/***/ }),
/* 214 */
/***/ (function(module, exports, __webpack_require__) {

	/**
	 * Copyright (c) 2013-present, Facebook, Inc.
	 *
	 * This source code is licensed under the MIT license found in the
	 * LICENSE file in the root directory of this source tree.
	 *
	 */

	'use strict';

	var DOMLazyTree = __webpack_require__(95);
	var Danger = __webpack_require__(807);
	var ReactDOMComponentTree = __webpack_require__(21);
	var ReactInstrumentation = __webpack_require__(40);

	var createMicrosoftUnsafeLocalFunction = __webpack_require__(222);
	var setInnerHTML = __webpack_require__(149);
	var setTextContent = __webpack_require__(359);

	function getNodeAfter(parentNode, node) {
	  // Special case for text components, which return [open, close] comments
	  // from getHostNode.
	  if (Array.isArray(node)) {
	    node = node[1];
	  }
	  return node ? node.nextSibling : parentNode.firstChild;
	}

	/**
	 * Inserts `childNode` as a child of `parentNode` at the `index`.
	 *
	 * @param {DOMElement} parentNode Parent node in which to insert.
	 * @param {DOMElement} childNode Child node to insert.
	 * @param {number} index Index at which to insert the child.
	 * @internal
	 */
	var insertChildAt = createMicrosoftUnsafeLocalFunction(function (parentNode, childNode, referenceNode) {
	  // We rely exclusively on `insertBefore(node, null)` instead of also using
	  // `appendChild(node)`. (Using `undefined` is not allowed by all browsers so
	  // we are careful to use `null`.)
	  parentNode.insertBefore(childNode, referenceNode);
	});

	function insertLazyTreeChildAt(parentNode, childTree, referenceNode) {
	  DOMLazyTree.insertTreeBefore(parentNode, childTree, referenceNode);
	}

	function moveChild(parentNode, childNode, referenceNode) {
	  if (Array.isArray(childNode)) {
	    moveDelimitedText(parentNode, childNode[0], childNode[1], referenceNode);
	  } else {
	    insertChildAt(parentNode, childNode, referenceNode);
	  }
	}

	function removeChild(parentNode, childNode) {
	  if (Array.isArray(childNode)) {
	    var closingComment = childNode[1];
	    childNode = childNode[0];
	    removeDelimitedText(parentNode, childNode, closingComment);
	    parentNode.removeChild(closingComment);
	  }
	  parentNode.removeChild(childNode);
	}

	function moveDelimitedText(parentNode, openingComment, closingComment, referenceNode) {
	  var node = openingComment;
	  while (true) {
	    var nextNode = node.nextSibling;
	    insertChildAt(parentNode, node, referenceNode);
	    if (node === closingComment) {
	      break;
	    }
	    node = nextNode;
	  }
	}

	function removeDelimitedText(parentNode, startNode, closingComment) {
	  while (true) {
	    var node = startNode.nextSibling;
	    if (node === closingComment) {
	      // The closing comment is removed by ReactMultiChild.
	      break;
	    } else {
	      parentNode.removeChild(node);
	    }
	  }
	}

	function replaceDelimitedText(openingComment, closingComment, stringText) {
	  var parentNode = openingComment.parentNode;
	  var nodeAfterComment = openingComment.nextSibling;
	  if (nodeAfterComment === closingComment) {
	    // There are no text nodes between the opening and closing comments; insert
	    // a new one if stringText isn't empty.
	    if (stringText) {
	      insertChildAt(parentNode, document.createTextNode(stringText), nodeAfterComment);
	    }
	  } else {
	    if (stringText) {
	      // Set the text content of the first node after the opening comment, and
	      // remove all following nodes up until the closing comment.
	      setTextContent(nodeAfterComment, stringText);
	      removeDelimitedText(parentNode, nodeAfterComment, closingComment);
	    } else {
	      removeDelimitedText(parentNode, openingComment, closingComment);
	    }
	  }

	  if ((undefined) !== 'production') {
	    ReactInstrumentation.debugTool.onHostOperation({
	      instanceID: ReactDOMComponentTree.getInstanceFromNode(openingComment)._debugID,
	      type: 'replace text',
	      payload: stringText
	    });
	  }
	}

	var dangerouslyReplaceNodeWithMarkup = Danger.dangerouslyReplaceNodeWithMarkup;
	if ((undefined) !== 'production') {
	  dangerouslyReplaceNodeWithMarkup = function (oldChild, markup, prevInstance) {
	    Danger.dangerouslyReplaceNodeWithMarkup(oldChild, markup);
	    if (prevInstance._debugID !== 0) {
	      ReactInstrumentation.debugTool.onHostOperation({
	        instanceID: prevInstance._debugID,
	        type: 'replace with',
	        payload: markup.toString()
	      });
	    } else {
	      var nextInstance = ReactDOMComponentTree.getInstanceFromNode(markup.node);
	      if (nextInstance._debugID !== 0) {
	        ReactInstrumentation.debugTool.onHostOperation({
	          instanceID: nextInstance._debugID,
	          type: 'mount',
	          payload: markup.toString()
	        });
	      }
	    }
	  };
	}

	/**
	 * Operations for updating with DOM children.
	 */
	var DOMChildrenOperations = {
	  dangerouslyReplaceNodeWithMarkup: dangerouslyReplaceNodeWithMarkup,

	  replaceDelimitedText: replaceDelimitedText,

	  /**
	   * Updates a component's children by processing a series of updates. The
	   * update configurations are each expected to have a `parentNode` property.
	   *
	   * @param {array<object>} updates List of update configurations.
	   * @internal
	   */
	  processUpdates: function (parentNode, updates) {
	    if ((undefined) !== 'production') {
	      var parentNodeDebugID = ReactDOMComponentTree.getInstanceFromNode(parentNode)._debugID;
	    }

	    for (var k = 0; k < updates.length; k++) {
	      var update = updates[k];
	      switch (update.type) {
	        case 'INSERT_MARKUP':
	          insertLazyTreeChildAt(parentNode, update.content, getNodeAfter(parentNode, update.afterNode));
	          if ((undefined) !== 'production') {
	            ReactInstrumentation.debugTool.onHostOperation({
	              instanceID: parentNodeDebugID,
	              type: 'insert child',
	              payload: {
	                toIndex: update.toIndex,
	                content: update.content.toString()
	              }
	            });
	          }
	          break;
	        case 'MOVE_EXISTING':
	          moveChild(parentNode, update.fromNode, getNodeAfter(parentNode, update.afterNode));
	          if ((undefined) !== 'production') {
	            ReactInstrumentation.debugTool.onHostOperation({
	              instanceID: parentNodeDebugID,
	              type: 'move child',
	              payload: { fromIndex: update.fromIndex, toIndex: update.toIndex }
	            });
	          }
	          break;
	        case 'SET_MARKUP':
	          setInnerHTML(parentNode, update.content);
	          if ((undefined) !== 'production') {
	            ReactInstrumentation.debugTool.onHostOperation({
	              instanceID: parentNodeDebugID,
	              type: 'replace children',
	              payload: update.content.toString()
	            });
	          }
	          break;
	        case 'TEXT_CONTENT':
	          setTextContent(parentNode, update.content);
	          if ((undefined) !== 'production') {
	            ReactInstrumentation.debugTool.onHostOperation({
	              instanceID: parentNodeDebugID,
	              type: 'replace text',
	              payload: update.content.toString()
	            });
	          }
	          break;
	        case 'REMOVE_NODE':
	          removeChild(parentNode, update.fromNode);
	          if ((undefined) !== 'production') {
	            ReactInstrumentation.debugTool.onHostOperation({
	              instanceID: parentNodeDebugID,
	              type: 'remove child',
	              payload: { fromIndex: update.fromIndex }
	            });
	          }
	          break;
	      }
	    }
	  }
	};

	module.exports = DOMChildrenOperations;

/***/ }),
/* 215 */
/***/ (function(module, exports) {

	/**
	 * Copyright (c) 2013-present, Facebook, Inc.
	 *
	 * This source code is licensed under the MIT license found in the
	 * LICENSE file in the root directory of this source tree.
	 *
	 */

	'use strict';

	var DOMNamespaces = {
	  html: 'http://www.w3.org/1999/xhtml',
	  mathml: 'http://www.w3.org/1998/Math/MathML',
	  svg: 'http://www.w3.org/2000/svg'
	};

	module.exports = DOMNamespaces;

/***/ }),
/* 216 */
/***/ (function(module, exports, __webpack_require__) {

	/**
	 * Copyright (c) 2013-present, Facebook, Inc.
	 *
	 * This source code is licensed under the MIT license found in the
	 * LICENSE file in the root directory of this source tree.
	 *
	 */

	'use strict';

	var _prodInvariant = __webpack_require__(13);

	var ReactErrorUtils = __webpack_require__(220);

	var invariant = __webpack_require__(7);
	var warning = __webpack_require__(8);

	/**
	 * Injected dependencies:
	 */

	/**
	 * - `ComponentTree`: [required] Module that can convert between React instances
	 *   and actual node references.
	 */
	var ComponentTree;
	var TreeTraversal;
	var injection = {
	  injectComponentTree: function (Injected) {
	    ComponentTree = Injected;
	    if ((undefined) !== 'production') {
	      (undefined) !== 'production' ? warning(Injected && Injected.getNodeFromInstance && Injected.getInstanceFromNode, 'EventPluginUtils.injection.injectComponentTree(...): Injected ' + 'module is missing getNodeFromInstance or getInstanceFromNode.') : void 0;
	    }
	  },
	  injectTreeTraversal: function (Injected) {
	    TreeTraversal = Injected;
	    if ((undefined) !== 'production') {
	      (undefined) !== 'production' ? warning(Injected && Injected.isAncestor && Injected.getLowestCommonAncestor, 'EventPluginUtils.injection.injectTreeTraversal(...): Injected ' + 'module is missing isAncestor or getLowestCommonAncestor.') : void 0;
	    }
	  }
	};

	function isEndish(topLevelType) {
	  return topLevelType === 'topMouseUp' || topLevelType === 'topTouchEnd' || topLevelType === 'topTouchCancel';
	}

	function isMoveish(topLevelType) {
	  return topLevelType === 'topMouseMove' || topLevelType === 'topTouchMove';
	}
	function isStartish(topLevelType) {
	  return topLevelType === 'topMouseDown' || topLevelType === 'topTouchStart';
	}

	var validateEventDispatches;
	if ((undefined) !== 'production') {
	  validateEventDispatches = function (event) {
	    var dispatchListeners = event._dispatchListeners;
	    var dispatchInstances = event._dispatchInstances;

	    var listenersIsArr = Array.isArray(dispatchListeners);
	    var listenersLen = listenersIsArr ? dispatchListeners.length : dispatchListeners ? 1 : 0;

	    var instancesIsArr = Array.isArray(dispatchInstances);
	    var instancesLen = instancesIsArr ? dispatchInstances.length : dispatchInstances ? 1 : 0;

	    (undefined) !== 'production' ? warning(instancesIsArr === listenersIsArr && instancesLen === listenersLen, 'EventPluginUtils: Invalid `event`.') : void 0;
	  };
	}

	/**
	 * Dispatch the event to the listener.
	 * @param {SyntheticEvent} event SyntheticEvent to handle
	 * @param {boolean} simulated If the event is simulated (changes exn behavior)
	 * @param {function} listener Application-level callback
	 * @param {*} inst Internal component instance
	 */
	function executeDispatch(event, simulated, listener, inst) {
	  var type = event.type || 'unknown-event';
	  event.currentTarget = EventPluginUtils.getNodeFromInstance(inst);
	  if (simulated) {
	    ReactErrorUtils.invokeGuardedCallbackWithCatch(type, listener, event);
	  } else {
	    ReactErrorUtils.invokeGuardedCallback(type, listener, event);
	  }
	  event.currentTarget = null;
	}

	/**
	 * Standard/simple iteration through an event's collected dispatches.
	 */
	function executeDispatchesInOrder(event, simulated) {
	  var dispatchListeners = event._dispatchListeners;
	  var dispatchInstances = event._dispatchInstances;
	  if ((undefined) !== 'production') {
	    validateEventDispatches(event);
	  }
	  if (Array.isArray(dispatchListeners)) {
	    for (var i = 0; i < dispatchListeners.length; i++) {
	      if (event.isPropagationStopped()) {
	        break;
	      }
	      // Listeners and Instances are two parallel arrays that are always in sync.
	      executeDispatch(event, simulated, dispatchListeners[i], dispatchInstances[i]);
	    }
	  } else if (dispatchListeners) {
	    executeDispatch(event, simulated, dispatchListeners, dispatchInstances);
	  }
	  event._dispatchListeners = null;
	  event._dispatchInstances = null;
	}

	/**
	 * Standard/simple iteration through an event's collected dispatches, but stops
	 * at the first dispatch execution returning true, and returns that id.
	 *
	 * @return {?string} id of the first dispatch execution who's listener returns
	 * true, or null if no listener returned true.
	 */
	function executeDispatchesInOrderStopAtTrueImpl(event) {
	  var dispatchListeners = event._dispatchListeners;
	  var dispatchInstances = event._dispatchInstances;
	  if ((undefined) !== 'production') {
	    validateEventDispatches(event);
	  }
	  if (Array.isArray(dispatchListeners)) {
	    for (var i = 0; i < dispatchListeners.length; i++) {
	      if (event.isPropagationStopped()) {
	        break;
	      }
	      // Listeners and Instances are two parallel arrays that are always in sync.
	      if (dispatchListeners[i](event, dispatchInstances[i])) {
	        return dispatchInstances[i];
	      }
	    }
	  } else if (dispatchListeners) {
	    if (dispatchListeners(event, dispatchInstances)) {
	      return dispatchInstances;
	    }
	  }
	  return null;
	}

	/**
	 * @see executeDispatchesInOrderStopAtTrueImpl
	 */
	function executeDispatchesInOrderStopAtTrue(event) {
	  var ret = executeDispatchesInOrderStopAtTrueImpl(event);
	  event._dispatchInstances = null;
	  event._dispatchListeners = null;
	  return ret;
	}

	/**
	 * Execution of a "direct" dispatch - there must be at most one dispatch
	 * accumulated on the event or it is considered an error. It doesn't really make
	 * sense for an event with multiple dispatches (bubbled) to keep track of the
	 * return values at each dispatch execution, but it does tend to make sense when
	 * dealing with "direct" dispatches.
	 *
	 * @return {*} The return value of executing the single dispatch.
	 */
	function executeDirectDispatch(event) {
	  if ((undefined) !== 'production') {
	    validateEventDispatches(event);
	  }
	  var dispatchListener = event._dispatchListeners;
	  var dispatchInstance = event._dispatchInstances;
	  !!Array.isArray(dispatchListener) ? (undefined) !== 'production' ? invariant(false, 'executeDirectDispatch(...): Invalid `event`.') : _prodInvariant('103') : void 0;
	  event.currentTarget = dispatchListener ? EventPluginUtils.getNodeFromInstance(dispatchInstance) : null;
	  var res = dispatchListener ? dispatchListener(event) : null;
	  event.currentTarget = null;
	  event._dispatchListeners = null;
	  event._dispatchInstances = null;
	  return res;
	}

	/**
	 * @param {SyntheticEvent} event
	 * @return {boolean} True iff number of dispatches accumulated is greater than 0.
	 */
	function hasDispatches(event) {
	  return !!event._dispatchListeners;
	}

	/**
	 * General utilities that are useful in creating custom Event Plugins.
	 */
	var EventPluginUtils = {
	  isEndish: isEndish,
	  isMoveish: isMoveish,
	  isStartish: isStartish,

	  executeDirectDispatch: executeDirectDispatch,
	  executeDispatchesInOrder: executeDispatchesInOrder,
	  executeDispatchesInOrderStopAtTrue: executeDispatchesInOrderStopAtTrue,
	  hasDispatches: hasDispatches,

	  getInstanceFromNode: function (node) {
	    return ComponentTree.getInstanceFromNode(node);
	  },
	  getNodeFromInstance: function (node) {
	    return ComponentTree.getNodeFromInstance(node);
	  },
	  isAncestor: function (a, b) {
	    return TreeTraversal.isAncestor(a, b);
	  },
	  getLowestCommonAncestor: function (a, b) {
	    return TreeTraversal.getLowestCommonAncestor(a, b);
	  },
	  getParentInstance: function (inst) {
	    return TreeTraversal.getParentInstance(inst);
	  },
	  traverseTwoPhase: function (target, fn, arg) {
	    return TreeTraversal.traverseTwoPhase(target, fn, arg);
	  },
	  traverseEnterLeave: function (from, to, fn, argFrom, argTo) {
	    return TreeTraversal.traverseEnterLeave(from, to, fn, argFrom, argTo);
	  },

	  injection: injection
	};

	module.exports = EventPluginUtils;

/***/ }),
/* 217 */
/***/ (function(module, exports) {

	/**
	 * Copyright (c) 2013-present, Facebook, Inc.
	 *
	 * This source code is licensed under the MIT license found in the
	 * LICENSE file in the root directory of this source tree.
	 *
	 * 
	 */

	'use strict';

	/**
	 * Escape and wrap key so it is safe to use as a reactid
	 *
	 * @param {string} key to be escaped.
	 * @return {string} the escaped key.
	 */

	function escape(key) {
	  var escapeRegex = /[=:]/g;
	  var escaperLookup = {
	    '=': '=0',
	    ':': '=2'
	  };
	  var escapedString = ('' + key).replace(escapeRegex, function (match) {
	    return escaperLookup[match];
	  });

	  return '$' + escapedString;
	}

	/**
	 * Unescape and unwrap key for human-readable display
	 *
	 * @param {string} key to unescape.
	 * @return {string} the unescaped key.
	 */
	function unescape(key) {
	  var unescapeRegex = /(=0|=2)/g;
	  var unescaperLookup = {
	    '=0': '=',
	    '=2': ':'
	  };
	  var keySubstring = key[0] === '.' && key[1] === '$' ? key.substring(2) : key.substring(1);

	  return ('' + keySubstring).replace(unescapeRegex, function (match) {
	    return unescaperLookup[match];
	  });
	}

	var KeyEscapeUtils = {
	  escape: escape,
	  unescape: unescape
	};

	module.exports = KeyEscapeUtils;

/***/ }),
/* 218 */
/***/ (function(module, exports, __webpack_require__) {

	/**
	 * Copyright (c) 2013-present, Facebook, Inc.
	 *
	 * This source code is licensed under the MIT license found in the
	 * LICENSE file in the root directory of this source tree.
	 *
	 */

	'use strict';

	var _prodInvariant = __webpack_require__(13);

	var ReactPropTypesSecret = __webpack_require__(350);
	var propTypesFactory = __webpack_require__(337);

	var React = __webpack_require__(98);
	var PropTypes = propTypesFactory(React.isValidElement);

	var invariant = __webpack_require__(7);
	var warning = __webpack_require__(8);

	var hasReadOnlyValue = {
	  button: true,
	  checkbox: true,
	  image: true,
	  hidden: true,
	  radio: true,
	  reset: true,
	  submit: true
	};

	function _assertSingleLink(inputProps) {
	  !(inputProps.checkedLink == null || inputProps.valueLink == null) ? (undefined) !== 'production' ? invariant(false, 'Cannot provide a checkedLink and a valueLink. If you want to use checkedLink, you probably don\'t want to use valueLink and vice versa.') : _prodInvariant('87') : void 0;
	}
	function _assertValueLink(inputProps) {
	  _assertSingleLink(inputProps);
	  !(inputProps.value == null && inputProps.onChange == null) ? (undefined) !== 'production' ? invariant(false, 'Cannot provide a valueLink and a value or onChange event. If you want to use value or onChange, you probably don\'t want to use valueLink.') : _prodInvariant('88') : void 0;
	}

	function _assertCheckedLink(inputProps) {
	  _assertSingleLink(inputProps);
	  !(inputProps.checked == null && inputProps.onChange == null) ? (undefined) !== 'production' ? invariant(false, 'Cannot provide a checkedLink and a checked property or onChange event. If you want to use checked or onChange, you probably don\'t want to use checkedLink') : _prodInvariant('89') : void 0;
	}

	var propTypes = {
	  value: function (props, propName, componentName) {
	    if (!props[propName] || hasReadOnlyValue[props.type] || props.onChange || props.readOnly || props.disabled) {
	      return null;
	    }
	    return new Error('You provided a `value` prop to a form field without an ' + '`onChange` handler. This will render a read-only field. If ' + 'the field should be mutable use `defaultValue`. Otherwise, ' + 'set either `onChange` or `readOnly`.');
	  },
	  checked: function (props, propName, componentName) {
	    if (!props[propName] || props.onChange || props.readOnly || props.disabled) {
	      return null;
	    }
	    return new Error('You provided a `checked` prop to a form field without an ' + '`onChange` handler. This will render a read-only field. If ' + 'the field should be mutable use `defaultChecked`. Otherwise, ' + 'set either `onChange` or `readOnly`.');
	  },
	  onChange: PropTypes.func
	};

	var loggedTypeFailures = {};
	function getDeclarationErrorAddendum(owner) {
	  if (owner) {
	    var name = owner.getName();
	    if (name) {
	      return ' Check the render method of `' + name + '`.';
	    }
	  }
	  return '';
	}

	/**
	 * Provide a linked `value` attribute for controlled forms. You should not use
	 * this outside of the ReactDOM controlled form components.
	 */
	var LinkedValueUtils = {
	  checkPropTypes: function (tagName, props, owner) {
	    for (var propName in propTypes) {
	      if (propTypes.hasOwnProperty(propName)) {
	        var error = propTypes[propName](props, propName, tagName, 'prop', null, ReactPropTypesSecret);
	      }
	      if (error instanceof Error && !(error.message in loggedTypeFailures)) {
	        // Only monitor this failure once because there tends to be a lot of the
	        // same error.
	        loggedTypeFailures[error.message] = true;

	        var addendum = getDeclarationErrorAddendum(owner);
	        (undefined) !== 'production' ? warning(false, 'Failed form propType: %s%s', error.message, addendum) : void 0;
	      }
	    }
	  },

	  /**
	   * @param {object} inputProps Props for form component
	   * @return {*} current value of the input either from value prop or link.
	   */
	  getValue: function (inputProps) {
	    if (inputProps.valueLink) {
	      _assertValueLink(inputProps);
	      return inputProps.valueLink.value;
	    }
	    return inputProps.value;
	  },

	  /**
	   * @param {object} inputProps Props for form component
	   * @return {*} current checked status of the input either from checked prop
	   *             or link.
	   */
	  getChecked: function (inputProps) {
	    if (inputProps.checkedLink) {
	      _assertCheckedLink(inputProps);
	      return inputProps.checkedLink.value;
	    }
	    return inputProps.checked;
	  },

	  /**
	   * @param {object} inputProps Props for form component
	   * @param {SyntheticEvent} event change event to handle
	   */
	  executeOnChange: function (inputProps, event) {
	    if (inputProps.valueLink) {
	      _assertValueLink(inputProps);
	      return inputProps.valueLink.requestChange(event.target.value);
	    } else if (inputProps.checkedLink) {
	      _assertCheckedLink(inputProps);
	      return inputProps.checkedLink.requestChange(event.target.checked);
	    } else if (inputProps.onChange) {
	      return inputProps.onChange.call(undefined, event);
	    }
	  }
	};

	module.exports = LinkedValueUtils;

/***/ }),
/* 219 */
/***/ (function(module, exports, __webpack_require__) {

	/**
	 * Copyright (c) 2014-present, Facebook, Inc.
	 *
	 * This source code is licensed under the MIT license found in the
	 * LICENSE file in the root directory of this source tree.
	 *
	 * 
	 */

	'use strict';

	var _prodInvariant = __webpack_require__(13);

	var invariant = __webpack_require__(7);

	var injected = false;

	var ReactComponentEnvironment = {
	  /**
	   * Optionally injectable hook for swapping out mount images in the middle of
	   * the tree.
	   */
	  replaceNodeWithMarkup: null,

	  /**
	   * Optionally injectable hook for processing a queue of child updates. Will
	   * later move into MultiChildComponents.
	   */
	  processChildrenUpdates: null,

	  injection: {
	    injectEnvironment: function (environment) {
	      !!injected ? (undefined) !== 'production' ? invariant(false, 'ReactCompositeComponent: injectEnvironment() can only be called once.') : _prodInvariant('104') : void 0;
	      ReactComponentEnvironment.replaceNodeWithMarkup = environment.replaceNodeWithMarkup;
	      ReactComponentEnvironment.processChildrenUpdates = environment.processChildrenUpdates;
	      injected = true;
	    }
	  }
	};

	module.exports = ReactComponentEnvironment;

/***/ }),
/* 220 */
/***/ (function(module, exports, __webpack_require__) {

	/**
	 * Copyright (c) 2013-present, Facebook, Inc.
	 *
	 * This source code is licensed under the MIT license found in the
	 * LICENSE file in the root directory of this source tree.
	 *
	 * 
	 */

	'use strict';

	var caughtError = null;

	/**
	 * Call a function while guarding against errors that happens within it.
	 *
	 * @param {String} name of the guard to use for logging or debugging
	 * @param {Function} func The function to invoke
	 * @param {*} a First argument
	 * @param {*} b Second argument
	 */
	function invokeGuardedCallback(name, func, a) {
	  try {
	    func(a);
	  } catch (x) {
	    if (caughtError === null) {
	      caughtError = x;
	    }
	  }
	}

	var ReactErrorUtils = {
	  invokeGuardedCallback: invokeGuardedCallback,

	  /**
	   * Invoked by ReactTestUtils.Simulate so that any errors thrown by the event
	   * handler are sure to be rethrown by rethrowCaughtError.
	   */
	  invokeGuardedCallbackWithCatch: invokeGuardedCallback,

	  /**
	   * During execution of guarded functions we will capture the first error which
	   * we will rethrow to be handled by the top level error handler.
	   */
	  rethrowCaughtError: function () {
	    if (caughtError) {
	      var error = caughtError;
	      caughtError = null;
	      throw error;
	    }
	  }
	};

	if ((undefined) !== 'production') {
	  /**
	   * To help development we can get better devtools integration by simulating a
	   * real browser event.
	   */
	  if (typeof window !== 'undefined' && typeof window.dispatchEvent === 'function' && typeof document !== 'undefined' && typeof document.createEvent === 'function') {
	    var fakeNode = document.createElement('react');
	    ReactErrorUtils.invokeGuardedCallback = function (name, func, a) {
	      var boundFunc = function () {
	        func(a);
	      };
	      var evtType = 'react-' + name;
	      fakeNode.addEventListener(evtType, boundFunc, false);
	      var evt = document.createEvent('Event');
	      evt.initEvent(evtType, false, false);
	      fakeNode.dispatchEvent(evt);
	      fakeNode.removeEventListener(evtType, boundFunc, false);
	    };
	  }
	}

	module.exports = ReactErrorUtils;

/***/ }),
/* 221 */
/***/ (function(module, exports, __webpack_require__) {

	/**
	 * Copyright (c) 2015-present, Facebook, Inc.
	 *
	 * This source code is licensed under the MIT license found in the
	 * LICENSE file in the root directory of this source tree.
	 *
	 */

	'use strict';

	var _prodInvariant = __webpack_require__(13);

	var ReactCurrentOwner = __webpack_require__(56);
	var ReactInstanceMap = __webpack_require__(114);
	var ReactInstrumentation = __webpack_require__(40);
	var ReactUpdates = __webpack_require__(55);

	var invariant = __webpack_require__(7);
	var warning = __webpack_require__(8);

	function enqueueUpdate(internalInstance) {
	  ReactUpdates.enqueueUpdate(internalInstance);
	}

	function formatUnexpectedArgument(arg) {
	  var type = typeof arg;
	  if (type !== 'object') {
	    return type;
	  }
	  var displayName = arg.constructor && arg.constructor.name || type;
	  var keys = Object.keys(arg);
	  if (keys.length > 0 && keys.length < 20) {
	    return displayName + ' (keys: ' + keys.join(', ') + ')';
	  }
	  return displayName;
	}

	function getInternalInstanceReadyForUpdate(publicInstance, callerName) {
	  var internalInstance = ReactInstanceMap.get(publicInstance);
	  if (!internalInstance) {
	    if ((undefined) !== 'production') {
	      var ctor = publicInstance.constructor;
	      // Only warn when we have a callerName. Otherwise we should be silent.
	      // We're probably calling from enqueueCallback. We don't want to warn
	      // there because we already warned for the corresponding lifecycle method.
	      (undefined) !== 'production' ? warning(!callerName, '%s(...): Can only update a mounted or mounting component. ' + 'This usually means you called %s() on an unmounted component. ' + 'This is a no-op. Please check the code for the %s component.', callerName, callerName, ctor && (ctor.displayName || ctor.name) || 'ReactClass') : void 0;
	    }
	    return null;
	  }

	  if ((undefined) !== 'production') {
	    (undefined) !== 'production' ? warning(ReactCurrentOwner.current == null, '%s(...): Cannot update during an existing state transition (such as ' + "within `render` or another component's constructor). Render methods " + 'should be a pure function of props and state; constructor ' + 'side-effects are an anti-pattern, but can be moved to ' + '`componentWillMount`.', callerName) : void 0;
	  }

	  return internalInstance;
	}

	/**
	 * ReactUpdateQueue allows for state updates to be scheduled into a later
	 * reconciliation step.
	 */
	var ReactUpdateQueue = {
	  /**
	   * Checks whether or not this composite component is mounted.
	   * @param {ReactClass} publicInstance The instance we want to test.
	   * @return {boolean} True if mounted, false otherwise.
	   * @protected
	   * @final
	   */
	  isMounted: function (publicInstance) {
	    if ((undefined) !== 'production') {
	      var owner = ReactCurrentOwner.current;
	      if (owner !== null) {
	        (undefined) !== 'production' ? warning(owner._warnedAboutRefsInRender, '%s is accessing isMounted inside its render() function. ' + 'render() should be a pure function of props and state. It should ' + 'never access something that requires stale data from the previous ' + 'render, such as refs. Move this logic to componentDidMount and ' + 'componentDidUpdate instead.', owner.getName() || 'A component') : void 0;
	        owner._warnedAboutRefsInRender = true;
	      }
	    }
	    var internalInstance = ReactInstanceMap.get(publicInstance);
	    if (internalInstance) {
	      // During componentWillMount and render this will still be null but after
	      // that will always render to something. At least for now. So we can use
	      // this hack.
	      return !!internalInstance._renderedComponent;
	    } else {
	      return false;
	    }
	  },

	  /**
	   * Enqueue a callback that will be executed after all the pending updates
	   * have processed.
	   *
	   * @param {ReactClass} publicInstance The instance to use as `this` context.
	   * @param {?function} callback Called after state is updated.
	   * @param {string} callerName Name of the calling function in the public API.
	   * @internal
	   */
	  enqueueCallback: function (publicInstance, callback, callerName) {
	    ReactUpdateQueue.validateCallback(callback, callerName);
	    var internalInstance = getInternalInstanceReadyForUpdate(publicInstance);

	    // Previously we would throw an error if we didn't have an internal
	    // instance. Since we want to make it a no-op instead, we mirror the same
	    // behavior we have in other enqueue* methods.
	    // We also need to ignore callbacks in componentWillMount. See
	    // enqueueUpdates.
	    if (!internalInstance) {
	      return null;
	    }

	    if (internalInstance._pendingCallbacks) {
	      internalInstance._pendingCallbacks.push(callback);
	    } else {
	      internalInstance._pendingCallbacks = [callback];
	    }
	    // TODO: The callback here is ignored when setState is called from
	    // componentWillMount. Either fix it or disallow doing so completely in
	    // favor of getInitialState. Alternatively, we can disallow
	    // componentWillMount during server-side rendering.
	    enqueueUpdate(internalInstance);
	  },

	  enqueueCallbackInternal: function (internalInstance, callback) {
	    if (internalInstance._pendingCallbacks) {
	      internalInstance._pendingCallbacks.push(callback);
	    } else {
	      internalInstance._pendingCallbacks = [callback];
	    }
	    enqueueUpdate(internalInstance);
	  },

	  /**
	   * Forces an update. This should only be invoked when it is known with
	   * certainty that we are **not** in a DOM transaction.
	   *
	   * You may want to call this when you know that some deeper aspect of the
	   * component's state has changed but `setState` was not called.
	   *
	   * This will not invoke `shouldComponentUpdate`, but it will invoke
	   * `componentWillUpdate` and `componentDidUpdate`.
	   *
	   * @param {ReactClass} publicInstance The instance that should rerender.
	   * @internal
	   */
	  enqueueForceUpdate: function (publicInstance) {
	    var internalInstance = getInternalInstanceReadyForUpdate(publicInstance, 'forceUpdate');

	    if (!internalInstance) {
	      return;
	    }

	    internalInstance._pendingForceUpdate = true;

	    enqueueUpdate(internalInstance);
	  },

	  /**
	   * Replaces all of the state. Always use this or `setState` to mutate state.
	   * You should treat `this.state` as immutable.
	   *
	   * There is no guarantee that `this.state` will be immediately updated, so
	   * accessing `this.state` after calling this method may return the old value.
	   *
	   * @param {ReactClass} publicInstance The instance that should rerender.
	   * @param {object} completeState Next state.
	   * @internal
	   */
	  enqueueReplaceState: function (publicInstance, completeState, callback) {
	    var internalInstance = getInternalInstanceReadyForUpdate(publicInstance, 'replaceState');

	    if (!internalInstance) {
	      return;
	    }

	    internalInstance._pendingStateQueue = [completeState];
	    internalInstance._pendingReplaceState = true;

	    // Future-proof 15.5
	    if (callback !== undefined && callback !== null) {
	      ReactUpdateQueue.validateCallback(callback, 'replaceState');
	      if (internalInstance._pendingCallbacks) {
	        internalInstance._pendingCallbacks.push(callback);
	      } else {
	        internalInstance._pendingCallbacks = [callback];
	      }
	    }

	    enqueueUpdate(internalInstance);
	  },

	  /**
	   * Sets a subset of the state. This only exists because _pendingState is
	   * internal. This provides a merging strategy that is not available to deep
	   * properties which is confusing. TODO: Expose pendingState or don't use it
	   * during the merge.
	   *
	   * @param {ReactClass} publicInstance The instance that should rerender.
	   * @param {object} partialState Next partial state to be merged with state.
	   * @internal
	   */
	  enqueueSetState: function (publicInstance, partialState) {
	    if ((undefined) !== 'production') {
	      ReactInstrumentation.debugTool.onSetState();
	      (undefined) !== 'production' ? warning(partialState != null, 'setState(...): You passed an undefined or null state object; ' + 'instead, use forceUpdate().') : void 0;
	    }

	    var internalInstance = getInternalInstanceReadyForUpdate(publicInstance, 'setState');

	    if (!internalInstance) {
	      return;
	    }

	    var queue = internalInstance._pendingStateQueue || (internalInstance._pendingStateQueue = []);
	    queue.push(partialState);

	    enqueueUpdate(internalInstance);
	  },

	  enqueueElementInternal: function (internalInstance, nextElement, nextContext) {
	    internalInstance._pendingElement = nextElement;
	    // TODO: introduce _pendingContext instead of setting it directly.
	    internalInstance._context = nextContext;
	    enqueueUpdate(internalInstance);
	  },

	  validateCallback: function (callback, callerName) {
	    !(!callback || typeof callback === 'function') ? (undefined) !== 'production' ? invariant(false, '%s(...): Expected the last optional `callback` argument to be a function. Instead received: %s.', callerName, formatUnexpectedArgument(callback)) : _prodInvariant('122', callerName, formatUnexpectedArgument(callback)) : void 0;
	  }
	};

	module.exports = ReactUpdateQueue;

/***/ }),
/* 222 */
/***/ (function(module, exports) {

	/**
	 * Copyright (c) 2013-present, Facebook, Inc.
	 *
	 * This source code is licensed under the MIT license found in the
	 * LICENSE file in the root directory of this source tree.
	 *
	 */

	/* globals MSApp */

	'use strict';

	/**
	 * Create a function which has 'unsafe' privileges (required by windows8 apps)
	 */

	var createMicrosoftUnsafeLocalFunction = function (func) {
	  if (typeof MSApp !== 'undefined' && MSApp.execUnsafeLocalFunction) {
	    return function (arg0, arg1, arg2, arg3) {
	      MSApp.execUnsafeLocalFunction(function () {
	        return func(arg0, arg1, arg2, arg3);
	      });
	    };
	  } else {
	    return func;
	  }
	};

	module.exports = createMicrosoftUnsafeLocalFunction;

/***/ }),
/* 223 */
/***/ (function(module, exports) {

	/**
	 * Copyright (c) 2013-present, Facebook, Inc.
	 *
	 * This source code is licensed under the MIT license found in the
	 * LICENSE file in the root directory of this source tree.
	 *
	 */

	'use strict';

	/**
	 * `charCode` represents the actual "character code" and is safe to use with
	 * `String.fromCharCode`. As such, only keys that correspond to printable
	 * characters produce a valid `charCode`, the only exception to this is Enter.
	 * The Tab-key is considered non-printable and does not have a `charCode`,
	 * presumably because it does not produce a tab-character in browsers.
	 *
	 * @param {object} nativeEvent Native browser event.
	 * @return {number} Normalized `charCode` property.
	 */

	function getEventCharCode(nativeEvent) {
	  var charCode;
	  var keyCode = nativeEvent.keyCode;

	  if ('charCode' in nativeEvent) {
	    charCode = nativeEvent.charCode;

	    // FF does not set `charCode` for the Enter-key, check against `keyCode`.
	    if (charCode === 0 && keyCode === 13) {
	      charCode = 13;
	    }
	  } else {
	    // IE8 does not implement `charCode`, but `keyCode` has the correct value.
	    charCode = keyCode;
	  }

	  // Some non-printable keys are reported in `charCode`/`keyCode`, discard them.
	  // Must not discard the (non-)printable Enter-key.
	  if (charCode >= 32 || charCode === 13) {
	    return charCode;
	  }

	  return 0;
	}

	module.exports = getEventCharCode;

/***/ }),
/* 224 */
/***/ (function(module, exports) {

	/**
	 * Copyright (c) 2013-present, Facebook, Inc.
	 *
	 * This source code is licensed under the MIT license found in the
	 * LICENSE file in the root directory of this source tree.
	 *
	 */

	'use strict';

	/**
	 * Translation from modifier key to the associated property in the event.
	 * @see http://www.w3.org/TR/DOM-Level-3-Events/#keys-Modifiers
	 */

	var modifierKeyToProp = {
	  Alt: 'altKey',
	  Control: 'ctrlKey',
	  Meta: 'metaKey',
	  Shift: 'shiftKey'
	};

	// IE8 does not implement getModifierState so we simply map it to the only
	// modifier keys exposed by the event itself, does not support Lock-keys.
	// Currently, all major browsers except Chrome seems to support Lock-keys.
	function modifierStateGetter(keyArg) {
	  var syntheticEvent = this;
	  var nativeEvent = syntheticEvent.nativeEvent;
	  if (nativeEvent.getModifierState) {
	    return nativeEvent.getModifierState(keyArg);
	  }
	  var keyProp = modifierKeyToProp[keyArg];
	  return keyProp ? !!nativeEvent[keyProp] : false;
	}

	function getEventModifierState(nativeEvent) {
	  return modifierStateGetter;
	}

	module.exports = getEventModifierState;

/***/ }),
/* 225 */
/***/ (function(module, exports) {

	/**
	 * Copyright (c) 2013-present, Facebook, Inc.
	 *
	 * This source code is licensed under the MIT license found in the
	 * LICENSE file in the root directory of this source tree.
	 *
	 */

	'use strict';

	/**
	 * Gets the target node from a native browser event by accounting for
	 * inconsistencies in browser DOM APIs.
	 *
	 * @param {object} nativeEvent Native browser event.
	 * @return {DOMEventTarget} Target node.
	 */

	function getEventTarget(nativeEvent) {
	  var target = nativeEvent.target || nativeEvent.srcElement || window;

	  // Normalize SVG <use> element events #4963
	  if (target.correspondingUseElement) {
	    target = target.correspondingUseElement;
	  }

	  // Safari may fire events on text nodes (Node.TEXT_NODE is 3).
	  // @see http://www.quirksmode.org/js/events_properties.html
	  return target.nodeType === 3 ? target.parentNode : target;
	}

	module.exports = getEventTarget;

/***/ }),
/* 226 */
/***/ (function(module, exports, __webpack_require__) {

	/**
	 * Copyright (c) 2013-present, Facebook, Inc.
	 *
	 * This source code is licensed under the MIT license found in the
	 * LICENSE file in the root directory of this source tree.
	 *
	 */

	'use strict';

	var ExecutionEnvironment = __webpack_require__(24);

	var useHasFeature;
	if (ExecutionEnvironment.canUseDOM) {
	  useHasFeature = document.implementation && document.implementation.hasFeature &&
	  // always returns true in newer browsers as per the standard.
	  // @see http://dom.spec.whatwg.org/#dom-domimplementation-hasfeature
	  document.implementation.hasFeature('', '') !== true;
	}

	/**
	 * Checks if an event is supported in the current execution environment.
	 *
	 * NOTE: This will not work correctly for non-generic events such as `change`,
	 * `reset`, `load`, `error`, and `select`.
	 *
	 * Borrows from Modernizr.
	 *
	 * @param {string} eventNameSuffix Event name, e.g. "click".
	 * @param {?boolean} capture Check if the capture phase is supported.
	 * @return {boolean} True if the event is supported.
	 * @internal
	 * @license Modernizr 3.0.0pre (Custom Build) | MIT
	 */
	function isEventSupported(eventNameSuffix, capture) {
	  if (!ExecutionEnvironment.canUseDOM || capture && !('addEventListener' in document)) {
	    return false;
	  }

	  var eventName = 'on' + eventNameSuffix;
	  var isSupported = eventName in document;

	  if (!isSupported) {
	    var element = document.createElement('div');
	    element.setAttribute(eventName, 'return;');
	    isSupported = typeof element[eventName] === 'function';
	  }

	  if (!isSupported && useHasFeature && eventNameSuffix === 'wheel') {
	    // This is the only way to test support for the `wheel` event in IE9+.
	    isSupported = document.implementation.hasFeature('Events.wheel', '3.0');
	  }

	  return isSupported;
	}

	module.exports = isEventSupported;

/***/ }),
/* 227 */
/***/ (function(module, exports) {

	/**
	 * Copyright (c) 2013-present, Facebook, Inc.
	 *
	 * This source code is licensed under the MIT license found in the
	 * LICENSE file in the root directory of this source tree.
	 *
	 */

	'use strict';

	/**
	 * Given a `prevElement` and `nextElement`, determines if the existing
	 * instance should be updated as opposed to being destroyed or replaced by a new
	 * instance. Both arguments are elements. This ensures that this logic can
	 * operate on stateless trees without any backing instance.
	 *
	 * @param {?object} prevElement
	 * @param {?object} nextElement
	 * @return {boolean} True if the existing instance should be updated.
	 * @protected
	 */

	function shouldUpdateReactComponent(prevElement, nextElement) {
	  var prevEmpty = prevElement === null || prevElement === false;
	  var nextEmpty = nextElement === null || nextElement === false;
	  if (prevEmpty || nextEmpty) {
	    return prevEmpty === nextEmpty;
	  }

	  var prevType = typeof prevElement;
	  var nextType = typeof nextElement;
	  if (prevType === 'string' || prevType === 'number') {
	    return nextType === 'string' || nextType === 'number';
	  } else {
	    return nextType === 'object' && prevElement.type === nextElement.type && prevElement.key === nextElement.key;
	  }
	}

	module.exports = shouldUpdateReactComponent;

/***/ }),
/* 228 */
/***/ (function(module, exports, __webpack_require__) {

	/**
	 * Copyright (c) 2015-present, Facebook, Inc.
	 *
	 * This source code is licensed under the MIT license found in the
	 * LICENSE file in the root directory of this source tree.
	 *
	 */

	'use strict';

	var _assign = __webpack_require__(19);

	var emptyFunction = __webpack_require__(53);
	var warning = __webpack_require__(8);

	var validateDOMNesting = emptyFunction;

	if ((undefined) !== 'production') {
	  // This validation code was written based on the HTML5 parsing spec:
	  // https://html.spec.whatwg.org/multipage/syntax.html#has-an-element-in-scope
	  //
	  // Note: this does not catch all invalid nesting, nor does it try to (as it's
	  // not clear what practical benefit doing so provides); instead, we warn only
	  // for cases where the parser will give a parse tree differing from what React
	  // intended. For example, <b><div></div></b> is invalid but we don't warn
	  // because it still parses correctly; we do warn for other cases like nested
	  // <p> tags where the beginning of the second element implicitly closes the
	  // first, causing a confusing mess.

	  // https://html.spec.whatwg.org/multipage/syntax.html#special
	  var specialTags = ['address', 'applet', 'area', 'article', 'aside', 'base', 'basefont', 'bgsound', 'blockquote', 'body', 'br', 'button', 'caption', 'center', 'col', 'colgroup', 'dd', 'details', 'dir', 'div', 'dl', 'dt', 'embed', 'fieldset', 'figcaption', 'figure', 'footer', 'form', 'frame', 'frameset', 'h1', 'h2', 'h3', 'h4', 'h5', 'h6', 'head', 'header', 'hgroup', 'hr', 'html', 'iframe', 'img', 'input', 'isindex', 'li', 'link', 'listing', 'main', 'marquee', 'menu', 'menuitem', 'meta', 'nav', 'noembed', 'noframes', 'noscript', 'object', 'ol', 'p', 'param', 'plaintext', 'pre', 'script', 'section', 'select', 'source', 'style', 'summary', 'table', 'tbody', 'td', 'template', 'textarea', 'tfoot', 'th', 'thead', 'title', 'tr', 'track', 'ul', 'wbr', 'xmp'];

	  // https://html.spec.whatwg.org/multipage/syntax.html#has-an-element-in-scope
	  var inScopeTags = ['applet', 'caption', 'html', 'table', 'td', 'th', 'marquee', 'object', 'template',

	  // https://html.spec.whatwg.org/multipage/syntax.html#html-integration-point
	  // TODO: Distinguish by namespace here -- for <title>, including it here
	  // errs on the side of fewer warnings
	  'foreignObject', 'desc', 'title'];

	  // https://html.spec.whatwg.org/multipage/syntax.html#has-an-element-in-button-scope
	  var buttonScopeTags = inScopeTags.concat(['button']);

	  // https://html.spec.whatwg.org/multipage/syntax.html#generate-implied-end-tags
	  var impliedEndTags = ['dd', 'dt', 'li', 'option', 'optgroup', 'p', 'rp', 'rt'];

	  var emptyAncestorInfo = {
	    current: null,

	    formTag: null,
	    aTagInScope: null,
	    buttonTagInScope: null,
	    nobrTagInScope: null,
	    pTagInButtonScope: null,

	    listItemTagAutoclosing: null,
	    dlItemTagAutoclosing: null
	  };

	  var updatedAncestorInfo = function (oldInfo, tag, instance) {
	    var ancestorInfo = _assign({}, oldInfo || emptyAncestorInfo);
	    var info = { tag: tag, instance: instance };

	    if (inScopeTags.indexOf(tag) !== -1) {
	      ancestorInfo.aTagInScope = null;
	      ancestorInfo.buttonTagInScope = null;
	      ancestorInfo.nobrTagInScope = null;
	    }
	    if (buttonScopeTags.indexOf(tag) !== -1) {
	      ancestorInfo.pTagInButtonScope = null;
	    }

	    // See rules for 'li', 'dd', 'dt' start tags in
	    // https://html.spec.whatwg.org/multipage/syntax.html#parsing-main-inbody
	    if (specialTags.indexOf(tag) !== -1 && tag !== 'address' && tag !== 'div' && tag !== 'p') {
	      ancestorInfo.listItemTagAutoclosing = null;
	      ancestorInfo.dlItemTagAutoclosing = null;
	    }

	    ancestorInfo.current = info;

	    if (tag === 'form') {
	      ancestorInfo.formTag = info;
	    }
	    if (tag === 'a') {
	      ancestorInfo.aTagInScope = info;
	    }
	    if (tag === 'button') {
	      ancestorInfo.buttonTagInScope = info;
	    }
	    if (tag === 'nobr') {
	      ancestorInfo.nobrTagInScope = info;
	    }
	    if (tag === 'p') {
	      ancestorInfo.pTagInButtonScope = info;
	    }
	    if (tag === 'li') {
	      ancestorInfo.listItemTagAutoclosing = info;
	    }
	    if (tag === 'dd' || tag === 'dt') {
	      ancestorInfo.dlItemTagAutoclosing = info;
	    }

	    return ancestorInfo;
	  };

	  /**
	   * Returns whether
	   */
	  var isTagValidWithParent = function (tag, parentTag) {
	    // First, let's check if we're in an unusual parsing mode...
	    switch (parentTag) {
	      // https://html.spec.whatwg.org/multipage/syntax.html#parsing-main-inselect
	      case 'select':
	        return tag === 'option' || tag === 'optgroup' || tag === '#text';
	      case 'optgroup':
	        return tag === 'option' || tag === '#text';
	      // Strictly speaking, seeing an <option> doesn't mean we're in a <select>
	      // but
	      case 'option':
	        return tag === '#text';
	      // https://html.spec.whatwg.org/multipage/syntax.html#parsing-main-intd
	      // https://html.spec.whatwg.org/multipage/syntax.html#parsing-main-incaption
	      // No special behavior since these rules fall back to "in body" mode for
	      // all except special table nodes which cause bad parsing behavior anyway.

	      // https://html.spec.whatwg.org/multipage/syntax.html#parsing-main-intr
	      case 'tr':
	        return tag === 'th' || tag === 'td' || tag === 'style' || tag === 'script' || tag === 'template';
	      // https://html.spec.whatwg.org/multipage/syntax.html#parsing-main-intbody
	      case 'tbody':
	      case 'thead':
	      case 'tfoot':
	        return tag === 'tr' || tag === 'style' || tag === 'script' || tag === 'template';
	      // https://html.spec.whatwg.org/multipage/syntax.html#parsing-main-incolgroup
	      case 'colgroup':
	        return tag === 'col' || tag === 'template';
	      // https://html.spec.whatwg.org/multipage/syntax.html#parsing-main-intable
	      case 'table':
	        return tag === 'caption' || tag === 'colgroup' || tag === 'tbody' || tag === 'tfoot' || tag === 'thead' || tag === 'style' || tag === 'script' || tag === 'template';
	      // https://html.spec.whatwg.org/multipage/syntax.html#parsing-main-inhead
	      case 'head':
	        return tag === 'base' || tag === 'basefont' || tag === 'bgsound' || tag === 'link' || tag === 'meta' || tag === 'title' || tag === 'noscript' || tag === 'noframes' || tag === 'style' || tag === 'script' || tag === 'template';
	      // https://html.spec.whatwg.org/multipage/semantics.html#the-html-element
	      case 'html':
	        return tag === 'head' || tag === 'body';
	      case '#document':
	        return tag === 'html';
	    }

	    // Probably in the "in body" parsing mode, so we outlaw only tag combos
	    // where the parsing rules cause implicit opens or closes to be added.
	    // https://html.spec.whatwg.org/multipage/syntax.html#parsing-main-inbody
	    switch (tag) {
	      case 'h1':
	      case 'h2':
	      case 'h3':
	      case 'h4':
	      case 'h5':
	      case 'h6':
	        return parentTag !== 'h1' && parentTag !== 'h2' && parentTag !== 'h3' && parentTag !== 'h4' && parentTag !== 'h5' && parentTag !== 'h6';

	      case 'rp':
	      case 'rt':
	        return impliedEndTags.indexOf(parentTag) === -1;

	      case 'body':
	      case 'caption':
	      case 'col':
	      case 'colgroup':
	      case 'frame':
	      case 'head':
	      case 'html':
	      case 'tbody':
	      case 'td':
	      case 'tfoot':
	      case 'th':
	      case 'thead':
	      case 'tr':
	        // These tags are only valid with a few parents that have special child
	        // parsing rules -- if we're down here, then none of those matched and
	        // so we allow it only if we don't know what the parent is, as all other
	        // cases are invalid.
	        return parentTag == null;
	    }

	    return true;
	  };

	  /**
	   * Returns whether
	   */
	  var findInvalidAncestorForTag = function (tag, ancestorInfo) {
	    switch (tag) {
	      case 'address':
	      case 'article':
	      case 'aside':
	      case 'blockquote':
	      case 'center':
	      case 'details':
	      case 'dialog':
	      case 'dir':
	      case 'div':
	      case 'dl':
	      case 'fieldset':
	      case 'figcaption':
	      case 'figure':
	      case 'footer':
	      case 'header':
	      case 'hgroup':
	      case 'main':
	      case 'menu':
	      case 'nav':
	      case 'ol':
	      case 'p':
	      case 'section':
	      case 'summary':
	      case 'ul':
	      case 'pre':
	      case 'listing':
	      case 'table':
	      case 'hr':
	      case 'xmp':
	      case 'h1':
	      case 'h2':
	      case 'h3':
	      case 'h4':
	      case 'h5':
	      case 'h6':
	        return ancestorInfo.pTagInButtonScope;

	      case 'form':
	        return ancestorInfo.formTag || ancestorInfo.pTagInButtonScope;

	      case 'li':
	        return ancestorInfo.listItemTagAutoclosing;

	      case 'dd':
	      case 'dt':
	        return ancestorInfo.dlItemTagAutoclosing;

	      case 'button':
	        return ancestorInfo.buttonTagInScope;

	      case 'a':
	        // Spec says something about storing a list of markers, but it sounds
	        // equivalent to this check.
	        return ancestorInfo.aTagInScope;

	      case 'nobr':
	        return ancestorInfo.nobrTagInScope;
	    }

	    return null;
	  };

	  /**
	   * Given a ReactCompositeComponent instance, return a list of its recursive
	   * owners, starting at the root and ending with the instance itself.
	   */
	  var findOwnerStack = function (instance) {
	    if (!instance) {
	      return [];
	    }

	    var stack = [];
	    do {
	      stack.push(instance);
	    } while (instance = instance._currentElement._owner);
	    stack.reverse();
	    return stack;
	  };

	  var didWarn = {};

	  validateDOMNesting = function (childTag, childText, childInstance, ancestorInfo) {
	    ancestorInfo = ancestorInfo || emptyAncestorInfo;
	    var parentInfo = ancestorInfo.current;
	    var parentTag = parentInfo && parentInfo.tag;

	    if (childText != null) {
	      (undefined) !== 'production' ? warning(childTag == null, 'validateDOMNesting: when childText is passed, childTag should be null') : void 0;
	      childTag = '#text';
	    }

	    var invalidParent = isTagValidWithParent(childTag, parentTag) ? null : parentInfo;
	    var invalidAncestor = invalidParent ? null : findInvalidAncestorForTag(childTag, ancestorInfo);
	    var problematic = invalidParent || invalidAncestor;

	    if (problematic) {
	      var ancestorTag = problematic.tag;
	      var ancestorInstance = problematic.instance;

	      var childOwner = childInstance && childInstance._currentElement._owner;
	      var ancestorOwner = ancestorInstance && ancestorInstance._currentElement._owner;

	      var childOwners = findOwnerStack(childOwner);
	      var ancestorOwners = findOwnerStack(ancestorOwner);

	      var minStackLen = Math.min(childOwners.length, ancestorOwners.length);
	      var i;

	      var deepestCommon = -1;
	      for (i = 0; i < minStackLen; i++) {
	        if (childOwners[i] === ancestorOwners[i]) {
	          deepestCommon = i;
	        } else {
	          break;
	        }
	      }

	      var UNKNOWN = '(unknown)';
	      var childOwnerNames = childOwners.slice(deepestCommon + 1).map(function (inst) {
	        return inst.getName() || UNKNOWN;
	      });
	      var ancestorOwnerNames = ancestorOwners.slice(deepestCommon + 1).map(function (inst) {
	        return inst.getName() || UNKNOWN;
	      });
	      var ownerInfo = [].concat(
	      // If the parent and child instances have a common owner ancestor, start
	      // with that -- otherwise we just start with the parent's owners.
	      deepestCommon !== -1 ? childOwners[deepestCommon].getName() || UNKNOWN : [], ancestorOwnerNames, ancestorTag,
	      // If we're warning about an invalid (non-parent) ancestry, add '...'
	      invalidAncestor ? ['...'] : [], childOwnerNames, childTag).join(' > ');

	      var warnKey = !!invalidParent + '|' + childTag + '|' + ancestorTag + '|' + ownerInfo;
	      if (didWarn[warnKey]) {
	        return;
	      }
	      didWarn[warnKey] = true;

	      var tagDisplayName = childTag;
	      var whitespaceInfo = '';
	      if (childTag === '#text') {
	        if (/\S/.test(childText)) {
	          tagDisplayName = 'Text nodes';
	        } else {
	          tagDisplayName = 'Whitespace text nodes';
	          whitespaceInfo = " Make sure you don't have any extra whitespace between tags on " + 'each line of your source code.';
	        }
	      } else {
	        tagDisplayName = '<' + childTag + '>';
	      }

	      if (invalidParent) {
	        var info = '';
	        if (ancestorTag === 'table' && childTag === 'tr') {
	          info += ' Add a <tbody> to your code to match the DOM tree generated by ' + 'the browser.';
	        }
	        (undefined) !== 'production' ? warning(false, 'validateDOMNesting(...): %s cannot appear as a child of <%s>.%s ' + 'See %s.%s', tagDisplayName, ancestorTag, whitespaceInfo, ownerInfo, info) : void 0;
	      } else {
	        (undefined) !== 'production' ? warning(false, 'validateDOMNesting(...): %s cannot appear as a descendant of ' + '<%s>. See %s.', tagDisplayName, ancestorTag, ownerInfo) : void 0;
	      }
	    }
	  };

	  validateDOMNesting.updatedAncestorInfo = updatedAncestorInfo;

	  // For testing
	  validateDOMNesting.isTagValidInContext = function (tag, ancestorInfo) {
	    ancestorInfo = ancestorInfo || emptyAncestorInfo;
	    var parentInfo = ancestorInfo.current;
	    var parentTag = parentInfo && parentInfo.tag;
	    return isTagValidWithParent(tag, parentTag) && !findInvalidAncestorForTag(tag, ancestorInfo);
	  };
	}

	module.exports = validateDOMNesting;

/***/ }),
/* 229 */
/***/ (function(module, exports) {

	"use strict";

	exports.__esModule = true;
	exports.loopAsync = loopAsync;
	exports.mapAsync = mapAsync;
	function loopAsync(turns, work, callback) {
	  var currentTurn = 0,
	      isDone = false;
	  var sync = false,
	      hasNext = false,
	      doneArgs = void 0;

	  function done() {
	    isDone = true;
	    if (sync) {
	      // Iterate instead of recursing if possible.
	      doneArgs = [].concat(Array.prototype.slice.call(arguments));
	      return;
	    }

	    callback.apply(this, arguments);
	  }

	  function next() {
	    if (isDone) {
	      return;
	    }

	    hasNext = true;
	    if (sync) {
	      // Iterate instead of recursing if possible.
	      return;
	    }

	    sync = true;

	    while (!isDone && currentTurn < turns && hasNext) {
	      hasNext = false;
	      work.call(this, currentTurn++, next, done);
	    }

	    sync = false;

	    if (isDone) {
	      // This means the loop finished synchronously.
	      callback.apply(this, doneArgs);
	      return;
	    }

	    if (currentTurn >= turns && hasNext) {
	      isDone = true;
	      callback();
	    }
	  }

	  next();
	}

	function mapAsync(array, work, callback) {
	  var length = array.length;
	  var values = [];

	  if (length === 0) return callback(null, values);

	  var isDone = false,
	      doneCount = 0;

	  function done(index, error, value) {
	    if (isDone) return;

	    if (error) {
	      isDone = true;
	      callback(error);
	    } else {
	      values[index] = value;

	      isDone = ++doneCount === length;

	      if (isDone) callback(null, values);
	    }
	  }

	  array.forEach(function (item, index) {
	    work(item, index, function (error, value) {
	      done(index, error, value);
	    });
	  });
	}

/***/ }),
/* 230 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';

	exports.__esModule = true;
	exports.router = exports.routes = exports.route = exports.components = exports.component = exports.location = exports.history = exports.falsy = exports.locationShape = exports.routerShape = undefined;

	var _react = __webpack_require__(4);

	var _deprecateObjectProperties = __webpack_require__(151);

	var _deprecateObjectProperties2 = _interopRequireDefault(_deprecateObjectProperties);

	var _InternalPropTypes = __webpack_require__(84);

	var InternalPropTypes = _interopRequireWildcard(_InternalPropTypes);

	var _routerWarning = __webpack_require__(25);

	var _routerWarning2 = _interopRequireDefault(_routerWarning);

	function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj.default = obj; return newObj; } }

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

	var func = _react.PropTypes.func;
	var object = _react.PropTypes.object;
	var shape = _react.PropTypes.shape;
	var string = _react.PropTypes.string;
	var routerShape = exports.routerShape = shape({
	  push: func.isRequired,
	  replace: func.isRequired,
	  go: func.isRequired,
	  goBack: func.isRequired,
	  goForward: func.isRequired,
	  setRouteLeaveHook: func.isRequired,
	  isActive: func.isRequired
	});

	var locationShape = exports.locationShape = shape({
	  pathname: string.isRequired,
	  search: string.isRequired,
	  state: object,
	  action: string.isRequired,
	  key: string
	});

	// Deprecated stuff below:

	var falsy = exports.falsy = InternalPropTypes.falsy;
	var history = exports.history = InternalPropTypes.history;
	var location = exports.location = locationShape;
	var component = exports.component = InternalPropTypes.component;
	var components = exports.components = InternalPropTypes.components;
	var route = exports.route = InternalPropTypes.route;
	var routes = exports.routes = InternalPropTypes.routes;
	var router = exports.router = routerShape;

	if ((undefined) !== 'production') {
	  (function () {
	    var deprecatePropType = function deprecatePropType(propType, message) {
	      return function () {
	        (undefined) !== 'production' ? (0, _routerWarning2.default)(false, message) : void 0;
	        return propType.apply(undefined, arguments);
	      };
	    };

	    var deprecateInternalPropType = function deprecateInternalPropType(propType) {
	      return deprecatePropType(propType, 'This prop type is not intended for external use, and was previously exported by mistake. These internal prop types are deprecated for external use, and will be removed in a later version.');
	    };

	    var deprecateRenamedPropType = function deprecateRenamedPropType(propType, name) {
	      return deprecatePropType(propType, 'The `' + name + '` prop type is now exported as `' + name + 'Shape` to avoid name conflicts. This export is deprecated and will be removed in a later version.');
	    };

	    exports.falsy = falsy = deprecateInternalPropType(falsy);
	    exports.history = history = deprecateInternalPropType(history);
	    exports.component = component = deprecateInternalPropType(component);
	    exports.components = components = deprecateInternalPropType(components);
	    exports.route = route = deprecateInternalPropType(route);
	    exports.routes = routes = deprecateInternalPropType(routes);

	    exports.location = location = deprecateRenamedPropType(location, 'location');
	    exports.router = router = deprecateRenamedPropType(router, 'router');
	  })();
	}

	var defaultExport = {
	  falsy: falsy,
	  history: history,
	  location: location,
	  component: component,
	  components: components,
	  route: route,
	  // For some reason, routes was never here.
	  router: router
	};

	if ((undefined) !== 'production') {
	  defaultExport = (0, _deprecateObjectProperties2.default)(defaultExport, 'The default export from `react-router/lib/PropTypes` is deprecated. Please use the named exports instead.');
	}

	exports.default = defaultExport;

/***/ }),
/* 231 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';

	exports.__esModule = true;

	var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

	exports.default = createTransitionManager;

	var _routerWarning = __webpack_require__(25);

	var _routerWarning2 = _interopRequireDefault(_routerWarning);

	var _computeChangedRoutes2 = __webpack_require__(899);

	var _computeChangedRoutes3 = _interopRequireDefault(_computeChangedRoutes2);

	var _TransitionUtils = __webpack_require__(896);

	var _isActive2 = __webpack_require__(903);

	var _isActive3 = _interopRequireDefault(_isActive2);

	var _getComponents = __webpack_require__(900);

	var _getComponents2 = _interopRequireDefault(_getComponents);

	var _matchRoutes = __webpack_require__(905);

	var _matchRoutes2 = _interopRequireDefault(_matchRoutes);

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

	function hasAnyProperties(object) {
	  for (var p in object) {
	    if (Object.prototype.hasOwnProperty.call(object, p)) return true;
	  }return false;
	}

	function createTransitionManager(history, routes) {
	  var state = {};

	  // Signature should be (location, indexOnly), but needs to support (path,
	  // query, indexOnly)
	  function isActive(location) {
	    var indexOnlyOrDeprecatedQuery = arguments.length <= 1 || arguments[1] === undefined ? false : arguments[1];
	    var deprecatedIndexOnly = arguments.length <= 2 || arguments[2] === undefined ? null : arguments[2];

	    var indexOnly = void 0;
	    if (indexOnlyOrDeprecatedQuery && indexOnlyOrDeprecatedQuery !== true || deprecatedIndexOnly !== null) {
	      (undefined) !== 'production' ? (0, _routerWarning2.default)(false, '`isActive(pathname, query, indexOnly) is deprecated; use `isActive(location, indexOnly)` with a location descriptor instead. http://tiny.cc/router-isActivedeprecated') : void 0;
	      location = { pathname: location, query: indexOnlyOrDeprecatedQuery };
	      indexOnly = deprecatedIndexOnly || false;
	    } else {
	      location = history.createLocation(location);
	      indexOnly = indexOnlyOrDeprecatedQuery;
	    }

	    return (0, _isActive3.default)(location, indexOnly, state.location, state.routes, state.params);
	  }

	  var partialNextState = void 0;

	  function match(location, callback) {
	    if (partialNextState && partialNextState.location === location) {
	      // Continue from where we left off.
	      finishMatch(partialNextState, callback);
	    } else {
	      (0, _matchRoutes2.default)(routes, location, function (error, nextState) {
	        if (error) {
	          callback(error);
	        } else if (nextState) {
	          finishMatch(_extends({}, nextState, { location: location }), callback);
	        } else {
	          callback();
	        }
	      });
	    }
	  }

	  function finishMatch(nextState, callback) {
	    var _computeChangedRoutes = (0, _computeChangedRoutes3.default)(state, nextState);

	    var leaveRoutes = _computeChangedRoutes.leaveRoutes;
	    var changeRoutes = _computeChangedRoutes.changeRoutes;
	    var enterRoutes = _computeChangedRoutes.enterRoutes;


	    (0, _TransitionUtils.runLeaveHooks)(leaveRoutes, state);

	    // Tear down confirmation hooks for left routes
	    leaveRoutes.filter(function (route) {
	      return enterRoutes.indexOf(route) === -1;
	    }).forEach(removeListenBeforeHooksForRoute);

	    // change and enter hooks are run in series
	    (0, _TransitionUtils.runChangeHooks)(changeRoutes, state, nextState, function (error, redirectInfo) {
	      if (error || redirectInfo) return handleErrorOrRedirect(error, redirectInfo);

	      (0, _TransitionUtils.runEnterHooks)(enterRoutes, nextState, finishEnterHooks);
	    });

	    function finishEnterHooks(error, redirectInfo) {
	      if (error || redirectInfo) return handleErrorOrRedirect(error, redirectInfo);

	      // TODO: Fetch components after state is updated.
	      (0, _getComponents2.default)(nextState, function (error, components) {
	        if (error) {
	          callback(error);
	        } else {
	          // TODO: Make match a pure function and have some other API
	          // for "match and update state".
	          callback(null, null, state = _extends({}, nextState, { components: components }));
	        }
	      });
	    }

	    function handleErrorOrRedirect(error, redirectInfo) {
	      if (error) callback(error);else callback(null, redirectInfo);
	    }
	  }

	  var RouteGuid = 1;

	  function getRouteID(route) {
	    var create = arguments.length <= 1 || arguments[1] === undefined ? true : arguments[1];

	    return route.__id__ || create && (route.__id__ = RouteGuid++);
	  }

	  var RouteHooks = Object.create(null);

	  function getRouteHooksForRoutes(routes) {
	    return routes.reduce(function (hooks, route) {
	      hooks.push.apply(hooks, RouteHooks[getRouteID(route)]);
	      return hooks;
	    }, []);
	  }

	  function transitionHook(location, callback) {
	    (0, _matchRoutes2.default)(routes, location, function (error, nextState) {
	      if (nextState == null) {
	        // TODO: We didn't actually match anything, but hang
	        // onto error/nextState so we don't have to matchRoutes
	        // again in the listen callback.
	        callback();
	        return;
	      }

	      // Cache some state here so we don't have to
	      // matchRoutes() again in the listen callback.
	      partialNextState = _extends({}, nextState, { location: location });

	      var hooks = getRouteHooksForRoutes((0, _computeChangedRoutes3.default)(state, partialNextState).leaveRoutes);

	      var result = void 0;
	      for (var i = 0, len = hooks.length; result == null && i < len; ++i) {
	        // Passing the location arg here indicates to
	        // the user that this is a transition hook.
	        result = hooks[i](location);
	      }

	      callback(result);
	    });
	  }

	  /* istanbul ignore next: untestable with Karma */
	  function beforeUnloadHook() {
	    // Synchronously check to see if any route hooks want
	    // to prevent the current window/tab from closing.
	    if (state.routes) {
	      var hooks = getRouteHooksForRoutes(state.routes);

	      var message = void 0;
	      for (var i = 0, len = hooks.length; typeof message !== 'string' && i < len; ++i) {
	        // Passing no args indicates to the user that this is a
	        // beforeunload hook. We don't know the next location.
	        message = hooks[i]();
	      }

	      return message;
	    }
	  }

	  var unlistenBefore = void 0,
	      unlistenBeforeUnload = void 0;

	  function removeListenBeforeHooksForRoute(route) {
	    var routeID = getRouteID(route, false);
	    if (!routeID) {
	      return;
	    }

	    delete RouteHooks[routeID];

	    if (!hasAnyProperties(RouteHooks)) {
	      // teardown transition & beforeunload hooks
	      if (unlistenBefore) {
	        unlistenBefore();
	        unlistenBefore = null;
	      }

	      if (unlistenBeforeUnload) {
	        unlistenBeforeUnload();
	        unlistenBeforeUnload = null;
	      }
	    }
	  }

	  /**
	   * Registers the given hook function to run before leaving the given route.
	   *
	   * During a normal transition, the hook function receives the next location
	   * as its only argument and can return either a prompt message (string) to show the user,
	   * to make sure they want to leave the page; or `false`, to prevent the transition.
	   * Any other return value will have no effect.
	   *
	   * During the beforeunload event (in browsers) the hook receives no arguments.
	   * In this case it must return a prompt message to prevent the transition.
	   *
	   * Returns a function that may be used to unbind the listener.
	   */
	  function listenBeforeLeavingRoute(route, hook) {
	    // TODO: Warn if they register for a route that isn't currently
	    // active. They're probably doing something wrong, like re-creating
	    // route objects on every location change.
	    var routeID = getRouteID(route);
	    var hooks = RouteHooks[routeID];

	    if (!hooks) {
	      var thereWereNoRouteHooks = !hasAnyProperties(RouteHooks);

	      RouteHooks[routeID] = [hook];

	      if (thereWereNoRouteHooks) {
	        // setup transition & beforeunload hooks
	        unlistenBefore = history.listenBefore(transitionHook);

	        if (history.listenBeforeUnload) unlistenBeforeUnload = history.listenBeforeUnload(beforeUnloadHook);
	      }
	    } else {
	      if (hooks.indexOf(hook) === -1) {
	        (undefined) !== 'production' ? (0, _routerWarning2.default)(false, 'adding multiple leave hooks for the same route is deprecated; manage multiple confirmations in your own code instead') : void 0;

	        hooks.push(hook);
	      }
	    }

	    return function () {
	      var hooks = RouteHooks[routeID];

	      if (hooks) {
	        var newHooks = hooks.filter(function (item) {
	          return item !== hook;
	        });

	        if (newHooks.length === 0) {
	          removeListenBeforeHooksForRoute(route);
	        } else {
	          RouteHooks[routeID] = newHooks;
	        }
	      }
	    };
	  }

	  /**
	   * This is the API for stateful environments. As the location
	   * changes, we update state and call the listener. We can also
	   * gracefully handle errors and redirects.
	   */
	  function listen(listener) {
	    // TODO: Only use a single history listener. Otherwise we'll
	    // end up with multiple concurrent calls to match.
	    return history.listen(function (location) {
	      if (state.location === location) {
	        listener(null, state);
	      } else {
	        match(location, function (error, redirectLocation, nextState) {
	          if (error) {
	            listener(error);
	          } else if (redirectLocation) {
	            history.replace(redirectLocation);
	          } else if (nextState) {
	            listener(null, nextState);
	          } else {
	            (undefined) !== 'production' ? (0, _routerWarning2.default)(false, 'Location "%s" did not match any routes', location.pathname + location.search + location.hash) : void 0;
	          }
	        });
	      }
	    });
	  }

	  return {
	    isActive: isActive,
	    match: match,
	    listenBeforeLeavingRoute: listenBeforeLeavingRoute,
	    listen: listen
	  };
	}

	//export default useRoutes

	module.exports = exports['default'];

/***/ }),
/* 232 */
/***/ (function(module, exports, __webpack_require__) {

	/**
	 * Copyright (c) 2014-present, Facebook, Inc.
	 *
	 * This source code is licensed under the MIT license found in the
	 * LICENSE file in the root directory of this source tree.
	 *
	 */

	'use strict';

	/**
	 * Forked from fbjs/warning:
	 * https://github.com/facebook/fbjs/blob/e66ba20ad5be433eb54423f2b097d829324d9de6/packages/fbjs/src/__forks__/warning.js
	 *
	 * Only change is we use console.warn instead of console.error,
	 * and do nothing when 'console' is not supported.
	 * This really simplifies the code.
	 * ---
	 * Similar to invariant but only logs a warning if the condition is not met.
	 * This can be used to log issues in development environments in critical
	 * paths. Removing the logging code for production environments will keep the
	 * same logic and follow the same code paths.
	 */

	var lowPriorityWarning = function () {};

	if ((undefined) !== 'production') {
	  var printWarning = function (format) {
	    for (var _len = arguments.length, args = Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
	      args[_key - 1] = arguments[_key];
	    }

	    var argIndex = 0;
	    var message = 'Warning: ' + format.replace(/%s/g, function () {
	      return args[argIndex++];
	    });
	    if (typeof console !== 'undefined') {
	      console.warn(message);
	    }
	    try {
	      // --- Welcome to debugging React ---
	      // This error was thrown as a convenience so that you can use this stack
	      // to find the callsite that caused this warning to fire.
	      throw new Error(message);
	    } catch (x) {}
	  };

	  lowPriorityWarning = function (condition, format) {
	    if (format === undefined) {
	      throw new Error('`warning(condition, format, ...args)` requires a warning ' + 'message argument');
	    }
	    if (!condition) {
	      for (var _len2 = arguments.length, args = Array(_len2 > 2 ? _len2 - 2 : 0), _key2 = 2; _key2 < _len2; _key2++) {
	        args[_key2 - 2] = arguments[_key2];
	      }

	      printWarning.apply(undefined, [format].concat(args));
	    }
	  };
	}

	module.exports = lowPriorityWarning;

/***/ }),
/* 233 */
/***/ (function(module, exports, __webpack_require__) {

	/**
	 * Autogenerated by Avro
	 * 
	 * DO NOT EDIT DIRECTLY
	 */


	/**
	* @constructor
	* @memberof base
	*/
	var CardData = function() {
	  this._class_ = CardData;
	  this.track1 = undefined;
	  this.track2 = undefined;
	  this.track3 = undefined;
	  this.encrypted = undefined;
	  this.maskedTrack1 = undefined;
	  this.maskedTrack2 = undefined;
	  this.maskedTrack3 = undefined;
	  this.pan = undefined;
	  this.cardholderName = undefined;
	  this.firstName = undefined;
	  this.lastName = undefined;
	  this.exp = undefined;
	  this.last4 = undefined;
	  this.first6 = undefined;
	};


	/**
	* Set the field value
	* The track1 data from the card.
	*
	* @memberof base.CardData
	* @param {String} track1 
	*/
	CardData.prototype.setTrack1 = function(track1) {
	  this.track1 = track1;
	};

	/**
	* Get the field value
	* The track1 data from the card.
	* @memberof base.CardData
	* @return {String} 
	*/
	CardData.prototype.getTrack1 = function() {
	  return this.track1;
	};

	/**
	* Set the field value
	* The track2 data from the card.
	*
	* @memberof base.CardData
	* @param {String} track2 
	*/
	CardData.prototype.setTrack2 = function(track2) {
	  this.track2 = track2;
	};

	/**
	* Get the field value
	* The track2 data from the card.
	* @memberof base.CardData
	* @return {String} 
	*/
	CardData.prototype.getTrack2 = function() {
	  return this.track2;
	};

	/**
	* Set the field value
	* The track3 data from the card.
	*
	* @memberof base.CardData
	* @param {String} track3 
	*/
	CardData.prototype.setTrack3 = function(track3) {
	  this.track3 = track3;
	};

	/**
	* Get the field value
	* The track3 data from the card.
	* @memberof base.CardData
	* @return {String} 
	*/
	CardData.prototype.getTrack3 = function() {
	  return this.track3;
	};

	/**
	* Set the field value
	* Indicates if the data is encrypted.
	*
	* @memberof base.CardData
	* @param {Boolean} encrypted 
	*/
	CardData.prototype.setEncrypted = function(encrypted) {
	  this.encrypted = encrypted;
	};

	/**
	* Get the field value
	* Indicates if the data is encrypted.
	* @memberof base.CardData
	* @return {Boolean} 
	*/
	CardData.prototype.getEncrypted = function() {
	  return this.encrypted;
	};

	/**
	* Set the field value
	* The track1 data from the card.
	*
	* @memberof base.CardData
	* @param {String} maskedTrack1 
	*/
	CardData.prototype.setMaskedTrack1 = function(maskedTrack1) {
	  this.maskedTrack1 = maskedTrack1;
	};

	/**
	* Get the field value
	* The track1 data from the card.
	* @memberof base.CardData
	* @return {String} 
	*/
	CardData.prototype.getMaskedTrack1 = function() {
	  return this.maskedTrack1;
	};

	/**
	* Set the field value
	* The track2 data from the card.
	*
	* @memberof base.CardData
	* @param {String} maskedTrack2 
	*/
	CardData.prototype.setMaskedTrack2 = function(maskedTrack2) {
	  this.maskedTrack2 = maskedTrack2;
	};

	/**
	* Get the field value
	* The track2 data from the card.
	* @memberof base.CardData
	* @return {String} 
	*/
	CardData.prototype.getMaskedTrack2 = function() {
	  return this.maskedTrack2;
	};

	/**
	* Set the field value
	* The track3 data from the card.
	*
	* @memberof base.CardData
	* @param {String} maskedTrack3 
	*/
	CardData.prototype.setMaskedTrack3 = function(maskedTrack3) {
	  this.maskedTrack3 = maskedTrack3;
	};

	/**
	* Get the field value
	* The track3 data from the card.
	* @memberof base.CardData
	* @return {String} 
	*/
	CardData.prototype.getMaskedTrack3 = function() {
	  return this.maskedTrack3;
	};

	/**
	* Set the field value
	* The pan data from the card.
	*
	* @memberof base.CardData
	* @param {String} pan 
	*/
	CardData.prototype.setPan = function(pan) {
	  this.pan = pan;
	};

	/**
	* Get the field value
	* The pan data from the card.
	* @memberof base.CardData
	* @return {String} 
	*/
	CardData.prototype.getPan = function() {
	  return this.pan;
	};

	/**
	* Set the field value
	* The cardholderName data from the card.
	*
	* @memberof base.CardData
	* @param {String} cardholderName 
	*/
	CardData.prototype.setCardholderName = function(cardholderName) {
	  this.cardholderName = cardholderName;
	};

	/**
	* Get the field value
	* The cardholderName data from the card.
	* @memberof base.CardData
	* @return {String} 
	*/
	CardData.prototype.getCardholderName = function() {
	  return this.cardholderName;
	};

	/**
	* Set the field value
	* The firstName data from the card.
	*
	* @memberof base.CardData
	* @param {String} firstName 
	*/
	CardData.prototype.setFirstName = function(firstName) {
	  this.firstName = firstName;
	};

	/**
	* Get the field value
	* The firstName data from the card.
	* @memberof base.CardData
	* @return {String} 
	*/
	CardData.prototype.getFirstName = function() {
	  return this.firstName;
	};

	/**
	* Set the field value
	* The lastName data from the card.
	*
	* @memberof base.CardData
	* @param {String} lastName 
	*/
	CardData.prototype.setLastName = function(lastName) {
	  this.lastName = lastName;
	};

	/**
	* Get the field value
	* The lastName data from the card.
	* @memberof base.CardData
	* @return {String} 
	*/
	CardData.prototype.getLastName = function() {
	  return this.lastName;
	};

	/**
	* Set the field value
	* The exp data from the card.
	*
	* @memberof base.CardData
	* @param {String} exp 
	*/
	CardData.prototype.setExp = function(exp) {
	  this.exp = exp;
	};

	/**
	* Get the field value
	* The exp data from the card.
	* @memberof base.CardData
	* @return {String} 
	*/
	CardData.prototype.getExp = function() {
	  return this.exp;
	};

	/**
	* Set the field value
	* The last4 data from the card.
	*
	* @memberof base.CardData
	* @param {String} last4 
	*/
	CardData.prototype.setLast4 = function(last4) {
	  this.last4 = last4;
	};

	/**
	* Get the field value
	* The last4 data from the card.
	* @memberof base.CardData
	* @return {String} 
	*/
	CardData.prototype.getLast4 = function() {
	  return this.last4;
	};

	/**
	* Set the field value
	* The first6 data from the card.
	*
	* @memberof base.CardData
	* @param {String} first6 
	*/
	CardData.prototype.setFirst6 = function(first6) {
	  this.first6 = first6;
	};

	/**
	* Get the field value
	* The first6 data from the card.
	* @memberof base.CardData
	* @return {String} 
	*/
	CardData.prototype.getFirst6 = function() {
	  return this.first6;
	};

	/**
	* @memberof base.CardData
	* @private
	*/
	CardData.prototype.getMetaInfo = function(fieldName) {
	  var curclass = this._class_;
	  do {
	    var fieldMetaInfo = curclass._meta_.fields[fieldName];
	    if(fieldMetaInfo) {
	      return fieldMetaInfo;
	    }
	    if(curclass._meta_._superMeta_) {
	      curclass = curclass._meta_._superMeta_._class_;
	    } else {
	      curclass = null;
	    }
	  } while(curclass);
	  return null;
	};

	CardData.prototype.toString = function() {
	  return JSON.stringify(this);
	};

	CardData._meta_ =  {fields:  {}};
	CardData._meta_._class_ =  CardData;
	CardData._meta_.fields["track1"] = {};
	CardData._meta_.fields["track1"].type = String;
	CardData._meta_.fields["track2"] = {};
	CardData._meta_.fields["track2"].type = String;
	CardData._meta_.fields["track3"] = {};
	CardData._meta_.fields["track3"].type = String;
	CardData._meta_.fields["encrypted"] = {};
	CardData._meta_.fields["encrypted"].type = Boolean;
	CardData._meta_.fields["maskedTrack1"] = {};
	CardData._meta_.fields["maskedTrack1"].type = String;
	CardData._meta_.fields["maskedTrack2"] = {};
	CardData._meta_.fields["maskedTrack2"].type = String;
	CardData._meta_.fields["maskedTrack3"] = {};
	CardData._meta_.fields["maskedTrack3"].type = String;
	CardData._meta_.fields["pan"] = {};
	CardData._meta_.fields["pan"].type = String;
	CardData._meta_.fields["cardholderName"] = {};
	CardData._meta_.fields["cardholderName"].type = String;
	CardData._meta_.fields["firstName"] = {};
	CardData._meta_.fields["firstName"].type = String;
	CardData._meta_.fields["lastName"] = {};
	CardData._meta_.fields["lastName"].type = String;
	CardData._meta_.fields["exp"] = {};
	CardData._meta_.fields["exp"].type = String;
	CardData._meta_.fields["last4"] = {};
	CardData._meta_.fields["last4"].type = String;
	CardData._meta_.fields["first6"] = {};
	CardData._meta_.fields["first6"].type = String;

	//
	// Expose the module.
	//
	if (true) {
	module.exports = CardData;
	}



/***/ }),
/* 234 */
/***/ (function(module, exports, __webpack_require__) {

	/**
	 * Autogenerated by Avro
	 * 
	 * DO NOT EDIT DIRECTLY
	 */

	var order_VoidReason = __webpack_require__(87);
	var base_ChallengeType = __webpack_require__(235);

	/**
	* @constructor
	* @memberof base
	*/
	var Challenge = function() {
	  this._class_ = Challenge;
	  this.type = undefined;
	  this.reason = undefined;
	  this.message = undefined;
	};


	/**
	* Set the field value
	* The type of the challenge.
	*
	* @memberof base.Challenge
	* @param {base.ChallengeType} type 
	*/
	Challenge.prototype.setType = function(type) {
	  this.type = type;
	};

	/**
	* Get the field value
	* The type of the challenge.
	* @memberof base.Challenge
	* @return {base.ChallengeType} 
	*/
	Challenge.prototype.getType = function() {
	  return this.type;
	};

	/**
	* Set the field value
	* If the challenge is not accepted, then this reason can be used when responding.  The response could be an explicit void of the payment, or some other message, that may or may not use this reason.
	*
	* @memberof base.Challenge
	* @param {order.VoidReason} reason 
	*/
	Challenge.prototype.setReason = function(reason) {
	  this.reason = reason;
	};

	/**
	* Get the field value
	* If the challenge is not accepted, then this reason can be used when responding.  The response could be an explicit void of the payment, or some other message, that may or may not use this reason.
	* @memberof base.Challenge
	* @return {order.VoidReason} 
	*/
	Challenge.prototype.getReason = function() {
	  return this.reason;
	};

	/**
	* Set the field value
	* A default message that indicates what the challenge is in a user friendly format.
	*
	* @memberof base.Challenge
	* @param {String} message 
	*/
	Challenge.prototype.setMessage = function(message) {
	  this.message = message;
	};

	/**
	* Get the field value
	* A default message that indicates what the challenge is in a user friendly format.
	* @memberof base.Challenge
	* @return {String} 
	*/
	Challenge.prototype.getMessage = function() {
	  return this.message;
	};

	/**
	* @memberof base.Challenge
	* @private
	*/
	Challenge.prototype.getMetaInfo = function(fieldName) {
	  var curclass = this._class_;
	  do {
	    var fieldMetaInfo = curclass._meta_.fields[fieldName];
	    if(fieldMetaInfo) {
	      return fieldMetaInfo;
	    }
	    if(curclass._meta_._superMeta_) {
	      curclass = curclass._meta_._superMeta_._class_;
	    } else {
	      curclass = null;
	    }
	  } while(curclass);
	  return null;
	};

	Challenge.prototype.toString = function() {
	  return JSON.stringify(this);
	};

	Challenge._meta_ =  {fields:  {}};
	Challenge._meta_._class_ =  Challenge;
	Challenge._meta_.fields["type"] = {};
	Challenge._meta_.fields["type"].type = base_ChallengeType;
	Challenge._meta_.fields["reason"] = {};
	Challenge._meta_.fields["reason"].type = order_VoidReason;
	Challenge._meta_.fields["message"] = {};
	Challenge._meta_.fields["message"].type = String;

	//
	// Expose the module.
	//
	if (true) {
	module.exports = Challenge;
	}



/***/ }),
/* 235 */
/***/ (function(module, exports, __webpack_require__) {

	/**
	 * Autogenerated by Avro
	 * 
	 * DO NOT EDIT DIRECTLY
	 */


	/**
	* @memberof base
	* @enum {string}
	*/
	var ChallengeType = {
	  DUPLICATE_CHALLENGE : "DUPLICATE_CHALLENGE",
	  OFFLINE_CHALLENGE : "OFFLINE_CHALLENGE"
	};


	//
	// Expose the module.
	//
	if (true) {
	module.exports = ChallengeType;
	}



/***/ }),
/* 236 */
/***/ (function(module, exports, __webpack_require__) {

	/**
	 * Autogenerated by Avro
	 * 
	 * DO NOT EDIT DIRECTLY
	 */


	/**
	* @constructor
	* @memberof base
	*/
	var PendingPaymentEntry = function() {
	  this._class_ = PendingPaymentEntry;
	  this.amount = undefined;
	  this.paymentId = undefined;
	  this.externalPaymentId = undefined;
	  this.tipAmount = undefined;
	};


	/**
	* Set the field value
	* Total amount paid
	*
	* @memberof base.PendingPaymentEntry
	* @param {Number} amount must be a long integer
	*/
	PendingPaymentEntry.prototype.setAmount = function(amount) {
	  this.amount = amount;
	};

	/**
	* Get the field value
	* Total amount paid
	* @memberof base.PendingPaymentEntry
	* @return {Number} must be a long integer
	*/
	PendingPaymentEntry.prototype.getAmount = function() {
	  return this.amount;
	};

	/**
	* Set the field value
	* Unique identifier for a payment
	*
	* @memberof base.PendingPaymentEntry
	* @param {String} paymentId 
	*/
	PendingPaymentEntry.prototype.setPaymentId = function(paymentId) {
	  this.paymentId = paymentId;
	};

	/**
	* Get the field value
	* Unique identifier for a payment
	* @memberof base.PendingPaymentEntry
	* @return {String} 
	*/
	PendingPaymentEntry.prototype.getPaymentId = function() {
	  return this.paymentId;
	};

	/**
	* Set the field value
	* An id that will be persisted with transactions.
	*
	* @memberof base.PendingPaymentEntry
	* @param {String} externalPaymentId 
	*/
	PendingPaymentEntry.prototype.setExternalPaymentId = function(externalPaymentId) {
	  this.externalPaymentId = externalPaymentId;
	};

	/**
	* Get the field value
	* An id that will be persisted with transactions.
	* @memberof base.PendingPaymentEntry
	* @return {String} 
	*/
	PendingPaymentEntry.prototype.getExternalPaymentId = function() {
	  return this.externalPaymentId;
	};

	/**
	* Set the field value
	* Included tip
	*
	* @memberof base.PendingPaymentEntry
	* @param {Number|Null} tipAmount must be a long integer, 
	*/
	PendingPaymentEntry.prototype.setTipAmount = function(tipAmount) {
	  this.tipAmount = tipAmount;
	};

	/**
	* Get the field value
	* Included tip
	* @memberof base.PendingPaymentEntry
	* @return {Number|Null} must be a long integer, 
	*/
	PendingPaymentEntry.prototype.getTipAmount = function() {
	  return this.tipAmount;
	};

	/**
	* @memberof base.PendingPaymentEntry
	* @private
	*/
	PendingPaymentEntry.prototype.getMetaInfo = function(fieldName) {
	  var curclass = this._class_;
	  do {
	    var fieldMetaInfo = curclass._meta_.fields[fieldName];
	    if(fieldMetaInfo) {
	      return fieldMetaInfo;
	    }
	    if(curclass._meta_._superMeta_) {
	      curclass = curclass._meta_._superMeta_._class_;
	    } else {
	      curclass = null;
	    }
	  } while(curclass);
	  return null;
	};

	PendingPaymentEntry.prototype.toString = function() {
	  return JSON.stringify(this);
	};

	PendingPaymentEntry._meta_ =  {fields:  {}};
	PendingPaymentEntry._meta_._class_ =  PendingPaymentEntry;
	PendingPaymentEntry._meta_.fields["amount"] = {};
	PendingPaymentEntry._meta_.fields["amount"].type = Number;
	PendingPaymentEntry._meta_.fields["paymentId"] = {};
	PendingPaymentEntry._meta_.fields["paymentId"].type = String;
	PendingPaymentEntry._meta_.fields["externalPaymentId"] = {};
	PendingPaymentEntry._meta_.fields["externalPaymentId"].type = String;
	PendingPaymentEntry._meta_.fields["tipAmount"] = {};
	PendingPaymentEntry._meta_.fields["tipAmount"].type = Number;

	//
	// Expose the module.
	//
	if (true) {
	module.exports = PendingPaymentEntry;
	}



/***/ }),
/* 237 */
/***/ (function(module, exports, __webpack_require__) {

	/**
	 * Autogenerated by Avro
	 * 
	 * DO NOT EDIT DIRECTLY
	 */


	/**
	* @memberof employees
	* @enum {string}
	*/
	var AccountRole = {
	  OWNER : "OWNER",
	  ADMIN : "ADMIN",
	  MANAGER : "MANAGER",
	  EMPLOYEE : "EMPLOYEE"
	};


	//
	// Expose the module.
	//
	if (true) {
	module.exports = AccountRole;
	}



/***/ }),
/* 238 */
/***/ (function(module, exports, __webpack_require__) {

	/**
	 * Autogenerated by Avro
	 * 
	 * DO NOT EDIT DIRECTLY
	 */

	var base_Reference = __webpack_require__(5);

	/**
	* @constructor
	* @memberof inventory
	*/
	var MenuItem = function() {
	  this._class_ = MenuItem;
	  this.id = undefined;
	  this.item = undefined;
	  this.merchantRef = undefined;
	  this.price = undefined;
	  this.name = undefined;
	  this.description = undefined;
	  this.imageFilename = undefined;
	  this.enabled = undefined;
	  this.createdTime = undefined;
	  this.modifiedTime = undefined;
	  this.deletedTime = undefined;
	};


	/**
	* Set the field value
	* Item id
	*
	* @memberof inventory.MenuItem
	* @param {String} id 
	*/
	MenuItem.prototype.setId = function(id) {
	  this.id = id;
	};

	/**
	* Get the field value
	* Item id
	* @memberof inventory.MenuItem
	* @return {String} 
	*/
	MenuItem.prototype.getId = function() {
	  return this.id;
	};

	/**
	* Set the field value
	* Reference to an item
	*
	* @memberof inventory.MenuItem
	* @param {base.Reference} item 
	*/
	MenuItem.prototype.setItem = function(item) {
	  this.item = item;
	};

	/**
	* Get the field value
	* Reference to an item
	* @memberof inventory.MenuItem
	* @return {base.Reference} 
	*/
	MenuItem.prototype.getItem = function() {
	  return this.item;
	};

	/**
	* Set the field value
	* Reference to the merchant that created the item
	*
	* @memberof inventory.MenuItem
	* @param {base.Reference} merchantRef 
	*/
	MenuItem.prototype.setMerchantRef = function(merchantRef) {
	  this.merchantRef = merchantRef;
	};

	/**
	* Get the field value
	* Reference to the merchant that created the item
	* @memberof inventory.MenuItem
	* @return {base.Reference} 
	*/
	MenuItem.prototype.getMerchantRef = function() {
	  return this.merchantRef;
	};

	/**
	* Set the field value
	* Item price
	*
	* @memberof inventory.MenuItem
	* @param {Number} price must be a long integer
	*/
	MenuItem.prototype.setPrice = function(price) {
	  this.price = price;
	};

	/**
	* Get the field value
	* Item price
	* @memberof inventory.MenuItem
	* @return {Number} must be a long integer
	*/
	MenuItem.prototype.getPrice = function() {
	  return this.price;
	};

	/**
	* Set the field value
	* Customer facing item name
	*
	* @memberof inventory.MenuItem
	* @param {String} name 
	*/
	MenuItem.prototype.setName = function(name) {
	  this.name = name;
	};

	/**
	* Get the field value
	* Customer facing item name
	* @memberof inventory.MenuItem
	* @return {String} 
	*/
	MenuItem.prototype.getName = function() {
	  return this.name;
	};

	/**
	* Set the field value
	* Item description
	*
	* @memberof inventory.MenuItem
	* @param {String} description 
	*/
	MenuItem.prototype.setDescription = function(description) {
	  this.description = description;
	};

	/**
	* Get the field value
	* Item description
	* @memberof inventory.MenuItem
	* @return {String} 
	*/
	MenuItem.prototype.getDescription = function() {
	  return this.description;
	};

	/**
	* Set the field value
	* Item image file path
	*
	* @memberof inventory.MenuItem
	* @param {String} imageFilename 
	*/
	MenuItem.prototype.setImageFilename = function(imageFilename) {
	  this.imageFilename = imageFilename;
	};

	/**
	* Get the field value
	* Item image file path
	* @memberof inventory.MenuItem
	* @return {String} 
	*/
	MenuItem.prototype.getImageFilename = function() {
	  return this.imageFilename;
	};

	/**
	* Set the field value
	* Item enabled for menu
	*
	* @memberof inventory.MenuItem
	* @param {Boolean} enabled 
	*/
	MenuItem.prototype.setEnabled = function(enabled) {
	  this.enabled = enabled;
	};

	/**
	* Get the field value
	* Item enabled for menu
	* @memberof inventory.MenuItem
	* @return {Boolean} 
	*/
	MenuItem.prototype.getEnabled = function() {
	  return this.enabled;
	};

	/**
	* Set the field value
	* Timestamp when the menu item was created
	*
	* @memberof inventory.MenuItem
	* @param {Number} createdTime must be a long integer
	*/
	MenuItem.prototype.setCreatedTime = function(createdTime) {
	  this.createdTime = createdTime;
	};

	/**
	* Get the field value
	* Timestamp when the menu item was created
	* @memberof inventory.MenuItem
	* @return {Number} must be a long integer
	*/
	MenuItem.prototype.getCreatedTime = function() {
	  return this.createdTime;
	};

	/**
	* Set the field value
	* Timestamp when the menu item was last modified
	*
	* @memberof inventory.MenuItem
	* @param {Number} modifiedTime must be a long integer
	*/
	MenuItem.prototype.setModifiedTime = function(modifiedTime) {
	  this.modifiedTime = modifiedTime;
	};

	/**
	* Get the field value
	* Timestamp when the menu item was last modified
	* @memberof inventory.MenuItem
	* @return {Number} must be a long integer
	*/
	MenuItem.prototype.getModifiedTime = function() {
	  return this.modifiedTime;
	};

	/**
	* Set the field value
	* Timestamp when menu item was last deleted
	*
	* @memberof inventory.MenuItem
	* @param {Number} deletedTime must be a long integer
	*/
	MenuItem.prototype.setDeletedTime = function(deletedTime) {
	  this.deletedTime = deletedTime;
	};

	/**
	* Get the field value
	* Timestamp when menu item was last deleted
	* @memberof inventory.MenuItem
	* @return {Number} must be a long integer
	*/
	MenuItem.prototype.getDeletedTime = function() {
	  return this.deletedTime;
	};

	/**
	* @memberof inventory.MenuItem
	* @private
	*/
	MenuItem.prototype.getMetaInfo = function(fieldName) {
	  var curclass = this._class_;
	  do {
	    var fieldMetaInfo = curclass._meta_.fields[fieldName];
	    if(fieldMetaInfo) {
	      return fieldMetaInfo;
	    }
	    if(curclass._meta_._superMeta_) {
	      curclass = curclass._meta_._superMeta_._class_;
	    } else {
	      curclass = null;
	    }
	  } while(curclass);
	  return null;
	};

	MenuItem.prototype.toString = function() {
	  return JSON.stringify(this);
	};

	MenuItem._meta_ =  {fields:  {}};
	MenuItem._meta_._class_ =  MenuItem;
	MenuItem._meta_.fields["id"] = {};
	MenuItem._meta_.fields["id"].type = String;
	MenuItem._meta_.fields["item"] = {};
	MenuItem._meta_.fields["item"].type = base_Reference;
	MenuItem._meta_.fields["merchantRef"] = {};
	MenuItem._meta_.fields["merchantRef"].type = base_Reference;
	MenuItem._meta_.fields["price"] = {};
	MenuItem._meta_.fields["price"].type = Number;
	MenuItem._meta_.fields["name"] = {};
	MenuItem._meta_.fields["name"].type = String;
	MenuItem._meta_.fields["description"] = {};
	MenuItem._meta_.fields["description"].type = String;
	MenuItem._meta_.fields["imageFilename"] = {};
	MenuItem._meta_.fields["imageFilename"].type = String;
	MenuItem._meta_.fields["enabled"] = {};
	MenuItem._meta_.fields["enabled"].type = Boolean;
	MenuItem._meta_.fields["createdTime"] = {};
	MenuItem._meta_.fields["createdTime"].type = Number;
	MenuItem._meta_.fields["modifiedTime"] = {};
	MenuItem._meta_.fields["modifiedTime"].type = Number;
	MenuItem._meta_.fields["deletedTime"] = {};
	MenuItem._meta_.fields["deletedTime"].type = Number;

	//
	// Expose the module.
	//
	if (true) {
	module.exports = MenuItem;
	}



/***/ }),
/* 239 */
/***/ (function(module, exports, __webpack_require__) {

	/**
	 * Autogenerated by Avro
	 * 
	 * DO NOT EDIT DIRECTLY
	 */

	var inventory_MenuModifier = __webpack_require__(400);
	var base_Reference = __webpack_require__(5);

	/**
	* @constructor
	* @memberof inventory
	*/
	var Modifier = function() {
	  this._class_ = Modifier;
	  this.id = undefined;
	  this.name = undefined;
	  this.alternateName = undefined;
	  this.price = 0;
	  this.modifierGroup = undefined;
	  this.menuModifier = undefined;
	};


	/**
	* Set the field value
	* Unique identifier
	*
	* @memberof inventory.Modifier
	* @param {String} id 
	*/
	Modifier.prototype.setId = function(id) {
	  this.id = id;
	};

	/**
	* Get the field value
	* Unique identifier
	* @memberof inventory.Modifier
	* @return {String} 
	*/
	Modifier.prototype.getId = function() {
	  return this.id;
	};

	/**
	* Set the field value
	* Name of the modifier
	*
	* @memberof inventory.Modifier
	* @param {String} name 
	*/
	Modifier.prototype.setName = function(name) {
	  this.name = name;
	};

	/**
	* Get the field value
	* Name of the modifier
	* @memberof inventory.Modifier
	* @return {String} 
	*/
	Modifier.prototype.getName = function() {
	  return this.name;
	};

	/**
	* Set the field value
	* Alternate name of the modifier
	*
	* @memberof inventory.Modifier
	* @param {Null|String} alternateName 
	*/
	Modifier.prototype.setAlternateName = function(alternateName) {
	  this.alternateName = alternateName;
	};

	/**
	* Get the field value
	* Alternate name of the modifier
	* @memberof inventory.Modifier
	* @return {Null|String} 
	*/
	Modifier.prototype.getAlternateName = function() {
	  return this.alternateName;
	};

	/**
	* Set the field value
	* Additional cost when used
	*
	* @memberof inventory.Modifier
	* @param {Null|Number} price must be a long integer
	*/
	Modifier.prototype.setPrice = function(price) {
	  this.price = price;
	};

	/**
	* Get the field value
	* Additional cost when used
	* @memberof inventory.Modifier
	* @return {Null|Number} must be a long integer
	*/
	Modifier.prototype.getPrice = function() {
	  return this.price;
	};

	/**
	* Set the field value
	* @memberof inventory.Modifier
	* @param {Null|base.Reference} modifierGroup 
	*/
	Modifier.prototype.setModifierGroup = function(modifierGroup) {
	  this.modifierGroup = modifierGroup;
	};

	/**
	* Get the field value
	* @memberof inventory.Modifier
	* @return {Null|base.Reference} 
	*/
	Modifier.prototype.getModifierGroup = function() {
	  return this.modifierGroup;
	};

	/**
	* Set the field value
	* Menu Modifier attribute that can be expanded to menu specific attributes
	*
	* @memberof inventory.Modifier
	* @param {Null|inventory.MenuModifier} menuModifier 
	*/
	Modifier.prototype.setMenuModifier = function(menuModifier) {
	  this.menuModifier = menuModifier;
	};

	/**
	* Get the field value
	* Menu Modifier attribute that can be expanded to menu specific attributes
	* @memberof inventory.Modifier
	* @return {Null|inventory.MenuModifier} 
	*/
	Modifier.prototype.getMenuModifier = function() {
	  return this.menuModifier;
	};

	/**
	* @memberof inventory.Modifier
	* @private
	*/
	Modifier.prototype.getMetaInfo = function(fieldName) {
	  var curclass = this._class_;
	  do {
	    var fieldMetaInfo = curclass._meta_.fields[fieldName];
	    if(fieldMetaInfo) {
	      return fieldMetaInfo;
	    }
	    if(curclass._meta_._superMeta_) {
	      curclass = curclass._meta_._superMeta_._class_;
	    } else {
	      curclass = null;
	    }
	  } while(curclass);
	  return null;
	};

	Modifier.prototype.toString = function() {
	  return JSON.stringify(this);
	};

	Modifier._meta_ =  {fields:  {}};
	Modifier._meta_._class_ =  Modifier;
	Modifier._meta_.fields["id"] = {};
	Modifier._meta_.fields["id"].type = String;
	Modifier._meta_.fields["name"] = {};
	Modifier._meta_.fields["name"].type = String;
	Modifier._meta_.fields["alternateName"] = {};
	Modifier._meta_.fields["alternateName"].type = String;
	Modifier._meta_.fields["price"] = {};
	Modifier._meta_.fields["price"].type = Number;
	Modifier._meta_.fields["modifierGroup"] = {};
	Modifier._meta_.fields["modifierGroup"].type = base_Reference;
	Modifier._meta_.fields["menuModifier"] = {};
	Modifier._meta_.fields["menuModifier"].type = inventory_MenuModifier;

	//
	// Expose the module.
	//
	if (true) {
	module.exports = Modifier;
	}



/***/ }),
/* 240 */
/***/ (function(module, exports, __webpack_require__) {

	/**
	 * Autogenerated by Avro
	 * 
	 * DO NOT EDIT DIRECTLY
	 */

	var base_Reference = __webpack_require__(5);

	/**
	* @constructor
	* @memberof inventory
	*/
	var Option = function() {
	  this._class_ = Option;
	  this.id = undefined;
	  this.name = undefined;
	  this.attribute = undefined;
	  this.items = undefined;
	};


	/**
	* Set the field value
	* Unique identifier
	*
	* @memberof inventory.Option
	* @param {String} id 
	*/
	Option.prototype.setId = function(id) {
	  this.id = id;
	};

	/**
	* Get the field value
	* Unique identifier
	* @memberof inventory.Option
	* @return {String} 
	*/
	Option.prototype.getId = function() {
	  return this.id;
	};

	/**
	* Set the field value
	* Name of the option
	*
	* @memberof inventory.Option
	* @param {String} name 
	*/
	Option.prototype.setName = function(name) {
	  this.name = name;
	};

	/**
	* Get the field value
	* Name of the option
	* @memberof inventory.Option
	* @return {String} 
	*/
	Option.prototype.getName = function() {
	  return this.name;
	};

	/**
	* Set the field value
	* @memberof inventory.Option
	* @param {base.Reference} attribute 
	*/
	Option.prototype.setAttribute = function(attribute) {
	  this.attribute = attribute;
	};

	/**
	* Get the field value
	* @memberof inventory.Option
	* @return {base.Reference} 
	*/
	Option.prototype.getAttribute = function() {
	  return this.attribute;
	};

	/**
	* Set the field value
	* Items associated with this option
	*
	* @memberof inventory.Option
	* @param {Array.<base.Reference>} items An array of 
	*/
	Option.prototype.setItems = function(items) {
	  this.items = items;
	};

	/**
	* Get the field value
	* Items associated with this option
	* @memberof inventory.Option
	* @return {Array.<base.Reference>} An array of 
	*/
	Option.prototype.getItems = function() {
	  return this.items;
	};

	/**
	* @memberof inventory.Option
	* @private
	*/
	Option.prototype.getMetaInfo = function(fieldName) {
	  var curclass = this._class_;
	  do {
	    var fieldMetaInfo = curclass._meta_.fields[fieldName];
	    if(fieldMetaInfo) {
	      return fieldMetaInfo;
	    }
	    if(curclass._meta_._superMeta_) {
	      curclass = curclass._meta_._superMeta_._class_;
	    } else {
	      curclass = null;
	    }
	  } while(curclass);
	  return null;
	};

	Option.prototype.toString = function() {
	  return JSON.stringify(this);
	};

	Option._meta_ =  {fields:  {}};
	Option._meta_._class_ =  Option;
	Option._meta_.fields["id"] = {};
	Option._meta_.fields["id"].type = String;
	Option._meta_.fields["name"] = {};
	Option._meta_.fields["name"].type = String;
	Option._meta_.fields["attribute"] = {};
	Option._meta_.fields["attribute"].type = base_Reference;
	Option._meta_.fields["items"] = {};
	Option._meta_.fields["items"].type = Array;
	Option._meta_.fields["items"].elementType = base_Reference;

	//
	// Expose the module.
	//
	if (true) {
	module.exports = Option;
	}



/***/ }),
/* 241 */
/***/ (function(module, exports, __webpack_require__) {

	/**
	 * Autogenerated by Avro
	 * 
	 * DO NOT EDIT DIRECTLY
	 */


	/**
	* @constructor
	* @memberof loyalty
	*/
	var LoyaltyDataConfig = function() {
	  this._class_ = LoyaltyDataConfig;
	  this.type = undefined;
	  this.configuration = undefined;
	};


	/**
	* Set the field value
	* The string type of the loyalty data of interest.
	*
	* @memberof loyalty.LoyaltyDataConfig
	* @param {String} type 
	*/
	LoyaltyDataConfig.prototype.setType = function(type) {
	  this.type = type;
	};

	/**
	* Get the field value
	* The string type of the loyalty data of interest.
	* @memberof loyalty.LoyaltyDataConfig
	* @return {String} 
	*/
	LoyaltyDataConfig.prototype.getType = function() {
	  return this.type;
	};

	/**
	* Set the field value
	* Configuration for the data type.
	*
	* @memberof loyalty.LoyaltyDataConfig
	* @param {Object.<String,String>} configuration A map of <String> to <>
	*/
	LoyaltyDataConfig.prototype.setConfiguration = function(configuration) {
	  this.configuration = configuration;
	};

	/**
	* Get the field value
	* Configuration for the data type.
	* @memberof loyalty.LoyaltyDataConfig
	* @return {Object.<String,String>} A map of <String> to <>
	*/
	LoyaltyDataConfig.prototype.getConfiguration = function() {
	  return this.configuration;
	};

	/**
	* @memberof loyalty.LoyaltyDataConfig
	* @private
	*/
	LoyaltyDataConfig.prototype.getMetaInfo = function(fieldName) {
	  var curclass = this._class_;
	  do {
	    var fieldMetaInfo = curclass._meta_.fields[fieldName];
	    if(fieldMetaInfo) {
	      return fieldMetaInfo;
	    }
	    if(curclass._meta_._superMeta_) {
	      curclass = curclass._meta_._superMeta_._class_;
	    } else {
	      curclass = null;
	    }
	  } while(curclass);
	  return null;
	};

	LoyaltyDataConfig.prototype.toString = function() {
	  return JSON.stringify(this);
	};

	LoyaltyDataConfig._meta_ =  {fields:  {}};
	LoyaltyDataConfig._meta_._class_ =  LoyaltyDataConfig;
	LoyaltyDataConfig._meta_.fields["type"] = {};
	LoyaltyDataConfig._meta_.fields["type"].type = String;
	LoyaltyDataConfig._meta_.fields["configuration"] = {};
	LoyaltyDataConfig._meta_.fields["configuration"].type = Object;

	//
	// Expose the module.
	//
	if (true) {
	module.exports = LoyaltyDataConfig;
	}



/***/ }),
/* 242 */
/***/ (function(module, exports, __webpack_require__) {

	/**
	 * Autogenerated by Avro
	 * 
	 * DO NOT EDIT DIRECTLY
	 */

	var base_Reference = __webpack_require__(5);

	/**
	* @constructor
	* @memberof order
	*/
	var Discount = function() {
	  this._class_ = Discount;
	  this.id = undefined;
	  this.discount = undefined;
	  this.approver = undefined;
	  this.name = undefined;
	  this.amount = undefined;
	  this.percentage = undefined;
	};


	/**
	* Set the field value
	* Unique identifier
	*
	* @memberof order.Discount
	* @param {String} id 
	*/
	Discount.prototype.setId = function(id) {
	  this.id = id;
	};

	/**
	* Get the field value
	* Unique identifier
	* @memberof order.Discount
	* @return {String} 
	*/
	Discount.prototype.getId = function() {
	  return this.id;
	};

	/**
	* Set the field value
	* If this item is based on a standard discount, this will point to the appropriate inventory.Discount
	*
	* @memberof order.Discount
	* @param {Null|base.Reference} discount 
	*/
	Discount.prototype.setDiscount = function(discount) {
	  this.discount = discount;
	};

	/**
	* Get the field value
	* If this item is based on a standard discount, this will point to the appropriate inventory.Discount
	* @memberof order.Discount
	* @return {Null|base.Reference} 
	*/
	Discount.prototype.getDiscount = function() {
	  return this.discount;
	};

	/**
	* Set the field value
	* The person that authorized a discount
	*
	* @memberof order.Discount
	* @param {Null|base.Reference} approver 
	*/
	Discount.prototype.setApprover = function(approver) {
	  this.approver = approver;
	};

	/**
	* Get the field value
	* The person that authorized a discount
	* @memberof order.Discount
	* @return {Null|base.Reference} 
	*/
	Discount.prototype.getApprover = function() {
	  return this.approver;
	};

	/**
	* Set the field value
	* Name of the discount
	*
	* @memberof order.Discount
	* @param {String} name 
	*/
	Discount.prototype.setName = function(name) {
	  this.name = name;
	};

	/**
	* Get the field value
	* Name of the discount
	* @memberof order.Discount
	* @return {String} 
	*/
	Discount.prototype.getName = function() {
	  return this.name;
	};

	/**
	* Set the field value
	* Discount amount in fraction of currency unit (e.g. cents) based on currency fraction digits supported
	*
	* @memberof order.Discount
	* @param {Null|Number} amount must be a long integer
	*/
	Discount.prototype.setAmount = function(amount) {
	  this.amount = amount;
	};

	/**
	* Get the field value
	* Discount amount in fraction of currency unit (e.g. cents) based on currency fraction digits supported
	* @memberof order.Discount
	* @return {Null|Number} must be a long integer
	*/
	Discount.prototype.getAmount = function() {
	  return this.amount;
	};

	/**
	* Set the field value
	* Discount amount in percent
	*
	* @memberof order.Discount
	* @param {Null|Number} percentage must be a long integer
	*/
	Discount.prototype.setPercentage = function(percentage) {
	  this.percentage = percentage;
	};

	/**
	* Get the field value
	* Discount amount in percent
	* @memberof order.Discount
	* @return {Null|Number} must be a long integer
	*/
	Discount.prototype.getPercentage = function() {
	  return this.percentage;
	};

	/**
	* @memberof order.Discount
	* @private
	*/
	Discount.prototype.getMetaInfo = function(fieldName) {
	  var curclass = this._class_;
	  do {
	    var fieldMetaInfo = curclass._meta_.fields[fieldName];
	    if(fieldMetaInfo) {
	      return fieldMetaInfo;
	    }
	    if(curclass._meta_._superMeta_) {
	      curclass = curclass._meta_._superMeta_._class_;
	    } else {
	      curclass = null;
	    }
	  } while(curclass);
	  return null;
	};

	Discount.prototype.toString = function() {
	  return JSON.stringify(this);
	};

	Discount._meta_ =  {fields:  {}};
	Discount._meta_._class_ =  Discount;
	Discount._meta_.fields["id"] = {};
	Discount._meta_.fields["id"].type = String;
	Discount._meta_.fields["discount"] = {};
	Discount._meta_.fields["discount"].type = base_Reference;
	Discount._meta_.fields["approver"] = {};
	Discount._meta_.fields["approver"].type = base_Reference;
	Discount._meta_.fields["name"] = {};
	Discount._meta_.fields["name"].type = String;
	Discount._meta_.fields["amount"] = {};
	Discount._meta_.fields["amount"].type = Number;
	Discount._meta_.fields["percentage"] = {};
	Discount._meta_.fields["percentage"].type = Number;

	//
	// Expose the module.
	//
	if (true) {
	module.exports = Discount;
	}



/***/ }),
/* 243 */
/***/ (function(module, exports, __webpack_require__) {

	/**
	 * Autogenerated by Avro
	 * 
	 * DO NOT EDIT DIRECTLY
	 */

	var order_DisplayDiscount = __webpack_require__(156);
	var order_DisplayModification = __webpack_require__(408);

	/**
	* @constructor
	* @memberof order
	*/
	var DisplayLineItem = function() {
	  this._class_ = DisplayLineItem;
	  this.id = undefined;
	  this.orderId = undefined;
	  this.name = undefined;
	  this.alternateName = undefined;
	  this.price = undefined;
	  this.unitPrice = undefined;
	  this.quantity = undefined;
	  this.unitQuantity = undefined;
	  this.note = undefined;
	  this.printed = "false";
	  this.binName = undefined;
	  this.userData = undefined;
	  this.discounts = undefined;
	  this.discountAmount = undefined;
	  this.exchanged = "false";
	  this.exchangedAmount = undefined;
	  this.modifications = undefined;
	  this.refunded = "false";
	  this.refundedAmount = undefined;
	  this.percent = undefined;
	};


	/**
	* Set the field value
	* Unique identifier
	*
	* @memberof order.DisplayLineItem
	* @param {String} id 
	*/
	DisplayLineItem.prototype.setId = function(id) {
	  this.id = id;
	};

	/**
	* Get the field value
	* Unique identifier
	* @memberof order.DisplayLineItem
	* @return {String} 
	*/
	DisplayLineItem.prototype.getId = function() {
	  return this.id;
	};

	/**
	* Set the field value
	* The order with which the line item is associated
	*
	* @memberof order.DisplayLineItem
	* @param {String} orderId 
	*/
	DisplayLineItem.prototype.setOrderId = function(orderId) {
	  this.orderId = orderId;
	};

	/**
	* Get the field value
	* The order with which the line item is associated
	* @memberof order.DisplayLineItem
	* @return {String} 
	*/
	DisplayLineItem.prototype.getOrderId = function() {
	  return this.orderId;
	};

	/**
	* Set the field value
	* Line item name
	*
	* @memberof order.DisplayLineItem
	* @param {Null|String} name 
	*/
	DisplayLineItem.prototype.setName = function(name) {
	  this.name = name;
	};

	/**
	* Get the field value
	* Line item name
	* @memberof order.DisplayLineItem
	* @return {Null|String} 
	*/
	DisplayLineItem.prototype.getName = function() {
	  return this.name;
	};

	/**
	* Set the field value
	* Alternate name of the line item
	*
	* @memberof order.DisplayLineItem
	* @param {Null|String} alternateName 
	*/
	DisplayLineItem.prototype.setAlternateName = function(alternateName) {
	  this.alternateName = alternateName;
	};

	/**
	* Get the field value
	* Alternate name of the line item
	* @memberof order.DisplayLineItem
	* @return {Null|String} 
	*/
	DisplayLineItem.prototype.getAlternateName = function() {
	  return this.alternateName;
	};

	/**
	* Set the field value
	* Formatted total price of the line item
	*
	* @memberof order.DisplayLineItem
	* @param {String} price 
	*/
	DisplayLineItem.prototype.setPrice = function(price) {
	  this.price = price;
	};

	/**
	* Get the field value
	* Formatted total price of the line item
	* @memberof order.DisplayLineItem
	* @return {String} 
	*/
	DisplayLineItem.prototype.getPrice = function() {
	  return this.price;
	};

	/**
	* Set the field value
	* Formatted unit price in cases if applicable
	*
	* @memberof order.DisplayLineItem
	* @param {String} unitPrice 
	*/
	DisplayLineItem.prototype.setUnitPrice = function(unitPrice) {
	  this.unitPrice = unitPrice;
	};

	/**
	* Get the field value
	* Formatted unit price in cases if applicable
	* @memberof order.DisplayLineItem
	* @return {String} 
	*/
	DisplayLineItem.prototype.getUnitPrice = function() {
	  return this.unitPrice;
	};

	/**
	* Set the field value
	* Formatted quantity
	*
	* @memberof order.DisplayLineItem
	* @param {Null|String} quantity 
	*/
	DisplayLineItem.prototype.setQuantity = function(quantity) {
	  this.quantity = quantity;
	};

	/**
	* Get the field value
	* Formatted quantity
	* @memberof order.DisplayLineItem
	* @return {Null|String} 
	*/
	DisplayLineItem.prototype.getQuantity = function() {
	  return this.quantity;
	};

	/**
	* Set the field value
	* Formatted unit quantity - such as 10 @ $1.99/oz
	*
	* @memberof order.DisplayLineItem
	* @param {Null|String} unitQuantity 
	*/
	DisplayLineItem.prototype.setUnitQuantity = function(unitQuantity) {
	  this.unitQuantity = unitQuantity;
	};

	/**
	* Get the field value
	* Formatted unit quantity - such as 10 @ $1.99/oz
	* @memberof order.DisplayLineItem
	* @return {Null|String} 
	*/
	DisplayLineItem.prototype.getUnitQuantity = function() {
	  return this.unitQuantity;
	};

	/**
	* Set the field value
	* @memberof order.DisplayLineItem
	* @param {Null|String} note 
	*/
	DisplayLineItem.prototype.setNote = function(note) {
	  this.note = note;
	};

	/**
	* Get the field value
	* @memberof order.DisplayLineItem
	* @return {Null|String} 
	*/
	DisplayLineItem.prototype.getNote = function() {
	  return this.note;
	};

	/**
	* Set the field value
	* @memberof order.DisplayLineItem
	* @param {Boolean} printed 
	*/
	DisplayLineItem.prototype.setPrinted = function(printed) {
	  this.printed = printed;
	};

	/**
	* Get the field value
	* @memberof order.DisplayLineItem
	* @return {Boolean} 
	*/
	DisplayLineItem.prototype.getPrinted = function() {
	  return this.printed;
	};

	/**
	* Set the field value
	* @memberof order.DisplayLineItem
	* @param {Null|String} binName 
	*/
	DisplayLineItem.prototype.setBinName = function(binName) {
	  this.binName = binName;
	};

	/**
	* Get the field value
	* @memberof order.DisplayLineItem
	* @return {Null|String} 
	*/
	DisplayLineItem.prototype.getBinName = function() {
	  return this.binName;
	};

	/**
	* Set the field value
	* @memberof order.DisplayLineItem
	* @param {Null|String} userData 
	*/
	DisplayLineItem.prototype.setUserData = function(userData) {
	  this.userData = userData;
	};

	/**
	* Get the field value
	* @memberof order.DisplayLineItem
	* @return {Null|String} 
	*/
	DisplayLineItem.prototype.getUserData = function() {
	  return this.userData;
	};

	/**
	* Set the field value
	* @memberof order.DisplayLineItem
	* @param {Array.<order.DisplayDiscount>} discounts An array of 
	*/
	DisplayLineItem.prototype.setDiscounts = function(discounts) {
	  this.discounts = discounts;
	};

	/**
	* Get the field value
	* @memberof order.DisplayLineItem
	* @return {Array.<order.DisplayDiscount>} An array of 
	*/
	DisplayLineItem.prototype.getDiscounts = function() {
	  return this.discounts;
	};

	/**
	* Set the field value
	* @memberof order.DisplayLineItem
	* @param {Null|String} discountAmount 
	*/
	DisplayLineItem.prototype.setDiscountAmount = function(discountAmount) {
	  this.discountAmount = discountAmount;
	};

	/**
	* Get the field value
	* @memberof order.DisplayLineItem
	* @return {Null|String} 
	*/
	DisplayLineItem.prototype.getDiscountAmount = function() {
	  return this.discountAmount;
	};

	/**
	* Set the field value
	* @memberof order.DisplayLineItem
	* @param {Boolean} exchanged 
	*/
	DisplayLineItem.prototype.setExchanged = function(exchanged) {
	  this.exchanged = exchanged;
	};

	/**
	* Get the field value
	* @memberof order.DisplayLineItem
	* @return {Boolean} 
	*/
	DisplayLineItem.prototype.getExchanged = function() {
	  return this.exchanged;
	};

	/**
	* Set the field value
	* Formatted exchanged amount
	*
	* @memberof order.DisplayLineItem
	* @param {Null|String} exchangedAmount 
	*/
	DisplayLineItem.prototype.setExchangedAmount = function(exchangedAmount) {
	  this.exchangedAmount = exchangedAmount;
	};

	/**
	* Get the field value
	* Formatted exchanged amount
	* @memberof order.DisplayLineItem
	* @return {Null|String} 
	*/
	DisplayLineItem.prototype.getExchangedAmount = function() {
	  return this.exchangedAmount;
	};

	/**
	* Set the field value
	* @memberof order.DisplayLineItem
	* @param {Array.<order.DisplayModification>} modifications An array of 
	*/
	DisplayLineItem.prototype.setModifications = function(modifications) {
	  this.modifications = modifications;
	};

	/**
	* Get the field value
	* @memberof order.DisplayLineItem
	* @return {Array.<order.DisplayModification>} An array of 
	*/
	DisplayLineItem.prototype.getModifications = function() {
	  return this.modifications;
	};

	/**
	* Set the field value
	* @memberof order.DisplayLineItem
	* @param {Boolean} refunded 
	*/
	DisplayLineItem.prototype.setRefunded = function(refunded) {
	  this.refunded = refunded;
	};

	/**
	* Get the field value
	* @memberof order.DisplayLineItem
	* @return {Boolean} 
	*/
	DisplayLineItem.prototype.getRefunded = function() {
	  return this.refunded;
	};

	/**
	* Set the field value
	* Formatted refunded amount
	*
	* @memberof order.DisplayLineItem
	* @param {Null|String} refundedAmount 
	*/
	DisplayLineItem.prototype.setRefundedAmount = function(refundedAmount) {
	  this.refundedAmount = refundedAmount;
	};

	/**
	* Get the field value
	* Formatted refunded amount
	* @memberof order.DisplayLineItem
	* @return {Null|String} 
	*/
	DisplayLineItem.prototype.getRefundedAmount = function() {
	  return this.refundedAmount;
	};

	/**
	* Set the field value
	* @memberof order.DisplayLineItem
	* @param {Null|String} percent 
	*/
	DisplayLineItem.prototype.setPercent = function(percent) {
	  this.percent = percent;
	};

	/**
	* Get the field value
	* @memberof order.DisplayLineItem
	* @return {Null|String} 
	*/
	DisplayLineItem.prototype.getPercent = function() {
	  return this.percent;
	};

	/**
	* @memberof order.DisplayLineItem
	* @private
	*/
	DisplayLineItem.prototype.getMetaInfo = function(fieldName) {
	  var curclass = this._class_;
	  do {
	    var fieldMetaInfo = curclass._meta_.fields[fieldName];
	    if(fieldMetaInfo) {
	      return fieldMetaInfo;
	    }
	    if(curclass._meta_._superMeta_) {
	      curclass = curclass._meta_._superMeta_._class_;
	    } else {
	      curclass = null;
	    }
	  } while(curclass);
	  return null;
	};

	DisplayLineItem.prototype.toString = function() {
	  return JSON.stringify(this);
	};

	DisplayLineItem._meta_ =  {fields:  {}};
	DisplayLineItem._meta_._class_ =  DisplayLineItem;
	DisplayLineItem._meta_.fields["id"] = {};
	DisplayLineItem._meta_.fields["id"].type = String;
	DisplayLineItem._meta_.fields["orderId"] = {};
	DisplayLineItem._meta_.fields["orderId"].type = String;
	DisplayLineItem._meta_.fields["name"] = {};
	DisplayLineItem._meta_.fields["name"].type = String;
	DisplayLineItem._meta_.fields["alternateName"] = {};
	DisplayLineItem._meta_.fields["alternateName"].type = String;
	DisplayLineItem._meta_.fields["price"] = {};
	DisplayLineItem._meta_.fields["price"].type = String;
	DisplayLineItem._meta_.fields["unitPrice"] = {};
	DisplayLineItem._meta_.fields["unitPrice"].type = String;
	DisplayLineItem._meta_.fields["quantity"] = {};
	DisplayLineItem._meta_.fields["quantity"].type = String;
	DisplayLineItem._meta_.fields["unitQuantity"] = {};
	DisplayLineItem._meta_.fields["unitQuantity"].type = String;
	DisplayLineItem._meta_.fields["note"] = {};
	DisplayLineItem._meta_.fields["note"].type = String;
	DisplayLineItem._meta_.fields["printed"] = {};
	DisplayLineItem._meta_.fields["printed"].type = Boolean;
	DisplayLineItem._meta_.fields["binName"] = {};
	DisplayLineItem._meta_.fields["binName"].type = String;
	DisplayLineItem._meta_.fields["userData"] = {};
	DisplayLineItem._meta_.fields["userData"].type = String;
	DisplayLineItem._meta_.fields["discounts"] = {};
	DisplayLineItem._meta_.fields["discounts"].type = Array;
	DisplayLineItem._meta_.fields["discounts"].elementType = order_DisplayDiscount;
	DisplayLineItem._meta_.fields["discountAmount"] = {};
	DisplayLineItem._meta_.fields["discountAmount"].type = String;
	DisplayLineItem._meta_.fields["exchanged"] = {};
	DisplayLineItem._meta_.fields["exchanged"].type = Boolean;
	DisplayLineItem._meta_.fields["exchangedAmount"] = {};
	DisplayLineItem._meta_.fields["exchangedAmount"].type = String;
	DisplayLineItem._meta_.fields["modifications"] = {};
	DisplayLineItem._meta_.fields["modifications"].type = Array;
	DisplayLineItem._meta_.fields["modifications"].elementType = order_DisplayModification;
	DisplayLineItem._meta_.fields["refunded"] = {};
	DisplayLineItem._meta_.fields["refunded"].type = Boolean;
	DisplayLineItem._meta_.fields["refundedAmount"] = {};
	DisplayLineItem._meta_.fields["refundedAmount"].type = String;
	DisplayLineItem._meta_.fields["percent"] = {};
	DisplayLineItem._meta_.fields["percent"].type = String;

	//
	// Expose the module.
	//
	if (true) {
	module.exports = DisplayLineItem;
	}



/***/ }),
/* 244 */
/***/ (function(module, exports, __webpack_require__) {

	/**
	 * Autogenerated by Avro
	 * 
	 * DO NOT EDIT DIRECTLY
	 */

	var order_HoursAvailable = __webpack_require__(411);
	var hours_HoursSet = __webpack_require__(396);
	var base_Reference = __webpack_require__(5);
	var order_CustomerIdMethod = __webpack_require__(407);

	/**
	* @constructor
	* @memberof order
	*/
	var OrderType = function() {
	  this._class_ = OrderType;
	  this.id = undefined;
	  this.labelKey = undefined;
	  this.label = undefined;
	  this.taxable = false;
	  this.isDefault = false;
	  this.filterCategories = false;
	  this.isHidden = false;
	  this.fee = undefined;
	  this.minOrderAmount = undefined;
	  this.maxOrderAmount = undefined;
	  this.maxRadius = undefined;
	  this.avgOrderTime = undefined;
	  this.hoursAvailable = undefined;
	  this.customerIdMethod = undefined;
	  this.isDeleted = false;
	  this.systemOrderTypeId = undefined;
	  this.systemOrderTypeDatabaseId = undefined;
	  this.hours = undefined;
	  this.categories = undefined;
	};


	/**
	* Set the field value
	* Unique identifier
	*
	* @memberof order.OrderType
	* @param {String} id 
	*/
	OrderType.prototype.setId = function(id) {
	  this.id = id;
	};

	/**
	* Get the field value
	* Unique identifier
	* @memberof order.OrderType
	* @return {String} 
	*/
	OrderType.prototype.getId = function() {
	  return this.id;
	};

	/**
	* Set the field value
	* Label Key
	*
	* @memberof order.OrderType
	* @param {String} labelKey 
	*/
	OrderType.prototype.setLabelKey = function(labelKey) {
	  this.labelKey = labelKey;
	};

	/**
	* Get the field value
	* Label Key
	* @memberof order.OrderType
	* @return {String} 
	*/
	OrderType.prototype.getLabelKey = function() {
	  return this.labelKey;
	};

	/**
	* Set the field value
	* Label Key
	*
	* @memberof order.OrderType
	* @param {String} label 
	*/
	OrderType.prototype.setLabel = function(label) {
	  this.label = label;
	};

	/**
	* Get the field value
	* Label Key
	* @memberof order.OrderType
	* @return {String} 
	*/
	OrderType.prototype.getLabel = function() {
	  return this.label;
	};

	/**
	* Set the field value
	* If this order type is taxable
	*
	* @memberof order.OrderType
	* @param {Boolean} taxable 
	*/
	OrderType.prototype.setTaxable = function(taxable) {
	  this.taxable = taxable;
	};

	/**
	* Get the field value
	* If this order type is taxable
	* @memberof order.OrderType
	* @return {Boolean} 
	*/
	OrderType.prototype.getTaxable = function() {
	  return this.taxable;
	};

	/**
	* Set the field value
	* If this order type is the default
	*
	* @memberof order.OrderType
	* @param {Boolean} isDefault 
	*/
	OrderType.prototype.setIsDefault = function(isDefault) {
	  this.isDefault = isDefault;
	};

	/**
	* Get the field value
	* If this order type is the default
	* @memberof order.OrderType
	* @return {Boolean} 
	*/
	OrderType.prototype.getIsDefault = function() {
	  return this.isDefault;
	};

	/**
	* Set the field value
	* If set to false, then this order type includes all of the merchant's categories. Otherwise, it only contains the categories defined in the "categories" field on this object.
	*
	* @memberof order.OrderType
	* @param {Boolean} filterCategories 
	*/
	OrderType.prototype.setFilterCategories = function(filterCategories) {
	  this.filterCategories = filterCategories;
	};

	/**
	* Get the field value
	* If set to false, then this order type includes all of the merchant's categories. Otherwise, it only contains the categories defined in the "categories" field on this object.
	* @memberof order.OrderType
	* @return {Boolean} 
	*/
	OrderType.prototype.getFilterCategories = function() {
	  return this.filterCategories;
	};

	/**
	* Set the field value
	* If this order type is hidden on the register
	*
	* @memberof order.OrderType
	* @param {Boolean} isHidden 
	*/
	OrderType.prototype.setIsHidden = function(isHidden) {
	  this.isHidden = isHidden;
	};

	/**
	* Get the field value
	* If this order type is hidden on the register
	* @memberof order.OrderType
	* @return {Boolean} 
	*/
	OrderType.prototype.getIsHidden = function() {
	  return this.isHidden;
	};

	/**
	* Set the field value
	* The price of a fee added to this order type, not fully implemented at this time.
	*
	* @memberof order.OrderType
	* @param {Null|Number} fee must be a long integer
	*/
	OrderType.prototype.setFee = function(fee) {
	  this.fee = fee;
	};

	/**
	* Get the field value
	* The price of a fee added to this order type, not fully implemented at this time.
	* @memberof order.OrderType
	* @return {Null|Number} must be a long integer
	*/
	OrderType.prototype.getFee = function() {
	  return this.fee;
	};

	/**
	* Set the field value
	* The minimum amount required for an order to be placed
	*
	* @memberof order.OrderType
	* @param {Null|Number} minOrderAmount must be a long integer
	*/
	OrderType.prototype.setMinOrderAmount = function(minOrderAmount) {
	  this.minOrderAmount = minOrderAmount;
	};

	/**
	* Get the field value
	* The minimum amount required for an order to be placed
	* @memberof order.OrderType
	* @return {Null|Number} must be a long integer
	*/
	OrderType.prototype.getMinOrderAmount = function() {
	  return this.minOrderAmount;
	};

	/**
	* Set the field value
	* The maximum amount for an order allowed
	*
	* @memberof order.OrderType
	* @param {Null|Number} maxOrderAmount must be a long integer
	*/
	OrderType.prototype.setMaxOrderAmount = function(maxOrderAmount) {
	  this.maxOrderAmount = maxOrderAmount;
	};

	/**
	* Get the field value
	* The maximum amount for an order allowed
	* @memberof order.OrderType
	* @return {Null|Number} must be a long integer
	*/
	OrderType.prototype.getMaxOrderAmount = function() {
	  return this.maxOrderAmount;
	};

	/**
	* Set the field value
	* The maximum radius allowed for an order (i.e. delivery)
	*
	* @memberof order.OrderType
	* @param {Null|Number} maxRadius must be a long integer
	*/
	OrderType.prototype.setMaxRadius = function(maxRadius) {
	  this.maxRadius = maxRadius;
	};

	/**
	* Get the field value
	* The maximum radius allowed for an order (i.e. delivery)
	* @memberof order.OrderType
	* @return {Null|Number} must be a long integer
	*/
	OrderType.prototype.getMaxRadius = function() {
	  return this.maxRadius;
	};

	/**
	* Set the field value
	* The average time it takes to complete the order
	*
	* @memberof order.OrderType
	* @param {Null|Number} avgOrderTime must be a long integer
	*/
	OrderType.prototype.setAvgOrderTime = function(avgOrderTime) {
	  this.avgOrderTime = avgOrderTime;
	};

	/**
	* Get the field value
	* The average time it takes to complete the order
	* @memberof order.OrderType
	* @return {Null|Number} must be a long integer
	*/
	OrderType.prototype.getAvgOrderTime = function() {
	  return this.avgOrderTime;
	};

	/**
	* Set the field value
	* @memberof order.OrderType
	* @param {order.HoursAvailable} hoursAvailable 
	*/
	OrderType.prototype.setHoursAvailable = function(hoursAvailable) {
	  this.hoursAvailable = hoursAvailable;
	};

	/**
	* Get the field value
	* @memberof order.OrderType
	* @return {order.HoursAvailable} 
	*/
	OrderType.prototype.getHoursAvailable = function() {
	  return this.hoursAvailable;
	};

	/**
	* Set the field value
	* @memberof order.OrderType
	* @param {order.CustomerIdMethod} customerIdMethod 
	*/
	OrderType.prototype.setCustomerIdMethod = function(customerIdMethod) {
	  this.customerIdMethod = customerIdMethod;
	};

	/**
	* Get the field value
	* @memberof order.OrderType
	* @return {order.CustomerIdMethod} 
	*/
	OrderType.prototype.getCustomerIdMethod = function() {
	  return this.customerIdMethod;
	};

	/**
	* Set the field value
	* If this order type is deleted
	*
	* @memberof order.OrderType
	* @param {Boolean} isDeleted 
	*/
	OrderType.prototype.setIsDeleted = function(isDeleted) {
	  this.isDeleted = isDeleted;
	};

	/**
	* Get the field value
	* If this order type is deleted
	* @memberof order.OrderType
	* @return {Boolean} 
	*/
	OrderType.prototype.getIsDeleted = function() {
	  return this.isDeleted;
	};

	/**
	* Set the field value
	* Optional system order type that this order type is associated with.
	*
	* @memberof order.OrderType
	* @param {String} systemOrderTypeId 
	*/
	OrderType.prototype.setSystemOrderTypeId = function(systemOrderTypeId) {
	  this.systemOrderTypeId = systemOrderTypeId;
	};

	/**
	* Get the field value
	* Optional system order type that this order type is associated with.
	* @memberof order.OrderType
	* @return {String} 
	*/
	OrderType.prototype.getSystemOrderTypeId = function() {
	  return this.systemOrderTypeId;
	};

	/**
	* Set the field value
	* The system_order_type table's database ID. Internal only. The ID mentioned above is the UUID.
	*
	* @memberof order.OrderType
	* @param {Number} systemOrderTypeDatabaseId must be a long integer
	*/
	OrderType.prototype.setSystemOrderTypeDatabaseId = function(systemOrderTypeDatabaseId) {
	  this.systemOrderTypeDatabaseId = systemOrderTypeDatabaseId;
	};

	/**
	* Get the field value
	* The system_order_type table's database ID. Internal only. The ID mentioned above is the UUID.
	* @memberof order.OrderType
	* @return {Number} must be a long integer
	*/
	OrderType.prototype.getSystemOrderTypeDatabaseId = function() {
	  return this.systemOrderTypeDatabaseId;
	};

	/**
	* Set the field value
	* The hours this order type is available (if they differ from normal merchant hours)
	*
	* @memberof order.OrderType
	* @param {hours.HoursSet} hours 
	*/
	OrderType.prototype.setHours = function(hours) {
	  this.hours = hours;
	};

	/**
	* Get the field value
	* The hours this order type is available (if they differ from normal merchant hours)
	* @memberof order.OrderType
	* @return {hours.HoursSet} 
	*/
	OrderType.prototype.getHours = function() {
	  return this.hours;
	};

	/**
	* Set the field value
	* The categories of items that can be assigned to this order type
	*
	* @memberof order.OrderType
	* @param {Array.<base.Reference>} categories An array of 
	*/
	OrderType.prototype.setCategories = function(categories) {
	  this.categories = categories;
	};

	/**
	* Get the field value
	* The categories of items that can be assigned to this order type
	* @memberof order.OrderType
	* @return {Array.<base.Reference>} An array of 
	*/
	OrderType.prototype.getCategories = function() {
	  return this.categories;
	};

	/**
	* @memberof order.OrderType
	* @private
	*/
	OrderType.prototype.getMetaInfo = function(fieldName) {
	  var curclass = this._class_;
	  do {
	    var fieldMetaInfo = curclass._meta_.fields[fieldName];
	    if(fieldMetaInfo) {
	      return fieldMetaInfo;
	    }
	    if(curclass._meta_._superMeta_) {
	      curclass = curclass._meta_._superMeta_._class_;
	    } else {
	      curclass = null;
	    }
	  } while(curclass);
	  return null;
	};

	OrderType.prototype.toString = function() {
	  return JSON.stringify(this);
	};

	OrderType._meta_ =  {fields:  {}};
	OrderType._meta_._class_ =  OrderType;
	OrderType._meta_.fields["id"] = {};
	OrderType._meta_.fields["id"].type = String;
	OrderType._meta_.fields["labelKey"] = {};
	OrderType._meta_.fields["labelKey"].type = String;
	OrderType._meta_.fields["label"] = {};
	OrderType._meta_.fields["label"].type = String;
	OrderType._meta_.fields["taxable"] = {};
	OrderType._meta_.fields["taxable"].type = Boolean;
	OrderType._meta_.fields["isDefault"] = {};
	OrderType._meta_.fields["isDefault"].type = Boolean;
	OrderType._meta_.fields["filterCategories"] = {};
	OrderType._meta_.fields["filterCategories"].type = Boolean;
	OrderType._meta_.fields["isHidden"] = {};
	OrderType._meta_.fields["isHidden"].type = Boolean;
	OrderType._meta_.fields["fee"] = {};
	OrderType._meta_.fields["fee"].type = Number;
	OrderType._meta_.fields["minOrderAmount"] = {};
	OrderType._meta_.fields["minOrderAmount"].type = Number;
	OrderType._meta_.fields["maxOrderAmount"] = {};
	OrderType._meta_.fields["maxOrderAmount"].type = Number;
	OrderType._meta_.fields["maxRadius"] = {};
	OrderType._meta_.fields["maxRadius"].type = Number;
	OrderType._meta_.fields["avgOrderTime"] = {};
	OrderType._meta_.fields["avgOrderTime"].type = Number;
	OrderType._meta_.fields["hoursAvailable"] = {};
	OrderType._meta_.fields["hoursAvailable"].type = order_HoursAvailable;
	OrderType._meta_.fields["customerIdMethod"] = {};
	OrderType._meta_.fields["customerIdMethod"].type = order_CustomerIdMethod;
	OrderType._meta_.fields["isDeleted"] = {};
	OrderType._meta_.fields["isDeleted"].type = Boolean;
	OrderType._meta_.fields["systemOrderTypeId"] = {};
	OrderType._meta_.fields["systemOrderTypeId"].type = String;
	OrderType._meta_.fields["systemOrderTypeDatabaseId"] = {};
	OrderType._meta_.fields["systemOrderTypeDatabaseId"].type = Number;
	OrderType._meta_.fields["hours"] = {};
	OrderType._meta_.fields["hours"].type = hours_HoursSet;
	OrderType._meta_.fields["categories"] = {};
	OrderType._meta_.fields["categories"].type = Array;
	OrderType._meta_.fields["categories"].elementType = base_Reference;

	//
	// Expose the module.
	//
	if (true) {
	module.exports = OrderType;
	}



/***/ }),
/* 245 */
/***/ (function(module, exports, __webpack_require__) {

	/**
	 * Autogenerated by Avro
	 * 
	 * DO NOT EDIT DIRECTLY
	 */

	var payments_AdditionalChargeType = __webpack_require__(432);

	/**
	* @constructor
	* @memberof payments
	*/
	var AdditionalChargeAmount = function() {
	  this._class_ = AdditionalChargeAmount;
	  this.id = undefined;
	  this.amount = undefined;
	  this.rate = undefined;
	  this.type = undefined;
	};


	/**
	* Set the field value
	* Additional charge id
	*
	* @memberof payments.AdditionalChargeAmount
	* @param {String} id 
	*/
	AdditionalChargeAmount.prototype.setId = function(id) {
	  this.id = id;
	};

	/**
	* Get the field value
	* Additional charge id
	* @memberof payments.AdditionalChargeAmount
	* @return {String} 
	*/
	AdditionalChargeAmount.prototype.getId = function() {
	  return this.id;
	};

	/**
	* Set the field value
	* Amount of the additional charge
	*
	* @memberof payments.AdditionalChargeAmount
	* @param {Number} amount must be a long integer
	*/
	AdditionalChargeAmount.prototype.setAmount = function(amount) {
	  this.amount = amount;
	};

	/**
	* Get the field value
	* Amount of the additional charge
	* @memberof payments.AdditionalChargeAmount
	* @return {Number} must be a long integer
	*/
	AdditionalChargeAmount.prototype.getAmount = function() {
	  return this.amount;
	};

	/**
	* Set the field value
	* Percent rate of the additional charge times 10000
	*
	* @memberof payments.AdditionalChargeAmount
	* @param {Number} rate must be a long integer
	*/
	AdditionalChargeAmount.prototype.setRate = function(rate) {
	  this.rate = rate;
	};

	/**
	* Get the field value
	* Percent rate of the additional charge times 10000
	* @memberof payments.AdditionalChargeAmount
	* @return {Number} must be a long integer
	*/
	AdditionalChargeAmount.prototype.getRate = function() {
	  return this.rate;
	};

	/**
	* Set the field value
	* The type of additional charge
	*
	* @memberof payments.AdditionalChargeAmount
	* @param {payments.AdditionalChargeType} type 
	*/
	AdditionalChargeAmount.prototype.setType = function(type) {
	  this.type = type;
	};

	/**
	* Get the field value
	* The type of additional charge
	* @memberof payments.AdditionalChargeAmount
	* @return {payments.AdditionalChargeType} 
	*/
	AdditionalChargeAmount.prototype.getType = function() {
	  return this.type;
	};

	/**
	* @memberof payments.AdditionalChargeAmount
	* @private
	*/
	AdditionalChargeAmount.prototype.getMetaInfo = function(fieldName) {
	  var curclass = this._class_;
	  do {
	    var fieldMetaInfo = curclass._meta_.fields[fieldName];
	    if(fieldMetaInfo) {
	      return fieldMetaInfo;
	    }
	    if(curclass._meta_._superMeta_) {
	      curclass = curclass._meta_._superMeta_._class_;
	    } else {
	      curclass = null;
	    }
	  } while(curclass);
	  return null;
	};

	AdditionalChargeAmount.prototype.toString = function() {
	  return JSON.stringify(this);
	};

	AdditionalChargeAmount._meta_ =  {fields:  {}};
	AdditionalChargeAmount._meta_._class_ =  AdditionalChargeAmount;
	AdditionalChargeAmount._meta_.fields["id"] = {};
	AdditionalChargeAmount._meta_.fields["id"].type = String;
	AdditionalChargeAmount._meta_.fields["amount"] = {};
	AdditionalChargeAmount._meta_.fields["amount"].type = Number;
	AdditionalChargeAmount._meta_.fields["rate"] = {};
	AdditionalChargeAmount._meta_.fields["rate"].type = Number;
	AdditionalChargeAmount._meta_.fields["type"] = {};
	AdditionalChargeAmount._meta_.fields["type"].type = payments_AdditionalChargeType;

	//
	// Expose the module.
	//
	if (true) {
	module.exports = AdditionalChargeAmount;
	}



/***/ }),
/* 246 */
/***/ (function(module, exports, __webpack_require__) {

	/**
	 * Autogenerated by Avro
	 * 
	 * DO NOT EDIT DIRECTLY
	 */

	var payments_BatchType = __webpack_require__(248);
	var payments_BatchTransactions = __webpack_require__(435);
	var payments_BatchDetail = __webpack_require__(433);
	var payments_BatchState = __webpack_require__(247);

	/**
	* @constructor
	* @memberof payments
	*/
	var Batch = function() {
	  this._class_ = Batch;
	  this.id = undefined;
	  this.txCount = 0;
	  this.totalBatchAmount = 0;
	  this.devices = undefined;
	  this.state = payments_BatchState["OPEN"];
	  this.batchType = undefined;
	  this.createdTime = undefined;
	  this.modifiedTime = undefined;
	  this.closeoutTimeDifference = undefined;
	  this.batchDetails = undefined;
	  this.batchTransactions = undefined;
	};


	/**
	* Set the field value
	* @memberof payments.Batch
	* @param {String} id 
	*/
	Batch.prototype.setId = function(id) {
	  this.id = id;
	};

	/**
	* Get the field value
	* @memberof payments.Batch
	* @return {String} 
	*/
	Batch.prototype.getId = function() {
	  return this.id;
	};

	/**
	* Set the field value
	* The number of transactions being batched
	*
	* @memberof payments.Batch
	* @param {Number} txCount must be a long integer
	*/
	Batch.prototype.setTxCount = function(txCount) {
	  this.txCount = txCount;
	};

	/**
	* Get the field value
	* The number of transactions being batched
	* @memberof payments.Batch
	* @return {Number} must be a long integer
	*/
	Batch.prototype.getTxCount = function() {
	  return this.txCount;
	};

	/**
	* Set the field value
	* Total amount closed
	*
	* @memberof payments.Batch
	* @param {Number} totalBatchAmount must be a long integer
	*/
	Batch.prototype.setTotalBatchAmount = function(totalBatchAmount) {
	  this.totalBatchAmount = totalBatchAmount;
	};

	/**
	* Get the field value
	* Total amount closed
	* @memberof payments.Batch
	* @return {Number} must be a long integer
	*/
	Batch.prototype.getTotalBatchAmount = function() {
	  return this.totalBatchAmount;
	};

	/**
	* Set the field value
	* List of devices in batch
	*
	* @memberof payments.Batch
	* @param {String} devices 
	*/
	Batch.prototype.setDevices = function(devices) {
	  this.devices = devices;
	};

	/**
	* Get the field value
	* List of devices in batch
	* @memberof payments.Batch
	* @return {String} 
	*/
	Batch.prototype.getDevices = function() {
	  return this.devices;
	};

	/**
	* Set the field value
	* @memberof payments.Batch
	* @param {payments.BatchState} state 
	*/
	Batch.prototype.setState = function(state) {
	  this.state = state;
	};

	/**
	* Get the field value
	* @memberof payments.Batch
	* @return {payments.BatchState} 
	*/
	Batch.prototype.getState = function() {
	  return this.state;
	};

	/**
	* Set the field value
	* @memberof payments.Batch
	* @param {payments.BatchType} batchType 
	*/
	Batch.prototype.setBatchType = function(batchType) {
	  this.batchType = batchType;
	};

	/**
	* Get the field value
	* @memberof payments.Batch
	* @return {payments.BatchType} 
	*/
	Batch.prototype.getBatchType = function() {
	  return this.batchType;
	};

	/**
	* Set the field value
	* Created time of batch
	*
	* @memberof payments.Batch
	* @param {Number} createdTime must be a long integer
	*/
	Batch.prototype.setCreatedTime = function(createdTime) {
	  this.createdTime = createdTime;
	};

	/**
	* Get the field value
	* Created time of batch
	* @memberof payments.Batch
	* @return {Number} must be a long integer
	*/
	Batch.prototype.getCreatedTime = function() {
	  return this.createdTime;
	};

	/**
	* Set the field value
	* Modified time of batch
	*
	* @memberof payments.Batch
	* @param {Number} modifiedTime must be a long integer
	*/
	Batch.prototype.setModifiedTime = function(modifiedTime) {
	  this.modifiedTime = modifiedTime;
	};

	/**
	* Get the field value
	* Modified time of batch
	* @memberof payments.Batch
	* @return {Number} must be a long integer
	*/
	Batch.prototype.getModifiedTime = function() {
	  return this.modifiedTime;
	};

	/**
	* Set the field value
	* Time difference in minutes between expected and actual closeout
	*
	* @memberof payments.Batch
	* @param {Number} closeoutTimeDifference must be a long integer
	*/
	Batch.prototype.setCloseoutTimeDifference = function(closeoutTimeDifference) {
	  this.closeoutTimeDifference = closeoutTimeDifference;
	};

	/**
	* Get the field value
	* Time difference in minutes between expected and actual closeout
	* @memberof payments.Batch
	* @return {Number} must be a long integer
	*/
	Batch.prototype.getCloseoutTimeDifference = function() {
	  return this.closeoutTimeDifference;
	};

	/**
	* Set the field value
	* Details split based on card / employees
	*
	* @memberof payments.Batch
	* @param {payments.BatchDetail} batchDetails 
	*/
	Batch.prototype.setBatchDetails = function(batchDetails) {
	  this.batchDetails = batchDetails;
	};

	/**
	* Get the field value
	* Details split based on card / employees
	* @memberof payments.Batch
	* @return {payments.BatchDetail} 
	*/
	Batch.prototype.getBatchDetails = function() {
	  return this.batchDetails;
	};

	/**
	* Set the field value
	* List of payments, refunds, and gift card transaction reference objects in the batch
	*
	* @memberof payments.Batch
	* @param {payments.BatchTransactions} batchTransactions 
	*/
	Batch.prototype.setBatchTransactions = function(batchTransactions) {
	  this.batchTransactions = batchTransactions;
	};

	/**
	* Get the field value
	* List of payments, refunds, and gift card transaction reference objects in the batch
	* @memberof payments.Batch
	* @return {payments.BatchTransactions} 
	*/
	Batch.prototype.getBatchTransactions = function() {
	  return this.batchTransactions;
	};

	/**
	* @memberof payments.Batch
	* @private
	*/
	Batch.prototype.getMetaInfo = function(fieldName) {
	  var curclass = this._class_;
	  do {
	    var fieldMetaInfo = curclass._meta_.fields[fieldName];
	    if(fieldMetaInfo) {
	      return fieldMetaInfo;
	    }
	    if(curclass._meta_._superMeta_) {
	      curclass = curclass._meta_._superMeta_._class_;
	    } else {
	      curclass = null;
	    }
	  } while(curclass);
	  return null;
	};

	Batch.prototype.toString = function() {
	  return JSON.stringify(this);
	};

	Batch._meta_ =  {fields:  {}};
	Batch._meta_._class_ =  Batch;
	Batch._meta_.fields["id"] = {};
	Batch._meta_.fields["id"].type = String;
	Batch._meta_.fields["txCount"] = {};
	Batch._meta_.fields["txCount"].type = Number;
	Batch._meta_.fields["totalBatchAmount"] = {};
	Batch._meta_.fields["totalBatchAmount"].type = Number;
	Batch._meta_.fields["devices"] = {};
	Batch._meta_.fields["devices"].type = String;
	Batch._meta_.fields["state"] = {};
	Batch._meta_.fields["state"].type = payments_BatchState;
	Batch._meta_.fields["batchType"] = {};
	Batch._meta_.fields["batchType"].type = payments_BatchType;
	Batch._meta_.fields["createdTime"] = {};
	Batch._meta_.fields["createdTime"].type = Number;
	Batch._meta_.fields["modifiedTime"] = {};
	Batch._meta_.fields["modifiedTime"].type = Number;
	Batch._meta_.fields["closeoutTimeDifference"] = {};
	Batch._meta_.fields["closeoutTimeDifference"].type = Number;
	Batch._meta_.fields["batchDetails"] = {};
	Batch._meta_.fields["batchDetails"].type = payments_BatchDetail;
	Batch._meta_.fields["batchTransactions"] = {};
	Batch._meta_.fields["batchTransactions"].type = payments_BatchTransactions;

	//
	// Expose the module.
	//
	if (true) {
	module.exports = Batch;
	}



/***/ }),
/* 247 */
/***/ (function(module, exports, __webpack_require__) {

	/**
	 * Autogenerated by Avro
	 * 
	 * DO NOT EDIT DIRECTLY
	 */


	/**
	* @memberof payments
	* @enum {string}
	*/
	var BatchState = {
	  OPEN : "OPEN",
	  QUEUED_FOR_PROCESSING : "QUEUED_FOR_PROCESSING",
	  PROCESSING : "PROCESSING",
	  CLOSED : "CLOSED",
	  FAILED : "FAILED"
	};


	//
	// Expose the module.
	//
	if (true) {
	module.exports = BatchState;
	}



/***/ }),
/* 248 */
/***/ (function(module, exports, __webpack_require__) {

	/**
	 * Autogenerated by Avro
	 * 
	 * DO NOT EDIT DIRECTLY
	 */


	/**
	* @memberof payments
	* @enum {string}
	*/
	var BatchType = {
	  MANUAL_CLOSE : "MANUAL_CLOSE",
	  AUTO_CLOSE : "AUTO_CLOSE"
	};


	//
	// Expose the module.
	//
	if (true) {
	module.exports = BatchType;
	}



/***/ }),
/* 249 */
/***/ (function(module, exports, __webpack_require__) {

	/**
	 * Autogenerated by Avro
	 * 
	 * DO NOT EDIT DIRECTLY
	 */

	var payments_IdType = __webpack_require__(450);

	/**
	* @constructor
	* @memberof payments
	*/
	var CashAdvanceCustomerIdentification = function() {
	  this._class_ = CashAdvanceCustomerIdentification;
	  this.idType = undefined;
	  this.serialNumber = undefined;
	  this.maskedSerialNumber = undefined;
	  this.encryptedSerialNumber = undefined;
	  this.expirationDate = undefined;
	  this.issuingState = undefined;
	  this.issuingCountry = undefined;
	  this.customerName = undefined;
	  this.addressStreet1 = undefined;
	  this.addressStreet2 = undefined;
	  this.addressCity = undefined;
	  this.addressState = undefined;
	  this.addressZipCode = undefined;
	  this.addressCountry = undefined;
	};


	/**
	* Set the field value
	* @memberof payments.CashAdvanceCustomerIdentification
	* @param {payments.IdType} idType 
	*/
	CashAdvanceCustomerIdentification.prototype.setIdType = function(idType) {
	  this.idType = idType;
	};

	/**
	* Get the field value
	* @memberof payments.CashAdvanceCustomerIdentification
	* @return {payments.IdType} 
	*/
	CashAdvanceCustomerIdentification.prototype.getIdType = function() {
	  return this.idType;
	};

	/**
	* Set the field value
	* Identification serial number
	*
	* @memberof payments.CashAdvanceCustomerIdentification
	* @param {String} serialNumber 
	*/
	CashAdvanceCustomerIdentification.prototype.setSerialNumber = function(serialNumber) {
	  this.serialNumber = serialNumber;
	};

	/**
	* Get the field value
	* Identification serial number
	* @memberof payments.CashAdvanceCustomerIdentification
	* @return {String} 
	*/
	CashAdvanceCustomerIdentification.prototype.getSerialNumber = function() {
	  return this.serialNumber;
	};

	/**
	* Set the field value
	* Masked identification serial number
	*
	* @memberof payments.CashAdvanceCustomerIdentification
	* @param {String} maskedSerialNumber 
	*/
	CashAdvanceCustomerIdentification.prototype.setMaskedSerialNumber = function(maskedSerialNumber) {
	  this.maskedSerialNumber = maskedSerialNumber;
	};

	/**
	* Get the field value
	* Masked identification serial number
	* @memberof payments.CashAdvanceCustomerIdentification
	* @return {String} 
	*/
	CashAdvanceCustomerIdentification.prototype.getMaskedSerialNumber = function() {
	  return this.maskedSerialNumber;
	};

	/**
	* Set the field value
	* Encrypted identification serial number
	*
	* @memberof payments.CashAdvanceCustomerIdentification
	* @param {String} encryptedSerialNumber 
	*/
	CashAdvanceCustomerIdentification.prototype.setEncryptedSerialNumber = function(encryptedSerialNumber) {
	  this.encryptedSerialNumber = encryptedSerialNumber;
	};

	/**
	* Get the field value
	* Encrypted identification serial number
	* @memberof payments.CashAdvanceCustomerIdentification
	* @return {String} 
	*/
	CashAdvanceCustomerIdentification.prototype.getEncryptedSerialNumber = function() {
	  return this.encryptedSerialNumber;
	};

	/**
	* Set the field value
	* Expiration date in format MMDDYYYY
	*
	* @memberof payments.CashAdvanceCustomerIdentification
	* @param {String} expirationDate 
	*/
	CashAdvanceCustomerIdentification.prototype.setExpirationDate = function(expirationDate) {
	  this.expirationDate = expirationDate;
	};

	/**
	* Get the field value
	* Expiration date in format MMDDYYYY
	* @memberof payments.CashAdvanceCustomerIdentification
	* @return {String} 
	*/
	CashAdvanceCustomerIdentification.prototype.getExpirationDate = function() {
	  return this.expirationDate;
	};

	/**
	* Set the field value
	* State in which identification was issued
	*
	* @memberof payments.CashAdvanceCustomerIdentification
	* @param {String} issuingState 
	*/
	CashAdvanceCustomerIdentification.prototype.setIssuingState = function(issuingState) {
	  this.issuingState = issuingState;
	};

	/**
	* Get the field value
	* State in which identification was issued
	* @memberof payments.CashAdvanceCustomerIdentification
	* @return {String} 
	*/
	CashAdvanceCustomerIdentification.prototype.getIssuingState = function() {
	  return this.issuingState;
	};

	/**
	* Set the field value
	* Country in which identification was issued
	*
	* @memberof payments.CashAdvanceCustomerIdentification
	* @param {String} issuingCountry 
	*/
	CashAdvanceCustomerIdentification.prototype.setIssuingCountry = function(issuingCountry) {
	  this.issuingCountry = issuingCountry;
	};

	/**
	* Get the field value
	* Country in which identification was issued
	* @memberof payments.CashAdvanceCustomerIdentification
	* @return {String} 
	*/
	CashAdvanceCustomerIdentification.prototype.getIssuingCountry = function() {
	  return this.issuingCountry;
	};

	/**
	* Set the field value
	* Full customer name
	*
	* @memberof payments.CashAdvanceCustomerIdentification
	* @param {String} customerName 
	*/
	CashAdvanceCustomerIdentification.prototype.setCustomerName = function(customerName) {
	  this.customerName = customerName;
	};

	/**
	* Get the field value
	* Full customer name
	* @memberof payments.CashAdvanceCustomerIdentification
	* @return {String} 
	*/
	CashAdvanceCustomerIdentification.prototype.getCustomerName = function() {
	  return this.customerName;
	};

	/**
	* Set the field value
	* @memberof payments.CashAdvanceCustomerIdentification
	* @param {String} addressStreet1 
	*/
	CashAdvanceCustomerIdentification.prototype.setAddressStreet1 = function(addressStreet1) {
	  this.addressStreet1 = addressStreet1;
	};

	/**
	* Get the field value
	* @memberof payments.CashAdvanceCustomerIdentification
	* @return {String} 
	*/
	CashAdvanceCustomerIdentification.prototype.getAddressStreet1 = function() {
	  return this.addressStreet1;
	};

	/**
	* Set the field value
	* @memberof payments.CashAdvanceCustomerIdentification
	* @param {String} addressStreet2 
	*/
	CashAdvanceCustomerIdentification.prototype.setAddressStreet2 = function(addressStreet2) {
	  this.addressStreet2 = addressStreet2;
	};

	/**
	* Get the field value
	* @memberof payments.CashAdvanceCustomerIdentification
	* @return {String} 
	*/
	CashAdvanceCustomerIdentification.prototype.getAddressStreet2 = function() {
	  return this.addressStreet2;
	};

	/**
	* Set the field value
	* @memberof payments.CashAdvanceCustomerIdentification
	* @param {String} addressCity 
	*/
	CashAdvanceCustomerIdentification.prototype.setAddressCity = function(addressCity) {
	  this.addressCity = addressCity;
	};

	/**
	* Get the field value
	* @memberof payments.CashAdvanceCustomerIdentification
	* @return {String} 
	*/
	CashAdvanceCustomerIdentification.prototype.getAddressCity = function() {
	  return this.addressCity;
	};

	/**
	* Set the field value
	* @memberof payments.CashAdvanceCustomerIdentification
	* @param {String} addressState 
	*/
	CashAdvanceCustomerIdentification.prototype.setAddressState = function(addressState) {
	  this.addressState = addressState;
	};

	/**
	* Get the field value
	* @memberof payments.CashAdvanceCustomerIdentification
	* @return {String} 
	*/
	CashAdvanceCustomerIdentification.prototype.getAddressState = function() {
	  return this.addressState;
	};

	/**
	* Set the field value
	* @memberof payments.CashAdvanceCustomerIdentification
	* @param {String} addressZipCode 
	*/
	CashAdvanceCustomerIdentification.prototype.setAddressZipCode = function(addressZipCode) {
	  this.addressZipCode = addressZipCode;
	};

	/**
	* Get the field value
	* @memberof payments.CashAdvanceCustomerIdentification
	* @return {String} 
	*/
	CashAdvanceCustomerIdentification.prototype.getAddressZipCode = function() {
	  return this.addressZipCode;
	};

	/**
	* Set the field value
	* @memberof payments.CashAdvanceCustomerIdentification
	* @param {String} addressCountry 
	*/
	CashAdvanceCustomerIdentification.prototype.setAddressCountry = function(addressCountry) {
	  this.addressCountry = addressCountry;
	};

	/**
	* Get the field value
	* @memberof payments.CashAdvanceCustomerIdentification
	* @return {String} 
	*/
	CashAdvanceCustomerIdentification.prototype.getAddressCountry = function() {
	  return this.addressCountry;
	};

	/**
	* @memberof payments.CashAdvanceCustomerIdentification
	* @private
	*/
	CashAdvanceCustomerIdentification.prototype.getMetaInfo = function(fieldName) {
	  var curclass = this._class_;
	  do {
	    var fieldMetaInfo = curclass._meta_.fields[fieldName];
	    if(fieldMetaInfo) {
	      return fieldMetaInfo;
	    }
	    if(curclass._meta_._superMeta_) {
	      curclass = curclass._meta_._superMeta_._class_;
	    } else {
	      curclass = null;
	    }
	  } while(curclass);
	  return null;
	};

	CashAdvanceCustomerIdentification.prototype.toString = function() {
	  return JSON.stringify(this);
	};

	CashAdvanceCustomerIdentification._meta_ =  {fields:  {}};
	CashAdvanceCustomerIdentification._meta_._class_ =  CashAdvanceCustomerIdentification;
	CashAdvanceCustomerIdentification._meta_.fields["idType"] = {};
	CashAdvanceCustomerIdentification._meta_.fields["idType"].type = payments_IdType;
	CashAdvanceCustomerIdentification._meta_.fields["serialNumber"] = {};
	CashAdvanceCustomerIdentification._meta_.fields["serialNumber"].type = String;
	CashAdvanceCustomerIdentification._meta_.fields["maskedSerialNumber"] = {};
	CashAdvanceCustomerIdentification._meta_.fields["maskedSerialNumber"].type = String;
	CashAdvanceCustomerIdentification._meta_.fields["encryptedSerialNumber"] = {};
	CashAdvanceCustomerIdentification._meta_.fields["encryptedSerialNumber"].type = String;
	CashAdvanceCustomerIdentification._meta_.fields["expirationDate"] = {};
	CashAdvanceCustomerIdentification._meta_.fields["expirationDate"].type = String;
	CashAdvanceCustomerIdentification._meta_.fields["issuingState"] = {};
	CashAdvanceCustomerIdentification._meta_.fields["issuingState"].type = String;
	CashAdvanceCustomerIdentification._meta_.fields["issuingCountry"] = {};
	CashAdvanceCustomerIdentification._meta_.fields["issuingCountry"].type = String;
	CashAdvanceCustomerIdentification._meta_.fields["customerName"] = {};
	CashAdvanceCustomerIdentification._meta_.fields["customerName"].type = String;
	CashAdvanceCustomerIdentification._meta_.fields["addressStreet1"] = {};
	CashAdvanceCustomerIdentification._meta_.fields["addressStreet1"].type = String;
	CashAdvanceCustomerIdentification._meta_.fields["addressStreet2"] = {};
	CashAdvanceCustomerIdentification._meta_.fields["addressStreet2"].type = String;
	CashAdvanceCustomerIdentification._meta_.fields["addressCity"] = {};
	CashAdvanceCustomerIdentification._meta_.fields["addressCity"].type = String;
	CashAdvanceCustomerIdentification._meta_.fields["addressState"] = {};
	CashAdvanceCustomerIdentification._meta_.fields["addressState"].type = String;
	CashAdvanceCustomerIdentification._meta_.fields["addressZipCode"] = {};
	CashAdvanceCustomerIdentification._meta_.fields["addressZipCode"].type = String;
	CashAdvanceCustomerIdentification._meta_.fields["addressCountry"] = {};
	CashAdvanceCustomerIdentification._meta_.fields["addressCountry"].type = String;

	//
	// Expose the module.
	//
	if (true) {
	module.exports = CashAdvanceCustomerIdentification;
	}



/***/ }),
/* 250 */
/***/ (function(module, exports, __webpack_require__) {

	/**
	 * Autogenerated by Avro
	 * 
	 * DO NOT EDIT DIRECTLY
	 */


	/**
	* @constructor
	* @memberof payments
	*/
	var DCCInfo = function() {
	  this._class_ = DCCInfo;
	  this.inquiryRateId = undefined;
	  this.dccApplied = undefined;
	  this.foreignCurrencyCode = undefined;
	  this.foreignAmount = undefined;
	  this.exchangeRate = undefined;
	  this.marginRatePercentage = undefined;
	  this.exchangeRateSourceName = undefined;
	  this.exchangeRateSourceTimeStamp = undefined;
	};


	/**
	* Set the field value
	* Inquiry Rate ID (IPG)
	*
	* @memberof payments.DCCInfo
	* @param {Number} inquiryRateId must be a long integer
	*/
	DCCInfo.prototype.setInquiryRateId = function(inquiryRateId) {
	  this.inquiryRateId = inquiryRateId;
	};

	/**
	* Get the field value
	* Inquiry Rate ID (IPG)
	* @memberof payments.DCCInfo
	* @return {Number} must be a long integer
	*/
	DCCInfo.prototype.getInquiryRateId = function() {
	  return this.inquiryRateId;
	};

	/**
	* Set the field value
	* Flag indicating whether DCC was applied on this txn
	*
	* @memberof payments.DCCInfo
	* @param {Boolean} dccApplied 
	*/
	DCCInfo.prototype.setDccApplied = function(dccApplied) {
	  this.dccApplied = dccApplied;
	};

	/**
	* Get the field value
	* Flag indicating whether DCC was applied on this txn
	* @memberof payments.DCCInfo
	* @return {Boolean} 
	*/
	DCCInfo.prototype.getDccApplied = function() {
	  return this.dccApplied;
	};

	/**
	* Set the field value
	* Foreign currency code
	*
	* @memberof payments.DCCInfo
	* @param {String} foreignCurrencyCode 
	*/
	DCCInfo.prototype.setForeignCurrencyCode = function(foreignCurrencyCode) {
	  this.foreignCurrencyCode = foreignCurrencyCode;
	};

	/**
	* Get the field value
	* Foreign currency code
	* @memberof payments.DCCInfo
	* @return {String} 
	*/
	DCCInfo.prototype.getForeignCurrencyCode = function() {
	  return this.foreignCurrencyCode;
	};

	/**
	* Set the field value
	* Foreign (transaction) amount
	*
	* @memberof payments.DCCInfo
	* @param {Number} foreignAmount must be a long integer
	*/
	DCCInfo.prototype.setForeignAmount = function(foreignAmount) {
	  this.foreignAmount = foreignAmount;
	};

	/**
	* Get the field value
	* Foreign (transaction) amount
	* @memberof payments.DCCInfo
	* @return {Number} must be a long integer
	*/
	DCCInfo.prototype.getForeignAmount = function() {
	  return this.foreignAmount;
	};

	/**
	* Set the field value
	* Exchange Rate
	*
	* @memberof payments.DCCInfo
	* @param {Number} exchangeRate must be a double
	*/
	DCCInfo.prototype.setExchangeRate = function(exchangeRate) {
	  this.exchangeRate = exchangeRate;
	};

	/**
	* Get the field value
	* Exchange Rate
	* @memberof payments.DCCInfo
	* @return {Number} must be a double
	*/
	DCCInfo.prototype.getExchangeRate = function() {
	  return this.exchangeRate;
	};

	/**
	* Set the field value
	* Margin Rate Percentage
	*
	* @memberof payments.DCCInfo
	* @param {String} marginRatePercentage 
	*/
	DCCInfo.prototype.setMarginRatePercentage = function(marginRatePercentage) {
	  this.marginRatePercentage = marginRatePercentage;
	};

	/**
	* Get the field value
	* Margin Rate Percentage
	* @memberof payments.DCCInfo
	* @return {String} 
	*/
	DCCInfo.prototype.getMarginRatePercentage = function() {
	  return this.marginRatePercentage;
	};

	/**
	* Set the field value
	* Exchange Rate Source Name
	*
	* @memberof payments.DCCInfo
	* @param {String} exchangeRateSourceName 
	*/
	DCCInfo.prototype.setExchangeRateSourceName = function(exchangeRateSourceName) {
	  this.exchangeRateSourceName = exchangeRateSourceName;
	};

	/**
	* Get the field value
	* Exchange Rate Source Name
	* @memberof payments.DCCInfo
	* @return {String} 
	*/
	DCCInfo.prototype.getExchangeRateSourceName = function() {
	  return this.exchangeRateSourceName;
	};

	/**
	* Set the field value
	* Exchange Rate Source Timestamp
	*
	* @memberof payments.DCCInfo
	* @param {String} exchangeRateSourceTimeStamp 
	*/
	DCCInfo.prototype.setExchangeRateSourceTimeStamp = function(exchangeRateSourceTimeStamp) {
	  this.exchangeRateSourceTimeStamp = exchangeRateSourceTimeStamp;
	};

	/**
	* Get the field value
	* Exchange Rate Source Timestamp
	* @memberof payments.DCCInfo
	* @return {String} 
	*/
	DCCInfo.prototype.getExchangeRateSourceTimeStamp = function() {
	  return this.exchangeRateSourceTimeStamp;
	};

	/**
	* @memberof payments.DCCInfo
	* @private
	*/
	DCCInfo.prototype.getMetaInfo = function(fieldName) {
	  var curclass = this._class_;
	  do {
	    var fieldMetaInfo = curclass._meta_.fields[fieldName];
	    if(fieldMetaInfo) {
	      return fieldMetaInfo;
	    }
	    if(curclass._meta_._superMeta_) {
	      curclass = curclass._meta_._superMeta_._class_;
	    } else {
	      curclass = null;
	    }
	  } while(curclass);
	  return null;
	};

	DCCInfo.prototype.toString = function() {
	  return JSON.stringify(this);
	};

	DCCInfo._meta_ =  {fields:  {}};
	DCCInfo._meta_._class_ =  DCCInfo;
	DCCInfo._meta_.fields["inquiryRateId"] = {};
	DCCInfo._meta_.fields["inquiryRateId"].type = Number;
	DCCInfo._meta_.fields["dccApplied"] = {};
	DCCInfo._meta_.fields["dccApplied"].type = Boolean;
	DCCInfo._meta_.fields["foreignCurrencyCode"] = {};
	DCCInfo._meta_.fields["foreignCurrencyCode"].type = String;
	DCCInfo._meta_.fields["foreignAmount"] = {};
	DCCInfo._meta_.fields["foreignAmount"].type = Number;
	DCCInfo._meta_.fields["exchangeRate"] = {};
	DCCInfo._meta_.fields["exchangeRate"].type = Number;
	DCCInfo._meta_.fields["marginRatePercentage"] = {};
	DCCInfo._meta_.fields["marginRatePercentage"].type = String;
	DCCInfo._meta_.fields["exchangeRateSourceName"] = {};
	DCCInfo._meta_.fields["exchangeRateSourceName"].type = String;
	DCCInfo._meta_.fields["exchangeRateSourceTimeStamp"] = {};
	DCCInfo._meta_.fields["exchangeRateSourceTimeStamp"].type = String;

	//
	// Expose the module.
	//
	if (true) {
	module.exports = DCCInfo;
	}



/***/ }),
/* 251 */
/***/ (function(module, exports, __webpack_require__) {

	/**
	 * Autogenerated by Avro
	 * 
	 * DO NOT EDIT DIRECTLY
	 */


	/**
	* @memberof payments
	* @enum {string}
	*/
	var DataEntryLocation = {
	  ON_SCREEN : "ON_SCREEN",
	  ON_PAPER : "ON_PAPER",
	  NONE : "NONE"
	};


	//
	// Expose the module.
	//
	if (true) {
	module.exports = DataEntryLocation;
	}



/***/ }),
/* 252 */
/***/ (function(module, exports, __webpack_require__) {

	/**
	 * Autogenerated by Avro
	 * 
	 * DO NOT EDIT DIRECTLY
	 */


	/**
	* @memberof payments
	* @enum {string}
	*/
	var FraudResponseAction = {
	  VOID : "VOID",
	  PROMPT : "PROMPT",
	  IGNORE : "IGNORE",
	  DECLINE : "DECLINE"
	};


	//
	// Expose the module.
	//
	if (true) {
	module.exports = FraudResponseAction;
	}



/***/ }),
/* 253 */
/***/ (function(module, exports, __webpack_require__) {

	/**
	 * Autogenerated by Avro
	 * 
	 * DO NOT EDIT DIRECTLY
	 */


	/**
	* @memberof payments
	* @enum {string}
	*/
	var GatewayTxState = {
	  INITIATED : "INITIATED",
	  INITIATED_ON_AUTH : "INITIATED_ON_AUTH",
	  ACKNOWLEDGED : "ACKNOWLEDGED",
	  CONNECT_FAILED : "CONNECT_FAILED",
	  TIMEOUT : "TIMEOUT",
	  FAILED : "FAILED",
	  REVERSE_INITIATED : "REVERSE_INITIATED",
	  REVERSE_INITIATED_ON_AUTH : "REVERSE_INITIATED_ON_AUTH",
	  REVERSED : "REVERSED",
	  REVERSAL_FAILED : "REVERSAL_FAILED",
	  EXTERNAL : "EXTERNAL"
	};


	//
	// Expose the module.
	//
	if (true) {
	module.exports = GatewayTxState;
	}



/***/ }),
/* 254 */
/***/ (function(module, exports, __webpack_require__) {

	/**
	 * Autogenerated by Avro
	 * 
	 * DO NOT EDIT DIRECTLY
	 */


	/**
	* @memberof payments
	* @enum {string}
	*/
	var TipMode = {
	  TIP_PROVIDED : "TIP_PROVIDED",
	  ON_SCREEN_BEFORE_PAYMENT : "ON_SCREEN_BEFORE_PAYMENT",
	  ON_SCREEN_AFTER_PAYMENT : "ON_SCREEN_AFTER_PAYMENT",
	  ON_PAPER : "ON_PAPER",
	  NO_TIP : "NO_TIP"
	};


	//
	// Expose the module.
	//
	if (true) {
	module.exports = TipMode;
	}



/***/ }),
/* 255 */
/***/ (function(module, exports, __webpack_require__) {

	/**
	 * Autogenerated by Avro
	 * 
	 * DO NOT EDIT DIRECTLY
	 */

	var payments_VasServiceProvider = __webpack_require__(469);

	/**
	* @constructor
	* @memberof payments
	*/
	var VasConfig = function() {
	  this._class_ = VasConfig;
	  this.vasProviders = undefined;
	};


	/**
	* Set the field value
	* List of vas service providers who are interested in receiving vas data
	*
	* @memberof payments.VasConfig
	* @param {Array.<payments.VasServiceProvider>} vasProviders An array of 
	*/
	VasConfig.prototype.setVasProviders = function(vasProviders) {
	  this.vasProviders = vasProviders;
	};

	/**
	* Get the field value
	* List of vas service providers who are interested in receiving vas data
	* @memberof payments.VasConfig
	* @return {Array.<payments.VasServiceProvider>} An array of 
	*/
	VasConfig.prototype.getVasProviders = function() {
	  return this.vasProviders;
	};

	/**
	* @memberof payments.VasConfig
	* @private
	*/
	VasConfig.prototype.getMetaInfo = function(fieldName) {
	  var curclass = this._class_;
	  do {
	    var fieldMetaInfo = curclass._meta_.fields[fieldName];
	    if(fieldMetaInfo) {
	      return fieldMetaInfo;
	    }
	    if(curclass._meta_._superMeta_) {
	      curclass = curclass._meta_._superMeta_._class_;
	    } else {
	      curclass = null;
	    }
	  } while(curclass);
	  return null;
	};

	VasConfig.prototype.toString = function() {
	  return JSON.stringify(this);
	};

	VasConfig._meta_ =  {fields:  {}};
	VasConfig._meta_._class_ =  VasConfig;
	VasConfig._meta_.fields["vasProviders"] = {};
	VasConfig._meta_.fields["vasProviders"].type = Array;
	VasConfig._meta_.fields["vasProviders"].elementType = payments_VasServiceProvider;

	//
	// Expose the module.
	//
	if (true) {
	module.exports = VasConfig;
	}



/***/ }),
/* 256 */
/***/ (function(module, exports, __webpack_require__) {

	/**
	 * Autogenerated by Avro
	 * 
	 * DO NOT EDIT DIRECTLY
	 */


	/**
	* @memberof payments
	* @enum {string}
	*/
	var VasMode = {
	  PAY_ONLY : "PAY_ONLY",
	  VAS_ONLY : "VAS_ONLY",
	  VAS_OR_PAYMENT : "VAS_OR_PAYMENT",
	  VAS_AND_PAYMENT : "VAS_AND_PAYMENT"
	};


	//
	// Expose the module.
	//
	if (true) {
	module.exports = VasMode;
	}



/***/ }),
/* 257 */
/***/ (function(module, exports, __webpack_require__) {

	/**
	 * Autogenerated by Avro
	 * 
	 * DO NOT EDIT DIRECTLY
	 */


	/**
	Protocol identifier
	* @memberof payments
	* @enum {string}
	*/
	var VasProtocol = {
	  ST : "ST",
	  PK : "PK"
	};


	//
	// Expose the module.
	//
	if (true) {
	module.exports = VasProtocol;
	}



/***/ }),
/* 258 */
/***/ (function(module, exports, __webpack_require__) {

	/**
	 * Autogenerated by Avro
	 * 
	 * DO NOT EDIT DIRECTLY
	 */


	/**
	* @memberof printer
	* @enum {string}
	*/
	var PrintJobStatus = {
	  IN_QUEUE : "IN_QUEUE",
	  PRINTING : "PRINTING",
	  DONE : "DONE",
	  ERROR : "ERROR",
	  UNKNOWN : "UNKNOWN",
	  NOT_FOUND : "NOT_FOUND"
	};


	//
	// Expose the module.
	//
	if (true) {
	module.exports = PrintJobStatus;
	}



/***/ }),
/* 259 */
/***/ (function(module, exports, __webpack_require__) {

	/**
	 * Autogenerated by Avro
	 * 
	 * DO NOT EDIT DIRECTLY
	 */


	/**
	* @memberof remotemessage
	* @enum {string}
	*/
	var ErrorCode = {
	  ORDER_NOT_FOUND : "ORDER_NOT_FOUND",
	  PAYMENT_NOT_FOUND : "PAYMENT_NOT_FOUND",
	  FAIL : "FAIL"
	};


	//
	// Expose the module.
	//
	if (true) {
	module.exports = ErrorCode;
	}



/***/ }),
/* 260 */
/***/ (function(module, exports, __webpack_require__) {

	/**
	 * Autogenerated by Avro
	 * 
	 * DO NOT EDIT DIRECTLY
	 */


	/**
	* @constructor
	* @memberof remotemessage
	*/
	var ExternalDeviceStateData = function() {
	  this._class_ = ExternalDeviceStateData;
	  this.externalPaymentId = undefined;
	  this.customActivityId = undefined;
	};


	/**
	* Set the field value
	* External Payment Id, if applicable
	*
	* @memberof remotemessage.ExternalDeviceStateData
	* @param {String} externalPaymentId 
	*/
	ExternalDeviceStateData.prototype.setExternalPaymentId = function(externalPaymentId) {
	  this.externalPaymentId = externalPaymentId;
	};

	/**
	* Get the field value
	* External Payment Id, if applicable
	* @memberof remotemessage.ExternalDeviceStateData
	* @return {String} 
	*/
	ExternalDeviceStateData.prototype.getExternalPaymentId = function() {
	  return this.externalPaymentId;
	};

	/**
	* Set the field value
	* Custom Activity Id, if applicable
	*
	* @memberof remotemessage.ExternalDeviceStateData
	* @param {String} customActivityId 
	*/
	ExternalDeviceStateData.prototype.setCustomActivityId = function(customActivityId) {
	  this.customActivityId = customActivityId;
	};

	/**
	* Get the field value
	* Custom Activity Id, if applicable
	* @memberof remotemessage.ExternalDeviceStateData
	* @return {String} 
	*/
	ExternalDeviceStateData.prototype.getCustomActivityId = function() {
	  return this.customActivityId;
	};

	/**
	* @memberof remotemessage.ExternalDeviceStateData
	* @private
	*/
	ExternalDeviceStateData.prototype.getMetaInfo = function(fieldName) {
	  var curclass = this._class_;
	  do {
	    var fieldMetaInfo = curclass._meta_.fields[fieldName];
	    if(fieldMetaInfo) {
	      return fieldMetaInfo;
	    }
	    if(curclass._meta_._superMeta_) {
	      curclass = curclass._meta_._superMeta_._class_;
	    } else {
	      curclass = null;
	    }
	  } while(curclass);
	  return null;
	};

	ExternalDeviceStateData.prototype.toString = function() {
	  return JSON.stringify(this);
	};

	ExternalDeviceStateData._meta_ =  {fields:  {}};
	ExternalDeviceStateData._meta_._class_ =  ExternalDeviceStateData;
	ExternalDeviceStateData._meta_.fields["externalPaymentId"] = {};
	ExternalDeviceStateData._meta_.fields["externalPaymentId"].type = String;
	ExternalDeviceStateData._meta_.fields["customActivityId"] = {};
	ExternalDeviceStateData._meta_.fields["customActivityId"].type = String;

	//
	// Expose the module.
	//
	if (true) {
	module.exports = ExternalDeviceStateData;
	}



/***/ }),
/* 261 */
/***/ (function(module, exports, __webpack_require__) {

	/**
	 * Autogenerated by Avro
	 * 
	 * DO NOT EDIT DIRECTLY
	 */


	/**
	* @memberof remotemessage
	* @enum {string}
	*/
	var ExternalDeviceSubState = {
	  CUSTOM_ACTIVITY : "CUSTOM_ACTIVITY",
	  STARTING_PAYMENT_FLOW : "STARTING_PAYMENT_FLOW",
	  PROCESSING_PAYMENT : "PROCESSING_PAYMENT",
	  PROCESSING_CARD_DATA : "PROCESSING_CARD_DATA",
	  PROCESSING_CREDIT : "PROCESSING_CREDIT",
	  VERIFY_SIGNATURE : "VERIFY_SIGNATURE",
	  TIP_SCREEN : "TIP_SCREEN",
	  RECEIPT_SCREEN : "RECEIPT_SCREEN",
	  CONFIRM_PAYMENT : "CONFIRM_PAYMENT",
	  UNKNOWN : "UNKNOWN"
	};


	//
	// Expose the module.
	//
	if (true) {
	module.exports = ExternalDeviceSubState;
	}



/***/ }),
/* 262 */
/***/ (function(module, exports, __webpack_require__) {

	/**
	 * Autogenerated by Avro
	 * 
	 * DO NOT EDIT DIRECTLY
	 */

	var remotemessage_TransactionType = __webpack_require__(481);
	var payments_CashAdvanceCustomerIdentification = __webpack_require__(249);
	var payments_TaxableAmountRate = __webpack_require__(122);
	var apps_AppTracking = __webpack_require__(100);
	var payments_ServiceChargeAmount = __webpack_require__(121);
	var payments_VaultedCard = __webpack_require__(70);
	var payments_TransactionSettings = __webpack_require__(164);
	var payments_GermanInfo = __webpack_require__(103);

	/**
	 * @constructor
	 * @memberof remotemessage
	 */
	var PayIntent = function() {
	  this._class_ = PayIntent;
	  this.action = "com.clover.remote.protocol.action.START_REMOTE_PROTOCOL_PAY";
	  this.amount = undefined;
	  this.tippableAmount = undefined;
	  this.tipAmount = undefined;
	  this.taxAmount = undefined;
	  this.orderId = undefined;
	  this.paymentId = undefined;
	  this.employeeId = undefined;
	  this.transactionType = undefined;
	  this.taxableAmountRates = undefined;
	  this.serviceChargeAmount = undefined;
	  this.isDisableCashBack = undefined;
	  this.isTesting = undefined;
	  this.cardEntryMethods = undefined;
	  this.voiceAuthCode = undefined;
	  this.streetAddress = undefined;
	  this.postalCode = undefined;
	  this.isCardNotPresent = undefined;
	  this.cardDataMessage = undefined;
	  this.remotePrint = undefined;
	  this.transactionNo = undefined;
	  this.isForceSwipePinEntry = undefined;
	  this.disableRestartTransactionWhenFailed = undefined;
	  this.externalPaymentId = undefined;
	  this.vaultedCard = undefined;
	  this.allowOfflinePayment = undefined;
	  this.approveOfflinePaymentWithoutPrompt = undefined;
	  this.requiresRemoteConfirmation = undefined;
	  this.applicationTracking = undefined;
	  this.allowPartialAuth = true;
	  this.germanInfo = undefined;
	  this.cashAdvanceCustomerIdentification = undefined;
	  this.transactionSettings = undefined;
	  this.externalReferenceId = undefined;
	  this.passThroughValues = undefined;
	  this.isPresentQrcOnly = undefined;
	};


	/**
	 * Set the field value
	 * The action to fire in the device (com.clover.remote.protocol.action.START_REMOTE_PROTOCOL_PAY)
	 *
	 * @memberof remotemessage.PayIntent
	 * @param {String} action
	 */
	PayIntent.prototype.setAction = function(action) {
	  this.action = action;
	};

	/**
	 * Get the field value
	 * The action to fire in the device (com.clover.remote.protocol.action.START_REMOTE_PROTOCOL_PAY)
	 * @memberof remotemessage.PayIntent
	 * @return {String}
	 */
	PayIntent.prototype.getAction = function() {
	  return this.action;
	};

	/**
	 * Set the field value
	 * Amount for transaction
	 *
	 * @memberof remotemessage.PayIntent
	 * @param {Number|Null} amount must be a long integer,
	 */
	PayIntent.prototype.setAmount = function(amount) {
	  this.amount = amount;
	};

	/**
	 * Get the field value
	 * Amount for transaction
	 * @memberof remotemessage.PayIntent
	 * @return {Number|Null} must be a long integer,
	 */
	PayIntent.prototype.getAmount = function() {
	  return this.amount;
	};

	/**
	 * Set the field value
	 * Amount used when calculating on screen tips
	 *
	 * @memberof remotemessage.PayIntent
	 * @param {Number|Null} tippableAmount must be a long integer,
	 */
	PayIntent.prototype.setTippableAmount = function(tippableAmount) {
	  this.tippableAmount = tippableAmount;
	};

	/**
	 * Get the field value
	 * Amount used when calculating on screen tips
	 * @memberof remotemessage.PayIntent
	 * @return {Number|Null} must be a long integer,
	 */
	PayIntent.prototype.getTippableAmount = function() {
	  return this.tippableAmount;
	};

	/**
	 * Set the field value
	 * Amount paid in tips
	 *
	 * @memberof remotemessage.PayIntent
	 * @param {Number|Null} tipAmount must be a long integer,
	 */
	PayIntent.prototype.setTipAmount = function(tipAmount) {
	  this.tipAmount = tipAmount;
	};

	/**
	 * Get the field value
	 * Amount paid in tips
	 * @memberof remotemessage.PayIntent
	 * @return {Number|Null} must be a long integer,
	 */
	PayIntent.prototype.getTipAmount = function() {
	  return this.tipAmount;
	};

	/**
	 * Set the field value
	 * @memberof remotemessage.PayIntent
	 * @param {Number|Null} taxAmount must be a long integer,
	 */
	PayIntent.prototype.setTaxAmount = function(taxAmount) {
	  this.taxAmount = taxAmount;
	};

	/**
	 * Get the field value
	 * @memberof remotemessage.PayIntent
	 * @return {Number|Null} must be a long integer,
	 */
	PayIntent.prototype.getTaxAmount = function() {
	  return this.taxAmount;
	};

	/**
	 * Set the field value
	 * Unique identifier for a order
	 *
	 * @memberof remotemessage.PayIntent
	 * @param {String} orderId
	 */
	PayIntent.prototype.setOrderId = function(orderId) {
	  this.orderId = orderId;
	};

	/**
	 * Get the field value
	 * Unique identifier for a order
	 * @memberof remotemessage.PayIntent
	 * @return {String}
	 */
	PayIntent.prototype.getOrderId = function() {
	  return this.orderId;
	};

	/**
	 * Set the field value
	 * Unique identifier for a payment
	 *
	 * @memberof remotemessage.PayIntent
	 * @param {String} paymentId
	 */
	PayIntent.prototype.setPaymentId = function(paymentId) {
	  this.paymentId = paymentId;
	};

	/**
	 * Get the field value
	 * Unique identifier for a payment
	 * @memberof remotemessage.PayIntent
	 * @return {String}
	 */
	PayIntent.prototype.getPaymentId = function() {
	  return this.paymentId;
	};

	/**
	 * Set the field value
	 * Unique identifier for a employee
	 *
	 * @memberof remotemessage.PayIntent
	 * @param {String} employeeId
	 */
	PayIntent.prototype.setEmployeeId = function(employeeId) {
	  this.employeeId = employeeId;
	};

	/**
	 * Get the field value
	 * Unique identifier for a employee
	 * @memberof remotemessage.PayIntent
	 * @return {String}
	 */
	PayIntent.prototype.getEmployeeId = function() {
	  return this.employeeId;
	};

	/**
	 * Set the field value
	 * @memberof remotemessage.PayIntent
	 * @param {remotemessage.TransactionType} transactionType
	 */
	PayIntent.prototype.setTransactionType = function(transactionType) {
	  this.transactionType = transactionType;
	};

	/**
	 * Get the field value
	 * @memberof remotemessage.PayIntent
	 * @return {remotemessage.TransactionType}
	 */
	PayIntent.prototype.getTransactionType = function() {
	  return this.transactionType;
	};

	/**
	 * Set the field value
	 * @memberof remotemessage.PayIntent
	 * @param {Array.<payments.TaxableAmountRate>} taxableAmountRates An array of
	 */
	PayIntent.prototype.setTaxableAmountRates = function(taxableAmountRates) {
	  this.taxableAmountRates = taxableAmountRates;
	};

	/**
	 * Get the field value
	 * @memberof remotemessage.PayIntent
	 * @return {Array.<payments.TaxableAmountRate>} An array of
	 */
	PayIntent.prototype.getTaxableAmountRates = function() {
	  return this.taxableAmountRates;
	};

	/**
	 * Set the field value
	 * @memberof remotemessage.PayIntent
	 * @param {payments.ServiceChargeAmount} serviceChargeAmount
	 */
	PayIntent.prototype.setServiceChargeAmount = function(serviceChargeAmount) {
	  this.serviceChargeAmount = serviceChargeAmount;
	};

	/**
	 * Get the field value
	 * @memberof remotemessage.PayIntent
	 * @return {payments.ServiceChargeAmount}
	 */
	PayIntent.prototype.getServiceChargeAmount = function() {
	  return this.serviceChargeAmount;
	};

	/**
	 * Set the field value
	 * If true, then cash back will not be offered.
	 *
	 * @memberof remotemessage.PayIntent
	 * @param {Boolean} isDisableCashBack
	 */
	PayIntent.prototype.setIsDisableCashBack = function(isDisableCashBack) {
	  this.isDisableCashBack = isDisableCashBack;
	};

	/**
	 * Get the field value
	 * If true, then cash back will not be offered.
	 * @memberof remotemessage.PayIntent
	 * @return {Boolean}
	 */
	PayIntent.prototype.getIsDisableCashBack = function() {
	  return this.isDisableCashBack;
	};

	/**
	 * Set the field value
	 * @memberof remotemessage.PayIntent
	 * @param {Boolean} isTesting
	 */
	PayIntent.prototype.setIsTesting = function(isTesting) {
	  this.isTesting = isTesting;
	};

	/**
	 * Get the field value
	 * @memberof remotemessage.PayIntent
	 * @return {Boolean}
	 */
	PayIntent.prototype.getIsTesting = function() {
	  return this.isTesting;
	};

	/**
	 * Set the field value
	 * Allowed entry methods
	 *
	 * @memberof remotemessage.PayIntent
	 * @param {Number} cardEntryMethods must be an integer
	 */
	PayIntent.prototype.setCardEntryMethods = function(cardEntryMethods) {
	  this.cardEntryMethods = cardEntryMethods;
	};

	/**
	 * Get the field value
	 * Allowed entry methods
	 * @memberof remotemessage.PayIntent
	 * @return {Number} must be an integer
	 */
	PayIntent.prototype.getCardEntryMethods = function() {
	  return this.cardEntryMethods;
	};

	/**
	 * Set the field value
	 * @memberof remotemessage.PayIntent
	 * @param {String} voiceAuthCode
	 */
	PayIntent.prototype.setVoiceAuthCode = function(voiceAuthCode) {
	  this.voiceAuthCode = voiceAuthCode;
	};

	/**
	 * Get the field value
	 * @memberof remotemessage.PayIntent
	 * @return {String}
	 */
	PayIntent.prototype.getVoiceAuthCode = function() {
	  return this.voiceAuthCode;
	};

	/**
	 * Set the field value
	 * @memberof remotemessage.PayIntent
	 * @param {String} streetAddress
	 */
	PayIntent.prototype.setStreetAddress = function(streetAddress) {
	  this.streetAddress = streetAddress;
	};

	/**
	 * Get the field value
	 * @memberof remotemessage.PayIntent
	 * @return {String}
	 */
	PayIntent.prototype.getStreetAddress = function() {
	  return this.streetAddress;
	};

	/**
	 * Set the field value
	 * @memberof remotemessage.PayIntent
	 * @param {String} postalCode
	 */
	PayIntent.prototype.setPostalCode = function(postalCode) {
	  this.postalCode = postalCode;
	};

	/**
	 * Get the field value
	 * @memberof remotemessage.PayIntent
	 * @return {String}
	 */
	PayIntent.prototype.getPostalCode = function() {
	  return this.postalCode;
	};

	/**
	 * Set the field value
	 * @memberof remotemessage.PayIntent
	 * @param {Boolean} isCardNotPresent
	 */
	PayIntent.prototype.setIsCardNotPresent = function(isCardNotPresent) {
	  this.isCardNotPresent = isCardNotPresent;
	};

	/**
	 * Get the field value
	 * @memberof remotemessage.PayIntent
	 * @return {Boolean}
	 */
	PayIntent.prototype.getIsCardNotPresent = function() {
	  return this.isCardNotPresent;
	};

	/**
	 * Set the field value
	 * @memberof remotemessage.PayIntent
	 * @param {String} cardDataMessage
	 */
	PayIntent.prototype.setCardDataMessage = function(cardDataMessage) {
	  this.cardDataMessage = cardDataMessage;
	};

	/**
	 * Get the field value
	 * @memberof remotemessage.PayIntent
	 * @return {String}
	 */
	PayIntent.prototype.getCardDataMessage = function() {
	  return this.cardDataMessage;
	};

	/**
	 * Set the field value
	 * If true, then the receiver of this message does NOT print
	 *
	 * @memberof remotemessage.PayIntent
	 * @param {Boolean} remotePrint
	 */
	PayIntent.prototype.setRemotePrint = function(remotePrint) {
	  this.remotePrint = remotePrint;
	};

	/**
	 * Get the field value
	 * If true, then the receiver of this message does NOT print
	 * @memberof remotemessage.PayIntent
	 * @return {Boolean}
	 */
	PayIntent.prototype.getRemotePrint = function() {
	  return this.remotePrint;
	};

	/**
	 * Set the field value
	 * @memberof remotemessage.PayIntent
	 * @param {String} transactionNo
	 */
	PayIntent.prototype.setTransactionNo = function(transactionNo) {
	  this.transactionNo = transactionNo;
	};

	/**
	 * Get the field value
	 * @memberof remotemessage.PayIntent
	 * @return {String}
	 */
	PayIntent.prototype.getTransactionNo = function() {
	  return this.transactionNo;
	};

	/**
	 * Set the field value
	 * @memberof remotemessage.PayIntent
	 * @param {Boolean} isForceSwipePinEntry
	 */
	PayIntent.prototype.setIsForceSwipePinEntry = function(isForceSwipePinEntry) {
	  this.isForceSwipePinEntry = isForceSwipePinEntry;
	};

	/**
	 * Get the field value
	 * @memberof remotemessage.PayIntent
	 * @return {Boolean}
	 */
	PayIntent.prototype.getIsForceSwipePinEntry = function() {
	  return this.isForceSwipePinEntry;
	};

	/**
	 * Set the field value
	 * @memberof remotemessage.PayIntent
	 * @param {Boolean} disableRestartTransactionWhenFailed
	 */
	PayIntent.prototype.setDisableRestartTransactionWhenFailed = function(disableRestartTransactionWhenFailed) {
	  this.disableRestartTransactionWhenFailed = disableRestartTransactionWhenFailed;
	};

	/**
	 * Get the field value
	 * @memberof remotemessage.PayIntent
	 * @return {Boolean}
	 */
	PayIntent.prototype.getDisableRestartTransactionWhenFailed = function() {
	  return this.disableRestartTransactionWhenFailed;
	};

	/**
	 * Set the field value
	 * An id that allows an external system to link to a payment.
	 *
	 * @memberof remotemessage.PayIntent
	 * @param {String} externalPaymentId
	 */
	PayIntent.prototype.setExternalPaymentId = function(externalPaymentId) {
	  this.externalPaymentId = externalPaymentId;
	};

	/**
	 * Get the field value
	 * An id that allows an external system to link to a payment.
	 * @memberof remotemessage.PayIntent
	 * @return {String}
	 */
	PayIntent.prototype.getExternalPaymentId = function() {
	  return this.externalPaymentId;
	};

	/**
	 * Set the field value
	 * @memberof remotemessage.PayIntent
	 * @param {payments.VaultedCard} vaultedCard
	 */
	PayIntent.prototype.setVaultedCard = function(vaultedCard) {
	  this.vaultedCard = vaultedCard;
	};

	/**
	 * Get the field value
	 * @memberof remotemessage.PayIntent
	 * @return {payments.VaultedCard}
	 */
	PayIntent.prototype.getVaultedCard = function() {
	  return this.vaultedCard;
	};

	/**
	 * Set the field value
	 * @memberof remotemessage.PayIntent
	 * @param {Boolean|Null} allowOfflinePayment
	 */
	PayIntent.prototype.setAllowOfflinePayment = function(allowOfflinePayment) {
	  this.allowOfflinePayment = allowOfflinePayment;
	};

	/**
	 * Get the field value
	 * @memberof remotemessage.PayIntent
	 * @return {Boolean|Null}
	 */
	PayIntent.prototype.getAllowOfflinePayment = function() {
	  return this.allowOfflinePayment;
	};

	/**
	 * Set the field value
	 * @memberof remotemessage.PayIntent
	 * @param {Boolean|Null} approveOfflinePaymentWithoutPrompt
	 */
	PayIntent.prototype.setApproveOfflinePaymentWithoutPrompt = function(approveOfflinePaymentWithoutPrompt) {
	  this.approveOfflinePaymentWithoutPrompt = approveOfflinePaymentWithoutPrompt;
	};

	/**
	 * Get the field value
	 * @memberof remotemessage.PayIntent
	 * @return {Boolean|Null}
	 */
	PayIntent.prototype.getApproveOfflinePaymentWithoutPrompt = function() {
	  return this.approveOfflinePaymentWithoutPrompt;
	};

	/**
	 * Set the field value
	 * @memberof remotemessage.PayIntent
	 * @param {Boolean|Null} requiresRemoteConfirmation
	 */
	PayIntent.prototype.setRequiresRemoteConfirmation = function(requiresRemoteConfirmation) {
	  this.requiresRemoteConfirmation = requiresRemoteConfirmation;
	};

	/**
	 * Get the field value
	 * @memberof remotemessage.PayIntent
	 * @return {Boolean|Null}
	 */
	PayIntent.prototype.getRequiresRemoteConfirmation = function() {
	  return this.requiresRemoteConfirmation;
	};

	/**
	 * Set the field value
	 * @memberof remotemessage.PayIntent
	 * @param {apps.AppTracking} applicationTracking
	 */
	PayIntent.prototype.setApplicationTracking = function(applicationTracking) {
	  this.applicationTracking = applicationTracking;
	};

	/**
	 * Get the field value
	 * @memberof remotemessage.PayIntent
	 * @return {apps.AppTracking}
	 */
	PayIntent.prototype.getApplicationTracking = function() {
	  return this.applicationTracking;
	};

	/**
	 * Set the field value
	 * @memberof remotemessage.PayIntent
	 * @param {Boolean|Null} allowPartialAuth
	 */
	PayIntent.prototype.setAllowPartialAuth = function(allowPartialAuth) {
	  this.allowPartialAuth = allowPartialAuth;
	};

	/**
	 * Get the field value
	 * @memberof remotemessage.PayIntent
	 * @return {Boolean|Null}
	 */
	PayIntent.prototype.getAllowPartialAuth = function() {
	  return this.allowPartialAuth;
	};

	/**
	 * Set the field value
	 * @memberof remotemessage.PayIntent
	 * @param {payments.GermanInfo} germanInfo
	 */
	PayIntent.prototype.setGermanInfo = function(germanInfo) {
	  this.germanInfo = germanInfo;
	};

	/**
	 * Get the field value
	 * @memberof remotemessage.PayIntent
	 * @return {payments.GermanInfo}
	 */
	PayIntent.prototype.getGermanInfo = function() {
	  return this.germanInfo;
	};

	/**
	 * Set the field value
	 * @memberof remotemessage.PayIntent
	 * @param {payments.CashAdvanceCustomerIdentification} cashAdvanceCustomerIdentification
	 */
	PayIntent.prototype.setCashAdvanceCustomerIdentification = function(cashAdvanceCustomerIdentification) {
	  this.cashAdvanceCustomerIdentification = cashAdvanceCustomerIdentification;
	};

	/**
	 * Get the field value
	 * @memberof remotemessage.PayIntent
	 * @return {payments.CashAdvanceCustomerIdentification}
	 */
	PayIntent.prototype.getCashAdvanceCustomerIdentification = function() {
	  return this.cashAdvanceCustomerIdentification;
	};

	/**
	 * Set the field value
	 * @memberof remotemessage.PayIntent
	 * @param {payments.TransactionSettings} transactionSettings
	 */
	PayIntent.prototype.setTransactionSettings = function(transactionSettings) {
	  this.transactionSettings = transactionSettings;
	};

	/**
	 * Get the field value
	 * @memberof remotemessage.PayIntent
	 * @return {payments.TransactionSettings}
	 */
	PayIntent.prototype.getTransactionSettings = function() {
	  return this.transactionSettings;
	};

	/**
	 * Set the field value
	 * An id that can be passed to the merchant's gateway, and ultimately appear in settlement records.
	 *
	 * @memberof remotemessage.PayIntent
	 * @param {String} externalReferenceId
	 */
	PayIntent.prototype.setExternalReferenceId = function(externalReferenceId) {
	  this.externalReferenceId = externalReferenceId;
	};

	/**
	 * Get the field value
	 * An id that can be passed to the merchant's gateway, and ultimately appear in settlement records.
	 * @memberof remotemessage.PayIntent
	 * @return {String}
	 */
	PayIntent.prototype.getExternalReferenceId = function() {
	  return this.externalReferenceId;
	};

	/**
	 * Set the field value
	 * A map of values passed through to the server that are NOT used in payment processing or persisted.
	 *
	 * @memberof remotemessage.PayIntent
	 * @param {Object.<String,String>} passThroughValues A map of <String> to <>
	 */
	PayIntent.prototype.setPassThroughValues = function(passThroughValues) {
	  this.passThroughValues = passThroughValues;
	};

	/**
	 * Get the field value
	 * A map of values passed through to the server that are NOT used in payment processing or persisted.
	 * @memberof remotemessage.PayIntent
	 * @return {Object.<String,String>} A map of <String> to <>
	 */
	PayIntent.prototype.getPassThroughValues = function () {
	  return this.passThroughValues;
	};

	/**
	 * Set the field value
	 * @memberof remotemessage.PayIntent
	 * @param {Boolean|Null} isPresentQrcOnly
	 */
	PayIntent.prototype.setIsPresentQrcOnly = function (isPresentQrcOnly) {
	  this.isPresentQrcOnly = isPresentQrcOnly;
	};

	/**
	 * Get the field value
	 * @memberof remotemessage.PayIntent
	 * @return {Boolean|Null}
	 */
	PayIntent.prototype.getIsPresentQrcOnly = function () {
	  return this.isPresentQrcOnly;
	};

	/**
	 * @memberof remotemessage.PayIntent
	 * @private
	 */
	PayIntent.prototype.getMetaInfo = function (fieldName) {
	  var curclass = this._class_;
	  do {
	    var fieldMetaInfo = curclass._meta_.fields[fieldName];
	    if (fieldMetaInfo) {
	      return fieldMetaInfo;
	    }
	    if(curclass._meta_._superMeta_) {
	      curclass = curclass._meta_._superMeta_._class_;
	    } else {
	      curclass = null;
	    }
	  } while(curclass);
	  return null;
	};

	PayIntent.prototype.toString = function() {
	  return JSON.stringify(this);
	};

	PayIntent._meta_ =  {fields:  {}};
	PayIntent._meta_._class_ =  PayIntent;
	PayIntent._meta_.fields["action"] = {};
	PayIntent._meta_.fields["action"].type = String;
	PayIntent._meta_.fields["amount"] = {};
	PayIntent._meta_.fields["amount"].type = Number;
	PayIntent._meta_.fields["tippableAmount"] = {};
	PayIntent._meta_.fields["tippableAmount"].type = Number;
	PayIntent._meta_.fields["tipAmount"] = {};
	PayIntent._meta_.fields["tipAmount"].type = Number;
	PayIntent._meta_.fields["taxAmount"] = {};
	PayIntent._meta_.fields["taxAmount"].type = Number;
	PayIntent._meta_.fields["orderId"] = {};
	PayIntent._meta_.fields["orderId"].type = String;
	PayIntent._meta_.fields["paymentId"] = {};
	PayIntent._meta_.fields["paymentId"].type = String;
	PayIntent._meta_.fields["employeeId"] = {};
	PayIntent._meta_.fields["employeeId"].type = String;
	PayIntent._meta_.fields["transactionType"] = {};
	PayIntent._meta_.fields["transactionType"].type = remotemessage_TransactionType;
	PayIntent._meta_.fields["taxableAmountRates"] = {};
	PayIntent._meta_.fields["taxableAmountRates"].type = Array;
	PayIntent._meta_.fields["taxableAmountRates"].elementType = payments_TaxableAmountRate;
	PayIntent._meta_.fields["serviceChargeAmount"] = {};
	PayIntent._meta_.fields["serviceChargeAmount"].type = payments_ServiceChargeAmount;
	PayIntent._meta_.fields["isDisableCashBack"] = {};
	PayIntent._meta_.fields["isDisableCashBack"].type = Boolean;
	PayIntent._meta_.fields["isTesting"] = {};
	PayIntent._meta_.fields["isTesting"].type = Boolean;
	PayIntent._meta_.fields["cardEntryMethods"] = {};
	PayIntent._meta_.fields["cardEntryMethods"].type = Number;
	PayIntent._meta_.fields["voiceAuthCode"] = {};
	PayIntent._meta_.fields["voiceAuthCode"].type = String;
	PayIntent._meta_.fields["streetAddress"] = {};
	PayIntent._meta_.fields["streetAddress"].type = String;
	PayIntent._meta_.fields["postalCode"] = {};
	PayIntent._meta_.fields["postalCode"].type = String;
	PayIntent._meta_.fields["isCardNotPresent"] = {};
	PayIntent._meta_.fields["isCardNotPresent"].type = Boolean;
	PayIntent._meta_.fields["cardDataMessage"] = {};
	PayIntent._meta_.fields["cardDataMessage"].type = String;
	PayIntent._meta_.fields["remotePrint"] = {};
	PayIntent._meta_.fields["remotePrint"].type = Boolean;
	PayIntent._meta_.fields["transactionNo"] = {};
	PayIntent._meta_.fields["transactionNo"].type = String;
	PayIntent._meta_.fields["isForceSwipePinEntry"] = {};
	PayIntent._meta_.fields["isForceSwipePinEntry"].type = Boolean;
	PayIntent._meta_.fields["disableRestartTransactionWhenFailed"] = {};
	PayIntent._meta_.fields["disableRestartTransactionWhenFailed"].type = Boolean;
	PayIntent._meta_.fields["externalPaymentId"] = {};
	PayIntent._meta_.fields["externalPaymentId"].type = String;
	PayIntent._meta_.fields["vaultedCard"] = {};
	PayIntent._meta_.fields["vaultedCard"].type = payments_VaultedCard;
	PayIntent._meta_.fields["allowOfflinePayment"] = {};
	PayIntent._meta_.fields["allowOfflinePayment"].type = Boolean;
	PayIntent._meta_.fields["approveOfflinePaymentWithoutPrompt"] = {};
	PayIntent._meta_.fields["approveOfflinePaymentWithoutPrompt"].type = Boolean;
	PayIntent._meta_.fields["requiresRemoteConfirmation"] = {};
	PayIntent._meta_.fields["requiresRemoteConfirmation"].type = Boolean;
	PayIntent._meta_.fields["applicationTracking"] = {};
	PayIntent._meta_.fields["applicationTracking"].type = apps_AppTracking;
	PayIntent._meta_.fields["allowPartialAuth"] = {};
	PayIntent._meta_.fields["allowPartialAuth"].type = Boolean;
	PayIntent._meta_.fields["germanInfo"] = {};
	PayIntent._meta_.fields["germanInfo"].type = payments_GermanInfo;
	PayIntent._meta_.fields["cashAdvanceCustomerIdentification"] = {};
	PayIntent._meta_.fields["cashAdvanceCustomerIdentification"].type = payments_CashAdvanceCustomerIdentification;
	PayIntent._meta_.fields["transactionSettings"] = {};
	PayIntent._meta_.fields["transactionSettings"].type = payments_TransactionSettings;
	PayIntent._meta_.fields["externalReferenceId"] = {};
	PayIntent._meta_.fields["externalReferenceId"].type = String;
	PayIntent._meta_.fields["passThroughValues"] = {};
	PayIntent._meta_.fields["passThroughValues"].type = Object;
	PayIntent._meta_.fields["isPresentQrcOnly"] = {};
	PayIntent._meta_.fields["isPresentQrcOnly"].type = Boolean;

	//
	// Expose the module.
	//
	if (true) {
	  module.exports = PayIntent;
	}


/***/ }),
/* 263 */
/***/ (function(module, exports, __webpack_require__) {

	/**
	 * Autogenerated by Avro
	 * 
	 * DO NOT EDIT DIRECTLY
	 */


	/**
	* @memberof remotemessage
	* @enum {string}
	*/
	var QueryStatus = {
	  FOUND : "FOUND",
	  NOT_FOUND : "NOT_FOUND",
	  IN_PROGRESS : "IN_PROGRESS"
	};


	//
	// Expose the module.
	//
	if (true) {
	module.exports = QueryStatus;
	}



/***/ }),
/* 264 */
/***/ (function(module, exports, __webpack_require__) {

	/**
	 * Autogenerated by Avro
	 * 
	 * DO NOT EDIT DIRECTLY
	 */


	/**
	* @memberof remotemessage
	* @enum {string}
	*/
	var VasState = {
	  START_REQUESTED : "START_REQUESTED",
	  STARTED : "STARTED",
	  TIMED_OUT : "TIMED_OUT",
	  STOP_REQUESTED : "STOP_REQUESTED",
	  STOPPED : "STOPPED",
	  FAILED : "FAILED"
	};


	//
	// Expose the module.
	//
	if (true) {
	module.exports = VasState;
	}



/***/ }),
/* 265 */
/***/ (function(module, exports, __webpack_require__) {

	/**
	 * Autogenerated by Avro
	 * 
	 * DO NOT EDIT DIRECTLY
	 */

	var remotepay_BaseRequest = __webpack_require__(14);

	/** A message used in custom activities */
	/**
	* @constructor
	* @augments remotepay.BaseRequest
	* @memberof remotepay
	*/
	var ActivityMessage = function() {
	  remotepay_BaseRequest.call(this);
	  this._superClass_ = remotepay_BaseRequest;
	  this._class_ = ActivityMessage;
	  this.action = undefined;
	  this.payload = undefined;
	};

	ActivityMessage.prototype = Object.create(remotepay_BaseRequest.prototype);
	ActivityMessage.prototype.constructor = ActivityMessage;

	/**
	* Set the field value
	* An action name, such as ACTION_VIEW.  Application-specific actions should be prefixed with the vendor's package name.
	*
	* @memberof remotepay.ActivityMessage
	* @param {String} action 
	*/
	ActivityMessage.prototype.setAction = function(action) {
	  this.action = action;
	};

	/**
	* Get the field value
	* An action name, such as ACTION_VIEW.  Application-specific actions should be prefixed with the vendor's package name.
	* @memberof remotepay.ActivityMessage
	* @return {String} 
	*/
	ActivityMessage.prototype.getAction = function() {
	  return this.action;
	};

	/**
	* Set the field value
	* Information that is passed to the activity.  Can be obtained from the intent using the key defined in com.clover.remote.common.RemoteConstants#EXTRA_PAYLOAD
	*
	* @memberof remotepay.ActivityMessage
	* @param {String|Null} payload 
	*/
	ActivityMessage.prototype.setPayload = function(payload) {
	  this.payload = payload;
	};

	/**
	* Get the field value
	* Information that is passed to the activity.  Can be obtained from the intent using the key defined in com.clover.remote.common.RemoteConstants#EXTRA_PAYLOAD
	* @memberof remotepay.ActivityMessage
	* @return {String|Null} 
	*/
	ActivityMessage.prototype.getPayload = function() {
	  return this.payload;
	};

	ActivityMessage._meta_ =  {fields:  {}};
	ActivityMessage._meta_._class_ =  ActivityMessage;
	ActivityMessage._meta_._superMeta_ = remotepay_BaseRequest._meta_;
	ActivityMessage._meta_.fields["action"] = {};
	ActivityMessage._meta_.fields["action"].type = String;
	ActivityMessage._meta_.fields["payload"] = {};
	ActivityMessage._meta_.fields["payload"].type = String;

	//
	// Expose the module.
	//
	if (true) {
	module.exports = ActivityMessage;
	}



/***/ }),
/* 266 */
/***/ (function(module, exports, __webpack_require__) {

	/**
	 * Autogenerated by Avro
	 * 
	 * DO NOT EDIT DIRECTLY
	 */


	/**
	* @constructor
	* @memberof remotepay
	*/
	var DataProviderConfig = function() {
	  this._class_ = DataProviderConfig;
	  this.type = undefined;
	  this.configuration = undefined;
	};


	/**
	* Set the field value
	* The string type of the loyalty data of interest.
	*
	* @memberof remotepay.DataProviderConfig
	* @param {String} type 
	*/
	DataProviderConfig.prototype.setType = function(type) {
	  this.type = type;
	};

	/**
	* Get the field value
	* The string type of the loyalty data of interest.
	* @memberof remotepay.DataProviderConfig
	* @return {String} 
	*/
	DataProviderConfig.prototype.getType = function() {
	  return this.type;
	};

	/**
	* Set the field value
	* Configuration for the data type.
	*
	* @memberof remotepay.DataProviderConfig
	* @param {Object.<String,String>} configuration A map of <String> to <>
	*/
	DataProviderConfig.prototype.setConfiguration = function(configuration) {
	  this.configuration = configuration;
	};

	/**
	* Get the field value
	* Configuration for the data type.
	* @memberof remotepay.DataProviderConfig
	* @return {Object.<String,String>} A map of <String> to <>
	*/
	DataProviderConfig.prototype.getConfiguration = function() {
	  return this.configuration;
	};

	/**
	* @memberof remotepay.DataProviderConfig
	* @private
	*/
	DataProviderConfig.prototype.getMetaInfo = function(fieldName) {
	  var curclass = this._class_;
	  do {
	    var fieldMetaInfo = curclass._meta_.fields[fieldName];
	    if(fieldMetaInfo) {
	      return fieldMetaInfo;
	    }
	    if(curclass._meta_._superMeta_) {
	      curclass = curclass._meta_._superMeta_._class_;
	    } else {
	      curclass = null;
	    }
	  } while(curclass);
	  return null;
	};

	DataProviderConfig.prototype.toString = function() {
	  return JSON.stringify(this);
	};

	DataProviderConfig._meta_ =  {fields:  {}};
	DataProviderConfig._meta_._class_ =  DataProviderConfig;
	DataProviderConfig._meta_.fields["type"] = {};
	DataProviderConfig._meta_.fields["type"].type = String;
	DataProviderConfig._meta_.fields["configuration"] = {};
	DataProviderConfig._meta_.fields["configuration"].type = Object;

	//
	// Expose the module.
	//
	if (true) {
	module.exports = DataProviderConfig;
	}



/***/ }),
/* 267 */
/***/ (function(module, exports, __webpack_require__) {

	/**
	 * Autogenerated by Avro
	 * 
	 * DO NOT EDIT DIRECTLY
	 */


	/**
	* @memberof remotepay
	* @enum {string}
	*/
	var DeviceErrorEventCode = {
	  AbortEndpoint : "AbortEndpoint",
	  AccessDenied : "AccessDenied",
	  CancelIoFailed : "CancelIoFailed",
	  DeviceAllreadyLocked : "DeviceAllreadyLocked",
	  DeviceIoControl : "DeviceIoControl",
	  DeviceNotFound : "DeviceNotFound",
	  EndpointAllreadyLocked : "EndpointAllreadyLocked",
	  GetDeviceKeyValueFailed : "GetDeviceKeyValueFailed",
	  GetOverlappedResult : "GetOverlappedResult",
	  GetString : "GetString",
	  InsufficientMemory : "InsufficientMemory",
	  Interrupted : "Interrupted",
	  InvalidConfig : "InvalidConfig",
	  InvalidEndpoint : "InvalidEndpoint",
	  InvalidParam : "InvalidParam",
	  IoCancelled : "IoCancelled",
	  IoControlMessage : "IoControlMessage",
	  IoEndpointGlobalCancelRedo : "IoEndpointGlobalCancelRedo",
	  IoSyncFailed : "IoSyncFailed",
	  IoTimedOut : "IoTimedOut",
	  MonoApiError : "MonoApiError",
	  None : "None",
	  NotConnected : "NotConnected",
	  NotSupported : "NotSupported",
	  Ok : "Ok",
	  Overflow : "Overflow",
	  PipeError : "PipeError",
	  ReadFailed : "ReadFailed",
	  ReceiveThreadTerminated : "ReceiveThreadTerminated",
	  ResourceBusy : "ResourceBusy",
	  SendNotificationFailure : "SendNotificationFailure",
	  SetDeviceKeyValueFailed : "SetDeviceKeyValueFailed",
	  Success : "Success",
	  UnknownError : "UnknownError",
	  UserAborted : "UserAborted",
	  Win32Error : "Win32Error",
	  WriteFailed : "WriteFailed"
	};


	//
	// Expose the module.
	//
	if (true) {
	module.exports = DeviceErrorEventCode;
	}



/***/ }),
/* 268 */
/***/ (function(module, exports, __webpack_require__) {

	/**
	 * Autogenerated by Avro
	 *
	 * DO NOT EDIT DIRECTLY
	 */


	/**
	 We can not include WELCOME_SCREEN, THANKYOU_SCREEN, DISPLAY_MESSAGE, DISPLAY_ORDER until we can filter them out in remote-pay before they go through the interface to older versions of the sdk
	 * @memberof remotepay
	 * @enum {string}
	 */
	var DeviceEventState = {
	  ADD_SIGNATURE : "ADD_SIGNATURE",
	  ADD_SIGNATURE_CANCEL_CONFIRM : "ADD_SIGNATURE_CANCEL_CONFIRM",
	  ADD_TIP : "ADD_TIP",
	  APPROVE_ELV_LIMIT_OVERRIDE : "APPROVE_ELV_LIMIT_OVERRIDE",
	  APPROVED : "APPROVED",
	  CANCELED : "CANCELED",
	  CASHBACK_CONFIRM : "CASHBACK_CONFIRM",
	  CASHBACK_SELECT : "CASHBACK_SELECT",
	  CONFIGURING : "CONFIGURING",
	  CONFIRM_AMOUNT : "CONFIRM_AMOUNT",
	  CONFIRM_DUPLICATE_CHECK : "CONFIRM_DUPLICATE_CHECK",
	  CONFIRM_PARTIAL_AUTH : "CONFIRM_PARTIAL_AUTH",
	  CONTACTLESS_TAP_REQUIRED : "CONTACTLESS_TAP_REQUIRED",
	  CUSTOM_ACTIVITY : "CUSTOM_ACTIVITY",
	  CUSTOM_TIP_AMOUNT : "CUSTOM_TIP_AMOUNT",
	  DCC_HOST_REQUEST : "DCC_HOST_REQUEST",
	  DECLINED : "DECLINED",
	  ENTER_INSTALLMENT_CODE : "ENTER_INSTALLMENT_CODE",
	  ENTER_INSTALLMENTS : "ENTER_INSTALLMENTS",
	  ENTER_PAN_LAST_FOUR : "ENTER_PAN_LAST_FOUR",
	  ERROR_SCREEN : "ERROR_SCREEN",
	  FAILED : "FAILED",
	  FATAL : "FATAL",
	  FISCAL_INVOICE_NUMBER : "FISCAL_INVOICE_NUMBER",
	  FORCE_ACCEPTANCE : "FORCE_ACCEPTANCE",
	  HANDLE_TENDER : "HANDLE_TENDER",
	  INPUT_ERROR : "INPUT_ERROR",
	  MANUAL_CARD_CVV : "MANUAL_CARD_CVV",
	  MANUAL_CARD_CVV_UNREADABLE : "MANUAL_CARD_CVV_UNREADABLE",
	  MANUAL_CARD_EXPIRATION : "MANUAL_CARD_EXPIRATION",
	  MANUAL_CARD_NUMBER : "MANUAL_CARD_NUMBER",
	  MANUAL_ENTRY_FALLBACK : "MANUAL_ENTRY_FALLBACK",
	  OFFLINE_PAYMENT_CONFIRM : "OFFLINE_PAYMENT_CONFIRM",
	  PACKET_EXCEPTION : "PACKET_EXCEPTION",
	  PERSONAL_ID_ENTRY : "PERSONAL_ID_ENTRY",
	  PERSONAL_ID_ENTRY_PAS : "PERSONAL_ID_ENTRY_PAS",
	  PIN_BYPASS_CONFIRM : "PIN_BYPASS_CONFIRM",
	  PIN_PAD : "PIN_PAD",
	  PROCESSING : "PROCESSING",
	  PROCESSING_CREDIT : "PROCESSING_CREDIT",
	  PROCESSING_GO_ONLINE : "PROCESSING_GO_ONLINE",
	  PROCESSING_SWIPE : "PROCESSING_SWIPE",
	  RECEIPT_OPTIONS : "RECEIPT_OPTIONS",
	  REMOVE_CARD : "REMOVE_CARD",
	  RETURN_TO_MERCHANT : "RETURN_TO_MERCHANT",
	  SELECT_ACCOUNT : "SELECT_ACCOUNT",
	  SELECT_APPLICATION : "SELECT_APPLICATION",
	  SELECT_DCC : "SELECT_DCC",
	  SELECT_INSTALLMENT_PLAN : "SELECT_INSTALLMENT_PLAN",
	  SELECT_LANGUAGE : "SELECT_LANGUAGE",
	  SELECT_MULTI_MID : "SELECT_MULTI_MID",
	  SELECT_TIP : "SELECT_TIP",
	  SELECT_WITHDRAW_FROM_ACCOUNT : "SELECT_WITHDRAW_FROM_ACCOUNT",
	  SENSORY_EXPERIENCE : "SENSORY_EXPERIENCE",
	  SHOW_SEPA_MANDAT : "SHOW_SEPA_MANDAT",
	  SIGNATURE_CUSTOMER_MODE : "SIGNATURE_CUSTOMER_MODE",
	  SIGNATURE_ON_SCREEN_FALLBACK : "SIGNATURE_ON_SCREEN_FALLBACK",
	  SIGNATURE_REJECT : "SIGNATURE_REJECT",
	  START : "START",
	  STARTING_CUSTOM_ACTIVITY : "STARTING_CUSTOM_ACTIVITY",
	  START_QR_CODE_MODE : "START_QR_CODE_MODE",
	  SWIPE_CVV_ENTRY : "SWIPE_CVV_ENTRY",
	  TIMED_OUT : "TIMED_OUT",
	  TRY_AGAIN : "TRY_AGAIN",
	  VERIFY_SIGNATURE_ON_PAPER : "VERIFY_SIGNATURE_ON_PAPER",
	  VERIFY_SIGNATURE_ON_PAPER_CONFIRM_VOID : "VERIFY_SIGNATURE_ON_PAPER_CONFIRM_VOID",
	  VERIFY_SIGNATURE_ON_SCREEN : "VERIFY_SIGNATURE_ON_SCREEN",
	  VERIFY_SIGNATURE_ON_SCREEN_CONFIRM_VOID : "VERIFY_SIGNATURE_ON_SCREEN_CONFIRM_VOID",
	  VERIFY_SURCHARGES : "VERIFY_SURCHARGES",
	  VOICE_REFERRAL_RESULT : "VOICE_REFERRAL_RESULT",
	  VOID_CONFIRM : "VOID_CONFIRM",
	  VOIDED : "VOIDED"
	};


	//
	// Expose the module.
	//
	if (true) {
	  module.exports = DeviceEventState;
	}



/***/ }),
/* 269 */
/***/ (function(module, exports, __webpack_require__) {

	/**
	 * Autogenerated by Avro
	 * 
	 * DO NOT EDIT DIRECTLY
	 */


	/**
	* @constructor
	* @memberof remotepay
	*/
	var ExternalDeviceStateData = function() {
	  this._class_ = ExternalDeviceStateData;
	  this.externalPaymentId = undefined;
	  this.customActivityId = undefined;
	};


	/**
	* Set the field value
	* External Payment Id, if applicable
	*
	* @memberof remotepay.ExternalDeviceStateData
	* @param {String} externalPaymentId 
	*/
	ExternalDeviceStateData.prototype.setExternalPaymentId = function(externalPaymentId) {
	  this.externalPaymentId = externalPaymentId;
	};

	/**
	* Get the field value
	* External Payment Id, if applicable
	* @memberof remotepay.ExternalDeviceStateData
	* @return {String} 
	*/
	ExternalDeviceStateData.prototype.getExternalPaymentId = function() {
	  return this.externalPaymentId;
	};

	/**
	* Set the field value
	* Custom Activity Id, if applicable
	*
	* @memberof remotepay.ExternalDeviceStateData
	* @param {String} customActivityId 
	*/
	ExternalDeviceStateData.prototype.setCustomActivityId = function(customActivityId) {
	  this.customActivityId = customActivityId;
	};

	/**
	* Get the field value
	* Custom Activity Id, if applicable
	* @memberof remotepay.ExternalDeviceStateData
	* @return {String} 
	*/
	ExternalDeviceStateData.prototype.getCustomActivityId = function() {
	  return this.customActivityId;
	};

	/**
	* @memberof remotepay.ExternalDeviceStateData
	* @private
	*/
	ExternalDeviceStateData.prototype.getMetaInfo = function(fieldName) {
	  var curclass = this._class_;
	  do {
	    var fieldMetaInfo = curclass._meta_.fields[fieldName];
	    if(fieldMetaInfo) {
	      return fieldMetaInfo;
	    }
	    if(curclass._meta_._superMeta_) {
	      curclass = curclass._meta_._superMeta_._class_;
	    } else {
	      curclass = null;
	    }
	  } while(curclass);
	  return null;
	};

	ExternalDeviceStateData.prototype.toString = function() {
	  return JSON.stringify(this);
	};

	ExternalDeviceStateData._meta_ =  {fields:  {}};
	ExternalDeviceStateData._meta_._class_ =  ExternalDeviceStateData;
	ExternalDeviceStateData._meta_.fields["externalPaymentId"] = {};
	ExternalDeviceStateData._meta_.fields["externalPaymentId"].type = String;
	ExternalDeviceStateData._meta_.fields["customActivityId"] = {};
	ExternalDeviceStateData._meta_.fields["customActivityId"].type = String;

	//
	// Expose the module.
	//
	if (true) {
	module.exports = ExternalDeviceStateData;
	}



/***/ }),
/* 270 */
/***/ (function(module, exports, __webpack_require__) {

	/**
	 * Autogenerated by Avro
	 * 
	 * DO NOT EDIT DIRECTLY
	 */


	/**
	* @memberof remotepay
	* @enum {string}
	*/
	var KeyPress = {
	  NONE : "NONE",
	  ENTER : "ENTER",
	  ESC : "ESC",
	  BACKSPACE : "BACKSPACE",
	  TAB : "TAB",
	  STAR : "STAR",
	  BUTTON_1 : "BUTTON_1",
	  BUTTON_2 : "BUTTON_2",
	  BUTTON_3 : "BUTTON_3",
	  BUTTON_4 : "BUTTON_4",
	  BUTTON_5 : "BUTTON_5",
	  BUTTON_6 : "BUTTON_6",
	  BUTTON_7 : "BUTTON_7",
	  BUTTON_8 : "BUTTON_8",
	  DIGIT_1 : "DIGIT_1",
	  DIGIT_2 : "DIGIT_2",
	  DIGIT_3 : "DIGIT_3",
	  DIGIT_4 : "DIGIT_4",
	  DIGIT_5 : "DIGIT_5",
	  DIGIT_6 : "DIGIT_6",
	  DIGIT_7 : "DIGIT_7",
	  DIGIT_8 : "DIGIT_8",
	  DIGIT_9 : "DIGIT_9",
	  DIGIT_0 : "DIGIT_0"
	};


	//
	// Expose the module.
	//
	if (true) {
	module.exports = KeyPress;
	}



/***/ }),
/* 271 */
/***/ (function(module, exports, __webpack_require__) {

	/**
	 * Autogenerated by Avro
	 * 
	 * DO NOT EDIT DIRECTLY
	 */


	/**
	* @memberof remotepay
	* @enum {string}
	*/
	var QueryStatus = {
	  FOUND : "FOUND",
	  NOT_FOUND : "NOT_FOUND",
	  IN_PROGRESS : "IN_PROGRESS"
	};


	//
	// Expose the module.
	//
	if (true) {
	module.exports = QueryStatus;
	}



/***/ }),
/* 272 */
/***/ (function(module, exports, __webpack_require__) {

	/**
	 * Autogenerated by Avro
	 * 
	 * DO NOT EDIT DIRECTLY
	 */


	/**
	* @memberof remotepay
	* @enum {string}
	*/
	var ResponseCode = {
	  SUCCESS : "SUCCESS",
	  FAIL : "FAIL",
	  UNSUPPORTED : "UNSUPPORTED",
	  CANCEL : "CANCEL",
	  DUPLICATE : "DUPLICATE",
	  ERROR : "ERROR"
	};


	//
	// Expose the module.
	//
	if (true) {
	module.exports = ResponseCode;
	}



/***/ }),
/* 273 */
/***/ (function(module, exports, __webpack_require__) {

	/**
	 * Autogenerated by Avro
	 * 
	 * DO NOT EDIT DIRECTLY
	 */

	var payments_DataEntryLocation = __webpack_require__(251);
	var merchant_TipSuggestion = __webpack_require__(118);
	var remotepay_BaseTransactionRequest = __webpack_require__(169);

	/**
	* @constructor
	* @augments remotepay.BaseTransactionRequest
	* @memberof remotepay
	*/
	var TransactionRequest = function() {
	  remotepay_BaseTransactionRequest.call(this);
	  this._superClass_ = remotepay_BaseTransactionRequest;
	  this._class_ = TransactionRequest;
	  this.signatureThreshold = undefined;
	  this.signatureEntryLocation = undefined;
	  this.autoAcceptSignature = undefined;
	  this.allowOfflinePayment = undefined;
	  this.forceOfflinePayment = undefined;
	  this.disableCashback = undefined;
	  this.approveOfflinePaymentWithoutPrompt = undefined;
	  this.taxAmount = undefined;
	  this.tippableAmount = undefined;
	  this.tipSuggestions = undefined;
	};

	TransactionRequest.prototype = Object.create(remotepay_BaseTransactionRequest.prototype);
	TransactionRequest.prototype.constructor = TransactionRequest;

	/**
	* Set the field value
	* If the amount is equal to or greater than this amount, then a signature should be obtained
	*
	* @memberof remotepay.TransactionRequest
	* @param {Number} signatureThreshold must be a long integer
	*/
	TransactionRequest.prototype.setSignatureThreshold = function(signatureThreshold) {
	  this.signatureThreshold = signatureThreshold;
	};

	/**
	* Get the field value
	* If the amount is equal to or greater than this amount, then a signature should be obtained
	* @memberof remotepay.TransactionRequest
	* @return {Number} must be a long integer
	*/
	TransactionRequest.prototype.getSignatureThreshold = function() {
	  return this.signatureThreshold;
	};

	/**
	* Set the field value
	* Where the signature should be obtained from (paper, screen...etc)
	*
	* @memberof remotepay.TransactionRequest
	* @param {payments.DataEntryLocation|Null} signatureEntryLocation 
	*/
	TransactionRequest.prototype.setSignatureEntryLocation = function(signatureEntryLocation) {
	  this.signatureEntryLocation = signatureEntryLocation;
	};

	/**
	* Get the field value
	* Where the signature should be obtained from (paper, screen...etc)
	* @memberof remotepay.TransactionRequest
	* @return {payments.DataEntryLocation|Null} 
	*/
	TransactionRequest.prototype.getSignatureEntryLocation = function() {
	  return this.signatureEntryLocation;
	};

	/**
	* Set the field value
	* Do not show/send signature verification challenges
	*
	* @memberof remotepay.TransactionRequest
	* @param {Boolean|Null} autoAcceptSignature 
	*/
	TransactionRequest.prototype.setAutoAcceptSignature = function(autoAcceptSignature) {
	  this.autoAcceptSignature = autoAcceptSignature;
	};

	/**
	* Get the field value
	* Do not show/send signature verification challenges
	* @memberof remotepay.TransactionRequest
	* @return {Boolean|Null} 
	*/
	TransactionRequest.prototype.getAutoAcceptSignature = function() {
	  return this.autoAcceptSignature;
	};

	/**
	* Set the field value
	* If true then offline payments can be accepted
	*
	* @memberof remotepay.TransactionRequest
	* @param {Boolean|Null} allowOfflinePayment 
	*/
	TransactionRequest.prototype.setAllowOfflinePayment = function(allowOfflinePayment) {
	  this.allowOfflinePayment = allowOfflinePayment;
	};

	/**
	* Get the field value
	* If true then offline payments can be accepted
	* @memberof remotepay.TransactionRequest
	* @return {Boolean|Null} 
	*/
	TransactionRequest.prototype.getAllowOfflinePayment = function() {
	  return this.allowOfflinePayment;
	};

	/**
	* Set the field value
	* If true then the payment will be taken offline
	*
	* @memberof remotepay.TransactionRequest
	* @param {Boolean|Null} forceOfflinePayment 
	*/
	TransactionRequest.prototype.setForceOfflinePayment = function(forceOfflinePayment) {
	  this.forceOfflinePayment = forceOfflinePayment;
	};

	/**
	* Get the field value
	* If true then the payment will be taken offline
	* @memberof remotepay.TransactionRequest
	* @return {Boolean|Null} 
	*/
	TransactionRequest.prototype.getForceOfflinePayment = function() {
	  return this.forceOfflinePayment;
	};

	/**
	* Set the field value
	* If true, do not allow cash back
	*
	* @memberof remotepay.TransactionRequest
	* @param {Boolean|Null} disableCashback 
	*/
	TransactionRequest.prototype.setDisableCashback = function(disableCashback) {
	  this.disableCashback = disableCashback;
	};

	/**
	* Get the field value
	* If true, do not allow cash back
	* @memberof remotepay.TransactionRequest
	* @return {Boolean|Null} 
	*/
	TransactionRequest.prototype.getDisableCashback = function() {
	  return this.disableCashback;
	};

	/**
	* Set the field value
	* If true then offline payments will be approved without a prompt
	*
	* @memberof remotepay.TransactionRequest
	* @param {Boolean|Null} approveOfflinePaymentWithoutPrompt 
	*/
	TransactionRequest.prototype.setApproveOfflinePaymentWithoutPrompt = function(approveOfflinePaymentWithoutPrompt) {
	  this.approveOfflinePaymentWithoutPrompt = approveOfflinePaymentWithoutPrompt;
	};

	/**
	* Get the field value
	* If true then offline payments will be approved without a prompt
	* @memberof remotepay.TransactionRequest
	* @return {Boolean|Null} 
	*/
	TransactionRequest.prototype.getApproveOfflinePaymentWithoutPrompt = function() {
	  return this.approveOfflinePaymentWithoutPrompt;
	};

	/**
	* Set the field value
	* Amount paid in taxes
	*
	* @memberof remotepay.TransactionRequest
	* @param {Number} taxAmount must be a long integer
	*/
	TransactionRequest.prototype.setTaxAmount = function(taxAmount) {
	  this.taxAmount = taxAmount;
	};

	/**
	* Get the field value
	* Amount paid in taxes
	* @memberof remotepay.TransactionRequest
	* @return {Number} must be a long integer
	*/
	TransactionRequest.prototype.getTaxAmount = function() {
	  return this.taxAmount;
	};

	/**
	* Set the field value
	* The total amount used when calculating tips
	*
	* @memberof remotepay.TransactionRequest
	* @param {Number} tippableAmount must be a long integer
	*/
	TransactionRequest.prototype.setTippableAmount = function(tippableAmount) {
	  this.tippableAmount = tippableAmount;
	};

	/**
	* Get the field value
	* The total amount used when calculating tips
	* @memberof remotepay.TransactionRequest
	* @return {Number} must be a long integer
	*/
	TransactionRequest.prototype.getTippableAmount = function() {
	  return this.tippableAmount;
	};

	/**
	* Set the field value
	* Custom Tip Suggestions that can be set per transaction
	*
	* @memberof remotepay.TransactionRequest
	* @param {Array.<merchant.TipSuggestion>} tipSuggestions An array of 
	*/
	TransactionRequest.prototype.setTipSuggestions = function(tipSuggestions) {
	  this.tipSuggestions = tipSuggestions;
	};

	/**
	* Get the field value
	* Custom Tip Suggestions that can be set per transaction
	* @memberof remotepay.TransactionRequest
	* @return {Array.<merchant.TipSuggestion>} An array of 
	*/
	TransactionRequest.prototype.getTipSuggestions = function() {
	  return this.tipSuggestions;
	};

	TransactionRequest._meta_ =  {fields:  {}};
	TransactionRequest._meta_._class_ =  TransactionRequest;
	TransactionRequest._meta_._superMeta_ = remotepay_BaseTransactionRequest._meta_;
	TransactionRequest._meta_.fields["signatureThreshold"] = {};
	TransactionRequest._meta_.fields["signatureThreshold"].type = Number;
	TransactionRequest._meta_.fields["signatureEntryLocation"] = {};
	TransactionRequest._meta_.fields["signatureEntryLocation"].type = payments_DataEntryLocation;
	TransactionRequest._meta_.fields["autoAcceptSignature"] = {};
	TransactionRequest._meta_.fields["autoAcceptSignature"].type = Boolean;
	TransactionRequest._meta_.fields["allowOfflinePayment"] = {};
	TransactionRequest._meta_.fields["allowOfflinePayment"].type = Boolean;
	TransactionRequest._meta_.fields["forceOfflinePayment"] = {};
	TransactionRequest._meta_.fields["forceOfflinePayment"].type = Boolean;
	TransactionRequest._meta_.fields["disableCashback"] = {};
	TransactionRequest._meta_.fields["disableCashback"].type = Boolean;
	TransactionRequest._meta_.fields["approveOfflinePaymentWithoutPrompt"] = {};
	TransactionRequest._meta_.fields["approveOfflinePaymentWithoutPrompt"].type = Boolean;
	TransactionRequest._meta_.fields["taxAmount"] = {};
	TransactionRequest._meta_.fields["taxAmount"].type = Number;
	TransactionRequest._meta_.fields["tippableAmount"] = {};
	TransactionRequest._meta_.fields["tippableAmount"].type = Number;
	TransactionRequest._meta_.fields["tipSuggestions"] = {};
	TransactionRequest._meta_.fields["tipSuggestions"].type = Array;
	TransactionRequest._meta_.fields["tipSuggestions"].elementType = merchant_TipSuggestion;

	//
	// Expose the module.
	//
	if (true) {
	module.exports = TransactionRequest;
	}



/***/ }),
/* 274 */
/***/ (function(module, exports, __webpack_require__) {

	"use strict";
	var __extends = (this && this.__extends) || (function () {
	    var extendStatics = function (d, b) {
	        extendStatics = Object.setPrototypeOf ||
	            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
	            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
	        return extendStatics(d, b);
	    };
	    return function (d, b) {
	        extendStatics(d, b);
	        function __() { this.constructor = d; }
	        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
	    };
	})();
	Object.defineProperty(exports, "__esModule", { value: true });
	exports.WebSocketCloudCloverDeviceConfigurationBuilder = exports.WebSocketCloudCloverDeviceConfiguration = void 0;
	var WebSocketCloudCloverTransport_1 = __webpack_require__(1235);
	var WebsocketCloudCloverDevice_1 = __webpack_require__(1231);
	var WebSocketCloverDeviceConfiguration_1 = __webpack_require__(275);
	var HttpSupport_1 = __webpack_require__(277);
	var ImageUtil_1 = __webpack_require__(172);
	var BrowserWebSocketImpl_1 = __webpack_require__(173);
	/**
	 * Configuration used to create a connection to a device via the Clover cloud.
	 */
	var WebSocketCloudCloverDeviceConfiguration = /** @class */ (function (_super) {
	    __extends(WebSocketCloudCloverDeviceConfiguration, _super);
	    /**
	     *
	     * @param {string} applicationId - the applicationId that uniquely identifies the POS.
	     *    e.g. com.company.MyPOS:2.3.1 for the first connection
	     * @param {Object} webSocketFactoryFunction - the function that will return an instance of the
	     *  CloverWebSocketInterface that will be used when connecting.  For Browser implementations, this can be
	     *  BrowserWebSocketImpl.createInstance.  For NodeJS implementations, this will be defined differently.
	     * @param {IImageUtil} imageUtil - utility to translate images into base64 strings.
	     * @param {string} cloverServer the base url for the clover server used in the cloud connection.
	     *    EX:  https://www.clover.com, http://localhost:9000
	     * @param {string} accessToken - the OAuth access token that will be used when contacting the clover server
	     * @param {HttpSupport} httpSupport - the helper object used when making http requests.
	     * @param {string} merchantId - the merchant the device belongs to.
	     * @param {string} deviceId - the id (not uuid) of the device to connect to
	     * @param {string} friendlyId - an identifier for the specific terminal connected to this device.  This id is used
	     *  in debugging and may be sent to other clients if they attempt to connect to the same device.  It will also be
	     *  sent to other clients that are currently connected if this device does a forceConnect.
	     * @param {boolean} forceConnect - if true, overtake any existing connection.
	     * @param {number} heartbeatInterval - Frequency at which we will ping the device - millis. Defaults to -1, which means the heartbeat check is disabled.
	     * @param {number} reconnectDelay - upon disconnect, duration to wait until a reconnect is attempted - millis. Defaults to 3000 (millis), minimum value is 3000 millis. To disable the reconnect set to -1.
	     * @param {number} heartbeatDisconnectTimeout - If a response to a heartbeat ping is not received within this time we will call disconnect.
	     */
	    function WebSocketCloudCloverDeviceConfiguration(applicationId, webSocketFactoryFunction, imageUtil, cloverServer, accessToken, httpSupport, merchantId, deviceId, friendlyId, forceConnect, heartbeatInterval, reconnectDelay, heartbeatDisconnectTimeout) {
	        if (forceConnect === void 0) { forceConnect = false; }
	        var _this = _super.call(this, applicationId, webSocketFactoryFunction, imageUtil, heartbeatInterval, reconnectDelay, heartbeatDisconnectTimeout) || this;
	        _this.cloverServer = cloverServer;
	        _this.accessToken = accessToken;
	        _this.httpSupport = httpSupport;
	        _this.merchantId = merchantId;
	        _this.deviceId = deviceId;
	        _this.friendlyId = friendlyId || "unknown";
	        _this.forceConnect = forceConnect;
	        return _this;
	    }
	    WebSocketCloudCloverDeviceConfiguration.prototype.getMessagePackageName = function () {
	        return 'com.clover.remote.protocol.websocket';
	    };
	    WebSocketCloudCloverDeviceConfiguration.prototype.getName = function () {
	        return 'Clover Cloud WebSocket Connector';
	    };
	    WebSocketCloudCloverDeviceConfiguration.prototype.getCloverDeviceType = function () {
	        return WebsocketCloudCloverDevice_1.WebsocketCloudCloverDevice;
	    };
	    WebSocketCloudCloverDeviceConfiguration.prototype.getCloverTransport = function () {
	        // this is where we determine more about the transport...
	        // The connection is paired:
	        var transport = new WebSocketCloudCloverTransport_1.WebSocketCloudCloverTransport(this.getReconnectDelay(), this.webSocketImplClass, this.cloverServer, this.merchantId, this.accessToken, this.deviceId, this.friendlyId, this.forceConnect, this.httpSupport);
	        return transport;
	    };
	    return WebSocketCloudCloverDeviceConfiguration;
	}(WebSocketCloverDeviceConfiguration_1.WebSocketCloverDeviceConfiguration));
	exports.WebSocketCloudCloverDeviceConfiguration = WebSocketCloudCloverDeviceConfiguration;
	var WebSocketCloudCloverDeviceConfigurationBuilder = /** @class */ (function () {
	    /**
	     *
	     * @param {string} applicationId - the applicationId that uniquely identifies the POS.
	     *    e.g. com.company.MyPOS:2.3.1 for the first connection
	     * @param {string} deviceId - the id (not uuid) of the device to connect to
	     * @param {string} merchantId - the merchant the device belongs to.
	     * @param {string} accessToken - the OAuth access token that will be used when contacting the clover server
	     */
	    function WebSocketCloudCloverDeviceConfigurationBuilder(applicationId, deviceId, merchantId, accessToken) {
	        this.forceConnect = false;
	        this.applicationId = applicationId;
	        this.deviceId = deviceId;
	        this.merchantId = merchantId;
	        this.accessToken = accessToken;
	        this.imageUtil = new ImageUtil_1.ImageUtil();
	        this.httpSupport = typeof XMLHttpRequest !== 'undefined' ? new HttpSupport_1.HttpSupport(XMLHttpRequest) : null;
	        this.webSocketFactoryFunction = BrowserWebSocketImpl_1.BrowserWebSocketImpl.createInstance;
	        this.cloverServer = "https://www.clover.com/";
	    }
	    WebSocketCloudCloverDeviceConfigurationBuilder.prototype.getApplicationId = function () {
	        return this.applicationId;
	    };
	    WebSocketCloudCloverDeviceConfigurationBuilder.prototype.getDeviceId = function () {
	        return this.deviceId;
	    };
	    WebSocketCloudCloverDeviceConfigurationBuilder.prototype.getMerchantId = function () {
	        return this.merchantId;
	    };
	    WebSocketCloudCloverDeviceConfigurationBuilder.prototype.getAccessToken = function () {
	        return this.accessToken;
	    };
	    WebSocketCloudCloverDeviceConfigurationBuilder.prototype.getCloverServer = function () {
	        return this.cloverServer;
	    };
	    WebSocketCloudCloverDeviceConfigurationBuilder.prototype.setCloverServer = function (value) {
	        this.cloverServer = value;
	        return this;
	    };
	    WebSocketCloudCloverDeviceConfigurationBuilder.prototype.getHttpSupport = function () {
	        return this.httpSupport;
	    };
	    WebSocketCloudCloverDeviceConfigurationBuilder.prototype.setHttpSupport = function (value) {
	        this.httpSupport = value;
	        return this;
	    };
	    WebSocketCloudCloverDeviceConfigurationBuilder.prototype.getWebSocketFactoryFunction = function () {
	        return this.webSocketFactoryFunction;
	    };
	    WebSocketCloudCloverDeviceConfigurationBuilder.prototype.setWebSocketFactoryFunction = function (value) {
	        this.webSocketFactoryFunction = value;
	        return this;
	    };
	    WebSocketCloudCloverDeviceConfigurationBuilder.prototype.getImageUtil = function () {
	        return this.imageUtil;
	    };
	    WebSocketCloudCloverDeviceConfigurationBuilder.prototype.setImageUtil = function (value) {
	        this.imageUtil = value;
	        return this;
	    };
	    WebSocketCloudCloverDeviceConfigurationBuilder.prototype.getFriendlyId = function () {
	        return this.friendlyId;
	    };
	    WebSocketCloudCloverDeviceConfigurationBuilder.prototype.setFriendlyId = function (value) {
	        this.friendlyId = value;
	        return this;
	    };
	    WebSocketCloudCloverDeviceConfigurationBuilder.prototype.getForceConnect = function () {
	        return this.forceConnect;
	    };
	    WebSocketCloudCloverDeviceConfigurationBuilder.prototype.setForceConnect = function (value) {
	        this.forceConnect = value;
	        return this;
	    };
	    WebSocketCloudCloverDeviceConfigurationBuilder.prototype.getHeartbeatInterval = function () {
	        return this.heartbeatInterval;
	    };
	    WebSocketCloudCloverDeviceConfigurationBuilder.prototype.setHeartbeatInterval = function (value) {
	        this.heartbeatInterval = value;
	        return this;
	    };
	    WebSocketCloudCloverDeviceConfigurationBuilder.prototype.getHeartbeatDisconnectTimeout = function () {
	        return this.heartbeatDisconnectTimeout;
	    };
	    WebSocketCloudCloverDeviceConfigurationBuilder.prototype.setHeartbeatDisconnectTimeout = function (value) {
	        this.heartbeatDisconnectTimeout = value;
	        return this;
	    };
	    WebSocketCloudCloverDeviceConfigurationBuilder.prototype.getReconnectDelay = function () {
	        return this.reconnectDelay;
	    };
	    WebSocketCloudCloverDeviceConfigurationBuilder.prototype.setReconnectDelay = function (value) {
	        this.reconnectDelay = value;
	        return this;
	    };
	    WebSocketCloudCloverDeviceConfigurationBuilder.prototype.build = function () {
	        return new WebSocketCloudCloverDeviceConfiguration(this.applicationId, this.webSocketFactoryFunction, this.imageUtil, this.cloverServer, this.accessToken, this.httpSupport, this.merchantId, this.deviceId, this.friendlyId, this.forceConnect, this.heartbeatInterval, this.reconnectDelay, this.heartbeatDisconnectTimeout);
	    };
	    return WebSocketCloudCloverDeviceConfigurationBuilder;
	}());
	exports.WebSocketCloudCloverDeviceConfigurationBuilder = WebSocketCloudCloverDeviceConfigurationBuilder;

	//# sourceMappingURL=../../../../../maps/com/clover/remote/client/device/WebSocketCloudCloverDeviceConfiguration.js.map


/***/ }),
/* 275 */
/***/ (function(module, exports, __webpack_require__) {

	"use strict";
	Object.defineProperty(exports, "__esModule", { value: true });
	exports.WebSocketCloverDeviceConfiguration = void 0;
	var DefaultCloverDevice_1 = __webpack_require__(499);
	var Logger_1 = __webpack_require__(48);
	/**
	 * The base for WebSocket device configurations.
	 */
	var WebSocketCloverDeviceConfiguration = /** @class */ (function () {
	    /**
	     * @param {string} applicationId - the applicationId that uniquely identifies the POS. e.g. com.company.MyPOS:2.3.1
	     * @param {Object} webSocketFactoryFunction - the function that will return an instance of the CloverWebSocketInterface
	     *    that will be used when connecting.
	     * @param {IImageUtil} imageUtil - utility to translate images into base64 strings.
	     * @param {number} heartbeatInterval - Frequency at which we will ping the device - millis. Defaults to -1, which means the heartbeat check is disabled.
	     * @param {number} reconnectDelay - upon disconnect, duration to wait until a reconnect is attempted - millis. Defaults to 3000 (millis), minimum value is 3000 millis. To disable the reconnect set to -1.
	     * @param {number} heartbeatDisconnectTimeout - If a response to a heartbeat ping is not received within this time we will call disconnect.
	     */
	    function WebSocketCloverDeviceConfiguration(applicationId, webSocketFactoryFunction, imageUtil, heartbeatInterval, reconnectDelay, heartbeatDisconnectTimeout) {
	        this.logger = Logger_1.Logger.create();
	        this.maxCharInMessage = 50000;
	        this.imageUtil = imageUtil;
	        this.appId = applicationId;
	        this.webSocketImplClass = webSocketFactoryFunction;
	        this.setHeartbeatInterval(heartbeatInterval);
	        this.setReconnectDelay(reconnectDelay);
	        this.setHeartbeatDisconnectTimeout(heartbeatDisconnectTimeout);
	    }
	    WebSocketCloverDeviceConfiguration.prototype.getApplicationId = function () {
	        return this.appId;
	    };
	    WebSocketCloverDeviceConfiguration.prototype.getHeartbeatDisconnectTimeout = function () {
	        return Math.max(WebSocketCloverDeviceConfiguration.DEFAULT_HEARTBEAT_DISCONNECT_TIMEOUT, this.heartbeatDisconnectTimeout);
	    };
	    WebSocketCloverDeviceConfiguration.prototype.setHeartbeatDisconnectTimeout = function (heartbeatDisconnectTimeout) {
	        this.heartbeatDisconnectTimeout = heartbeatDisconnectTimeout || WebSocketCloverDeviceConfiguration.DEFAULT_HEARTBEAT_DISCONNECT_TIMEOUT;
	    };
	    WebSocketCloverDeviceConfiguration.prototype.getHeartbeatInterval = function () {
	        if (this.heartbeatInterval === -1) {
	            return this.heartbeatInterval;
	        }
	        return Math.max(WebSocketCloverDeviceConfiguration.MINIMUM_ALLOWED_HEARTBEAT_INTERVAL, this.heartbeatInterval);
	    };
	    WebSocketCloverDeviceConfiguration.prototype.setHeartbeatInterval = function (heartbeatInterval) {
	        this.heartbeatInterval = heartbeatInterval || WebSocketCloverDeviceConfiguration.DEFAULT_HEARTBEAT_INTERVAL;
	    };
	    WebSocketCloverDeviceConfiguration.prototype.getReconnectDelay = function () {
	        if (this.reconnectDelay === -1) {
	            return this.reconnectDelay;
	        }
	        return Math.max(WebSocketCloverDeviceConfiguration.DEFAULT_RECONNECT_DELAY, this.reconnectDelay);
	    };
	    WebSocketCloverDeviceConfiguration.prototype.setReconnectDelay = function (reconnectDelay) {
	        this.reconnectDelay = reconnectDelay || WebSocketCloverDeviceConfiguration.DEFAULT_RECONNECT_DELAY;
	    };
	    WebSocketCloverDeviceConfiguration.prototype.getCloverDeviceType = function () {
	        return DefaultCloverDevice_1.DefaultCloverDevice;
	    };
	    WebSocketCloverDeviceConfiguration.prototype.getName = function () {
	        return 'Clover WebSocket Connector';
	    };
	    /**
	     * @override
	     */
	    WebSocketCloverDeviceConfiguration.prototype.getImageUtil = function () {
	        return this.imageUtil;
	    };
	    WebSocketCloverDeviceConfiguration.prototype.getMaxMessageCharacters = function () {
	        return this.maxCharInMessage;
	    };
	    WebSocketCloverDeviceConfiguration.DEFAULT_RECONNECT_DELAY = 3000; // millis - Also the minimum allowed.
	    WebSocketCloverDeviceConfiguration.DEFAULT_HEARTBEAT_INTERVAL = -1; // disabled by default
	    WebSocketCloverDeviceConfiguration.MINIMUM_ALLOWED_HEARTBEAT_INTERVAL = 2500; // millis - Do not allow pings more frequently than 2500.
	    WebSocketCloverDeviceConfiguration.DEFAULT_HEARTBEAT_DISCONNECT_TIMEOUT = 3000; // millis - Also the minimum allowed.
	    return WebSocketCloverDeviceConfiguration;
	}());
	exports.WebSocketCloverDeviceConfiguration = WebSocketCloverDeviceConfiguration;

	//# sourceMappingURL=../../../../../maps/com/clover/remote/client/device/WebSocketCloverDeviceConfiguration.js.map


/***/ }),
/* 276 */
/***/ (function(module, exports, __webpack_require__) {

	"use strict";
	var __extends = (this && this.__extends) || (function () {
	    var extendStatics = function (d, b) {
	        extendStatics = Object.setPrototypeOf ||
	            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
	            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
	        return extendStatics(d, b);
	    };
	    return function (d, b) {
	        extendStatics(d, b);
	        function __() { this.constructor = d; }
	        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
	    };
	})();
	Object.defineProperty(exports, "__esModule", { value: true });
	exports.WebSocketCloverTransport = void 0;
	var sdk = __webpack_require__(35);
	var RemoteMessageParser_1 = __webpack_require__(495);
	var CloverWebSocketClient_1 = __webpack_require__(1234);
	var CloverTransport_1 = __webpack_require__(501);
	var Logger_1 = __webpack_require__(48);
	/**
	 * WebSocket Clover Transport
	 *
	 * This is a websocket implementation of the Clover Transport.
	 */
	var WebSocketCloverTransport = /** @class */ (function (_super) {
	    __extends(WebSocketCloverTransport, _super);
	    function WebSocketCloverTransport(reconnectDelay, webSocketImplClass) {
	        var _this = _super.call(this) || this;
	        // Create a logger
	        _this.logger = Logger_1.Logger.create();
	        _this.reconnectDelay = 3000;
	        _this.messageQueue = new Array();
	        _this.status = "Disconnected";
	        /**
	         * prevent reconnects if shutdown was requested
	         */
	        _this.shutdown = false;
	        _this.reconnectDelay = Math.max(0, reconnectDelay);
	        _this.webSocketImplClass = webSocketImplClass;
	        // from WebSocketCloverDeviceConfiguration.getMessagePackageName, which needs to be changeable
	        // 'com.clover.remote_protocol_broadcast.app'
	        _this.messageParser = RemoteMessageParser_1.RemoteMessageParser.getDefaultInstance();
	        var messageSenderId = setInterval(function () {
	            if (!_this.shutdown) {
	                _this.sendMessageThread();
	            }
	            else {
	                clearInterval(messageSenderId);
	            }
	        }, 100);
	        return _this;
	    }
	    WebSocketCloverTransport.prototype.reset = function () {
	        try {
	            // By sending this close, the "onClose" will be fired, which will try to reconnect.
	            this.cloverWebSocketClient.close(WebSocketCloverTransport.CloverWebSocketCloseCode.RESET_CLOSE_CODE.code, WebSocketCloverTransport.CloverWebSocketCloseCode.RESET_CLOSE_CODE.reason);
	        }
	        catch (e) {
	            this.logger.error('error resetting transport.', e);
	        }
	    };
	    /**
	     * Since this is javascript, this is not an actual thread, but it
	     * represents threading the sending of the messages.
	     *
	     * This just checks the message queue for elements, then sends using
	     * a FIFO pattern.
	     */
	    WebSocketCloverTransport.prototype.sendMessageThread = function () {
	        // If we do not have any messages, then don't try to send them
	        if (this.messageQueue.length > 0) {
	            // let's see if we have connectivity
	            if (this.cloverWebSocketClient != null && this.cloverWebSocketClient.isOpen()) {
	                // Hold the message in case we need to put it back on the queue
	                var nextMsg = this.messageQueue.shift();
	                try {
	                    if (this.cloverWebSocketClient.getBufferedAmount() > 0) {
	                        this.messageQueue.unshift(nextMsg);
	                    }
	                    else {
	                        this.cloverWebSocketClient.send(nextMsg);
	                    }
	                }
	                catch (e) {
	                    // Failed to send, put it back
	                    this.messageQueue.unshift(nextMsg);
	                }
	            }
	            else {
	                this.logger.debug("Cannot send queued messages, the websocket client is null or closed.");
	            }
	        }
	    };
	    /**
	     * Pushes the message to the queue for sending by the send 'thread'
	     *
	     * @param message - a string message to send on the websocket
	     * @returns {number} negative 1 (-1)
	     */
	    WebSocketCloverTransport.prototype.sendMessage = function (message) {
	        if (!this.shutdown) {
	            this.messageQueue.push(message);
	        }
	        else {
	            this.logger.debug('In process of shutting down, ignoring ' + message);
	        }
	        return -1;
	    };
	    WebSocketCloverTransport.prototype.clearWebsocket = function () {
	        if (this.cloverWebSocketClient != null) {
	            this.cloverWebSocketClient.clearListener();
	        }
	        this.cloverWebSocketClient = null;
	    };
	    /**
	     * Called from subclasses at the end of the constructor.
	     *
	     * @param deviceEndpoint
	     * @param accessToken
	     */
	    WebSocketCloverTransport.prototype.initializeWithUri = function (deviceEndpoint, accessToken) {
	        if (this.cloverWebSocketClient != null) {
	            if (this.cloverWebSocketClient.isOpen() || this.cloverWebSocketClient.isConnecting()) {
	                return;
	            }
	            else {
	                this.clearWebsocket();
	            }
	        }
	        this.cloverWebSocketClient = new CloverWebSocketClient_1.CloverWebSocketClient(deviceEndpoint, this, this.webSocketImplClass);
	        this.cloverWebSocketClient.connect(accessToken);
	        this.logger.info('Connection attempt complete.');
	        this.notifyConnectionAttemptComplete();
	    };
	    WebSocketCloverTransport.prototype.dispose = function () {
	        this.shutdown = true;
	        // Attempt to clear out messages already in the send queue
	        this.drainQueue();
	        this.notifyDisconnected();
	        if (this.cloverWebSocketClient) {
	            this.cloverWebSocketClient.close();
	        }
	        this.clearWebsocket();
	    };
	    WebSocketCloverTransport.prototype.drainQueue = function () {
	        // Attempt to finish off the queue
	        while (this.messageQueue.length > 0) {
	            // let's see if we have connectivity
	            if (this.cloverWebSocketClient != null && this.cloverWebSocketClient.isOpen()) {
	                var nextMsg = this.messageQueue.shift();
	                try {
	                    this.cloverWebSocketClient.send(nextMsg);
	                }
	                catch (e) {
	                    this.logger.debug('In process of shutting down, an error occurred trying to drain the message queue.  The messages unsent are ' + this.messageQueue);
	                    break;
	                }
	            }
	            else {
	                this.logger.debug('In process of shutting down, the websocket became disconnected.  The messages unsent are ' + this.messageQueue);
	                break;
	            }
	        }
	    };
	    WebSocketCloverTransport.prototype.connectionError = function (ws, message, errorEventCode, reconnect) {
	        if (reconnect === void 0) { reconnect = true; }
	        this.logger.debug('Connection error...');
	        if (this.cloverWebSocketClient == ws) {
	            for (var _i = 0, _a = this.observers; _i < _a.length; _i++) {
	                var observer = _a[_i];
	                observer.onDisconnected(this, message, reconnect);
	                var deviceErrorEvent = new sdk.remotepay.CloverDeviceErrorEvent();
	                deviceErrorEvent.setType(sdk.remotepay.ErrorType.COMMUNICATION);
	                deviceErrorEvent.setCode(errorEventCode || sdk.remotepay.DeviceErrorEventCode.NotConnected);
	                deviceErrorEvent.setCause(null);
	                deviceErrorEvent.setMessage(message);
	                observer.onDeviceError(deviceErrorEvent);
	            }
	        }
	    };
	    WebSocketCloverTransport.prototype.onNotResponding = function (ws) {
	        this.logger.debug('Not Responding...');
	        if (this.cloverWebSocketClient == ws) {
	            for (var _i = 0, _a = this.observers; _i < _a.length; _i++) {
	                var observer = _a[_i];
	                this.logger.debug('onNotResponding');
	                observer.onDisconnected(this);
	            }
	        }
	    };
	    WebSocketCloverTransport.prototype.onPingResponding = function (ws) {
	        this.logger.debug("Ping Responding");
	        if (this.cloverWebSocketClient == ws) {
	            for (var _i = 0, _a = this.observers; _i < _a.length; _i++) {
	                var observer = _a[_i];
	                this.logger.debug("onPingResponding");
	                observer.onReady(this);
	            }
	        }
	    };
	    WebSocketCloverTransport.prototype.onOpen = function (ws) {
	        this.logger.debug("Open...");
	        if (this.cloverWebSocketClient == ws) {
	            this.notifyConnected();
	        }
	    };
	    WebSocketCloverTransport.prototype.onClose = function (ws, code, reason, remote) {
	        this.logger.debug("onClose: " + reason + ", remote? " + remote);
	        if (this.cloverWebSocketClient == ws) {
	            if (!this.cloverWebSocketClient.isClosing()) {
	                this.cloverWebSocketClient.clearListener();
	                if (!this.cloverWebSocketClient.isClosed()) {
	                    this.cloverWebSocketClient.close();
	                }
	            }
	            this.clearWebsocket();
	            for (var _i = 0, _a = this.observers; _i < _a.length; _i++) {
	                var observer = _a[_i];
	                this.logger.debug("onClose");
	                observer.onDisconnected(this);
	            }
	        }
	    };
	    WebSocketCloverTransport.prototype.onMessage = function (wsOrMessage, messageOnly) {
	        if (typeof wsOrMessage == 'string') {
	            _super.prototype.onMessage.call(this, wsOrMessage);
	        }
	        else {
	            this.onMessage_cwscl(wsOrMessage, messageOnly);
	        }
	    };
	    WebSocketCloverTransport.prototype.isShutdown = function () {
	        return this.shutdown;
	    };
	    /**
	     * Returns a safe copy of the current message queue, largely used on reconnect.
	     */
	    WebSocketCloverTransport.prototype.getSafeMessageQueue = function () {
	        return this.messageQueue.slice();
	    };
	    WebSocketCloverTransport.prototype.onMessage_cwscl = function (ws, message) {
	        if (this.cloverWebSocketClient == ws) {
	            for (var _i = 0, _a = this.observers; _i < _a.length; _i++) {
	                var observer = _a[_i];
	                observer.onMessage(message);
	            }
	        }
	    };
	    WebSocketCloverTransport.prototype.onSendError = function (payloadText) {
	        this.logger.error("WebSocketCloverTransport: An error occurred sending a message.");
	    };
	    WebSocketCloverTransport.METHOD = "method";
	    WebSocketCloverTransport.PAYLOAD = "payload";
	    return WebSocketCloverTransport;
	}(CloverTransport_1.CloverTransport));
	exports.WebSocketCloverTransport = WebSocketCloverTransport;
	(function (WebSocketCloverTransport) {
	    var CloverWebSocketCloseCode = /** @class */ (function () {
	        function CloverWebSocketCloseCode(code, reason) {
	            this.code = code;
	            this.reason = reason;
	        }
	        // Using 4000 as a reset code.
	        CloverWebSocketCloseCode.RESET_CLOSE_CODE = new CloverWebSocketCloseCode(4000, "Reset requested");
	        return CloverWebSocketCloseCode;
	    }());
	    WebSocketCloverTransport.CloverWebSocketCloseCode = CloverWebSocketCloseCode;
	})(WebSocketCloverTransport = exports.WebSocketCloverTransport || (exports.WebSocketCloverTransport = {}));
	exports.WebSocketCloverTransport = WebSocketCloverTransport;

	//# sourceMappingURL=../../../../../../maps/com/clover/remote/client/transport/websocket/WebSocketCloverTransport.js.map


/***/ }),
/* 277 */
/***/ (function(module, exports, __webpack_require__) {

	"use strict";
	Object.defineProperty(exports, "__esModule", { value: true });
	exports.HttpSupport = void 0;
	var Logger_1 = __webpack_require__(48);
	var addHeaders_1 = __webpack_require__(1239);
	/**
	 * Interface used to abstract implementation details to allow for NodeJS and
	 * Browser usage of the library.
	 *
	 */
	var HttpSupport = /** @class */ (function () {
	    function HttpSupport(xmlHttpImplClass) {
	        // Create a logger - when we need it
	        this.logger = Logger_1.Logger.create();
	        this.xmlHttpImplClass = xmlHttpImplClass;
	    }
	    HttpSupport.prototype.setXmlHttpCallback = function (xmlHttpInst, endpoint, onDataLoaded, onError) {
	        xmlHttpInst.onreadystatechange = function () {
	            if (xmlHttpInst.readyState == 4) {
	                if (xmlHttpInst.status == 200) {
	                    try {
	                        if (onDataLoaded) {
	                            var data = null;
	                            if (xmlHttpInst.responseText && xmlHttpInst.responseText != "") {
	                                data = JSON.parse(xmlHttpInst.responseText);
	                            }
	                            onDataLoaded(data, xmlHttpInst);
	                        }
	                    }
	                    catch (e) {
	                        this.logger.error(endpoint, e);
	                        if (onDataLoaded) {
	                            onDataLoaded({});
	                        }
	                    }
	                }
	                else {
	                    if (onError) {
	                        var errorData = null;
	                        try {
	                            if (xmlHttpInst.responseText && xmlHttpInst.responseText != "") {
	                                errorData = JSON.parse(xmlHttpInst.responseText);
	                            }
	                        }
	                        catch (e) { } // Ignore, just return the default message
	                        onError({
	                            message: (errorData && errorData.details) || (errorData && errorData.message) || "status returned was not 200",
	                            endpoint: endpoint,
	                            status: xmlHttpInst.status
	                        });
	                    }
	                }
	            }
	            else {
	            }
	        }.bind(this);
	    };
	    /**
	     * Make the REST call to get the data
	     */
	    HttpSupport.prototype.doXmlHttp = function (method, endpoint, onDataLoaded, onError, additionalHeaders) {
	        var xmlHttp = new this.xmlHttpImplClass();
	        this.setXmlHttpCallback(xmlHttp, endpoint, onDataLoaded, onError);
	        xmlHttp.open(method, endpoint, true);
	        // Handle the following Firefox bug - https://bugzilla.mozilla.org/show_bug.cgi?id=433859#c4
	        // This check can only be performed in a browser environment so make sure navigator is defined first.
	        if (typeof (navigator) !== "undefined" && navigator.userAgent.search("Firefox")) {
	            xmlHttp.setRequestHeader("Accept", "*/*");
	        }
	        addHeaders_1.addHeaders(additionalHeaders, xmlHttp);
	        xmlHttp.send();
	    };
	    HttpSupport.prototype.doXmlHttpSendJson = function (method, sendData, endpoint, onDataLoaded, onError, additionalHeaders) {
	        var xmlHttp = new this.xmlHttpImplClass();
	        this.setXmlHttpCallback(xmlHttp, endpoint, onDataLoaded, onError);
	        xmlHttp.open(method, endpoint, true);
	        addHeaders_1.addHeaders(additionalHeaders, xmlHttp);
	        if (sendData) {
	            xmlHttp.setRequestHeader("Content-Type", "application/json;charset=UTF-8");
	            var sendDataStr = JSON.stringify(sendData);
	            xmlHttp.send(sendDataStr);
	        }
	        else {
	            xmlHttp.send();
	        }
	    };
	    /**
	     * Make the REST call to get the data
	     */
	    HttpSupport.prototype.postData = function (endpoint, onDataLoaded, onError, sendData, additionalHeaders) {
	        this.doXmlHttpSendJson("POST", sendData, endpoint, onDataLoaded, onError, additionalHeaders);
	    };
	    /**
	     * Make the REST call to get the data
	     */
	    HttpSupport.prototype.getData = function (endpoint, onDataLoaded, onError, additionalHeaders) {
	        this.doXmlHttp("GET", endpoint, onDataLoaded, onError, additionalHeaders);
	    };
	    /**
	     * Make the REST call to get the data
	     */
	    HttpSupport.prototype.options = function (endpoint, onDataLoaded, onError, additionalHeaders) {
	        this.doXmlHttp("OPTIONS", endpoint, onDataLoaded, onError, additionalHeaders);
	    };
	    /**
	     * Make the REST call to get the data
	     */
	    HttpSupport.prototype.putData = function (endpoint, onDataLoaded, onError, sendData) {
	        this.doXmlHttpSendJson("PUT", sendData, endpoint, onDataLoaded, onError);
	    };
	    /**
	     * Make the REST call to get the data
	     */
	    HttpSupport.prototype.deleteData = function (endpoint, onDataLoaded, onError) {
	        this.doXmlHttp("DELETE", endpoint, onDataLoaded, onError);
	    };
	    return HttpSupport;
	}());
	exports.HttpSupport = HttpSupport;

	//# sourceMappingURL=../../../maps/com/clover/util/HttpSupport.js.map


/***/ }),
/* 278 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';

	Object.defineProperty(exports, "__esModule", {
	    value: true
	});

	var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

	var _reactRouter = __webpack_require__(61);

	var _CurrencyFormatter = __webpack_require__(27);

	var _CurrencyFormatter2 = _interopRequireDefault(_CurrencyFormatter);

	var _react = __webpack_require__(4);

	var _react2 = _interopRequireDefault(_react);

	var _RegisterIcon = __webpack_require__(541);

	var _RegisterIcon2 = _interopRequireDefault(_RegisterIcon);

	var _NewTabIcon = __webpack_require__(537);

	var _NewTabIcon2 = _interopRequireDefault(_NewTabIcon);

	var _OrdersIcon = __webpack_require__(538);

	var _OrdersIcon2 = _interopRequireDefault(_OrdersIcon);

	var _CustomersIcon = __webpack_require__(533);

	var _CustomersIcon2 = _interopRequireDefault(_CustomersIcon);

	var _RefundsIcon = __webpack_require__(540);

	var _RefundsIcon2 = _interopRequireDefault(_RefundsIcon);

	var _TransactionsIcon = __webpack_require__(542);

	var _TransactionsIcon2 = _interopRequireDefault(_TransactionsIcon);

	var _CustomActivitiesIcon = __webpack_require__(532);

	var _CustomActivitiesIcon2 = _interopRequireDefault(_CustomActivitiesIcon);

	var _DeviceIcon = __webpack_require__(534);

	var _DeviceIcon2 = _interopRequireDefault(_DeviceIcon);

	var _RecoveryIcon = __webpack_require__(539);

	var _RecoveryIcon2 = _interopRequireDefault(_RecoveryIcon);

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

	function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

	function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

	var HomeMenu = function (_React$Component) {
	    _inherits(HomeMenu, _React$Component);

	    function HomeMenu(props) {
	        _classCallCheck(this, HomeMenu);

	        var _this = _possibleConstructorReturn(this, (HomeMenu.__proto__ || Object.getPrototypeOf(HomeMenu)).call(this, props));

	        _this.state = {
	            redirect: false
	        };

	        _this.cloverConnector = _this.props.cloverConnection.cloverConnector;
	        _this.formatter = new _CurrencyFormatter2.default();
	        _this.setStatus = _this.props.setStatus;
	        _this.store = _this.props.store;

	        _this.preAuth = _this.preAuth.bind(_this);

	        _this.cloverConnector.showWelcomeScreen();
	        return _this;
	    }

	    _createClass(HomeMenu, [{
	        key: 'preAuth',
	        value: function preAuth() {
	            // opens register page and tells register the sale type is a pre auth
	            _reactRouter.browserHistory.push({ pathname: '/register', state: { saleType: 'PreAuth' } });
	        }
	    }, {
	        key: 'render',
	        value: function render() {

	            return _react2.default.createElement(
	                'div',
	                { className: 'home_menu' },
	                _react2.default.createElement(
	                    _reactRouter.Link,
	                    { to: '/register' },
	                    _react2.default.createElement(
	                        'div',
	                        { className: 'home_button' },
	                        _react2.default.createElement(
	                            'div',
	                            { className: 'home_title' },
	                            'Register'
	                        ),
	                        _react2.default.createElement(_RegisterIcon2.default, null)
	                    )
	                ),
	                _react2.default.createElement(
	                    'div',
	                    { className: 'home_button', onClick: this.preAuth },
	                    _react2.default.createElement(
	                        'div',
	                        { className: 'home_title' },
	                        'New Tab (PreAuth)'
	                    ),
	                    _react2.default.createElement(_NewTabIcon2.default, null)
	                ),
	                _react2.default.createElement(
	                    _reactRouter.Link,
	                    { to: '/orders' },
	                    _react2.default.createElement(
	                        'div',
	                        { className: 'home_button' },
	                        _react2.default.createElement(
	                            'div',
	                            { className: 'home_title' },
	                            'View Orders'
	                        ),
	                        _react2.default.createElement(_OrdersIcon2.default, null)
	                    )
	                ),
	                _react2.default.createElement(
	                    _reactRouter.Link,
	                    { to: '/vault-card' },
	                    _react2.default.createElement(
	                        'div',
	                        { className: 'home_button' },
	                        _react2.default.createElement(
	                            'div',
	                            { className: 'home_title' },
	                            'Customers (Vault Card)'
	                        ),
	                        _react2.default.createElement(_CustomersIcon2.default, null)
	                    )
	                ),
	                _react2.default.createElement(
	                    _reactRouter.Link,
	                    { to: '/refunds' },
	                    _react2.default.createElement(
	                        'div',
	                        { className: 'home_button' },
	                        _react2.default.createElement(
	                            'div',
	                            { className: 'home_title' },
	                            'Manual Refunds / Credit'
	                        ),
	                        _react2.default.createElement(_RefundsIcon2.default, null)
	                    )
	                ),
	                _react2.default.createElement(
	                    _reactRouter.Link,
	                    { to: '/transactions' },
	                    _react2.default.createElement(
	                        'div',
	                        { className: 'home_button' },
	                        _react2.default.createElement(
	                            'div',
	                            { className: 'home_title' },
	                            'Transactions'
	                        ),
	                        _react2.default.createElement(_TransactionsIcon2.default, null)
	                    )
	                ),
	                _react2.default.createElement(
	                    _reactRouter.Link,
	                    { to: '/custom-activities' },
	                    _react2.default.createElement(
	                        'div',
	                        { className: 'home_button' },
	                        _react2.default.createElement(
	                            'div',
	                            { className: 'home_title' },
	                            'Custom Activities'
	                        ),
	                        _react2.default.createElement(_CustomActivitiesIcon2.default, null)
	                    )
	                ),
	                _react2.default.createElement(
	                    _reactRouter.Link,
	                    { to: '/device' },
	                    _react2.default.createElement(
	                        'div',
	                        { className: 'home_button' },
	                        _react2.default.createElement(
	                            'div',
	                            { className: 'home_title' },
	                            'Device'
	                        ),
	                        _react2.default.createElement(_DeviceIcon2.default, null)
	                    )
	                ),
	                _react2.default.createElement(
	                    _reactRouter.Link,
	                    { to: '/recovery-options' },
	                    _react2.default.createElement(
	                        'div',
	                        { className: 'home_button' },
	                        _react2.default.createElement(
	                            'div',
	                            { className: 'home_title' },
	                            'Recovery Options'
	                        ),
	                        _react2.default.createElement(_RecoveryIcon2.default, null)
	                    )
	                )
	            );
	        }
	    }]);

	    return HomeMenu;
	}(_react2.default.Component);

	exports.default = HomeMenu;

/***/ }),
/* 279 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';

	Object.defineProperty(exports, "__esModule", {
	    value: true
	});

	var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

	var _Checkmark = __webpack_require__(175);

	var _Checkmark2 = _interopRequireDefault(_Checkmark);

	var _ImageHelper = __webpack_require__(126);

	var _ImageHelper2 = _interopRequireDefault(_ImageHelper);

	var _react = __webpack_require__(4);

	var _react2 = _interopRequireDefault(_react);

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

	function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

	function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

	var TransactionRow = function (_React$Component) {
	    _inherits(TransactionRow, _React$Component);

	    function TransactionRow(props) {
	        _classCallCheck(this, TransactionRow);

	        var _this = _possibleConstructorReturn(this, (TransactionRow.__proto__ || Object.getPrototypeOf(TransactionRow)).call(this, props));

	        _this.imageHelper = new _ImageHelper2.default();
	        _this.transaction = _this.props.transaction;
	        console.log('Transaction Row', _this.transaction);
	        return _this;
	    }

	    _createClass(TransactionRow, [{
	        key: 'render',
	        value: function render() {
	            var _this2 = this;

	            var cardDetails = this.transaction.cardDetails;
	            var checkmark = this.transaction.result;
	            var date = this.transaction.date.toLocaleDateString([], { month: 'short', day: 'numeric', year: 'numeric' });
	            var employee = this.transaction.employee;
	            var image = this.imageHelper.getCardTypeImage(this.transaction.cardType);
	            var _onClick = this.props.onClick;
	            var paymentId = this.transaction.id;
	            var tender = this.transaction.tender;
	            var time = this.transaction.date.toLocaleTimeString([], { hour: '2-digit', minute: '2-digit' });
	            var total = this.transaction.getAmount();
	            var displayTotal = '$' + total;

	            var paymentType = this.transaction.transactionTitle;
	            if (this.transaction.refund || paymentType === 'Manual Refund') {
	                if (this.transaction.refund && paymentType !== 'Manual Refund') {
	                    paymentType = 'Refund';
	                }
	                displayTotal = _react2.default.createElement(
	                    'span',
	                    { className: 'red_text' },
	                    '($',
	                    total,
	                    ')'
	                );
	            }
	            if (this.transaction.transactionType == 'VOIDED') {
	                paymentType = 'Voided';
	                displayTotal = _react2.default.createElement(
	                    'span',
	                    { className: 'red_text' },
	                    '($',
	                    total,
	                    ')'
	                );
	            }

	            return _react2.default.createElement(
	                'div',
	                { className: 'transaction_row', onClick: function onClick() {
	                        _onClick(_this2.transaction);
	                    } },
	                _react2.default.createElement(
	                    'div',
	                    { className: 'transaction_row_column' },
	                    _react2.default.createElement(
	                        'div',
	                        null,
	                        _react2.default.createElement(
	                            'strong',
	                            null,
	                            time
	                        )
	                    ),
	                    _react2.default.createElement(
	                        'div',
	                        { className: 'grey_text' },
	                        date
	                    )
	                ),
	                _react2.default.createElement(
	                    'div',
	                    { className: 'checkmark_row' },
	                    checkmark && _react2.default.createElement(_Checkmark2.default, null),
	                    _react2.default.createElement(
	                        'div',
	                        { className: 'column_plain' },
	                        _react2.default.createElement(
	                            'div',
	                            null,
	                            _react2.default.createElement(
	                                'strong',
	                                null,
	                                paymentType
	                            )
	                        ),
	                        _react2.default.createElement(
	                            'div',
	                            { className: 'grey_text' },
	                            paymentId
	                        )
	                    )
	                ),
	                _react2.default.createElement(
	                    'div',
	                    { className: 'transaction_row_column' },
	                    _react2.default.createElement(
	                        'div',
	                        null,
	                        _react2.default.createElement(
	                            'strong',
	                            null,
	                            displayTotal
	                        )
	                    )
	                ),
	                _react2.default.createElement(
	                    'div',
	                    { className: 'transaction_tender' },
	                    _react2.default.createElement('img', { className: 'tender_logo', src: image }),
	                    _react2.default.createElement(
	                        'div',
	                        { className: 'transaction_tender_column' },
	                        _react2.default.createElement(
	                            'div',
	                            null,
	                            _react2.default.createElement(
	                                'strong',
	                                null,
	                                tender
	                            )
	                        ),
	                        _react2.default.createElement(
	                            'div',
	                            { className: 'grey_text' },
	                            cardDetails
	                        )
	                    )
	                ),
	                _react2.default.createElement(
	                    'div',
	                    { className: 'transaction_row_column last_item' },
	                    _react2.default.createElement(
	                        'div',
	                        null,
	                        _react2.default.createElement(
	                            'strong',
	                            null,
	                            employee
	                        )
	                    )
	                )
	            );
	        }
	    }]);

	    return TransactionRow;
	}(_react2.default.Component);

	exports.default = TransactionRow;

/***/ }),
/* 280 */
/***/ (function(module, exports) {

	'use strict';

	Object.defineProperty(exports, "__esModule", {
	    value: true
	});
	var myConfig = exports.myConfig = {
	    clientId: 'HBK8YZG9EQNJG',
	    devicesDomain: 'https://apisandbox.dev.clover.com/v3/merchants/',
	    oAuthDomain: 'https://sandbox.dev.clover.com',
	    uriText: 'wss://10.249.255.103:12345/remote_pay',
	    cloverServer: 'https://apisandbox.dev.clover.com'
	};

/***/ }),
/* 281 */
/***/ (function(module, exports) {

	"use strict";

	var items = [{ "id": 0, "title": "Chicken Nuggets", "itemPrice": 539, "taxable": true, "tippable": true }, { "id": 1, "title": "Hamburger", "itemPrice": 699, "taxable": true, "tippable": true }, { "id": 2, "title": "Cheeseburger", "itemPrice": 759, "taxable": true, "tippable": true }, { "id": 3, "title": "Double Hamburger", "itemPrice": 819, "taxable": true, "tippable": true }, { "id": 4, "title": "Double Cheeseburger", "itemPrice": 899, "taxable": true, "tippable": true }, { "id": 5, "title": "Bacon Cheeseburger", "itemPrice": 999, "taxable": true, "tippable": true }, { "id": 6, "title": "Small French Fries", "itemPrice": 239, "taxable": true, "tippable": true }, { "id": 7, "title": "Medium French Fries", "itemPrice": 259, "taxable": true, "tippable": true }, { "id": 8, "title": "Large French Fries", "itemPrice": 279, "taxable": true, "tippable": true }, { "id": 9, "title": "Small Fountain Drink", "itemPrice": 169, "taxable": true, "tippable": true }, { "id": 10, "title": "Medium Fountain Drink", "itemPrice": 189, "taxable": true, "tippable": true }, { "id": 11, "title": "Large Fountain Drink", "itemPrice": 229, "taxable": true, "tippable": true }, { "id": 12, "title": "Chocolate Milkshake", "itemPrice": 449, "taxable": true, "tippable": true }, { "id": 13, "title": "Vanilla Milkshake", "itemPrice": 419, "taxable": true, "tippable": true }, { "id": 14, "title": "Strawberry Milkshake", "itemPrice": 439, "taxable": true, "tippable": true }, { "id": 15, "title": "Ice Cream Cone", "itemPrice": 189, "taxable": true, "tippable": true }, { "id": 16, "title": "$25 Gift Card", "itemPrice": 2500, "taxable": false, "tippable": false }, { "id": 17, "title": "$50 Gift Card", "itemPrice": 5000, "taxable": false, "tippable": false }];
	module.exports = items;

/***/ }),
/* 282 */
/***/ (function(module, exports) {

	"use strict";

	Object.defineProperty(exports, "__esModule", {
	    value: true
	});

	var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

	var Item = function () {
	    function Item(id, title, price, taxable, tippable) {
	        _classCallCheck(this, Item);

	        this.id = id;
	        this.price = price;
	        this.taxable = taxable;
	        this.tippable = tippable;
	        this.title = title;
	    }

	    _createClass(Item, [{
	        key: "getId",
	        value: function getId() {
	            return this.id;
	        }
	    }, {
	        key: "getTitle",
	        value: function getTitle() {
	            return this.title;
	        }
	    }, {
	        key: "getPrice",
	        value: function getPrice() {
	            return this.price;
	        }
	    }, {
	        key: "getTaxable",
	        value: function getTaxable() {
	            return this.taxable;
	        }
	    }, {
	        key: "getTippable",
	        value: function getTippable() {
	            return this.tippable;
	        }
	    }]);

	    return Item;
	}();

	exports.default = Item;

/***/ }),
/* 283 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';

	Object.defineProperty(exports, "__esModule", {
	    value: true
	});

	var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

	var _CurrencyFormatter = __webpack_require__(27);

	var _CurrencyFormatter2 = _interopRequireDefault(_CurrencyFormatter);

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

	var OrderPayment = function () {
	    function OrderPayment(id) {
	        _classCallCheck(this, OrderPayment);

	        this.amount = 0;
	        this.cardDetails = 'EBT 3453';
	        this.cardType = null;
	        this.cashBackAmount = 0.00;
	        this.cloverOrderId = null;
	        this.cloverPaymentId = null;
	        this.date = new Date();
	        this.deviceId = 'C03458DF83458';
	        this.employee = 'Employee';
	        this.entryMethod = 'SWIPED';
	        this.externalPaymentId = null;
	        this.formatter = new _CurrencyFormatter2.default();
	        this.id = id;
	        this.refunds = [];
	        this.status = 'OPEN';
	        this.taxAmount = 0;
	        this.tender = 'Credit Card';
	        this.tipAmount = 0;
	        this.transactionState = 'CLOSED';
	        this.transactionTitle = null;
	        this.transactionType = '';
	    }

	    _createClass(OrderPayment, [{
	        key: 'getId',
	        value: function getId() {
	            return this.cloverPaymentId;
	        }
	    }, {
	        key: 'setStatus',
	        value: function setStatus(status) {
	            this.status = status;
	        }
	    }, {
	        key: 'getStatus',
	        value: function getStatus() {
	            return this.status;
	        }
	    }, {
	        key: 'setAmount',
	        value: function setAmount(amount) {
	            this.amount = amount;
	        }
	    }, {
	        key: 'getAmount',
	        value: function getAmount() {
	            return this.amount;
	        }
	    }, {
	        key: 'setTipAmount',
	        value: function setTipAmount(tipAmount) {
	            this.tipAmount = tipAmount;
	        }
	    }, {
	        key: 'getTipAmount',
	        value: function getTipAmount() {
	            if (this.tipAmount !== null) {
	                return this.formatter.convertToFloat(this.tipAmount);
	            } else {
	                return 0;
	            }
	        }
	    }, {
	        key: 'getTender',
	        value: function getTender() {
	            return this.tender;
	        }
	    }, {
	        key: 'setTender',
	        value: function setTender(tender) {
	            this.tender = tender;
	        }
	    }, {
	        key: 'getTransactionType',
	        value: function getTransactionType() {
	            return this.transactionType;
	        }
	    }, {
	        key: 'setTransactionType',
	        value: function setTransactionType(transactionType) {
	            this.transactionType = transactionType;
	        }
	    }, {
	        key: 'getTotal',
	        value: function getTotal() {
	            var amount = this.formatter.convertToFloat(this.amount);
	            var tipAmount = this.getTipAmount();
	            console.log('getTotal tipAmount', tipAmount, 'amount', amount);
	            var total = parseFloat(parseFloat(amount) + parseFloat(tipAmount)).toFixed(2);
	            console.log('getTotal', total);
	            return total;
	        }
	    }, {
	        key: 'getTotalForRequest',
	        value: function getTotalForRequest() {}
	    }, {
	        key: 'addRefund',
	        value: function addRefund(refund) {
	            if (this.refunds === undefined) {
	                this.refunds = [];
	            }
	            this.refunds.push(refund);
	        }
	    }, {
	        key: 'getRefundsAmount',
	        value: function getRefundsAmount() {
	            var totalAmount = 0;
	            this.refunds.forEach(function (refund) {
	                totalAmount = totalAmount + refund.amount;
	            });
	            return totalAmount;
	        }
	    }, {
	        key: 'setOrderId',
	        value: function setOrderId(id) {
	            this.orderId = id;
	        }
	    }, {
	        key: 'getOrderId',
	        value: function getOrderId() {
	            return this.orderId;
	        }
	    }, {
	        key: 'setExternalPaymentId',
	        value: function setExternalPaymentId(id) {
	            this.externalPaymentId = id;
	        }
	    }, {
	        key: 'getExternalPaymentId',
	        value: function getExternalPaymentId() {
	            return this.externalPaymentId;
	        }
	    }, {
	        key: 'setCashback',
	        value: function setCashback(cashback) {
	            this.cashBackAmount = cashback;
	        }
	    }, {
	        key: 'getCashback',
	        value: function getCashback() {
	            return this.cashBackAmount;
	        }
	    }, {
	        key: 'setCardType',
	        value: function setCardType(cardType) {
	            this.cardType = cardType;
	        }
	    }, {
	        key: 'getCardType',
	        value: function getCardType() {
	            return this.cardType;
	        }
	    }, {
	        key: 'setCardDetails',
	        value: function setCardDetails(cardDetails) {
	            this.cardDetails = cardDetails;
	        }
	    }, {
	        key: 'getCardDetails',
	        value: function getCardDetails() {
	            return this.cardDetails;
	        }
	    }, {
	        key: 'setDate',
	        value: function setDate(date) {
	            this.date = date;
	        }
	    }, {
	        key: 'getDate',
	        value: function getDate() {
	            return this.date;
	        }
	    }, {
	        key: 'getCloverPaymentId',
	        value: function getCloverPaymentId() {
	            return this.cloverPaymentId;
	        }
	    }, {
	        key: 'getTransactionTitle',
	        value: function getTransactionTitle() {
	            return this.transactionTitle;
	        }
	    }, {
	        key: 'setTransactionTitle',
	        value: function setTransactionTitle(transactionTitle) {
	            this.transactionTitle = transactionTitle;
	        }
	    }]);

	    return OrderPayment;
	}();

	exports.default = OrderPayment;

/***/ }),
/* 284 */
/***/ (function(module, exports) {

	'use strict';

	Object.defineProperty(exports, "__esModule", {
	    value: true
	});

	var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

	var Transaction = function () {
	    function Transaction() {
	        _classCallCheck(this, Transaction);

	        this.amount = 0;
	        this.cardDetails = null;
	        this.cardType = 'Default';
	        this.date = new Date();
	        this.deviceId = null;
	        this.employee = 'Employee';
	        this.entryMethod = '';
	        this.id = null;
	        this.tender = 'Credit Card';
	        this.transactionState = 'OPEN';
	        this.transactionTitle = null;
	        this.transactionType = '';
	        this.refund = false;
	        this.result = 'Successful';
	        this._tipAmount = '';
	    }

	    _createClass(Transaction, [{
	        key: 'getAmount',
	        value: function getAmount() {
	            return this.amount;
	        }
	    }, {
	        key: 'setAmount',
	        value: function setAmount(amount) {
	            this.amount = amount;
	        }
	    }, {
	        key: 'getCardDetails',
	        value: function getCardDetails() {
	            return this.cardDetails;
	        }
	    }, {
	        key: 'setCardDetails',
	        value: function setCardDetails(cardDetails) {
	            this.cardDetails = cardDetails;
	        }
	    }, {
	        key: 'getCardType',
	        value: function getCardType() {
	            return this.cardType;
	        }
	    }, {
	        key: 'setCardType',
	        value: function setCardType(cardType) {
	            this.cardType = cardType;
	        }
	    }, {
	        key: 'getDate',
	        value: function getDate() {
	            return this.date;
	        }
	    }, {
	        key: 'setDate',
	        value: function setDate(date) {
	            this.date = date;
	        }
	    }, {
	        key: 'getEmployee',
	        value: function getEmployee() {
	            return this.employee;
	        }
	    }, {
	        key: 'setEmployee',
	        value: function setEmployee(employee) {
	            this.employee = employee;
	        }
	    }, {
	        key: 'getId',
	        value: function getId() {
	            return this.id;
	        }
	    }, {
	        key: 'setId',
	        value: function setId(id) {
	            this.id = id;
	        }
	    }, {
	        key: 'getTender',
	        value: function getTender() {
	            return this.tender;
	        }
	    }, {
	        key: 'setTender',
	        value: function setTender(tender) {
	            this.tender = tender;
	        }
	    }, {
	        key: 'getTransactionTitle',
	        value: function getTransactionTitle() {
	            return this.transactionTitle;
	        }
	    }, {
	        key: 'setTransactionTitle',
	        value: function setTransactionTitle(transactionTitle) {
	            this.transactionTitle = transactionTitle;
	        }
	    }, {
	        key: 'getTransactionType',
	        value: function getTransactionType() {
	            return this.transactionType;
	        }
	    }, {
	        key: 'setTransactionType',
	        value: function setTransactionType(transactionType) {
	            this.transactionType = transactionType;
	        }
	    }, {
	        key: 'getRefund',
	        value: function getRefund() {
	            return this.refund;
	        }
	    }, {
	        key: 'setRefund',
	        value: function setRefund(refund) {
	            this.refund = refund;
	        }
	    }, {
	        key: 'getEntryMethod',
	        value: function getEntryMethod() {
	            return this.entryMethod;
	        }
	    }, {
	        key: 'setEntryMethod',
	        value: function setEntryMethod(entryMethod) {
	            this.entryMethod = entryMethod;
	        }
	    }, {
	        key: 'getTransactionState',
	        value: function getTransactionState() {
	            return this.transactionState;
	        }
	    }, {
	        key: 'setTransactionState',
	        value: function setTransactionState(state) {
	            this.transactionState = state;
	        }
	    }, {
	        key: 'getDeviceId',
	        value: function getDeviceId() {
	            return this.deviceId;
	        }
	    }, {
	        key: 'setDeviceId',
	        value: function setDeviceId(id) {
	            this.deviceId = id;
	        }
	    }, {
	        key: 'getTipAmount',
	        value: function getTipAmount() {
	            return this._tipAmount;
	        }
	    }, {
	        key: 'setTipAmount',
	        value: function setTipAmount(value) {
	            this._tipAmount = value;
	        }
	    }]);

	    return Transaction;
	}();

	exports.default = Transaction;

/***/ }),
/* 285 */
/***/ (function(module, exports) {

	"use strict";

	Object.defineProperty(exports, "__esModule", {
	    value: true
	});

	var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

	var CardDataHelper = function () {
	    function CardDataHelper() {
	        _classCallCheck(this, CardDataHelper);
	    }

	    _createClass(CardDataHelper, [{
	        key: "getExpirationDate",
	        value: function getExpirationDate(exp) {
	            var first = exp.substr(0, 2);
	            var last = exp.substr(2, 4);
	            var date = first + "/" + last;
	            return date;
	        }
	    }, {
	        key: "getCardDataArray",
	        value: function getCardDataArray(cardData) {
	            var cardDataString = [];
	            cardDataString.push("Cardholder Name: " + cardData.cardholderName);
	            cardDataString.push("Encrypted: " + cardData.encrypted);
	            cardDataString.push("Expiration: " + this.getExpirationDate(cardData.exp));
	            cardDataString.push("First 6: " + cardData.first6);
	            cardDataString.push("First Name: " + cardData.firstName);
	            cardDataString.push("Last 4: " + cardData.last4);
	            cardDataString.push("Last Name: " + cardData.lastName);
	            cardDataString.push("Masked Track 1: " + cardData.maskedTrack1);
	            cardDataString.push("Masked Track 2: " + cardData.maskedTrack2);
	            cardDataString.push("Masked Track 3: " + cardData.maskedTrack3);
	            cardDataString.push("Primary Account Number: " + cardData.pan);
	            cardDataString.push("Track 1: " + cardData.track1);
	            cardDataString.push("Track 2: " + cardData.track2);
	            cardDataString.push("Track 3: " + cardData.track3);
	            return cardDataString;
	        }
	    }]);

	    return CardDataHelper;
	}();

	exports.default = CardDataHelper;

/***/ }),
/* 286 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';

	var GetIntrinsic = __webpack_require__(326);

	var callBind = __webpack_require__(178);

	var $indexOf = callBind(GetIntrinsic('String.prototype.indexOf'));

	module.exports = function callBoundIntrinsic(name, allowMissing) {
		var intrinsic = GetIntrinsic(name, !!allowMissing);
		if (typeof intrinsic === 'function' && $indexOf(name, '.prototype.') > -1) {
			return callBind(intrinsic);
		}
		return intrinsic;
	};


/***/ }),
/* 287 */
/***/ (function(module, exports, __webpack_require__) {

	var cof = __webpack_require__(42);
	module.exports = function (it, msg) {
	  if (typeof it != 'number' && cof(it) != 'Number') throw TypeError(msg);
	  return +it;
	};


/***/ }),
/* 288 */
/***/ (function(module, exports, __webpack_require__) {

	// 22.1.3.3 Array.prototype.copyWithin(target, start, end = this.length)
	'use strict';
	var toObject = __webpack_require__(22);
	var toAbsoluteIndex = __webpack_require__(79);
	var toLength = __webpack_require__(17);

	module.exports = [].copyWithin || function copyWithin(target /* = 0 */, start /* = 0, end = @length */) {
	  var O = toObject(this);
	  var len = toLength(O.length);
	  var to = toAbsoluteIndex(target, len);
	  var from = toAbsoluteIndex(start, len);
	  var end = arguments.length > 2 ? arguments[2] : undefined;
	  var count = Math.min((end === undefined ? len : toAbsoluteIndex(end, len)) - from, len - to);
	  var inc = 1;
	  if (from < to && to < from + count) {
	    inc = -1;
	    from += count - 1;
	    to += count - 1;
	  }
	  while (count-- > 0) {
	    if (from in O) O[to] = O[from];
	    else delete O[to];
	    to += inc;
	    from += inc;
	  } return O;
	};


/***/ }),
/* 289 */
/***/ (function(module, exports, __webpack_require__) {

	var forOf = __webpack_require__(72);

	module.exports = function (iter, ITERATOR) {
	  var result = [];
	  forOf(iter, false, result.push, result, ITERATOR);
	  return result;
	};


/***/ }),
/* 290 */
/***/ (function(module, exports, __webpack_require__) {

	var aFunction = __webpack_require__(28);
	var toObject = __webpack_require__(22);
	var IObject = __webpack_require__(107);
	var toLength = __webpack_require__(17);

	module.exports = function (that, callbackfn, aLen, memo, isRight) {
	  aFunction(callbackfn);
	  var O = toObject(that);
	  var self = IObject(O);
	  var length = toLength(O.length);
	  var index = isRight ? length - 1 : 0;
	  var i = isRight ? -1 : 1;
	  if (aLen < 2) for (;;) {
	    if (index in self) {
	      memo = self[index];
	      index += i;
	      break;
	    }
	    index += i;
	    if (isRight ? index < 0 : length <= index) {
	      throw TypeError('Reduce of empty array with no initial value');
	    }
	  }
	  for (;isRight ? index >= 0 : length > index; index += i) if (index in self) {
	    memo = callbackfn(memo, self[index], index, O);
	  }
	  return memo;
	};


/***/ }),
/* 291 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';
	var aFunction = __webpack_require__(28);
	var isObject = __webpack_require__(12);
	var invoke = __webpack_require__(297);
	var arraySlice = [].slice;
	var factories = {};

	var construct = function (F, len, args) {
	  if (!(len in factories)) {
	    for (var n = [], i = 0; i < len; i++) n[i] = 'a[' + i + ']';
	    // eslint-disable-next-line no-new-func
	    factories[len] = Function('F,a', 'return new F(' + n.join(',') + ')');
	  } return factories[len](F, args);
	};

	module.exports = Function.bind || function bind(that /* , ...args */) {
	  var fn = aFunction(this);
	  var partArgs = arraySlice.call(arguments, 1);
	  var bound = function (/* args... */) {
	    var args = partArgs.concat(arraySlice.call(arguments));
	    return this instanceof bound ? construct(fn, args.length, args) : invoke(fn, args, that);
	  };
	  if (isObject(fn.prototype)) bound.prototype = fn.prototype;
	  return bound;
	};


/***/ }),
/* 292 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';
	var dP = __webpack_require__(20).f;
	var create = __webpack_require__(73);
	var redefineAll = __webpack_require__(77);
	var ctx = __webpack_require__(44);
	var anInstance = __webpack_require__(71);
	var forOf = __webpack_require__(72);
	var $iterDefine = __webpack_require__(190);
	var step = __webpack_require__(300);
	var setSpecies = __webpack_require__(78);
	var DESCRIPTORS = __webpack_require__(18);
	var fastKey = __webpack_require__(64).fastKey;
	var validate = __webpack_require__(81);
	var SIZE = DESCRIPTORS ? '_s' : 'size';

	var getEntry = function (that, key) {
	  // fast case
	  var index = fastKey(key);
	  var entry;
	  if (index !== 'F') return that._i[index];
	  // frozen object case
	  for (entry = that._f; entry; entry = entry.n) {
	    if (entry.k == key) return entry;
	  }
	};

	module.exports = {
	  getConstructor: function (wrapper, NAME, IS_MAP, ADDER) {
	    var C = wrapper(function (that, iterable) {
	      anInstance(that, C, NAME, '_i');
	      that._t = NAME;         // collection type
	      that._i = create(null); // index
	      that._f = undefined;    // first entry
	      that._l = undefined;    // last entry
	      that[SIZE] = 0;         // size
	      if (iterable != undefined) forOf(iterable, IS_MAP, that[ADDER], that);
	    });
	    redefineAll(C.prototype, {
	      // 23.1.3.1 Map.prototype.clear()
	      // 23.2.3.2 Set.prototype.clear()
	      clear: function clear() {
	        for (var that = validate(this, NAME), data = that._i, entry = that._f; entry; entry = entry.n) {
	          entry.r = true;
	          if (entry.p) entry.p = entry.p.n = undefined;
	          delete data[entry.i];
	        }
	        that._f = that._l = undefined;
	        that[SIZE] = 0;
	      },
	      // 23.1.3.3 Map.prototype.delete(key)
	      // 23.2.3.4 Set.prototype.delete(value)
	      'delete': function (key) {
	        var that = validate(this, NAME);
	        var entry = getEntry(that, key);
	        if (entry) {
	          var next = entry.n;
	          var prev = entry.p;
	          delete that._i[entry.i];
	          entry.r = true;
	          if (prev) prev.n = next;
	          if (next) next.p = prev;
	          if (that._f == entry) that._f = next;
	          if (that._l == entry) that._l = prev;
	          that[SIZE]--;
	        } return !!entry;
	      },
	      // 23.2.3.6 Set.prototype.forEach(callbackfn, thisArg = undefined)
	      // 23.1.3.5 Map.prototype.forEach(callbackfn, thisArg = undefined)
	      forEach: function forEach(callbackfn /* , that = undefined */) {
	        validate(this, NAME);
	        var f = ctx(callbackfn, arguments.length > 1 ? arguments[1] : undefined, 3);
	        var entry;
	        while (entry = entry ? entry.n : this._f) {
	          f(entry.v, entry.k, this);
	          // revert to the last existing entry
	          while (entry && entry.r) entry = entry.p;
	        }
	      },
	      // 23.1.3.7 Map.prototype.has(key)
	      // 23.2.3.7 Set.prototype.has(value)
	      has: function has(key) {
	        return !!getEntry(validate(this, NAME), key);
	      }
	    });
	    if (DESCRIPTORS) dP(C.prototype, 'size', {
	      get: function () {
	        return validate(this, NAME)[SIZE];
	      }
	    });
	    return C;
	  },
	  def: function (that, key, value) {
	    var entry = getEntry(that, key);
	    var prev, index;
	    // change existing entry
	    if (entry) {
	      entry.v = value;
	    // create new entry
	    } else {
	      that._l = entry = {
	        i: index = fastKey(key, true), // <- index
	        k: key,                        // <- key
	        v: value,                      // <- value
	        p: prev = that._l,             // <- previous entry
	        n: undefined,                  // <- next entry
	        r: false                       // <- removed
	      };
	      if (!that._f) that._f = entry;
	      if (prev) prev.n = entry;
	      that[SIZE]++;
	      // add to index
	      if (index !== 'F') that._i[index] = entry;
	    } return that;
	  },
	  getEntry: getEntry,
	  setStrong: function (C, NAME, IS_MAP) {
	    // add .keys, .values, .entries, [@@iterator]
	    // 23.1.3.4, 23.1.3.8, 23.1.3.11, 23.1.3.12, 23.2.3.5, 23.2.3.8, 23.2.3.10, 23.2.3.11
	    $iterDefine(C, NAME, function (iterated, kind) {
	      this._t = validate(iterated, NAME); // target
	      this._k = kind;                     // kind
	      this._l = undefined;                // previous
	    }, function () {
	      var that = this;
	      var kind = that._k;
	      var entry = that._l;
	      // revert to the last existing entry
	      while (entry && entry.r) entry = entry.p;
	      // get next entry
	      if (!that._t || !(that._l = entry = entry ? entry.n : that._t._f)) {
	        // or finish the iteration
	        that._t = undefined;
	        return step(1);
	      }
	      // return step by kind
	      if (kind == 'keys') return step(0, entry.k);
	      if (kind == 'values') return step(0, entry.v);
	      return step(0, [entry.k, entry.v]);
	    }, IS_MAP ? 'entries' : 'values', !IS_MAP, true);

	    // add [@@species], 23.1.2.2, 23.2.2.2
	    setSpecies(NAME);
	  }
	};


/***/ }),
/* 293 */
/***/ (function(module, exports, __webpack_require__) {

	// https://github.com/DavidBruant/Map-Set.prototype.toJSON
	var classof = __webpack_require__(90);
	var from = __webpack_require__(289);
	module.exports = function (NAME) {
	  return function toJSON() {
	    if (classof(this) != NAME) throw TypeError(NAME + "#toJSON isn't generic");
	    return from(this);
	  };
	};


/***/ }),
/* 294 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';
	var redefineAll = __webpack_require__(77);
	var getWeak = __webpack_require__(64).getWeak;
	var anObject = __webpack_require__(6);
	var isObject = __webpack_require__(12);
	var anInstance = __webpack_require__(71);
	var forOf = __webpack_require__(72);
	var createArrayMethod = __webpack_require__(49);
	var $has = __webpack_require__(36);
	var validate = __webpack_require__(81);
	var arrayFind = createArrayMethod(5);
	var arrayFindIndex = createArrayMethod(6);
	var id = 0;

	// fallback for uncaught frozen keys
	var uncaughtFrozenStore = function (that) {
	  return that._l || (that._l = new UncaughtFrozenStore());
	};
	var UncaughtFrozenStore = function () {
	  this.a = [];
	};
	var findUncaughtFrozen = function (store, key) {
	  return arrayFind(store.a, function (it) {
	    return it[0] === key;
	  });
	};
	UncaughtFrozenStore.prototype = {
	  get: function (key) {
	    var entry = findUncaughtFrozen(this, key);
	    if (entry) return entry[1];
	  },
	  has: function (key) {
	    return !!findUncaughtFrozen(this, key);
	  },
	  set: function (key, value) {
	    var entry = findUncaughtFrozen(this, key);
	    if (entry) entry[1] = value;
	    else this.a.push([key, value]);
	  },
	  'delete': function (key) {
	    var index = arrayFindIndex(this.a, function (it) {
	      return it[0] === key;
	    });
	    if (~index) this.a.splice(index, 1);
	    return !!~index;
	  }
	};

	module.exports = {
	  getConstructor: function (wrapper, NAME, IS_MAP, ADDER) {
	    var C = wrapper(function (that, iterable) {
	      anInstance(that, C, NAME, '_i');
	      that._t = NAME;      // collection type
	      that._i = id++;      // collection id
	      that._l = undefined; // leak store for uncaught frozen objects
	      if (iterable != undefined) forOf(iterable, IS_MAP, that[ADDER], that);
	    });
	    redefineAll(C.prototype, {
	      // 23.3.3.2 WeakMap.prototype.delete(key)
	      // 23.4.3.3 WeakSet.prototype.delete(value)
	      'delete': function (key) {
	        if (!isObject(key)) return false;
	        var data = getWeak(key);
	        if (data === true) return uncaughtFrozenStore(validate(this, NAME))['delete'](key);
	        return data && $has(data, this._i) && delete data[this._i];
	      },
	      // 23.3.3.4 WeakMap.prototype.has(key)
	      // 23.4.3.4 WeakSet.prototype.has(value)
	      has: function has(key) {
	        if (!isObject(key)) return false;
	        var data = getWeak(key);
	        if (data === true) return uncaughtFrozenStore(validate(this, NAME)).has(key);
	        return data && $has(data, this._i);
	      }
	    });
	    return C;
	  },
	  def: function (that, key, value) {
	    var data = getWeak(anObject(key), true);
	    if (data === true) uncaughtFrozenStore(that).set(key, value);
	    else data[that._i] = value;
	    return that;
	  },
	  ufstore: uncaughtFrozenStore
	};


/***/ }),
/* 295 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';
	// https://tc39.github.io/proposal-flatMap/#sec-FlattenIntoArray
	var isArray = __webpack_require__(130);
	var isObject = __webpack_require__(12);
	var toLength = __webpack_require__(17);
	var ctx = __webpack_require__(44);
	var IS_CONCAT_SPREADABLE = __webpack_require__(16)('isConcatSpreadable');

	function flattenIntoArray(target, original, source, sourceLen, start, depth, mapper, thisArg) {
	  var targetIndex = start;
	  var sourceIndex = 0;
	  var mapFn = mapper ? ctx(mapper, thisArg, 3) : false;
	  var element, spreadable;

	  while (sourceIndex < sourceLen) {
	    if (sourceIndex in source) {
	      element = mapFn ? mapFn(source[sourceIndex], sourceIndex, original) : source[sourceIndex];

	      spreadable = false;
	      if (isObject(element)) {
	        spreadable = element[IS_CONCAT_SPREADABLE];
	        spreadable = spreadable !== undefined ? !!spreadable : isArray(element);
	      }

	      if (spreadable && depth > 0) {
	        targetIndex = flattenIntoArray(target, original, element, toLength(element.length), targetIndex, depth - 1) - 1;
	      } else {
	        if (targetIndex >= 0x1fffffffffffff) throw TypeError();
	        target[targetIndex] = element;
	      }

	      targetIndex++;
	    }
	    sourceIndex++;
	  }
	  return targetIndex;
	}

	module.exports = flattenIntoArray;


/***/ }),
/* 296 */
/***/ (function(module, exports, __webpack_require__) {

	module.exports = !__webpack_require__(18) && !__webpack_require__(10)(function () {
	  return Object.defineProperty(__webpack_require__(183)('div'), 'a', { get: function () { return 7; } }).a != 7;
	});


/***/ }),
/* 297 */
/***/ (function(module, exports) {

	// fast apply, http://jsperf.lnkit.com/fast-apply/5
	module.exports = function (fn, args, that) {
	  var un = that === undefined;
	  switch (args.length) {
	    case 0: return un ? fn()
	                      : fn.call(that);
	    case 1: return un ? fn(args[0])
	                      : fn.call(that, args[0]);
	    case 2: return un ? fn(args[0], args[1])
	                      : fn.call(that, args[0], args[1]);
	    case 3: return un ? fn(args[0], args[1], args[2])
	                      : fn.call(that, args[0], args[1], args[2]);
	    case 4: return un ? fn(args[0], args[1], args[2], args[3])
	                      : fn.call(that, args[0], args[1], args[2], args[3]);
	  } return fn.apply(that, args);
	};


/***/ }),
/* 298 */
/***/ (function(module, exports, __webpack_require__) {

	// 20.1.2.3 Number.isInteger(number)
	var isObject = __webpack_require__(12);
	var floor = Math.floor;
	module.exports = function isInteger(it) {
	  return !isObject(it) && isFinite(it) && floor(it) === it;
	};


/***/ }),
/* 299 */
/***/ (function(module, exports, __webpack_require__) {

	// call something on iterator step with safe closing on error
	var anObject = __webpack_require__(6);
	module.exports = function (iterator, fn, value, entries) {
	  try {
	    return entries ? fn(anObject(value)[0], value[1]) : fn(value);
	  // 7.4.6 IteratorClose(iterator, completion)
	  } catch (e) {
	    var ret = iterator['return'];
	    if (ret !== undefined) anObject(ret.call(iterator));
	    throw e;
	  }
	};


/***/ }),
/* 300 */
/***/ (function(module, exports) {

	module.exports = function (done, value) {
	  return { value: value, done: !!done };
	};


/***/ }),
/* 301 */
/***/ (function(module, exports, __webpack_require__) {

	// 20.2.2.16 Math.fround(x)
	var sign = __webpack_require__(192);
	var pow = Math.pow;
	var EPSILON = pow(2, -52);
	var EPSILON32 = pow(2, -23);
	var MAX32 = pow(2, 127) * (2 - EPSILON32);
	var MIN32 = pow(2, -126);

	var roundTiesToEven = function (n) {
	  return n + 1 / EPSILON - 1 / EPSILON;
	};

	module.exports = Math.fround || function fround(x) {
	  var $abs = Math.abs(x);
	  var $sign = sign(x);
	  var a, result;
	  if ($abs < MIN32) return $sign * roundTiesToEven($abs / MIN32 / EPSILON32) * MIN32 * EPSILON32;
	  a = (1 + EPSILON32 / EPSILON) * $abs;
	  result = a - (a - $abs);
	  // eslint-disable-next-line no-self-compare
	  if (result > MAX32 || result != result) return $sign * Infinity;
	  return $sign * result;
	};


/***/ }),
/* 302 */
/***/ (function(module, exports) {

	// 20.2.2.20 Math.log1p(x)
	module.exports = Math.log1p || function log1p(x) {
	  return (x = +x) > -1e-8 && x < 1e-8 ? x - x * x / 2 : Math.log(1 + x);
	};


/***/ }),
/* 303 */
/***/ (function(module, exports) {

	// https://rwaldron.github.io/proposal-math-extensions/
	module.exports = Math.scale || function scale(x, inLow, inHigh, outLow, outHigh) {
	  if (
	    arguments.length === 0
	      // eslint-disable-next-line no-self-compare
	      || x != x
	      // eslint-disable-next-line no-self-compare
	      || inLow != inLow
	      // eslint-disable-next-line no-self-compare
	      || inHigh != inHigh
	      // eslint-disable-next-line no-self-compare
	      || outLow != outLow
	      // eslint-disable-next-line no-self-compare
	      || outHigh != outHigh
	  ) return NaN;
	  if (x === Infinity || x === -Infinity) return x;
	  return (x - inLow) * (outHigh - outLow) / (inHigh - inLow) + outLow;
	};


/***/ }),
/* 304 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';
	// 19.1.2.1 Object.assign(target, source, ...)
	var DESCRIPTORS = __webpack_require__(18);
	var getKeys = __webpack_require__(75);
	var gOPS = __webpack_require__(134);
	var pIE = __webpack_require__(108);
	var toObject = __webpack_require__(22);
	var IObject = __webpack_require__(107);
	var $assign = Object.assign;

	// should work with symbols and should have deterministic property order (V8 bug)
	module.exports = !$assign || __webpack_require__(10)(function () {
	  var A = {};
	  var B = {};
	  // eslint-disable-next-line no-undef
	  var S = Symbol();
	  var K = 'abcdefghijklmnopqrst';
	  A[S] = 7;
	  K.split('').forEach(function (k) { B[k] = k; });
	  return $assign({}, A)[S] != 7 || Object.keys($assign({}, B)).join('') != K;
	}) ? function assign(target, source) { // eslint-disable-line no-unused-vars
	  var T = toObject(target);
	  var aLen = arguments.length;
	  var index = 1;
	  var getSymbols = gOPS.f;
	  var isEnum = pIE.f;
	  while (aLen > index) {
	    var S = IObject(arguments[index++]);
	    var keys = getSymbols ? getKeys(S).concat(getSymbols(S)) : getKeys(S);
	    var length = keys.length;
	    var j = 0;
	    var key;
	    while (length > j) {
	      key = keys[j++];
	      if (!DESCRIPTORS || isEnum.call(S, key)) T[key] = S[key];
	    }
	  } return T;
	} : $assign;


/***/ }),
/* 305 */
/***/ (function(module, exports, __webpack_require__) {

	var dP = __webpack_require__(20);
	var anObject = __webpack_require__(6);
	var getKeys = __webpack_require__(75);

	module.exports = __webpack_require__(18) ? Object.defineProperties : function defineProperties(O, Properties) {
	  anObject(O);
	  var keys = getKeys(Properties);
	  var length = keys.length;
	  var i = 0;
	  var P;
	  while (length > i) dP.f(O, P = keys[i++], Properties[P]);
	  return O;
	};


/***/ }),
/* 306 */
/***/ (function(module, exports, __webpack_require__) {

	// fallback for IE11 buggy Object.getOwnPropertyNames with iframe and window
	var toIObject = __webpack_require__(39);
	var gOPN = __webpack_require__(74).f;
	var toString = {}.toString;

	var windowNames = typeof window == 'object' && window && Object.getOwnPropertyNames
	  ? Object.getOwnPropertyNames(window) : [];

	var getWindowNames = function (it) {
	  try {
	    return gOPN(it);
	  } catch (e) {
	    return windowNames.slice();
	  }
	};

	module.exports.f = function getOwnPropertyNames(it) {
	  return windowNames && toString.call(it) == '[object Window]' ? getWindowNames(it) : gOPN(toIObject(it));
	};


/***/ }),
/* 307 */
/***/ (function(module, exports, __webpack_require__) {

	var has = __webpack_require__(36);
	var toIObject = __webpack_require__(39);
	var arrayIndexOf = __webpack_require__(127)(false);
	var IE_PROTO = __webpack_require__(197)('IE_PROTO');

	module.exports = function (object, names) {
	  var O = toIObject(object);
	  var i = 0;
	  var result = [];
	  var key;
	  for (key in O) if (key != IE_PROTO) has(O, key) && result.push(key);
	  // Don't enum bug & hidden keys
	  while (names.length > i) if (has(O, key = names[i++])) {
	    ~arrayIndexOf(result, key) || result.push(key);
	  }
	  return result;
	};


/***/ }),
/* 308 */
/***/ (function(module, exports, __webpack_require__) {

	var DESCRIPTORS = __webpack_require__(18);
	var getKeys = __webpack_require__(75);
	var toIObject = __webpack_require__(39);
	var isEnum = __webpack_require__(108).f;
	module.exports = function (isEntries) {
	  return function (it) {
	    var O = toIObject(it);
	    var keys = getKeys(O);
	    var length = keys.length;
	    var i = 0;
	    var result = [];
	    var key;
	    while (length > i) {
	      key = keys[i++];
	      if (!DESCRIPTORS || isEnum.call(O, key)) {
	        result.push(isEntries ? [key, O[key]] : O[key]);
	      }
	    }
	    return result;
	  };
	};


/***/ }),
/* 309 */
/***/ (function(module, exports, __webpack_require__) {

	// all object keys, includes non-enumerable and symbols
	var gOPN = __webpack_require__(74);
	var gOPS = __webpack_require__(134);
	var anObject = __webpack_require__(6);
	var Reflect = __webpack_require__(9).Reflect;
	module.exports = Reflect && Reflect.ownKeys || function ownKeys(it) {
	  var keys = gOPN.f(anObject(it));
	  var getSymbols = gOPS.f;
	  return getSymbols ? keys.concat(getSymbols(it)) : keys;
	};


/***/ }),
/* 310 */
/***/ (function(module, exports, __webpack_require__) {

	var $parseFloat = __webpack_require__(9).parseFloat;
	var $trim = __webpack_require__(93).trim;

	module.exports = 1 / $parseFloat(__webpack_require__(200) + '-0') !== -Infinity ? function parseFloat(str) {
	  var string = $trim(String(str), 3);
	  var result = $parseFloat(string);
	  return result === 0 && string.charAt(0) == '-' ? -0 : result;
	} : $parseFloat;


/***/ }),
/* 311 */
/***/ (function(module, exports, __webpack_require__) {

	var $parseInt = __webpack_require__(9).parseInt;
	var $trim = __webpack_require__(93).trim;
	var ws = __webpack_require__(200);
	var hex = /^[-+]?0[xX]/;

	module.exports = $parseInt(ws + '08') !== 8 || $parseInt(ws + '0x16') !== 22 ? function parseInt(str, radix) {
	  var string = $trim(String(str), 3);
	  return $parseInt(string, (radix >>> 0) || (hex.test(string) ? 16 : 10));
	} : $parseInt;


/***/ }),
/* 312 */
/***/ (function(module, exports) {

	module.exports = function (exec) {
	  try {
	    return { e: false, v: exec() };
	  } catch (e) {
	    return { e: true, v: e };
	  }
	};


/***/ }),
/* 313 */
/***/ (function(module, exports, __webpack_require__) {

	var anObject = __webpack_require__(6);
	var isObject = __webpack_require__(12);
	var newPromiseCapability = __webpack_require__(194);

	module.exports = function (C, x) {
	  anObject(C);
	  if (isObject(x) && x.constructor === C) return x;
	  var promiseCapability = newPromiseCapability.f(C);
	  var resolve = promiseCapability.resolve;
	  resolve(x);
	  return promiseCapability.promise;
	};


/***/ }),
/* 314 */
/***/ (function(module, exports) {

	// 7.2.9 SameValue(x, y)
	module.exports = Object.is || function is(x, y) {
	  // eslint-disable-next-line no-self-compare
	  return x === y ? x !== 0 || 1 / x === 1 / y : x != x && y != y;
	};


/***/ }),
/* 315 */
/***/ (function(module, exports, __webpack_require__) {

	// https://github.com/tc39/proposal-string-pad-start-end
	var toLength = __webpack_require__(17);
	var repeat = __webpack_require__(199);
	var defined = __webpack_require__(50);

	module.exports = function (that, maxLength, fillString, left) {
	  var S = String(defined(that));
	  var stringLength = S.length;
	  var fillStr = fillString === undefined ? ' ' : String(fillString);
	  var intMaxLength = toLength(maxLength);
	  if (intMaxLength <= stringLength || fillStr == '') return S;
	  var fillLen = intMaxLength - stringLength;
	  var stringFiller = repeat.call(fillStr, Math.ceil(fillLen / fillStr.length));
	  if (stringFiller.length > fillLen) stringFiller = stringFiller.slice(0, fillLen);
	  return left ? stringFiller + S : S + stringFiller;
	};


/***/ }),
/* 316 */
/***/ (function(module, exports, __webpack_require__) {

	// https://tc39.github.io/ecma262/#sec-toindex
	var toInteger = __webpack_require__(46);
	var toLength = __webpack_require__(17);
	module.exports = function (it) {
	  if (it === undefined) return 0;
	  var number = toInteger(it);
	  var length = toLength(number);
	  if (number !== length) throw RangeError('Wrong length!');
	  return length;
	};


/***/ }),
/* 317 */
/***/ (function(module, exports, __webpack_require__) {

	exports.f = __webpack_require__(16);


/***/ }),
/* 318 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';
	var strong = __webpack_require__(292);
	var validate = __webpack_require__(81);
	var MAP = 'Map';

	// 23.1 Map Objects
	module.exports = __webpack_require__(128)(MAP, function (get) {
	  return function Map() { return get(this, arguments.length > 0 ? arguments[0] : undefined); };
	}, {
	  // 23.1.3.6 Map.prototype.get(key)
	  get: function get(key) {
	    var entry = strong.getEntry(validate(this, MAP), key);
	    return entry && entry.v;
	  },
	  // 23.1.3.9 Map.prototype.set(key, value)
	  set: function set(key, value) {
	    return strong.def(validate(this, MAP), key === 0 ? 0 : key, value);
	  }
	}, strong, true);


/***/ }),
/* 319 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';
	var regexpExec = __webpack_require__(195);
	__webpack_require__(1)({
	  target: 'RegExp',
	  proto: true,
	  forced: regexpExec !== /./.exec
	}, {
	  exec: regexpExec
	});


/***/ }),
/* 320 */
/***/ (function(module, exports, __webpack_require__) {

	// 21.2.5.3 get RegExp.prototype.flags()
	if (__webpack_require__(18) && /./g.flags != 'g') __webpack_require__(20).f(RegExp.prototype, 'flags', {
	  configurable: true,
	  get: __webpack_require__(106)
	});


/***/ }),
/* 321 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';
	var strong = __webpack_require__(292);
	var validate = __webpack_require__(81);
	var SET = 'Set';

	// 23.2 Set Objects
	module.exports = __webpack_require__(128)(SET, function (get) {
	  return function Set() { return get(this, arguments.length > 0 ? arguments[0] : undefined); };
	}, {
	  // 23.2.3.1 Set.prototype.add(value)
	  add: function add(value) {
	    return strong.def(validate(this, SET), value = value === 0 ? 0 : value, value);
	  }
	}, strong);


/***/ }),
/* 322 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';
	var global = __webpack_require__(9);
	var each = __webpack_require__(49)(0);
	var redefine = __webpack_require__(32);
	var meta = __webpack_require__(64);
	var assign = __webpack_require__(304);
	var weak = __webpack_require__(294);
	var isObject = __webpack_require__(12);
	var validate = __webpack_require__(81);
	var NATIVE_WEAK_MAP = __webpack_require__(81);
	var IS_IE11 = !global.ActiveXObject && 'ActiveXObject' in global;
	var WEAK_MAP = 'WeakMap';
	var getWeak = meta.getWeak;
	var isExtensible = Object.isExtensible;
	var uncaughtFrozenStore = weak.ufstore;
	var InternalMap;

	var wrapper = function (get) {
	  return function WeakMap() {
	    return get(this, arguments.length > 0 ? arguments[0] : undefined);
	  };
	};

	var methods = {
	  // 23.3.3.3 WeakMap.prototype.get(key)
	  get: function get(key) {
	    if (isObject(key)) {
	      var data = getWeak(key);
	      if (data === true) return uncaughtFrozenStore(validate(this, WEAK_MAP)).get(key);
	      return data ? data[this._i] : undefined;
	    }
	  },
	  // 23.3.3.5 WeakMap.prototype.set(key, value)
	  set: function set(key, value) {
	    return weak.def(validate(this, WEAK_MAP), key, value);
	  }
	};

	// 23.3 WeakMap Objects
	var $WeakMap = module.exports = __webpack_require__(128)(WEAK_MAP, wrapper, methods, weak, true, true);

	// IE11 WeakMap frozen keys fix
	if (NATIVE_WEAK_MAP && IS_IE11) {
	  InternalMap = weak.getConstructor(wrapper, WEAK_MAP);
	  assign(InternalMap.prototype, methods);
	  meta.NEED = true;
	  each(['delete', 'has', 'get', 'set'], function (key) {
	    var proto = $WeakMap.prototype;
	    var method = proto[key];
	    redefine(proto, key, function (a, b) {
	      // store frozen objects on internal weakmap shim
	      if (isObject(a) && !isExtensible(a)) {
	        if (!this._f) this._f = new InternalMap();
	        var result = this._f[key](a, b);
	        return key == 'set' ? this : result;
	      // store all the rest on native weakmap
	      } return method.call(this, a, b);
	    });
	  });
	}


/***/ }),
/* 323 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';

	/**
	 * Copyright (c) 2013-present, Facebook, Inc.
	 *
	 * This source code is licensed under the MIT license found in the
	 * LICENSE file in the root directory of this source tree.
	 *
	 * @typechecks
	 */

	var emptyFunction = __webpack_require__(53);

	/**
	 * Upstream version of event listener. Does not take into account specific
	 * nature of platform.
	 */
	var EventListener = {
	  /**
	   * Listen to DOM events during the bubble phase.
	   *
	   * @param {DOMEventTarget} target DOM element to register listener on.
	   * @param {string} eventType Event type, e.g. 'click' or 'mouseover'.
	   * @param {function} callback Callback function.
	   * @return {object} Object with a `remove` method.
	   */
	  listen: function listen(target, eventType, callback) {
	    if (target.addEventListener) {
	      target.addEventListener(eventType, callback, false);
	      return {
	        remove: function remove() {
	          target.removeEventListener(eventType, callback, false);
	        }
	      };
	    } else if (target.attachEvent) {
	      target.attachEvent('on' + eventType, callback);
	      return {
	        remove: function remove() {
	          target.detachEvent('on' + eventType, callback);
	        }
	      };
	    }
	  },

	  /**
	   * Listen to DOM events during the capture phase.
	   *
	   * @param {DOMEventTarget} target DOM element to register listener on.
	   * @param {string} eventType Event type, e.g. 'click' or 'mouseover'.
	   * @param {function} callback Callback function.
	   * @return {object} Object with a `remove` method.
	   */
	  capture: function capture(target, eventType, callback) {
	    if (target.addEventListener) {
	      target.addEventListener(eventType, callback, true);
	      return {
	        remove: function remove() {
	          target.removeEventListener(eventType, callback, true);
	        }
	      };
	    } else {
	      if ((undefined) !== 'production') {
	        console.error('Attempted to listen to events during the capture phase on a ' + 'browser that does not support the capture phase. Your application ' + 'will not receive some events.');
	      }
	      return {
	        remove: emptyFunction
	      };
	    }
	  },

	  registerDefault: function registerDefault() {}
	};

	module.exports = EventListener;

/***/ }),
/* 324 */
/***/ (function(module, exports) {

	/**
	 * Copyright (c) 2013-present, Facebook, Inc.
	 *
	 * This source code is licensed under the MIT license found in the
	 * LICENSE file in the root directory of this source tree.
	 *
	 */

	'use strict';

	/**
	 * @param {DOMElement} node input/textarea to focus
	 */

	function focusNode(node) {
	  // IE8 can throw "Can't move focus to the control because it is invisible,
	  // not enabled, or of a type that does not accept the focus." for all kinds of
	  // reasons that are too expensive and fragile to test.
	  try {
	    node.focus();
	  } catch (e) {}
	}

	module.exports = focusNode;

/***/ }),
/* 325 */
/***/ (function(module, exports) {

	'use strict';

	/**
	 * Copyright (c) 2013-present, Facebook, Inc.
	 *
	 * This source code is licensed under the MIT license found in the
	 * LICENSE file in the root directory of this source tree.
	 *
	 * @typechecks
	 */

	/* eslint-disable fb-www/typeof-undefined */

	/**
	 * Same as document.activeElement but wraps in a try-catch block. In IE it is
	 * not safe to call document.activeElement if there is nothing focused.
	 *
	 * The activeElement will be null only if the document or document body is not
	 * yet defined.
	 *
	 * @param {?DOMDocument} doc Defaults to current document.
	 * @return {?DOMElement}
	 */
	function getActiveElement(doc) /*?DOMElement*/{
	  doc = doc || (typeof document !== 'undefined' ? document : undefined);
	  if (typeof doc === 'undefined') {
	    return null;
	  }
	  try {
	    return doc.activeElement || doc.body;
	  } catch (e) {
	    return doc.body;
	  }
	}

	module.exports = getActiveElement;

/***/ }),
/* 326 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';

	var undefined;

	var $SyntaxError = SyntaxError;
	var $Function = Function;
	var $TypeError = TypeError;

	// eslint-disable-next-line consistent-return
	var getEvalledConstructor = function (expressionSyntax) {
		try {
			return $Function('"use strict"; return (' + expressionSyntax + ').constructor;')();
		} catch (e) {}
	};

	var $gOPD = Object.getOwnPropertyDescriptor;
	if ($gOPD) {
		try {
			$gOPD({}, '');
		} catch (e) {
			$gOPD = null; // this is IE 8, which has a broken gOPD
		}
	}

	var throwTypeError = function () {
		throw new $TypeError();
	};
	var ThrowTypeError = $gOPD
		? (function () {
			try {
				// eslint-disable-next-line no-unused-expressions, no-caller, no-restricted-properties
				arguments.callee; // IE 8 does not throw here
				return throwTypeError;
			} catch (calleeThrows) {
				try {
					// IE 8 throws on Object.getOwnPropertyDescriptor(arguments, '')
					return $gOPD(arguments, 'callee').get;
				} catch (gOPDthrows) {
					return throwTypeError;
				}
			}
		}())
		: throwTypeError;

	var hasSymbols = __webpack_require__(785)();

	var getProto = Object.getPrototypeOf || function (x) { return x.__proto__; }; // eslint-disable-line no-proto

	var needsEval = {};

	var TypedArray = typeof Uint8Array === 'undefined' ? undefined : getProto(Uint8Array);

	var INTRINSICS = {
		'%AggregateError%': typeof AggregateError === 'undefined' ? undefined : AggregateError,
		'%Array%': Array,
		'%ArrayBuffer%': typeof ArrayBuffer === 'undefined' ? undefined : ArrayBuffer,
		'%ArrayIteratorPrototype%': hasSymbols ? getProto([][Symbol.iterator]()) : undefined,
		'%AsyncFromSyncIteratorPrototype%': undefined,
		'%AsyncFunction%': needsEval,
		'%AsyncGenerator%': needsEval,
		'%AsyncGeneratorFunction%': needsEval,
		'%AsyncIteratorPrototype%': needsEval,
		'%Atomics%': typeof Atomics === 'undefined' ? undefined : Atomics,
		'%BigInt%': typeof BigInt === 'undefined' ? undefined : BigInt,
		'%Boolean%': Boolean,
		'%DataView%': typeof DataView === 'undefined' ? undefined : DataView,
		'%Date%': Date,
		'%decodeURI%': decodeURI,
		'%decodeURIComponent%': decodeURIComponent,
		'%encodeURI%': encodeURI,
		'%encodeURIComponent%': encodeURIComponent,
		'%Error%': Error,
		'%eval%': eval, // eslint-disable-line no-eval
		'%EvalError%': EvalError,
		'%Float32Array%': typeof Float32Array === 'undefined' ? undefined : Float32Array,
		'%Float64Array%': typeof Float64Array === 'undefined' ? undefined : Float64Array,
		'%FinalizationRegistry%': typeof FinalizationRegistry === 'undefined' ? undefined : FinalizationRegistry,
		'%Function%': $Function,
		'%GeneratorFunction%': needsEval,
		'%Int8Array%': typeof Int8Array === 'undefined' ? undefined : Int8Array,
		'%Int16Array%': typeof Int16Array === 'undefined' ? undefined : Int16Array,
		'%Int32Array%': typeof Int32Array === 'undefined' ? undefined : Int32Array,
		'%isFinite%': isFinite,
		'%isNaN%': isNaN,
		'%IteratorPrototype%': hasSymbols ? getProto(getProto([][Symbol.iterator]())) : undefined,
		'%JSON%': typeof JSON === 'object' ? JSON : undefined,
		'%Map%': typeof Map === 'undefined' ? undefined : Map,
		'%MapIteratorPrototype%': typeof Map === 'undefined' || !hasSymbols ? undefined : getProto(new Map()[Symbol.iterator]()),
		'%Math%': Math,
		'%Number%': Number,
		'%Object%': Object,
		'%parseFloat%': parseFloat,
		'%parseInt%': parseInt,
		'%Promise%': typeof Promise === 'undefined' ? undefined : Promise,
		'%Proxy%': typeof Proxy === 'undefined' ? undefined : Proxy,
		'%RangeError%': RangeError,
		'%ReferenceError%': ReferenceError,
		'%Reflect%': typeof Reflect === 'undefined' ? undefined : Reflect,
		'%RegExp%': RegExp,
		'%Set%': typeof Set === 'undefined' ? undefined : Set,
		'%SetIteratorPrototype%': typeof Set === 'undefined' || !hasSymbols ? undefined : getProto(new Set()[Symbol.iterator]()),
		'%SharedArrayBuffer%': typeof SharedArrayBuffer === 'undefined' ? undefined : SharedArrayBuffer,
		'%String%': String,
		'%StringIteratorPrototype%': hasSymbols ? getProto(''[Symbol.iterator]()) : undefined,
		'%Symbol%': hasSymbols ? Symbol : undefined,
		'%SyntaxError%': $SyntaxError,
		'%ThrowTypeError%': ThrowTypeError,
		'%TypedArray%': TypedArray,
		'%TypeError%': $TypeError,
		'%Uint8Array%': typeof Uint8Array === 'undefined' ? undefined : Uint8Array,
		'%Uint8ClampedArray%': typeof Uint8ClampedArray === 'undefined' ? undefined : Uint8ClampedArray,
		'%Uint16Array%': typeof Uint16Array === 'undefined' ? undefined : Uint16Array,
		'%Uint32Array%': typeof Uint32Array === 'undefined' ? undefined : Uint32Array,
		'%URIError%': URIError,
		'%WeakMap%': typeof WeakMap === 'undefined' ? undefined : WeakMap,
		'%WeakRef%': typeof WeakRef === 'undefined' ? undefined : WeakRef,
		'%WeakSet%': typeof WeakSet === 'undefined' ? undefined : WeakSet
	};

	var doEval = function doEval(name) {
		var value;
		if (name === '%AsyncFunction%') {
			value = getEvalledConstructor('async function () {}');
		} else if (name === '%GeneratorFunction%') {
			value = getEvalledConstructor('function* () {}');
		} else if (name === '%AsyncGeneratorFunction%') {
			value = getEvalledConstructor('async function* () {}');
		} else if (name === '%AsyncGenerator%') {
			var fn = doEval('%AsyncGeneratorFunction%');
			if (fn) {
				value = fn.prototype;
			}
		} else if (name === '%AsyncIteratorPrototype%') {
			var gen = doEval('%AsyncGenerator%');
			if (gen) {
				value = getProto(gen.prototype);
			}
		}

		INTRINSICS[name] = value;

		return value;
	};

	var LEGACY_ALIASES = {
		'%ArrayBufferPrototype%': ['ArrayBuffer', 'prototype'],
		'%ArrayPrototype%': ['Array', 'prototype'],
		'%ArrayProto_entries%': ['Array', 'prototype', 'entries'],
		'%ArrayProto_forEach%': ['Array', 'prototype', 'forEach'],
		'%ArrayProto_keys%': ['Array', 'prototype', 'keys'],
		'%ArrayProto_values%': ['Array', 'prototype', 'values'],
		'%AsyncFunctionPrototype%': ['AsyncFunction', 'prototype'],
		'%AsyncGenerator%': ['AsyncGeneratorFunction', 'prototype'],
		'%AsyncGeneratorPrototype%': ['AsyncGeneratorFunction', 'prototype', 'prototype'],
		'%BooleanPrototype%': ['Boolean', 'prototype'],
		'%DataViewPrototype%': ['DataView', 'prototype'],
		'%DatePrototype%': ['Date', 'prototype'],
		'%ErrorPrototype%': ['Error', 'prototype'],
		'%EvalErrorPrototype%': ['EvalError', 'prototype'],
		'%Float32ArrayPrototype%': ['Float32Array', 'prototype'],
		'%Float64ArrayPrototype%': ['Float64Array', 'prototype'],
		'%FunctionPrototype%': ['Function', 'prototype'],
		'%Generator%': ['GeneratorFunction', 'prototype'],
		'%GeneratorPrototype%': ['GeneratorFunction', 'prototype', 'prototype'],
		'%Int8ArrayPrototype%': ['Int8Array', 'prototype'],
		'%Int16ArrayPrototype%': ['Int16Array', 'prototype'],
		'%Int32ArrayPrototype%': ['Int32Array', 'prototype'],
		'%JSONParse%': ['JSON', 'parse'],
		'%JSONStringify%': ['JSON', 'stringify'],
		'%MapPrototype%': ['Map', 'prototype'],
		'%NumberPrototype%': ['Number', 'prototype'],
		'%ObjectPrototype%': ['Object', 'prototype'],
		'%ObjProto_toString%': ['Object', 'prototype', 'toString'],
		'%ObjProto_valueOf%': ['Object', 'prototype', 'valueOf'],
		'%PromisePrototype%': ['Promise', 'prototype'],
		'%PromiseProto_then%': ['Promise', 'prototype', 'then'],
		'%Promise_all%': ['Promise', 'all'],
		'%Promise_reject%': ['Promise', 'reject'],
		'%Promise_resolve%': ['Promise', 'resolve'],
		'%RangeErrorPrototype%': ['RangeError', 'prototype'],
		'%ReferenceErrorPrototype%': ['ReferenceError', 'prototype'],
		'%RegExpPrototype%': ['RegExp', 'prototype'],
		'%SetPrototype%': ['Set', 'prototype'],
		'%SharedArrayBufferPrototype%': ['SharedArrayBuffer', 'prototype'],
		'%StringPrototype%': ['String', 'prototype'],
		'%SymbolPrototype%': ['Symbol', 'prototype'],
		'%SyntaxErrorPrototype%': ['SyntaxError', 'prototype'],
		'%TypedArrayPrototype%': ['TypedArray', 'prototype'],
		'%TypeErrorPrototype%': ['TypeError', 'prototype'],
		'%Uint8ArrayPrototype%': ['Uint8Array', 'prototype'],
		'%Uint8ClampedArrayPrototype%': ['Uint8ClampedArray', 'prototype'],
		'%Uint16ArrayPrototype%': ['Uint16Array', 'prototype'],
		'%Uint32ArrayPrototype%': ['Uint32Array', 'prototype'],
		'%URIErrorPrototype%': ['URIError', 'prototype'],
		'%WeakMapPrototype%': ['WeakMap', 'prototype'],
		'%WeakSetPrototype%': ['WeakSet', 'prototype']
	};

	var bind = __webpack_require__(208);
	var hasOwn = __webpack_require__(786);
	var $concat = bind.call(Function.call, Array.prototype.concat);
	var $spliceApply = bind.call(Function.apply, Array.prototype.splice);
	var $replace = bind.call(Function.call, String.prototype.replace);
	var $strSlice = bind.call(Function.call, String.prototype.slice);

	/* adapted from https://github.com/lodash/lodash/blob/4.17.15/dist/lodash.js#L6735-L6744 */
	var rePropName = /[^%.[\]]+|\[(?:(-?\d+(?:\.\d+)?)|(["'])((?:(?!\2)[^\\]|\\.)*?)\2)\]|(?=(?:\.|\[\])(?:\.|\[\]|%$))/g;
	var reEscapeChar = /\\(\\)?/g; /** Used to match backslashes in property paths. */
	var stringToPath = function stringToPath(string) {
		var first = $strSlice(string, 0, 1);
		var last = $strSlice(string, -1);
		if (first === '%' && last !== '%') {
			throw new $SyntaxError('invalid intrinsic syntax, expected closing `%`');
		} else if (last === '%' && first !== '%') {
			throw new $SyntaxError('invalid intrinsic syntax, expected opening `%`');
		}
		var result = [];
		$replace(string, rePropName, function (match, number, quote, subString) {
			result[result.length] = quote ? $replace(subString, reEscapeChar, '$1') : number || match;
		});
		return result;
	};
	/* end adaptation */

	var getBaseIntrinsic = function getBaseIntrinsic(name, allowMissing) {
		var intrinsicName = name;
		var alias;
		if (hasOwn(LEGACY_ALIASES, intrinsicName)) {
			alias = LEGACY_ALIASES[intrinsicName];
			intrinsicName = '%' + alias[0] + '%';
		}

		if (hasOwn(INTRINSICS, intrinsicName)) {
			var value = INTRINSICS[intrinsicName];
			if (value === needsEval) {
				value = doEval(intrinsicName);
			}
			if (typeof value === 'undefined' && !allowMissing) {
				throw new $TypeError('intrinsic ' + name + ' exists, but is not available. Please file an issue!');
			}

			return {
				alias: alias,
				name: intrinsicName,
				value: value
			};
		}

		throw new $SyntaxError('intrinsic ' + name + ' does not exist!');
	};

	module.exports = function GetIntrinsic(name, allowMissing) {
		if (typeof name !== 'string' || name.length === 0) {
			throw new $TypeError('intrinsic name must be a non-empty string');
		}
		if (arguments.length > 1 && typeof allowMissing !== 'boolean') {
			throw new $TypeError('"allowMissing" argument must be a boolean');
		}

		var parts = stringToPath(name);
		var intrinsicBaseName = parts.length > 0 ? parts[0] : '';

		var intrinsic = getBaseIntrinsic('%' + intrinsicBaseName + '%', allowMissing);
		var intrinsicRealName = intrinsic.name;
		var value = intrinsic.value;
		var skipFurtherCaching = false;

		var alias = intrinsic.alias;
		if (alias) {
			intrinsicBaseName = alias[0];
			$spliceApply(parts, $concat([0, 1], alias));
		}

		for (var i = 1, isOwn = true; i < parts.length; i += 1) {
			var part = parts[i];
			var first = $strSlice(part, 0, 1);
			var last = $strSlice(part, -1);
			if (
				(
					(first === '"' || first === "'" || first === '`')
					|| (last === '"' || last === "'" || last === '`')
				)
				&& first !== last
			) {
				throw new $SyntaxError('property names with quotes must have matching quotes');
			}
			if (part === 'constructor' || !isOwn) {
				skipFurtherCaching = true;
			}

			intrinsicBaseName += '.' + part;
			intrinsicRealName = '%' + intrinsicBaseName + '%';

			if (hasOwn(INTRINSICS, intrinsicRealName)) {
				value = INTRINSICS[intrinsicRealName];
			} else if (value != null) {
				if (!(part in value)) {
					if (!allowMissing) {
						throw new $TypeError('base intrinsic for ' + name + ' exists, but the property is not available.');
					}
					return void undefined;
				}
				if ($gOPD && (i + 1) >= parts.length) {
					var desc = $gOPD(value, part);
					isOwn = !!desc;

					// By convention, when a data property is converted to an accessor
					// property to emulate a data property that does not suffer from
					// the override mistake, that accessor's getter is marked with
					// an `originalValue` property. Here, when we detect this, we
					// uphold the illusion by pretending to see that original data
					// property, i.e., returning the value rather than the getter
					// itself.
					if (isOwn && 'get' in desc && !('originalValue' in desc.get)) {
						value = desc.get;
					} else {
						value = value[part];
					}
				} else {
					isOwn = hasOwn(value, part);
					value = value[part];
				}

				if (isOwn && !skipFurtherCaching) {
					INTRINSICS[intrinsicRealName] = value;
				}
			}
		}
		return value;
	};


/***/ }),
/* 327 */
/***/ (function(module, exports) {

	'use strict';

	/* eslint complexity: [2, 18], max-statements: [2, 33] */
	module.exports = function hasSymbols() {
		if (typeof Symbol !== 'function' || typeof Object.getOwnPropertySymbols !== 'function') { return false; }
		if (typeof Symbol.iterator === 'symbol') { return true; }

		var obj = {};
		var sym = Symbol('test');
		var symObj = Object(sym);
		if (typeof sym === 'string') { return false; }

		if (Object.prototype.toString.call(sym) !== '[object Symbol]') { return false; }
		if (Object.prototype.toString.call(symObj) !== '[object Symbol]') { return false; }

		// temp disabled per https://github.com/ljharb/object.assign/issues/17
		// if (sym instanceof Symbol) { return false; }
		// temp disabled per https://github.com/WebReflection/get-own-property-symbols/issues/4
		// if (!(symObj instanceof Symbol)) { return false; }

		// if (typeof Symbol.prototype.toString !== 'function') { return false; }
		// if (String(sym) !== Symbol.prototype.toString.call(sym)) { return false; }

		var symVal = 42;
		obj[sym] = symVal;
		for (sym in obj) { return false; } // eslint-disable-line no-restricted-syntax, no-unreachable-loop
		if (typeof Object.keys === 'function' && Object.keys(obj).length !== 0) { return false; }

		if (typeof Object.getOwnPropertyNames === 'function' && Object.getOwnPropertyNames(obj).length !== 0) { return false; }

		var syms = Object.getOwnPropertySymbols(obj);
		if (syms.length !== 1 || syms[0] !== sym) { return false; }

		if (!Object.prototype.propertyIsEnumerable.call(obj, sym)) { return false; }

		if (typeof Object.getOwnPropertyDescriptor === 'function') {
			var descriptor = Object.getOwnPropertyDescriptor(obj, sym);
			if (descriptor.value !== symVal || descriptor.enumerable !== true) { return false; }
		}

		return true;
	};


/***/ }),
/* 328 */
/***/ (function(module, exports, __webpack_require__) {

	/*eslint-disable no-empty */
	'use strict';

	exports.__esModule = true;
	exports.saveState = saveState;
	exports.readState = readState;

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }

	var _warning = __webpack_require__(54);

	var _warning2 = _interopRequireDefault(_warning);

	var KeyPrefix = '@@History/';
	var QuotaExceededErrors = ['QuotaExceededError', 'QUOTA_EXCEEDED_ERR'];

	var SecurityError = 'SecurityError';

	function createKey(key) {
	  return KeyPrefix + key;
	}

	function saveState(key, state) {
	  try {
	    if (state == null) {
	      window.sessionStorage.removeItem(createKey(key));
	    } else {
	      window.sessionStorage.setItem(createKey(key), JSON.stringify(state));
	    }
	  } catch (error) {
	    if (error.name === SecurityError) {
	      // Blocking cookies in Chrome/Firefox/Safari throws SecurityError on any
	      // attempt to access window.sessionStorage.
	      (undefined) !== 'production' ? _warning2['default'](false, '[history] Unable to save state; sessionStorage is not available due to security settings') : undefined;

	      return;
	    }

	    if (QuotaExceededErrors.indexOf(error.name) >= 0 && window.sessionStorage.length === 0) {
	      // Safari "private mode" throws QuotaExceededError.
	      (undefined) !== 'production' ? _warning2['default'](false, '[history] Unable to save state; sessionStorage is not available in Safari private mode') : undefined;

	      return;
	    }

	    throw error;
	  }
	}

	function readState(key) {
	  var json = undefined;
	  try {
	    json = window.sessionStorage.getItem(createKey(key));
	  } catch (error) {
	    if (error.name === SecurityError) {
	      // Blocking cookies in Chrome/Firefox/Safari throws SecurityError on any
	      // attempt to access window.sessionStorage.
	      (undefined) !== 'production' ? _warning2['default'](false, '[history] Unable to read state; sessionStorage is not available due to security settings') : undefined;

	      return null;
	    }
	  }

	  if (json) {
	    try {
	      return JSON.parse(json);
	    } catch (error) {
	      // Ignore invalid JSON.
	    }
	  }

	  return null;
	}

/***/ }),
/* 329 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';

	exports.__esModule = true;

	var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }

	var _invariant = __webpack_require__(29);

	var _invariant2 = _interopRequireDefault(_invariant);

	var _ExecutionEnvironment = __webpack_require__(141);

	var _DOMUtils = __webpack_require__(209);

	var _createHistory = __webpack_require__(331);

	var _createHistory2 = _interopRequireDefault(_createHistory);

	function createDOMHistory(options) {
	  var history = _createHistory2['default'](_extends({
	    getUserConfirmation: _DOMUtils.getUserConfirmation
	  }, options, {
	    go: _DOMUtils.go
	  }));

	  function listen(listener) {
	    !_ExecutionEnvironment.canUseDOM ? (undefined) !== 'production' ? _invariant2['default'](false, 'DOM history needs a DOM') : _invariant2['default'](false) : undefined;

	    return history.listen(listener);
	  }

	  return _extends({}, history, {
	    listen: listen
	  });
	}

	exports['default'] = createDOMHistory;
	module.exports = exports['default'];

/***/ }),
/* 330 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';

	exports.__esModule = true;

	var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }

	var _warning = __webpack_require__(54);

	var _warning2 = _interopRequireDefault(_warning);

	var _invariant = __webpack_require__(29);

	var _invariant2 = _interopRequireDefault(_invariant);

	var _Actions = __webpack_require__(94);

	var _PathUtils = __webpack_require__(82);

	var _ExecutionEnvironment = __webpack_require__(141);

	var _DOMUtils = __webpack_require__(209);

	var _DOMStateStorage = __webpack_require__(328);

	var _createDOMHistory = __webpack_require__(329);

	var _createDOMHistory2 = _interopRequireDefault(_createDOMHistory);

	function isAbsolutePath(path) {
	  return typeof path === 'string' && path.charAt(0) === '/';
	}

	function ensureSlash() {
	  var path = _DOMUtils.getHashPath();

	  if (isAbsolutePath(path)) return true;

	  _DOMUtils.replaceHashPath('/' + path);

	  return false;
	}

	function addQueryStringValueToPath(path, key, value) {
	  return path + (path.indexOf('?') === -1 ? '?' : '&') + (key + '=' + value);
	}

	function stripQueryStringValueFromPath(path, key) {
	  return path.replace(new RegExp('[?&]?' + key + '=[a-zA-Z0-9]+'), '');
	}

	function getQueryStringValueFromPath(path, key) {
	  var match = path.match(new RegExp('\\?.*?\\b' + key + '=(.+?)\\b'));
	  return match && match[1];
	}

	var DefaultQueryKey = '_k';

	function createHashHistory() {
	  var options = arguments.length <= 0 || arguments[0] === undefined ? {} : arguments[0];

	  !_ExecutionEnvironment.canUseDOM ? (undefined) !== 'production' ? _invariant2['default'](false, 'Hash history needs a DOM') : _invariant2['default'](false) : undefined;

	  var queryKey = options.queryKey;

	  if (queryKey === undefined || !!queryKey) queryKey = typeof queryKey === 'string' ? queryKey : DefaultQueryKey;

	  function getCurrentLocation() {
	    var path = _DOMUtils.getHashPath();

	    var key = undefined,
	        state = undefined;
	    if (queryKey) {
	      key = getQueryStringValueFromPath(path, queryKey);
	      path = stripQueryStringValueFromPath(path, queryKey);

	      if (key) {
	        state = _DOMStateStorage.readState(key);
	      } else {
	        state = null;
	        key = history.createKey();
	        _DOMUtils.replaceHashPath(addQueryStringValueToPath(path, queryKey, key));
	      }
	    } else {
	      key = state = null;
	    }

	    var location = _PathUtils.parsePath(path);

	    return history.createLocation(_extends({}, location, { state: state }), undefined, key);
	  }

	  function startHashChangeListener(_ref) {
	    var transitionTo = _ref.transitionTo;

	    function hashChangeListener() {
	      if (!ensureSlash()) return; // Always make sure hashes are preceeded with a /.

	      transitionTo(getCurrentLocation());
	    }

	    ensureSlash();
	    _DOMUtils.addEventListener(window, 'hashchange', hashChangeListener);

	    return function () {
	      _DOMUtils.removeEventListener(window, 'hashchange', hashChangeListener);
	    };
	  }

	  function finishTransition(location) {
	    var basename = location.basename;
	    var pathname = location.pathname;
	    var search = location.search;
	    var state = location.state;
	    var action = location.action;
	    var key = location.key;

	    if (action === _Actions.POP) return; // Nothing to do.

	    var path = (basename || '') + pathname + search;

	    if (queryKey) {
	      path = addQueryStringValueToPath(path, queryKey, key);
	      _DOMStateStorage.saveState(key, state);
	    } else {
	      // Drop key and state.
	      location.key = location.state = null;
	    }

	    var currentHash = _DOMUtils.getHashPath();

	    if (action === _Actions.PUSH) {
	      if (currentHash !== path) {
	        window.location.hash = path;
	      } else {
	        (undefined) !== 'production' ? _warning2['default'](false, 'You cannot PUSH the same path using hash history') : undefined;
	      }
	    } else if (currentHash !== path) {
	      // REPLACE
	      _DOMUtils.replaceHashPath(path);
	    }
	  }

	  var history = _createDOMHistory2['default'](_extends({}, options, {
	    getCurrentLocation: getCurrentLocation,
	    finishTransition: finishTransition,
	    saveState: _DOMStateStorage.saveState
	  }));

	  var listenerCount = 0,
	      stopHashChangeListener = undefined;

	  function listenBefore(listener) {
	    if (++listenerCount === 1) stopHashChangeListener = startHashChangeListener(history);

	    var unlisten = history.listenBefore(listener);

	    return function () {
	      unlisten();

	      if (--listenerCount === 0) stopHashChangeListener();
	    };
	  }

	  function listen(listener) {
	    if (++listenerCount === 1) stopHashChangeListener = startHashChangeListener(history);

	    var unlisten = history.listen(listener);

	    return function () {
	      unlisten();

	      if (--listenerCount === 0) stopHashChangeListener();
	    };
	  }

	  function push(location) {
	    (undefined) !== 'production' ? _warning2['default'](queryKey || location.state == null, 'You cannot use state without a queryKey it will be dropped') : undefined;

	    history.push(location);
	  }

	  function replace(location) {
	    (undefined) !== 'production' ? _warning2['default'](queryKey || location.state == null, 'You cannot use state without a queryKey it will be dropped') : undefined;

	    history.replace(location);
	  }

	  var goIsSupportedWithoutReload = _DOMUtils.supportsGoWithoutReloadUsingHash();

	  function go(n) {
	    (undefined) !== 'production' ? _warning2['default'](goIsSupportedWithoutReload, 'Hash history go(n) causes a full page reload in this browser') : undefined;

	    history.go(n);
	  }

	  function createHref(path) {
	    return '#' + history.createHref(path);
	  }

	  // deprecated
	  function registerTransitionHook(hook) {
	    if (++listenerCount === 1) stopHashChangeListener = startHashChangeListener(history);

	    history.registerTransitionHook(hook);
	  }

	  // deprecated
	  function unregisterTransitionHook(hook) {
	    history.unregisterTransitionHook(hook);

	    if (--listenerCount === 0) stopHashChangeListener();
	  }

	  // deprecated
	  function pushState(state, path) {
	    (undefined) !== 'production' ? _warning2['default'](queryKey || state == null, 'You cannot use state without a queryKey it will be dropped') : undefined;

	    history.pushState(state, path);
	  }

	  // deprecated
	  function replaceState(state, path) {
	    (undefined) !== 'production' ? _warning2['default'](queryKey || state == null, 'You cannot use state without a queryKey it will be dropped') : undefined;

	    history.replaceState(state, path);
	  }

	  return _extends({}, history, {
	    listenBefore: listenBefore,
	    listen: listen,
	    push: push,
	    replace: replace,
	    go: go,
	    createHref: createHref,

	    registerTransitionHook: registerTransitionHook, // deprecated - warning is in createHistory
	    unregisterTransitionHook: unregisterTransitionHook, // deprecated - warning is in createHistory
	    pushState: pushState, // deprecated - warning is in createHistory
	    replaceState: replaceState // deprecated - warning is in createHistory
	  });
	}

	exports['default'] = createHashHistory;
	module.exports = exports['default'];

/***/ }),
/* 331 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';

	exports.__esModule = true;

	var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }

	var _warning = __webpack_require__(54);

	var _warning2 = _interopRequireDefault(_warning);

	var _deepEqual = __webpack_require__(768);

	var _deepEqual2 = _interopRequireDefault(_deepEqual);

	var _PathUtils = __webpack_require__(82);

	var _AsyncUtils = __webpack_require__(787);

	var _Actions = __webpack_require__(94);

	var _createLocation2 = __webpack_require__(789);

	var _createLocation3 = _interopRequireDefault(_createLocation2);

	var _runTransitionHook = __webpack_require__(211);

	var _runTransitionHook2 = _interopRequireDefault(_runTransitionHook);

	var _deprecate = __webpack_require__(210);

	var _deprecate2 = _interopRequireDefault(_deprecate);

	function createRandomKey(length) {
	  return Math.random().toString(36).substr(2, length);
	}

	function locationsAreEqual(a, b) {
	  return a.pathname === b.pathname && a.search === b.search &&
	  //a.action === b.action && // Different action !== location change.
	  a.key === b.key && _deepEqual2['default'](a.state, b.state);
	}

	var DefaultKeyLength = 6;

	function createHistory() {
	  var options = arguments.length <= 0 || arguments[0] === undefined ? {} : arguments[0];
	  var getCurrentLocation = options.getCurrentLocation;
	  var finishTransition = options.finishTransition;
	  var saveState = options.saveState;
	  var go = options.go;
	  var getUserConfirmation = options.getUserConfirmation;
	  var keyLength = options.keyLength;

	  if (typeof keyLength !== 'number') keyLength = DefaultKeyLength;

	  var transitionHooks = [];

	  function listenBefore(hook) {
	    transitionHooks.push(hook);

	    return function () {
	      transitionHooks = transitionHooks.filter(function (item) {
	        return item !== hook;
	      });
	    };
	  }

	  var allKeys = [];
	  var changeListeners = [];
	  var location = undefined;

	  function getCurrent() {
	    if (pendingLocation && pendingLocation.action === _Actions.POP) {
	      return allKeys.indexOf(pendingLocation.key);
	    } else if (location) {
	      return allKeys.indexOf(location.key);
	    } else {
	      return -1;
	    }
	  }

	  function updateLocation(newLocation) {
	    var current = getCurrent();

	    location = newLocation;

	    if (location.action === _Actions.PUSH) {
	      allKeys = [].concat(allKeys.slice(0, current + 1), [location.key]);
	    } else if (location.action === _Actions.REPLACE) {
	      allKeys[current] = location.key;
	    }

	    changeListeners.forEach(function (listener) {
	      listener(location);
	    });
	  }

	  function listen(listener) {
	    changeListeners.push(listener);

	    if (location) {
	      listener(location);
	    } else {
	      var _location = getCurrentLocation();
	      allKeys = [_location.key];
	      updateLocation(_location);
	    }

	    return function () {
	      changeListeners = changeListeners.filter(function (item) {
	        return item !== listener;
	      });
	    };
	  }

	  function confirmTransitionTo(location, callback) {
	    _AsyncUtils.loopAsync(transitionHooks.length, function (index, next, done) {
	      _runTransitionHook2['default'](transitionHooks[index], location, function (result) {
	        if (result != null) {
	          done(result);
	        } else {
	          next();
	        }
	      });
	    }, function (message) {
	      if (getUserConfirmation && typeof message === 'string') {
	        getUserConfirmation(message, function (ok) {
	          callback(ok !== false);
	        });
	      } else {
	        callback(message !== false);
	      }
	    });
	  }

	  var pendingLocation = undefined;

	  function transitionTo(nextLocation) {
	    if (location && locationsAreEqual(location, nextLocation)) return; // Nothing to do.

	    pendingLocation = nextLocation;

	    confirmTransitionTo(nextLocation, function (ok) {
	      if (pendingLocation !== nextLocation) return; // Transition was interrupted.

	      if (ok) {
	        // treat PUSH to current path like REPLACE to be consistent with browsers
	        if (nextLocation.action === _Actions.PUSH) {
	          var prevPath = createPath(location);
	          var nextPath = createPath(nextLocation);

	          if (nextPath === prevPath && _deepEqual2['default'](location.state, nextLocation.state)) nextLocation.action = _Actions.REPLACE;
	        }

	        if (finishTransition(nextLocation) !== false) updateLocation(nextLocation);
	      } else if (location && nextLocation.action === _Actions.POP) {
	        var prevIndex = allKeys.indexOf(location.key);
	        var nextIndex = allKeys.indexOf(nextLocation.key);

	        if (prevIndex !== -1 && nextIndex !== -1) go(prevIndex - nextIndex); // Restore the URL.
	      }
	    });
	  }

	  function push(location) {
	    transitionTo(createLocation(location, _Actions.PUSH, createKey()));
	  }

	  function replace(location) {
	    transitionTo(createLocation(location, _Actions.REPLACE, createKey()));
	  }

	  function goBack() {
	    go(-1);
	  }

	  function goForward() {
	    go(1);
	  }

	  function createKey() {
	    return createRandomKey(keyLength);
	  }

	  function createPath(location) {
	    if (location == null || typeof location === 'string') return location;

	    var pathname = location.pathname;
	    var search = location.search;
	    var hash = location.hash;

	    var result = pathname;

	    if (search) result += search;

	    if (hash) result += hash;

	    return result;
	  }

	  function createHref(location) {
	    return createPath(location);
	  }

	  function createLocation(location, action) {
	    var key = arguments.length <= 2 || arguments[2] === undefined ? createKey() : arguments[2];

	    if (typeof action === 'object') {
	      (undefined) !== 'production' ? _warning2['default'](false, 'The state (2nd) argument to history.createLocation is deprecated; use a ' + 'location descriptor instead') : undefined;

	      if (typeof location === 'string') location = _PathUtils.parsePath(location);

	      location = _extends({}, location, { state: action });

	      action = key;
	      key = arguments[3] || createKey();
	    }

	    return _createLocation3['default'](location, action, key);
	  }

	  // deprecated
	  function setState(state) {
	    if (location) {
	      updateLocationState(location, state);
	      updateLocation(location);
	    } else {
	      updateLocationState(getCurrentLocation(), state);
	    }
	  }

	  function updateLocationState(location, state) {
	    location.state = _extends({}, location.state, state);
	    saveState(location.key, location.state);
	  }

	  // deprecated
	  function registerTransitionHook(hook) {
	    if (transitionHooks.indexOf(hook) === -1) transitionHooks.push(hook);
	  }

	  // deprecated
	  function unregisterTransitionHook(hook) {
	    transitionHooks = transitionHooks.filter(function (item) {
	      return item !== hook;
	    });
	  }

	  // deprecated
	  function pushState(state, path) {
	    if (typeof path === 'string') path = _PathUtils.parsePath(path);

	    push(_extends({ state: state }, path));
	  }

	  // deprecated
	  function replaceState(state, path) {
	    if (typeof path === 'string') path = _PathUtils.parsePath(path);

	    replace(_extends({ state: state }, path));
	  }

	  return {
	    listenBefore: listenBefore,
	    listen: listen,
	    transitionTo: transitionTo,
	    push: push,
	    replace: replace,
	    go: go,
	    goBack: goBack,
	    goForward: goForward,
	    createKey: createKey,
	    createPath: createPath,
	    createHref: createHref,
	    createLocation: createLocation,

	    setState: _deprecate2['default'](setState, 'setState is deprecated; use location.key to save state instead'),
	    registerTransitionHook: _deprecate2['default'](registerTransitionHook, 'registerTransitionHook is deprecated; use listenBefore instead'),
	    unregisterTransitionHook: _deprecate2['default'](unregisterTransitionHook, 'unregisterTransitionHook is deprecated; use the callback returned from listenBefore instead'),
	    pushState: _deprecate2['default'](pushState, 'pushState is deprecated; use push instead'),
	    replaceState: _deprecate2['default'](replaceState, 'replaceState is deprecated; use replace instead')
	  };
	}

	exports['default'] = createHistory;
	module.exports = exports['default'];

/***/ }),
/* 332 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';

	exports.__esModule = true;

	var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }

	var _warning = __webpack_require__(54);

	var _warning2 = _interopRequireDefault(_warning);

	var _ExecutionEnvironment = __webpack_require__(141);

	var _PathUtils = __webpack_require__(82);

	var _runTransitionHook = __webpack_require__(211);

	var _runTransitionHook2 = _interopRequireDefault(_runTransitionHook);

	var _deprecate = __webpack_require__(210);

	var _deprecate2 = _interopRequireDefault(_deprecate);

	function useBasename(createHistory) {
	  return function () {
	    var options = arguments.length <= 0 || arguments[0] === undefined ? {} : arguments[0];

	    var history = createHistory(options);

	    var basename = options.basename;

	    var checkedBaseHref = false;

	    function checkBaseHref() {
	      if (checkedBaseHref) {
	        return;
	      }

	      // Automatically use the value of <base href> in HTML
	      // documents as basename if it's not explicitly given.
	      if (basename == null && _ExecutionEnvironment.canUseDOM) {
	        var base = document.getElementsByTagName('base')[0];
	        var baseHref = base && base.getAttribute('href');

	        if (baseHref != null) {
	          basename = baseHref;

	          (undefined) !== 'production' ? _warning2['default'](false, 'Automatically setting basename using <base href> is deprecated and will ' + 'be removed in the next major release. The semantics of <base href> are ' + 'subtly different from basename. Please pass the basename explicitly in ' + 'the options to createHistory') : undefined;
	        }
	      }

	      checkedBaseHref = true;
	    }

	    function addBasename(location) {
	      checkBaseHref();

	      if (basename && location.basename == null) {
	        if (location.pathname.indexOf(basename) === 0) {
	          location.pathname = location.pathname.substring(basename.length);
	          location.basename = basename;

	          if (location.pathname === '') location.pathname = '/';
	        } else {
	          location.basename = '';
	        }
	      }

	      return location;
	    }

	    function prependBasename(location) {
	      checkBaseHref();

	      if (!basename) return location;

	      if (typeof location === 'string') location = _PathUtils.parsePath(location);

	      var pname = location.pathname;
	      var normalizedBasename = basename.slice(-1) === '/' ? basename : basename + '/';
	      var normalizedPathname = pname.charAt(0) === '/' ? pname.slice(1) : pname;
	      var pathname = normalizedBasename + normalizedPathname;

	      return _extends({}, location, {
	        pathname: pathname
	      });
	    }

	    // Override all read methods with basename-aware versions.
	    function listenBefore(hook) {
	      return history.listenBefore(function (location, callback) {
	        _runTransitionHook2['default'](hook, addBasename(location), callback);
	      });
	    }

	    function listen(listener) {
	      return history.listen(function (location) {
	        listener(addBasename(location));
	      });
	    }

	    // Override all write methods with basename-aware versions.
	    function push(location) {
	      history.push(prependBasename(location));
	    }

	    function replace(location) {
	      history.replace(prependBasename(location));
	    }

	    function createPath(location) {
	      return history.createPath(prependBasename(location));
	    }

	    function createHref(location) {
	      return history.createHref(prependBasename(location));
	    }

	    function createLocation(location) {
	      for (var _len = arguments.length, args = Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
	        args[_key - 1] = arguments[_key];
	      }

	      return addBasename(history.createLocation.apply(history, [prependBasename(location)].concat(args)));
	    }

	    // deprecated
	    function pushState(state, path) {
	      if (typeof path === 'string') path = _PathUtils.parsePath(path);

	      push(_extends({ state: state }, path));
	    }

	    // deprecated
	    function replaceState(state, path) {
	      if (typeof path === 'string') path = _PathUtils.parsePath(path);

	      replace(_extends({ state: state }, path));
	    }

	    return _extends({}, history, {
	      listenBefore: listenBefore,
	      listen: listen,
	      push: push,
	      replace: replace,
	      createPath: createPath,
	      createHref: createHref,
	      createLocation: createLocation,

	      pushState: _deprecate2['default'](pushState, 'pushState is deprecated; use push instead'),
	      replaceState: _deprecate2['default'](replaceState, 'replaceState is deprecated; use replace instead')
	    });
	  };
	}

	exports['default'] = useBasename;
	module.exports = exports['default'];

/***/ }),
/* 333 */
/***/ (function(module, exports) {

	'use strict';

	var numberIsNaN = function (value) {
		return value !== value;
	};

	module.exports = function is(a, b) {
		if (a === 0 && b === 0) {
			return 1 / a === 1 / b;
		}
		if (a === b) {
			return true;
		}
		if (numberIsNaN(a) && numberIsNaN(b)) {
			return true;
		}
		return false;
	};



/***/ }),
/* 334 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';

	var implementation = __webpack_require__(333);

	module.exports = function getPolyfill() {
		return typeof Object.is === 'function' ? Object.is : implementation;
	};


/***/ }),
/* 335 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';

	var slice = Array.prototype.slice;
	var isArgs = __webpack_require__(336);

	var origKeys = Object.keys;
	var keysShim = origKeys ? function keys(o) { return origKeys(o); } : __webpack_require__(797);

	var originalKeys = Object.keys;

	keysShim.shim = function shimObjectKeys() {
		if (Object.keys) {
			var keysWorksWithArguments = (function () {
				// Safari 5.0 bug
				var args = Object.keys(arguments);
				return args && args.length === arguments.length;
			}(1, 2));
			if (!keysWorksWithArguments) {
				Object.keys = function keys(object) { // eslint-disable-line func-name-matching
					if (isArgs(object)) {
						return originalKeys(slice.call(object));
					}
					return originalKeys(object);
				};
			}
		} else {
			Object.keys = keysShim;
		}
		return Object.keys || keysShim;
	};

	module.exports = keysShim;


/***/ }),
/* 336 */
/***/ (function(module, exports) {

	'use strict';

	var toStr = Object.prototype.toString;

	module.exports = function isArguments(value) {
		var str = toStr.call(value);
		var isArgs = str === '[object Arguments]';
		if (!isArgs) {
			isArgs = str !== '[object Array]' &&
				value !== null &&
				typeof value === 'object' &&
				typeof value.length === 'number' &&
				value.length >= 0 &&
				toStr.call(value.callee) === '[object Function]';
		}
		return isArgs;
	};


/***/ }),
/* 337 */
/***/ (function(module, exports, __webpack_require__) {

	/**
	 * Copyright (c) 2013-present, Facebook, Inc.
	 *
	 * This source code is licensed under the MIT license found in the
	 * LICENSE file in the root directory of this source tree.
	 */

	'use strict';

	// React 15.5 references this module, and assumes PropTypes are still callable in production.
	// Therefore we re-export development-only version with all the PropTypes checks here.
	// However if one is migrating to the `prop-types` npm library, they will go through the
	// `index.js` entry point, and it will branch depending on the environment.
	var factory = __webpack_require__(338);
	module.exports = function(isValidElement) {
	  // It is still allowed in 15.5.
	  var throwOnDirectAccess = false;
	  return factory(isValidElement, throwOnDirectAccess);
	};


/***/ }),
/* 338 */
/***/ (function(module, exports, __webpack_require__) {

	/**
	 * Copyright (c) 2013-present, Facebook, Inc.
	 *
	 * This source code is licensed under the MIT license found in the
	 * LICENSE file in the root directory of this source tree.
	 */

	'use strict';

	var ReactIs = __webpack_require__(361);
	var assign = __webpack_require__(19);

	var ReactPropTypesSecret = __webpack_require__(213);
	var checkPropTypes = __webpack_require__(798);

	var has = Function.call.bind(Object.prototype.hasOwnProperty);
	var printWarning = function() {};

	if ((undefined) !== 'production') {
	  printWarning = function(text) {
	    var message = 'Warning: ' + text;
	    if (typeof console !== 'undefined') {
	      console.error(message);
	    }
	    try {
	      // --- Welcome to debugging React ---
	      // This error was thrown as a convenience so that you can use this stack
	      // to find the callsite that caused this warning to fire.
	      throw new Error(message);
	    } catch (x) {}
	  };
	}

	function emptyFunctionThatReturnsNull() {
	  return null;
	}

	module.exports = function(isValidElement, throwOnDirectAccess) {
	  /* global Symbol */
	  var ITERATOR_SYMBOL = typeof Symbol === 'function' && Symbol.iterator;
	  var FAUX_ITERATOR_SYMBOL = '@@iterator'; // Before Symbol spec.

	  /**
	   * Returns the iterator method function contained on the iterable object.
	   *
	   * Be sure to invoke the function with the iterable as context:
	   *
	   *     var iteratorFn = getIteratorFn(myIterable);
	   *     if (iteratorFn) {
	   *       var iterator = iteratorFn.call(myIterable);
	   *       ...
	   *     }
	   *
	   * @param {?object} maybeIterable
	   * @return {?function}
	   */
	  function getIteratorFn(maybeIterable) {
	    var iteratorFn = maybeIterable && (ITERATOR_SYMBOL && maybeIterable[ITERATOR_SYMBOL] || maybeIterable[FAUX_ITERATOR_SYMBOL]);
	    if (typeof iteratorFn === 'function') {
	      return iteratorFn;
	    }
	  }

	  /**
	   * Collection of methods that allow declaration and validation of props that are
	   * supplied to React components. Example usage:
	   *
	   *   var Props = require('ReactPropTypes');
	   *   var MyArticle = React.createClass({
	   *     propTypes: {
	   *       // An optional string prop named "description".
	   *       description: Props.string,
	   *
	   *       // A required enum prop named "category".
	   *       category: Props.oneOf(['News','Photos']).isRequired,
	   *
	   *       // A prop named "dialog" that requires an instance of Dialog.
	   *       dialog: Props.instanceOf(Dialog).isRequired
	   *     },
	   *     render: function() { ... }
	   *   });
	   *
	   * A more formal specification of how these methods are used:
	   *
	   *   type := array|bool|func|object|number|string|oneOf([...])|instanceOf(...)
	   *   decl := ReactPropTypes.{type}(.isRequired)?
	   *
	   * Each and every declaration produces a function with the same signature. This
	   * allows the creation of custom validation functions. For example:
	   *
	   *  var MyLink = React.createClass({
	   *    propTypes: {
	   *      // An optional string or URI prop named "href".
	   *      href: function(props, propName, componentName) {
	   *        var propValue = props[propName];
	   *        if (propValue != null && typeof propValue !== 'string' &&
	   *            !(propValue instanceof URI)) {
	   *          return new Error(
	   *            'Expected a string or an URI for ' + propName + ' in ' +
	   *            componentName
	   *          );
	   *        }
	   *      }
	   *    },
	   *    render: function() {...}
	   *  });
	   *
	   * @internal
	   */

	  var ANONYMOUS = '<<anonymous>>';

	  // Important!
	  // Keep this list in sync with production version in `./factoryWithThrowingShims.js`.
	  var ReactPropTypes = {
	    array: createPrimitiveTypeChecker('array'),
	    bool: createPrimitiveTypeChecker('boolean'),
	    func: createPrimitiveTypeChecker('function'),
	    number: createPrimitiveTypeChecker('number'),
	    object: createPrimitiveTypeChecker('object'),
	    string: createPrimitiveTypeChecker('string'),
	    symbol: createPrimitiveTypeChecker('symbol'),

	    any: createAnyTypeChecker(),
	    arrayOf: createArrayOfTypeChecker,
	    element: createElementTypeChecker(),
	    elementType: createElementTypeTypeChecker(),
	    instanceOf: createInstanceTypeChecker,
	    node: createNodeChecker(),
	    objectOf: createObjectOfTypeChecker,
	    oneOf: createEnumTypeChecker,
	    oneOfType: createUnionTypeChecker,
	    shape: createShapeTypeChecker,
	    exact: createStrictShapeTypeChecker,
	  };

	  /**
	   * inlined Object.is polyfill to avoid requiring consumers ship their own
	   * https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/is
	   */
	  /*eslint-disable no-self-compare*/
	  function is(x, y) {
	    // SameValue algorithm
	    if (x === y) {
	      // Steps 1-5, 7-10
	      // Steps 6.b-6.e: +0 != -0
	      return x !== 0 || 1 / x === 1 / y;
	    } else {
	      // Step 6.a: NaN == NaN
	      return x !== x && y !== y;
	    }
	  }
	  /*eslint-enable no-self-compare*/

	  /**
	   * We use an Error-like object for backward compatibility as people may call
	   * PropTypes directly and inspect their output. However, we don't use real
	   * Errors anymore. We don't inspect their stack anyway, and creating them
	   * is prohibitively expensive if they are created too often, such as what
	   * happens in oneOfType() for any type before the one that matched.
	   */
	  function PropTypeError(message) {
	    this.message = message;
	    this.stack = '';
	  }
	  // Make `instanceof Error` still work for returned errors.
	  PropTypeError.prototype = Error.prototype;

	  function createChainableTypeChecker(validate) {
	    if ((undefined) !== 'production') {
	      var manualPropTypeCallCache = {};
	      var manualPropTypeWarningCount = 0;
	    }
	    function checkType(isRequired, props, propName, componentName, location, propFullName, secret) {
	      componentName = componentName || ANONYMOUS;
	      propFullName = propFullName || propName;

	      if (secret !== ReactPropTypesSecret) {
	        if (throwOnDirectAccess) {
	          // New behavior only for users of `prop-types` package
	          var err = new Error(
	            'Calling PropTypes validators directly is not supported by the `prop-types` package. ' +
	            'Use `PropTypes.checkPropTypes()` to call them. ' +
	            'Read more at http://fb.me/use-check-prop-types'
	          );
	          err.name = 'Invariant Violation';
	          throw err;
	        } else if ((undefined) !== 'production' && typeof console !== 'undefined') {
	          // Old behavior for people using React.PropTypes
	          var cacheKey = componentName + ':' + propName;
	          if (
	            !manualPropTypeCallCache[cacheKey] &&
	            // Avoid spamming the console because they are often not actionable except for lib authors
	            manualPropTypeWarningCount < 3
	          ) {
	            printWarning(
	              'You are manually calling a React.PropTypes validation ' +
	              'function for the `' + propFullName + '` prop on `' + componentName  + '`. This is deprecated ' +
	              'and will throw in the standalone `prop-types` package. ' +
	              'You may be seeing this warning due to a third-party PropTypes ' +
	              'library. See https://fb.me/react-warning-dont-call-proptypes ' + 'for details.'
	            );
	            manualPropTypeCallCache[cacheKey] = true;
	            manualPropTypeWarningCount++;
	          }
	        }
	      }
	      if (props[propName] == null) {
	        if (isRequired) {
	          if (props[propName] === null) {
	            return new PropTypeError('The ' + location + ' `' + propFullName + '` is marked as required ' + ('in `' + componentName + '`, but its value is `null`.'));
	          }
	          return new PropTypeError('The ' + location + ' `' + propFullName + '` is marked as required in ' + ('`' + componentName + '`, but its value is `undefined`.'));
	        }
	        return null;
	      } else {
	        return validate(props, propName, componentName, location, propFullName);
	      }
	    }

	    var chainedCheckType = checkType.bind(null, false);
	    chainedCheckType.isRequired = checkType.bind(null, true);

	    return chainedCheckType;
	  }

	  function createPrimitiveTypeChecker(expectedType) {
	    function validate(props, propName, componentName, location, propFullName, secret) {
	      var propValue = props[propName];
	      var propType = getPropType(propValue);
	      if (propType !== expectedType) {
	        // `propValue` being instance of, say, date/regexp, pass the 'object'
	        // check, but we can offer a more precise error message here rather than
	        // 'of type `object`'.
	        var preciseType = getPreciseType(propValue);

	        return new PropTypeError('Invalid ' + location + ' `' + propFullName + '` of type ' + ('`' + preciseType + '` supplied to `' + componentName + '`, expected ') + ('`' + expectedType + '`.'));
	      }
	      return null;
	    }
	    return createChainableTypeChecker(validate);
	  }

	  function createAnyTypeChecker() {
	    return createChainableTypeChecker(emptyFunctionThatReturnsNull);
	  }

	  function createArrayOfTypeChecker(typeChecker) {
	    function validate(props, propName, componentName, location, propFullName) {
	      if (typeof typeChecker !== 'function') {
	        return new PropTypeError('Property `' + propFullName + '` of component `' + componentName + '` has invalid PropType notation inside arrayOf.');
	      }
	      var propValue = props[propName];
	      if (!Array.isArray(propValue)) {
	        var propType = getPropType(propValue);
	        return new PropTypeError('Invalid ' + location + ' `' + propFullName + '` of type ' + ('`' + propType + '` supplied to `' + componentName + '`, expected an array.'));
	      }
	      for (var i = 0; i < propValue.length; i++) {
	        var error = typeChecker(propValue, i, componentName, location, propFullName + '[' + i + ']', ReactPropTypesSecret);
	        if (error instanceof Error) {
	          return error;
	        }
	      }
	      return null;
	    }
	    return createChainableTypeChecker(validate);
	  }

	  function createElementTypeChecker() {
	    function validate(props, propName, componentName, location, propFullName) {
	      var propValue = props[propName];
	      if (!isValidElement(propValue)) {
	        var propType = getPropType(propValue);
	        return new PropTypeError('Invalid ' + location + ' `' + propFullName + '` of type ' + ('`' + propType + '` supplied to `' + componentName + '`, expected a single ReactElement.'));
	      }
	      return null;
	    }
	    return createChainableTypeChecker(validate);
	  }

	  function createElementTypeTypeChecker() {
	    function validate(props, propName, componentName, location, propFullName) {
	      var propValue = props[propName];
	      if (!ReactIs.isValidElementType(propValue)) {
	        var propType = getPropType(propValue);
	        return new PropTypeError('Invalid ' + location + ' `' + propFullName + '` of type ' + ('`' + propType + '` supplied to `' + componentName + '`, expected a single ReactElement type.'));
	      }
	      return null;
	    }
	    return createChainableTypeChecker(validate);
	  }

	  function createInstanceTypeChecker(expectedClass) {
	    function validate(props, propName, componentName, location, propFullName) {
	      if (!(props[propName] instanceof expectedClass)) {
	        var expectedClassName = expectedClass.name || ANONYMOUS;
	        var actualClassName = getClassName(props[propName]);
	        return new PropTypeError('Invalid ' + location + ' `' + propFullName + '` of type ' + ('`' + actualClassName + '` supplied to `' + componentName + '`, expected ') + ('instance of `' + expectedClassName + '`.'));
	      }
	      return null;
	    }
	    return createChainableTypeChecker(validate);
	  }

	  function createEnumTypeChecker(expectedValues) {
	    if (!Array.isArray(expectedValues)) {
	      if ((undefined) !== 'production') {
	        if (arguments.length > 1) {
	          printWarning(
	            'Invalid arguments supplied to oneOf, expected an array, got ' + arguments.length + ' arguments. ' +
	            'A common mistake is to write oneOf(x, y, z) instead of oneOf([x, y, z]).'
	          );
	        } else {
	          printWarning('Invalid argument supplied to oneOf, expected an array.');
	        }
	      }
	      return emptyFunctionThatReturnsNull;
	    }

	    function validate(props, propName, componentName, location, propFullName) {
	      var propValue = props[propName];
	      for (var i = 0; i < expectedValues.length; i++) {
	        if (is(propValue, expectedValues[i])) {
	          return null;
	        }
	      }

	      var valuesString = JSON.stringify(expectedValues, function replacer(key, value) {
	        var type = getPreciseType(value);
	        if (type === 'symbol') {
	          return String(value);
	        }
	        return value;
	      });
	      return new PropTypeError('Invalid ' + location + ' `' + propFullName + '` of value `' + String(propValue) + '` ' + ('supplied to `' + componentName + '`, expected one of ' + valuesString + '.'));
	    }
	    return createChainableTypeChecker(validate);
	  }

	  function createObjectOfTypeChecker(typeChecker) {
	    function validate(props, propName, componentName, location, propFullName) {
	      if (typeof typeChecker !== 'function') {
	        return new PropTypeError('Property `' + propFullName + '` of component `' + componentName + '` has invalid PropType notation inside objectOf.');
	      }
	      var propValue = props[propName];
	      var propType = getPropType(propValue);
	      if (propType !== 'object') {
	        return new PropTypeError('Invalid ' + location + ' `' + propFullName + '` of type ' + ('`' + propType + '` supplied to `' + componentName + '`, expected an object.'));
	      }
	      for (var key in propValue) {
	        if (has(propValue, key)) {
	          var error = typeChecker(propValue, key, componentName, location, propFullName + '.' + key, ReactPropTypesSecret);
	          if (error instanceof Error) {
	            return error;
	          }
	        }
	      }
	      return null;
	    }
	    return createChainableTypeChecker(validate);
	  }

	  function createUnionTypeChecker(arrayOfTypeCheckers) {
	    if (!Array.isArray(arrayOfTypeCheckers)) {
	      (undefined) !== 'production' ? printWarning('Invalid argument supplied to oneOfType, expected an instance of array.') : void 0;
	      return emptyFunctionThatReturnsNull;
	    }

	    for (var i = 0; i < arrayOfTypeCheckers.length; i++) {
	      var checker = arrayOfTypeCheckers[i];
	      if (typeof checker !== 'function') {
	        printWarning(
	          'Invalid argument supplied to oneOfType. Expected an array of check functions, but ' +
	          'received ' + getPostfixForTypeWarning(checker) + ' at index ' + i + '.'
	        );
	        return emptyFunctionThatReturnsNull;
	      }
	    }

	    function validate(props, propName, componentName, location, propFullName) {
	      for (var i = 0; i < arrayOfTypeCheckers.length; i++) {
	        var checker = arrayOfTypeCheckers[i];
	        if (checker(props, propName, componentName, location, propFullName, ReactPropTypesSecret) == null) {
	          return null;
	        }
	      }

	      return new PropTypeError('Invalid ' + location + ' `' + propFullName + '` supplied to ' + ('`' + componentName + '`.'));
	    }
	    return createChainableTypeChecker(validate);
	  }

	  function createNodeChecker() {
	    function validate(props, propName, componentName, location, propFullName) {
	      if (!isNode(props[propName])) {
	        return new PropTypeError('Invalid ' + location + ' `' + propFullName + '` supplied to ' + ('`' + componentName + '`, expected a ReactNode.'));
	      }
	      return null;
	    }
	    return createChainableTypeChecker(validate);
	  }

	  function createShapeTypeChecker(shapeTypes) {
	    function validate(props, propName, componentName, location, propFullName) {
	      var propValue = props[propName];
	      var propType = getPropType(propValue);
	      if (propType !== 'object') {
	        return new PropTypeError('Invalid ' + location + ' `' + propFullName + '` of type `' + propType + '` ' + ('supplied to `' + componentName + '`, expected `object`.'));
	      }
	      for (var key in shapeTypes) {
	        var checker = shapeTypes[key];
	        if (!checker) {
	          continue;
	        }
	        var error = checker(propValue, key, componentName, location, propFullName + '.' + key, ReactPropTypesSecret);
	        if (error) {
	          return error;
	        }
	      }
	      return null;
	    }
	    return createChainableTypeChecker(validate);
	  }

	  function createStrictShapeTypeChecker(shapeTypes) {
	    function validate(props, propName, componentName, location, propFullName) {
	      var propValue = props[propName];
	      var propType = getPropType(propValue);
	      if (propType !== 'object') {
	        return new PropTypeError('Invalid ' + location + ' `' + propFullName + '` of type `' + propType + '` ' + ('supplied to `' + componentName + '`, expected `object`.'));
	      }
	      // We need to check all keys in case some are required but missing from
	      // props.
	      var allKeys = assign({}, props[propName], shapeTypes);
	      for (var key in allKeys) {
	        var checker = shapeTypes[key];
	        if (!checker) {
	          return new PropTypeError(
	            'Invalid ' + location + ' `' + propFullName + '` key `' + key + '` supplied to `' + componentName + '`.' +
	            '\nBad object: ' + JSON.stringify(props[propName], null, '  ') +
	            '\nValid keys: ' +  JSON.stringify(Object.keys(shapeTypes), null, '  ')
	          );
	        }
	        var error = checker(propValue, key, componentName, location, propFullName + '.' + key, ReactPropTypesSecret);
	        if (error) {
	          return error;
	        }
	      }
	      return null;
	    }

	    return createChainableTypeChecker(validate);
	  }

	  function isNode(propValue) {
	    switch (typeof propValue) {
	      case 'number':
	      case 'string':
	      case 'undefined':
	        return true;
	      case 'boolean':
	        return !propValue;
	      case 'object':
	        if (Array.isArray(propValue)) {
	          return propValue.every(isNode);
	        }
	        if (propValue === null || isValidElement(propValue)) {
	          return true;
	        }

	        var iteratorFn = getIteratorFn(propValue);
	        if (iteratorFn) {
	          var iterator = iteratorFn.call(propValue);
	          var step;
	          if (iteratorFn !== propValue.entries) {
	            while (!(step = iterator.next()).done) {
	              if (!isNode(step.value)) {
	                return false;
	              }
	            }
	          } else {
	            // Iterator will provide entry [k,v] tuples rather than values.
	            while (!(step = iterator.next()).done) {
	              var entry = step.value;
	              if (entry) {
	                if (!isNode(entry[1])) {
	                  return false;
	                }
	              }
	            }
	          }
	        } else {
	          return false;
	        }

	        return true;
	      default:
	        return false;
	    }
	  }

	  function isSymbol(propType, propValue) {
	    // Native Symbol.
	    if (propType === 'symbol') {
	      return true;
	    }

	    // falsy value can't be a Symbol
	    if (!propValue) {
	      return false;
	    }

	    // 19.4.3.5 Symbol.prototype[@@toStringTag] === 'Symbol'
	    if (propValue['@@toStringTag'] === 'Symbol') {
	      return true;
	    }

	    // Fallback for non-spec compliant Symbols which are polyfilled.
	    if (typeof Symbol === 'function' && propValue instanceof Symbol) {
	      return true;
	    }

	    return false;
	  }

	  // Equivalent of `typeof` but with special handling for array and regexp.
	  function getPropType(propValue) {
	    var propType = typeof propValue;
	    if (Array.isArray(propValue)) {
	      return 'array';
	    }
	    if (propValue instanceof RegExp) {
	      // Old webkits (at least until Android 4.0) return 'function' rather than
	      // 'object' for typeof a RegExp. We'll normalize this here so that /bla/
	      // passes PropTypes.object.
	      return 'object';
	    }
	    if (isSymbol(propType, propValue)) {
	      return 'symbol';
	    }
	    return propType;
	  }

	  // This handles more types than `getPropType`. Only used for error messages.
	  // See `createPrimitiveTypeChecker`.
	  function getPreciseType(propValue) {
	    if (typeof propValue === 'undefined' || propValue === null) {
	      return '' + propValue;
	    }
	    var propType = getPropType(propValue);
	    if (propType === 'object') {
	      if (propValue instanceof Date) {
	        return 'date';
	      } else if (propValue instanceof RegExp) {
	        return 'regexp';
	      }
	    }
	    return propType;
	  }

	  // Returns a string that is postfixed to a warning about an invalid type.
	  // For example, "undefined" or "of type array"
	  function getPostfixForTypeWarning(value) {
	    var type = getPreciseType(value);
	    switch (type) {
	      case 'array':
	      case 'object':
	        return 'an ' + type;
	      case 'boolean':
	      case 'date':
	      case 'regexp':
	        return 'a ' + type;
	      default:
	        return type;
	    }
	  }

	  // Returns class name of the object, if any.
	  function getClassName(propValue) {
	    if (!propValue.constructor || !propValue.constructor.name) {
	      return ANONYMOUS;
	    }
	    return propValue.constructor.name;
	  }

	  ReactPropTypes.checkPropTypes = checkPropTypes;
	  ReactPropTypes.resetWarningCache = checkPropTypes.resetWarningCache;
	  ReactPropTypes.PropTypes = ReactPropTypes;

	  return ReactPropTypes;
	};


/***/ }),
/* 339 */
/***/ (function(module, exports) {

	/**
	 * Copyright (c) 2013-present, Facebook, Inc.
	 *
	 * This source code is licensed under the MIT license found in the
	 * LICENSE file in the root directory of this source tree.
	 *
	 */

	'use strict';

	/**
	 * CSS properties which accept numbers but are not in units of "px".
	 */

	var isUnitlessNumber = {
	  animationIterationCount: true,
	  borderImageOutset: true,
	  borderImageSlice: true,
	  borderImageWidth: true,
	  boxFlex: true,
	  boxFlexGroup: true,
	  boxOrdinalGroup: true,
	  columnCount: true,
	  columns: true,
	  flex: true,
	  flexGrow: true,
	  flexPositive: true,
	  flexShrink: true,
	  flexNegative: true,
	  flexOrder: true,
	  gridRow: true,
	  gridRowEnd: true,
	  gridRowSpan: true,
	  gridRowStart: true,
	  gridColumn: true,
	  gridColumnEnd: true,
	  gridColumnSpan: true,
	  gridColumnStart: true,
	  fontWeight: true,
	  lineClamp: true,
	  lineHeight: true,
	  opacity: true,
	  order: true,
	  orphans: true,
	  tabSize: true,
	  widows: true,
	  zIndex: true,
	  zoom: true,

	  // SVG-related properties
	  fillOpacity: true,
	  floodOpacity: true,
	  stopOpacity: true,
	  strokeDasharray: true,
	  strokeDashoffset: true,
	  strokeMiterlimit: true,
	  strokeOpacity: true,
	  strokeWidth: true
	};

	/**
	 * @param {string} prefix vendor-specific prefix, eg: Webkit
	 * @param {string} key style name, eg: transitionDuration
	 * @return {string} style name prefixed with `prefix`, properly camelCased, eg:
	 * WebkitTransitionDuration
	 */
	function prefixKey(prefix, key) {
	  return prefix + key.charAt(0).toUpperCase() + key.substring(1);
	}

	/**
	 * Support style names that may come passed in prefixed by adding permutations
	 * of vendor prefixes.
	 */
	var prefixes = ['Webkit', 'ms', 'Moz', 'O'];

	// Using Object.keys here, or else the vanilla for-in loop makes IE8 go into an
	// infinite loop, because it iterates over the newly added props too.
	Object.keys(isUnitlessNumber).forEach(function (prop) {
	  prefixes.forEach(function (prefix) {
	    isUnitlessNumber[prefixKey(prefix, prop)] = isUnitlessNumber[prop];
	  });
	});

	/**
	 * Most style properties can be unset by doing .style[prop] = '' but IE8
	 * doesn't like doing that with shorthand properties so for the properties that
	 * IE8 breaks on, which are listed here, we instead unset each of the
	 * individual properties. See http://bugs.jquery.com/ticket/12385.
	 * The 4-value 'clock' properties like margin, padding, border-width seem to
	 * behave without any problems. Curiously, list-style works too without any
	 * special prodding.
	 */
	var shorthandPropertyExpansions = {
	  background: {
	    backgroundAttachment: true,
	    backgroundColor: true,
	    backgroundImage: true,
	    backgroundPositionX: true,
	    backgroundPositionY: true,
	    backgroundRepeat: true
	  },
	  backgroundPosition: {
	    backgroundPositionX: true,
	    backgroundPositionY: true
	  },
	  border: {
	    borderWidth: true,
	    borderStyle: true,
	    borderColor: true
	  },
	  borderBottom: {
	    borderBottomWidth: true,
	    borderBottomStyle: true,
	    borderBottomColor: true
	  },
	  borderLeft: {
	    borderLeftWidth: true,
	    borderLeftStyle: true,
	    borderLeftColor: true
	  },
	  borderRight: {
	    borderRightWidth: true,
	    borderRightStyle: true,
	    borderRightColor: true
	  },
	  borderTop: {
	    borderTopWidth: true,
	    borderTopStyle: true,
	    borderTopColor: true
	  },
	  font: {
	    fontStyle: true,
	    fontVariant: true,
	    fontWeight: true,
	    fontSize: true,
	    lineHeight: true,
	    fontFamily: true
	  },
	  outline: {
	    outlineWidth: true,
	    outlineStyle: true,
	    outlineColor: true
	  }
	};

	var CSSProperty = {
	  isUnitlessNumber: isUnitlessNumber,
	  shorthandPropertyExpansions: shorthandPropertyExpansions
	};

	module.exports = CSSProperty;

/***/ }),
/* 340 */
/***/ (function(module, exports, __webpack_require__) {

	/**
	 * Copyright (c) 2013-present, Facebook, Inc.
	 *
	 * This source code is licensed under the MIT license found in the
	 * LICENSE file in the root directory of this source tree.
	 *
	 * 
	 */

	'use strict';

	var _prodInvariant = __webpack_require__(13);

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

	var PooledClass = __webpack_require__(83);

	var invariant = __webpack_require__(7);

	/**
	 * A specialized pseudo-event module to help keep track of components waiting to
	 * be notified when their DOM representations are available for use.
	 *
	 * This implements `PooledClass`, so you should never need to instantiate this.
	 * Instead, use `CallbackQueue.getPooled()`.
	 *
	 * @class ReactMountReady
	 * @implements PooledClass
	 * @internal
	 */

	var CallbackQueue = function () {
	  function CallbackQueue(arg) {
	    _classCallCheck(this, CallbackQueue);

	    this._callbacks = null;
	    this._contexts = null;
	    this._arg = arg;
	  }

	  /**
	   * Enqueues a callback to be invoked when `notifyAll` is invoked.
	   *
	   * @param {function} callback Invoked when `notifyAll` is invoked.
	   * @param {?object} context Context to call `callback` with.
	   * @internal
	   */


	  CallbackQueue.prototype.enqueue = function enqueue(callback, context) {
	    this._callbacks = this._callbacks || [];
	    this._callbacks.push(callback);
	    this._contexts = this._contexts || [];
	    this._contexts.push(context);
	  };

	  /**
	   * Invokes all enqueued callbacks and clears the queue. This is invoked after
	   * the DOM representation of a component has been created or updated.
	   *
	   * @internal
	   */


	  CallbackQueue.prototype.notifyAll = function notifyAll() {
	    var callbacks = this._callbacks;
	    var contexts = this._contexts;
	    var arg = this._arg;
	    if (callbacks && contexts) {
	      !(callbacks.length === contexts.length) ? (undefined) !== 'production' ? invariant(false, 'Mismatched list of contexts in callback queue') : _prodInvariant('24') : void 0;
	      this._callbacks = null;
	      this._contexts = null;
	      for (var i = 0; i < callbacks.length; i++) {
	        callbacks[i].call(contexts[i], arg);
	      }
	      callbacks.length = 0;
	      contexts.length = 0;
	    }
	  };

	  CallbackQueue.prototype.checkpoint = function checkpoint() {
	    return this._callbacks ? this._callbacks.length : 0;
	  };

	  CallbackQueue.prototype.rollback = function rollback(len) {
	    if (this._callbacks && this._contexts) {
	      this._callbacks.length = len;
	      this._contexts.length = len;
	    }
	  };

	  /**
	   * Resets the internal queue.
	   *
	   * @internal
	   */


	  CallbackQueue.prototype.reset = function reset() {
	    this._callbacks = null;
	    this._contexts = null;
	  };

	  /**
	   * `PooledClass` looks for this.
	   */


	  CallbackQueue.prototype.destructor = function destructor() {
	    this.reset();
	  };

	  return CallbackQueue;
	}();

	module.exports = PooledClass.addPoolingTo(CallbackQueue);

/***/ }),
/* 341 */
/***/ (function(module, exports, __webpack_require__) {

	/**
	 * Copyright (c) 2013-present, Facebook, Inc.
	 *
	 * This source code is licensed under the MIT license found in the
	 * LICENSE file in the root directory of this source tree.
	 *
	 */

	'use strict';

	var DOMProperty = __webpack_require__(65);
	var ReactDOMComponentTree = __webpack_require__(21);
	var ReactInstrumentation = __webpack_require__(40);

	var quoteAttributeValueForBrowser = __webpack_require__(870);
	var warning = __webpack_require__(8);

	var VALID_ATTRIBUTE_NAME_REGEX = new RegExp('^[' + DOMProperty.ATTRIBUTE_NAME_START_CHAR + '][' + DOMProperty.ATTRIBUTE_NAME_CHAR + ']*$');
	var illegalAttributeNameCache = {};
	var validatedAttributeNameCache = {};

	function isAttributeNameSafe(attributeName) {
	  if (validatedAttributeNameCache.hasOwnProperty(attributeName)) {
	    return true;
	  }
	  if (illegalAttributeNameCache.hasOwnProperty(attributeName)) {
	    return false;
	  }
	  if (VALID_ATTRIBUTE_NAME_REGEX.test(attributeName)) {
	    validatedAttributeNameCache[attributeName] = true;
	    return true;
	  }
	  illegalAttributeNameCache[attributeName] = true;
	  (undefined) !== 'production' ? warning(false, 'Invalid attribute name: `%s`', attributeName) : void 0;
	  return false;
	}

	function shouldIgnoreValue(propertyInfo, value) {
	  return value == null || propertyInfo.hasBooleanValue && !value || propertyInfo.hasNumericValue && isNaN(value) || propertyInfo.hasPositiveNumericValue && value < 1 || propertyInfo.hasOverloadedBooleanValue && value === false;
	}

	/**
	 * Operations for dealing with DOM properties.
	 */
	var DOMPropertyOperations = {
	  /**
	   * Creates markup for the ID property.
	   *
	   * @param {string} id Unescaped ID.
	   * @return {string} Markup string.
	   */
	  createMarkupForID: function (id) {
	    return DOMProperty.ID_ATTRIBUTE_NAME + '=' + quoteAttributeValueForBrowser(id);
	  },

	  setAttributeForID: function (node, id) {
	    node.setAttribute(DOMProperty.ID_ATTRIBUTE_NAME, id);
	  },

	  createMarkupForRoot: function () {
	    return DOMProperty.ROOT_ATTRIBUTE_NAME + '=""';
	  },

	  setAttributeForRoot: function (node) {
	    node.setAttribute(DOMProperty.ROOT_ATTRIBUTE_NAME, '');
	  },

	  /**
	   * Creates markup for a property.
	   *
	   * @param {string} name
	   * @param {*} value
	   * @return {?string} Markup string, or null if the property was invalid.
	   */
	  createMarkupForProperty: function (name, value) {
	    var propertyInfo = DOMProperty.properties.hasOwnProperty(name) ? DOMProperty.properties[name] : null;
	    if (propertyInfo) {
	      if (shouldIgnoreValue(propertyInfo, value)) {
	        return '';
	      }
	      var attributeName = propertyInfo.attributeName;
	      if (propertyInfo.hasBooleanValue || propertyInfo.hasOverloadedBooleanValue && value === true) {
	        return attributeName + '=""';
	      }
	      return attributeName + '=' + quoteAttributeValueForBrowser(value);
	    } else if (DOMProperty.isCustomAttribute(name)) {
	      if (value == null) {
	        return '';
	      }
	      return name + '=' + quoteAttributeValueForBrowser(value);
	    }
	    return null;
	  },

	  /**
	   * Creates markup for a custom property.
	   *
	   * @param {string} name
	   * @param {*} value
	   * @return {string} Markup string, or empty string if the property was invalid.
	   */
	  createMarkupForCustomAttribute: function (name, value) {
	    if (!isAttributeNameSafe(name) || value == null) {
	      return '';
	    }
	    return name + '=' + quoteAttributeValueForBrowser(value);
	  },

	  /**
	   * Sets the value for a property on a node.
	   *
	   * @param {DOMElement} node
	   * @param {string} name
	   * @param {*} value
	   */
	  setValueForProperty: function (node, name, value) {
	    var propertyInfo = DOMProperty.properties.hasOwnProperty(name) ? DOMProperty.properties[name] : null;
	    if (propertyInfo) {
	      var mutationMethod = propertyInfo.mutationMethod;
	      if (mutationMethod) {
	        mutationMethod(node, value);
	      } else if (shouldIgnoreValue(propertyInfo, value)) {
	        this.deleteValueForProperty(node, name);
	        return;
	      } else if (propertyInfo.mustUseProperty) {
	        // Contrary to `setAttribute`, object properties are properly
	        // `toString`ed by IE8/9.
	        node[propertyInfo.propertyName] = value;
	      } else {
	        var attributeName = propertyInfo.attributeName;
	        var namespace = propertyInfo.attributeNamespace;
	        // `setAttribute` with objects becomes only `[object]` in IE8/9,
	        // ('' + value) makes it output the correct toString()-value.
	        if (namespace) {
	          node.setAttributeNS(namespace, attributeName, '' + value);
	        } else if (propertyInfo.hasBooleanValue || propertyInfo.hasOverloadedBooleanValue && value === true) {
	          node.setAttribute(attributeName, '');
	        } else {
	          node.setAttribute(attributeName, '' + value);
	        }
	      }
	    } else if (DOMProperty.isCustomAttribute(name)) {
	      DOMPropertyOperations.setValueForAttribute(node, name, value);
	      return;
	    }

	    if ((undefined) !== 'production') {
	      var payload = {};
	      payload[name] = value;
	      ReactInstrumentation.debugTool.onHostOperation({
	        instanceID: ReactDOMComponentTree.getInstanceFromNode(node)._debugID,
	        type: 'update attribute',
	        payload: payload
	      });
	    }
	  },

	  setValueForAttribute: function (node, name, value) {
	    if (!isAttributeNameSafe(name)) {
	      return;
	    }
	    if (value == null) {
	      node.removeAttribute(name);
	    } else {
	      node.setAttribute(name, '' + value);
	    }

	    if ((undefined) !== 'production') {
	      var payload = {};
	      payload[name] = value;
	      ReactInstrumentation.debugTool.onHostOperation({
	        instanceID: ReactDOMComponentTree.getInstanceFromNode(node)._debugID,
	        type: 'update attribute',
	        payload: payload
	      });
	    }
	  },

	  /**
	   * Deletes an attributes from a node.
	   *
	   * @param {DOMElement} node
	   * @param {string} name
	   */
	  deleteValueForAttribute: function (node, name) {
	    node.removeAttribute(name);
	    if ((undefined) !== 'production') {
	      ReactInstrumentation.debugTool.onHostOperation({
	        instanceID: ReactDOMComponentTree.getInstanceFromNode(node)._debugID,
	        type: 'remove attribute',
	        payload: name
	      });
	    }
	  },

	  /**
	   * Deletes the value for a property on a node.
	   *
	   * @param {DOMElement} node
	   * @param {string} name
	   */
	  deleteValueForProperty: function (node, name) {
	    var propertyInfo = DOMProperty.properties.hasOwnProperty(name) ? DOMProperty.properties[name] : null;
	    if (propertyInfo) {
	      var mutationMethod = propertyInfo.mutationMethod;
	      if (mutationMethod) {
	        mutationMethod(node, undefined);
	      } else if (propertyInfo.mustUseProperty) {
	        var propName = propertyInfo.propertyName;
	        if (propertyInfo.hasBooleanValue) {
	          node[propName] = false;
	        } else {
	          node[propName] = '';
	        }
	      } else {
	        node.removeAttribute(propertyInfo.attributeName);
	      }
	    } else if (DOMProperty.isCustomAttribute(name)) {
	      node.removeAttribute(name);
	    }

	    if ((undefined) !== 'production') {
	      ReactInstrumentation.debugTool.onHostOperation({
	        instanceID: ReactDOMComponentTree.getInstanceFromNode(node)._debugID,
	        type: 'remove attribute',
	        payload: name
	      });
	    }
	  }
	};

	module.exports = DOMPropertyOperations;

/***/ }),
/* 342 */
/***/ (function(module, exports) {

	/**
	 * Copyright (c) 2015-present, Facebook, Inc.
	 *
	 * This source code is licensed under the MIT license found in the
	 * LICENSE file in the root directory of this source tree.
	 *
	 */

	'use strict';

	var ReactDOMComponentFlags = {
	  hasCachedChildNodes: 1 << 0
	};

	module.exports = ReactDOMComponentFlags;

/***/ }),
/* 343 */
/***/ (function(module, exports, __webpack_require__) {

	/**
	 * Copyright (c) 2013-present, Facebook, Inc.
	 *
	 * This source code is licensed under the MIT license found in the
	 * LICENSE file in the root directory of this source tree.
	 *
	 */

	'use strict';

	var _assign = __webpack_require__(19);

	var LinkedValueUtils = __webpack_require__(218);
	var ReactDOMComponentTree = __webpack_require__(21);
	var ReactUpdates = __webpack_require__(55);

	var warning = __webpack_require__(8);

	var didWarnValueLink = false;
	var didWarnValueDefaultValue = false;

	function updateOptionsIfPendingUpdateAndMounted() {
	  if (this._rootNodeID && this._wrapperState.pendingUpdate) {
	    this._wrapperState.pendingUpdate = false;

	    var props = this._currentElement.props;
	    var value = LinkedValueUtils.getValue(props);

	    if (value != null) {
	      updateOptions(this, Boolean(props.multiple), value);
	    }
	  }
	}

	function getDeclarationErrorAddendum(owner) {
	  if (owner) {
	    var name = owner.getName();
	    if (name) {
	      return ' Check the render method of `' + name + '`.';
	    }
	  }
	  return '';
	}

	var valuePropNames = ['value', 'defaultValue'];

	/**
	 * Validation function for `value` and `defaultValue`.
	 * @private
	 */
	function checkSelectPropTypes(inst, props) {
	  var owner = inst._currentElement._owner;
	  LinkedValueUtils.checkPropTypes('select', props, owner);

	  if (props.valueLink !== undefined && !didWarnValueLink) {
	    (undefined) !== 'production' ? warning(false, '`valueLink` prop on `select` is deprecated; set `value` and `onChange` instead.') : void 0;
	    didWarnValueLink = true;
	  }

	  for (var i = 0; i < valuePropNames.length; i++) {
	    var propName = valuePropNames[i];
	    if (props[propName] == null) {
	      continue;
	    }
	    var isArray = Array.isArray(props[propName]);
	    if (props.multiple && !isArray) {
	      (undefined) !== 'production' ? warning(false, 'The `%s` prop supplied to <select> must be an array if ' + '`multiple` is true.%s', propName, getDeclarationErrorAddendum(owner)) : void 0;
	    } else if (!props.multiple && isArray) {
	      (undefined) !== 'production' ? warning(false, 'The `%s` prop supplied to <select> must be a scalar ' + 'value if `multiple` is false.%s', propName, getDeclarationErrorAddendum(owner)) : void 0;
	    }
	  }
	}

	/**
	 * @param {ReactDOMComponent} inst
	 * @param {boolean} multiple
	 * @param {*} propValue A stringable (with `multiple`, a list of stringables).
	 * @private
	 */
	function updateOptions(inst, multiple, propValue) {
	  var selectedValue, i;
	  var options = ReactDOMComponentTree.getNodeFromInstance(inst).options;

	  if (multiple) {
	    selectedValue = {};
	    for (i = 0; i < propValue.length; i++) {
	      selectedValue['' + propValue[i]] = true;
	    }
	    for (i = 0; i < options.length; i++) {
	      var selected = selectedValue.hasOwnProperty(options[i].value);
	      if (options[i].selected !== selected) {
	        options[i].selected = selected;
	      }
	    }
	  } else {
	    // Do not set `select.value` as exact behavior isn't consistent across all
	    // browsers for all cases.
	    selectedValue = '' + propValue;
	    for (i = 0; i < options.length; i++) {
	      if (options[i].value === selectedValue) {
	        options[i].selected = true;
	        return;
	      }
	    }
	    if (options.length) {
	      options[0].selected = true;
	    }
	  }
	}

	/**
	 * Implements a <select> host component that allows optionally setting the
	 * props `value` and `defaultValue`. If `multiple` is false, the prop must be a
	 * stringable. If `multiple` is true, the prop must be an array of stringables.
	 *
	 * If `value` is not supplied (or null/undefined), user actions that change the
	 * selected option will trigger updates to the rendered options.
	 *
	 * If it is supplied (and not null/undefined), the rendered options will not
	 * update in response to user actions. Instead, the `value` prop must change in
	 * order for the rendered options to update.
	 *
	 * If `defaultValue` is provided, any options with the supplied values will be
	 * selected.
	 */
	var ReactDOMSelect = {
	  getHostProps: function (inst, props) {
	    return _assign({}, props, {
	      onChange: inst._wrapperState.onChange,
	      value: undefined
	    });
	  },

	  mountWrapper: function (inst, props) {
	    if ((undefined) !== 'production') {
	      checkSelectPropTypes(inst, props);
	    }

	    var value = LinkedValueUtils.getValue(props);
	    inst._wrapperState = {
	      pendingUpdate: false,
	      initialValue: value != null ? value : props.defaultValue,
	      listeners: null,
	      onChange: _handleChange.bind(inst),
	      wasMultiple: Boolean(props.multiple)
	    };

	    if (props.value !== undefined && props.defaultValue !== undefined && !didWarnValueDefaultValue) {
	      (undefined) !== 'production' ? warning(false, 'Select elements must be either controlled or uncontrolled ' + '(specify either the value prop, or the defaultValue prop, but not ' + 'both). Decide between using a controlled or uncontrolled select ' + 'element and remove one of these props. More info: ' + 'https://fb.me/react-controlled-components') : void 0;
	      didWarnValueDefaultValue = true;
	    }
	  },

	  getSelectValueContext: function (inst) {
	    // ReactDOMOption looks at this initial value so the initial generated
	    // markup has correct `selected` attributes
	    return inst._wrapperState.initialValue;
	  },

	  postUpdateWrapper: function (inst) {
	    var props = inst._currentElement.props;

	    // After the initial mount, we control selected-ness manually so don't pass
	    // this value down
	    inst._wrapperState.initialValue = undefined;

	    var wasMultiple = inst._wrapperState.wasMultiple;
	    inst._wrapperState.wasMultiple = Boolean(props.multiple);

	    var value = LinkedValueUtils.getValue(props);
	    if (value != null) {
	      inst._wrapperState.pendingUpdate = false;
	      updateOptions(inst, Boolean(props.multiple), value);
	    } else if (wasMultiple !== Boolean(props.multiple)) {
	      // For simplicity, reapply `defaultValue` if `multiple` is toggled.
	      if (props.defaultValue != null) {
	        updateOptions(inst, Boolean(props.multiple), props.defaultValue);
	      } else {
	        // Revert the select back to its default unselected state.
	        updateOptions(inst, Boolean(props.multiple), props.multiple ? [] : '');
	      }
	    }
	  }
	};

	function _handleChange(event) {
	  var props = this._currentElement.props;
	  var returnValue = LinkedValueUtils.executeOnChange(props, event);

	  if (this._rootNodeID) {
	    this._wrapperState.pendingUpdate = true;
	  }
	  ReactUpdates.asap(updateOptionsIfPendingUpdateAndMounted, this);
	  return returnValue;
	}

	module.exports = ReactDOMSelect;

/***/ }),
/* 344 */
/***/ (function(module, exports) {

	/**
	 * Copyright (c) 2014-present, Facebook, Inc.
	 *
	 * This source code is licensed under the MIT license found in the
	 * LICENSE file in the root directory of this source tree.
	 *
	 */

	'use strict';

	var emptyComponentFactory;

	var ReactEmptyComponentInjection = {
	  injectEmptyComponentFactory: function (factory) {
	    emptyComponentFactory = factory;
	  }
	};

	var ReactEmptyComponent = {
	  create: function (instantiate) {
	    return emptyComponentFactory(instantiate);
	  }
	};

	ReactEmptyComponent.injection = ReactEmptyComponentInjection;

	module.exports = ReactEmptyComponent;

/***/ }),
/* 345 */
/***/ (function(module, exports) {

	/**
	 * Copyright (c) 2013-present, Facebook, Inc.
	 *
	 * This source code is licensed under the MIT license found in the
	 * LICENSE file in the root directory of this source tree.
	 *
	 * 
	 */

	'use strict';

	var ReactFeatureFlags = {
	  // When true, call console.time() before and .timeEnd() after each top-level
	  // render (both initial renders and updates). Useful when looking at prod-mode
	  // timeline profiles in Chrome, for example.
	  logTopLevelRenders: false
	};

	module.exports = ReactFeatureFlags;

/***/ }),
/* 346 */
/***/ (function(module, exports, __webpack_require__) {

	/**
	 * Copyright (c) 2014-present, Facebook, Inc.
	 *
	 * This source code is licensed under the MIT license found in the
	 * LICENSE file in the root directory of this source tree.
	 *
	 */

	'use strict';

	var _prodInvariant = __webpack_require__(13);

	var invariant = __webpack_require__(7);

	var genericComponentClass = null;
	var textComponentClass = null;

	var ReactHostComponentInjection = {
	  // This accepts a class that receives the tag string. This is a catch all
	  // that can render any kind of tag.
	  injectGenericComponentClass: function (componentClass) {
	    genericComponentClass = componentClass;
	  },
	  // This accepts a text component class that takes the text string to be
	  // rendered as props.
	  injectTextComponentClass: function (componentClass) {
	    textComponentClass = componentClass;
	  }
	};

	/**
	 * Get a host internal component class for a specific tag.
	 *
	 * @param {ReactElement} element The element to create.
	 * @return {function} The internal class constructor function.
	 */
	function createInternalComponent(element) {
	  !genericComponentClass ? (undefined) !== 'production' ? invariant(false, 'There is no registered component for the tag %s', element.type) : _prodInvariant('111', element.type) : void 0;
	  return new genericComponentClass(element);
	}

	/**
	 * @param {ReactText} text
	 * @return {ReactComponent}
	 */
	function createInstanceForText(text) {
	  return new textComponentClass(text);
	}

	/**
	 * @param {ReactComponent} component
	 * @return {boolean}
	 */
	function isTextComponent(component) {
	  return component instanceof textComponentClass;
	}

	var ReactHostComponent = {
	  createInternalComponent: createInternalComponent,
	  createInstanceForText: createInstanceForText,
	  isTextComponent: isTextComponent,
	  injection: ReactHostComponentInjection
	};

	module.exports = ReactHostComponent;

/***/ }),
/* 347 */
/***/ (function(module, exports, __webpack_require__) {

	/**
	 * Copyright (c) 2013-present, Facebook, Inc.
	 *
	 * This source code is licensed under the MIT license found in the
	 * LICENSE file in the root directory of this source tree.
	 *
	 */

	'use strict';

	var ReactDOMSelection = __webpack_require__(825);

	var containsNode = __webpack_require__(772);
	var focusNode = __webpack_require__(324);
	var getActiveElement = __webpack_require__(325);

	function isInDocument(node) {
	  return containsNode(document.documentElement, node);
	}

	/**
	 * @ReactInputSelection: React input selection module. Based on Selection.js,
	 * but modified to be suitable for react and has a couple of bug fixes (doesn't
	 * assume buttons have range selections allowed).
	 * Input selection module for React.
	 */
	var ReactInputSelection = {
	  hasSelectionCapabilities: function (elem) {
	    var nodeName = elem && elem.nodeName && elem.nodeName.toLowerCase();
	    return nodeName && (nodeName === 'input' && elem.type === 'text' || nodeName === 'textarea' || elem.contentEditable === 'true');
	  },

	  getSelectionInformation: function () {
	    var focusedElem = getActiveElement();
	    return {
	      focusedElem: focusedElem,
	      selectionRange: ReactInputSelection.hasSelectionCapabilities(focusedElem) ? ReactInputSelection.getSelection(focusedElem) : null
	    };
	  },

	  /**
	   * @restoreSelection: If any selection information was potentially lost,
	   * restore it. This is useful when performing operations that could remove dom
	   * nodes and place them back in, resulting in focus being lost.
	   */
	  restoreSelection: function (priorSelectionInformation) {
	    var curFocusedElem = getActiveElement();
	    var priorFocusedElem = priorSelectionInformation.focusedElem;
	    var priorSelectionRange = priorSelectionInformation.selectionRange;
	    if (curFocusedElem !== priorFocusedElem && isInDocument(priorFocusedElem)) {
	      if (ReactInputSelection.hasSelectionCapabilities(priorFocusedElem)) {
	        ReactInputSelection.setSelection(priorFocusedElem, priorSelectionRange);
	      }
	      focusNode(priorFocusedElem);
	    }
	  },

	  /**
	   * @getSelection: Gets the selection bounds of a focused textarea, input or
	   * contentEditable node.
	   * -@input: Look up selection bounds of this input
	   * -@return {start: selectionStart, end: selectionEnd}
	   */
	  getSelection: function (input) {
	    var selection;

	    if ('selectionStart' in input) {
	      // Modern browser with input or textarea.
	      selection = {
	        start: input.selectionStart,
	        end: input.selectionEnd
	      };
	    } else if (document.selection && input.nodeName && input.nodeName.toLowerCase() === 'input') {
	      // IE8 input.
	      var range = document.selection.createRange();
	      // There can only be one selection per document in IE, so it must
	      // be in our element.
	      if (range.parentElement() === input) {
	        selection = {
	          start: -range.moveStart('character', -input.value.length),
	          end: -range.moveEnd('character', -input.value.length)
	        };
	      }
	    } else {
	      // Content editable or old IE textarea.
	      selection = ReactDOMSelection.getOffsets(input);
	    }

	    return selection || { start: 0, end: 0 };
	  },

	  /**
	   * @setSelection: Sets the selection bounds of a textarea or input and focuses
	   * the input.
	   * -@input     Set selection bounds of this input or textarea
	   * -@offsets   Object of same form that is returned from get*
	   */
	  setSelection: function (input, offsets) {
	    var start = offsets.start;
	    var end = offsets.end;
	    if (end === undefined) {
	      end = start;
	    }

	    if ('selectionStart' in input) {
	      input.selectionStart = start;
	      input.selectionEnd = Math.min(end, input.value.length);
	    } else if (document.selection && input.nodeName && input.nodeName.toLowerCase() === 'input') {
	      var range = input.createTextRange();
	      range.collapse(true);
	      range.moveStart('character', start);
	      range.moveEnd('character', end - start);
	      range.select();
	    } else {
	      ReactDOMSelection.setOffsets(input, offsets);
	    }
	  }
	};

	module.exports = ReactInputSelection;

/***/ }),
/* 348 */
/***/ (function(module, exports, __webpack_require__) {

	/**
	 * Copyright (c) 2013-present, Facebook, Inc.
	 *
	 * This source code is licensed under the MIT license found in the
	 * LICENSE file in the root directory of this source tree.
	 *
	 */

	'use strict';

	var _prodInvariant = __webpack_require__(13);

	var DOMLazyTree = __webpack_require__(95);
	var DOMProperty = __webpack_require__(65);
	var React = __webpack_require__(98);
	var ReactBrowserEventEmitter = __webpack_require__(145);
	var ReactCurrentOwner = __webpack_require__(56);
	var ReactDOMComponentTree = __webpack_require__(21);
	var ReactDOMContainerInfo = __webpack_require__(817);
	var ReactDOMFeatureFlags = __webpack_require__(819);
	var ReactFeatureFlags = __webpack_require__(345);
	var ReactInstanceMap = __webpack_require__(114);
	var ReactInstrumentation = __webpack_require__(40);
	var ReactMarkupChecksum = __webpack_require__(839);
	var ReactReconciler = __webpack_require__(96);
	var ReactUpdateQueue = __webpack_require__(221);
	var ReactUpdates = __webpack_require__(55);

	var emptyObject = __webpack_require__(206);
	var instantiateReactComponent = __webpack_require__(357);
	var invariant = __webpack_require__(7);
	var setInnerHTML = __webpack_require__(149);
	var shouldUpdateReactComponent = __webpack_require__(227);
	var warning = __webpack_require__(8);

	var ATTR_NAME = DOMProperty.ID_ATTRIBUTE_NAME;
	var ROOT_ATTR_NAME = DOMProperty.ROOT_ATTRIBUTE_NAME;

	var ELEMENT_NODE_TYPE = 1;
	var DOC_NODE_TYPE = 9;
	var DOCUMENT_FRAGMENT_NODE_TYPE = 11;

	var instancesByReactRootID = {};

	/**
	 * Finds the index of the first character
	 * that's not common between the two given strings.
	 *
	 * @return {number} the index of the character where the strings diverge
	 */
	function firstDifferenceIndex(string1, string2) {
	  var minLen = Math.min(string1.length, string2.length);
	  for (var i = 0; i < minLen; i++) {
	    if (string1.charAt(i) !== string2.charAt(i)) {
	      return i;
	    }
	  }
	  return string1.length === string2.length ? -1 : minLen;
	}

	/**
	 * @param {DOMElement|DOMDocument} container DOM element that may contain
	 * a React component
	 * @return {?*} DOM element that may have the reactRoot ID, or null.
	 */
	function getReactRootElementInContainer(container) {
	  if (!container) {
	    return null;
	  }

	  if (container.nodeType === DOC_NODE_TYPE) {
	    return container.documentElement;
	  } else {
	    return container.firstChild;
	  }
	}

	function internalGetID(node) {
	  // If node is something like a window, document, or text node, none of
	  // which support attributes or a .getAttribute method, gracefully return
	  // the empty string, as if the attribute were missing.
	  return node.getAttribute && node.getAttribute(ATTR_NAME) || '';
	}

	/**
	 * Mounts this component and inserts it into the DOM.
	 *
	 * @param {ReactComponent} componentInstance The instance to mount.
	 * @param {DOMElement} container DOM element to mount into.
	 * @param {ReactReconcileTransaction} transaction
	 * @param {boolean} shouldReuseMarkup If true, do not insert markup
	 */
	function mountComponentIntoNode(wrapperInstance, container, transaction, shouldReuseMarkup, context) {
	  var markerName;
	  if (ReactFeatureFlags.logTopLevelRenders) {
	    var wrappedElement = wrapperInstance._currentElement.props.child;
	    var type = wrappedElement.type;
	    markerName = 'React mount: ' + (typeof type === 'string' ? type : type.displayName || type.name);
	    console.time(markerName);
	  }

	  var markup = ReactReconciler.mountComponent(wrapperInstance, transaction, null, ReactDOMContainerInfo(wrapperInstance, container), context, 0 /* parentDebugID */
	  );

	  if (markerName) {
	    console.timeEnd(markerName);
	  }

	  wrapperInstance._renderedComponent._topLevelWrapper = wrapperInstance;
	  ReactMount._mountImageIntoNode(markup, container, wrapperInstance, shouldReuseMarkup, transaction);
	}

	/**
	 * Batched mount.
	 *
	 * @param {ReactComponent} componentInstance The instance to mount.
	 * @param {DOMElement} container DOM element to mount into.
	 * @param {boolean} shouldReuseMarkup If true, do not insert markup
	 */
	function batchedMountComponentIntoNode(componentInstance, container, shouldReuseMarkup, context) {
	  var transaction = ReactUpdates.ReactReconcileTransaction.getPooled(
	  /* useCreateElement */
	  !shouldReuseMarkup && ReactDOMFeatureFlags.useCreateElement);
	  transaction.perform(mountComponentIntoNode, null, componentInstance, container, transaction, shouldReuseMarkup, context);
	  ReactUpdates.ReactReconcileTransaction.release(transaction);
	}

	/**
	 * Unmounts a component and removes it from the DOM.
	 *
	 * @param {ReactComponent} instance React component instance.
	 * @param {DOMElement} container DOM element to unmount from.
	 * @final
	 * @internal
	 * @see {ReactMount.unmountComponentAtNode}
	 */
	function unmountComponentFromNode(instance, container, safely) {
	  if ((undefined) !== 'production') {
	    ReactInstrumentation.debugTool.onBeginFlush();
	  }
	  ReactReconciler.unmountComponent(instance, safely);
	  if ((undefined) !== 'production') {
	    ReactInstrumentation.debugTool.onEndFlush();
	  }

	  if (container.nodeType === DOC_NODE_TYPE) {
	    container = container.documentElement;
	  }

	  // http://jsperf.com/emptying-a-node
	  while (container.lastChild) {
	    container.removeChild(container.lastChild);
	  }
	}

	/**
	 * True if the supplied DOM node has a direct React-rendered child that is
	 * not a React root element. Useful for warning in `render`,
	 * `unmountComponentAtNode`, etc.
	 *
	 * @param {?DOMElement} node The candidate DOM node.
	 * @return {boolean} True if the DOM element contains a direct child that was
	 * rendered by React but is not a root element.
	 * @internal
	 */
	function hasNonRootReactChild(container) {
	  var rootEl = getReactRootElementInContainer(container);
	  if (rootEl) {
	    var inst = ReactDOMComponentTree.getInstanceFromNode(rootEl);
	    return !!(inst && inst._hostParent);
	  }
	}

	/**
	 * True if the supplied DOM node is a React DOM element and
	 * it has been rendered by another copy of React.
	 *
	 * @param {?DOMElement} node The candidate DOM node.
	 * @return {boolean} True if the DOM has been rendered by another copy of React
	 * @internal
	 */
	function nodeIsRenderedByOtherInstance(container) {
	  var rootEl = getReactRootElementInContainer(container);
	  return !!(rootEl && isReactNode(rootEl) && !ReactDOMComponentTree.getInstanceFromNode(rootEl));
	}

	/**
	 * True if the supplied DOM node is a valid node element.
	 *
	 * @param {?DOMElement} node The candidate DOM node.
	 * @return {boolean} True if the DOM is a valid DOM node.
	 * @internal
	 */
	function isValidContainer(node) {
	  return !!(node && (node.nodeType === ELEMENT_NODE_TYPE || node.nodeType === DOC_NODE_TYPE || node.nodeType === DOCUMENT_FRAGMENT_NODE_TYPE));
	}

	/**
	 * True if the supplied DOM node is a valid React node element.
	 *
	 * @param {?DOMElement} node The candidate DOM node.
	 * @return {boolean} True if the DOM is a valid React DOM node.
	 * @internal
	 */
	function isReactNode(node) {
	  return isValidContainer(node) && (node.hasAttribute(ROOT_ATTR_NAME) || node.hasAttribute(ATTR_NAME));
	}

	function getHostRootInstanceInContainer(container) {
	  var rootEl = getReactRootElementInContainer(container);
	  var prevHostInstance = rootEl && ReactDOMComponentTree.getInstanceFromNode(rootEl);
	  return prevHostInstance && !prevHostInstance._hostParent ? prevHostInstance : null;
	}

	function getTopLevelWrapperInContainer(container) {
	  var root = getHostRootInstanceInContainer(container);
	  return root ? root._hostContainerInfo._topLevelWrapper : null;
	}

	/**
	 * Temporary (?) hack so that we can store all top-level pending updates on
	 * composites instead of having to worry about different types of components
	 * here.
	 */
	var topLevelRootCounter = 1;
	var TopLevelWrapper = function () {
	  this.rootID = topLevelRootCounter++;
	};
	TopLevelWrapper.prototype.isReactComponent = {};
	if ((undefined) !== 'production') {
	  TopLevelWrapper.displayName = 'TopLevelWrapper';
	}
	TopLevelWrapper.prototype.render = function () {
	  return this.props.child;
	};
	TopLevelWrapper.isReactTopLevelWrapper = true;

	/**
	 * Mounting is the process of initializing a React component by creating its
	 * representative DOM elements and inserting them into a supplied `container`.
	 * Any prior content inside `container` is destroyed in the process.
	 *
	 *   ReactMount.render(
	 *     component,
	 *     document.getElementById('container')
	 *   );
	 *
	 *   <div id="container">                   <-- Supplied `container`.
	 *     <div data-reactid=".3">              <-- Rendered reactRoot of React
	 *       // ...                                 component.
	 *     </div>
	 *   </div>
	 *
	 * Inside of `container`, the first element rendered is the "reactRoot".
	 */
	var ReactMount = {
	  TopLevelWrapper: TopLevelWrapper,

	  /**
	   * Used by devtools. The keys are not important.
	   */
	  _instancesByReactRootID: instancesByReactRootID,

	  /**
	   * This is a hook provided to support rendering React components while
	   * ensuring that the apparent scroll position of its `container` does not
	   * change.
	   *
	   * @param {DOMElement} container The `container` being rendered into.
	   * @param {function} renderCallback This must be called once to do the render.
	   */
	  scrollMonitor: function (container, renderCallback) {
	    renderCallback();
	  },

	  /**
	   * Take a component that's already mounted into the DOM and replace its props
	   * @param {ReactComponent} prevComponent component instance already in the DOM
	   * @param {ReactElement} nextElement component instance to render
	   * @param {DOMElement} container container to render into
	   * @param {?function} callback function triggered on completion
	   */
	  _updateRootComponent: function (prevComponent, nextElement, nextContext, container, callback) {
	    ReactMount.scrollMonitor(container, function () {
	      ReactUpdateQueue.enqueueElementInternal(prevComponent, nextElement, nextContext);
	      if (callback) {
	        ReactUpdateQueue.enqueueCallbackInternal(prevComponent, callback);
	      }
	    });

	    return prevComponent;
	  },

	  /**
	   * Render a new component into the DOM. Hooked by hooks!
	   *
	   * @param {ReactElement} nextElement element to render
	   * @param {DOMElement} container container to render into
	   * @param {boolean} shouldReuseMarkup if we should skip the markup insertion
	   * @return {ReactComponent} nextComponent
	   */
	  _renderNewRootComponent: function (nextElement, container, shouldReuseMarkup, context) {
	    // Various parts of our code (such as ReactCompositeComponent's
	    // _renderValidatedComponent) assume that calls to render aren't nested;
	    // verify that that's the case.
	    (undefined) !== 'production' ? warning(ReactCurrentOwner.current == null, '_renderNewRootComponent(): Render methods should be a pure function ' + 'of props and state; triggering nested component updates from ' + 'render is not allowed. If necessary, trigger nested updates in ' + 'componentDidUpdate. Check the render method of %s.', ReactCurrentOwner.current && ReactCurrentOwner.current.getName() || 'ReactCompositeComponent') : void 0;

	    !isValidContainer(container) ? (undefined) !== 'production' ? invariant(false, '_registerComponent(...): Target container is not a DOM element.') : _prodInvariant('37') : void 0;

	    ReactBrowserEventEmitter.ensureScrollValueMonitoring();
	    var componentInstance = instantiateReactComponent(nextElement, false);

	    // The initial render is synchronous but any updates that happen during
	    // rendering, in componentWillMount or componentDidMount, will be batched
	    // according to the current batching strategy.

	    ReactUpdates.batchedUpdates(batchedMountComponentIntoNode, componentInstance, container, shouldReuseMarkup, context);

	    var wrapperID = componentInstance._instance.rootID;
	    instancesByReactRootID[wrapperID] = componentInstance;

	    return componentInstance;
	  },

	  /**
	   * Renders a React component into the DOM in the supplied `container`.
	   *
	   * If the React component was previously rendered into `container`, this will
	   * perform an update on it and only mutate the DOM as necessary to reflect the
	   * latest React component.
	   *
	   * @param {ReactComponent} parentComponent The conceptual parent of this render tree.
	   * @param {ReactElement} nextElement Component element to render.
	   * @param {DOMElement} container DOM element to render into.
	   * @param {?function} callback function triggered on completion
	   * @return {ReactComponent} Component instance rendered in `container`.
	   */
	  renderSubtreeIntoContainer: function (parentComponent, nextElement, container, callback) {
	    !(parentComponent != null && ReactInstanceMap.has(parentComponent)) ? (undefined) !== 'production' ? invariant(false, 'parentComponent must be a valid React Component') : _prodInvariant('38') : void 0;
	    return ReactMount._renderSubtreeIntoContainer(parentComponent, nextElement, container, callback);
	  },

	  _renderSubtreeIntoContainer: function (parentComponent, nextElement, container, callback) {
	    ReactUpdateQueue.validateCallback(callback, 'ReactDOM.render');
	    !React.isValidElement(nextElement) ? (undefined) !== 'production' ? invariant(false, 'ReactDOM.render(): Invalid component element.%s', typeof nextElement === 'string' ? " Instead of passing a string like 'div', pass " + "React.createElement('div') or <div />." : typeof nextElement === 'function' ? ' Instead of passing a class like Foo, pass ' + 'React.createElement(Foo) or <Foo />.' : // Check if it quacks like an element
	    nextElement != null && nextElement.props !== undefined ? ' This may be caused by unintentionally loading two independent ' + 'copies of React.' : '') : _prodInvariant('39', typeof nextElement === 'string' ? " Instead of passing a string like 'div', pass " + "React.createElement('div') or <div />." : typeof nextElement === 'function' ? ' Instead of passing a class like Foo, pass ' + 'React.createElement(Foo) or <Foo />.' : nextElement != null && nextElement.props !== undefined ? ' This may be caused by unintentionally loading two independent ' + 'copies of React.' : '') : void 0;

	    (undefined) !== 'production' ? warning(!container || !container.tagName || container.tagName.toUpperCase() !== 'BODY', 'render(): Rendering components directly into document.body is ' + 'discouraged, since its children are often manipulated by third-party ' + 'scripts and browser extensions. This may lead to subtle ' + 'reconciliation issues. Try rendering into a container element created ' + 'for your app.') : void 0;

	    var nextWrappedElement = React.createElement(TopLevelWrapper, {
	      child: nextElement
	    });

	    var nextContext;
	    if (parentComponent) {
	      var parentInst = ReactInstanceMap.get(parentComponent);
	      nextContext = parentInst._processChildContext(parentInst._context);
	    } else {
	      nextContext = emptyObject;
	    }

	    var prevComponent = getTopLevelWrapperInContainer(container);

	    if (prevComponent) {
	      var prevWrappedElement = prevComponent._currentElement;
	      var prevElement = prevWrappedElement.props.child;
	      if (shouldUpdateReactComponent(prevElement, nextElement)) {
	        var publicInst = prevComponent._renderedComponent.getPublicInstance();
	        var updatedCallback = callback && function () {
	          callback.call(publicInst);
	        };
	        ReactMount._updateRootComponent(prevComponent, nextWrappedElement, nextContext, container, updatedCallback);
	        return publicInst;
	      } else {
	        ReactMount.unmountComponentAtNode(container);
	      }
	    }

	    var reactRootElement = getReactRootElementInContainer(container);
	    var containerHasReactMarkup = reactRootElement && !!internalGetID(reactRootElement);
	    var containerHasNonRootReactChild = hasNonRootReactChild(container);

	    if ((undefined) !== 'production') {
	      (undefined) !== 'production' ? warning(!containerHasNonRootReactChild, 'render(...): Replacing React-rendered children with a new root ' + 'component. If you intended to update the children of this node, ' + 'you should instead have the existing children update their state ' + 'and render the new components instead of calling ReactDOM.render.') : void 0;

	      if (!containerHasReactMarkup || reactRootElement.nextSibling) {
	        var rootElementSibling = reactRootElement;
	        while (rootElementSibling) {
	          if (internalGetID(rootElementSibling)) {
	            (undefined) !== 'production' ? warning(false, 'render(): Target node has markup rendered by React, but there ' + 'are unrelated nodes as well. This is most commonly caused by ' + 'white-space inserted around server-rendered markup.') : void 0;
	            break;
	          }
	          rootElementSibling = rootElementSibling.nextSibling;
	        }
	      }
	    }

	    var shouldReuseMarkup = containerHasReactMarkup && !prevComponent && !containerHasNonRootReactChild;
	    var component = ReactMount._renderNewRootComponent(nextWrappedElement, container, shouldReuseMarkup, nextContext)._renderedComponent.getPublicInstance();
	    if (callback) {
	      callback.call(component);
	    }
	    return component;
	  },

	  /**
	   * Renders a React component into the DOM in the supplied `container`.
	   * See https://facebook.github.io/react/docs/top-level-api.html#reactdom.render
	   *
	   * If the React component was previously rendered into `container`, this will
	   * perform an update on it and only mutate the DOM as necessary to reflect the
	   * latest React component.
	   *
	   * @param {ReactElement} nextElement Component element to render.
	   * @param {DOMElement} container DOM element to render into.
	   * @param {?function} callback function triggered on completion
	   * @return {ReactComponent} Component instance rendered in `container`.
	   */
	  render: function (nextElement, container, callback) {
	    return ReactMount._renderSubtreeIntoContainer(null, nextElement, container, callback);
	  },

	  /**
	   * Unmounts and destroys the React component rendered in the `container`.
	   * See https://facebook.github.io/react/docs/top-level-api.html#reactdom.unmountcomponentatnode
	   *
	   * @param {DOMElement} container DOM element containing a React component.
	   * @return {boolean} True if a component was found in and unmounted from
	   *                   `container`
	   */
	  unmountComponentAtNode: function (container) {
	    // Various parts of our code (such as ReactCompositeComponent's
	    // _renderValidatedComponent) assume that calls to render aren't nested;
	    // verify that that's the case. (Strictly speaking, unmounting won't cause a
	    // render but we still don't expect to be in a render call here.)
	    (undefined) !== 'production' ? warning(ReactCurrentOwner.current == null, 'unmountComponentAtNode(): Render methods should be a pure function ' + 'of props and state; triggering nested component updates from render ' + 'is not allowed. If necessary, trigger nested updates in ' + 'componentDidUpdate. Check the render method of %s.', ReactCurrentOwner.current && ReactCurrentOwner.current.getName() || 'ReactCompositeComponent') : void 0;

	    !isValidContainer(container) ? (undefined) !== 'production' ? invariant(false, 'unmountComponentAtNode(...): Target container is not a DOM element.') : _prodInvariant('40') : void 0;

	    if ((undefined) !== 'production') {
	      (undefined) !== 'production' ? warning(!nodeIsRenderedByOtherInstance(container), "unmountComponentAtNode(): The node you're attempting to unmount " + 'was rendered by another copy of React.') : void 0;
	    }

	    var prevComponent = getTopLevelWrapperInContainer(container);
	    if (!prevComponent) {
	      // Check if the node being unmounted was rendered by React, but isn't a
	      // root node.
	      var containerHasNonRootReactChild = hasNonRootReactChild(container);

	      // Check if the container itself is a React root node.
	      var isContainerReactRoot = container.nodeType === 1 && container.hasAttribute(ROOT_ATTR_NAME);

	      if ((undefined) !== 'production') {
	        (undefined) !== 'production' ? warning(!containerHasNonRootReactChild, "unmountComponentAtNode(): The node you're attempting to unmount " + 'was rendered by React and is not a top-level container. %s', isContainerReactRoot ? 'You may have accidentally passed in a React root node instead ' + 'of its container.' : 'Instead, have the parent component update its state and ' + 'rerender in order to remove this component.') : void 0;
	      }

	      return false;
	    }
	    delete instancesByReactRootID[prevComponent._instance.rootID];
	    ReactUpdates.batchedUpdates(unmountComponentFromNode, prevComponent, container, false);
	    return true;
	  },

	  _mountImageIntoNode: function (markup, container, instance, shouldReuseMarkup, transaction) {
	    !isValidContainer(container) ? (undefined) !== 'production' ? invariant(false, 'mountComponentIntoNode(...): Target container is not valid.') : _prodInvariant('41') : void 0;

	    if (shouldReuseMarkup) {
	      var rootElement = getReactRootElementInContainer(container);
	      if (ReactMarkupChecksum.canReuseMarkup(markup, rootElement)) {
	        ReactDOMComponentTree.precacheNode(instance, rootElement);
	        return;
	      } else {
	        var checksum = rootElement.getAttribute(ReactMarkupChecksum.CHECKSUM_ATTR_NAME);
	        rootElement.removeAttribute(ReactMarkupChecksum.CHECKSUM_ATTR_NAME);

	        var rootMarkup = rootElement.outerHTML;
	        rootElement.setAttribute(ReactMarkupChecksum.CHECKSUM_ATTR_NAME, checksum);

	        var normalizedMarkup = markup;
	        if ((undefined) !== 'production') {
	          // because rootMarkup is retrieved from the DOM, various normalizations
	          // will have occurred which will not be present in `markup`. Here,
	          // insert markup into a <div> or <iframe> depending on the container
	          // type to perform the same normalizations before comparing.
	          var normalizer;
	          if (container.nodeType === ELEMENT_NODE_TYPE) {
	            normalizer = document.createElement('div');
	            normalizer.innerHTML = markup;
	            normalizedMarkup = normalizer.innerHTML;
	          } else {
	            normalizer = document.createElement('iframe');
	            document.body.appendChild(normalizer);
	            normalizer.contentDocument.write(markup);
	            normalizedMarkup = normalizer.contentDocument.documentElement.outerHTML;
	            document.body.removeChild(normalizer);
	          }
	        }

	        var diffIndex = firstDifferenceIndex(normalizedMarkup, rootMarkup);
	        var difference = ' (client) ' + normalizedMarkup.substring(diffIndex - 20, diffIndex + 20) + '\n (server) ' + rootMarkup.substring(diffIndex - 20, diffIndex + 20);

	        !(container.nodeType !== DOC_NODE_TYPE) ? (undefined) !== 'production' ? invariant(false, 'You\'re trying to render a component to the document using server rendering but the checksum was invalid. This usually means you rendered a different component type or props on the client from the one on the server, or your render() methods are impure. React cannot handle this case due to cross-browser quirks by rendering at the document root. You should look for environment dependent code in your components and ensure the props are the same client and server side:\n%s', difference) : _prodInvariant('42', difference) : void 0;

	        if ((undefined) !== 'production') {
	          (undefined) !== 'production' ? warning(false, 'React attempted to reuse markup in a container but the ' + 'checksum was invalid. This generally means that you are ' + 'using server rendering and the markup generated on the ' + 'server was not what the client was expecting. React injected ' + 'new markup to compensate which works but you have lost many ' + 'of the benefits of server rendering. Instead, figure out ' + 'why the markup being generated is different on the client ' + 'or server:\n%s', difference) : void 0;
	        }
	      }
	    }

	    !(container.nodeType !== DOC_NODE_TYPE) ? (undefined) !== 'production' ? invariant(false, 'You\'re trying to render a component to the document but you didn\'t use server rendering. We can\'t do this without using server rendering due to cross-browser quirks. See ReactDOMServer.renderToString() for server rendering.') : _prodInvariant('43') : void 0;

	    if (transaction.useCreateElement) {
	      while (container.lastChild) {
	        container.removeChild(container.lastChild);
	      }
	      DOMLazyTree.insertTreeBefore(container, markup, null);
	    } else {
	      setInnerHTML(container, markup);
	      ReactDOMComponentTree.precacheNode(instance, container.firstChild);
	    }

	    if ((undefined) !== 'production') {
	      var hostNode = ReactDOMComponentTree.getInstanceFromNode(container.firstChild);
	      if (hostNode._debugID !== 0) {
	        ReactInstrumentation.debugTool.onHostOperation({
	          instanceID: hostNode._debugID,
	          type: 'mount',
	          payload: markup.toString()
	        });
	      }
	    }
	  }
	};

	module.exports = ReactMount;

/***/ }),
/* 349 */
/***/ (function(module, exports, __webpack_require__) {

	/**
	 * Copyright (c) 2013-present, Facebook, Inc.
	 *
	 * This source code is licensed under the MIT license found in the
	 * LICENSE file in the root directory of this source tree.
	 *
	 * 
	 */

	'use strict';

	var _prodInvariant = __webpack_require__(13);

	var React = __webpack_require__(98);

	var invariant = __webpack_require__(7);

	var ReactNodeTypes = {
	  HOST: 0,
	  COMPOSITE: 1,
	  EMPTY: 2,

	  getType: function (node) {
	    if (node === null || node === false) {
	      return ReactNodeTypes.EMPTY;
	    } else if (React.isValidElement(node)) {
	      if (typeof node.type === 'function') {
	        return ReactNodeTypes.COMPOSITE;
	      } else {
	        return ReactNodeTypes.HOST;
	      }
	    }
	     true ? (undefined) !== 'production' ? invariant(false, 'Unexpected node: %s', node) : _prodInvariant('26', node) : void 0;
	  }
	};

	module.exports = ReactNodeTypes;

/***/ }),
/* 350 */
/***/ (function(module, exports) {

	/**
	 * Copyright (c) 2013-present, Facebook, Inc.
	 *
	 * This source code is licensed under the MIT license found in the
	 * LICENSE file in the root directory of this source tree.
	 *
	 * 
	 */

	'use strict';

	var ReactPropTypesSecret = 'SECRET_DO_NOT_PASS_THIS_OR_YOU_WILL_BE_FIRED';

	module.exports = ReactPropTypesSecret;

/***/ }),
/* 351 */
/***/ (function(module, exports) {

	/**
	 * Copyright (c) 2013-present, Facebook, Inc.
	 *
	 * This source code is licensed under the MIT license found in the
	 * LICENSE file in the root directory of this source tree.
	 *
	 */

	'use strict';

	var ViewportMetrics = {
	  currentScrollLeft: 0,

	  currentScrollTop: 0,

	  refreshScrollValues: function (scrollPosition) {
	    ViewportMetrics.currentScrollLeft = scrollPosition.x;
	    ViewportMetrics.currentScrollTop = scrollPosition.y;
	  }
	};

	module.exports = ViewportMetrics;

/***/ }),
/* 352 */
/***/ (function(module, exports, __webpack_require__) {

	/**
	 * Copyright (c) 2014-present, Facebook, Inc.
	 *
	 * This source code is licensed under the MIT license found in the
	 * LICENSE file in the root directory of this source tree.
	 *
	 * 
	 */

	'use strict';

	var _prodInvariant = __webpack_require__(13);

	var invariant = __webpack_require__(7);

	/**
	 * Accumulates items that must not be null or undefined into the first one. This
	 * is used to conserve memory by avoiding array allocations, and thus sacrifices
	 * API cleanness. Since `current` can be null before being passed in and not
	 * null after this function, make sure to assign it back to `current`:
	 *
	 * `a = accumulateInto(a, b);`
	 *
	 * This API should be sparingly used. Try `accumulate` for something cleaner.
	 *
	 * @return {*|array<*>} An accumulation of items.
	 */

	function accumulateInto(current, next) {
	  !(next != null) ? (undefined) !== 'production' ? invariant(false, 'accumulateInto(...): Accumulated items must not be null or undefined.') : _prodInvariant('30') : void 0;

	  if (current == null) {
	    return next;
	  }

	  // Both are not empty. Warning: Never call x.concat(y) when you are not
	  // certain that x is an Array (x could be a string with concat method).
	  if (Array.isArray(current)) {
	    if (Array.isArray(next)) {
	      current.push.apply(current, next);
	      return current;
	    }
	    current.push(next);
	    return current;
	  }

	  if (Array.isArray(next)) {
	    // A bit too dangerous to mutate `next`.
	    return [current].concat(next);
	  }

	  return [current, next];
	}

	module.exports = accumulateInto;

/***/ }),
/* 353 */
/***/ (function(module, exports) {

	/**
	 * Copyright (c) 2013-present, Facebook, Inc.
	 *
	 * This source code is licensed under the MIT license found in the
	 * LICENSE file in the root directory of this source tree.
	 *
	 * 
	 */

	'use strict';

	/**
	 * @param {array} arr an "accumulation" of items which is either an Array or
	 * a single item. Useful when paired with the `accumulate` module. This is a
	 * simple utility that allows us to reason about a collection of items, but
	 * handling the case when there is exactly one item (and we do not need to
	 * allocate an array).
	 */

	function forEachAccumulated(arr, cb, scope) {
	  if (Array.isArray(arr)) {
	    arr.forEach(cb, scope);
	  } else if (arr) {
	    cb.call(scope, arr);
	  }
	}

	module.exports = forEachAccumulated;

/***/ }),
/* 354 */
/***/ (function(module, exports, __webpack_require__) {

	/**
	 * Copyright (c) 2013-present, Facebook, Inc.
	 *
	 * This source code is licensed under the MIT license found in the
	 * LICENSE file in the root directory of this source tree.
	 *
	 */

	'use strict';

	var ReactNodeTypes = __webpack_require__(349);

	function getHostComponentFromComposite(inst) {
	  var type;

	  while ((type = inst._renderedNodeType) === ReactNodeTypes.COMPOSITE) {
	    inst = inst._renderedComponent;
	  }

	  if (type === ReactNodeTypes.HOST) {
	    return inst._renderedComponent;
	  } else if (type === ReactNodeTypes.EMPTY) {
	    return null;
	  }
	}

	module.exports = getHostComponentFromComposite;

/***/ }),
/* 355 */
/***/ (function(module, exports, __webpack_require__) {

	/**
	 * Copyright (c) 2013-present, Facebook, Inc.
	 *
	 * This source code is licensed under the MIT license found in the
	 * LICENSE file in the root directory of this source tree.
	 *
	 */

	'use strict';

	var ExecutionEnvironment = __webpack_require__(24);

	var contentKey = null;

	/**
	 * Gets the key used to access text content on a DOM node.
	 *
	 * @return {?string} Key used to access text content.
	 * @internal
	 */
	function getTextContentAccessor() {
	  if (!contentKey && ExecutionEnvironment.canUseDOM) {
	    // Prefer textContent to innerText because many browsers support both but
	    // SVG <text> elements don't support innerText even when <div> does.
	    contentKey = 'textContent' in document.documentElement ? 'textContent' : 'innerText';
	  }
	  return contentKey;
	}

	module.exports = getTextContentAccessor;

/***/ }),
/* 356 */
/***/ (function(module, exports, __webpack_require__) {

	/**
	 * Copyright (c) 2013-present, Facebook, Inc.
	 *
	 * This source code is licensed under the MIT license found in the
	 * LICENSE file in the root directory of this source tree.
	 *
	 */

	'use strict';

	var ReactDOMComponentTree = __webpack_require__(21);

	function isCheckable(elem) {
	  var type = elem.type;
	  var nodeName = elem.nodeName;
	  return nodeName && nodeName.toLowerCase() === 'input' && (type === 'checkbox' || type === 'radio');
	}

	function getTracker(inst) {
	  return inst._wrapperState.valueTracker;
	}

	function attachTracker(inst, tracker) {
	  inst._wrapperState.valueTracker = tracker;
	}

	function detachTracker(inst) {
	  inst._wrapperState.valueTracker = null;
	}

	function getValueFromNode(node) {
	  var value;
	  if (node) {
	    value = isCheckable(node) ? '' + node.checked : node.value;
	  }
	  return value;
	}

	var inputValueTracking = {
	  // exposed for testing
	  _getTrackerFromNode: function (node) {
	    return getTracker(ReactDOMComponentTree.getInstanceFromNode(node));
	  },


	  track: function (inst) {
	    if (getTracker(inst)) {
	      return;
	    }

	    var node = ReactDOMComponentTree.getNodeFromInstance(inst);
	    var valueField = isCheckable(node) ? 'checked' : 'value';
	    var descriptor = Object.getOwnPropertyDescriptor(node.constructor.prototype, valueField);

	    var currentValue = '' + node[valueField];

	    // if someone has already defined a value or Safari, then bail
	    // and don't track value will cause over reporting of changes,
	    // but it's better then a hard failure
	    // (needed for certain tests that spyOn input values and Safari)
	    if (node.hasOwnProperty(valueField) || typeof descriptor.get !== 'function' || typeof descriptor.set !== 'function') {
	      return;
	    }

	    Object.defineProperty(node, valueField, {
	      enumerable: descriptor.enumerable,
	      configurable: true,
	      get: function () {
	        return descriptor.get.call(this);
	      },
	      set: function (value) {
	        currentValue = '' + value;
	        descriptor.set.call(this, value);
	      }
	    });

	    attachTracker(inst, {
	      getValue: function () {
	        return currentValue;
	      },
	      setValue: function (value) {
	        currentValue = '' + value;
	      },
	      stopTracking: function () {
	        detachTracker(inst);
	        delete node[valueField];
	      }
	    });
	  },

	  updateValueIfChanged: function (inst) {
	    if (!inst) {
	      return false;
	    }
	    var tracker = getTracker(inst);

	    if (!tracker) {
	      inputValueTracking.track(inst);
	      return true;
	    }

	    var lastValue = tracker.getValue();
	    var nextValue = getValueFromNode(ReactDOMComponentTree.getNodeFromInstance(inst));

	    if (nextValue !== lastValue) {
	      tracker.setValue(nextValue);
	      return true;
	    }

	    return false;
	  },
	  stopTracking: function (inst) {
	    var tracker = getTracker(inst);
	    if (tracker) {
	      tracker.stopTracking();
	    }
	  }
	};

	module.exports = inputValueTracking;

/***/ }),
/* 357 */
/***/ (function(module, exports, __webpack_require__) {

	/**
	 * Copyright (c) 2013-present, Facebook, Inc.
	 *
	 * This source code is licensed under the MIT license found in the
	 * LICENSE file in the root directory of this source tree.
	 *
	 */

	'use strict';

	var _prodInvariant = __webpack_require__(13),
	    _assign = __webpack_require__(19);

	var ReactCompositeComponent = __webpack_require__(814);
	var ReactEmptyComponent = __webpack_require__(344);
	var ReactHostComponent = __webpack_require__(346);

	var getNextDebugID = __webpack_require__(918);
	var invariant = __webpack_require__(7);
	var warning = __webpack_require__(8);

	// To avoid a cyclic dependency, we create the final class in this module
	var ReactCompositeComponentWrapper = function (element) {
	  this.construct(element);
	};

	function getDeclarationErrorAddendum(owner) {
	  if (owner) {
	    var name = owner.getName();
	    if (name) {
	      return ' Check the render method of `' + name + '`.';
	    }
	  }
	  return '';
	}

	/**
	 * Check if the type reference is a known internal type. I.e. not a user
	 * provided composite type.
	 *
	 * @param {function} type
	 * @return {boolean} Returns true if this is a valid internal type.
	 */
	function isInternalComponentType(type) {
	  return typeof type === 'function' && typeof type.prototype !== 'undefined' && typeof type.prototype.mountComponent === 'function' && typeof type.prototype.receiveComponent === 'function';
	}

	/**
	 * Given a ReactNode, create an instance that will actually be mounted.
	 *
	 * @param {ReactNode} node
	 * @param {boolean} shouldHaveDebugID
	 * @return {object} A new instance of the element's constructor.
	 * @protected
	 */
	function instantiateReactComponent(node, shouldHaveDebugID) {
	  var instance;

	  if (node === null || node === false) {
	    instance = ReactEmptyComponent.create(instantiateReactComponent);
	  } else if (typeof node === 'object') {
	    var element = node;
	    var type = element.type;
	    if (typeof type !== 'function' && typeof type !== 'string') {
	      var info = '';
	      if ((undefined) !== 'production') {
	        if (type === undefined || typeof type === 'object' && type !== null && Object.keys(type).length === 0) {
	          info += ' You likely forgot to export your component from the file ' + "it's defined in.";
	        }
	      }
	      info += getDeclarationErrorAddendum(element._owner);
	       true ? (undefined) !== 'production' ? invariant(false, 'Element type is invalid: expected a string (for built-in components) or a class/function (for composite components) but got: %s.%s', type == null ? type : typeof type, info) : _prodInvariant('130', type == null ? type : typeof type, info) : void 0;
	    }

	    // Special case string values
	    if (typeof element.type === 'string') {
	      instance = ReactHostComponent.createInternalComponent(element);
	    } else if (isInternalComponentType(element.type)) {
	      // This is temporarily available for custom components that are not string
	      // representations. I.e. ART. Once those are updated to use the string
	      // representation, we can drop this code path.
	      instance = new element.type(element);

	      // We renamed this. Allow the old name for compat. :(
	      if (!instance.getHostNode) {
	        instance.getHostNode = instance.getNativeNode;
	      }
	    } else {
	      instance = new ReactCompositeComponentWrapper(element);
	    }
	  } else if (typeof node === 'string' || typeof node === 'number') {
	    instance = ReactHostComponent.createInstanceForText(node);
	  } else {
	     true ? (undefined) !== 'production' ? invariant(false, 'Encountered invalid React node of type %s', typeof node) : _prodInvariant('131', typeof node) : void 0;
	  }

	  if ((undefined) !== 'production') {
	    (undefined) !== 'production' ? warning(typeof instance.mountComponent === 'function' && typeof instance.receiveComponent === 'function' && typeof instance.getHostNode === 'function' && typeof instance.unmountComponent === 'function', 'Only React Components can be mounted.') : void 0;
	  }

	  // These two fields are used by the DOM and ART diffing algorithms
	  // respectively. Instead of using expandos on components, we should be
	  // storing the state needed by the diffing algorithms elsewhere.
	  instance._mountIndex = 0;
	  instance._mountImage = null;

	  if ((undefined) !== 'production') {
	    instance._debugID = shouldHaveDebugID ? getNextDebugID() : 0;
	  }

	  // Internal instances should fully constructed at this point, so they should
	  // not get any new fields added to them at this point.
	  if ((undefined) !== 'production') {
	    if (Object.preventExtensions) {
	      Object.preventExtensions(instance);
	    }
	  }

	  return instance;
	}

	_assign(ReactCompositeComponentWrapper.prototype, ReactCompositeComponent, {
	  _instantiateReactComponent: instantiateReactComponent
	});

	module.exports = instantiateReactComponent;

/***/ }),
/* 358 */
/***/ (function(module, exports) {

	/**
	 * Copyright (c) 2013-present, Facebook, Inc.
	 *
	 * This source code is licensed under the MIT license found in the
	 * LICENSE file in the root directory of this source tree.
	 *
	 * 
	 */

	'use strict';

	/**
	 * @see http://www.whatwg.org/specs/web-apps/current-work/multipage/the-input-element.html#input-type-attr-summary
	 */

	var supportedInputTypes = {
	  color: true,
	  date: true,
	  datetime: true,
	  'datetime-local': true,
	  email: true,
	  month: true,
	  number: true,
	  password: true,
	  range: true,
	  search: true,
	  tel: true,
	  text: true,
	  time: true,
	  url: true,
	  week: true
	};

	function isTextInputElement(elem) {
	  var nodeName = elem && elem.nodeName && elem.nodeName.toLowerCase();

	  if (nodeName === 'input') {
	    return !!supportedInputTypes[elem.type];
	  }

	  if (nodeName === 'textarea') {
	    return true;
	  }

	  return false;
	}

	module.exports = isTextInputElement;

/***/ }),
/* 359 */
/***/ (function(module, exports, __webpack_require__) {

	/**
	 * Copyright (c) 2013-present, Facebook, Inc.
	 *
	 * This source code is licensed under the MIT license found in the
	 * LICENSE file in the root directory of this source tree.
	 *
	 */

	'use strict';

	var ExecutionEnvironment = __webpack_require__(24);
	var escapeTextContentForBrowser = __webpack_require__(148);
	var setInnerHTML = __webpack_require__(149);

	/**
	 * Set the textContent property of a node, ensuring that whitespace is preserved
	 * even in IE8. innerText is a poor substitute for textContent and, among many
	 * issues, inserts <br> instead of the literal newline chars. innerHTML behaves
	 * as it should.
	 *
	 * @param {DOMElement} node
	 * @param {string} text
	 * @internal
	 */
	var setTextContent = function (node, text) {
	  if (text) {
	    var firstChild = node.firstChild;

	    if (firstChild && firstChild === node.lastChild && firstChild.nodeType === 3) {
	      firstChild.nodeValue = text;
	      return;
	    }
	  }
	  node.textContent = text;
	};

	if (ExecutionEnvironment.canUseDOM) {
	  if (!('textContent' in document.documentElement)) {
	    setTextContent = function (node, text) {
	      if (node.nodeType === 3) {
	        node.nodeValue = text;
	        return;
	      }
	      setInnerHTML(node, escapeTextContentForBrowser(text));
	    };
	  }
	}

	module.exports = setTextContent;

/***/ }),
/* 360 */
/***/ (function(module, exports, __webpack_require__) {

	/**
	 * Copyright (c) 2013-present, Facebook, Inc.
	 *
	 * This source code is licensed under the MIT license found in the
	 * LICENSE file in the root directory of this source tree.
	 *
	 */

	'use strict';

	var _prodInvariant = __webpack_require__(13);

	var ReactCurrentOwner = __webpack_require__(56);
	var REACT_ELEMENT_TYPE = __webpack_require__(833);

	var getIteratorFn = __webpack_require__(867);
	var invariant = __webpack_require__(7);
	var KeyEscapeUtils = __webpack_require__(217);
	var warning = __webpack_require__(8);

	var SEPARATOR = '.';
	var SUBSEPARATOR = ':';

	/**
	 * This is inlined from ReactElement since this file is shared between
	 * isomorphic and renderers. We could extract this to a
	 *
	 */

	/**
	 * TODO: Test that a single child and an array with one item have the same key
	 * pattern.
	 */

	var didWarnAboutMaps = false;

	/**
	 * Generate a key string that identifies a component within a set.
	 *
	 * @param {*} component A component that could contain a manual key.
	 * @param {number} index Index that is used if a manual key is not provided.
	 * @return {string}
	 */
	function getComponentKey(component, index) {
	  // Do some typechecking here since we call this blindly. We want to ensure
	  // that we don't block potential future ES APIs.
	  if (component && typeof component === 'object' && component.key != null) {
	    // Explicit key
	    return KeyEscapeUtils.escape(component.key);
	  }
	  // Implicit key determined by the index in the set
	  return index.toString(36);
	}

	/**
	 * @param {?*} children Children tree container.
	 * @param {!string} nameSoFar Name of the key path so far.
	 * @param {!function} callback Callback to invoke with each child found.
	 * @param {?*} traverseContext Used to pass information throughout the traversal
	 * process.
	 * @return {!number} The number of children in this subtree.
	 */
	function traverseAllChildrenImpl(children, nameSoFar, callback, traverseContext) {
	  var type = typeof children;

	  if (type === 'undefined' || type === 'boolean') {
	    // All of the above are perceived as null.
	    children = null;
	  }

	  if (children === null || type === 'string' || type === 'number' ||
	  // The following is inlined from ReactElement. This means we can optimize
	  // some checks. React Fiber also inlines this logic for similar purposes.
	  type === 'object' && children.$$typeof === REACT_ELEMENT_TYPE) {
	    callback(traverseContext, children,
	    // If it's the only child, treat the name as if it was wrapped in an array
	    // so that it's consistent if the number of children grows.
	    nameSoFar === '' ? SEPARATOR + getComponentKey(children, 0) : nameSoFar);
	    return 1;
	  }

	  var child;
	  var nextName;
	  var subtreeCount = 0; // Count of children found in the current subtree.
	  var nextNamePrefix = nameSoFar === '' ? SEPARATOR : nameSoFar + SUBSEPARATOR;

	  if (Array.isArray(children)) {
	    for (var i = 0; i < children.length; i++) {
	      child = children[i];
	      nextName = nextNamePrefix + getComponentKey(child, i);
	      subtreeCount += traverseAllChildrenImpl(child, nextName, callback, traverseContext);
	    }
	  } else {
	    var iteratorFn = getIteratorFn(children);
	    if (iteratorFn) {
	      var iterator = iteratorFn.call(children);
	      var step;
	      if (iteratorFn !== children.entries) {
	        var ii = 0;
	        while (!(step = iterator.next()).done) {
	          child = step.value;
	          nextName = nextNamePrefix + getComponentKey(child, ii++);
	          subtreeCount += traverseAllChildrenImpl(child, nextName, callback, traverseContext);
	        }
	      } else {
	        if ((undefined) !== 'production') {
	          var mapsAsChildrenAddendum = '';
	          if (ReactCurrentOwner.current) {
	            var mapsAsChildrenOwnerName = ReactCurrentOwner.current.getName();
	            if (mapsAsChildrenOwnerName) {
	              mapsAsChildrenAddendum = ' Check the render method of `' + mapsAsChildrenOwnerName + '`.';
	            }
	          }
	          (undefined) !== 'production' ? warning(didWarnAboutMaps, 'Using Maps as children is not yet fully supported. It is an ' + 'experimental feature that might be removed. Convert it to a ' + 'sequence / iterable of keyed ReactElements instead.%s', mapsAsChildrenAddendum) : void 0;
	          didWarnAboutMaps = true;
	        }
	        // Iterator will provide entry [k,v] tuples rather than values.
	        while (!(step = iterator.next()).done) {
	          var entry = step.value;
	          if (entry) {
	            child = entry[1];
	            nextName = nextNamePrefix + KeyEscapeUtils.escape(entry[0]) + SUBSEPARATOR + getComponentKey(child, 0);
	            subtreeCount += traverseAllChildrenImpl(child, nextName, callback, traverseContext);
	          }
	        }
	      }
	    } else if (type === 'object') {
	      var addendum = '';
	      if ((undefined) !== 'production') {
	        addendum = ' If you meant to render a collection of children, use an array ' + 'instead or wrap the object using createFragment(object) from the ' + 'React add-ons.';
	        if (children._isReactElement) {
	          addendum = " It looks like you're using an element created by a different " + 'version of React. Make sure to use only one copy of React.';
	        }
	        if (ReactCurrentOwner.current) {
	          var name = ReactCurrentOwner.current.getName();
	          if (name) {
	            addendum += ' Check the render method of `' + name + '`.';
	          }
	        }
	      }
	      var childrenString = String(children);
	       true ? (undefined) !== 'production' ? invariant(false, 'Objects are not valid as a React child (found: %s).%s', childrenString === '[object Object]' ? 'object with keys {' + Object.keys(children).join(', ') + '}' : childrenString, addendum) : _prodInvariant('31', childrenString === '[object Object]' ? 'object with keys {' + Object.keys(children).join(', ') + '}' : childrenString, addendum) : void 0;
	    }
	  }

	  return subtreeCount;
	}

	/**
	 * Traverses children that are typically specified as `props.children`, but
	 * might also be specified through attributes:
	 *
	 * - `traverseAllChildren(this.props.children, ...)`
	 * - `traverseAllChildren(this.props.leftPanelChildren, ...)`
	 *
	 * The `traverseContext` is an optional argument that is passed through the
	 * entire traversal. It can be used to store accumulations or anything else that
	 * the callback might find relevant.
	 *
	 * @param {?*} children Children tree object.
	 * @param {!function} callback To invoke upon traversing each child.
	 * @param {?*} traverseContext Context for traversal.
	 * @return {!number} The number of children in this subtree.
	 */
	function traverseAllChildren(children, callback, traverseContext) {
	  if (children == null) {
	    return 0;
	  }

	  return traverseAllChildrenImpl(children, '', callback, traverseContext);
	}

	module.exports = traverseAllChildren;

/***/ }),
/* 361 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';

	if ((undefined) === 'production') {
	  module.exports = __webpack_require__(873);
	} else {
	  module.exports = __webpack_require__(872);
	}


/***/ }),
/* 362 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';

	exports.__esModule = true;

	var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

	var _react = __webpack_require__(4);

	var _react2 = _interopRequireDefault(_react);

	var _routerWarning = __webpack_require__(25);

	var _routerWarning2 = _interopRequireDefault(_routerWarning);

	var _invariant = __webpack_require__(29);

	var _invariant2 = _interopRequireDefault(_invariant);

	var _PropTypes = __webpack_require__(230);

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

	function _objectWithoutProperties(obj, keys) { var target = {}; for (var i in obj) { if (keys.indexOf(i) >= 0) continue; if (!Object.prototype.hasOwnProperty.call(obj, i)) continue; target[i] = obj[i]; } return target; }

	var _React$PropTypes = _react2.default.PropTypes;
	var bool = _React$PropTypes.bool;
	var object = _React$PropTypes.object;
	var string = _React$PropTypes.string;
	var func = _React$PropTypes.func;
	var oneOfType = _React$PropTypes.oneOfType;


	function isLeftClickEvent(event) {
	  return event.button === 0;
	}

	function isModifiedEvent(event) {
	  return !!(event.metaKey || event.altKey || event.ctrlKey || event.shiftKey);
	}

	// TODO: De-duplicate against hasAnyProperties in createTransitionManager.
	function isEmptyObject(object) {
	  for (var p in object) {
	    if (Object.prototype.hasOwnProperty.call(object, p)) return false;
	  }return true;
	}

	function createLocationDescriptor(to, _ref) {
	  var query = _ref.query;
	  var hash = _ref.hash;
	  var state = _ref.state;

	  if (query || hash || state) {
	    return { pathname: to, query: query, hash: hash, state: state };
	  }

	  return to;
	}

	/**
	 * A <Link> is used to create an <a> element that links to a route.
	 * When that route is active, the link gets the value of its
	 * activeClassName prop.
	 *
	 * For example, assuming you have the following route:
	 *
	 *   <Route path="/posts/:postID" component={Post} />
	 *
	 * You could use the following component to link to that route:
	 *
	 *   <Link to={`/posts/${post.id}`} />
	 *
	 * Links may pass along location state and/or query string parameters
	 * in the state/query props, respectively.
	 *
	 *   <Link ... query={{ show: true }} state={{ the: 'state' }} />
	 */
	var Link = _react2.default.createClass({
	  displayName: 'Link',


	  contextTypes: {
	    router: _PropTypes.routerShape
	  },

	  propTypes: {
	    to: oneOfType([string, object]),
	    query: object,
	    hash: string,
	    state: object,
	    activeStyle: object,
	    activeClassName: string,
	    onlyActiveOnIndex: bool.isRequired,
	    onClick: func,
	    target: string
	  },

	  getDefaultProps: function getDefaultProps() {
	    return {
	      onlyActiveOnIndex: false,
	      style: {}
	    };
	  },
	  handleClick: function handleClick(event) {
	    if (this.props.onClick) this.props.onClick(event);

	    if (event.defaultPrevented) return;

	    !this.context.router ? (undefined) !== 'production' ? (0, _invariant2.default)(false, '<Link>s rendered outside of a router context cannot navigate.') : (0, _invariant2.default)(false) : void 0;

	    if (isModifiedEvent(event) || !isLeftClickEvent(event)) return;

	    // If target prop is set (e.g. to "_blank"), let browser handle link.
	    /* istanbul ignore if: untestable with Karma */
	    if (this.props.target) return;

	    event.preventDefault();

	    var _props = this.props;
	    var to = _props.to;
	    var query = _props.query;
	    var hash = _props.hash;
	    var state = _props.state;

	    var location = createLocationDescriptor(to, { query: query, hash: hash, state: state });

	    this.context.router.push(location);
	  },
	  render: function render() {
	    var _props2 = this.props;
	    var to = _props2.to;
	    var query = _props2.query;
	    var hash = _props2.hash;
	    var state = _props2.state;
	    var activeClassName = _props2.activeClassName;
	    var activeStyle = _props2.activeStyle;
	    var onlyActiveOnIndex = _props2.onlyActiveOnIndex;

	    var props = _objectWithoutProperties(_props2, ['to', 'query', 'hash', 'state', 'activeClassName', 'activeStyle', 'onlyActiveOnIndex']);

	    (undefined) !== 'production' ? (0, _routerWarning2.default)(!(query || hash || state), 'the `query`, `hash`, and `state` props on `<Link>` are deprecated, use `<Link to={{ pathname, query, hash, state }}/>. http://tiny.cc/router-isActivedeprecated') : void 0;

	    // Ignore if rendered outside the context of router, simplifies unit testing.
	    var router = this.context.router;


	    if (router) {
	      // If user does not specify a `to` prop, return an empty anchor tag.
	      if (to == null) {
	        return _react2.default.createElement('a', props);
	      }

	      var location = createLocationDescriptor(to, { query: query, hash: hash, state: state });
	      props.href = router.createHref(location);

	      if (activeClassName || activeStyle != null && !isEmptyObject(activeStyle)) {
	        if (router.isActive(location, onlyActiveOnIndex)) {
	          if (activeClassName) {
	            if (props.className) {
	              props.className += ' ' + activeClassName;
	            } else {
	              props.className = activeClassName;
	            }
	          }

	          if (activeStyle) props.style = _extends({}, props.style, activeStyle);
	        }
	      }
	    }

	    return _react2.default.createElement('a', _extends({}, props, { onClick: this.handleClick }));
	  }
	});

	exports.default = Link;
	module.exports = exports['default'];

/***/ }),
/* 363 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';

	exports.__esModule = true;

	var _react = __webpack_require__(4);

	var _react2 = _interopRequireDefault(_react);

	var _invariant = __webpack_require__(29);

	var _invariant2 = _interopRequireDefault(_invariant);

	var _RouteUtils = __webpack_require__(66);

	var _PatternUtils = __webpack_require__(97);

	var _InternalPropTypes = __webpack_require__(84);

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

	var _React$PropTypes = _react2.default.PropTypes;
	var string = _React$PropTypes.string;
	var object = _React$PropTypes.object;

	/**
	 * A <Redirect> is used to declare another URL path a client should
	 * be sent to when they request a given URL.
	 *
	 * Redirects are placed alongside routes in the route configuration
	 * and are traversed in the same manner.
	 */

	var Redirect = _react2.default.createClass({
	  displayName: 'Redirect',


	  statics: {
	    createRouteFromReactElement: function createRouteFromReactElement(element) {
	      var route = (0, _RouteUtils.createRouteFromReactElement)(element);

	      if (route.from) route.path = route.from;

	      route.onEnter = function (nextState, replace) {
	        var location = nextState.location;
	        var params = nextState.params;


	        var pathname = void 0;
	        if (route.to.charAt(0) === '/') {
	          pathname = (0, _PatternUtils.formatPattern)(route.to, params);
	        } else if (!route.to) {
	          pathname = location.pathname;
	        } else {
	          var routeIndex = nextState.routes.indexOf(route);
	          var parentPattern = Redirect.getRoutePattern(nextState.routes, routeIndex - 1);
	          var pattern = parentPattern.replace(/\/*$/, '/') + route.to;
	          pathname = (0, _PatternUtils.formatPattern)(pattern, params);
	        }

	        replace({
	          pathname: pathname,
	          query: route.query || location.query,
	          state: route.state || location.state
	        });
	      };

	      return route;
	    },
	    getRoutePattern: function getRoutePattern(routes, routeIndex) {
	      var parentPattern = '';

	      for (var i = routeIndex; i >= 0; i--) {
	        var route = routes[i];
	        var pattern = route.path || '';

	        parentPattern = pattern.replace(/\/*$/, '/') + parentPattern;

	        if (pattern.indexOf('/') === 0) break;
	      }

	      return '/' + parentPattern;
	    }
	  },

	  propTypes: {
	    path: string,
	    from: string, // Alias for path
	    to: string.isRequired,
	    query: object,
	    state: object,
	    onEnter: _InternalPropTypes.falsy,
	    children: _InternalPropTypes.falsy
	  },

	  /* istanbul ignore next: sanity check */
	  render: function render() {
	     true ? (undefined) !== 'production' ? (0, _invariant2.default)(false, '<Redirect> elements are for router configuration only and should not be rendered') : (0, _invariant2.default)(false) : void 0;
	  }
	});

	exports.default = Redirect;
	module.exports = exports['default'];

/***/ }),
/* 364 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';

	exports.__esModule = true;

	var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

	exports.createRouterObject = createRouterObject;
	exports.createRoutingHistory = createRoutingHistory;

	var _deprecateObjectProperties = __webpack_require__(151);

	var _deprecateObjectProperties2 = _interopRequireDefault(_deprecateObjectProperties);

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

	function createRouterObject(history, transitionManager) {
	  return _extends({}, history, {
	    setRouteLeaveHook: transitionManager.listenBeforeLeavingRoute,
	    isActive: transitionManager.isActive
	  });
	}

	// deprecated
	function createRoutingHistory(history, transitionManager) {
	  history = _extends({}, history, transitionManager);

	  if ((undefined) !== 'production') {
	    history = (0, _deprecateObjectProperties2.default)(history, '`props.history` and `context.history` are deprecated. Please use `context.router`. http://tiny.cc/router-contextchanges');
	  }

	  return history;
	}

/***/ }),
/* 365 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';

	exports.__esModule = true;
	exports.default = createMemoryHistory;

	var _useQueries = __webpack_require__(142);

	var _useQueries2 = _interopRequireDefault(_useQueries);

	var _useBasename = __webpack_require__(332);

	var _useBasename2 = _interopRequireDefault(_useBasename);

	var _createMemoryHistory = __webpack_require__(790);

	var _createMemoryHistory2 = _interopRequireDefault(_createMemoryHistory);

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

	function createMemoryHistory(options) {
	  // signatures and type checking differ between `useRoutes` and
	  // `createMemoryHistory`, have to create `memoryHistory` first because
	  // `useQueries` doesn't understand the signature
	  var memoryHistory = (0, _createMemoryHistory2.default)(options);
	  var createHistory = function createHistory() {
	    return memoryHistory;
	  };
	  var history = (0, _useQueries2.default)((0, _useBasename2.default)(createHistory))(options);
	  history.__v2_compatible__ = true;
	  return history;
	}
	module.exports = exports['default'];

/***/ }),
/* 366 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';

	exports.__esModule = true;

	exports.default = function (createHistory) {
	  var history = void 0;
	  if (canUseDOM) history = (0, _useRouterHistory2.default)(createHistory)();
	  return history;
	};

	var _useRouterHistory = __webpack_require__(368);

	var _useRouterHistory2 = _interopRequireDefault(_useRouterHistory);

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

	var canUseDOM = !!(typeof window !== 'undefined' && window.document && window.document.createElement);

	module.exports = exports['default'];

/***/ }),
/* 367 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';

	exports.__esModule = true;

	var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

	exports.default = makeStateWithLocation;

	var _deprecateObjectProperties = __webpack_require__(151);

	var _routerWarning = __webpack_require__(25);

	var _routerWarning2 = _interopRequireDefault(_routerWarning);

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

	function makeStateWithLocation(state, location) {
	  if ((undefined) !== 'production' && _deprecateObjectProperties.canUseMembrane) {
	    var stateWithLocation = _extends({}, state);

	    // I don't use deprecateObjectProperties here because I want to keep the
	    // same code path between development and production, in that we just
	    // assign extra properties to the copy of the state object in both cases.

	    var _loop = function _loop(prop) {
	      if (!Object.prototype.hasOwnProperty.call(location, prop)) {
	        return 'continue';
	      }

	      Object.defineProperty(stateWithLocation, prop, {
	        get: function get() {
	          (undefined) !== 'production' ? (0, _routerWarning2.default)(false, 'Accessing location properties directly from the first argument to `getComponent`, `getComponents`, `getChildRoutes`, and `getIndexRoute` is deprecated. That argument is now the router state (`nextState` or `partialNextState`) rather than the location. To access the location, use `nextState.location` or `partialNextState.location`.') : void 0;
	          return location[prop];
	        }
	      });
	    };

	    for (var prop in location) {
	      var _ret = _loop(prop);

	      if (_ret === 'continue') continue;
	    }

	    return stateWithLocation;
	  }

	  return _extends({}, state, location);
	}
	module.exports = exports['default'];

/***/ }),
/* 368 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';

	exports.__esModule = true;
	exports.default = useRouterHistory;

	var _useQueries = __webpack_require__(142);

	var _useQueries2 = _interopRequireDefault(_useQueries);

	var _useBasename = __webpack_require__(332);

	var _useBasename2 = _interopRequireDefault(_useBasename);

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

	function useRouterHistory(createHistory) {
	  return function (options) {
	    var history = (0, _useQueries2.default)((0, _useBasename2.default)(createHistory))(options);
	    history.__v2_compatible__ = true;
	    return history;
	  };
	}
	module.exports = exports['default'];

/***/ }),
/* 369 */
/***/ (function(module, exports, __webpack_require__) {

	/**
	 * Copyright (c) 2013-present, Facebook, Inc.
	 *
	 * This source code is licensed under the MIT license found in the
	 * LICENSE file in the root directory of this source tree.
	 *
	 */

	'use strict';

	var _prodInvariant = __webpack_require__(99),
	    _assign = __webpack_require__(19);

	var ReactNoopUpdateQueue = __webpack_require__(372);

	var canDefineProperty = __webpack_require__(152);
	var emptyObject = __webpack_require__(206);
	var invariant = __webpack_require__(7);
	var lowPriorityWarning = __webpack_require__(232);

	/**
	 * Base class helpers for the updating state of a component.
	 */
	function ReactComponent(props, context, updater) {
	  this.props = props;
	  this.context = context;
	  this.refs = emptyObject;
	  // We initialize the default updater but the real one gets injected by the
	  // renderer.
	  this.updater = updater || ReactNoopUpdateQueue;
	}

	ReactComponent.prototype.isReactComponent = {};

	/**
	 * Sets a subset of the state. Always use this to mutate
	 * state. You should treat `this.state` as immutable.
	 *
	 * There is no guarantee that `this.state` will be immediately updated, so
	 * accessing `this.state` after calling this method may return the old value.
	 *
	 * There is no guarantee that calls to `setState` will run synchronously,
	 * as they may eventually be batched together.  You can provide an optional
	 * callback that will be executed when the call to setState is actually
	 * completed.
	 *
	 * When a function is provided to setState, it will be called at some point in
	 * the future (not synchronously). It will be called with the up to date
	 * component arguments (state, props, context). These values can be different
	 * from this.* because your function may be called after receiveProps but before
	 * shouldComponentUpdate, and this new state, props, and context will not yet be
	 * assigned to this.
	 *
	 * @param {object|function} partialState Next partial state or function to
	 *        produce next partial state to be merged with current state.
	 * @param {?function} callback Called after state is updated.
	 * @final
	 * @protected
	 */
	ReactComponent.prototype.setState = function (partialState, callback) {
	  !(typeof partialState === 'object' || typeof partialState === 'function' || partialState == null) ? (undefined) !== 'production' ? invariant(false, 'setState(...): takes an object of state variables to update or a function which returns an object of state variables.') : _prodInvariant('85') : void 0;
	  this.updater.enqueueSetState(this, partialState);
	  if (callback) {
	    this.updater.enqueueCallback(this, callback, 'setState');
	  }
	};

	/**
	 * Forces an update. This should only be invoked when it is known with
	 * certainty that we are **not** in a DOM transaction.
	 *
	 * You may want to call this when you know that some deeper aspect of the
	 * component's state has changed but `setState` was not called.
	 *
	 * This will not invoke `shouldComponentUpdate`, but it will invoke
	 * `componentWillUpdate` and `componentDidUpdate`.
	 *
	 * @param {?function} callback Called after update is complete.
	 * @final
	 * @protected
	 */
	ReactComponent.prototype.forceUpdate = function (callback) {
	  this.updater.enqueueForceUpdate(this);
	  if (callback) {
	    this.updater.enqueueCallback(this, callback, 'forceUpdate');
	  }
	};

	/**
	 * Deprecated APIs. These APIs used to exist on classic React classes but since
	 * we would like to deprecate them, we're not going to move them over to this
	 * modern base class. Instead, we define a getter that warns if it's accessed.
	 */
	if ((undefined) !== 'production') {
	  var deprecatedAPIs = {
	    isMounted: ['isMounted', 'Instead, make sure to clean up subscriptions and pending requests in ' + 'componentWillUnmount to prevent memory leaks.'],
	    replaceState: ['replaceState', 'Refactor your code to use setState instead (see ' + 'https://github.com/facebook/react/issues/3236).']
	  };
	  var defineDeprecationWarning = function (methodName, info) {
	    if (canDefineProperty) {
	      Object.defineProperty(ReactComponent.prototype, methodName, {
	        get: function () {
	          lowPriorityWarning(false, '%s(...) is deprecated in plain JavaScript React classes. %s', info[0], info[1]);
	          return undefined;
	        }
	      });
	    }
	  };
	  for (var fnName in deprecatedAPIs) {
	    if (deprecatedAPIs.hasOwnProperty(fnName)) {
	      defineDeprecationWarning(fnName, deprecatedAPIs[fnName]);
	    }
	  }
	}

	/**
	 * Base class helpers for the updating state of a component.
	 */
	function ReactPureComponent(props, context, updater) {
	  // Duplicated from ReactComponent.
	  this.props = props;
	  this.context = context;
	  this.refs = emptyObject;
	  // We initialize the default updater but the real one gets injected by the
	  // renderer.
	  this.updater = updater || ReactNoopUpdateQueue;
	}

	function ComponentDummy() {}
	ComponentDummy.prototype = ReactComponent.prototype;
	ReactPureComponent.prototype = new ComponentDummy();
	ReactPureComponent.prototype.constructor = ReactPureComponent;
	// Avoid an extra prototype jump for these methods.
	_assign(ReactPureComponent.prototype, ReactComponent.prototype);
	ReactPureComponent.prototype.isPureReactComponent = true;

	module.exports = {
	  Component: ReactComponent,
	  PureComponent: ReactPureComponent
	};

/***/ }),
/* 370 */
/***/ (function(module, exports) {

	/**
	 * Copyright (c) 2014-present, Facebook, Inc.
	 *
	 * This source code is licensed under the MIT license found in the
	 * LICENSE file in the root directory of this source tree.
	 *
	 * 
	 */

	'use strict';

	// The Symbol used to tag the ReactElement type. If there is no native Symbol
	// nor polyfill, then a plain number is used for performance.

	var REACT_ELEMENT_TYPE = typeof Symbol === 'function' && Symbol['for'] && Symbol['for']('react.element') || 0xeac7;

	module.exports = REACT_ELEMENT_TYPE;

/***/ }),
/* 371 */
/***/ (function(module, exports, __webpack_require__) {

	/**
	 * Copyright (c) 2014-present, Facebook, Inc.
	 *
	 * This source code is licensed under the MIT license found in the
	 * LICENSE file in the root directory of this source tree.
	 *
	 */

	/**
	 * ReactElementValidator provides a wrapper around a element factory
	 * which validates the props passed to the element. This is intended to be
	 * used only in DEV and could be replaced by a static type checker for languages
	 * that support it.
	 */

	'use strict';

	var ReactCurrentOwner = __webpack_require__(56);
	var ReactComponentTreeHook = __webpack_require__(34);
	var ReactElement = __webpack_require__(85);

	var checkReactTypeSpec = __webpack_require__(916);

	var canDefineProperty = __webpack_require__(152);
	var getIteratorFn = __webpack_require__(373);
	var warning = __webpack_require__(8);
	var lowPriorityWarning = __webpack_require__(232);

	function getDeclarationErrorAddendum() {
	  if (ReactCurrentOwner.current) {
	    var name = ReactCurrentOwner.current.getName();
	    if (name) {
	      return ' Check the render method of `' + name + '`.';
	    }
	  }
	  return '';
	}

	function getSourceInfoErrorAddendum(elementProps) {
	  if (elementProps !== null && elementProps !== undefined && elementProps.__source !== undefined) {
	    var source = elementProps.__source;
	    var fileName = source.fileName.replace(/^.*[\\\/]/, '');
	    var lineNumber = source.lineNumber;
	    return ' Check your code at ' + fileName + ':' + lineNumber + '.';
	  }
	  return '';
	}

	/**
	 * Warn if there's no key explicitly set on dynamic arrays of children or
	 * object keys are not valid. This allows us to keep track of children between
	 * updates.
	 */
	var ownerHasKeyUseWarning = {};

	function getCurrentComponentErrorInfo(parentType) {
	  var info = getDeclarationErrorAddendum();

	  if (!info) {
	    var parentName = typeof parentType === 'string' ? parentType : parentType.displayName || parentType.name;
	    if (parentName) {
	      info = ' Check the top-level render call using <' + parentName + '>.';
	    }
	  }
	  return info;
	}

	/**
	 * Warn if the element doesn't have an explicit key assigned to it.
	 * This element is in an array. The array could grow and shrink or be
	 * reordered. All children that haven't already been validated are required to
	 * have a "key" property assigned to it. Error statuses are cached so a warning
	 * will only be shown once.
	 *
	 * @internal
	 * @param {ReactElement} element Element that requires a key.
	 * @param {*} parentType element's parent's type.
	 */
	function validateExplicitKey(element, parentType) {
	  if (!element._store || element._store.validated || element.key != null) {
	    return;
	  }
	  element._store.validated = true;

	  var memoizer = ownerHasKeyUseWarning.uniqueKey || (ownerHasKeyUseWarning.uniqueKey = {});

	  var currentComponentErrorInfo = getCurrentComponentErrorInfo(parentType);
	  if (memoizer[currentComponentErrorInfo]) {
	    return;
	  }
	  memoizer[currentComponentErrorInfo] = true;

	  // Usually the current owner is the offender, but if it accepts children as a
	  // property, it may be the creator of the child that's responsible for
	  // assigning it a key.
	  var childOwner = '';
	  if (element && element._owner && element._owner !== ReactCurrentOwner.current) {
	    // Give the component that originally created this child.
	    childOwner = ' It was passed a child from ' + element._owner.getName() + '.';
	  }

	  (undefined) !== 'production' ? warning(false, 'Each child in an array or iterator should have a unique "key" prop.' + '%s%s See https://fb.me/react-warning-keys for more information.%s', currentComponentErrorInfo, childOwner, ReactComponentTreeHook.getCurrentStackAddendum(element)) : void 0;
	}

	/**
	 * Ensure that every element either is passed in a static location, in an
	 * array with an explicit keys property defined, or in an object literal
	 * with valid key property.
	 *
	 * @internal
	 * @param {ReactNode} node Statically passed child of any type.
	 * @param {*} parentType node's parent's type.
	 */
	function validateChildKeys(node, parentType) {
	  if (typeof node !== 'object') {
	    return;
	  }
	  if (Array.isArray(node)) {
	    for (var i = 0; i < node.length; i++) {
	      var child = node[i];
	      if (ReactElement.isValidElement(child)) {
	        validateExplicitKey(child, parentType);
	      }
	    }
	  } else if (ReactElement.isValidElement(node)) {
	    // This element was passed in a valid location.
	    if (node._store) {
	      node._store.validated = true;
	    }
	  } else if (node) {
	    var iteratorFn = getIteratorFn(node);
	    // Entry iterators provide implicit keys.
	    if (iteratorFn) {
	      if (iteratorFn !== node.entries) {
	        var iterator = iteratorFn.call(node);
	        var step;
	        while (!(step = iterator.next()).done) {
	          if (ReactElement.isValidElement(step.value)) {
	            validateExplicitKey(step.value, parentType);
	          }
	        }
	      }
	    }
	  }
	}

	/**
	 * Given an element, validate that its props follow the propTypes definition,
	 * provided by the type.
	 *
	 * @param {ReactElement} element
	 */
	function validatePropTypes(element) {
	  var componentClass = element.type;
	  if (typeof componentClass !== 'function') {
	    return;
	  }
	  var name = componentClass.displayName || componentClass.name;
	  if (componentClass.propTypes) {
	    checkReactTypeSpec(componentClass.propTypes, element.props, 'prop', name, element, null);
	  }
	  if (typeof componentClass.getDefaultProps === 'function') {
	    (undefined) !== 'production' ? warning(componentClass.getDefaultProps.isReactClassApproved, 'getDefaultProps is only used on classic React.createClass ' + 'definitions. Use a static property named `defaultProps` instead.') : void 0;
	  }
	}

	var ReactElementValidator = {
	  createElement: function (type, props, children) {
	    var validType = typeof type === 'string' || typeof type === 'function';
	    // We warn in this case but don't throw. We expect the element creation to
	    // succeed and there will likely be errors in render.
	    if (!validType) {
	      if (typeof type !== 'function' && typeof type !== 'string') {
	        var info = '';
	        if (type === undefined || typeof type === 'object' && type !== null && Object.keys(type).length === 0) {
	          info += ' You likely forgot to export your component from the file ' + "it's defined in.";
	        }

	        var sourceInfo = getSourceInfoErrorAddendum(props);
	        if (sourceInfo) {
	          info += sourceInfo;
	        } else {
	          info += getDeclarationErrorAddendum();
	        }

	        info += ReactComponentTreeHook.getCurrentStackAddendum();

	        var currentSource = props !== null && props !== undefined && props.__source !== undefined ? props.__source : null;
	        ReactComponentTreeHook.pushNonStandardWarningStack(true, currentSource);
	        (undefined) !== 'production' ? warning(false, 'React.createElement: type is invalid -- expected a string (for ' + 'built-in components) or a class/function (for composite ' + 'components) but got: %s.%s', type == null ? type : typeof type, info) : void 0;
	        ReactComponentTreeHook.popNonStandardWarningStack();
	      }
	    }

	    var element = ReactElement.createElement.apply(this, arguments);

	    // The result can be nullish if a mock or a custom function is used.
	    // TODO: Drop this when these are no longer allowed as the type argument.
	    if (element == null) {
	      return element;
	    }

	    // Skip key warning if the type isn't valid since our key validation logic
	    // doesn't expect a non-string/function type and can throw confusing errors.
	    // We don't want exception behavior to differ between dev and prod.
	    // (Rendering will throw with a helpful message and as soon as the type is
	    // fixed, the key warnings will appear.)
	    if (validType) {
	      for (var i = 2; i < arguments.length; i++) {
	        validateChildKeys(arguments[i], type);
	      }
	    }

	    validatePropTypes(element);

	    return element;
	  },

	  createFactory: function (type) {
	    var validatedFactory = ReactElementValidator.createElement.bind(null, type);
	    // Legacy hook TODO: Warn if this is accessed
	    validatedFactory.type = type;

	    if ((undefined) !== 'production') {
	      if (canDefineProperty) {
	        Object.defineProperty(validatedFactory, 'type', {
	          enumerable: false,
	          get: function () {
	            lowPriorityWarning(false, 'Factory.type is deprecated. Access the class directly ' + 'before passing it to createFactory.');
	            Object.defineProperty(this, 'type', {
	              value: type
	            });
	            return type;
	          }
	        });
	      }
	    }

	    return validatedFactory;
	  },

	  cloneElement: function (element, props, children) {
	    var newElement = ReactElement.cloneElement.apply(this, arguments);
	    for (var i = 2; i < arguments.length; i++) {
	      validateChildKeys(arguments[i], newElement.type);
	    }
	    validatePropTypes(newElement);
	    return newElement;
	  }
	};

	module.exports = ReactElementValidator;

/***/ }),
/* 372 */
/***/ (function(module, exports, __webpack_require__) {

	/**
	 * Copyright (c) 2015-present, Facebook, Inc.
	 *
	 * This source code is licensed under the MIT license found in the
	 * LICENSE file in the root directory of this source tree.
	 *
	 */

	'use strict';

	var warning = __webpack_require__(8);

	function warnNoop(publicInstance, callerName) {
	  if ((undefined) !== 'production') {
	    var constructor = publicInstance.constructor;
	    (undefined) !== 'production' ? warning(false, '%s(...): Can only update a mounted or mounting component. ' + 'This usually means you called %s() on an unmounted component. ' + 'This is a no-op. Please check the code for the %s component.', callerName, callerName, constructor && (constructor.displayName || constructor.name) || 'ReactClass') : void 0;
	  }
	}

	/**
	 * This is the abstract API for an update queue.
	 */
	var ReactNoopUpdateQueue = {
	  /**
	   * Checks whether or not this composite component is mounted.
	   * @param {ReactClass} publicInstance The instance we want to test.
	   * @return {boolean} True if mounted, false otherwise.
	   * @protected
	   * @final
	   */
	  isMounted: function (publicInstance) {
	    return false;
	  },

	  /**
	   * Enqueue a callback that will be executed after all the pending updates
	   * have processed.
	   *
	   * @param {ReactClass} publicInstance The instance to use as `this` context.
	   * @param {?function} callback Called after state is updated.
	   * @internal
	   */
	  enqueueCallback: function (publicInstance, callback) {},

	  /**
	   * Forces an update. This should only be invoked when it is known with
	   * certainty that we are **not** in a DOM transaction.
	   *
	   * You may want to call this when you know that some deeper aspect of the
	   * component's state has changed but `setState` was not called.
	   *
	   * This will not invoke `shouldComponentUpdate`, but it will invoke
	   * `componentWillUpdate` and `componentDidUpdate`.
	   *
	   * @param {ReactClass} publicInstance The instance that should rerender.
	   * @internal
	   */
	  enqueueForceUpdate: function (publicInstance) {
	    warnNoop(publicInstance, 'forceUpdate');
	  },

	  /**
	   * Replaces all of the state. Always use this or `setState` to mutate state.
	   * You should treat `this.state` as immutable.
	   *
	   * There is no guarantee that `this.state` will be immediately updated, so
	   * accessing `this.state` after calling this method may return the old value.
	   *
	   * @param {ReactClass} publicInstance The instance that should rerender.
	   * @param {object} completeState Next state.
	   * @internal
	   */
	  enqueueReplaceState: function (publicInstance, completeState) {
	    warnNoop(publicInstance, 'replaceState');
	  },

	  /**
	   * Sets a subset of the state. This only exists because _pendingState is
	   * internal. This provides a merging strategy that is not available to deep
	   * properties which is confusing. TODO: Expose pendingState or don't use it
	   * during the merge.
	   *
	   * @param {ReactClass} publicInstance The instance that should rerender.
	   * @param {object} partialState Next partial state to be merged with state.
	   * @internal
	   */
	  enqueueSetState: function (publicInstance, partialState) {
	    warnNoop(publicInstance, 'setState');
	  }
	};

	module.exports = ReactNoopUpdateQueue;

/***/ }),
/* 373 */
/***/ (function(module, exports) {

	/**
	 * Copyright (c) 2013-present, Facebook, Inc.
	 *
	 * This source code is licensed under the MIT license found in the
	 * LICENSE file in the root directory of this source tree.
	 *
	 * 
	 */

	'use strict';

	/* global Symbol */

	var ITERATOR_SYMBOL = typeof Symbol === 'function' && Symbol.iterator;
	var FAUX_ITERATOR_SYMBOL = '@@iterator'; // Before Symbol spec.

	/**
	 * Returns the iterator method function contained on the iterable object.
	 *
	 * Be sure to invoke the function with the iterable as context:
	 *
	 *     var iteratorFn = getIteratorFn(myIterable);
	 *     if (iteratorFn) {
	 *       var iterator = iteratorFn.call(myIterable);
	 *       ...
	 *     }
	 *
	 * @param {?object} maybeIterable
	 * @return {?function}
	 */
	function getIteratorFn(maybeIterable) {
	  var iteratorFn = maybeIterable && (ITERATOR_SYMBOL && maybeIterable[ITERATOR_SYMBOL] || maybeIterable[FAUX_ITERATOR_SYMBOL]);
	  if (typeof iteratorFn === 'function') {
	    return iteratorFn;
	  }
	}

	module.exports = getIteratorFn;

/***/ }),
/* 374 */
/***/ (function(module, exports) {

	'use strict';

	var $Object = Object;
	var $TypeError = TypeError;

	module.exports = function flags() {
		if (this != null && this !== $Object(this)) {
			throw new $TypeError('RegExp.prototype.flags getter called on non-object');
		}
		var result = '';
		if (this.global) {
			result += 'g';
		}
		if (this.ignoreCase) {
			result += 'i';
		}
		if (this.multiline) {
			result += 'm';
		}
		if (this.dotAll) {
			result += 's';
		}
		if (this.unicode) {
			result += 'u';
		}
		if (this.sticky) {
			result += 'y';
		}
		return result;
	};


/***/ }),
/* 375 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';

	var implementation = __webpack_require__(374);

	var supportsDescriptors = __webpack_require__(111).supportsDescriptors;
	var $gOPD = Object.getOwnPropertyDescriptor;
	var $TypeError = TypeError;

	module.exports = function getPolyfill() {
		if (!supportsDescriptors) {
			throw new $TypeError('RegExp.prototype.flags requires a true ES5 environment that supports property descriptors');
		}
		if ((/a/mig).flags === 'gim') {
			var descriptor = $gOPD(RegExp.prototype, 'flags');
			if (descriptor && typeof descriptor.get === 'function' && typeof (/a/).dotAll === 'boolean') {
				return descriptor.get;
			}
		}
		return implementation;
	};


/***/ }),
/* 376 */
/***/ (function(module, exports, __webpack_require__) {

	/**
	 * Autogenerated by Avro
	 * 
	 * DO NOT EDIT DIRECTLY
	 */


	/**
	* @constructor
	* @memberof base
	*/
	var Point = function() {
	  this._class_ = Point;
	  this.x = undefined;
	  this.y = undefined;
	};


	/**
	* Set the field value
	* @memberof base.Point
	* @param {Number} x must be a long integer
	*/
	Point.prototype.setX = function(x) {
	  this.x = x;
	};

	/**
	* Get the field value
	* @memberof base.Point
	* @return {Number} must be a long integer
	*/
	Point.prototype.getX = function() {
	  return this.x;
	};

	/**
	* Set the field value
	* @memberof base.Point
	* @param {Number} y must be a long integer
	*/
	Point.prototype.setY = function(y) {
	  this.y = y;
	};

	/**
	* Get the field value
	* @memberof base.Point
	* @return {Number} must be a long integer
	*/
	Point.prototype.getY = function() {
	  return this.y;
	};

	/**
	* @memberof base.Point
	* @private
	*/
	Point.prototype.getMetaInfo = function(fieldName) {
	  var curclass = this._class_;
	  do {
	    var fieldMetaInfo = curclass._meta_.fields[fieldName];
	    if(fieldMetaInfo) {
	      return fieldMetaInfo;
	    }
	    if(curclass._meta_._superMeta_) {
	      curclass = curclass._meta_._superMeta_._class_;
	    } else {
	      curclass = null;
	    }
	  } while(curclass);
	  return null;
	};

	Point.prototype.toString = function() {
	  return JSON.stringify(this);
	};

	Point._meta_ =  {fields:  {}};
	Point._meta_._class_ =  Point;
	Point._meta_.fields["x"] = {};
	Point._meta_.fields["x"].type = Number;
	Point._meta_.fields["y"] = {};
	Point._meta_.fields["y"].type = Number;

	//
	// Expose the module.
	//
	if (true) {
	module.exports = Point;
	}



/***/ }),
/* 377 */
/***/ (function(module, exports, __webpack_require__) {

	/**
	 * Autogenerated by Avro
	 * 
	 * DO NOT EDIT DIRECTLY
	 */

	var base_Point = __webpack_require__(376);

	/**
	* @constructor
	* @memberof base
	*/
	var Points = function() {
	  this._class_ = Points;
	  this.points = undefined;
	};


	/**
	* Set the field value
	* @memberof base.Points
	* @param {Array.<base.Point>} points An array of 
	*/
	Points.prototype.setPoints = function(points) {
	  this.points = points;
	};

	/**
	* Get the field value
	* @memberof base.Points
	* @return {Array.<base.Point>} An array of 
	*/
	Points.prototype.getPoints = function() {
	  return this.points;
	};

	/**
	* @memberof base.Points
	* @private
	*/
	Points.prototype.getMetaInfo = function(fieldName) {
	  var curclass = this._class_;
	  do {
	    var fieldMetaInfo = curclass._meta_.fields[fieldName];
	    if(fieldMetaInfo) {
	      return fieldMetaInfo;
	    }
	    if(curclass._meta_._superMeta_) {
	      curclass = curclass._meta_._superMeta_._class_;
	    } else {
	      curclass = null;
	    }
	  } while(curclass);
	  return null;
	};

	Points.prototype.toString = function() {
	  return JSON.stringify(this);
	};

	Points._meta_ =  {fields:  {}};
	Points._meta_._class_ =  Points;
	Points._meta_.fields["points"] = {};
	Points._meta_.fields["points"].type = Array;
	Points._meta_.fields["points"].elementType = base_Point;

	//
	// Expose the module.
	//
	if (true) {
	module.exports = Points;
	}



/***/ }),
/* 378 */
/***/ (function(module, exports, __webpack_require__) {

	/**
	 * Autogenerated by Avro
	 * 
	 * DO NOT EDIT DIRECTLY
	 */


	/**
	* @constructor
	* @memberof base
	*/
	var ServiceCharge = function() {
	  this._class_ = ServiceCharge;
	  this.id = undefined;
	  this.name = undefined;
	  this.enabled = undefined;
	  this.percentage = undefined;
	  this.percentageDecimal = undefined;
	};


	/**
	* Set the field value
	* Unique identifier
	*
	* @memberof base.ServiceCharge
	* @param {String} id 
	*/
	ServiceCharge.prototype.setId = function(id) {
	  this.id = id;
	};

	/**
	* Get the field value
	* Unique identifier
	* @memberof base.ServiceCharge
	* @return {String} 
	*/
	ServiceCharge.prototype.getId = function() {
	  return this.id;
	};

	/**
	* Set the field value
	* Service charge name
	*
	* @memberof base.ServiceCharge
	* @param {String} name 
	*/
	ServiceCharge.prototype.setName = function(name) {
	  this.name = name;
	};

	/**
	* Get the field value
	* Service charge name
	* @memberof base.ServiceCharge
	* @return {String} 
	*/
	ServiceCharge.prototype.getName = function() {
	  return this.name;
	};

	/**
	* Set the field value
	* If this service charge is enabled
	*
	* @memberof base.ServiceCharge
	* @param {Boolean} enabled 
	*/
	ServiceCharge.prototype.setEnabled = function(enabled) {
	  this.enabled = enabled;
	};

	/**
	* Get the field value
	* If this service charge is enabled
	* @memberof base.ServiceCharge
	* @return {Boolean} 
	*/
	ServiceCharge.prototype.getEnabled = function() {
	  return this.enabled;
	};

	/**
	* Set the field value
	* Deprecated use percentageDecimal instead
	*
	* @memberof base.ServiceCharge
	* @param {Number} percentage must be a long integer
	*/
	ServiceCharge.prototype.setPercentage = function(percentage) {
	  this.percentage = percentage;
	};

	/**
	* Get the field value
	* Deprecated use percentageDecimal instead
	* @memberof base.ServiceCharge
	* @return {Number} must be a long integer
	*/
	ServiceCharge.prototype.getPercentage = function() {
	  return this.percentage;
	};

	/**
	* Set the field value
	* Percent to charge times 10000, e.g. 12.5% will be 125000
	*
	* @memberof base.ServiceCharge
	* @param {Number} percentageDecimal must be a long integer
	*/
	ServiceCharge.prototype.setPercentageDecimal = function(percentageDecimal) {
	  this.percentageDecimal = percentageDecimal;
	};

	/**
	* Get the field value
	* Percent to charge times 10000, e.g. 12.5% will be 125000
	* @memberof base.ServiceCharge
	* @return {Number} must be a long integer
	*/
	ServiceCharge.prototype.getPercentageDecimal = function() {
	  return this.percentageDecimal;
	};

	/**
	* @memberof base.ServiceCharge
	* @private
	*/
	ServiceCharge.prototype.getMetaInfo = function(fieldName) {
	  var curclass = this._class_;
	  do {
	    var fieldMetaInfo = curclass._meta_.fields[fieldName];
	    if(fieldMetaInfo) {
	      return fieldMetaInfo;
	    }
	    if(curclass._meta_._superMeta_) {
	      curclass = curclass._meta_._superMeta_._class_;
	    } else {
	      curclass = null;
	    }
	  } while(curclass);
	  return null;
	};

	ServiceCharge.prototype.toString = function() {
	  return JSON.stringify(this);
	};

	ServiceCharge._meta_ =  {fields:  {}};
	ServiceCharge._meta_._class_ =  ServiceCharge;
	ServiceCharge._meta_.fields["id"] = {};
	ServiceCharge._meta_.fields["id"].type = String;
	ServiceCharge._meta_.fields["name"] = {};
	ServiceCharge._meta_.fields["name"].type = String;
	ServiceCharge._meta_.fields["enabled"] = {};
	ServiceCharge._meta_.fields["enabled"].type = Boolean;
	ServiceCharge._meta_.fields["percentage"] = {};
	ServiceCharge._meta_.fields["percentage"].type = Number;
	ServiceCharge._meta_.fields["percentageDecimal"] = {};
	ServiceCharge._meta_.fields["percentageDecimal"].type = Number;

	//
	// Expose the module.
	//
	if (true) {
	module.exports = ServiceCharge;
	}



/***/ }),
/* 379 */
/***/ (function(module, exports, __webpack_require__) {

	/**
	 * Autogenerated by Avro
	 * 
	 * DO NOT EDIT DIRECTLY
	 */


	/**
	* @constructor
	* @memberof customers
	*/
	var Address = function() {
	  this._class_ = Address;
	  this.id = undefined;
	  this.address1 = undefined;
	  this.address2 = undefined;
	  this.address3 = undefined;
	  this.city = undefined;
	  this.country = undefined;
	  this.state = undefined;
	  this.zip = undefined;
	};


	/**
	* Set the field value
	* @memberof customers.Address
	* @param {String} id 
	*/
	Address.prototype.setId = function(id) {
	  this.id = id;
	};

	/**
	* Get the field value
	* @memberof customers.Address
	* @return {String} 
	*/
	Address.prototype.getId = function() {
	  return this.id;
	};

	/**
	* Set the field value
	* @memberof customers.Address
	* @param {String} address1 
	*/
	Address.prototype.setAddress1 = function(address1) {
	  this.address1 = address1;
	};

	/**
	* Get the field value
	* @memberof customers.Address
	* @return {String} 
	*/
	Address.prototype.getAddress1 = function() {
	  return this.address1;
	};

	/**
	* Set the field value
	* @memberof customers.Address
	* @param {String} address2 
	*/
	Address.prototype.setAddress2 = function(address2) {
	  this.address2 = address2;
	};

	/**
	* Get the field value
	* @memberof customers.Address
	* @return {String} 
	*/
	Address.prototype.getAddress2 = function() {
	  return this.address2;
	};

	/**
	* Set the field value
	* @memberof customers.Address
	* @param {String} address3 
	*/
	Address.prototype.setAddress3 = function(address3) {
	  this.address3 = address3;
	};

	/**
	* Get the field value
	* @memberof customers.Address
	* @return {String} 
	*/
	Address.prototype.getAddress3 = function() {
	  return this.address3;
	};

	/**
	* Set the field value
	* @memberof customers.Address
	* @param {String} city 
	*/
	Address.prototype.setCity = function(city) {
	  this.city = city;
	};

	/**
	* Get the field value
	* @memberof customers.Address
	* @return {String} 
	*/
	Address.prototype.getCity = function() {
	  return this.city;
	};

	/**
	* Set the field value
	* @memberof customers.Address
	* @param {String} country 
	*/
	Address.prototype.setCountry = function(country) {
	  this.country = country;
	};

	/**
	* Get the field value
	* @memberof customers.Address
	* @return {String} 
	*/
	Address.prototype.getCountry = function() {
	  return this.country;
	};

	/**
	* Set the field value
	* @memberof customers.Address
	* @param {String} state 
	*/
	Address.prototype.setState = function(state) {
	  this.state = state;
	};

	/**
	* Get the field value
	* @memberof customers.Address
	* @return {String} 
	*/
	Address.prototype.getState = function() {
	  return this.state;
	};

	/**
	* Set the field value
	* @memberof customers.Address
	* @param {String} zip 
	*/
	Address.prototype.setZip = function(zip) {
	  this.zip = zip;
	};

	/**
	* Get the field value
	* @memberof customers.Address
	* @return {String} 
	*/
	Address.prototype.getZip = function() {
	  return this.zip;
	};

	/**
	* @memberof customers.Address
	* @private
	*/
	Address.prototype.getMetaInfo = function(fieldName) {
	  var curclass = this._class_;
	  do {
	    var fieldMetaInfo = curclass._meta_.fields[fieldName];
	    if(fieldMetaInfo) {
	      return fieldMetaInfo;
	    }
	    if(curclass._meta_._superMeta_) {
	      curclass = curclass._meta_._superMeta_._class_;
	    } else {
	      curclass = null;
	    }
	  } while(curclass);
	  return null;
	};

	Address.prototype.toString = function() {
	  return JSON.stringify(this);
	};

	Address._meta_ =  {fields:  {}};
	Address._meta_._class_ =  Address;
	Address._meta_.fields["id"] = {};
	Address._meta_.fields["id"].type = String;
	Address._meta_.fields["address1"] = {};
	Address._meta_.fields["address1"].type = String;
	Address._meta_.fields["address2"] = {};
	Address._meta_.fields["address2"].type = String;
	Address._meta_.fields["address3"] = {};
	Address._meta_.fields["address3"].type = String;
	Address._meta_.fields["city"] = {};
	Address._meta_.fields["city"].type = String;
	Address._meta_.fields["country"] = {};
	Address._meta_.fields["country"].type = String;
	Address._meta_.fields["state"] = {};
	Address._meta_.fields["state"].type = String;
	Address._meta_.fields["zip"] = {};
	Address._meta_.fields["zip"].type = String;

	//
	// Expose the module.
	//
	if (true) {
	module.exports = Address;
	}



/***/ }),
/* 380 */
/***/ (function(module, exports, __webpack_require__) {

	/**
	 * Autogenerated by Avro
	 * 
	 * DO NOT EDIT DIRECTLY
	 */


	/**
	* @constructor
	* @memberof customers
	*/
	var Card = function() {
	  this._class_ = Card;
	  this.id = undefined;
	  this.first6 = undefined;
	  this.last4 = undefined;
	  this.firstName = undefined;
	  this.lastName = undefined;
	  this.expirationDate = undefined;
	  this.cardType = undefined;
	  this.token = undefined;
	  this.modifiedTime = undefined;
	};


	/**
	* Set the field value
	* @memberof customers.Card
	* @param {String} id 
	*/
	Card.prototype.setId = function(id) {
	  this.id = id;
	};

	/**
	* Get the field value
	* @memberof customers.Card
	* @return {String} 
	*/
	Card.prototype.getId = function() {
	  return this.id;
	};

	/**
	* Set the field value
	* @memberof customers.Card
	* @param {String} first6 
	*/
	Card.prototype.setFirst6 = function(first6) {
	  this.first6 = first6;
	};

	/**
	* Get the field value
	* @memberof customers.Card
	* @return {String} 
	*/
	Card.prototype.getFirst6 = function() {
	  return this.first6;
	};

	/**
	* Set the field value
	* @memberof customers.Card
	* @param {String} last4 
	*/
	Card.prototype.setLast4 = function(last4) {
	  this.last4 = last4;
	};

	/**
	* Get the field value
	* @memberof customers.Card
	* @return {String} 
	*/
	Card.prototype.getLast4 = function() {
	  return this.last4;
	};

	/**
	* Set the field value
	* @memberof customers.Card
	* @param {String} firstName 
	*/
	Card.prototype.setFirstName = function(firstName) {
	  this.firstName = firstName;
	};

	/**
	* Get the field value
	* @memberof customers.Card
	* @return {String} 
	*/
	Card.prototype.getFirstName = function() {
	  return this.firstName;
	};

	/**
	* Set the field value
	* @memberof customers.Card
	* @param {String} lastName 
	*/
	Card.prototype.setLastName = function(lastName) {
	  this.lastName = lastName;
	};

	/**
	* Get the field value
	* @memberof customers.Card
	* @return {String} 
	*/
	Card.prototype.getLastName = function() {
	  return this.lastName;
	};

	/**
	* Set the field value
	* @memberof customers.Card
	* @param {String} expirationDate 
	*/
	Card.prototype.setExpirationDate = function(expirationDate) {
	  this.expirationDate = expirationDate;
	};

	/**
	* Get the field value
	* @memberof customers.Card
	* @return {String} 
	*/
	Card.prototype.getExpirationDate = function() {
	  return this.expirationDate;
	};

	/**
	* Set the field value
	* @memberof customers.Card
	* @param {String} cardType 
	*/
	Card.prototype.setCardType = function(cardType) {
	  this.cardType = cardType;
	};

	/**
	* Get the field value
	* @memberof customers.Card
	* @return {String} 
	*/
	Card.prototype.getCardType = function() {
	  return this.cardType;
	};

	/**
	* Set the field value
	* @memberof customers.Card
	* @param {String} token 
	*/
	Card.prototype.setToken = function(token) {
	  this.token = token;
	};

	/**
	* Get the field value
	* @memberof customers.Card
	* @return {String} 
	*/
	Card.prototype.getToken = function() {
	  return this.token;
	};

	/**
	* Set the field value
	* The timestamp from when this card was last updated.
	*
	* @memberof customers.Card
	* @param {Number} modifiedTime must be a long integer
	*/
	Card.prototype.setModifiedTime = function(modifiedTime) {
	  this.modifiedTime = modifiedTime;
	};

	/**
	* Get the field value
	* The timestamp from when this card was last updated.
	* @memberof customers.Card
	* @return {Number} must be a long integer
	*/
	Card.prototype.getModifiedTime = function() {
	  return this.modifiedTime;
	};

	/**
	* @memberof customers.Card
	* @private
	*/
	Card.prototype.getMetaInfo = function(fieldName) {
	  var curclass = this._class_;
	  do {
	    var fieldMetaInfo = curclass._meta_.fields[fieldName];
	    if(fieldMetaInfo) {
	      return fieldMetaInfo;
	    }
	    if(curclass._meta_._superMeta_) {
	      curclass = curclass._meta_._superMeta_._class_;
	    } else {
	      curclass = null;
	    }
	  } while(curclass);
	  return null;
	};

	Card.prototype.toString = function() {
	  return JSON.stringify(this);
	};

	Card._meta_ =  {fields:  {}};
	Card._meta_._class_ =  Card;
	Card._meta_.fields["id"] = {};
	Card._meta_.fields["id"].type = String;
	Card._meta_.fields["first6"] = {};
	Card._meta_.fields["first6"].type = String;
	Card._meta_.fields["last4"] = {};
	Card._meta_.fields["last4"].type = String;
	Card._meta_.fields["firstName"] = {};
	Card._meta_.fields["firstName"].type = String;
	Card._meta_.fields["lastName"] = {};
	Card._meta_.fields["lastName"].type = String;
	Card._meta_.fields["expirationDate"] = {};
	Card._meta_.fields["expirationDate"].type = String;
	Card._meta_.fields["cardType"] = {};
	Card._meta_.fields["cardType"].type = String;
	Card._meta_.fields["token"] = {};
	Card._meta_.fields["token"].type = String;
	Card._meta_.fields["modifiedTime"] = {};
	Card._meta_.fields["modifiedTime"].type = Number;

	//
	// Expose the module.
	//
	if (true) {
	module.exports = Card;
	}



/***/ }),
/* 381 */
/***/ (function(module, exports, __webpack_require__) {

	/**
	 * Autogenerated by Avro
	 * 
	 * DO NOT EDIT DIRECTLY
	 */

	var customers_Customer = __webpack_require__(67);

	/** Represents a customer that is linked to an external system.  This customer may be persisted in Clover, or it may not. */
	/**
	* @constructor
	* @memberof customers
	*/
	var CustomerInfo = function() {
	  this._class_ = CustomerInfo;
	  this.customer = undefined;
	  this.displayString = undefined;
	  this.externalId = undefined;
	  this.externalSystemName = undefined;
	  this.extras = undefined;
	};


	/**
	* Set the field value
	* The customer object that Clover uses.  This is the base model for a Clover customer, any additional information external systems need should exist in other fields
	*
	* @memberof customers.CustomerInfo
	* @param {customers.Customer} customer 
	*/
	CustomerInfo.prototype.setCustomer = function(customer) {
	  this.customer = customer;
	};

	/**
	* Get the field value
	* The customer object that Clover uses.  This is the base model for a Clover customer, any additional information external systems need should exist in other fields
	* @memberof customers.CustomerInfo
	* @return {customers.Customer} 
	*/
	CustomerInfo.prototype.getCustomer = function() {
	  return this.customer;
	};

	/**
	* Set the field value
	* A custom way to display this customer for an external system
	*
	* @memberof customers.CustomerInfo
	* @param {String} displayString 
	*/
	CustomerInfo.prototype.setDisplayString = function(displayString) {
	  this.displayString = displayString;
	};

	/**
	* Get the field value
	* A custom way to display this customer for an external system
	* @memberof customers.CustomerInfo
	* @return {String} 
	*/
	CustomerInfo.prototype.getDisplayString = function() {
	  return this.displayString;
	};

	/**
	* Set the field value
	* an id for an external system to use to reference this Customer.
	*
	* @memberof customers.CustomerInfo
	* @param {String} externalId 
	*/
	CustomerInfo.prototype.setExternalId = function(externalId) {
	  this.externalId = externalId;
	};

	/**
	* Get the field value
	* an id for an external system to use to reference this Customer.
	* @memberof customers.CustomerInfo
	* @return {String} 
	*/
	CustomerInfo.prototype.getExternalId = function() {
	  return this.externalId;
	};

	/**
	* Set the field value
	* The name of the external system that 'owns' this.  It is the system that understands the link from the externalId to the Customer.
	*
	* @memberof customers.CustomerInfo
	* @param {String} externalSystemName 
	*/
	CustomerInfo.prototype.setExternalSystemName = function(externalSystemName) {
	  this.externalSystemName = externalSystemName;
	};

	/**
	* Get the field value
	* The name of the external system that 'owns' this.  It is the system that understands the link from the externalId to the Customer.
	* @memberof customers.CustomerInfo
	* @return {String} 
	*/
	CustomerInfo.prototype.getExternalSystemName = function() {
	  return this.externalSystemName;
	};

	/**
	* Set the field value
	* Extra data used by external systems.
	*
	* @memberof customers.CustomerInfo
	* @param {Object.<String,String>} extras A map of <String> to <>
	*/
	CustomerInfo.prototype.setExtras = function(extras) {
	  this.extras = extras;
	};

	/**
	* Get the field value
	* Extra data used by external systems.
	* @memberof customers.CustomerInfo
	* @return {Object.<String,String>} A map of <String> to <>
	*/
	CustomerInfo.prototype.getExtras = function() {
	  return this.extras;
	};

	/**
	* @memberof customers.CustomerInfo
	* @private
	*/
	CustomerInfo.prototype.getMetaInfo = function(fieldName) {
	  var curclass = this._class_;
	  do {
	    var fieldMetaInfo = curclass._meta_.fields[fieldName];
	    if(fieldMetaInfo) {
	      return fieldMetaInfo;
	    }
	    if(curclass._meta_._superMeta_) {
	      curclass = curclass._meta_._superMeta_._class_;
	    } else {
	      curclass = null;
	    }
	  } while(curclass);
	  return null;
	};

	CustomerInfo.prototype.toString = function() {
	  return JSON.stringify(this);
	};

	CustomerInfo._meta_ =  {fields:  {}};
	CustomerInfo._meta_._class_ =  CustomerInfo;
	CustomerInfo._meta_.fields["customer"] = {};
	CustomerInfo._meta_.fields["customer"].type = customers_Customer;
	CustomerInfo._meta_.fields["displayString"] = {};
	CustomerInfo._meta_.fields["displayString"].type = String;
	CustomerInfo._meta_.fields["externalId"] = {};
	CustomerInfo._meta_.fields["externalId"].type = String;
	CustomerInfo._meta_.fields["externalSystemName"] = {};
	CustomerInfo._meta_.fields["externalSystemName"].type = String;
	CustomerInfo._meta_.fields["extras"] = {};
	CustomerInfo._meta_.fields["extras"].type = Object;

	//
	// Expose the module.
	//
	if (true) {
	module.exports = CustomerInfo;
	}



/***/ }),
/* 382 */
/***/ (function(module, exports, __webpack_require__) {

	/**
	 * Autogenerated by Avro
	 * 
	 * DO NOT EDIT DIRECTLY
	 */


	/**
	* @constructor
	* @memberof customers
	*/
	var CustomerMetadata = function() {
	  this._class_ = CustomerMetadata;
	  this.businessName = undefined;
	  this.note = undefined;
	  this.dobYear = undefined;
	  this.dobMonth = undefined;
	  this.dobDay = undefined;
	  this.modifiedTime = undefined;
	};


	/**
	* Set the field value
	* The name of the business the customer is associated with.
	*
	* @memberof customers.CustomerMetadata
	* @param {String} businessName 
	*/
	CustomerMetadata.prototype.setBusinessName = function(businessName) {
	  this.businessName = businessName;
	};

	/**
	* Get the field value
	* The name of the business the customer is associated with.
	* @memberof customers.CustomerMetadata
	* @return {String} 
	*/
	CustomerMetadata.prototype.getBusinessName = function() {
	  return this.businessName;
	};

	/**
	* Set the field value
	* A note about the customer.
	*
	* @memberof customers.CustomerMetadata
	* @param {String} note 
	*/
	CustomerMetadata.prototype.setNote = function(note) {
	  this.note = note;
	};

	/**
	* Get the field value
	* A note about the customer.
	* @memberof customers.CustomerMetadata
	* @return {String} 
	*/
	CustomerMetadata.prototype.getNote = function() {
	  return this.note;
	};

	/**
	* Set the field value
	* The year part of the date of birth for this customer. This part of the date of birth is optional, i.e., it's possible that only dobMonth and dobDay are populated.
	*
	* @memberof customers.CustomerMetadata
	* @param {Number} dobYear must be an integer
	*/
	CustomerMetadata.prototype.setDobYear = function(dobYear) {
	  this.dobYear = dobYear;
	};

	/**
	* Get the field value
	* The year part of the date of birth for this customer. This part of the date of birth is optional, i.e., it's possible that only dobMonth and dobDay are populated.
	* @memberof customers.CustomerMetadata
	* @return {Number} must be an integer
	*/
	CustomerMetadata.prototype.getDobYear = function() {
	  return this.dobYear;
	};

	/**
	* Set the field value
	* The month part of the date of birth for this customer.
	*
	* @memberof customers.CustomerMetadata
	* @param {Number} dobMonth must be an integer
	*/
	CustomerMetadata.prototype.setDobMonth = function(dobMonth) {
	  this.dobMonth = dobMonth;
	};

	/**
	* Get the field value
	* The month part of the date of birth for this customer.
	* @memberof customers.CustomerMetadata
	* @return {Number} must be an integer
	*/
	CustomerMetadata.prototype.getDobMonth = function() {
	  return this.dobMonth;
	};

	/**
	* Set the field value
	* The day part of the date of birth for this customer.
	*
	* @memberof customers.CustomerMetadata
	* @param {Number} dobDay must be an integer
	*/
	CustomerMetadata.prototype.setDobDay = function(dobDay) {
	  this.dobDay = dobDay;
	};

	/**
	* Get the field value
	* The day part of the date of birth for this customer.
	* @memberof customers.CustomerMetadata
	* @return {Number} must be an integer
	*/
	CustomerMetadata.prototype.getDobDay = function() {
	  return this.dobDay;
	};

	/**
	* Set the field value
	* The timestamp from when this customer's data was last updated.
	*
	* @memberof customers.CustomerMetadata
	* @param {Number} modifiedTime must be a long integer
	*/
	CustomerMetadata.prototype.setModifiedTime = function(modifiedTime) {
	  this.modifiedTime = modifiedTime;
	};

	/**
	* Get the field value
	* The timestamp from when this customer's data was last updated.
	* @memberof customers.CustomerMetadata
	* @return {Number} must be a long integer
	*/
	CustomerMetadata.prototype.getModifiedTime = function() {
	  return this.modifiedTime;
	};

	/**
	* @memberof customers.CustomerMetadata
	* @private
	*/
	CustomerMetadata.prototype.getMetaInfo = function(fieldName) {
	  var curclass = this._class_;
	  do {
	    var fieldMetaInfo = curclass._meta_.fields[fieldName];
	    if(fieldMetaInfo) {
	      return fieldMetaInfo;
	    }
	    if(curclass._meta_._superMeta_) {
	      curclass = curclass._meta_._superMeta_._class_;
	    } else {
	      curclass = null;
	    }
	  } while(curclass);
	  return null;
	};

	CustomerMetadata.prototype.toString = function() {
	  return JSON.stringify(this);
	};

	CustomerMetadata._meta_ =  {fields:  {}};
	CustomerMetadata._meta_._class_ =  CustomerMetadata;
	CustomerMetadata._meta_.fields["businessName"] = {};
	CustomerMetadata._meta_.fields["businessName"].type = String;
	CustomerMetadata._meta_.fields["note"] = {};
	CustomerMetadata._meta_.fields["note"].type = String;
	CustomerMetadata._meta_.fields["dobYear"] = {};
	CustomerMetadata._meta_.fields["dobYear"].type = Number;
	CustomerMetadata._meta_.fields["dobMonth"] = {};
	CustomerMetadata._meta_.fields["dobMonth"].type = Number;
	CustomerMetadata._meta_.fields["dobDay"] = {};
	CustomerMetadata._meta_.fields["dobDay"].type = Number;
	CustomerMetadata._meta_.fields["modifiedTime"] = {};
	CustomerMetadata._meta_.fields["modifiedTime"].type = Number;

	//
	// Expose the module.
	//
	if (true) {
	module.exports = CustomerMetadata;
	}



/***/ }),
/* 383 */
/***/ (function(module, exports, __webpack_require__) {

	/**
	 * Autogenerated by Avro
	 * 
	 * DO NOT EDIT DIRECTLY
	 */


	/**
	* @constructor
	* @memberof customers
	*/
	var EmailAddress = function() {
	  this._class_ = EmailAddress;
	  this.id = undefined;
	  this.emailAddress = undefined;
	  this.verifiedTime = undefined;
	  this.primaryEmail = undefined;
	};


	/**
	* Set the field value
	* @memberof customers.EmailAddress
	* @param {String} id 
	*/
	EmailAddress.prototype.setId = function(id) {
	  this.id = id;
	};

	/**
	* Get the field value
	* @memberof customers.EmailAddress
	* @return {String} 
	*/
	EmailAddress.prototype.getId = function() {
	  return this.id;
	};

	/**
	* Set the field value
	* @memberof customers.EmailAddress
	* @param {String} emailAddress 
	*/
	EmailAddress.prototype.setEmailAddress = function(emailAddress) {
	  this.emailAddress = emailAddress;
	};

	/**
	* Get the field value
	* @memberof customers.EmailAddress
	* @return {String} 
	*/
	EmailAddress.prototype.getEmailAddress = function() {
	  return this.emailAddress;
	};

	/**
	* Set the field value
	* @memberof customers.EmailAddress
	* @param {Number} verifiedTime must be a long integer
	*/
	EmailAddress.prototype.setVerifiedTime = function(verifiedTime) {
	  this.verifiedTime = verifiedTime;
	};

	/**
	* Get the field value
	* @memberof customers.EmailAddress
	* @return {Number} must be a long integer
	*/
	EmailAddress.prototype.getVerifiedTime = function() {
	  return this.verifiedTime;
	};

	/**
	* Set the field value
	* @memberof customers.EmailAddress
	* @param {Boolean} primaryEmail 
	*/
	EmailAddress.prototype.setPrimaryEmail = function(primaryEmail) {
	  this.primaryEmail = primaryEmail;
	};

	/**
	* Get the field value
	* @memberof customers.EmailAddress
	* @return {Boolean} 
	*/
	EmailAddress.prototype.getPrimaryEmail = function() {
	  return this.primaryEmail;
	};

	/**
	* @memberof customers.EmailAddress
	* @private
	*/
	EmailAddress.prototype.getMetaInfo = function(fieldName) {
	  var curclass = this._class_;
	  do {
	    var fieldMetaInfo = curclass._meta_.fields[fieldName];
	    if(fieldMetaInfo) {
	      return fieldMetaInfo;
	    }
	    if(curclass._meta_._superMeta_) {
	      curclass = curclass._meta_._superMeta_._class_;
	    } else {
	      curclass = null;
	    }
	  } while(curclass);
	  return null;
	};

	EmailAddress.prototype.toString = function() {
	  return JSON.stringify(this);
	};

	EmailAddress._meta_ =  {fields:  {}};
	EmailAddress._meta_._class_ =  EmailAddress;
	EmailAddress._meta_.fields["id"] = {};
	EmailAddress._meta_.fields["id"].type = String;
	EmailAddress._meta_.fields["emailAddress"] = {};
	EmailAddress._meta_.fields["emailAddress"].type = String;
	EmailAddress._meta_.fields["verifiedTime"] = {};
	EmailAddress._meta_.fields["verifiedTime"].type = Number;
	EmailAddress._meta_.fields["primaryEmail"] = {};
	EmailAddress._meta_.fields["primaryEmail"].type = Boolean;

	//
	// Expose the module.
	//
	if (true) {
	module.exports = EmailAddress;
	}



/***/ }),
/* 384 */
/***/ (function(module, exports, __webpack_require__) {

	/**
	 * Autogenerated by Avro
	 * 
	 * DO NOT EDIT DIRECTLY
	 */

	var base_Reference = __webpack_require__(5);

	/**
	* @constructor
	* @memberof customers
	*/
	var IdentityDocument = function() {
	  this._class_ = IdentityDocument;
	  this.id = undefined;
	  this.type = undefined;
	  this.number = undefined;
	  this.createdTime = undefined;
	  this.modifiedTime = undefined;
	  this.deletedTime = undefined;
	  this.payment = undefined;
	};


	/**
	* Set the field value
	* Unique identifier
	*
	* @memberof customers.IdentityDocument
	* @param {String} id 
	*/
	IdentityDocument.prototype.setId = function(id) {
	  this.id = id;
	};

	/**
	* Get the field value
	* Unique identifier
	* @memberof customers.IdentityDocument
	* @return {String} 
	*/
	IdentityDocument.prototype.getId = function() {
	  return this.id;
	};

	/**
	* Set the field value
	* Type of personal identification: National Document, Passport, etc
	*
	* @memberof customers.IdentityDocument
	* @param {String} type 
	*/
	IdentityDocument.prototype.setType = function(type) {
	  this.type = type;
	};

	/**
	* Get the field value
	* Type of personal identification: National Document, Passport, etc
	* @memberof customers.IdentityDocument
	* @return {String} 
	*/
	IdentityDocument.prototype.getType = function() {
	  return this.type;
	};

	/**
	* Set the field value
	* The identification number
	*
	* @memberof customers.IdentityDocument
	* @param {String} number 
	*/
	IdentityDocument.prototype.setNumber = function(number) {
	  this.number = number;
	};

	/**
	* Get the field value
	* The identification number
	* @memberof customers.IdentityDocument
	* @return {String} 
	*/
	IdentityDocument.prototype.getNumber = function() {
	  return this.number;
	};

	/**
	* Set the field value
	* Created timestamp.
	*
	* @memberof customers.IdentityDocument
	* @param {Number} createdTime must be a long integer
	*/
	IdentityDocument.prototype.setCreatedTime = function(createdTime) {
	  this.createdTime = createdTime;
	};

	/**
	* Get the field value
	* Created timestamp.
	* @memberof customers.IdentityDocument
	* @return {Number} must be a long integer
	*/
	IdentityDocument.prototype.getCreatedTime = function() {
	  return this.createdTime;
	};

	/**
	* Set the field value
	* Modified timestamp.
	*
	* @memberof customers.IdentityDocument
	* @param {Number} modifiedTime must be a long integer
	*/
	IdentityDocument.prototype.setModifiedTime = function(modifiedTime) {
	  this.modifiedTime = modifiedTime;
	};

	/**
	* Get the field value
	* Modified timestamp.
	* @memberof customers.IdentityDocument
	* @return {Number} must be a long integer
	*/
	IdentityDocument.prototype.getModifiedTime = function() {
	  return this.modifiedTime;
	};

	/**
	* Set the field value
	* Deleted timestamp.
	*
	* @memberof customers.IdentityDocument
	* @param {Number} deletedTime must be a long integer
	*/
	IdentityDocument.prototype.setDeletedTime = function(deletedTime) {
	  this.deletedTime = deletedTime;
	};

	/**
	* Get the field value
	* Deleted timestamp.
	* @memberof customers.IdentityDocument
	* @return {Number} must be a long integer
	*/
	IdentityDocument.prototype.getDeletedTime = function() {
	  return this.deletedTime;
	};

	/**
	* Set the field value
	* @memberof customers.IdentityDocument
	* @param {base.Reference} payment 
	*/
	IdentityDocument.prototype.setPayment = function(payment) {
	  this.payment = payment;
	};

	/**
	* Get the field value
	* @memberof customers.IdentityDocument
	* @return {base.Reference} 
	*/
	IdentityDocument.prototype.getPayment = function() {
	  return this.payment;
	};

	/**
	* @memberof customers.IdentityDocument
	* @private
	*/
	IdentityDocument.prototype.getMetaInfo = function(fieldName) {
	  var curclass = this._class_;
	  do {
	    var fieldMetaInfo = curclass._meta_.fields[fieldName];
	    if(fieldMetaInfo) {
	      return fieldMetaInfo;
	    }
	    if(curclass._meta_._superMeta_) {
	      curclass = curclass._meta_._superMeta_._class_;
	    } else {
	      curclass = null;
	    }
	  } while(curclass);
	  return null;
	};

	IdentityDocument.prototype.toString = function() {
	  return JSON.stringify(this);
	};

	IdentityDocument._meta_ =  {fields:  {}};
	IdentityDocument._meta_._class_ =  IdentityDocument;
	IdentityDocument._meta_.fields["id"] = {};
	IdentityDocument._meta_.fields["id"].type = String;
	IdentityDocument._meta_.fields["type"] = {};
	IdentityDocument._meta_.fields["type"].type = String;
	IdentityDocument._meta_.fields["number"] = {};
	IdentityDocument._meta_.fields["number"].type = String;
	IdentityDocument._meta_.fields["createdTime"] = {};
	IdentityDocument._meta_.fields["createdTime"].type = Number;
	IdentityDocument._meta_.fields["modifiedTime"] = {};
	IdentityDocument._meta_.fields["modifiedTime"].type = Number;
	IdentityDocument._meta_.fields["deletedTime"] = {};
	IdentityDocument._meta_.fields["deletedTime"].type = Number;
	IdentityDocument._meta_.fields["payment"] = {};
	IdentityDocument._meta_.fields["payment"].type = base_Reference;

	//
	// Expose the module.
	//
	if (true) {
	module.exports = IdentityDocument;
	}



/***/ }),
/* 385 */
/***/ (function(module, exports, __webpack_require__) {

	/**
	 * Autogenerated by Avro
	 * 
	 * DO NOT EDIT DIRECTLY
	 */


	/**
	* @constructor
	* @memberof customers
	*/
	var PhoneNumber = function() {
	  this._class_ = PhoneNumber;
	  this.id = undefined;
	  this.phoneNumber = undefined;
	};


	/**
	* Set the field value
	* @memberof customers.PhoneNumber
	* @param {String} id 
	*/
	PhoneNumber.prototype.setId = function(id) {
	  this.id = id;
	};

	/**
	* Get the field value
	* @memberof customers.PhoneNumber
	* @return {String} 
	*/
	PhoneNumber.prototype.getId = function() {
	  return this.id;
	};

	/**
	* Set the field value
	* @memberof customers.PhoneNumber
	* @param {String} phoneNumber 
	*/
	PhoneNumber.prototype.setPhoneNumber = function(phoneNumber) {
	  this.phoneNumber = phoneNumber;
	};

	/**
	* Get the field value
	* @memberof customers.PhoneNumber
	* @return {String} 
	*/
	PhoneNumber.prototype.getPhoneNumber = function() {
	  return this.phoneNumber;
	};

	/**
	* @memberof customers.PhoneNumber
	* @private
	*/
	PhoneNumber.prototype.getMetaInfo = function(fieldName) {
	  var curclass = this._class_;
	  do {
	    var fieldMetaInfo = curclass._meta_.fields[fieldName];
	    if(fieldMetaInfo) {
	      return fieldMetaInfo;
	    }
	    if(curclass._meta_._superMeta_) {
	      curclass = curclass._meta_._superMeta_._class_;
	    } else {
	      curclass = null;
	    }
	  } while(curclass);
	  return null;
	};

	PhoneNumber.prototype.toString = function() {
	  return JSON.stringify(this);
	};

	PhoneNumber._meta_ =  {fields:  {}};
	PhoneNumber._meta_._class_ =  PhoneNumber;
	PhoneNumber._meta_.fields["id"] = {};
	PhoneNumber._meta_.fields["id"].type = String;
	PhoneNumber._meta_.fields["phoneNumber"] = {};
	PhoneNumber._meta_.fields["phoneNumber"].type = String;

	//
	// Expose the module.
	//
	if (true) {
	module.exports = PhoneNumber;
	}



/***/ }),
/* 386 */
/***/ (function(module, exports, __webpack_require__) {

	/**
	 * Autogenerated by Avro
	 * 
	 * DO NOT EDIT DIRECTLY
	 */


	/**
	* @constructor
	* @memberof device
	*/
	var BundleItem = function() {
	  this._class_ = BundleItem;
	  this.equipmentCode = undefined;
	  this.equipmentCodeDesc = undefined;
	  this.quantity = undefined;
	  this.version = undefined;
	};


	/**
	* Set the field value
	* @memberof device.BundleItem
	* @param {String} equipmentCode 
	*/
	BundleItem.prototype.setEquipmentCode = function(equipmentCode) {
	  this.equipmentCode = equipmentCode;
	};

	/**
	* Get the field value
	* @memberof device.BundleItem
	* @return {String} 
	*/
	BundleItem.prototype.getEquipmentCode = function() {
	  return this.equipmentCode;
	};

	/**
	* Set the field value
	* @memberof device.BundleItem
	* @param {String} equipmentCodeDesc 
	*/
	BundleItem.prototype.setEquipmentCodeDesc = function(equipmentCodeDesc) {
	  this.equipmentCodeDesc = equipmentCodeDesc;
	};

	/**
	* Get the field value
	* @memberof device.BundleItem
	* @return {String} 
	*/
	BundleItem.prototype.getEquipmentCodeDesc = function() {
	  return this.equipmentCodeDesc;
	};

	/**
	* Set the field value
	* @memberof device.BundleItem
	* @param {Number} quantity must be an integer
	*/
	BundleItem.prototype.setQuantity = function(quantity) {
	  this.quantity = quantity;
	};

	/**
	* Get the field value
	* @memberof device.BundleItem
	* @return {Number} must be an integer
	*/
	BundleItem.prototype.getQuantity = function() {
	  return this.quantity;
	};

	/**
	* Set the field value
	* @memberof device.BundleItem
	* @param {Number} version must be an integer
	*/
	BundleItem.prototype.setVersion = function(version) {
	  this.version = version;
	};

	/**
	* Get the field value
	* @memberof device.BundleItem
	* @return {Number} must be an integer
	*/
	BundleItem.prototype.getVersion = function() {
	  return this.version;
	};

	/**
	* @memberof device.BundleItem
	* @private
	*/
	BundleItem.prototype.getMetaInfo = function(fieldName) {
	  var curclass = this._class_;
	  do {
	    var fieldMetaInfo = curclass._meta_.fields[fieldName];
	    if(fieldMetaInfo) {
	      return fieldMetaInfo;
	    }
	    if(curclass._meta_._superMeta_) {
	      curclass = curclass._meta_._superMeta_._class_;
	    } else {
	      curclass = null;
	    }
	  } while(curclass);
	  return null;
	};

	BundleItem.prototype.toString = function() {
	  return JSON.stringify(this);
	};

	BundleItem._meta_ =  {fields:  {}};
	BundleItem._meta_._class_ =  BundleItem;
	BundleItem._meta_.fields["equipmentCode"] = {};
	BundleItem._meta_.fields["equipmentCode"].type = String;
	BundleItem._meta_.fields["equipmentCodeDesc"] = {};
	BundleItem._meta_.fields["equipmentCodeDesc"].type = String;
	BundleItem._meta_.fields["quantity"] = {};
	BundleItem._meta_.fields["quantity"].type = Number;
	BundleItem._meta_.fields["version"] = {};
	BundleItem._meta_.fields["version"].type = Number;

	//
	// Expose the module.
	//
	if (true) {
	module.exports = BundleItem;
	}



/***/ }),
/* 387 */
/***/ (function(module, exports, __webpack_require__) {

	/**
	 * Autogenerated by Avro
	 * 
	 * DO NOT EDIT DIRECTLY
	 */


	/**
	* @memberof device
	* @enum {string}
	*/
	var DeviceAccessoryBuildType = {
	  ENG : "ENG",
	  USER : "USER",
	  USERDEBUG : "USERDEBUG"
	};


	//
	// Expose the module.
	//
	if (true) {
	module.exports = DeviceAccessoryBuildType;
	}



/***/ }),
/* 388 */
/***/ (function(module, exports, __webpack_require__) {

	/**
	 * Autogenerated by Avro
	 * 
	 * DO NOT EDIT DIRECTLY
	 */


	/**
	* @memberof device
	* @enum {string}
	*/
	var DeviceProvisionState = {
	  NOT_ASSOCIATED : "NOT_ASSOCIATED",
	  DISASSOCIATED : "DISASSOCIATED",
	  ASSOCIATED : "ASSOCIATED"
	};


	//
	// Expose the module.
	//
	if (true) {
	module.exports = DeviceProvisionState;
	}



/***/ }),
/* 389 */
/***/ (function(module, exports, __webpack_require__) {

	/**
	 * Autogenerated by Avro
	 * 
	 * DO NOT EDIT DIRECTLY
	 */


	/**
	* @memberof device
	* @enum {string}
	*/
	var RomBuildType = {
	  ENG : "ENG",
	  USER : "USER"
	};


	//
	// Expose the module.
	//
	if (true) {
	module.exports = RomBuildType;
	}



/***/ }),
/* 390 */
/***/ (function(module, exports, __webpack_require__) {

	/**
	 * Autogenerated by Avro
	 * 
	 * DO NOT EDIT DIRECTLY
	 */

	var employees_AccountRole = __webpack_require__(237);
	var base_Reference = __webpack_require__(5);

	/**
	* @constructor
	* @memberof employees
	*/
	var Employee = function() {
	  this._class_ = Employee;
	  this.id = undefined;
	  this.name = undefined;
	  this.nickname = undefined;
	  this.customId = undefined;
	  this.email = undefined;
	  this.inviteSent = undefined;
	  this.claimedTime = undefined;
	  this.deletedTime = undefined;
	  this.pin = undefined;
	  this.unhashedPin = undefined;
	  this.role = undefined;
	  this.roles = undefined;
	  this.isOwner = undefined;
	  this.shifts = undefined;
	  this.payments = undefined;
	  this.orders = undefined;
	  this.employeeCards = undefined;
	  this.merchant = undefined;
	};


	/**
	* Set the field value
	* Unique identifier
	*
	* @memberof employees.Employee
	* @param {String} id 
	*/
	Employee.prototype.setId = function(id) {
	  this.id = id;
	};

	/**
	* Get the field value
	* Unique identifier
	* @memberof employees.Employee
	* @return {String} 
	*/
	Employee.prototype.getId = function() {
	  return this.id;
	};

	/**
	* Set the field value
	* Full name of the employee
	*
	* @memberof employees.Employee
	* @param {Null|String} name 
	*/
	Employee.prototype.setName = function(name) {
	  this.name = name;
	};

	/**
	* Get the field value
	* Full name of the employee
	* @memberof employees.Employee
	* @return {Null|String} 
	*/
	Employee.prototype.getName = function() {
	  return this.name;
	};

	/**
	* Set the field value
	* Nickname of the employee (shows up on receipts)
	*
	* @memberof employees.Employee
	* @param {Null|String} nickname 
	*/
	Employee.prototype.setNickname = function(nickname) {
	  this.nickname = nickname;
	};

	/**
	* Get the field value
	* Nickname of the employee (shows up on receipts)
	* @memberof employees.Employee
	* @return {Null|String} 
	*/
	Employee.prototype.getNickname = function() {
	  return this.nickname;
	};

	/**
	* Set the field value
	* Custom ID of the employee
	*
	* @memberof employees.Employee
	* @param {Null|String} customId 
	*/
	Employee.prototype.setCustomId = function(customId) {
	  this.customId = customId;
	};

	/**
	* Get the field value
	* Custom ID of the employee
	* @memberof employees.Employee
	* @return {Null|String} 
	*/
	Employee.prototype.getCustomId = function() {
	  return this.customId;
	};

	/**
	* Set the field value
	* Email of the employee (optional)
	*
	* @memberof employees.Employee
	* @param {Null|String} email 
	*/
	Employee.prototype.setEmail = function(email) {
	  this.email = email;
	};

	/**
	* Get the field value
	* Email of the employee (optional)
	* @memberof employees.Employee
	* @return {Null|String} 
	*/
	Employee.prototype.getEmail = function() {
	  return this.email;
	};

	/**
	* Set the field value
	* Returns true if this employee was sent an invite to activate their account
	*
	* @memberof employees.Employee
	* @param {Null|Boolean} inviteSent 
	*/
	Employee.prototype.setInviteSent = function(inviteSent) {
	  this.inviteSent = inviteSent;
	};

	/**
	* Get the field value
	* Returns true if this employee was sent an invite to activate their account
	* @memberof employees.Employee
	* @return {Null|Boolean} 
	*/
	Employee.prototype.getInviteSent = function() {
	  return this.inviteSent;
	};

	/**
	* Set the field value
	* Timestamp of when this employee claimed their account
	*
	* @memberof employees.Employee
	* @param {Null|Number} claimedTime must be a long integer
	*/
	Employee.prototype.setClaimedTime = function(claimedTime) {
	  this.claimedTime = claimedTime;
	};

	/**
	* Get the field value
	* Timestamp of when this employee claimed their account
	* @memberof employees.Employee
	* @return {Null|Number} must be a long integer
	*/
	Employee.prototype.getClaimedTime = function() {
	  return this.claimedTime;
	};

	/**
	* Set the field value
	* Timestamp of when this employee was deleted
	*
	* @memberof employees.Employee
	* @param {Null|Number} deletedTime must be a long integer
	*/
	Employee.prototype.setDeletedTime = function(deletedTime) {
	  this.deletedTime = deletedTime;
	};

	/**
	* Get the field value
	* Timestamp of when this employee was deleted
	* @memberof employees.Employee
	* @return {Null|Number} must be a long integer
	*/
	Employee.prototype.getDeletedTime = function() {
	  return this.deletedTime;
	};

	/**
	* Set the field value
	* Employee PIN (hashed)
	*
	* @memberof employees.Employee
	* @param {Null|String} pin 
	*/
	Employee.prototype.setPin = function(pin) {
	  this.pin = pin;
	};

	/**
	* Get the field value
	* Employee PIN (hashed)
	* @memberof employees.Employee
	* @return {Null|String} 
	*/
	Employee.prototype.getPin = function() {
	  return this.pin;
	};

	/**
	* Set the field value
	* Employee PIN
	*
	* @memberof employees.Employee
	* @param {Null|String} unhashedPin 
	*/
	Employee.prototype.setUnhashedPin = function(unhashedPin) {
	  this.unhashedPin = unhashedPin;
	};

	/**
	* Get the field value
	* Employee PIN
	* @memberof employees.Employee
	* @return {Null|String} 
	*/
	Employee.prototype.getUnhashedPin = function() {
	  return this.unhashedPin;
	};

	/**
	* Set the field value
	* Employee System Role
	*
	* @memberof employees.Employee
	* @param {Null|employees.AccountRole} role 
	*/
	Employee.prototype.setRole = function(role) {
	  this.role = role;
	};

	/**
	* Get the field value
	* Employee System Role
	* @memberof employees.Employee
	* @return {Null|employees.AccountRole} 
	*/
	Employee.prototype.getRole = function() {
	  return this.role;
	};

	/**
	* Set the field value
	* @memberof employees.Employee
	* @param {Null|Array.<base.Reference>} roles An array of 
	*/
	Employee.prototype.setRoles = function(roles) {
	  this.roles = roles;
	};

	/**
	* Get the field value
	* @memberof employees.Employee
	* @return {Null|Array.<base.Reference>} An array of 
	*/
	Employee.prototype.getRoles = function() {
	  return this.roles;
	};

	/**
	* Set the field value
	* Returns true if this employee is the owner account for this merchant
	*
	* @memberof employees.Employee
	* @param {Null|Boolean} isOwner 
	*/
	Employee.prototype.setIsOwner = function(isOwner) {
	  this.isOwner = isOwner;
	};

	/**
	* Get the field value
	* Returns true if this employee is the owner account for this merchant
	* @memberof employees.Employee
	* @return {Null|Boolean} 
	*/
	Employee.prototype.getIsOwner = function() {
	  return this.isOwner;
	};

	/**
	* Set the field value
	* This employee's shifts
	*
	* @memberof employees.Employee
	* @param {Null|Array.<base.Reference>} shifts An array of 
	*/
	Employee.prototype.setShifts = function(shifts) {
	  this.shifts = shifts;
	};

	/**
	* Get the field value
	* This employee's shifts
	* @memberof employees.Employee
	* @return {Null|Array.<base.Reference>} An array of 
	*/
	Employee.prototype.getShifts = function() {
	  return this.shifts;
	};

	/**
	* Set the field value
	* This employee's payments
	*
	* @memberof employees.Employee
	* @param {Null|Array.<base.Reference>} payments An array of 
	*/
	Employee.prototype.setPayments = function(payments) {
	  this.payments = payments;
	};

	/**
	* Get the field value
	* This employee's payments
	* @memberof employees.Employee
	* @return {Null|Array.<base.Reference>} An array of 
	*/
	Employee.prototype.getPayments = function() {
	  return this.payments;
	};

	/**
	* Set the field value
	* This employee's orders
	*
	* @memberof employees.Employee
	* @param {Null|Array.<base.Reference>} orders An array of 
	*/
	Employee.prototype.setOrders = function(orders) {
	  this.orders = orders;
	};

	/**
	* Get the field value
	* This employee's orders
	* @memberof employees.Employee
	* @return {Null|Array.<base.Reference>} An array of 
	*/
	Employee.prototype.getOrders = function() {
	  return this.orders;
	};

	/**
	* Set the field value
	* This employee's employee cards
	*
	* @memberof employees.Employee
	* @param {Null|Array.<base.Reference>} employeeCards An array of 
	*/
	Employee.prototype.setEmployeeCards = function(employeeCards) {
	  this.employeeCards = employeeCards;
	};

	/**
	* Get the field value
	* This employee's employee cards
	* @memberof employees.Employee
	* @return {Null|Array.<base.Reference>} An array of 
	*/
	Employee.prototype.getEmployeeCards = function() {
	  return this.employeeCards;
	};

	/**
	* Set the field value
	* The merchant employing this employee
	*
	* @memberof employees.Employee
	* @param {Null|base.Reference} merchant 
	*/
	Employee.prototype.setMerchant = function(merchant) {
	  this.merchant = merchant;
	};

	/**
	* Get the field value
	* The merchant employing this employee
	* @memberof employees.Employee
	* @return {Null|base.Reference} 
	*/
	Employee.prototype.getMerchant = function() {
	  return this.merchant;
	};

	/**
	* @memberof employees.Employee
	* @private
	*/
	Employee.prototype.getMetaInfo = function(fieldName) {
	  var curclass = this._class_;
	  do {
	    var fieldMetaInfo = curclass._meta_.fields[fieldName];
	    if(fieldMetaInfo) {
	      return fieldMetaInfo;
	    }
	    if(curclass._meta_._superMeta_) {
	      curclass = curclass._meta_._superMeta_._class_;
	    } else {
	      curclass = null;
	    }
	  } while(curclass);
	  return null;
	};

	Employee.prototype.toString = function() {
	  return JSON.stringify(this);
	};

	Employee._meta_ =  {fields:  {}};
	Employee._meta_._class_ =  Employee;
	Employee._meta_.fields["id"] = {};
	Employee._meta_.fields["id"].type = String;
	Employee._meta_.fields["name"] = {};
	Employee._meta_.fields["name"].type = String;
	Employee._meta_.fields["nickname"] = {};
	Employee._meta_.fields["nickname"].type = String;
	Employee._meta_.fields["customId"] = {};
	Employee._meta_.fields["customId"].type = String;
	Employee._meta_.fields["email"] = {};
	Employee._meta_.fields["email"].type = String;
	Employee._meta_.fields["inviteSent"] = {};
	Employee._meta_.fields["inviteSent"].type = Boolean;
	Employee._meta_.fields["claimedTime"] = {};
	Employee._meta_.fields["claimedTime"].type = Number;
	Employee._meta_.fields["deletedTime"] = {};
	Employee._meta_.fields["deletedTime"].type = Number;
	Employee._meta_.fields["pin"] = {};
	Employee._meta_.fields["pin"].type = String;
	Employee._meta_.fields["unhashedPin"] = {};
	Employee._meta_.fields["unhashedPin"].type = String;
	Employee._meta_.fields["role"] = {};
	Employee._meta_.fields["role"].type = employees_AccountRole;
	Employee._meta_.fields["roles"] = {};
	Employee._meta_.fields["roles"].type = Array;
	Employee._meta_.fields["roles"].elementType = base_Reference;
	Employee._meta_.fields["isOwner"] = {};
	Employee._meta_.fields["isOwner"].type = Boolean;
	Employee._meta_.fields["shifts"] = {};
	Employee._meta_.fields["shifts"].type = Array;
	Employee._meta_.fields["shifts"].elementType = base_Reference;
	Employee._meta_.fields["payments"] = {};
	Employee._meta_.fields["payments"].type = Array;
	Employee._meta_.fields["payments"].elementType = base_Reference;
	Employee._meta_.fields["orders"] = {};
	Employee._meta_.fields["orders"].type = Array;
	Employee._meta_.fields["orders"].elementType = base_Reference;
	Employee._meta_.fields["employeeCards"] = {};
	Employee._meta_.fields["employeeCards"].type = Array;
	Employee._meta_.fields["employeeCards"].elementType = base_Reference;
	Employee._meta_.fields["merchant"] = {};
	Employee._meta_.fields["merchant"].type = base_Reference;

	//
	// Expose the module.
	//
	if (true) {
	module.exports = Employee;
	}



/***/ }),
/* 391 */
/***/ (function(module, exports, __webpack_require__) {

	/**
	 * Autogenerated by Avro
	 * 
	 * DO NOT EDIT DIRECTLY
	 */


	/**
	* @memberof employees
	* @enum {string}
	*/
	var EmployeeCardStatus = {
	  ACTIVE : "ACTIVE",
	  DISABLED : "DISABLED"
	};


	//
	// Expose the module.
	//
	if (true) {
	module.exports = EmployeeCardStatus;
	}



/***/ }),
/* 392 */
/***/ (function(module, exports, __webpack_require__) {

	/**
	 * Autogenerated by Avro
	 * 
	 * DO NOT EDIT DIRECTLY
	 */


	/**
	* @memberof employees
	* @enum {string}
	*/
	var EmployeePermission = {
	  MERCHANT_R : "MERCHANT_R",
	  MERCHANT_W : "MERCHANT_W",
	  PAYMENTS_R : "PAYMENTS_R",
	  PAYMENTS_W : "PAYMENTS_W",
	  ORDERS_R : "ORDERS_R",
	  ORDERS_W : "ORDERS_W",
	  PROCESS_CARDS : "PROCESS_CARDS"
	};


	//
	// Expose the module.
	//
	if (true) {
	module.exports = EmployeePermission;
	}



/***/ }),
/* 393 */
/***/ (function(module, exports, __webpack_require__) {

	/**
	 * Autogenerated by Avro
	 * 
	 * DO NOT EDIT DIRECTLY
	 */


	/**
	* @memberof employees
	* @enum {string}
	*/
	var Permission = {
	  ORDERS_R : "ORDERS_R",
	  ORDERS_W : "ORDERS_W",
	  INVENTORY_R : "INVENTORY_R",
	  INVENTORY_W : "INVENTORY_W",
	  PAYMENTS_R : "PAYMENTS_R",
	  PAYMENTS_W : "PAYMENTS_W",
	  CUSTOMERS_R : "CUSTOMERS_R",
	  CUSTOMERS_W : "CUSTOMERS_W",
	  EMPLOYEES_R : "EMPLOYEES_R",
	  EMPLOYEES_W : "EMPLOYEES_W",
	  MERCHANT_R : "MERCHANT_R",
	  MERCHANT_W : "MERCHANT_W"
	};


	//
	// Expose the module.
	//
	if (true) {
	module.exports = Permission;
	}



/***/ }),
/* 394 */
/***/ (function(module, exports, __webpack_require__) {

	/**
	 * Autogenerated by Avro
	 * 
	 * DO NOT EDIT DIRECTLY
	 */

	var employees_Permission = __webpack_require__(393);

	/**
	* @constructor
	* @memberof employees
	*/
	var Permissions = function() {
	  this._class_ = Permissions;
	  this.id = undefined;
	  this.bits = undefined;
	  this.readablePermissions = undefined;
	};


	/**
	* Set the field value
	* Unique identifier
	*
	* @memberof employees.Permissions
	* @param {String} id 
	*/
	Permissions.prototype.setId = function(id) {
	  this.id = id;
	};

	/**
	* Get the field value
	* Unique identifier
	* @memberof employees.Permissions
	* @return {String} 
	*/
	Permissions.prototype.getId = function() {
	  return this.id;
	};

	/**
	* Set the field value
	* A bitmap representing the permissions
	*
	* @memberof employees.Permissions
	* @param {Number} bits must be a long integer
	*/
	Permissions.prototype.setBits = function(bits) {
	  this.bits = bits;
	};

	/**
	* Get the field value
	* A bitmap representing the permissions
	* @memberof employees.Permissions
	* @return {Number} must be a long integer
	*/
	Permissions.prototype.getBits = function() {
	  return this.bits;
	};

	/**
	* Set the field value
	* A readable list of permissions
	*
	* @memberof employees.Permissions
	* @param {Array.<employees.Permission>} readablePermissions An array of 
	*/
	Permissions.prototype.setReadablePermissions = function(readablePermissions) {
	  this.readablePermissions = readablePermissions;
	};

	/**
	* Get the field value
	* A readable list of permissions
	* @memberof employees.Permissions
	* @return {Array.<employees.Permission>} An array of 
	*/
	Permissions.prototype.getReadablePermissions = function() {
	  return this.readablePermissions;
	};

	/**
	* @memberof employees.Permissions
	* @private
	*/
	Permissions.prototype.getMetaInfo = function(fieldName) {
	  var curclass = this._class_;
	  do {
	    var fieldMetaInfo = curclass._meta_.fields[fieldName];
	    if(fieldMetaInfo) {
	      return fieldMetaInfo;
	    }
	    if(curclass._meta_._superMeta_) {
	      curclass = curclass._meta_._superMeta_._class_;
	    } else {
	      curclass = null;
	    }
	  } while(curclass);
	  return null;
	};

	Permissions.prototype.toString = function() {
	  return JSON.stringify(this);
	};

	Permissions._meta_ =  {fields:  {}};
	Permissions._meta_._class_ =  Permissions;
	Permissions._meta_.fields["id"] = {};
	Permissions._meta_.fields["id"].type = String;
	Permissions._meta_.fields["bits"] = {};
	Permissions._meta_.fields["bits"].type = Number;
	Permissions._meta_.fields["readablePermissions"] = {};
	Permissions._meta_.fields["readablePermissions"].type = Array;
	Permissions._meta_.fields["readablePermissions"].elementType = employees_Permission;

	//
	// Expose the module.
	//
	if (true) {
	module.exports = Permissions;
	}



/***/ }),
/* 395 */
/***/ (function(module, exports, __webpack_require__) {

	/**
	 * Autogenerated by Avro
	 * 
	 * DO NOT EDIT DIRECTLY
	 */


	/**
	* @constructor
	* @memberof hours
	*/
	var HourRange = function() {
	  this._class_ = HourRange;
	  this.start = undefined;
	  this.end = undefined;
	};


	/**
	* Set the field value
	* @memberof hours.HourRange
	* @param {Number} start must be an integer
	*/
	HourRange.prototype.setStart = function(start) {
	  this.start = start;
	};

	/**
	* Get the field value
	* @memberof hours.HourRange
	* @return {Number} must be an integer
	*/
	HourRange.prototype.getStart = function() {
	  return this.start;
	};

	/**
	* Set the field value
	* @memberof hours.HourRange
	* @param {Number} end must be an integer
	*/
	HourRange.prototype.setEnd = function(end) {
	  this.end = end;
	};

	/**
	* Get the field value
	* @memberof hours.HourRange
	* @return {Number} must be an integer
	*/
	HourRange.prototype.getEnd = function() {
	  return this.end;
	};

	/**
	* @memberof hours.HourRange
	* @private
	*/
	HourRange.prototype.getMetaInfo = function(fieldName) {
	  var curclass = this._class_;
	  do {
	    var fieldMetaInfo = curclass._meta_.fields[fieldName];
	    if(fieldMetaInfo) {
	      return fieldMetaInfo;
	    }
	    if(curclass._meta_._superMeta_) {
	      curclass = curclass._meta_._superMeta_._class_;
	    } else {
	      curclass = null;
	    }
	  } while(curclass);
	  return null;
	};

	HourRange.prototype.toString = function() {
	  return JSON.stringify(this);
	};

	HourRange._meta_ =  {fields:  {}};
	HourRange._meta_._class_ =  HourRange;
	HourRange._meta_.fields["start"] = {};
	HourRange._meta_.fields["start"].type = Number;
	HourRange._meta_.fields["end"] = {};
	HourRange._meta_.fields["end"].type = Number;

	//
	// Expose the module.
	//
	if (true) {
	module.exports = HourRange;
	}



/***/ }),
/* 396 */
/***/ (function(module, exports, __webpack_require__) {

	/**
	 * Autogenerated by Avro
	 * 
	 * DO NOT EDIT DIRECTLY
	 */

	var hours_HourRange = __webpack_require__(395);
	var hours_Reference = __webpack_require__(397);

	/**
	* @constructor
	* @memberof hours
	*/
	var HoursSet = function() {
	  this._class_ = HoursSet;
	  this.id = undefined;
	  this.name = undefined;
	  this.reference = undefined;
	  this.sunday = undefined;
	  this.monday = undefined;
	  this.tuesday = undefined;
	  this.wednesday = undefined;
	  this.thursday = undefined;
	  this.friday = undefined;
	  this.saturday = undefined;
	};


	/**
	* Set the field value
	* Unique identifier
	*
	* @memberof hours.HoursSet
	* @param {String} id 
	*/
	HoursSet.prototype.setId = function(id) {
	  this.id = id;
	};

	/**
	* Get the field value
	* Unique identifier
	* @memberof hours.HoursSet
	* @return {String} 
	*/
	HoursSet.prototype.getId = function() {
	  return this.id;
	};

	/**
	* Set the field value
	* Friendly name to describe the hours
	*
	* @memberof hours.HoursSet
	* @param {String} name 
	*/
	HoursSet.prototype.setName = function(name) {
	  this.name = name;
	};

	/**
	* Get the field value
	* Friendly name to describe the hours
	* @memberof hours.HoursSet
	* @return {String} 
	*/
	HoursSet.prototype.getName = function() {
	  return this.name;
	};

	/**
	* Set the field value
	* @memberof hours.HoursSet
	* @param {Null|hours.Reference} reference 
	*/
	HoursSet.prototype.setReference = function(reference) {
	  this.reference = reference;
	};

	/**
	* Get the field value
	* @memberof hours.HoursSet
	* @return {Null|hours.Reference} 
	*/
	HoursSet.prototype.getReference = function() {
	  return this.reference;
	};

	/**
	* Set the field value
	* @memberof hours.HoursSet
	* @param {Array.<hours.HourRange>} sunday An array of 
	*/
	HoursSet.prototype.setSunday = function(sunday) {
	  this.sunday = sunday;
	};

	/**
	* Get the field value
	* @memberof hours.HoursSet
	* @return {Array.<hours.HourRange>} An array of 
	*/
	HoursSet.prototype.getSunday = function() {
	  return this.sunday;
	};

	/**
	* Set the field value
	* @memberof hours.HoursSet
	* @param {Array.<hours.HourRange>} monday An array of 
	*/
	HoursSet.prototype.setMonday = function(monday) {
	  this.monday = monday;
	};

	/**
	* Get the field value
	* @memberof hours.HoursSet
	* @return {Array.<hours.HourRange>} An array of 
	*/
	HoursSet.prototype.getMonday = function() {
	  return this.monday;
	};

	/**
	* Set the field value
	* @memberof hours.HoursSet
	* @param {Array.<hours.HourRange>} tuesday An array of 
	*/
	HoursSet.prototype.setTuesday = function(tuesday) {
	  this.tuesday = tuesday;
	};

	/**
	* Get the field value
	* @memberof hours.HoursSet
	* @return {Array.<hours.HourRange>} An array of 
	*/
	HoursSet.prototype.getTuesday = function() {
	  return this.tuesday;
	};

	/**
	* Set the field value
	* @memberof hours.HoursSet
	* @param {Array.<hours.HourRange>} wednesday An array of 
	*/
	HoursSet.prototype.setWednesday = function(wednesday) {
	  this.wednesday = wednesday;
	};

	/**
	* Get the field value
	* @memberof hours.HoursSet
	* @return {Array.<hours.HourRange>} An array of 
	*/
	HoursSet.prototype.getWednesday = function() {
	  return this.wednesday;
	};

	/**
	* Set the field value
	* @memberof hours.HoursSet
	* @param {Array.<hours.HourRange>} thursday An array of 
	*/
	HoursSet.prototype.setThursday = function(thursday) {
	  this.thursday = thursday;
	};

	/**
	* Get the field value
	* @memberof hours.HoursSet
	* @return {Array.<hours.HourRange>} An array of 
	*/
	HoursSet.prototype.getThursday = function() {
	  return this.thursday;
	};

	/**
	* Set the field value
	* @memberof hours.HoursSet
	* @param {Array.<hours.HourRange>} friday An array of 
	*/
	HoursSet.prototype.setFriday = function(friday) {
	  this.friday = friday;
	};

	/**
	* Get the field value
	* @memberof hours.HoursSet
	* @return {Array.<hours.HourRange>} An array of 
	*/
	HoursSet.prototype.getFriday = function() {
	  return this.friday;
	};

	/**
	* Set the field value
	* @memberof hours.HoursSet
	* @param {Array.<hours.HourRange>} saturday An array of 
	*/
	HoursSet.prototype.setSaturday = function(saturday) {
	  this.saturday = saturday;
	};

	/**
	* Get the field value
	* @memberof hours.HoursSet
	* @return {Array.<hours.HourRange>} An array of 
	*/
	HoursSet.prototype.getSaturday = function() {
	  return this.saturday;
	};

	/**
	* @memberof hours.HoursSet
	* @private
	*/
	HoursSet.prototype.getMetaInfo = function(fieldName) {
	  var curclass = this._class_;
	  do {
	    var fieldMetaInfo = curclass._meta_.fields[fieldName];
	    if(fieldMetaInfo) {
	      return fieldMetaInfo;
	    }
	    if(curclass._meta_._superMeta_) {
	      curclass = curclass._meta_._superMeta_._class_;
	    } else {
	      curclass = null;
	    }
	  } while(curclass);
	  return null;
	};

	HoursSet.prototype.toString = function() {
	  return JSON.stringify(this);
	};

	HoursSet._meta_ =  {fields:  {}};
	HoursSet._meta_._class_ =  HoursSet;
	HoursSet._meta_.fields["id"] = {};
	HoursSet._meta_.fields["id"].type = String;
	HoursSet._meta_.fields["name"] = {};
	HoursSet._meta_.fields["name"].type = String;
	HoursSet._meta_.fields["reference"] = {};
	HoursSet._meta_.fields["reference"].type = hours_Reference;
	HoursSet._meta_.fields["sunday"] = {};
	HoursSet._meta_.fields["sunday"].type = Array;
	HoursSet._meta_.fields["sunday"].elementType = hours_HourRange;
	HoursSet._meta_.fields["monday"] = {};
	HoursSet._meta_.fields["monday"].type = Array;
	HoursSet._meta_.fields["monday"].elementType = hours_HourRange;
	HoursSet._meta_.fields["tuesday"] = {};
	HoursSet._meta_.fields["tuesday"].type = Array;
	HoursSet._meta_.fields["tuesday"].elementType = hours_HourRange;
	HoursSet._meta_.fields["wednesday"] = {};
	HoursSet._meta_.fields["wednesday"].type = Array;
	HoursSet._meta_.fields["wednesday"].elementType = hours_HourRange;
	HoursSet._meta_.fields["thursday"] = {};
	HoursSet._meta_.fields["thursday"].type = Array;
	HoursSet._meta_.fields["thursday"].elementType = hours_HourRange;
	HoursSet._meta_.fields["friday"] = {};
	HoursSet._meta_.fields["friday"].type = Array;
	HoursSet._meta_.fields["friday"].elementType = hours_HourRange;
	HoursSet._meta_.fields["saturday"] = {};
	HoursSet._meta_.fields["saturday"].type = Array;
	HoursSet._meta_.fields["saturday"].elementType = hours_HourRange;

	//
	// Expose the module.
	//
	if (true) {
	module.exports = HoursSet;
	}



/***/ }),
/* 397 */
/***/ (function(module, exports, __webpack_require__) {

	/**
	 * Autogenerated by Avro
	 * 
	 * DO NOT EDIT DIRECTLY
	 */

	var hours_ReferenceType = __webpack_require__(398);

	/**
	* @constructor
	* @memberof hours
	*/
	var Reference = function() {
	  this._class_ = Reference;
	  this.id = undefined;
	  this.type = undefined;
	};


	/**
	* Set the field value
	* ID of the reference that uses this set of hours
	*
	* @memberof hours.Reference
	* @param {String} id 
	*/
	Reference.prototype.setId = function(id) {
	  this.id = id;
	};

	/**
	* Get the field value
	* ID of the reference that uses this set of hours
	* @memberof hours.Reference
	* @return {String} 
	*/
	Reference.prototype.getId = function() {
	  return this.id;
	};

	/**
	* Set the field value
	* External type that these hours reference
	*
	* @memberof hours.Reference
	* @param {hours.ReferenceType} type 
	*/
	Reference.prototype.setType = function(type) {
	  this.type = type;
	};

	/**
	* Get the field value
	* External type that these hours reference
	* @memberof hours.Reference
	* @return {hours.ReferenceType} 
	*/
	Reference.prototype.getType = function() {
	  return this.type;
	};

	/**
	* @memberof hours.Reference
	* @private
	*/
	Reference.prototype.getMetaInfo = function(fieldName) {
	  var curclass = this._class_;
	  do {
	    var fieldMetaInfo = curclass._meta_.fields[fieldName];
	    if(fieldMetaInfo) {
	      return fieldMetaInfo;
	    }
	    if(curclass._meta_._superMeta_) {
	      curclass = curclass._meta_._superMeta_._class_;
	    } else {
	      curclass = null;
	    }
	  } while(curclass);
	  return null;
	};

	Reference.prototype.toString = function() {
	  return JSON.stringify(this);
	};

	Reference._meta_ =  {fields:  {}};
	Reference._meta_._class_ =  Reference;
	Reference._meta_.fields["id"] = {};
	Reference._meta_.fields["id"].type = String;
	Reference._meta_.fields["type"] = {};
	Reference._meta_.fields["type"].type = hours_ReferenceType;

	//
	// Expose the module.
	//
	if (true) {
	module.exports = Reference;
	}



/***/ }),
/* 398 */
/***/ (function(module, exports, __webpack_require__) {

	/**
	 * Autogenerated by Avro
	 * 
	 * DO NOT EDIT DIRECTLY
	 */


	/**
	* @memberof hours
	* @enum {string}
	*/
	var ReferenceType = {
	  ORDER_TYPE : "ORDER_TYPE",
	  ITEM_GROUP : "ITEM_GROUP",
	  SOFTWARE_UPDATE_EXCLUSION : "SOFTWARE_UPDATE_EXCLUSION",
	  ONLINE_ORDER_SERVICE : "ONLINE_ORDER_SERVICE"
	};


	//
	// Expose the module.
	//
	if (true) {
	module.exports = ReferenceType;
	}



/***/ }),
/* 399 */
/***/ (function(module, exports, __webpack_require__) {

	/**
	 * Autogenerated by Avro
	 * 
	 * DO NOT EDIT DIRECTLY
	 */

	var base_Reference = __webpack_require__(5);

	/** The class is used to update the item stock. */
	/**
	* @constructor
	* @memberof inventory
	*/
	var ItemStock = function() {
	  this._class_ = ItemStock;
	  this.item = undefined;
	  this.stockCount = undefined;
	  this.quantity = undefined;
	  this.modifiedTime = undefined;
	};


	/**
	* Set the field value
	* Reference to an item
	*
	* @memberof inventory.ItemStock
	* @param {base.Reference} item 
	*/
	ItemStock.prototype.setItem = function(item) {
	  this.item = item;
	};

	/**
	* Get the field value
	* Reference to an item
	* @memberof inventory.ItemStock
	* @return {base.Reference} 
	*/
	ItemStock.prototype.getItem = function() {
	  return this.item;
	};

	/**
	* Set the field value
	* Deprecated, use quantity instead.
	*
	* @memberof inventory.ItemStock
	* @param {Null|Number} stockCount must be a long integer
	*/
	ItemStock.prototype.setStockCount = function(stockCount) {
	  this.stockCount = stockCount;
	};

	/**
	* Get the field value
	* Deprecated, use quantity instead.
	* @memberof inventory.ItemStock
	* @return {Null|Number} must be a long integer
	*/
	ItemStock.prototype.getStockCount = function() {
	  return this.stockCount;
	};

	/**
	* Set the field value
	* Current count of this item in stock.
	*
	* @memberof inventory.ItemStock
	* @param {Number} quantity must be a double
	*/
	ItemStock.prototype.setQuantity = function(quantity) {
	  this.quantity = quantity;
	};

	/**
	* Get the field value
	* Current count of this item in stock.
	* @memberof inventory.ItemStock
	* @return {Number} must be a double
	*/
	ItemStock.prototype.getQuantity = function() {
	  return this.quantity;
	};

	/**
	* Set the field value
	* @memberof inventory.ItemStock
	* @param {Null|Number} modifiedTime must be a long integer
	*/
	ItemStock.prototype.setModifiedTime = function(modifiedTime) {
	  this.modifiedTime = modifiedTime;
	};

	/**
	* Get the field value
	* @memberof inventory.ItemStock
	* @return {Null|Number} must be a long integer
	*/
	ItemStock.prototype.getModifiedTime = function() {
	  return this.modifiedTime;
	};

	/**
	* @memberof inventory.ItemStock
	* @private
	*/
	ItemStock.prototype.getMetaInfo = function(fieldName) {
	  var curclass = this._class_;
	  do {
	    var fieldMetaInfo = curclass._meta_.fields[fieldName];
	    if(fieldMetaInfo) {
	      return fieldMetaInfo;
	    }
	    if(curclass._meta_._superMeta_) {
	      curclass = curclass._meta_._superMeta_._class_;
	    } else {
	      curclass = null;
	    }
	  } while(curclass);
	  return null;
	};

	ItemStock.prototype.toString = function() {
	  return JSON.stringify(this);
	};

	ItemStock._meta_ =  {fields:  {}};
	ItemStock._meta_._class_ =  ItemStock;
	ItemStock._meta_.fields["item"] = {};
	ItemStock._meta_.fields["item"].type = base_Reference;
	ItemStock._meta_.fields["stockCount"] = {};
	ItemStock._meta_.fields["stockCount"].type = Number;
	ItemStock._meta_.fields["quantity"] = {};
	ItemStock._meta_.fields["quantity"].type = Number;
	ItemStock._meta_.fields["modifiedTime"] = {};
	ItemStock._meta_.fields["modifiedTime"].type = Number;

	//
	// Expose the module.
	//
	if (true) {
	module.exports = ItemStock;
	}



/***/ }),
/* 400 */
/***/ (function(module, exports, __webpack_require__) {

	/**
	 * Autogenerated by Avro
	 * 
	 * DO NOT EDIT DIRECTLY
	 */

	var base_Reference = __webpack_require__(5);

	/**
	* @constructor
	* @memberof inventory
	*/
	var MenuModifier = function() {
	  this._class_ = MenuModifier;
	  this.id = undefined;
	  this.modifier = undefined;
	  this.merchantRef = undefined;
	  this.price = undefined;
	  this.name = undefined;
	  this.description = undefined;
	  this.imageFilename = undefined;
	  this.enabled = undefined;
	  this.createdTime = undefined;
	  this.modifiedTime = undefined;
	  this.deletedTime = undefined;
	};


	/**
	* Set the field value
	* Modifier id
	*
	* @memberof inventory.MenuModifier
	* @param {String} id 
	*/
	MenuModifier.prototype.setId = function(id) {
	  this.id = id;
	};

	/**
	* Get the field value
	* Modifier id
	* @memberof inventory.MenuModifier
	* @return {String} 
	*/
	MenuModifier.prototype.getId = function() {
	  return this.id;
	};

	/**
	* Set the field value
	* Reference to the modifier
	*
	* @memberof inventory.MenuModifier
	* @param {base.Reference} modifier 
	*/
	MenuModifier.prototype.setModifier = function(modifier) {
	  this.modifier = modifier;
	};

	/**
	* Get the field value
	* Reference to the modifier
	* @memberof inventory.MenuModifier
	* @return {base.Reference} 
	*/
	MenuModifier.prototype.getModifier = function() {
	  return this.modifier;
	};

	/**
	* Set the field value
	* Reference to the merchant that created the item
	*
	* @memberof inventory.MenuModifier
	* @param {base.Reference} merchantRef 
	*/
	MenuModifier.prototype.setMerchantRef = function(merchantRef) {
	  this.merchantRef = merchantRef;
	};

	/**
	* Get the field value
	* Reference to the merchant that created the item
	* @memberof inventory.MenuModifier
	* @return {base.Reference} 
	*/
	MenuModifier.prototype.getMerchantRef = function() {
	  return this.merchantRef;
	};

	/**
	* Set the field value
	* Modifier price
	*
	* @memberof inventory.MenuModifier
	* @param {Number} price must be a long integer
	*/
	MenuModifier.prototype.setPrice = function(price) {
	  this.price = price;
	};

	/**
	* Get the field value
	* Modifier price
	* @memberof inventory.MenuModifier
	* @return {Number} must be a long integer
	*/
	MenuModifier.prototype.getPrice = function() {
	  return this.price;
	};

	/**
	* Set the field value
	* Customer facing modifier name
	*
	* @memberof inventory.MenuModifier
	* @param {String} name 
	*/
	MenuModifier.prototype.setName = function(name) {
	  this.name = name;
	};

	/**
	* Get the field value
	* Customer facing modifier name
	* @memberof inventory.MenuModifier
	* @return {String} 
	*/
	MenuModifier.prototype.getName = function() {
	  return this.name;
	};

	/**
	* Set the field value
	* Modifier description
	*
	* @memberof inventory.MenuModifier
	* @param {String} description 
	*/
	MenuModifier.prototype.setDescription = function(description) {
	  this.description = description;
	};

	/**
	* Get the field value
	* Modifier description
	* @memberof inventory.MenuModifier
	* @return {String} 
	*/
	MenuModifier.prototype.getDescription = function() {
	  return this.description;
	};

	/**
	* Set the field value
	* Modifier image file path
	*
	* @memberof inventory.MenuModifier
	* @param {String} imageFilename 
	*/
	MenuModifier.prototype.setImageFilename = function(imageFilename) {
	  this.imageFilename = imageFilename;
	};

	/**
	* Get the field value
	* Modifier image file path
	* @memberof inventory.MenuModifier
	* @return {String} 
	*/
	MenuModifier.prototype.getImageFilename = function() {
	  return this.imageFilename;
	};

	/**
	* Set the field value
	* Modifier enabled for menu
	*
	* @memberof inventory.MenuModifier
	* @param {Boolean} enabled 
	*/
	MenuModifier.prototype.setEnabled = function(enabled) {
	  this.enabled = enabled;
	};

	/**
	* Get the field value
	* Modifier enabled for menu
	* @memberof inventory.MenuModifier
	* @return {Boolean} 
	*/
	MenuModifier.prototype.getEnabled = function() {
	  return this.enabled;
	};

	/**
	* Set the field value
	* Timestamp when the menu modifier was created
	*
	* @memberof inventory.MenuModifier
	* @param {Number} createdTime must be a long integer
	*/
	MenuModifier.prototype.setCreatedTime = function(createdTime) {
	  this.createdTime = createdTime;
	};

	/**
	* Get the field value
	* Timestamp when the menu modifier was created
	* @memberof inventory.MenuModifier
	* @return {Number} must be a long integer
	*/
	MenuModifier.prototype.getCreatedTime = function() {
	  return this.createdTime;
	};

	/**
	* Set the field value
	* Timestamp when the menu modifier was last modified
	*
	* @memberof inventory.MenuModifier
	* @param {Number} modifiedTime must be a long integer
	*/
	MenuModifier.prototype.setModifiedTime = function(modifiedTime) {
	  this.modifiedTime = modifiedTime;
	};

	/**
	* Get the field value
	* Timestamp when the menu modifier was last modified
	* @memberof inventory.MenuModifier
	* @return {Number} must be a long integer
	*/
	MenuModifier.prototype.getModifiedTime = function() {
	  return this.modifiedTime;
	};

	/**
	* Set the field value
	* Timestamp when menu modifier was last deleted
	*
	* @memberof inventory.MenuModifier
	* @param {Number} deletedTime must be a long integer
	*/
	MenuModifier.prototype.setDeletedTime = function(deletedTime) {
	  this.deletedTime = deletedTime;
	};

	/**
	* Get the field value
	* Timestamp when menu modifier was last deleted
	* @memberof inventory.MenuModifier
	* @return {Number} must be a long integer
	*/
	MenuModifier.prototype.getDeletedTime = function() {
	  return this.deletedTime;
	};

	/**
	* @memberof inventory.MenuModifier
	* @private
	*/
	MenuModifier.prototype.getMetaInfo = function(fieldName) {
	  var curclass = this._class_;
	  do {
	    var fieldMetaInfo = curclass._meta_.fields[fieldName];
	    if(fieldMetaInfo) {
	      return fieldMetaInfo;
	    }
	    if(curclass._meta_._superMeta_) {
	      curclass = curclass._meta_._superMeta_._class_;
	    } else {
	      curclass = null;
	    }
	  } while(curclass);
	  return null;
	};

	MenuModifier.prototype.toString = function() {
	  return JSON.stringify(this);
	};

	MenuModifier._meta_ =  {fields:  {}};
	MenuModifier._meta_._class_ =  MenuModifier;
	MenuModifier._meta_.fields["id"] = {};
	MenuModifier._meta_.fields["id"].type = String;
	MenuModifier._meta_.fields["modifier"] = {};
	MenuModifier._meta_.fields["modifier"].type = base_Reference;
	MenuModifier._meta_.fields["merchantRef"] = {};
	MenuModifier._meta_.fields["merchantRef"].type = base_Reference;
	MenuModifier._meta_.fields["price"] = {};
	MenuModifier._meta_.fields["price"].type = Number;
	MenuModifier._meta_.fields["name"] = {};
	MenuModifier._meta_.fields["name"].type = String;
	MenuModifier._meta_.fields["description"] = {};
	MenuModifier._meta_.fields["description"].type = String;
	MenuModifier._meta_.fields["imageFilename"] = {};
	MenuModifier._meta_.fields["imageFilename"].type = String;
	MenuModifier._meta_.fields["enabled"] = {};
	MenuModifier._meta_.fields["enabled"].type = Boolean;
	MenuModifier._meta_.fields["createdTime"] = {};
	MenuModifier._meta_.fields["createdTime"].type = Number;
	MenuModifier._meta_.fields["modifiedTime"] = {};
	MenuModifier._meta_.fields["modifiedTime"].type = Number;
	MenuModifier._meta_.fields["deletedTime"] = {};
	MenuModifier._meta_.fields["deletedTime"].type = Number;

	//
	// Expose the module.
	//
	if (true) {
	module.exports = MenuModifier;
	}



/***/ }),
/* 401 */
/***/ (function(module, exports, __webpack_require__) {

	/**
	 * Autogenerated by Avro
	 * 
	 * DO NOT EDIT DIRECTLY
	 */

	var base_Reference = __webpack_require__(5);

	/**
	* @constructor
	* @memberof inventory
	*/
	var MenuModifierGroup = function() {
	  this._class_ = MenuModifierGroup;
	  this.id = undefined;
	  this.modifierGroup = undefined;
	  this.merchantRef = undefined;
	  this.name = undefined;
	  this.description = undefined;
	  this.minRequired = undefined;
	  this.maxAllowed = undefined;
	  this.imageFilename = undefined;
	  this.enabled = undefined;
	  this.createdTime = undefined;
	  this.modifiedTime = undefined;
	  this.deletedTime = undefined;
	};


	/**
	* Set the field value
	* Modifier group id
	*
	* @memberof inventory.MenuModifierGroup
	* @param {String} id 
	*/
	MenuModifierGroup.prototype.setId = function(id) {
	  this.id = id;
	};

	/**
	* Get the field value
	* Modifier group id
	* @memberof inventory.MenuModifierGroup
	* @return {String} 
	*/
	MenuModifierGroup.prototype.getId = function() {
	  return this.id;
	};

	/**
	* Set the field value
	* Reference to the modifier group
	*
	* @memberof inventory.MenuModifierGroup
	* @param {base.Reference} modifierGroup 
	*/
	MenuModifierGroup.prototype.setModifierGroup = function(modifierGroup) {
	  this.modifierGroup = modifierGroup;
	};

	/**
	* Get the field value
	* Reference to the modifier group
	* @memberof inventory.MenuModifierGroup
	* @return {base.Reference} 
	*/
	MenuModifierGroup.prototype.getModifierGroup = function() {
	  return this.modifierGroup;
	};

	/**
	* Set the field value
	* Reference to the merchant that created the item
	*
	* @memberof inventory.MenuModifierGroup
	* @param {base.Reference} merchantRef 
	*/
	MenuModifierGroup.prototype.setMerchantRef = function(merchantRef) {
	  this.merchantRef = merchantRef;
	};

	/**
	* Get the field value
	* Reference to the merchant that created the item
	* @memberof inventory.MenuModifierGroup
	* @return {base.Reference} 
	*/
	MenuModifierGroup.prototype.getMerchantRef = function() {
	  return this.merchantRef;
	};

	/**
	* Set the field value
	* Customer facing modifier group name
	*
	* @memberof inventory.MenuModifierGroup
	* @param {String} name 
	*/
	MenuModifierGroup.prototype.setName = function(name) {
	  this.name = name;
	};

	/**
	* Get the field value
	* Customer facing modifier group name
	* @memberof inventory.MenuModifierGroup
	* @return {String} 
	*/
	MenuModifierGroup.prototype.getName = function() {
	  return this.name;
	};

	/**
	* Set the field value
	* Modifier group description
	*
	* @memberof inventory.MenuModifierGroup
	* @param {String} description 
	*/
	MenuModifierGroup.prototype.setDescription = function(description) {
	  this.description = description;
	};

	/**
	* Get the field value
	* Modifier group description
	* @memberof inventory.MenuModifierGroup
	* @return {String} 
	*/
	MenuModifierGroup.prototype.getDescription = function() {
	  return this.description;
	};

	/**
	* Set the field value
	* The minimum amount of modifiers from this group that must be applied to associated lineItems
	*
	* @memberof inventory.MenuModifierGroup
	* @param {Null|Number} minRequired must be an integer
	*/
	MenuModifierGroup.prototype.setMinRequired = function(minRequired) {
	  this.minRequired = minRequired;
	};

	/**
	* Get the field value
	* The minimum amount of modifiers from this group that must be applied to associated lineItems
	* @memberof inventory.MenuModifierGroup
	* @return {Null|Number} must be an integer
	*/
	MenuModifierGroup.prototype.getMinRequired = function() {
	  return this.minRequired;
	};

	/**
	* Set the field value
	* The maximum amount of modifiers from this group that can be applied to associated lineItems
	*
	* @memberof inventory.MenuModifierGroup
	* @param {Null|Number} maxAllowed must be an integer
	*/
	MenuModifierGroup.prototype.setMaxAllowed = function(maxAllowed) {
	  this.maxAllowed = maxAllowed;
	};

	/**
	* Get the field value
	* The maximum amount of modifiers from this group that can be applied to associated lineItems
	* @memberof inventory.MenuModifierGroup
	* @return {Null|Number} must be an integer
	*/
	MenuModifierGroup.prototype.getMaxAllowed = function() {
	  return this.maxAllowed;
	};

	/**
	* Set the field value
	* Modifier group image file path
	*
	* @memberof inventory.MenuModifierGroup
	* @param {String} imageFilename 
	*/
	MenuModifierGroup.prototype.setImageFilename = function(imageFilename) {
	  this.imageFilename = imageFilename;
	};

	/**
	* Get the field value
	* Modifier group image file path
	* @memberof inventory.MenuModifierGroup
	* @return {String} 
	*/
	MenuModifierGroup.prototype.getImageFilename = function() {
	  return this.imageFilename;
	};

	/**
	* Set the field value
	* Modifier group enabled for menu
	*
	* @memberof inventory.MenuModifierGroup
	* @param {Boolean} enabled 
	*/
	MenuModifierGroup.prototype.setEnabled = function(enabled) {
	  this.enabled = enabled;
	};

	/**
	* Get the field value
	* Modifier group enabled for menu
	* @memberof inventory.MenuModifierGroup
	* @return {Boolean} 
	*/
	MenuModifierGroup.prototype.getEnabled = function() {
	  return this.enabled;
	};

	/**
	* Set the field value
	* Timestamp when the menu modifier group was created
	*
	* @memberof inventory.MenuModifierGroup
	* @param {Number} createdTime must be a long integer
	*/
	MenuModifierGroup.prototype.setCreatedTime = function(createdTime) {
	  this.createdTime = createdTime;
	};

	/**
	* Get the field value
	* Timestamp when the menu modifier group was created
	* @memberof inventory.MenuModifierGroup
	* @return {Number} must be a long integer
	*/
	MenuModifierGroup.prototype.getCreatedTime = function() {
	  return this.createdTime;
	};

	/**
	* Set the field value
	* Timestamp when the menu modifier group was last modified
	*
	* @memberof inventory.MenuModifierGroup
	* @param {Number} modifiedTime must be a long integer
	*/
	MenuModifierGroup.prototype.setModifiedTime = function(modifiedTime) {
	  this.modifiedTime = modifiedTime;
	};

	/**
	* Get the field value
	* Timestamp when the menu modifier group was last modified
	* @memberof inventory.MenuModifierGroup
	* @return {Number} must be a long integer
	*/
	MenuModifierGroup.prototype.getModifiedTime = function() {
	  return this.modifiedTime;
	};

	/**
	* Set the field value
	* Timestamp when menu modifier group was last deleted
	*
	* @memberof inventory.MenuModifierGroup
	* @param {Number} deletedTime must be a long integer
	*/
	MenuModifierGroup.prototype.setDeletedTime = function(deletedTime) {
	  this.deletedTime = deletedTime;
	};

	/**
	* Get the field value
	* Timestamp when menu modifier group was last deleted
	* @memberof inventory.MenuModifierGroup
	* @return {Number} must be a long integer
	*/
	MenuModifierGroup.prototype.getDeletedTime = function() {
	  return this.deletedTime;
	};

	/**
	* @memberof inventory.MenuModifierGroup
	* @private
	*/
	MenuModifierGroup.prototype.getMetaInfo = function(fieldName) {
	  var curclass = this._class_;
	  do {
	    var fieldMetaInfo = curclass._meta_.fields[fieldName];
	    if(fieldMetaInfo) {
	      return fieldMetaInfo;
	    }
	    if(curclass._meta_._superMeta_) {
	      curclass = curclass._meta_._superMeta_._class_;
	    } else {
	      curclass = null;
	    }
	  } while(curclass);
	  return null;
	};

	MenuModifierGroup.prototype.toString = function() {
	  return JSON.stringify(this);
	};

	MenuModifierGroup._meta_ =  {fields:  {}};
	MenuModifierGroup._meta_._class_ =  MenuModifierGroup;
	MenuModifierGroup._meta_.fields["id"] = {};
	MenuModifierGroup._meta_.fields["id"].type = String;
	MenuModifierGroup._meta_.fields["modifierGroup"] = {};
	MenuModifierGroup._meta_.fields["modifierGroup"].type = base_Reference;
	MenuModifierGroup._meta_.fields["merchantRef"] = {};
	MenuModifierGroup._meta_.fields["merchantRef"].type = base_Reference;
	MenuModifierGroup._meta_.fields["name"] = {};
	MenuModifierGroup._meta_.fields["name"].type = String;
	MenuModifierGroup._meta_.fields["description"] = {};
	MenuModifierGroup._meta_.fields["description"].type = String;
	MenuModifierGroup._meta_.fields["minRequired"] = {};
	MenuModifierGroup._meta_.fields["minRequired"].type = Number;
	MenuModifierGroup._meta_.fields["maxAllowed"] = {};
	MenuModifierGroup._meta_.fields["maxAllowed"].type = Number;
	MenuModifierGroup._meta_.fields["imageFilename"] = {};
	MenuModifierGroup._meta_.fields["imageFilename"].type = String;
	MenuModifierGroup._meta_.fields["enabled"] = {};
	MenuModifierGroup._meta_.fields["enabled"].type = Boolean;
	MenuModifierGroup._meta_.fields["createdTime"] = {};
	MenuModifierGroup._meta_.fields["createdTime"].type = Number;
	MenuModifierGroup._meta_.fields["modifiedTime"] = {};
	MenuModifierGroup._meta_.fields["modifiedTime"].type = Number;
	MenuModifierGroup._meta_.fields["deletedTime"] = {};
	MenuModifierGroup._meta_.fields["deletedTime"].type = Number;

	//
	// Expose the module.
	//
	if (true) {
	module.exports = MenuModifierGroup;
	}



/***/ }),
/* 402 */
/***/ (function(module, exports, __webpack_require__) {

	/**
	 * Autogenerated by Avro
	 * 
	 * DO NOT EDIT DIRECTLY
	 */

	var inventory_MenuItem = __webpack_require__(238);
	var base_Reference = __webpack_require__(5);

	/**
	* @constructor
	* @memberof inventory
	*/
	var MenuSection = function() {
	  this._class_ = MenuSection;
	  this.id = undefined;
	  this.category = undefined;
	  this.merchantRef = undefined;
	  this.items = undefined;
	  this.itemList = undefined;
	  this.name = undefined;
	  this.description = undefined;
	  this.imageFilename = undefined;
	  this.enabled = undefined;
	  this.createdTime = undefined;
	  this.modifiedTime = undefined;
	  this.deletedTime = undefined;
	};


	/**
	* Set the field value
	* Item_layout id
	*
	* @memberof inventory.MenuSection
	* @param {String} id 
	*/
	MenuSection.prototype.setId = function(id) {
	  this.id = id;
	};

	/**
	* Get the field value
	* Item_layout id
	* @memberof inventory.MenuSection
	* @return {String} 
	*/
	MenuSection.prototype.getId = function() {
	  return this.id;
	};

	/**
	* Set the field value
	* Reference to a category
	*
	* @memberof inventory.MenuSection
	* @param {base.Reference} category 
	*/
	MenuSection.prototype.setCategory = function(category) {
	  this.category = category;
	};

	/**
	* Get the field value
	* Reference to a category
	* @memberof inventory.MenuSection
	* @return {base.Reference} 
	*/
	MenuSection.prototype.getCategory = function() {
	  return this.category;
	};

	/**
	* Set the field value
	* Reference to the merchant that created the item layout
	*
	* @memberof inventory.MenuSection
	* @param {base.Reference} merchantRef 
	*/
	MenuSection.prototype.setMerchantRef = function(merchantRef) {
	  this.merchantRef = merchantRef;
	};

	/**
	* Get the field value
	* Reference to the merchant that created the item layout
	* @memberof inventory.MenuSection
	* @return {base.Reference} 
	*/
	MenuSection.prototype.getMerchantRef = function() {
	  return this.merchantRef;
	};

	/**
	* Set the field value
	* Items included in the category
	*
	* @memberof inventory.MenuSection
	* @param {String} items 
	*/
	MenuSection.prototype.setItems = function(items) {
	  this.items = items;
	};

	/**
	* Get the field value
	* Items included in the category
	* @memberof inventory.MenuSection
	* @return {String} 
	*/
	MenuSection.prototype.getItems = function() {
	  return this.items;
	};

	/**
	* Set the field value
	* List of menu item records
	*
	* @memberof inventory.MenuSection
	* @param {Array.<inventory.MenuItem>} itemList An array of 
	*/
	MenuSection.prototype.setItemList = function(itemList) {
	  this.itemList = itemList;
	};

	/**
	* Get the field value
	* List of menu item records
	* @memberof inventory.MenuSection
	* @return {Array.<inventory.MenuItem>} An array of 
	*/
	MenuSection.prototype.getItemList = function() {
	  return this.itemList;
	};

	/**
	* Set the field value
	* Customer facing item layout name
	*
	* @memberof inventory.MenuSection
	* @param {String} name 
	*/
	MenuSection.prototype.setName = function(name) {
	  this.name = name;
	};

	/**
	* Get the field value
	* Customer facing item layout name
	* @memberof inventory.MenuSection
	* @return {String} 
	*/
	MenuSection.prototype.getName = function() {
	  return this.name;
	};

	/**
	* Set the field value
	* Item layout description
	*
	* @memberof inventory.MenuSection
	* @param {String} description 
	*/
	MenuSection.prototype.setDescription = function(description) {
	  this.description = description;
	};

	/**
	* Get the field value
	* Item layout description
	* @memberof inventory.MenuSection
	* @return {String} 
	*/
	MenuSection.prototype.getDescription = function() {
	  return this.description;
	};

	/**
	* Set the field value
	* Item layout image file path
	*
	* @memberof inventory.MenuSection
	* @param {String} imageFilename 
	*/
	MenuSection.prototype.setImageFilename = function(imageFilename) {
	  this.imageFilename = imageFilename;
	};

	/**
	* Get the field value
	* Item layout image file path
	* @memberof inventory.MenuSection
	* @return {String} 
	*/
	MenuSection.prototype.getImageFilename = function() {
	  return this.imageFilename;
	};

	/**
	* Set the field value
	* Section enabled for menu
	*
	* @memberof inventory.MenuSection
	* @param {Boolean} enabled 
	*/
	MenuSection.prototype.setEnabled = function(enabled) {
	  this.enabled = enabled;
	};

	/**
	* Get the field value
	* Section enabled for menu
	* @memberof inventory.MenuSection
	* @return {Boolean} 
	*/
	MenuSection.prototype.getEnabled = function() {
	  return this.enabled;
	};

	/**
	* Set the field value
	* Timestamp when the menu section was created
	*
	* @memberof inventory.MenuSection
	* @param {Number} createdTime must be a long integer
	*/
	MenuSection.prototype.setCreatedTime = function(createdTime) {
	  this.createdTime = createdTime;
	};

	/**
	* Get the field value
	* Timestamp when the menu section was created
	* @memberof inventory.MenuSection
	* @return {Number} must be a long integer
	*/
	MenuSection.prototype.getCreatedTime = function() {
	  return this.createdTime;
	};

	/**
	* Set the field value
	* Timestamp when the menu section was last modified
	*
	* @memberof inventory.MenuSection
	* @param {Number} modifiedTime must be a long integer
	*/
	MenuSection.prototype.setModifiedTime = function(modifiedTime) {
	  this.modifiedTime = modifiedTime;
	};

	/**
	* Get the field value
	* Timestamp when the menu section was last modified
	* @memberof inventory.MenuSection
	* @return {Number} must be a long integer
	*/
	MenuSection.prototype.getModifiedTime = function() {
	  return this.modifiedTime;
	};

	/**
	* Set the field value
	* Timestamp when the menu section was last deleted
	*
	* @memberof inventory.MenuSection
	* @param {Number} deletedTime must be a long integer
	*/
	MenuSection.prototype.setDeletedTime = function(deletedTime) {
	  this.deletedTime = deletedTime;
	};

	/**
	* Get the field value
	* Timestamp when the menu section was last deleted
	* @memberof inventory.MenuSection
	* @return {Number} must be a long integer
	*/
	MenuSection.prototype.getDeletedTime = function() {
	  return this.deletedTime;
	};

	/**
	* @memberof inventory.MenuSection
	* @private
	*/
	MenuSection.prototype.getMetaInfo = function(fieldName) {
	  var curclass = this._class_;
	  do {
	    var fieldMetaInfo = curclass._meta_.fields[fieldName];
	    if(fieldMetaInfo) {
	      return fieldMetaInfo;
	    }
	    if(curclass._meta_._superMeta_) {
	      curclass = curclass._meta_._superMeta_._class_;
	    } else {
	      curclass = null;
	    }
	  } while(curclass);
	  return null;
	};

	MenuSection.prototype.toString = function() {
	  return JSON.stringify(this);
	};

	MenuSection._meta_ =  {fields:  {}};
	MenuSection._meta_._class_ =  MenuSection;
	MenuSection._meta_.fields["id"] = {};
	MenuSection._meta_.fields["id"].type = String;
	MenuSection._meta_.fields["category"] = {};
	MenuSection._meta_.fields["category"].type = base_Reference;
	MenuSection._meta_.fields["merchantRef"] = {};
	MenuSection._meta_.fields["merchantRef"].type = base_Reference;
	MenuSection._meta_.fields["items"] = {};
	MenuSection._meta_.fields["items"].type = String;
	MenuSection._meta_.fields["itemList"] = {};
	MenuSection._meta_.fields["itemList"].type = Array;
	MenuSection._meta_.fields["itemList"].elementType = inventory_MenuItem;
	MenuSection._meta_.fields["name"] = {};
	MenuSection._meta_.fields["name"].type = String;
	MenuSection._meta_.fields["description"] = {};
	MenuSection._meta_.fields["description"].type = String;
	MenuSection._meta_.fields["imageFilename"] = {};
	MenuSection._meta_.fields["imageFilename"].type = String;
	MenuSection._meta_.fields["enabled"] = {};
	MenuSection._meta_.fields["enabled"].type = Boolean;
	MenuSection._meta_.fields["createdTime"] = {};
	MenuSection._meta_.fields["createdTime"].type = Number;
	MenuSection._meta_.fields["modifiedTime"] = {};
	MenuSection._meta_.fields["modifiedTime"].type = Number;
	MenuSection._meta_.fields["deletedTime"] = {};
	MenuSection._meta_.fields["deletedTime"].type = Number;

	//
	// Expose the module.
	//
	if (true) {
	module.exports = MenuSection;
	}



/***/ }),
/* 403 */
/***/ (function(module, exports, __webpack_require__) {

	/**
	 * Autogenerated by Avro
	 * 
	 * DO NOT EDIT DIRECTLY
	 */


	/**
	* @memberof inventory
	* @enum {string}
	*/
	var PriceType = {
	  FIXED : "FIXED",
	  VARIABLE : "VARIABLE",
	  PER_UNIT : "PER_UNIT"
	};


	//
	// Expose the module.
	//
	if (true) {
	module.exports = PriceType;
	}



/***/ }),
/* 404 */
/***/ (function(module, exports, __webpack_require__) {

	/**
	 * Autogenerated by Avro
	 * 
	 * DO NOT EDIT DIRECTLY
	 */


	/**
	* @memberof inventory
	* @enum {string}
	*/
	var TaxType = {
	  VAT_TAXABLE : "VAT_TAXABLE",
	  VAT_NON_TAXABLE : "VAT_NON_TAXABLE",
	  VAT_EXEMPT : "VAT_EXEMPT",
	  INTERNAL_TAX : "INTERNAL_TAX"
	};


	//
	// Expose the module.
	//
	if (true) {
	module.exports = TaxType;
	}



/***/ }),
/* 405 */
/***/ (function(module, exports, __webpack_require__) {

	/**
	 * Autogenerated by Avro
	 * 
	 * DO NOT EDIT DIRECTLY
	 */


	/**
	* @memberof loyalty
	* @enum {string}
	*/
	var CustomerProvidedDataResponseType = {
	  ACCEPTED : "ACCEPTED",
	  PENDING : "PENDING"
	};


	//
	// Expose the module.
	//
	if (true) {
	module.exports = CustomerProvidedDataResponseType;
	}



/***/ }),
/* 406 */
/***/ (function(module, exports, __webpack_require__) {

	/**
	 * Autogenerated by Avro
	 * 
	 * DO NOT EDIT DIRECTLY
	 */


	/**
	* @memberof order
	* @enum {string}
	*/
	var ClientEventType = {
	  DELETED_LINE_ITEM : "DELETED_LINE_ITEM",
	  MOVED_TABLE : "MOVED_TABLE",
	  LEFT_TABLE : "LEFT_TABLE"
	};


	//
	// Expose the module.
	//
	if (true) {
	module.exports = ClientEventType;
	}



/***/ }),
/* 407 */
/***/ (function(module, exports, __webpack_require__) {

	/**
	 * Autogenerated by Avro
	 * 
	 * DO NOT EDIT DIRECTLY
	 */


	/**
	* @memberof order
	* @enum {string}
	*/
	var CustomerIdMethod = {
	  NAME : "NAME",
	  TABLE : "TABLE",
	  NAME_TABLE : "NAME_TABLE"
	};


	//
	// Expose the module.
	//
	if (true) {
	module.exports = CustomerIdMethod;
	}



/***/ }),
/* 408 */
/***/ (function(module, exports, __webpack_require__) {

	/**
	 * Autogenerated by Avro
	 * 
	 * DO NOT EDIT DIRECTLY
	 */


	/** Snapshot of a line item modifier at the time that the order was placed. */
	/**
	* @constructor
	* @memberof order
	*/
	var DisplayModification = function() {
	  this._class_ = DisplayModification;
	  this.id = undefined;
	  this.name = undefined;
	  this.amount = undefined;
	};


	/**
	* Set the field value
	* @memberof order.DisplayModification
	* @param {String} id 
	*/
	DisplayModification.prototype.setId = function(id) {
	  this.id = id;
	};

	/**
	* Get the field value
	* @memberof order.DisplayModification
	* @return {String} 
	*/
	DisplayModification.prototype.getId = function() {
	  return this.id;
	};

	/**
	* Set the field value
	* @memberof order.DisplayModification
	* @param {String} name 
	*/
	DisplayModification.prototype.setName = function(name) {
	  this.name = name;
	};

	/**
	* Get the field value
	* @memberof order.DisplayModification
	* @return {String} 
	*/
	DisplayModification.prototype.getName = function() {
	  return this.name;
	};

	/**
	* Set the field value
	* @memberof order.DisplayModification
	* @param {String} amount 
	*/
	DisplayModification.prototype.setAmount = function(amount) {
	  this.amount = amount;
	};

	/**
	* Get the field value
	* @memberof order.DisplayModification
	* @return {String} 
	*/
	DisplayModification.prototype.getAmount = function() {
	  return this.amount;
	};

	/**
	* @memberof order.DisplayModification
	* @private
	*/
	DisplayModification.prototype.getMetaInfo = function(fieldName) {
	  var curclass = this._class_;
	  do {
	    var fieldMetaInfo = curclass._meta_.fields[fieldName];
	    if(fieldMetaInfo) {
	      return fieldMetaInfo;
	    }
	    if(curclass._meta_._superMeta_) {
	      curclass = curclass._meta_._superMeta_._class_;
	    } else {
	      curclass = null;
	    }
	  } while(curclass);
	  return null;
	};

	DisplayModification.prototype.toString = function() {
	  return JSON.stringify(this);
	};

	DisplayModification._meta_ =  {fields:  {}};
	DisplayModification._meta_._class_ =  DisplayModification;
	DisplayModification._meta_.fields["id"] = {};
	DisplayModification._meta_.fields["id"].type = String;
	DisplayModification._meta_.fields["name"] = {};
	DisplayModification._meta_.fields["name"].type = String;
	DisplayModification._meta_.fields["amount"] = {};
	DisplayModification._meta_.fields["amount"].type = String;

	//
	// Expose the module.
	//
	if (true) {
	module.exports = DisplayModification;
	}



/***/ }),
/* 409 */
/***/ (function(module, exports, __webpack_require__) {

	/**
	 * Autogenerated by Avro
	 * 
	 * DO NOT EDIT DIRECTLY
	 */

	var order_DisplayPayment = __webpack_require__(410);
	var order_DisplayDiscount = __webpack_require__(156);
	var order_DisplayLineItem = __webpack_require__(243);

	/**
	* @constructor
	* @memberof order
	*/
	var DisplayOrder = function() {
	  this._class_ = DisplayOrder;
	  this.id = undefined;
	  this.currency = undefined;
	  this.employee = undefined;
	  this.subtotal = undefined;
	  this.tax = undefined;
	  this.total = undefined;
	  this.title = undefined;
	  this.note = undefined;
	  this.isVat = undefined;
	  this.serviceChargeName = undefined;
	  this.serviceChargeAmount = undefined;
	  this.discounts = undefined;
	  this.lineItems = undefined;
	  this.amountRemaining = undefined;
	  this.payments = undefined;
	};


	/**
	* Set the field value
	* Unique identifier
	*
	* @memberof order.DisplayOrder
	* @param {String} id 
	*/
	DisplayOrder.prototype.setId = function(id) {
	  this.id = id;
	};

	/**
	* Get the field value
	* Unique identifier
	* @memberof order.DisplayOrder
	* @return {String} 
	*/
	DisplayOrder.prototype.getId = function() {
	  return this.id;
	};

	/**
	* Set the field value
	* Currency of this order
	*
	* @memberof order.DisplayOrder
	* @param {String} currency 
	*/
	DisplayOrder.prototype.setCurrency = function(currency) {
	  this.currency = currency;
	};

	/**
	* Get the field value
	* Currency of this order
	* @memberof order.DisplayOrder
	* @return {String} 
	*/
	DisplayOrder.prototype.getCurrency = function() {
	  return this.currency;
	};

	/**
	* Set the field value
	* The employee associated with this order
	*
	* @memberof order.DisplayOrder
	* @param {String} employee 
	*/
	DisplayOrder.prototype.setEmployee = function(employee) {
	  this.employee = employee;
	};

	/**
	* Get the field value
	* The employee associated with this order
	* @memberof order.DisplayOrder
	* @return {String} 
	*/
	DisplayOrder.prototype.getEmployee = function() {
	  return this.employee;
	};

	/**
	* Set the field value
	* Formatted subtotal of the order
	*
	* @memberof order.DisplayOrder
	* @param {String} subtotal 
	*/
	DisplayOrder.prototype.setSubtotal = function(subtotal) {
	  this.subtotal = subtotal;
	};

	/**
	* Get the field value
	* Formatted subtotal of the order
	* @memberof order.DisplayOrder
	* @return {String} 
	*/
	DisplayOrder.prototype.getSubtotal = function() {
	  return this.subtotal;
	};

	/**
	* Set the field value
	* Formatted tax of the order
	*
	* @memberof order.DisplayOrder
	* @param {String} tax 
	*/
	DisplayOrder.prototype.setTax = function(tax) {
	  this.tax = tax;
	};

	/**
	* Get the field value
	* Formatted tax of the order
	* @memberof order.DisplayOrder
	* @return {String} 
	*/
	DisplayOrder.prototype.getTax = function() {
	  return this.tax;
	};

	/**
	* Set the field value
	* Formatted total of the order
	*
	* @memberof order.DisplayOrder
	* @param {String} total 
	*/
	DisplayOrder.prototype.setTotal = function(total) {
	  this.total = total;
	};

	/**
	* Get the field value
	* Formatted total of the order
	* @memberof order.DisplayOrder
	* @return {String} 
	*/
	DisplayOrder.prototype.getTotal = function() {
	  return this.total;
	};

	/**
	* Set the field value
	* @memberof order.DisplayOrder
	* @param {Null|String} title 
	*/
	DisplayOrder.prototype.setTitle = function(title) {
	  this.title = title;
	};

	/**
	* Get the field value
	* @memberof order.DisplayOrder
	* @return {Null|String} 
	*/
	DisplayOrder.prototype.getTitle = function() {
	  return this.title;
	};

	/**
	* Set the field value
	* @memberof order.DisplayOrder
	* @param {Null|String} note 
	*/
	DisplayOrder.prototype.setNote = function(note) {
	  this.note = note;
	};

	/**
	* Get the field value
	* @memberof order.DisplayOrder
	* @return {Null|String} 
	*/
	DisplayOrder.prototype.getNote = function() {
	  return this.note;
	};

	/**
	* Set the field value
	* This order was created by merchant with VAT enabled.
	*
	* @memberof order.DisplayOrder
	* @param {Boolean} isVat 
	*/
	DisplayOrder.prototype.setIsVat = function(isVat) {
	  this.isVat = isVat;
	};

	/**
	* Get the field value
	* This order was created by merchant with VAT enabled.
	* @memberof order.DisplayOrder
	* @return {Boolean} 
	*/
	DisplayOrder.prototype.getIsVat = function() {
	  return this.isVat;
	};

	/**
	* Set the field value
	* Optional service charge name (gratuity) applied to this order
	*
	* @memberof order.DisplayOrder
	* @param {Null|String} serviceChargeName 
	*/
	DisplayOrder.prototype.setServiceChargeName = function(serviceChargeName) {
	  this.serviceChargeName = serviceChargeName;
	};

	/**
	* Get the field value
	* Optional service charge name (gratuity) applied to this order
	* @memberof order.DisplayOrder
	* @return {Null|String} 
	*/
	DisplayOrder.prototype.getServiceChargeName = function() {
	  return this.serviceChargeName;
	};

	/**
	* Set the field value
	* Optional service charge amount (gratuity) applied to this order
	*
	* @memberof order.DisplayOrder
	* @param {Null|String} serviceChargeAmount 
	*/
	DisplayOrder.prototype.setServiceChargeAmount = function(serviceChargeAmount) {
	  this.serviceChargeAmount = serviceChargeAmount;
	};

	/**
	* Get the field value
	* Optional service charge amount (gratuity) applied to this order
	* @memberof order.DisplayOrder
	* @return {Null|String} 
	*/
	DisplayOrder.prototype.getServiceChargeAmount = function() {
	  return this.serviceChargeAmount;
	};

	/**
	* Set the field value
	* @memberof order.DisplayOrder
	* @param {Array.<order.DisplayDiscount>} discounts An array of 
	*/
	DisplayOrder.prototype.setDiscounts = function(discounts) {
	  this.discounts = discounts;
	};

	/**
	* Get the field value
	* @memberof order.DisplayOrder
	* @return {Array.<order.DisplayDiscount>} An array of 
	*/
	DisplayOrder.prototype.getDiscounts = function() {
	  return this.discounts;
	};

	/**
	* Set the field value
	* @memberof order.DisplayOrder
	* @param {Array.<order.DisplayLineItem>} lineItems An array of 
	*/
	DisplayOrder.prototype.setLineItems = function(lineItems) {
	  this.lineItems = lineItems;
	};

	/**
	* Get the field value
	* @memberof order.DisplayOrder
	* @return {Array.<order.DisplayLineItem>} An array of 
	*/
	DisplayOrder.prototype.getLineItems = function() {
	  return this.lineItems;
	};

	/**
	* Set the field value
	* Formatted amount remaining
	*
	* @memberof order.DisplayOrder
	* @param {String} amountRemaining 
	*/
	DisplayOrder.prototype.setAmountRemaining = function(amountRemaining) {
	  this.amountRemaining = amountRemaining;
	};

	/**
	* Get the field value
	* Formatted amount remaining
	* @memberof order.DisplayOrder
	* @return {String} 
	*/
	DisplayOrder.prototype.getAmountRemaining = function() {
	  return this.amountRemaining;
	};

	/**
	* Set the field value
	* Payments that were made for this order
	*
	* @memberof order.DisplayOrder
	* @param {Array.<order.DisplayPayment>} payments An array of 
	*/
	DisplayOrder.prototype.setPayments = function(payments) {
	  this.payments = payments;
	};

	/**
	* Get the field value
	* Payments that were made for this order
	* @memberof order.DisplayOrder
	* @return {Array.<order.DisplayPayment>} An array of 
	*/
	DisplayOrder.prototype.getPayments = function() {
	  return this.payments;
	};

	/**
	* @memberof order.DisplayOrder
	* @private
	*/
	DisplayOrder.prototype.getMetaInfo = function(fieldName) {
	  var curclass = this._class_;
	  do {
	    var fieldMetaInfo = curclass._meta_.fields[fieldName];
	    if(fieldMetaInfo) {
	      return fieldMetaInfo;
	    }
	    if(curclass._meta_._superMeta_) {
	      curclass = curclass._meta_._superMeta_._class_;
	    } else {
	      curclass = null;
	    }
	  } while(curclass);
	  return null;
	};

	DisplayOrder.prototype.toString = function() {
	  return JSON.stringify(this);
	};

	DisplayOrder._meta_ =  {fields:  {}};
	DisplayOrder._meta_._class_ =  DisplayOrder;
	DisplayOrder._meta_.fields["id"] = {};
	DisplayOrder._meta_.fields["id"].type = String;
	DisplayOrder._meta_.fields["currency"] = {};
	DisplayOrder._meta_.fields["currency"].type = String;
	DisplayOrder._meta_.fields["employee"] = {};
	DisplayOrder._meta_.fields["employee"].type = String;
	DisplayOrder._meta_.fields["subtotal"] = {};
	DisplayOrder._meta_.fields["subtotal"].type = String;
	DisplayOrder._meta_.fields["tax"] = {};
	DisplayOrder._meta_.fields["tax"].type = String;
	DisplayOrder._meta_.fields["total"] = {};
	DisplayOrder._meta_.fields["total"].type = String;
	DisplayOrder._meta_.fields["title"] = {};
	DisplayOrder._meta_.fields["title"].type = String;
	DisplayOrder._meta_.fields["note"] = {};
	DisplayOrder._meta_.fields["note"].type = String;
	DisplayOrder._meta_.fields["isVat"] = {};
	DisplayOrder._meta_.fields["isVat"].type = Boolean;
	DisplayOrder._meta_.fields["serviceChargeName"] = {};
	DisplayOrder._meta_.fields["serviceChargeName"].type = String;
	DisplayOrder._meta_.fields["serviceChargeAmount"] = {};
	DisplayOrder._meta_.fields["serviceChargeAmount"].type = String;
	DisplayOrder._meta_.fields["discounts"] = {};
	DisplayOrder._meta_.fields["discounts"].type = Array;
	DisplayOrder._meta_.fields["discounts"].elementType = order_DisplayDiscount;
	DisplayOrder._meta_.fields["lineItems"] = {};
	DisplayOrder._meta_.fields["lineItems"].type = Array;
	DisplayOrder._meta_.fields["lineItems"].elementType = order_DisplayLineItem;
	DisplayOrder._meta_.fields["amountRemaining"] = {};
	DisplayOrder._meta_.fields["amountRemaining"].type = String;
	DisplayOrder._meta_.fields["payments"] = {};
	DisplayOrder._meta_.fields["payments"].type = Array;
	DisplayOrder._meta_.fields["payments"].elementType = order_DisplayPayment;

	//
	// Expose the module.
	//
	if (true) {
	module.exports = DisplayOrder;
	}



/***/ }),
/* 410 */
/***/ (function(module, exports, __webpack_require__) {

	/**
	 * Autogenerated by Avro
	 * 
	 * DO NOT EDIT DIRECTLY
	 */


	/**
	* @constructor
	* @memberof order
	*/
	var DisplayPayment = function() {
	  this._class_ = DisplayPayment;
	  this.id = undefined;
	  this.label = undefined;
	  this.amount = undefined;
	  this.tipAmount = undefined;
	  this.taxAmount = undefined;
	};


	/**
	* Set the field value
	* Unique identifier
	*
	* @memberof order.DisplayPayment
	* @param {String} id 
	*/
	DisplayPayment.prototype.setId = function(id) {
	  this.id = id;
	};

	/**
	* Get the field value
	* Unique identifier
	* @memberof order.DisplayPayment
	* @return {String} 
	*/
	DisplayPayment.prototype.getId = function() {
	  return this.id;
	};

	/**
	* Set the field value
	* Formatted display string for the tender e.g. credit card, cash, etc.
	*
	* @memberof order.DisplayPayment
	* @param {String} label 
	*/
	DisplayPayment.prototype.setLabel = function(label) {
	  this.label = label;
	};

	/**
	* Get the field value
	* Formatted display string for the tender e.g. credit card, cash, etc.
	* @memberof order.DisplayPayment
	* @return {String} 
	*/
	DisplayPayment.prototype.getLabel = function() {
	  return this.label;
	};

	/**
	* Set the field value
	* Formatted total amount paid
	*
	* @memberof order.DisplayPayment
	* @param {String} amount 
	*/
	DisplayPayment.prototype.setAmount = function(amount) {
	  this.amount = amount;
	};

	/**
	* Get the field value
	* Formatted total amount paid
	* @memberof order.DisplayPayment
	* @return {String} 
	*/
	DisplayPayment.prototype.getAmount = function() {
	  return this.amount;
	};

	/**
	* Set the field value
	* Formatted amount paid in tips
	*
	* @memberof order.DisplayPayment
	* @param {String|Null} tipAmount 
	*/
	DisplayPayment.prototype.setTipAmount = function(tipAmount) {
	  this.tipAmount = tipAmount;
	};

	/**
	* Get the field value
	* Formatted amount paid in tips
	* @memberof order.DisplayPayment
	* @return {String|Null} 
	*/
	DisplayPayment.prototype.getTipAmount = function() {
	  return this.tipAmount;
	};

	/**
	* Set the field value
	* Formatted amount paid in tax
	*
	* @memberof order.DisplayPayment
	* @param {Number|Null} taxAmount must be a long integer, 
	*/
	DisplayPayment.prototype.setTaxAmount = function(taxAmount) {
	  this.taxAmount = taxAmount;
	};

	/**
	* Get the field value
	* Formatted amount paid in tax
	* @memberof order.DisplayPayment
	* @return {Number|Null} must be a long integer, 
	*/
	DisplayPayment.prototype.getTaxAmount = function() {
	  return this.taxAmount;
	};

	/**
	* @memberof order.DisplayPayment
	* @private
	*/
	DisplayPayment.prototype.getMetaInfo = function(fieldName) {
	  var curclass = this._class_;
	  do {
	    var fieldMetaInfo = curclass._meta_.fields[fieldName];
	    if(fieldMetaInfo) {
	      return fieldMetaInfo;
	    }
	    if(curclass._meta_._superMeta_) {
	      curclass = curclass._meta_._superMeta_._class_;
	    } else {
	      curclass = null;
	    }
	  } while(curclass);
	  return null;
	};

	DisplayPayment.prototype.toString = function() {
	  return JSON.stringify(this);
	};

	DisplayPayment._meta_ =  {fields:  {}};
	DisplayPayment._meta_._class_ =  DisplayPayment;
	DisplayPayment._meta_.fields["id"] = {};
	DisplayPayment._meta_.fields["id"].type = String;
	DisplayPayment._meta_.fields["label"] = {};
	DisplayPayment._meta_.fields["label"].type = String;
	DisplayPayment._meta_.fields["amount"] = {};
	DisplayPayment._meta_.fields["amount"].type = String;
	DisplayPayment._meta_.fields["tipAmount"] = {};
	DisplayPayment._meta_.fields["tipAmount"].type = String;
	DisplayPayment._meta_.fields["taxAmount"] = {};
	DisplayPayment._meta_.fields["taxAmount"].type = Number;

	//
	// Expose the module.
	//
	if (true) {
	module.exports = DisplayPayment;
	}



/***/ }),
/* 411 */
/***/ (function(module, exports, __webpack_require__) {

	/**
	 * Autogenerated by Avro
	 * 
	 * DO NOT EDIT DIRECTLY
	 */


	/**
	* @memberof order
	* @enum {string}
	*/
	var HoursAvailable = {
	  ALL : "ALL",
	  BUSINESS : "BUSINESS",
	  CUSTOM : "CUSTOM"
	};


	//
	// Expose the module.
	//
	if (true) {
	module.exports = HoursAvailable;
	}



/***/ }),
/* 412 */
/***/ (function(module, exports, __webpack_require__) {

	/**
	 * Autogenerated by Avro
	 * 
	 * DO NOT EDIT DIRECTLY
	 */

	var inventory_Modifier = __webpack_require__(239);

	/** Snapshot of a line item modifier at the time that the order was placed. */
	/**
	* @constructor
	* @memberof order
	*/
	var Modification = function() {
	  this._class_ = Modification;
	  this.id = undefined;
	  this.name = undefined;
	  this.alternateName = undefined;
	  this.amount = undefined;
	  this.modifier = undefined;
	  this.quantitySold = undefined;
	};


	/**
	* Set the field value
	* @memberof order.Modification
	* @param {String} id 
	*/
	Modification.prototype.setId = function(id) {
	  this.id = id;
	};

	/**
	* Get the field value
	* @memberof order.Modification
	* @return {String} 
	*/
	Modification.prototype.getId = function() {
	  return this.id;
	};

	/**
	* Set the field value
	* the name of the modifier when it was applied
	*
	* @memberof order.Modification
	* @param {String} name 
	*/
	Modification.prototype.setName = function(name) {
	  this.name = name;
	};

	/**
	* Get the field value
	* the name of the modifier when it was applied
	* @memberof order.Modification
	* @return {String} 
	*/
	Modification.prototype.getName = function() {
	  return this.name;
	};

	/**
	* Set the field value
	* @memberof order.Modification
	* @param {String} alternateName 
	*/
	Modification.prototype.setAlternateName = function(alternateName) {
	  this.alternateName = alternateName;
	};

	/**
	* Get the field value
	* @memberof order.Modification
	* @return {String} 
	*/
	Modification.prototype.getAlternateName = function() {
	  return this.alternateName;
	};

	/**
	* Set the field value
	* the additional cost of the modifier when it was applied
	*
	* @memberof order.Modification
	* @param {Number} amount must be a long integer
	*/
	Modification.prototype.setAmount = function(amount) {
	  this.amount = amount;
	};

	/**
	* Get the field value
	* the additional cost of the modifier when it was applied
	* @memberof order.Modification
	* @return {Number} must be a long integer
	*/
	Modification.prototype.getAmount = function() {
	  return this.amount;
	};

	/**
	* Set the field value
	* The modifier object.  Values from the Modifier are copied to the Modification at the time that the order is placed.  Modifier values may change after the modification is created.
	*
	* @memberof order.Modification
	* @param {inventory.Modifier} modifier 
	*/
	Modification.prototype.setModifier = function(modifier) {
	  this.modifier = modifier;
	};

	/**
	* Get the field value
	* The modifier object.  Values from the Modifier are copied to the Modification at the time that the order is placed.  Modifier values may change after the modification is created.
	* @memberof order.Modification
	* @return {inventory.Modifier} 
	*/
	Modification.prototype.getModifier = function() {
	  return this.modifier;
	};

	/**
	* Set the field value
	* This is only used in reports. The count of how many of these modifiers that were sold.
	*
	* @memberof order.Modification
	* @param {Number} quantitySold must be a long integer
	*/
	Modification.prototype.setQuantitySold = function(quantitySold) {
	  this.quantitySold = quantitySold;
	};

	/**
	* Get the field value
	* This is only used in reports. The count of how many of these modifiers that were sold.
	* @memberof order.Modification
	* @return {Number} must be a long integer
	*/
	Modification.prototype.getQuantitySold = function() {
	  return this.quantitySold;
	};

	/**
	* @memberof order.Modification
	* @private
	*/
	Modification.prototype.getMetaInfo = function(fieldName) {
	  var curclass = this._class_;
	  do {
	    var fieldMetaInfo = curclass._meta_.fields[fieldName];
	    if(fieldMetaInfo) {
	      return fieldMetaInfo;
	    }
	    if(curclass._meta_._superMeta_) {
	      curclass = curclass._meta_._superMeta_._class_;
	    } else {
	      curclass = null;
	    }
	  } while(curclass);
	  return null;
	};

	Modification.prototype.toString = function() {
	  return JSON.stringify(this);
	};

	Modification._meta_ =  {fields:  {}};
	Modification._meta_._class_ =  Modification;
	Modification._meta_.fields["id"] = {};
	Modification._meta_.fields["id"].type = String;
	Modification._meta_.fields["name"] = {};
	Modification._meta_.fields["name"].type = String;
	Modification._meta_.fields["alternateName"] = {};
	Modification._meta_.fields["alternateName"].type = String;
	Modification._meta_.fields["amount"] = {};
	Modification._meta_.fields["amount"].type = Number;
	Modification._meta_.fields["modifier"] = {};
	Modification._meta_.fields["modifier"].type = inventory_Modifier;
	Modification._meta_.fields["quantitySold"] = {};
	Modification._meta_.fields["quantitySold"].type = Number;

	//
	// Expose the module.
	//
	if (true) {
	module.exports = Modification;
	}



/***/ }),
/* 413 */
/***/ (function(module, exports, __webpack_require__) {

	/**
	 * Autogenerated by Avro
	 * 
	 * DO NOT EDIT DIRECTLY
	 */


	/**
	* @memberof order
	* @enum {string}
	*/
	var PayType = {
	  SPLIT_GUEST : "SPLIT_GUEST",
	  SPLIT_ITEM : "SPLIT_ITEM",
	  SPLIT_CUSTOM : "SPLIT_CUSTOM",
	  FULL : "FULL"
	};


	//
	// Expose the module.
	//
	if (true) {
	module.exports = PayType;
	}



/***/ }),
/* 414 */
/***/ (function(module, exports, __webpack_require__) {

	/**
	 * Autogenerated by Avro
	 * 
	 * DO NOT EDIT DIRECTLY
	 */


	/**
	* @memberof order
	* @enum {string}
	*/
	var PaymentState = {
	  OPEN : "OPEN",
	  PAID : "PAID",
	  REFUNDED : "REFUNDED",
	  CREDITED : "CREDITED",
	  PARTIALLY_PAID : "PARTIALLY_PAID",
	  PARTIALLY_REFUNDED : "PARTIALLY_REFUNDED"
	};


	//
	// Expose the module.
	//
	if (true) {
	module.exports = PaymentState;
	}



/***/ }),
/* 415 */
/***/ (function(module, exports, __webpack_require__) {

	/**
	 * Autogenerated by Avro
	 * 
	 * DO NOT EDIT DIRECTLY
	 */


	/** Groups together a set of line items to display under a heading on receipts. */
	/**
	* @constructor
	* @memberof order
	*/
	var PrintGroup = function() {
	  this._class_ = PrintGroup;
	  this.id = undefined;
	  this.name = undefined;
	  this.sortOrder = undefined;
	  this.fired = false;
	};


	/**
	* Set the field value
	* Unique identifier.
	*
	* @memberof order.PrintGroup
	* @param {String} id 
	*/
	PrintGroup.prototype.setId = function(id) {
	  this.id = id;
	};

	/**
	* Get the field value
	* Unique identifier.
	* @memberof order.PrintGroup
	* @return {String} 
	*/
	PrintGroup.prototype.getId = function() {
	  return this.id;
	};

	/**
	* Set the field value
	* The print group heading that will be displayed on receipts.
	*
	* @memberof order.PrintGroup
	* @param {String} name 
	*/
	PrintGroup.prototype.setName = function(name) {
	  this.name = name;
	};

	/**
	* Get the field value
	* The print group heading that will be displayed on receipts.
	* @memberof order.PrintGroup
	* @return {String} 
	*/
	PrintGroup.prototype.getName = function() {
	  return this.name;
	};

	/**
	* Set the field value
	* The order in which this print group is displayed relative to other print groups on the same receipt. Print groups with identical sort orders will be ordered by name.
	*
	* @memberof order.PrintGroup
	* @param {Null|Number} sortOrder must be an integer
	*/
	PrintGroup.prototype.setSortOrder = function(sortOrder) {
	  this.sortOrder = sortOrder;
	};

	/**
	* Get the field value
	* The order in which this print group is displayed relative to other print groups on the same receipt. Print groups with identical sort orders will be ordered by name.
	* @memberof order.PrintGroup
	* @return {Null|Number} must be an integer
	*/
	PrintGroup.prototype.getSortOrder = function() {
	  return this.sortOrder;
	};

	/**
	* Set the field value
	* True if this print group has been sent to an order printer.
	*
	* @memberof order.PrintGroup
	* @param {Boolean} fired 
	*/
	PrintGroup.prototype.setFired = function(fired) {
	  this.fired = fired;
	};

	/**
	* Get the field value
	* True if this print group has been sent to an order printer.
	* @memberof order.PrintGroup
	* @return {Boolean} 
	*/
	PrintGroup.prototype.getFired = function() {
	  return this.fired;
	};

	/**
	* @memberof order.PrintGroup
	* @private
	*/
	PrintGroup.prototype.getMetaInfo = function(fieldName) {
	  var curclass = this._class_;
	  do {
	    var fieldMetaInfo = curclass._meta_.fields[fieldName];
	    if(fieldMetaInfo) {
	      return fieldMetaInfo;
	    }
	    if(curclass._meta_._superMeta_) {
	      curclass = curclass._meta_._superMeta_._class_;
	    } else {
	      curclass = null;
	    }
	  } while(curclass);
	  return null;
	};

	PrintGroup.prototype.toString = function() {
	  return JSON.stringify(this);
	};

	PrintGroup._meta_ =  {fields:  {}};
	PrintGroup._meta_._class_ =  PrintGroup;
	PrintGroup._meta_.fields["id"] = {};
	PrintGroup._meta_.fields["id"].type = String;
	PrintGroup._meta_.fields["name"] = {};
	PrintGroup._meta_.fields["name"].type = String;
	PrintGroup._meta_.fields["sortOrder"] = {};
	PrintGroup._meta_.fields["sortOrder"].type = Number;
	PrintGroup._meta_.fields["fired"] = {};
	PrintGroup._meta_.fields["fired"].type = Boolean;

	//
	// Expose the module.
	//
	if (true) {
	module.exports = PrintGroup;
	}



/***/ }),
/* 416 */
/***/ (function(module, exports, __webpack_require__) {

	/**
	 * Autogenerated by Avro
	 * 
	 * DO NOT EDIT DIRECTLY
	 */


	/**
	* `CREATED`: The print event is created
	* `FAILED`: The primary printing device failed to print
	* `DONE`: The print event is sent to device and get printed
	* @memberof order
	* @enum {string}
	*/
	var PrintState = {
	  CREATED : "CREATED",
	  FAILED : "FAILED",
	  DONE : "DONE"
	};


	//
	// Expose the module.
	//
	if (true) {
	module.exports = PrintState;
	}



/***/ }),
/* 417 */
/***/ (function(module, exports, __webpack_require__) {

	/**
	 * Autogenerated by Avro
	 * 
	 * DO NOT EDIT DIRECTLY
	 */


	/**
	* @constructor
	* @memberof order.operation
	*/
	var DiscountsAddedOperation = function() {
	  this._class_ = DiscountsAddedOperation;
	  this.ids = undefined;
	  this.orderId = undefined;
	};


	/**
	* Set the field value
	* @memberof order.operation.DiscountsAddedOperation
	* @param {Array.<String>} ids An array of 
	*/
	DiscountsAddedOperation.prototype.setIds = function(ids) {
	  this.ids = ids;
	};

	/**
	* Get the field value
	* @memberof order.operation.DiscountsAddedOperation
	* @return {Array.<String>} An array of 
	*/
	DiscountsAddedOperation.prototype.getIds = function() {
	  return this.ids;
	};

	/**
	* Set the field value
	* @memberof order.operation.DiscountsAddedOperation
	* @param {String} orderId 
	*/
	DiscountsAddedOperation.prototype.setOrderId = function(orderId) {
	  this.orderId = orderId;
	};

	/**
	* Get the field value
	* @memberof order.operation.DiscountsAddedOperation
	* @return {String} 
	*/
	DiscountsAddedOperation.prototype.getOrderId = function() {
	  return this.orderId;
	};

	/**
	* @memberof order.operation.DiscountsAddedOperation
	* @private
	*/
	DiscountsAddedOperation.prototype.getMetaInfo = function(fieldName) {
	  var curclass = this._class_;
	  do {
	    var fieldMetaInfo = curclass._meta_.fields[fieldName];
	    if(fieldMetaInfo) {
	      return fieldMetaInfo;
	    }
	    if(curclass._meta_._superMeta_) {
	      curclass = curclass._meta_._superMeta_._class_;
	    } else {
	      curclass = null;
	    }
	  } while(curclass);
	  return null;
	};

	DiscountsAddedOperation.prototype.toString = function() {
	  return JSON.stringify(this);
	};

	DiscountsAddedOperation._meta_ =  {fields:  {}};
	DiscountsAddedOperation._meta_._class_ =  DiscountsAddedOperation;
	DiscountsAddedOperation._meta_.fields["ids"] = {};
	DiscountsAddedOperation._meta_.fields["ids"].type = Array;
	DiscountsAddedOperation._meta_.fields["orderId"] = {};
	DiscountsAddedOperation._meta_.fields["orderId"].type = String;

	//
	// Expose the module.
	//
	if (true) {
	module.exports = DiscountsAddedOperation;
	}



/***/ }),
/* 418 */
/***/ (function(module, exports, __webpack_require__) {

	/**
	 * Autogenerated by Avro
	 * 
	 * DO NOT EDIT DIRECTLY
	 */


	/**
	* @constructor
	* @memberof order.operation
	*/
	var DiscountsDeletedOperation = function() {
	  this._class_ = DiscountsDeletedOperation;
	  this.ids = undefined;
	  this.orderId = undefined;
	};


	/**
	* Set the field value
	* @memberof order.operation.DiscountsDeletedOperation
	* @param {Array.<String>} ids An array of 
	*/
	DiscountsDeletedOperation.prototype.setIds = function(ids) {
	  this.ids = ids;
	};

	/**
	* Get the field value
	* @memberof order.operation.DiscountsDeletedOperation
	* @return {Array.<String>} An array of 
	*/
	DiscountsDeletedOperation.prototype.getIds = function() {
	  return this.ids;
	};

	/**
	* Set the field value
	* @memberof order.operation.DiscountsDeletedOperation
	* @param {String} orderId 
	*/
	DiscountsDeletedOperation.prototype.setOrderId = function(orderId) {
	  this.orderId = orderId;
	};

	/**
	* Get the field value
	* @memberof order.operation.DiscountsDeletedOperation
	* @return {String} 
	*/
	DiscountsDeletedOperation.prototype.getOrderId = function() {
	  return this.orderId;
	};

	/**
	* @memberof order.operation.DiscountsDeletedOperation
	* @private
	*/
	DiscountsDeletedOperation.prototype.getMetaInfo = function(fieldName) {
	  var curclass = this._class_;
	  do {
	    var fieldMetaInfo = curclass._meta_.fields[fieldName];
	    if(fieldMetaInfo) {
	      return fieldMetaInfo;
	    }
	    if(curclass._meta_._superMeta_) {
	      curclass = curclass._meta_._superMeta_._class_;
	    } else {
	      curclass = null;
	    }
	  } while(curclass);
	  return null;
	};

	DiscountsDeletedOperation.prototype.toString = function() {
	  return JSON.stringify(this);
	};

	DiscountsDeletedOperation._meta_ =  {fields:  {}};
	DiscountsDeletedOperation._meta_._class_ =  DiscountsDeletedOperation;
	DiscountsDeletedOperation._meta_.fields["ids"] = {};
	DiscountsDeletedOperation._meta_.fields["ids"].type = Array;
	DiscountsDeletedOperation._meta_.fields["orderId"] = {};
	DiscountsDeletedOperation._meta_.fields["orderId"].type = String;

	//
	// Expose the module.
	//
	if (true) {
	module.exports = DiscountsDeletedOperation;
	}



/***/ }),
/* 419 */
/***/ (function(module, exports, __webpack_require__) {

	/**
	 * Autogenerated by Avro
	 * 
	 * DO NOT EDIT DIRECTLY
	 */


	/**
	* @constructor
	* @memberof order.operation
	*/
	var LineItemsAddedOperation = function() {
	  this._class_ = LineItemsAddedOperation;
	  this.ids = undefined;
	  this.orderId = undefined;
	};


	/**
	* Set the field value
	* @memberof order.operation.LineItemsAddedOperation
	* @param {Array.<String>} ids An array of 
	*/
	LineItemsAddedOperation.prototype.setIds = function(ids) {
	  this.ids = ids;
	};

	/**
	* Get the field value
	* @memberof order.operation.LineItemsAddedOperation
	* @return {Array.<String>} An array of 
	*/
	LineItemsAddedOperation.prototype.getIds = function() {
	  return this.ids;
	};

	/**
	* Set the field value
	* @memberof order.operation.LineItemsAddedOperation
	* @param {String} orderId 
	*/
	LineItemsAddedOperation.prototype.setOrderId = function(orderId) {
	  this.orderId = orderId;
	};

	/**
	* Get the field value
	* @memberof order.operation.LineItemsAddedOperation
	* @return {String} 
	*/
	LineItemsAddedOperation.prototype.getOrderId = function() {
	  return this.orderId;
	};

	/**
	* @memberof order.operation.LineItemsAddedOperation
	* @private
	*/
	LineItemsAddedOperation.prototype.getMetaInfo = function(fieldName) {
	  var curclass = this._class_;
	  do {
	    var fieldMetaInfo = curclass._meta_.fields[fieldName];
	    if(fieldMetaInfo) {
	      return fieldMetaInfo;
	    }
	    if(curclass._meta_._superMeta_) {
	      curclass = curclass._meta_._superMeta_._class_;
	    } else {
	      curclass = null;
	    }
	  } while(curclass);
	  return null;
	};

	LineItemsAddedOperation.prototype.toString = function() {
	  return JSON.stringify(this);
	};

	LineItemsAddedOperation._meta_ =  {fields:  {}};
	LineItemsAddedOperation._meta_._class_ =  LineItemsAddedOperation;
	LineItemsAddedOperation._meta_.fields["ids"] = {};
	LineItemsAddedOperation._meta_.fields["ids"].type = Array;
	LineItemsAddedOperation._meta_.fields["orderId"] = {};
	LineItemsAddedOperation._meta_.fields["orderId"].type = String;

	//
	// Expose the module.
	//
	if (true) {
	module.exports = LineItemsAddedOperation;
	}



/***/ }),
/* 420 */
/***/ (function(module, exports, __webpack_require__) {

	/**
	 * Autogenerated by Avro
	 * 
	 * DO NOT EDIT DIRECTLY
	 */


	/**
	* @constructor
	* @memberof order.operation
	*/
	var LineItemsDeletedOperation = function() {
	  this._class_ = LineItemsDeletedOperation;
	  this.ids = undefined;
	  this.orderId = undefined;
	};


	/**
	* Set the field value
	* @memberof order.operation.LineItemsDeletedOperation
	* @param {Array.<String>} ids An array of 
	*/
	LineItemsDeletedOperation.prototype.setIds = function(ids) {
	  this.ids = ids;
	};

	/**
	* Get the field value
	* @memberof order.operation.LineItemsDeletedOperation
	* @return {Array.<String>} An array of 
	*/
	LineItemsDeletedOperation.prototype.getIds = function() {
	  return this.ids;
	};

	/**
	* Set the field value
	* @memberof order.operation.LineItemsDeletedOperation
	* @param {String} orderId 
	*/
	LineItemsDeletedOperation.prototype.setOrderId = function(orderId) {
	  this.orderId = orderId;
	};

	/**
	* Get the field value
	* @memberof order.operation.LineItemsDeletedOperation
	* @return {String} 
	*/
	LineItemsDeletedOperation.prototype.getOrderId = function() {
	  return this.orderId;
	};

	/**
	* @memberof order.operation.LineItemsDeletedOperation
	* @private
	*/
	LineItemsDeletedOperation.prototype.getMetaInfo = function(fieldName) {
	  var curclass = this._class_;
	  do {
	    var fieldMetaInfo = curclass._meta_.fields[fieldName];
	    if(fieldMetaInfo) {
	      return fieldMetaInfo;
	    }
	    if(curclass._meta_._superMeta_) {
	      curclass = curclass._meta_._superMeta_._class_;
	    } else {
	      curclass = null;
	    }
	  } while(curclass);
	  return null;
	};

	LineItemsDeletedOperation.prototype.toString = function() {
	  return JSON.stringify(this);
	};

	LineItemsDeletedOperation._meta_ =  {fields:  {}};
	LineItemsDeletedOperation._meta_._class_ =  LineItemsDeletedOperation;
	LineItemsDeletedOperation._meta_.fields["ids"] = {};
	LineItemsDeletedOperation._meta_.fields["ids"].type = Array;
	LineItemsDeletedOperation._meta_.fields["orderId"] = {};
	LineItemsDeletedOperation._meta_.fields["orderId"].type = String;

	//
	// Expose the module.
	//
	if (true) {
	module.exports = LineItemsDeletedOperation;
	}



/***/ }),
/* 421 */
/***/ (function(module, exports, __webpack_require__) {

	/**
	 * Autogenerated by Avro
	 * 
	 * DO NOT EDIT DIRECTLY
	 */


	/**
	* @constructor
	* @memberof order.operation
	*/
	var OrderDeletedOperation = function() {
	  this._class_ = OrderDeletedOperation;
	  this.id = undefined;
	};


	/**
	* Set the field value
	* @memberof order.operation.OrderDeletedOperation
	* @param {String} id 
	*/
	OrderDeletedOperation.prototype.setId = function(id) {
	  this.id = id;
	};

	/**
	* Get the field value
	* @memberof order.operation.OrderDeletedOperation
	* @return {String} 
	*/
	OrderDeletedOperation.prototype.getId = function() {
	  return this.id;
	};

	/**
	* @memberof order.operation.OrderDeletedOperation
	* @private
	*/
	OrderDeletedOperation.prototype.getMetaInfo = function(fieldName) {
	  var curclass = this._class_;
	  do {
	    var fieldMetaInfo = curclass._meta_.fields[fieldName];
	    if(fieldMetaInfo) {
	      return fieldMetaInfo;
	    }
	    if(curclass._meta_._superMeta_) {
	      curclass = curclass._meta_._superMeta_._class_;
	    } else {
	      curclass = null;
	    }
	  } while(curclass);
	  return null;
	};

	OrderDeletedOperation.prototype.toString = function() {
	  return JSON.stringify(this);
	};

	OrderDeletedOperation._meta_ =  {fields:  {}};
	OrderDeletedOperation._meta_._class_ =  OrderDeletedOperation;
	OrderDeletedOperation._meta_.fields["id"] = {};
	OrderDeletedOperation._meta_.fields["id"].type = String;

	//
	// Expose the module.
	//
	if (true) {
	module.exports = OrderDeletedOperation;
	}



/***/ }),
/* 422 */
/***/ (function(module, exports, __webpack_require__) {

	/**
	 * Autogenerated by Avro
	 * 
	 * DO NOT EDIT DIRECTLY
	 */


	/**
	* @memberof pay
	* @enum {string}
	*/
	var CardFunction = {
	  CREDIT : "CREDIT",
	  DEBIT : "DEBIT",
	  PREPAID : "PREPAID",
	  PINLESS_DEBIT : "PINLESS_DEBIT",
	  SIGNATURE_DEBIT : "SIGNATURE_DEBIT",
	  EBT : "EBT",
	  SNAP : "SNAP"
	};


	//
	// Expose the module.
	//
	if (true) {
	module.exports = CardFunction;
	}



/***/ }),
/* 423 */
/***/ (function(module, exports, __webpack_require__) {

	/**
	 * Autogenerated by Avro
	 * 
	 * DO NOT EDIT DIRECTLY
	 */


	/**
	* @memberof pay
	* @enum {string}
	*/
	var ErrorCode = {
	  TERMINAL_BUSY : "TERMINAL_BUSY",
	  TERMINAL_UNAVAILABLE : "TERMINAL_UNAVAILABLE",
	  TERMINAL_GENERAL : "TERMINAL_GENERAL"
	};


	//
	// Expose the module.
	//
	if (true) {
	module.exports = ErrorCode;
	}



/***/ }),
/* 424 */
/***/ (function(module, exports, __webpack_require__) {

	/**
	 * Autogenerated by Avro
	 * 
	 * DO NOT EDIT DIRECTLY
	 */


	/**
	* @memberof pay
	* @enum {string}
	*/
	var GwTxResult = {
	  APPROVED_ONLINE : "APPROVED_ONLINE",
	  DECLINED_ONLINE : "DECLINED_ONLINE",
	  UNABLE_TO_GO_ONLINE : "UNABLE_TO_GO_ONLINE",
	  REFERRAL_ONLINE : "REFERRAL_ONLINE",
	  REFERRAL_OFFLINE : "REFERRAL_OFFLINE"
	};


	//
	// Expose the module.
	//
	if (true) {
	module.exports = GwTxResult;
	}



/***/ }),
/* 425 */
/***/ (function(module, exports, __webpack_require__) {

	/**
	 * Autogenerated by Avro
	 * 
	 * DO NOT EDIT DIRECTLY
	 */


	/**
	* @memberof pay
	* @enum {string}
	*/
	var ServiceCode1 = {
	  INTERNATIONAL_INTERCHANGE_OK : "INTERNATIONAL_INTERCHANGE_OK",
	  INTERNATIONAL_INTERCHANGE_USE_IC_CHIP_WHERE_FEASIBLE : "INTERNATIONAL_INTERCHANGE_USE_IC_CHIP_WHERE_FEASIBLE",
	  NATIONAL_INTERCHANGE_ONLY_EXCEPT_UNDER_BILATERAL_AGREEMENT : "NATIONAL_INTERCHANGE_ONLY_EXCEPT_UNDER_BILATERAL_AGREEMENT",
	  NATIONAL_INTERCHANGE_ONLY_EXCEPT_UNDER_BILATERAL_AGREEMENT_USE_IC_CHIP_WHERE_FEASIBLE : "NATIONAL_INTERCHANGE_ONLY_EXCEPT_UNDER_BILATERAL_AGREEMENT_USE_IC_CHIP_WHERE_FEASIBLE",
	  NO_INTERCHANGE_EXCEPT_UNDER_BILATERAL_AGREEMENT : "NO_INTERCHANGE_EXCEPT_UNDER_BILATERAL_AGREEMENT",
	  TEST : "TEST",
	  UNDEFINED : "UNDEFINED"
	};


	//
	// Expose the module.
	//
	if (true) {
	module.exports = ServiceCode1;
	}



/***/ }),
/* 426 */
/***/ (function(module, exports, __webpack_require__) {

	/**
	 * Autogenerated by Avro
	 * 
	 * DO NOT EDIT DIRECTLY
	 */


	/**
	* @memberof pay
	* @enum {string}
	*/
	var ServiceCode2 = {
	  NORMAL : "NORMAL",
	  CONTACT_ISSUER_VIA_ONLINE_MEANS : "CONTACT_ISSUER_VIA_ONLINE_MEANS",
	  CONTACT_ISSUER_VIA_ONLINE_MEANS_EXCEPT_UNDER_BILATERAL_AGREEMENT : "CONTACT_ISSUER_VIA_ONLINE_MEANS_EXCEPT_UNDER_BILATERAL_AGREEMENT",
	  UNDEFINED : "UNDEFINED"
	};


	//
	// Expose the module.
	//
	if (true) {
	module.exports = ServiceCode2;
	}



/***/ }),
/* 427 */
/***/ (function(module, exports, __webpack_require__) {

	/**
	 * Autogenerated by Avro
	 * 
	 * DO NOT EDIT DIRECTLY
	 */


	/**
	* @memberof pay
	* @enum {string}
	*/
	var ServiceCode3 = {
	  NO_RESTRICTIONS_PIN_REQUIRED : "NO_RESTRICTIONS_PIN_REQUIRED",
	  NO_RESTRICTIONS : "NO_RESTRICTIONS",
	  GOODS_AND_SERVICES_ONLY_NO_CASH : "GOODS_AND_SERVICES_ONLY_NO_CASH",
	  ATM_ONLY_PIN_REQUIRED : "ATM_ONLY_PIN_REQUIRED",
	  CASH_ONLY : "CASH_ONLY",
	  GOODS_AND_SERVICES_ONLY_NO_CASH_PIN_REQUIRED : "GOODS_AND_SERVICES_ONLY_NO_CASH_PIN_REQUIRED",
	  NO_RESTRICTIONS_USE_PIN_WHERE_FEASIBLE : "NO_RESTRICTIONS_USE_PIN_WHERE_FEASIBLE",
	  GOODS_AND_SERVICES_ONLY_NO_CASH_USE_PIN_WHERE_FEASIBLE : "GOODS_AND_SERVICES_ONLY_NO_CASH_USE_PIN_WHERE_FEASIBLE",
	  UNDEFINED : "UNDEFINED"
	};


	//
	// Expose the module.
	//
	if (true) {
	module.exports = ServiceCode3;
	}



/***/ }),
/* 428 */
/***/ (function(module, exports, __webpack_require__) {

	/**
	 * Autogenerated by Avro
	 * 
	 * DO NOT EDIT DIRECTLY
	 */

	var payments_CvmResult = __webpack_require__(442);
	var pay_ErrorCode = __webpack_require__(423);
	var pay_TxResult = __webpack_require__(429);
	var pay_GwTxResult = __webpack_require__(424);
	var pay_ServiceCode1 = __webpack_require__(425);
	var pay_ServiceCode2 = __webpack_require__(426);
	var pay_ServiceCode3 = __webpack_require__(427);

	/**
	* @constructor
	* @memberof pay
	*/
	var TransactionData = function() {
	  this._class_ = TransactionData;
	  this.txResult = undefined;
	  this.txError = undefined;
	  this.amount = undefined;
	  this.tipAmount = undefined;
	  this.cashBackAmount = undefined;
	  this.errorCode = undefined;
	  this.errorText = undefined;
	  this.transactionDate = undefined;
	  this.transactionTime = undefined;
	  this.msrContainer = undefined;
	  this.msrMaskedTrack1 = undefined;
	  this.msrMaskedTrack2 = undefined;
	  this.maskedManualPan = undefined;
	  this.sredContainer = undefined;
	  this.sred = undefined;
	  this.ksn = undefined;
	  this.transArmorContainer = undefined;
	  this.transArmorKey = undefined;
	  this.transArmorKeyId = undefined;
	  this.transArmorEncryptedTrack1 = undefined;
	  this.transArmorEncryptedTrack2 = undefined;
	  this.transArmorEncryptedEmvTag57 = undefined;
	  this.transArmorEncryptedEmvTag5A = undefined;
	  this.transArmorEncryptedManualKeyedData = undefined;
	  this.iccContainer = undefined;
	  this.iccApplicationInterchangeProfile = undefined;
	  this.iccMaskedEmv57 = undefined;
	  this.iccMaskedEmv5A = undefined;
	  this.iccApplicationPanSequenceNumber = undefined;
	  this.iccApplicationExpirationDate = undefined;
	  this.iccApplicationEffectiveDate = undefined;
	  this.iccAmountAuthorized = undefined;
	  this.iccAmountOther = undefined;
	  this.iccTransactionCurrencyCode = undefined;
	  this.iccTransactionCurrencyExponent = undefined;
	  this.iccApplicationUsageControl = undefined;
	  this.iccIssuerActionCodeDefault = undefined;
	  this.iccIssuerActionCodeDenial = undefined;
	  this.iccIssuerActionCodeOnline = undefined;
	  this.iccApplicationLabel = undefined;
	  this.iccApplicationCryptogram = undefined;
	  this.iccApplicationIdentifierCard = undefined;
	  this.iccApplicationIdentifierTerminal = undefined;
	  this.iccApplicationTransactionCounter = undefined;
	  this.iccApplicationVersionNumber = undefined;
	  this.iccCryptogramInformationData = undefined;
	  this.iccCvmResults = undefined;
	  this.iccInterfaceDeviceSerialNumber = undefined;
	  this.iccIssuerApplicationData = undefined;
	  this.iccPosEntryModeCode = undefined;
	  this.iccTerminalCapabilities = undefined;
	  this.iccTerminalCountryCode = undefined;
	  this.iccTerminalType = undefined;
	  this.iccTvr = undefined;
	  this.iccTransactionDate = undefined;
	  this.iccTsi = undefined;
	  this.iccTransactionType = undefined;
	  this.iccUnpredictableNumber = undefined;
	  this.iccTransactionTime = undefined;
	  this.iccAdditionalTerminalCapabilities = undefined;
	  this.iccTransactionCategoryCode = undefined;
	  this.iccIssuerApplicationPreferredName = undefined;
	  this.iccCardholderName = undefined;
	  this.iccIssuerCodeTableIndex = undefined;
	  this.iccIssuerScripts = undefined;
	  this.iccIssuerScriptResults = undefined;
	  this.debugTrack2EquivalentData = undefined;
	  this.debugApplicationPan = undefined;
	  this.debugAmountAuthorizedBinary = undefined;
	  this.debugAmountOtherBinary = undefined;
	  this.debugTransactionStatusInformation = undefined;
	  this.debugPlainTrack1 = undefined;
	  this.debugPlainTrack2 = undefined;
	  this.schemePunATC = undefined;
	  this.schemeThirdPartyData = undefined;
	  this.schemeMerchantCustomData = undefined;
	  this.schemeTerminalEntryCapability = undefined;
	  this.pinBlockContainer = undefined;
	  this.pinBlock = undefined;
	  this.pinBlockKsn = undefined;
	  this.mac = undefined;
	  this.macKsn = undefined;
	  this.gwContainer = undefined;
	  this.gwIssuerAuthenticationData = undefined;
	  this.gwIssuerScriptTemplate1 = undefined;
	  this.gwIssuerScriptTemplate2 = undefined;
	  this.gwIssuerAuthorizationResponseCode = undefined;
	  this.gwMessageControlField = undefined;
	  this.gwTxResult = undefined;
	  this.cvmResult = undefined;
	  this.serviceCode1 = undefined;
	  this.serviceCode2 = undefined;
	  this.serviceCode3 = undefined;
	  this.offlineApprovalAuthCode = undefined;
	  this.availableOfflineSpendingAmount = undefined;
	};


	/**
	* Set the field value
	* @memberof pay.TransactionData
	* @param {pay.TxResult} txResult 
	*/
	TransactionData.prototype.setTxResult = function(txResult) {
	  this.txResult = txResult;
	};

	/**
	* Get the field value
	* @memberof pay.TransactionData
	* @return {pay.TxResult} 
	*/
	TransactionData.prototype.getTxResult = function() {
	  return this.txResult;
	};

	/**
	* Set the field value
	* @memberof pay.TransactionData
	* @param {pay.ErrorCode} txError 
	*/
	TransactionData.prototype.setTxError = function(txError) {
	  this.txError = txError;
	};

	/**
	* Get the field value
	* @memberof pay.TransactionData
	* @return {pay.ErrorCode} 
	*/
	TransactionData.prototype.getTxError = function() {
	  return this.txError;
	};

	/**
	* Set the field value
	* @memberof pay.TransactionData
	* @param {Number} amount must be a double
	*/
	TransactionData.prototype.setAmount = function(amount) {
	  this.amount = amount;
	};

	/**
	* Get the field value
	* @memberof pay.TransactionData
	* @return {Number} must be a double
	*/
	TransactionData.prototype.getAmount = function() {
	  return this.amount;
	};

	/**
	* Set the field value
	* @memberof pay.TransactionData
	* @param {Number} tipAmount must be a double
	*/
	TransactionData.prototype.setTipAmount = function(tipAmount) {
	  this.tipAmount = tipAmount;
	};

	/**
	* Get the field value
	* @memberof pay.TransactionData
	* @return {Number} must be a double
	*/
	TransactionData.prototype.getTipAmount = function() {
	  return this.tipAmount;
	};

	/**
	* Set the field value
	* @memberof pay.TransactionData
	* @param {Number} cashBackAmount must be a double
	*/
	TransactionData.prototype.setCashBackAmount = function(cashBackAmount) {
	  this.cashBackAmount = cashBackAmount;
	};

	/**
	* Get the field value
	* @memberof pay.TransactionData
	* @return {Number} must be a double
	*/
	TransactionData.prototype.getCashBackAmount = function() {
	  return this.cashBackAmount;
	};

	/**
	* Set the field value
	* @memberof pay.TransactionData
	* @param {String} errorCode 
	*/
	TransactionData.prototype.setErrorCode = function(errorCode) {
	  this.errorCode = errorCode;
	};

	/**
	* Get the field value
	* @memberof pay.TransactionData
	* @return {String} 
	*/
	TransactionData.prototype.getErrorCode = function() {
	  return this.errorCode;
	};

	/**
	* Set the field value
	* @memberof pay.TransactionData
	* @param {String} errorText 
	*/
	TransactionData.prototype.setErrorText = function(errorText) {
	  this.errorText = errorText;
	};

	/**
	* Get the field value
	* @memberof pay.TransactionData
	* @return {String} 
	*/
	TransactionData.prototype.getErrorText = function() {
	  return this.errorText;
	};

	/**
	* Set the field value
	* @memberof pay.TransactionData
	* @param {String} transactionDate 
	*/
	TransactionData.prototype.setTransactionDate = function(transactionDate) {
	  this.transactionDate = transactionDate;
	};

	/**
	* Get the field value
	* @memberof pay.TransactionData
	* @return {String} 
	*/
	TransactionData.prototype.getTransactionDate = function() {
	  return this.transactionDate;
	};

	/**
	* Set the field value
	* @memberof pay.TransactionData
	* @param {String} transactionTime 
	*/
	TransactionData.prototype.setTransactionTime = function(transactionTime) {
	  this.transactionTime = transactionTime;
	};

	/**
	* Get the field value
	* @memberof pay.TransactionData
	* @return {String} 
	*/
	TransactionData.prototype.getTransactionTime = function() {
	  return this.transactionTime;
	};

	/**
	* Set the field value
	* @memberof pay.TransactionData
	* @param {String} msrContainer 
	*/
	TransactionData.prototype.setMsrContainer = function(msrContainer) {
	  this.msrContainer = msrContainer;
	};

	/**
	* Get the field value
	* @memberof pay.TransactionData
	* @return {String} 
	*/
	TransactionData.prototype.getMsrContainer = function() {
	  return this.msrContainer;
	};

	/**
	* Set the field value
	* @memberof pay.TransactionData
	* @param {String} msrMaskedTrack1 
	*/
	TransactionData.prototype.setMsrMaskedTrack1 = function(msrMaskedTrack1) {
	  this.msrMaskedTrack1 = msrMaskedTrack1;
	};

	/**
	* Get the field value
	* @memberof pay.TransactionData
	* @return {String} 
	*/
	TransactionData.prototype.getMsrMaskedTrack1 = function() {
	  return this.msrMaskedTrack1;
	};

	/**
	* Set the field value
	* @memberof pay.TransactionData
	* @param {String} msrMaskedTrack2 
	*/
	TransactionData.prototype.setMsrMaskedTrack2 = function(msrMaskedTrack2) {
	  this.msrMaskedTrack2 = msrMaskedTrack2;
	};

	/**
	* Get the field value
	* @memberof pay.TransactionData
	* @return {String} 
	*/
	TransactionData.prototype.getMsrMaskedTrack2 = function() {
	  return this.msrMaskedTrack2;
	};

	/**
	* Set the field value
	* @memberof pay.TransactionData
	* @param {String} maskedManualPan 
	*/
	TransactionData.prototype.setMaskedManualPan = function(maskedManualPan) {
	  this.maskedManualPan = maskedManualPan;
	};

	/**
	* Get the field value
	* @memberof pay.TransactionData
	* @return {String} 
	*/
	TransactionData.prototype.getMaskedManualPan = function() {
	  return this.maskedManualPan;
	};

	/**
	* Set the field value
	* @memberof pay.TransactionData
	* @param {String} sredContainer 
	*/
	TransactionData.prototype.setSredContainer = function(sredContainer) {
	  this.sredContainer = sredContainer;
	};

	/**
	* Get the field value
	* @memberof pay.TransactionData
	* @return {String} 
	*/
	TransactionData.prototype.getSredContainer = function() {
	  return this.sredContainer;
	};

	/**
	* Set the field value
	* @memberof pay.TransactionData
	* @param {String} sred 
	*/
	TransactionData.prototype.setSred = function(sred) {
	  this.sred = sred;
	};

	/**
	* Get the field value
	* @memberof pay.TransactionData
	* @return {String} 
	*/
	TransactionData.prototype.getSred = function() {
	  return this.sred;
	};

	/**
	* Set the field value
	* @memberof pay.TransactionData
	* @param {String} ksn 
	*/
	TransactionData.prototype.setKsn = function(ksn) {
	  this.ksn = ksn;
	};

	/**
	* Get the field value
	* @memberof pay.TransactionData
	* @return {String} 
	*/
	TransactionData.prototype.getKsn = function() {
	  return this.ksn;
	};

	/**
	* Set the field value
	* @memberof pay.TransactionData
	* @param {String} transArmorContainer 
	*/
	TransactionData.prototype.setTransArmorContainer = function(transArmorContainer) {
	  this.transArmorContainer = transArmorContainer;
	};

	/**
	* Get the field value
	* @memberof pay.TransactionData
	* @return {String} 
	*/
	TransactionData.prototype.getTransArmorContainer = function() {
	  return this.transArmorContainer;
	};

	/**
	* Set the field value
	* @memberof pay.TransactionData
	* @param {String} transArmorKey 
	*/
	TransactionData.prototype.setTransArmorKey = function(transArmorKey) {
	  this.transArmorKey = transArmorKey;
	};

	/**
	* Get the field value
	* @memberof pay.TransactionData
	* @return {String} 
	*/
	TransactionData.prototype.getTransArmorKey = function() {
	  return this.transArmorKey;
	};

	/**
	* Set the field value
	* @memberof pay.TransactionData
	* @param {String} transArmorKeyId 
	*/
	TransactionData.prototype.setTransArmorKeyId = function(transArmorKeyId) {
	  this.transArmorKeyId = transArmorKeyId;
	};

	/**
	* Get the field value
	* @memberof pay.TransactionData
	* @return {String} 
	*/
	TransactionData.prototype.getTransArmorKeyId = function() {
	  return this.transArmorKeyId;
	};

	/**
	* Set the field value
	* @memberof pay.TransactionData
	* @param {String} transArmorEncryptedTrack1 
	*/
	TransactionData.prototype.setTransArmorEncryptedTrack1 = function(transArmorEncryptedTrack1) {
	  this.transArmorEncryptedTrack1 = transArmorEncryptedTrack1;
	};

	/**
	* Get the field value
	* @memberof pay.TransactionData
	* @return {String} 
	*/
	TransactionData.prototype.getTransArmorEncryptedTrack1 = function() {
	  return this.transArmorEncryptedTrack1;
	};

	/**
	* Set the field value
	* @memberof pay.TransactionData
	* @param {String} transArmorEncryptedTrack2 
	*/
	TransactionData.prototype.setTransArmorEncryptedTrack2 = function(transArmorEncryptedTrack2) {
	  this.transArmorEncryptedTrack2 = transArmorEncryptedTrack2;
	};

	/**
	* Get the field value
	* @memberof pay.TransactionData
	* @return {String} 
	*/
	TransactionData.prototype.getTransArmorEncryptedTrack2 = function() {
	  return this.transArmorEncryptedTrack2;
	};

	/**
	* Set the field value
	* @memberof pay.TransactionData
	* @param {String} transArmorEncryptedEmvTag57 
	*/
	TransactionData.prototype.setTransArmorEncryptedEmvTag57 = function(transArmorEncryptedEmvTag57) {
	  this.transArmorEncryptedEmvTag57 = transArmorEncryptedEmvTag57;
	};

	/**
	* Get the field value
	* @memberof pay.TransactionData
	* @return {String} 
	*/
	TransactionData.prototype.getTransArmorEncryptedEmvTag57 = function() {
	  return this.transArmorEncryptedEmvTag57;
	};

	/**
	* Set the field value
	* @memberof pay.TransactionData
	* @param {String} transArmorEncryptedEmvTag5A 
	*/
	TransactionData.prototype.setTransArmorEncryptedEmvTag5A = function(transArmorEncryptedEmvTag5A) {
	  this.transArmorEncryptedEmvTag5A = transArmorEncryptedEmvTag5A;
	};

	/**
	* Get the field value
	* @memberof pay.TransactionData
	* @return {String} 
	*/
	TransactionData.prototype.getTransArmorEncryptedEmvTag5A = function() {
	  return this.transArmorEncryptedEmvTag5A;
	};

	/**
	* Set the field value
	* @memberof pay.TransactionData
	* @param {String} transArmorEncryptedManualKeyedData 
	*/
	TransactionData.prototype.setTransArmorEncryptedManualKeyedData = function(transArmorEncryptedManualKeyedData) {
	  this.transArmorEncryptedManualKeyedData = transArmorEncryptedManualKeyedData;
	};

	/**
	* Get the field value
	* @memberof pay.TransactionData
	* @return {String} 
	*/
	TransactionData.prototype.getTransArmorEncryptedManualKeyedData = function() {
	  return this.transArmorEncryptedManualKeyedData;
	};

	/**
	* Set the field value
	* @memberof pay.TransactionData
	* @param {String} iccContainer 
	*/
	TransactionData.prototype.setIccContainer = function(iccContainer) {
	  this.iccContainer = iccContainer;
	};

	/**
	* Get the field value
	* @memberof pay.TransactionData
	* @return {String} 
	*/
	TransactionData.prototype.getIccContainer = function() {
	  return this.iccContainer;
	};

	/**
	* Set the field value
	* @memberof pay.TransactionData
	* @param {String} iccApplicationInterchangeProfile 
	*/
	TransactionData.prototype.setIccApplicationInterchangeProfile = function(iccApplicationInterchangeProfile) {
	  this.iccApplicationInterchangeProfile = iccApplicationInterchangeProfile;
	};

	/**
	* Get the field value
	* @memberof pay.TransactionData
	* @return {String} 
	*/
	TransactionData.prototype.getIccApplicationInterchangeProfile = function() {
	  return this.iccApplicationInterchangeProfile;
	};

	/**
	* Set the field value
	* @memberof pay.TransactionData
	* @param {String} iccMaskedEmv57 
	*/
	TransactionData.prototype.setIccMaskedEmv57 = function(iccMaskedEmv57) {
	  this.iccMaskedEmv57 = iccMaskedEmv57;
	};

	/**
	* Get the field value
	* @memberof pay.TransactionData
	* @return {String} 
	*/
	TransactionData.prototype.getIccMaskedEmv57 = function() {
	  return this.iccMaskedEmv57;
	};

	/**
	* Set the field value
	* @memberof pay.TransactionData
	* @param {String} iccMaskedEmv5A 
	*/
	TransactionData.prototype.setIccMaskedEmv5A = function(iccMaskedEmv5A) {
	  this.iccMaskedEmv5A = iccMaskedEmv5A;
	};

	/**
	* Get the field value
	* @memberof pay.TransactionData
	* @return {String} 
	*/
	TransactionData.prototype.getIccMaskedEmv5A = function() {
	  return this.iccMaskedEmv5A;
	};

	/**
	* Set the field value
	* @memberof pay.TransactionData
	* @param {String} iccApplicationPanSequenceNumber 
	*/
	TransactionData.prototype.setIccApplicationPanSequenceNumber = function(iccApplicationPanSequenceNumber) {
	  this.iccApplicationPanSequenceNumber = iccApplicationPanSequenceNumber;
	};

	/**
	* Get the field value
	* @memberof pay.TransactionData
	* @return {String} 
	*/
	TransactionData.prototype.getIccApplicationPanSequenceNumber = function() {
	  return this.iccApplicationPanSequenceNumber;
	};

	/**
	* Set the field value
	* @memberof pay.TransactionData
	* @param {String} iccApplicationExpirationDate 
	*/
	TransactionData.prototype.setIccApplicationExpirationDate = function(iccApplicationExpirationDate) {
	  this.iccApplicationExpirationDate = iccApplicationExpirationDate;
	};

	/**
	* Get the field value
	* @memberof pay.TransactionData
	* @return {String} 
	*/
	TransactionData.prototype.getIccApplicationExpirationDate = function() {
	  return this.iccApplicationExpirationDate;
	};

	/**
	* Set the field value
	* @memberof pay.TransactionData
	* @param {String} iccApplicationEffectiveDate 
	*/
	TransactionData.prototype.setIccApplicationEffectiveDate = function(iccApplicationEffectiveDate) {
	  this.iccApplicationEffectiveDate = iccApplicationEffectiveDate;
	};

	/**
	* Get the field value
	* @memberof pay.TransactionData
	* @return {String} 
	*/
	TransactionData.prototype.getIccApplicationEffectiveDate = function() {
	  return this.iccApplicationEffectiveDate;
	};

	/**
	* Set the field value
	* @memberof pay.TransactionData
	* @param {String} iccAmountAuthorized 
	*/
	TransactionData.prototype.setIccAmountAuthorized = function(iccAmountAuthorized) {
	  this.iccAmountAuthorized = iccAmountAuthorized;
	};

	/**
	* Get the field value
	* @memberof pay.TransactionData
	* @return {String} 
	*/
	TransactionData.prototype.getIccAmountAuthorized = function() {
	  return this.iccAmountAuthorized;
	};

	/**
	* Set the field value
	* @memberof pay.TransactionData
	* @param {String} iccAmountOther 
	*/
	TransactionData.prototype.setIccAmountOther = function(iccAmountOther) {
	  this.iccAmountOther = iccAmountOther;
	};

	/**
	* Get the field value
	* @memberof pay.TransactionData
	* @return {String} 
	*/
	TransactionData.prototype.getIccAmountOther = function() {
	  return this.iccAmountOther;
	};

	/**
	* Set the field value
	* @memberof pay.TransactionData
	* @param {String} iccTransactionCurrencyCode 
	*/
	TransactionData.prototype.setIccTransactionCurrencyCode = function(iccTransactionCurrencyCode) {
	  this.iccTransactionCurrencyCode = iccTransactionCurrencyCode;
	};

	/**
	* Get the field value
	* @memberof pay.TransactionData
	* @return {String} 
	*/
	TransactionData.prototype.getIccTransactionCurrencyCode = function() {
	  return this.iccTransactionCurrencyCode;
	};

	/**
	* Set the field value
	* @memberof pay.TransactionData
	* @param {String} iccTransactionCurrencyExponent 
	*/
	TransactionData.prototype.setIccTransactionCurrencyExponent = function(iccTransactionCurrencyExponent) {
	  this.iccTransactionCurrencyExponent = iccTransactionCurrencyExponent;
	};

	/**
	* Get the field value
	* @memberof pay.TransactionData
	* @return {String} 
	*/
	TransactionData.prototype.getIccTransactionCurrencyExponent = function() {
	  return this.iccTransactionCurrencyExponent;
	};

	/**
	* Set the field value
	* @memberof pay.TransactionData
	* @param {String} iccApplicationUsageControl 
	*/
	TransactionData.prototype.setIccApplicationUsageControl = function(iccApplicationUsageControl) {
	  this.iccApplicationUsageControl = iccApplicationUsageControl;
	};

	/**
	* Get the field value
	* @memberof pay.TransactionData
	* @return {String} 
	*/
	TransactionData.prototype.getIccApplicationUsageControl = function() {
	  return this.iccApplicationUsageControl;
	};

	/**
	* Set the field value
	* @memberof pay.TransactionData
	* @param {String} iccIssuerActionCodeDefault 
	*/
	TransactionData.prototype.setIccIssuerActionCodeDefault = function(iccIssuerActionCodeDefault) {
	  this.iccIssuerActionCodeDefault = iccIssuerActionCodeDefault;
	};

	/**
	* Get the field value
	* @memberof pay.TransactionData
	* @return {String} 
	*/
	TransactionData.prototype.getIccIssuerActionCodeDefault = function() {
	  return this.iccIssuerActionCodeDefault;
	};

	/**
	* Set the field value
	* @memberof pay.TransactionData
	* @param {String} iccIssuerActionCodeDenial 
	*/
	TransactionData.prototype.setIccIssuerActionCodeDenial = function(iccIssuerActionCodeDenial) {
	  this.iccIssuerActionCodeDenial = iccIssuerActionCodeDenial;
	};

	/**
	* Get the field value
	* @memberof pay.TransactionData
	* @return {String} 
	*/
	TransactionData.prototype.getIccIssuerActionCodeDenial = function() {
	  return this.iccIssuerActionCodeDenial;
	};

	/**
	* Set the field value
	* @memberof pay.TransactionData
	* @param {String} iccIssuerActionCodeOnline 
	*/
	TransactionData.prototype.setIccIssuerActionCodeOnline = function(iccIssuerActionCodeOnline) {
	  this.iccIssuerActionCodeOnline = iccIssuerActionCodeOnline;
	};

	/**
	* Get the field value
	* @memberof pay.TransactionData
	* @return {String} 
	*/
	TransactionData.prototype.getIccIssuerActionCodeOnline = function() {
	  return this.iccIssuerActionCodeOnline;
	};

	/**
	* Set the field value
	* @memberof pay.TransactionData
	* @param {String} iccApplicationLabel 
	*/
	TransactionData.prototype.setIccApplicationLabel = function(iccApplicationLabel) {
	  this.iccApplicationLabel = iccApplicationLabel;
	};

	/**
	* Get the field value
	* @memberof pay.TransactionData
	* @return {String} 
	*/
	TransactionData.prototype.getIccApplicationLabel = function() {
	  return this.iccApplicationLabel;
	};

	/**
	* Set the field value
	* @memberof pay.TransactionData
	* @param {String} iccApplicationCryptogram 
	*/
	TransactionData.prototype.setIccApplicationCryptogram = function(iccApplicationCryptogram) {
	  this.iccApplicationCryptogram = iccApplicationCryptogram;
	};

	/**
	* Get the field value
	* @memberof pay.TransactionData
	* @return {String} 
	*/
	TransactionData.prototype.getIccApplicationCryptogram = function() {
	  return this.iccApplicationCryptogram;
	};

	/**
	* Set the field value
	* @memberof pay.TransactionData
	* @param {String} iccApplicationIdentifierCard 
	*/
	TransactionData.prototype.setIccApplicationIdentifierCard = function(iccApplicationIdentifierCard) {
	  this.iccApplicationIdentifierCard = iccApplicationIdentifierCard;
	};

	/**
	* Get the field value
	* @memberof pay.TransactionData
	* @return {String} 
	*/
	TransactionData.prototype.getIccApplicationIdentifierCard = function() {
	  return this.iccApplicationIdentifierCard;
	};

	/**
	* Set the field value
	* @memberof pay.TransactionData
	* @param {String} iccApplicationIdentifierTerminal 
	*/
	TransactionData.prototype.setIccApplicationIdentifierTerminal = function(iccApplicationIdentifierTerminal) {
	  this.iccApplicationIdentifierTerminal = iccApplicationIdentifierTerminal;
	};

	/**
	* Get the field value
	* @memberof pay.TransactionData
	* @return {String} 
	*/
	TransactionData.prototype.getIccApplicationIdentifierTerminal = function() {
	  return this.iccApplicationIdentifierTerminal;
	};

	/**
	* Set the field value
	* @memberof pay.TransactionData
	* @param {String} iccApplicationTransactionCounter 
	*/
	TransactionData.prototype.setIccApplicationTransactionCounter = function(iccApplicationTransactionCounter) {
	  this.iccApplicationTransactionCounter = iccApplicationTransactionCounter;
	};

	/**
	* Get the field value
	* @memberof pay.TransactionData
	* @return {String} 
	*/
	TransactionData.prototype.getIccApplicationTransactionCounter = function() {
	  return this.iccApplicationTransactionCounter;
	};

	/**
	* Set the field value
	* @memberof pay.TransactionData
	* @param {String} iccApplicationVersionNumber 
	*/
	TransactionData.prototype.setIccApplicationVersionNumber = function(iccApplicationVersionNumber) {
	  this.iccApplicationVersionNumber = iccApplicationVersionNumber;
	};

	/**
	* Get the field value
	* @memberof pay.TransactionData
	* @return {String} 
	*/
	TransactionData.prototype.getIccApplicationVersionNumber = function() {
	  return this.iccApplicationVersionNumber;
	};

	/**
	* Set the field value
	* @memberof pay.TransactionData
	* @param {String} iccCryptogramInformationData 
	*/
	TransactionData.prototype.setIccCryptogramInformationData = function(iccCryptogramInformationData) {
	  this.iccCryptogramInformationData = iccCryptogramInformationData;
	};

	/**
	* Get the field value
	* @memberof pay.TransactionData
	* @return {String} 
	*/
	TransactionData.prototype.getIccCryptogramInformationData = function() {
	  return this.iccCryptogramInformationData;
	};

	/**
	* Set the field value
	* @memberof pay.TransactionData
	* @param {String} iccCvmResults 
	*/
	TransactionData.prototype.setIccCvmResults = function(iccCvmResults) {
	  this.iccCvmResults = iccCvmResults;
	};

	/**
	* Get the field value
	* @memberof pay.TransactionData
	* @return {String} 
	*/
	TransactionData.prototype.getIccCvmResults = function() {
	  return this.iccCvmResults;
	};

	/**
	* Set the field value
	* @memberof pay.TransactionData
	* @param {String} iccInterfaceDeviceSerialNumber 
	*/
	TransactionData.prototype.setIccInterfaceDeviceSerialNumber = function(iccInterfaceDeviceSerialNumber) {
	  this.iccInterfaceDeviceSerialNumber = iccInterfaceDeviceSerialNumber;
	};

	/**
	* Get the field value
	* @memberof pay.TransactionData
	* @return {String} 
	*/
	TransactionData.prototype.getIccInterfaceDeviceSerialNumber = function() {
	  return this.iccInterfaceDeviceSerialNumber;
	};

	/**
	* Set the field value
	* @memberof pay.TransactionData
	* @param {String} iccIssuerApplicationData 
	*/
	TransactionData.prototype.setIccIssuerApplicationData = function(iccIssuerApplicationData) {
	  this.iccIssuerApplicationData = iccIssuerApplicationData;
	};

	/**
	* Get the field value
	* @memberof pay.TransactionData
	* @return {String} 
	*/
	TransactionData.prototype.getIccIssuerApplicationData = function() {
	  return this.iccIssuerApplicationData;
	};

	/**
	* Set the field value
	* @memberof pay.TransactionData
	* @param {String} iccPosEntryModeCode 
	*/
	TransactionData.prototype.setIccPosEntryModeCode = function(iccPosEntryModeCode) {
	  this.iccPosEntryModeCode = iccPosEntryModeCode;
	};

	/**
	* Get the field value
	* @memberof pay.TransactionData
	* @return {String} 
	*/
	TransactionData.prototype.getIccPosEntryModeCode = function() {
	  return this.iccPosEntryModeCode;
	};

	/**
	* Set the field value
	* @memberof pay.TransactionData
	* @param {String} iccTerminalCapabilities 
	*/
	TransactionData.prototype.setIccTerminalCapabilities = function(iccTerminalCapabilities) {
	  this.iccTerminalCapabilities = iccTerminalCapabilities;
	};

	/**
	* Get the field value
	* @memberof pay.TransactionData
	* @return {String} 
	*/
	TransactionData.prototype.getIccTerminalCapabilities = function() {
	  return this.iccTerminalCapabilities;
	};

	/**
	* Set the field value
	* @memberof pay.TransactionData
	* @param {String} iccTerminalCountryCode 
	*/
	TransactionData.prototype.setIccTerminalCountryCode = function(iccTerminalCountryCode) {
	  this.iccTerminalCountryCode = iccTerminalCountryCode;
	};

	/**
	* Get the field value
	* @memberof pay.TransactionData
	* @return {String} 
	*/
	TransactionData.prototype.getIccTerminalCountryCode = function() {
	  return this.iccTerminalCountryCode;
	};

	/**
	* Set the field value
	* @memberof pay.TransactionData
	* @param {String} iccTerminalType 
	*/
	TransactionData.prototype.setIccTerminalType = function(iccTerminalType) {
	  this.iccTerminalType = iccTerminalType;
	};

	/**
	* Get the field value
	* @memberof pay.TransactionData
	* @return {String} 
	*/
	TransactionData.prototype.getIccTerminalType = function() {
	  return this.iccTerminalType;
	};

	/**
	* Set the field value
	* @memberof pay.TransactionData
	* @param {String} iccTvr 
	*/
	TransactionData.prototype.setIccTvr = function(iccTvr) {
	  this.iccTvr = iccTvr;
	};

	/**
	* Get the field value
	* @memberof pay.TransactionData
	* @return {String} 
	*/
	TransactionData.prototype.getIccTvr = function() {
	  return this.iccTvr;
	};

	/**
	* Set the field value
	* @memberof pay.TransactionData
	* @param {String} iccTransactionDate 
	*/
	TransactionData.prototype.setIccTransactionDate = function(iccTransactionDate) {
	  this.iccTransactionDate = iccTransactionDate;
	};

	/**
	* Get the field value
	* @memberof pay.TransactionData
	* @return {String} 
	*/
	TransactionData.prototype.getIccTransactionDate = function() {
	  return this.iccTransactionDate;
	};

	/**
	* Set the field value
	* @memberof pay.TransactionData
	* @param {String} iccTsi 
	*/
	TransactionData.prototype.setIccTsi = function(iccTsi) {
	  this.iccTsi = iccTsi;
	};

	/**
	* Get the field value
	* @memberof pay.TransactionData
	* @return {String} 
	*/
	TransactionData.prototype.getIccTsi = function() {
	  return this.iccTsi;
	};

	/**
	* Set the field value
	* @memberof pay.TransactionData
	* @param {String} iccTransactionType 
	*/
	TransactionData.prototype.setIccTransactionType = function(iccTransactionType) {
	  this.iccTransactionType = iccTransactionType;
	};

	/**
	* Get the field value
	* @memberof pay.TransactionData
	* @return {String} 
	*/
	TransactionData.prototype.getIccTransactionType = function() {
	  return this.iccTransactionType;
	};

	/**
	* Set the field value
	* @memberof pay.TransactionData
	* @param {String} iccUnpredictableNumber 
	*/
	TransactionData.prototype.setIccUnpredictableNumber = function(iccUnpredictableNumber) {
	  this.iccUnpredictableNumber = iccUnpredictableNumber;
	};

	/**
	* Get the field value
	* @memberof pay.TransactionData
	* @return {String} 
	*/
	TransactionData.prototype.getIccUnpredictableNumber = function() {
	  return this.iccUnpredictableNumber;
	};

	/**
	* Set the field value
	* @memberof pay.TransactionData
	* @param {String} iccTransactionTime 
	*/
	TransactionData.prototype.setIccTransactionTime = function(iccTransactionTime) {
	  this.iccTransactionTime = iccTransactionTime;
	};

	/**
	* Get the field value
	* @memberof pay.TransactionData
	* @return {String} 
	*/
	TransactionData.prototype.getIccTransactionTime = function() {
	  return this.iccTransactionTime;
	};

	/**
	* Set the field value
	* @memberof pay.TransactionData
	* @param {String} iccAdditionalTerminalCapabilities 
	*/
	TransactionData.prototype.setIccAdditionalTerminalCapabilities = function(iccAdditionalTerminalCapabilities) {
	  this.iccAdditionalTerminalCapabilities = iccAdditionalTerminalCapabilities;
	};

	/**
	* Get the field value
	* @memberof pay.TransactionData
	* @return {String} 
	*/
	TransactionData.prototype.getIccAdditionalTerminalCapabilities = function() {
	  return this.iccAdditionalTerminalCapabilities;
	};

	/**
	* Set the field value
	* @memberof pay.TransactionData
	* @param {String} iccTransactionCategoryCode 
	*/
	TransactionData.prototype.setIccTransactionCategoryCode = function(iccTransactionCategoryCode) {
	  this.iccTransactionCategoryCode = iccTransactionCategoryCode;
	};

	/**
	* Get the field value
	* @memberof pay.TransactionData
	* @return {String} 
	*/
	TransactionData.prototype.getIccTransactionCategoryCode = function() {
	  return this.iccTransactionCategoryCode;
	};

	/**
	* Set the field value
	* @memberof pay.TransactionData
	* @param {String} iccIssuerApplicationPreferredName 
	*/
	TransactionData.prototype.setIccIssuerApplicationPreferredName = function(iccIssuerApplicationPreferredName) {
	  this.iccIssuerApplicationPreferredName = iccIssuerApplicationPreferredName;
	};

	/**
	* Get the field value
	* @memberof pay.TransactionData
	* @return {String} 
	*/
	TransactionData.prototype.getIccIssuerApplicationPreferredName = function() {
	  return this.iccIssuerApplicationPreferredName;
	};

	/**
	* Set the field value
	* @memberof pay.TransactionData
	* @param {String} iccCardholderName 
	*/
	TransactionData.prototype.setIccCardholderName = function(iccCardholderName) {
	  this.iccCardholderName = iccCardholderName;
	};

	/**
	* Get the field value
	* @memberof pay.TransactionData
	* @return {String} 
	*/
	TransactionData.prototype.getIccCardholderName = function() {
	  return this.iccCardholderName;
	};

	/**
	* Set the field value
	* @memberof pay.TransactionData
	* @param {String} iccIssuerCodeTableIndex 
	*/
	TransactionData.prototype.setIccIssuerCodeTableIndex = function(iccIssuerCodeTableIndex) {
	  this.iccIssuerCodeTableIndex = iccIssuerCodeTableIndex;
	};

	/**
	* Get the field value
	* @memberof pay.TransactionData
	* @return {String} 
	*/
	TransactionData.prototype.getIccIssuerCodeTableIndex = function() {
	  return this.iccIssuerCodeTableIndex;
	};

	/**
	* Set the field value
	* @memberof pay.TransactionData
	* @param {String} iccIssuerScripts 
	*/
	TransactionData.prototype.setIccIssuerScripts = function(iccIssuerScripts) {
	  this.iccIssuerScripts = iccIssuerScripts;
	};

	/**
	* Get the field value
	* @memberof pay.TransactionData
	* @return {String} 
	*/
	TransactionData.prototype.getIccIssuerScripts = function() {
	  return this.iccIssuerScripts;
	};

	/**
	* Set the field value
	* @memberof pay.TransactionData
	* @param {String} iccIssuerScriptResults 
	*/
	TransactionData.prototype.setIccIssuerScriptResults = function(iccIssuerScriptResults) {
	  this.iccIssuerScriptResults = iccIssuerScriptResults;
	};

	/**
	* Get the field value
	* @memberof pay.TransactionData
	* @return {String} 
	*/
	TransactionData.prototype.getIccIssuerScriptResults = function() {
	  return this.iccIssuerScriptResults;
	};

	/**
	* Set the field value
	* @memberof pay.TransactionData
	* @param {String} debugTrack2EquivalentData 
	*/
	TransactionData.prototype.setDebugTrack2EquivalentData = function(debugTrack2EquivalentData) {
	  this.debugTrack2EquivalentData = debugTrack2EquivalentData;
	};

	/**
	* Get the field value
	* @memberof pay.TransactionData
	* @return {String} 
	*/
	TransactionData.prototype.getDebugTrack2EquivalentData = function() {
	  return this.debugTrack2EquivalentData;
	};

	/**
	* Set the field value
	* @memberof pay.TransactionData
	* @param {String} debugApplicationPan 
	*/
	TransactionData.prototype.setDebugApplicationPan = function(debugApplicationPan) {
	  this.debugApplicationPan = debugApplicationPan;
	};

	/**
	* Get the field value
	* @memberof pay.TransactionData
	* @return {String} 
	*/
	TransactionData.prototype.getDebugApplicationPan = function() {
	  return this.debugApplicationPan;
	};

	/**
	* Set the field value
	* @memberof pay.TransactionData
	* @param {String} debugAmountAuthorizedBinary 
	*/
	TransactionData.prototype.setDebugAmountAuthorizedBinary = function(debugAmountAuthorizedBinary) {
	  this.debugAmountAuthorizedBinary = debugAmountAuthorizedBinary;
	};

	/**
	* Get the field value
	* @memberof pay.TransactionData
	* @return {String} 
	*/
	TransactionData.prototype.getDebugAmountAuthorizedBinary = function() {
	  return this.debugAmountAuthorizedBinary;
	};

	/**
	* Set the field value
	* @memberof pay.TransactionData
	* @param {String} debugAmountOtherBinary 
	*/
	TransactionData.prototype.setDebugAmountOtherBinary = function(debugAmountOtherBinary) {
	  this.debugAmountOtherBinary = debugAmountOtherBinary;
	};

	/**
	* Get the field value
	* @memberof pay.TransactionData
	* @return {String} 
	*/
	TransactionData.prototype.getDebugAmountOtherBinary = function() {
	  return this.debugAmountOtherBinary;
	};

	/**
	* Set the field value
	* @memberof pay.TransactionData
	* @param {String} debugTransactionStatusInformation 
	*/
	TransactionData.prototype.setDebugTransactionStatusInformation = function(debugTransactionStatusInformation) {
	  this.debugTransactionStatusInformation = debugTransactionStatusInformation;
	};

	/**
	* Get the field value
	* @memberof pay.TransactionData
	* @return {String} 
	*/
	TransactionData.prototype.getDebugTransactionStatusInformation = function() {
	  return this.debugTransactionStatusInformation;
	};

	/**
	* Set the field value
	* @memberof pay.TransactionData
	* @param {String} debugPlainTrack1 
	*/
	TransactionData.prototype.setDebugPlainTrack1 = function(debugPlainTrack1) {
	  this.debugPlainTrack1 = debugPlainTrack1;
	};

	/**
	* Get the field value
	* @memberof pay.TransactionData
	* @return {String} 
	*/
	TransactionData.prototype.getDebugPlainTrack1 = function() {
	  return this.debugPlainTrack1;
	};

	/**
	* Set the field value
	* @memberof pay.TransactionData
	* @param {String} debugPlainTrack2 
	*/
	TransactionData.prototype.setDebugPlainTrack2 = function(debugPlainTrack2) {
	  this.debugPlainTrack2 = debugPlainTrack2;
	};

	/**
	* Get the field value
	* @memberof pay.TransactionData
	* @return {String} 
	*/
	TransactionData.prototype.getDebugPlainTrack2 = function() {
	  return this.debugPlainTrack2;
	};

	/**
	* Set the field value
	* @memberof pay.TransactionData
	* @param {String} schemePunATC 
	*/
	TransactionData.prototype.setSchemePunATC = function(schemePunATC) {
	  this.schemePunATC = schemePunATC;
	};

	/**
	* Get the field value
	* @memberof pay.TransactionData
	* @return {String} 
	*/
	TransactionData.prototype.getSchemePunATC = function() {
	  return this.schemePunATC;
	};

	/**
	* Set the field value
	* @memberof pay.TransactionData
	* @param {String} schemeThirdPartyData 
	*/
	TransactionData.prototype.setSchemeThirdPartyData = function(schemeThirdPartyData) {
	  this.schemeThirdPartyData = schemeThirdPartyData;
	};

	/**
	* Get the field value
	* @memberof pay.TransactionData
	* @return {String} 
	*/
	TransactionData.prototype.getSchemeThirdPartyData = function() {
	  return this.schemeThirdPartyData;
	};

	/**
	* Set the field value
	* @memberof pay.TransactionData
	* @param {String} schemeMerchantCustomData 
	*/
	TransactionData.prototype.setSchemeMerchantCustomData = function(schemeMerchantCustomData) {
	  this.schemeMerchantCustomData = schemeMerchantCustomData;
	};

	/**
	* Get the field value
	* @memberof pay.TransactionData
	* @return {String} 
	*/
	TransactionData.prototype.getSchemeMerchantCustomData = function() {
	  return this.schemeMerchantCustomData;
	};

	/**
	* Set the field value
	* @memberof pay.TransactionData
	* @param {String} schemeTerminalEntryCapability 
	*/
	TransactionData.prototype.setSchemeTerminalEntryCapability = function(schemeTerminalEntryCapability) {
	  this.schemeTerminalEntryCapability = schemeTerminalEntryCapability;
	};

	/**
	* Get the field value
	* @memberof pay.TransactionData
	* @return {String} 
	*/
	TransactionData.prototype.getSchemeTerminalEntryCapability = function() {
	  return this.schemeTerminalEntryCapability;
	};

	/**
	* Set the field value
	* @memberof pay.TransactionData
	* @param {String} pinBlockContainer 
	*/
	TransactionData.prototype.setPinBlockContainer = function(pinBlockContainer) {
	  this.pinBlockContainer = pinBlockContainer;
	};

	/**
	* Get the field value
	* @memberof pay.TransactionData
	* @return {String} 
	*/
	TransactionData.prototype.getPinBlockContainer = function() {
	  return this.pinBlockContainer;
	};

	/**
	* Set the field value
	* @memberof pay.TransactionData
	* @param {String} pinBlock 
	*/
	TransactionData.prototype.setPinBlock = function(pinBlock) {
	  this.pinBlock = pinBlock;
	};

	/**
	* Get the field value
	* @memberof pay.TransactionData
	* @return {String} 
	*/
	TransactionData.prototype.getPinBlock = function() {
	  return this.pinBlock;
	};

	/**
	* Set the field value
	* @memberof pay.TransactionData
	* @param {String} pinBlockKsn 
	*/
	TransactionData.prototype.setPinBlockKsn = function(pinBlockKsn) {
	  this.pinBlockKsn = pinBlockKsn;
	};

	/**
	* Get the field value
	* @memberof pay.TransactionData
	* @return {String} 
	*/
	TransactionData.prototype.getPinBlockKsn = function() {
	  return this.pinBlockKsn;
	};

	/**
	* Set the field value
	* @memberof pay.TransactionData
	* @param {String} mac 
	*/
	TransactionData.prototype.setMac = function(mac) {
	  this.mac = mac;
	};

	/**
	* Get the field value
	* @memberof pay.TransactionData
	* @return {String} 
	*/
	TransactionData.prototype.getMac = function() {
	  return this.mac;
	};

	/**
	* Set the field value
	* @memberof pay.TransactionData
	* @param {String} macKsn 
	*/
	TransactionData.prototype.setMacKsn = function(macKsn) {
	  this.macKsn = macKsn;
	};

	/**
	* Get the field value
	* @memberof pay.TransactionData
	* @return {String} 
	*/
	TransactionData.prototype.getMacKsn = function() {
	  return this.macKsn;
	};

	/**
	* Set the field value
	* @memberof pay.TransactionData
	* @param {String} gwContainer 
	*/
	TransactionData.prototype.setGwContainer = function(gwContainer) {
	  this.gwContainer = gwContainer;
	};

	/**
	* Get the field value
	* @memberof pay.TransactionData
	* @return {String} 
	*/
	TransactionData.prototype.getGwContainer = function() {
	  return this.gwContainer;
	};

	/**
	* Set the field value
	* @memberof pay.TransactionData
	* @param {String} gwIssuerAuthenticationData 
	*/
	TransactionData.prototype.setGwIssuerAuthenticationData = function(gwIssuerAuthenticationData) {
	  this.gwIssuerAuthenticationData = gwIssuerAuthenticationData;
	};

	/**
	* Get the field value
	* @memberof pay.TransactionData
	* @return {String} 
	*/
	TransactionData.prototype.getGwIssuerAuthenticationData = function() {
	  return this.gwIssuerAuthenticationData;
	};

	/**
	* Set the field value
	* @memberof pay.TransactionData
	* @param {String} gwIssuerScriptTemplate1 
	*/
	TransactionData.prototype.setGwIssuerScriptTemplate1 = function(gwIssuerScriptTemplate1) {
	  this.gwIssuerScriptTemplate1 = gwIssuerScriptTemplate1;
	};

	/**
	* Get the field value
	* @memberof pay.TransactionData
	* @return {String} 
	*/
	TransactionData.prototype.getGwIssuerScriptTemplate1 = function() {
	  return this.gwIssuerScriptTemplate1;
	};

	/**
	* Set the field value
	* @memberof pay.TransactionData
	* @param {String} gwIssuerScriptTemplate2 
	*/
	TransactionData.prototype.setGwIssuerScriptTemplate2 = function(gwIssuerScriptTemplate2) {
	  this.gwIssuerScriptTemplate2 = gwIssuerScriptTemplate2;
	};

	/**
	* Get the field value
	* @memberof pay.TransactionData
	* @return {String} 
	*/
	TransactionData.prototype.getGwIssuerScriptTemplate2 = function() {
	  return this.gwIssuerScriptTemplate2;
	};

	/**
	* Set the field value
	* @memberof pay.TransactionData
	* @param {String} gwIssuerAuthorizationResponseCode 
	*/
	TransactionData.prototype.setGwIssuerAuthorizationResponseCode = function(gwIssuerAuthorizationResponseCode) {
	  this.gwIssuerAuthorizationResponseCode = gwIssuerAuthorizationResponseCode;
	};

	/**
	* Get the field value
	* @memberof pay.TransactionData
	* @return {String} 
	*/
	TransactionData.prototype.getGwIssuerAuthorizationResponseCode = function() {
	  return this.gwIssuerAuthorizationResponseCode;
	};

	/**
	* Set the field value
	* @memberof pay.TransactionData
	* @param {String} gwMessageControlField 
	*/
	TransactionData.prototype.setGwMessageControlField = function(gwMessageControlField) {
	  this.gwMessageControlField = gwMessageControlField;
	};

	/**
	* Get the field value
	* @memberof pay.TransactionData
	* @return {String} 
	*/
	TransactionData.prototype.getGwMessageControlField = function() {
	  return this.gwMessageControlField;
	};

	/**
	* Set the field value
	* @memberof pay.TransactionData
	* @param {pay.GwTxResult} gwTxResult 
	*/
	TransactionData.prototype.setGwTxResult = function(gwTxResult) {
	  this.gwTxResult = gwTxResult;
	};

	/**
	* Get the field value
	* @memberof pay.TransactionData
	* @return {pay.GwTxResult} 
	*/
	TransactionData.prototype.getGwTxResult = function() {
	  return this.gwTxResult;
	};

	/**
	* Set the field value
	* @memberof pay.TransactionData
	* @param {payments.CvmResult} cvmResult 
	*/
	TransactionData.prototype.setCvmResult = function(cvmResult) {
	  this.cvmResult = cvmResult;
	};

	/**
	* Get the field value
	* @memberof pay.TransactionData
	* @return {payments.CvmResult} 
	*/
	TransactionData.prototype.getCvmResult = function() {
	  return this.cvmResult;
	};

	/**
	* Set the field value
	* @memberof pay.TransactionData
	* @param {pay.ServiceCode1} serviceCode1 
	*/
	TransactionData.prototype.setServiceCode1 = function(serviceCode1) {
	  this.serviceCode1 = serviceCode1;
	};

	/**
	* Get the field value
	* @memberof pay.TransactionData
	* @return {pay.ServiceCode1} 
	*/
	TransactionData.prototype.getServiceCode1 = function() {
	  return this.serviceCode1;
	};

	/**
	* Set the field value
	* @memberof pay.TransactionData
	* @param {pay.ServiceCode2} serviceCode2 
	*/
	TransactionData.prototype.setServiceCode2 = function(serviceCode2) {
	  this.serviceCode2 = serviceCode2;
	};

	/**
	* Get the field value
	* @memberof pay.TransactionData
	* @return {pay.ServiceCode2} 
	*/
	TransactionData.prototype.getServiceCode2 = function() {
	  return this.serviceCode2;
	};

	/**
	* Set the field value
	* @memberof pay.TransactionData
	* @param {pay.ServiceCode3} serviceCode3 
	*/
	TransactionData.prototype.setServiceCode3 = function(serviceCode3) {
	  this.serviceCode3 = serviceCode3;
	};

	/**
	* Get the field value
	* @memberof pay.TransactionData
	* @return {pay.ServiceCode3} 
	*/
	TransactionData.prototype.getServiceCode3 = function() {
	  return this.serviceCode3;
	};

	/**
	* Set the field value
	* @memberof pay.TransactionData
	* @param {String} offlineApprovalAuthCode 
	*/
	TransactionData.prototype.setOfflineApprovalAuthCode = function(offlineApprovalAuthCode) {
	  this.offlineApprovalAuthCode = offlineApprovalAuthCode;
	};

	/**
	* Get the field value
	* @memberof pay.TransactionData
	* @return {String} 
	*/
	TransactionData.prototype.getOfflineApprovalAuthCode = function() {
	  return this.offlineApprovalAuthCode;
	};

	/**
	* Set the field value
	* @memberof pay.TransactionData
	* @param {Number} availableOfflineSpendingAmount must be a double
	*/
	TransactionData.prototype.setAvailableOfflineSpendingAmount = function(availableOfflineSpendingAmount) {
	  this.availableOfflineSpendingAmount = availableOfflineSpendingAmount;
	};

	/**
	* Get the field value
	* @memberof pay.TransactionData
	* @return {Number} must be a double
	*/
	TransactionData.prototype.getAvailableOfflineSpendingAmount = function() {
	  return this.availableOfflineSpendingAmount;
	};

	/**
	* @memberof pay.TransactionData
	* @private
	*/
	TransactionData.prototype.getMetaInfo = function(fieldName) {
	  var curclass = this._class_;
	  do {
	    var fieldMetaInfo = curclass._meta_.fields[fieldName];
	    if(fieldMetaInfo) {
	      return fieldMetaInfo;
	    }
	    if(curclass._meta_._superMeta_) {
	      curclass = curclass._meta_._superMeta_._class_;
	    } else {
	      curclass = null;
	    }
	  } while(curclass);
	  return null;
	};

	TransactionData.prototype.toString = function() {
	  return JSON.stringify(this);
	};

	TransactionData._meta_ =  {fields:  {}};
	TransactionData._meta_._class_ =  TransactionData;
	TransactionData._meta_.fields["txResult"] = {};
	TransactionData._meta_.fields["txResult"].type = pay_TxResult;
	TransactionData._meta_.fields["txError"] = {};
	TransactionData._meta_.fields["txError"].type = pay_ErrorCode;
	TransactionData._meta_.fields["amount"] = {};
	TransactionData._meta_.fields["amount"].type = Number;
	TransactionData._meta_.fields["tipAmount"] = {};
	TransactionData._meta_.fields["tipAmount"].type = Number;
	TransactionData._meta_.fields["cashBackAmount"] = {};
	TransactionData._meta_.fields["cashBackAmount"].type = Number;
	TransactionData._meta_.fields["errorCode"] = {};
	TransactionData._meta_.fields["errorCode"].type = String;
	TransactionData._meta_.fields["errorText"] = {};
	TransactionData._meta_.fields["errorText"].type = String;
	TransactionData._meta_.fields["transactionDate"] = {};
	TransactionData._meta_.fields["transactionDate"].type = String;
	TransactionData._meta_.fields["transactionTime"] = {};
	TransactionData._meta_.fields["transactionTime"].type = String;
	TransactionData._meta_.fields["msrContainer"] = {};
	TransactionData._meta_.fields["msrContainer"].type = String;
	TransactionData._meta_.fields["msrMaskedTrack1"] = {};
	TransactionData._meta_.fields["msrMaskedTrack1"].type = String;
	TransactionData._meta_.fields["msrMaskedTrack2"] = {};
	TransactionData._meta_.fields["msrMaskedTrack2"].type = String;
	TransactionData._meta_.fields["maskedManualPan"] = {};
	TransactionData._meta_.fields["maskedManualPan"].type = String;
	TransactionData._meta_.fields["sredContainer"] = {};
	TransactionData._meta_.fields["sredContainer"].type = String;
	TransactionData._meta_.fields["sred"] = {};
	TransactionData._meta_.fields["sred"].type = String;
	TransactionData._meta_.fields["ksn"] = {};
	TransactionData._meta_.fields["ksn"].type = String;
	TransactionData._meta_.fields["transArmorContainer"] = {};
	TransactionData._meta_.fields["transArmorContainer"].type = String;
	TransactionData._meta_.fields["transArmorKey"] = {};
	TransactionData._meta_.fields["transArmorKey"].type = String;
	TransactionData._meta_.fields["transArmorKeyId"] = {};
	TransactionData._meta_.fields["transArmorKeyId"].type = String;
	TransactionData._meta_.fields["transArmorEncryptedTrack1"] = {};
	TransactionData._meta_.fields["transArmorEncryptedTrack1"].type = String;
	TransactionData._meta_.fields["transArmorEncryptedTrack2"] = {};
	TransactionData._meta_.fields["transArmorEncryptedTrack2"].type = String;
	TransactionData._meta_.fields["transArmorEncryptedEmvTag57"] = {};
	TransactionData._meta_.fields["transArmorEncryptedEmvTag57"].type = String;
	TransactionData._meta_.fields["transArmorEncryptedEmvTag5A"] = {};
	TransactionData._meta_.fields["transArmorEncryptedEmvTag5A"].type = String;
	TransactionData._meta_.fields["transArmorEncryptedManualKeyedData"] = {};
	TransactionData._meta_.fields["transArmorEncryptedManualKeyedData"].type = String;
	TransactionData._meta_.fields["iccContainer"] = {};
	TransactionData._meta_.fields["iccContainer"].type = String;
	TransactionData._meta_.fields["iccApplicationInterchangeProfile"] = {};
	TransactionData._meta_.fields["iccApplicationInterchangeProfile"].type = String;
	TransactionData._meta_.fields["iccMaskedEmv57"] = {};
	TransactionData._meta_.fields["iccMaskedEmv57"].type = String;
	TransactionData._meta_.fields["iccMaskedEmv5A"] = {};
	TransactionData._meta_.fields["iccMaskedEmv5A"].type = String;
	TransactionData._meta_.fields["iccApplicationPanSequenceNumber"] = {};
	TransactionData._meta_.fields["iccApplicationPanSequenceNumber"].type = String;
	TransactionData._meta_.fields["iccApplicationExpirationDate"] = {};
	TransactionData._meta_.fields["iccApplicationExpirationDate"].type = String;
	TransactionData._meta_.fields["iccApplicationEffectiveDate"] = {};
	TransactionData._meta_.fields["iccApplicationEffectiveDate"].type = String;
	TransactionData._meta_.fields["iccAmountAuthorized"] = {};
	TransactionData._meta_.fields["iccAmountAuthorized"].type = String;
	TransactionData._meta_.fields["iccAmountOther"] = {};
	TransactionData._meta_.fields["iccAmountOther"].type = String;
	TransactionData._meta_.fields["iccTransactionCurrencyCode"] = {};
	TransactionData._meta_.fields["iccTransactionCurrencyCode"].type = String;
	TransactionData._meta_.fields["iccTransactionCurrencyExponent"] = {};
	TransactionData._meta_.fields["iccTransactionCurrencyExponent"].type = String;
	TransactionData._meta_.fields["iccApplicationUsageControl"] = {};
	TransactionData._meta_.fields["iccApplicationUsageControl"].type = String;
	TransactionData._meta_.fields["iccIssuerActionCodeDefault"] = {};
	TransactionData._meta_.fields["iccIssuerActionCodeDefault"].type = String;
	TransactionData._meta_.fields["iccIssuerActionCodeDenial"] = {};
	TransactionData._meta_.fields["iccIssuerActionCodeDenial"].type = String;
	TransactionData._meta_.fields["iccIssuerActionCodeOnline"] = {};
	TransactionData._meta_.fields["iccIssuerActionCodeOnline"].type = String;
	TransactionData._meta_.fields["iccApplicationLabel"] = {};
	TransactionData._meta_.fields["iccApplicationLabel"].type = String;
	TransactionData._meta_.fields["iccApplicationCryptogram"] = {};
	TransactionData._meta_.fields["iccApplicationCryptogram"].type = String;
	TransactionData._meta_.fields["iccApplicationIdentifierCard"] = {};
	TransactionData._meta_.fields["iccApplicationIdentifierCard"].type = String;
	TransactionData._meta_.fields["iccApplicationIdentifierTerminal"] = {};
	TransactionData._meta_.fields["iccApplicationIdentifierTerminal"].type = String;
	TransactionData._meta_.fields["iccApplicationTransactionCounter"] = {};
	TransactionData._meta_.fields["iccApplicationTransactionCounter"].type = String;
	TransactionData._meta_.fields["iccApplicationVersionNumber"] = {};
	TransactionData._meta_.fields["iccApplicationVersionNumber"].type = String;
	TransactionData._meta_.fields["iccCryptogramInformationData"] = {};
	TransactionData._meta_.fields["iccCryptogramInformationData"].type = String;
	TransactionData._meta_.fields["iccCvmResults"] = {};
	TransactionData._meta_.fields["iccCvmResults"].type = String;
	TransactionData._meta_.fields["iccInterfaceDeviceSerialNumber"] = {};
	TransactionData._meta_.fields["iccInterfaceDeviceSerialNumber"].type = String;
	TransactionData._meta_.fields["iccIssuerApplicationData"] = {};
	TransactionData._meta_.fields["iccIssuerApplicationData"].type = String;
	TransactionData._meta_.fields["iccPosEntryModeCode"] = {};
	TransactionData._meta_.fields["iccPosEntryModeCode"].type = String;
	TransactionData._meta_.fields["iccTerminalCapabilities"] = {};
	TransactionData._meta_.fields["iccTerminalCapabilities"].type = String;
	TransactionData._meta_.fields["iccTerminalCountryCode"] = {};
	TransactionData._meta_.fields["iccTerminalCountryCode"].type = String;
	TransactionData._meta_.fields["iccTerminalType"] = {};
	TransactionData._meta_.fields["iccTerminalType"].type = String;
	TransactionData._meta_.fields["iccTvr"] = {};
	TransactionData._meta_.fields["iccTvr"].type = String;
	TransactionData._meta_.fields["iccTransactionDate"] = {};
	TransactionData._meta_.fields["iccTransactionDate"].type = String;
	TransactionData._meta_.fields["iccTsi"] = {};
	TransactionData._meta_.fields["iccTsi"].type = String;
	TransactionData._meta_.fields["iccTransactionType"] = {};
	TransactionData._meta_.fields["iccTransactionType"].type = String;
	TransactionData._meta_.fields["iccUnpredictableNumber"] = {};
	TransactionData._meta_.fields["iccUnpredictableNumber"].type = String;
	TransactionData._meta_.fields["iccTransactionTime"] = {};
	TransactionData._meta_.fields["iccTransactionTime"].type = String;
	TransactionData._meta_.fields["iccAdditionalTerminalCapabilities"] = {};
	TransactionData._meta_.fields["iccAdditionalTerminalCapabilities"].type = String;
	TransactionData._meta_.fields["iccTransactionCategoryCode"] = {};
	TransactionData._meta_.fields["iccTransactionCategoryCode"].type = String;
	TransactionData._meta_.fields["iccIssuerApplicationPreferredName"] = {};
	TransactionData._meta_.fields["iccIssuerApplicationPreferredName"].type = String;
	TransactionData._meta_.fields["iccCardholderName"] = {};
	TransactionData._meta_.fields["iccCardholderName"].type = String;
	TransactionData._meta_.fields["iccIssuerCodeTableIndex"] = {};
	TransactionData._meta_.fields["iccIssuerCodeTableIndex"].type = String;
	TransactionData._meta_.fields["iccIssuerScripts"] = {};
	TransactionData._meta_.fields["iccIssuerScripts"].type = String;
	TransactionData._meta_.fields["iccIssuerScriptResults"] = {};
	TransactionData._meta_.fields["iccIssuerScriptResults"].type = String;
	TransactionData._meta_.fields["debugTrack2EquivalentData"] = {};
	TransactionData._meta_.fields["debugTrack2EquivalentData"].type = String;
	TransactionData._meta_.fields["debugApplicationPan"] = {};
	TransactionData._meta_.fields["debugApplicationPan"].type = String;
	TransactionData._meta_.fields["debugAmountAuthorizedBinary"] = {};
	TransactionData._meta_.fields["debugAmountAuthorizedBinary"].type = String;
	TransactionData._meta_.fields["debugAmountOtherBinary"] = {};
	TransactionData._meta_.fields["debugAmountOtherBinary"].type = String;
	TransactionData._meta_.fields["debugTransactionStatusInformation"] = {};
	TransactionData._meta_.fields["debugTransactionStatusInformation"].type = String;
	TransactionData._meta_.fields["debugPlainTrack1"] = {};
	TransactionData._meta_.fields["debugPlainTrack1"].type = String;
	TransactionData._meta_.fields["debugPlainTrack2"] = {};
	TransactionData._meta_.fields["debugPlainTrack2"].type = String;
	TransactionData._meta_.fields["schemePunATC"] = {};
	TransactionData._meta_.fields["schemePunATC"].type = String;
	TransactionData._meta_.fields["schemeThirdPartyData"] = {};
	TransactionData._meta_.fields["schemeThirdPartyData"].type = String;
	TransactionData._meta_.fields["schemeMerchantCustomData"] = {};
	TransactionData._meta_.fields["schemeMerchantCustomData"].type = String;
	TransactionData._meta_.fields["schemeTerminalEntryCapability"] = {};
	TransactionData._meta_.fields["schemeTerminalEntryCapability"].type = String;
	TransactionData._meta_.fields["pinBlockContainer"] = {};
	TransactionData._meta_.fields["pinBlockContainer"].type = String;
	TransactionData._meta_.fields["pinBlock"] = {};
	TransactionData._meta_.fields["pinBlock"].type = String;
	TransactionData._meta_.fields["pinBlockKsn"] = {};
	TransactionData._meta_.fields["pinBlockKsn"].type = String;
	TransactionData._meta_.fields["mac"] = {};
	TransactionData._meta_.fields["mac"].type = String;
	TransactionData._meta_.fields["macKsn"] = {};
	TransactionData._meta_.fields["macKsn"].type = String;
	TransactionData._meta_.fields["gwContainer"] = {};
	TransactionData._meta_.fields["gwContainer"].type = String;
	TransactionData._meta_.fields["gwIssuerAuthenticationData"] = {};
	TransactionData._meta_.fields["gwIssuerAuthenticationData"].type = String;
	TransactionData._meta_.fields["gwIssuerScriptTemplate1"] = {};
	TransactionData._meta_.fields["gwIssuerScriptTemplate1"].type = String;
	TransactionData._meta_.fields["gwIssuerScriptTemplate2"] = {};
	TransactionData._meta_.fields["gwIssuerScriptTemplate2"].type = String;
	TransactionData._meta_.fields["gwIssuerAuthorizationResponseCode"] = {};
	TransactionData._meta_.fields["gwIssuerAuthorizationResponseCode"].type = String;
	TransactionData._meta_.fields["gwMessageControlField"] = {};
	TransactionData._meta_.fields["gwMessageControlField"].type = String;
	TransactionData._meta_.fields["gwTxResult"] = {};
	TransactionData._meta_.fields["gwTxResult"].type = pay_GwTxResult;
	TransactionData._meta_.fields["cvmResult"] = {};
	TransactionData._meta_.fields["cvmResult"].type = payments_CvmResult;
	TransactionData._meta_.fields["serviceCode1"] = {};
	TransactionData._meta_.fields["serviceCode1"].type = pay_ServiceCode1;
	TransactionData._meta_.fields["serviceCode2"] = {};
	TransactionData._meta_.fields["serviceCode2"].type = pay_ServiceCode2;
	TransactionData._meta_.fields["serviceCode3"] = {};
	TransactionData._meta_.fields["serviceCode3"].type = pay_ServiceCode3;
	TransactionData._meta_.fields["offlineApprovalAuthCode"] = {};
	TransactionData._meta_.fields["offlineApprovalAuthCode"].type = String;
	TransactionData._meta_.fields["availableOfflineSpendingAmount"] = {};
	TransactionData._meta_.fields["availableOfflineSpendingAmount"].type = Number;

	//
	// Expose the module.
	//
	if (true) {
	module.exports = TransactionData;
	}



/***/ }),
/* 429 */
/***/ (function(module, exports, __webpack_require__) {

	/**
	 * Autogenerated by Avro
	 * 
	 * DO NOT EDIT DIRECTLY
	 */


	/**
	* @memberof pay
	* @enum {string}
	*/
	var TxResult = {
	  ERROR : "ERROR",
	  MSR : "MSR",
	  EMV_OFFLINE_APPROVED : "EMV_OFFLINE_APPROVED",
	  EMV_OFFLINE_DECLINED : "EMV_OFFLINE_DECLINED",
	  EMV_GO_ONLINE : "EMV_GO_ONLINE",
	  EMV_APPROVED_ONLINE : "EMV_APPROVED_ONLINE",
	  EMV_DECLINED_ONLINE : "EMV_DECLINED_ONLINE",
	  RFID_OFFLINE_APPROVED : "RFID_OFFLINE_APPROVED",
	  RFID_OFFLINE_DECLINED : "RFID_OFFLINE_DECLINED",
	  RFID_GO_ONLINE : "RFID_GO_ONLINE",
	  RFID_TERMINATED : "RFID_TERMINATED",
	  RFID_MSR : "RFID_MSR",
	  MANUAL : "MANUAL"
	};


	//
	// Expose the module.
	//
	if (true) {
	module.exports = TxResult;
	}



/***/ }),
/* 430 */
/***/ (function(module, exports, __webpack_require__) {

	/**
	 * Autogenerated by Avro
	 * 
	 * DO NOT EDIT DIRECTLY
	 */


	/**
	* @memberof payments
	* @enum {string}
	*/
	var AVSResult = {
	  SUCCESS : "SUCCESS",
	  ZIP_CODE_MATCH : "ZIP_CODE_MATCH",
	  ZIP_CODE_MATCH_ADDRESS_NOT_CHECKED : "ZIP_CODE_MATCH_ADDRESS_NOT_CHECKED",
	  ADDRESS_MATCH : "ADDRESS_MATCH",
	  ADDRESS_MATCH_ZIP_NOT_CHECKED : "ADDRESS_MATCH_ZIP_NOT_CHECKED",
	  NEITHER_MATCH : "NEITHER_MATCH",
	  SERVICE_FAILURE : "SERVICE_FAILURE",
	  SERVICE_UNAVAILABLE : "SERVICE_UNAVAILABLE",
	  NOT_CHECKED : "NOT_CHECKED",
	  ZIP_CODE_NOT_MATCHED_ADDRESS_NOT_CHECKED : "ZIP_CODE_NOT_MATCHED_ADDRESS_NOT_CHECKED",
	  ADDRESS_NOT_MATCHED_ZIP_CODE_NOT_CHECKED : "ADDRESS_NOT_MATCHED_ZIP_CODE_NOT_CHECKED"
	};


	//
	// Expose the module.
	//
	if (true) {
	module.exports = AVSResult;
	}



/***/ }),
/* 431 */
/***/ (function(module, exports, __webpack_require__) {

	/**
	 * Autogenerated by Avro
	 * 
	 * DO NOT EDIT DIRECTLY
	 */


	/**
	* @memberof payments
	* @enum {string}
	*/
	var AccountType = {
	  CREDIT : "CREDIT",
	  DEBIT : "DEBIT",
	  CHECKING : "CHECKING",
	  SAVINGS : "SAVINGS"
	};


	//
	// Expose the module.
	//
	if (true) {
	module.exports = AccountType;
	}



/***/ }),
/* 432 */
/***/ (function(module, exports, __webpack_require__) {

	/**
	 * Autogenerated by Avro
	 * 
	 * DO NOT EDIT DIRECTLY
	 */


	/**
	Type of additional charge. INTERAC is deprecated, use INTERAC_V2
	* @memberof payments
	* @enum {string}
	*/
	var AdditionalChargeType = {
	  INTERAC : "INTERAC",
	  CREDIT_SURCHARGE : "CREDIT_SURCHARGE",
	  CONVENIENCE_FEE : "CONVENIENCE_FEE",
	  INTERAC_V2 : "INTERAC_V2"
	};


	//
	// Expose the module.
	//
	if (true) {
	module.exports = AdditionalChargeType;
	}



/***/ }),
/* 433 */
/***/ (function(module, exports, __webpack_require__) {

	/**
	 * Autogenerated by Avro
	 * 
	 * DO NOT EDIT DIRECTLY
	 */

	var payments_BatchCardTotal = __webpack_require__(160);
	var payments_DeviceTotalStats = __webpack_require__(443);
	var payments_BatchTotalStats = __webpack_require__(434);
	var payments_EndpointTotalStats = __webpack_require__(445);
	var payments_ServerTotalStats = __webpack_require__(456);

	/**
	* @constructor
	* @memberof payments
	*/
	var BatchDetail = function() {
	  this._class_ = BatchDetail;
	  this.terminalId = undefined;
	  this.batchTotals = undefined;
	  this.serverTotals = undefined;
	  this.cardTotals = undefined;
	  this.deviceTotals = undefined;
	  this.endpointTotals = undefined;
	  this.openTips = undefined;
	  this.openTabs = undefined;
	};


	/**
	* Set the field value
	* Terminal ID.
	*
	* @memberof payments.BatchDetail
	* @param {String} terminalId 
	*/
	BatchDetail.prototype.setTerminalId = function(terminalId) {
	  this.terminalId = terminalId;
	};

	/**
	* Get the field value
	* Terminal ID.
	* @memberof payments.BatchDetail
	* @return {String} 
	*/
	BatchDetail.prototype.getTerminalId = function() {
	  return this.terminalId;
	};

	/**
	* Set the field value
	* @memberof payments.BatchDetail
	* @param {payments.BatchTotalStats} batchTotals 
	*/
	BatchDetail.prototype.setBatchTotals = function(batchTotals) {
	  this.batchTotals = batchTotals;
	};

	/**
	* Get the field value
	* @memberof payments.BatchDetail
	* @return {payments.BatchTotalStats} 
	*/
	BatchDetail.prototype.getBatchTotals = function() {
	  return this.batchTotals;
	};

	/**
	* Set the field value
	* @memberof payments.BatchDetail
	* @param {Array.<payments.ServerTotalStats>} serverTotals An array of 
	*/
	BatchDetail.prototype.setServerTotals = function(serverTotals) {
	  this.serverTotals = serverTotals;
	};

	/**
	* Get the field value
	* @memberof payments.BatchDetail
	* @return {Array.<payments.ServerTotalStats>} An array of 
	*/
	BatchDetail.prototype.getServerTotals = function() {
	  return this.serverTotals;
	};

	/**
	* Set the field value
	* @memberof payments.BatchDetail
	* @param {Array.<payments.BatchCardTotal>} cardTotals An array of 
	*/
	BatchDetail.prototype.setCardTotals = function(cardTotals) {
	  this.cardTotals = cardTotals;
	};

	/**
	* Get the field value
	* @memberof payments.BatchDetail
	* @return {Array.<payments.BatchCardTotal>} An array of 
	*/
	BatchDetail.prototype.getCardTotals = function() {
	  return this.cardTotals;
	};

	/**
	* Set the field value
	* @memberof payments.BatchDetail
	* @param {Array.<payments.DeviceTotalStats>} deviceTotals An array of 
	*/
	BatchDetail.prototype.setDeviceTotals = function(deviceTotals) {
	  this.deviceTotals = deviceTotals;
	};

	/**
	* Get the field value
	* @memberof payments.BatchDetail
	* @return {Array.<payments.DeviceTotalStats>} An array of 
	*/
	BatchDetail.prototype.getDeviceTotals = function() {
	  return this.deviceTotals;
	};

	/**
	* Set the field value
	* @memberof payments.BatchDetail
	* @param {Array.<payments.EndpointTotalStats>} endpointTotals An array of 
	*/
	BatchDetail.prototype.setEndpointTotals = function(endpointTotals) {
	  this.endpointTotals = endpointTotals;
	};

	/**
	* Get the field value
	* @memberof payments.BatchDetail
	* @return {Array.<payments.EndpointTotalStats>} An array of 
	*/
	BatchDetail.prototype.getEndpointTotals = function() {
	  return this.endpointTotals;
	};

	/**
	* Set the field value
	* Number of open tips.
	*
	* @memberof payments.BatchDetail
	* @param {Number} openTips must be a long integer
	*/
	BatchDetail.prototype.setOpenTips = function(openTips) {
	  this.openTips = openTips;
	};

	/**
	* Get the field value
	* Number of open tips.
	* @memberof payments.BatchDetail
	* @return {Number} must be a long integer
	*/
	BatchDetail.prototype.getOpenTips = function() {
	  return this.openTips;
	};

	/**
	* Set the field value
	* Number of open tabs.
	*
	* @memberof payments.BatchDetail
	* @param {Number} openTabs must be a long integer
	*/
	BatchDetail.prototype.setOpenTabs = function(openTabs) {
	  this.openTabs = openTabs;
	};

	/**
	* Get the field value
	* Number of open tabs.
	* @memberof payments.BatchDetail
	* @return {Number} must be a long integer
	*/
	BatchDetail.prototype.getOpenTabs = function() {
	  return this.openTabs;
	};

	/**
	* @memberof payments.BatchDetail
	* @private
	*/
	BatchDetail.prototype.getMetaInfo = function(fieldName) {
	  var curclass = this._class_;
	  do {
	    var fieldMetaInfo = curclass._meta_.fields[fieldName];
	    if(fieldMetaInfo) {
	      return fieldMetaInfo;
	    }
	    if(curclass._meta_._superMeta_) {
	      curclass = curclass._meta_._superMeta_._class_;
	    } else {
	      curclass = null;
	    }
	  } while(curclass);
	  return null;
	};

	BatchDetail.prototype.toString = function() {
	  return JSON.stringify(this);
	};

	BatchDetail._meta_ =  {fields:  {}};
	BatchDetail._meta_._class_ =  BatchDetail;
	BatchDetail._meta_.fields["terminalId"] = {};
	BatchDetail._meta_.fields["terminalId"].type = String;
	BatchDetail._meta_.fields["batchTotals"] = {};
	BatchDetail._meta_.fields["batchTotals"].type = payments_BatchTotalStats;
	BatchDetail._meta_.fields["serverTotals"] = {};
	BatchDetail._meta_.fields["serverTotals"].type = Array;
	BatchDetail._meta_.fields["serverTotals"].elementType = payments_ServerTotalStats;
	BatchDetail._meta_.fields["cardTotals"] = {};
	BatchDetail._meta_.fields["cardTotals"].type = Array;
	BatchDetail._meta_.fields["cardTotals"].elementType = payments_BatchCardTotal;
	BatchDetail._meta_.fields["deviceTotals"] = {};
	BatchDetail._meta_.fields["deviceTotals"].type = Array;
	BatchDetail._meta_.fields["deviceTotals"].elementType = payments_DeviceTotalStats;
	BatchDetail._meta_.fields["endpointTotals"] = {};
	BatchDetail._meta_.fields["endpointTotals"].type = Array;
	BatchDetail._meta_.fields["endpointTotals"].elementType = payments_EndpointTotalStats;
	BatchDetail._meta_.fields["openTips"] = {};
	BatchDetail._meta_.fields["openTips"].type = Number;
	BatchDetail._meta_.fields["openTabs"] = {};
	BatchDetail._meta_.fields["openTabs"].type = Number;

	//
	// Expose the module.
	//
	if (true) {
	module.exports = BatchDetail;
	}



/***/ }),
/* 434 */
/***/ (function(module, exports, __webpack_require__) {

	/**
	 * Autogenerated by Avro
	 * 
	 * DO NOT EDIT DIRECTLY
	 */

	var payments_BatchTotalType = __webpack_require__(161);

	/**
	* @constructor
	* @memberof payments
	*/
	var BatchTotalStats = function() {
	  this._class_ = BatchTotalStats;
	  this.sales = undefined;
	  this.refunds = undefined;
	  this.net = undefined;
	  this.giftCardLoads = undefined;
	  this.giftCardCashOuts = undefined;
	  this.tax = undefined;
	  this.tips = undefined;
	};


	/**
	* Set the field value
	* @memberof payments.BatchTotalStats
	* @param {payments.BatchTotalType} sales 
	*/
	BatchTotalStats.prototype.setSales = function(sales) {
	  this.sales = sales;
	};

	/**
	* Get the field value
	* @memberof payments.BatchTotalStats
	* @return {payments.BatchTotalType} 
	*/
	BatchTotalStats.prototype.getSales = function() {
	  return this.sales;
	};

	/**
	* Set the field value
	* @memberof payments.BatchTotalStats
	* @param {payments.BatchTotalType} refunds 
	*/
	BatchTotalStats.prototype.setRefunds = function(refunds) {
	  this.refunds = refunds;
	};

	/**
	* Get the field value
	* @memberof payments.BatchTotalStats
	* @return {payments.BatchTotalType} 
	*/
	BatchTotalStats.prototype.getRefunds = function() {
	  return this.refunds;
	};

	/**
	* Set the field value
	* @memberof payments.BatchTotalStats
	* @param {payments.BatchTotalType} net 
	*/
	BatchTotalStats.prototype.setNet = function(net) {
	  this.net = net;
	};

	/**
	* Get the field value
	* @memberof payments.BatchTotalStats
	* @return {payments.BatchTotalType} 
	*/
	BatchTotalStats.prototype.getNet = function() {
	  return this.net;
	};

	/**
	* Set the field value
	* @memberof payments.BatchTotalStats
	* @param {payments.BatchTotalType} giftCardLoads 
	*/
	BatchTotalStats.prototype.setGiftCardLoads = function(giftCardLoads) {
	  this.giftCardLoads = giftCardLoads;
	};

	/**
	* Get the field value
	* @memberof payments.BatchTotalStats
	* @return {payments.BatchTotalType} 
	*/
	BatchTotalStats.prototype.getGiftCardLoads = function() {
	  return this.giftCardLoads;
	};

	/**
	* Set the field value
	* @memberof payments.BatchTotalStats
	* @param {payments.BatchTotalType} giftCardCashOuts 
	*/
	BatchTotalStats.prototype.setGiftCardCashOuts = function(giftCardCashOuts) {
	  this.giftCardCashOuts = giftCardCashOuts;
	};

	/**
	* Get the field value
	* @memberof payments.BatchTotalStats
	* @return {payments.BatchTotalType} 
	*/
	BatchTotalStats.prototype.getGiftCardCashOuts = function() {
	  return this.giftCardCashOuts;
	};

	/**
	* Set the field value
	* @memberof payments.BatchTotalStats
	* @param {payments.BatchTotalType} tax 
	*/
	BatchTotalStats.prototype.setTax = function(tax) {
	  this.tax = tax;
	};

	/**
	* Get the field value
	* @memberof payments.BatchTotalStats
	* @return {payments.BatchTotalType} 
	*/
	BatchTotalStats.prototype.getTax = function() {
	  return this.tax;
	};

	/**
	* Set the field value
	* @memberof payments.BatchTotalStats
	* @param {payments.BatchTotalType} tips 
	*/
	BatchTotalStats.prototype.setTips = function(tips) {
	  this.tips = tips;
	};

	/**
	* Get the field value
	* @memberof payments.BatchTotalStats
	* @return {payments.BatchTotalType} 
	*/
	BatchTotalStats.prototype.getTips = function() {
	  return this.tips;
	};

	/**
	* @memberof payments.BatchTotalStats
	* @private
	*/
	BatchTotalStats.prototype.getMetaInfo = function(fieldName) {
	  var curclass = this._class_;
	  do {
	    var fieldMetaInfo = curclass._meta_.fields[fieldName];
	    if(fieldMetaInfo) {
	      return fieldMetaInfo;
	    }
	    if(curclass._meta_._superMeta_) {
	      curclass = curclass._meta_._superMeta_._class_;
	    } else {
	      curclass = null;
	    }
	  } while(curclass);
	  return null;
	};

	BatchTotalStats.prototype.toString = function() {
	  return JSON.stringify(this);
	};

	BatchTotalStats._meta_ =  {fields:  {}};
	BatchTotalStats._meta_._class_ =  BatchTotalStats;
	BatchTotalStats._meta_.fields["sales"] = {};
	BatchTotalStats._meta_.fields["sales"].type = payments_BatchTotalType;
	BatchTotalStats._meta_.fields["refunds"] = {};
	BatchTotalStats._meta_.fields["refunds"].type = payments_BatchTotalType;
	BatchTotalStats._meta_.fields["net"] = {};
	BatchTotalStats._meta_.fields["net"].type = payments_BatchTotalType;
	BatchTotalStats._meta_.fields["giftCardLoads"] = {};
	BatchTotalStats._meta_.fields["giftCardLoads"].type = payments_BatchTotalType;
	BatchTotalStats._meta_.fields["giftCardCashOuts"] = {};
	BatchTotalStats._meta_.fields["giftCardCashOuts"].type = payments_BatchTotalType;
	BatchTotalStats._meta_.fields["tax"] = {};
	BatchTotalStats._meta_.fields["tax"].type = payments_BatchTotalType;
	BatchTotalStats._meta_.fields["tips"] = {};
	BatchTotalStats._meta_.fields["tips"].type = payments_BatchTotalType;

	//
	// Expose the module.
	//
	if (true) {
	module.exports = BatchTotalStats;
	}



/***/ }),
/* 435 */
/***/ (function(module, exports, __webpack_require__) {

	/**
	 * Autogenerated by Avro
	 * 
	 * DO NOT EDIT DIRECTLY
	 */


	/**
	* @constructor
	* @memberof payments
	*/
	var BatchTransactions = function() {
	  this._class_ = BatchTransactions;
	  this.paymentIds = undefined;
	  this.refundIds = undefined;
	  this.creditIds = undefined;
	};


	/**
	* Set the field value
	* List of payments in the batch
	*
	* @memberof payments.BatchTransactions
	* @param {Array.<String>} paymentIds An array of 
	*/
	BatchTransactions.prototype.setPaymentIds = function(paymentIds) {
	  this.paymentIds = paymentIds;
	};

	/**
	* Get the field value
	* List of payments in the batch
	* @memberof payments.BatchTransactions
	* @return {Array.<String>} An array of 
	*/
	BatchTransactions.prototype.getPaymentIds = function() {
	  return this.paymentIds;
	};

	/**
	* Set the field value
	* List of refunds in the batch
	*
	* @memberof payments.BatchTransactions
	* @param {Array.<String>} refundIds An array of 
	*/
	BatchTransactions.prototype.setRefundIds = function(refundIds) {
	  this.refundIds = refundIds;
	};

	/**
	* Get the field value
	* List of refunds in the batch
	* @memberof payments.BatchTransactions
	* @return {Array.<String>} An array of 
	*/
	BatchTransactions.prototype.getRefundIds = function() {
	  return this.refundIds;
	};

	/**
	* Set the field value
	* List of credits in the batch
	*
	* @memberof payments.BatchTransactions
	* @param {Array.<String>} creditIds An array of 
	*/
	BatchTransactions.prototype.setCreditIds = function(creditIds) {
	  this.creditIds = creditIds;
	};

	/**
	* Get the field value
	* List of credits in the batch
	* @memberof payments.BatchTransactions
	* @return {Array.<String>} An array of 
	*/
	BatchTransactions.prototype.getCreditIds = function() {
	  return this.creditIds;
	};

	/**
	* @memberof payments.BatchTransactions
	* @private
	*/
	BatchTransactions.prototype.getMetaInfo = function(fieldName) {
	  var curclass = this._class_;
	  do {
	    var fieldMetaInfo = curclass._meta_.fields[fieldName];
	    if(fieldMetaInfo) {
	      return fieldMetaInfo;
	    }
	    if(curclass._meta_._superMeta_) {
	      curclass = curclass._meta_._superMeta_._class_;
	    } else {
	      curclass = null;
	    }
	  } while(curclass);
	  return null;
	};

	BatchTransactions.prototype.toString = function() {
	  return JSON.stringify(this);
	};

	BatchTransactions._meta_ =  {fields:  {}};
	BatchTransactions._meta_._class_ =  BatchTransactions;
	BatchTransactions._meta_.fields["paymentIds"] = {};
	BatchTransactions._meta_.fields["paymentIds"].type = Array;
	BatchTransactions._meta_.fields["refundIds"] = {};
	BatchTransactions._meta_.fields["refundIds"].type = Array;
	BatchTransactions._meta_.fields["creditIds"] = {};
	BatchTransactions._meta_.fields["creditIds"].type = Array;

	//
	// Expose the module.
	//
	if (true) {
	module.exports = BatchTransactions;
	}



/***/ }),
/* 436 */
/***/ (function(module, exports, __webpack_require__) {

	/**
	 * Autogenerated by Avro
	 * 
	 * DO NOT EDIT DIRECTLY
	 */


	/**
	* @memberof payments
	* @enum {string}
	*/
	var CardTransactionState = {
	  PENDING : "PENDING",
	  CLOSED : "CLOSED"
	};


	//
	// Expose the module.
	//
	if (true) {
	module.exports = CardTransactionState;
	}



/***/ }),
/* 437 */
/***/ (function(module, exports, __webpack_require__) {

	/**
	 * Autogenerated by Avro
	 * 
	 * DO NOT EDIT DIRECTLY
	 */


	/**
	* @memberof payments
	* @enum {string}
	*/
	var CardTransactionType = {
	  AUTH : "AUTH",
	  PREAUTH : "PREAUTH",
	  PREAUTHCAPTURE : "PREAUTHCAPTURE",
	  ADJUST : "ADJUST",
	  VOID : "VOID",
	  VOIDRETURN : "VOIDRETURN",
	  RETURN : "RETURN",
	  REFUND : "REFUND",
	  NAKEDREFUND : "NAKEDREFUND",
	  GETBALANCE : "GETBALANCE",
	  BATCHCLOSE : "BATCHCLOSE",
	  ACTIVATE : "ACTIVATE",
	  BALANCE_LOCK : "BALANCE_LOCK",
	  LOAD : "LOAD",
	  CASHOUT : "CASHOUT",
	  CASHOUT_ACTIVE_STATUS : "CASHOUT_ACTIVE_STATUS",
	  REDEMPTION : "REDEMPTION",
	  REDEMPTION_UNLOCK : "REDEMPTION_UNLOCK",
	  RELOAD : "RELOAD",
	  CASH_ADVANCE : "CASH_ADVANCE",
	  VOID_CREDIT : "VOID_CREDIT",
	  REFUND_CREDIT : "REFUND_CREDIT",
	  INTERNET_ACTIVATE : "INTERNET_ACTIVATE",
	  TOKEN_REQUEST : "TOKEN_REQUEST",
	  VERIFICATION : "VERIFICATION"
	};


	//
	// Expose the module.
	//
	if (true) {
	module.exports = CardTransactionType;
	}



/***/ }),
/* 438 */
/***/ (function(module, exports, __webpack_require__) {

	/**
	 * Autogenerated by Avro
	 * 
	 * DO NOT EDIT DIRECTLY
	 */


	/**
	* @memberof payments
	* @enum {string}
	*/
	var CardlessPaymentDataType = {
	  QR_CODE : "QR_CODE",
	  BARCODE : "BARCODE"
	};


	//
	// Expose the module.
	//
	if (true) {
	module.exports = CardlessPaymentDataType;
	}



/***/ }),
/* 439 */
/***/ (function(module, exports, __webpack_require__) {

	/**
	 * Autogenerated by Avro
	 * 
	 * DO NOT EDIT DIRECTLY
	 */


	/**
	* @memberof payments
	* @enum {string}
	*/
	var CardlessPaymentNetwork = {
	  ALIPAY : "ALIPAY",
	  WECHAT : "WECHAT"
	};


	//
	// Expose the module.
	//
	if (true) {
	module.exports = CardlessPaymentNetwork;
	}



/***/ }),
/* 440 */
/***/ (function(module, exports, __webpack_require__) {

	/**
	 * Autogenerated by Avro
	 * 
	 * DO NOT EDIT DIRECTLY
	 */

	var payments_CashAdvanceCustomerIdentification = __webpack_require__(249);

	/**
	* @constructor
	* @memberof payments
	*/
	var CashAdvanceExtra = function() {
	  this._class_ = CashAdvanceExtra;
	  this.cashAdvanceSerialNum = undefined;
	  this.cashAdvanceCustomerIdentification = undefined;
	};


	/**
	* Set the field value
	* @memberof payments.CashAdvanceExtra
	* @param {String} cashAdvanceSerialNum 
	*/
	CashAdvanceExtra.prototype.setCashAdvanceSerialNum = function(cashAdvanceSerialNum) {
	  this.cashAdvanceSerialNum = cashAdvanceSerialNum;
	};

	/**
	* Get the field value
	* @memberof payments.CashAdvanceExtra
	* @return {String} 
	*/
	CashAdvanceExtra.prototype.getCashAdvanceSerialNum = function() {
	  return this.cashAdvanceSerialNum;
	};

	/**
	* Set the field value
	* @memberof payments.CashAdvanceExtra
	* @param {payments.CashAdvanceCustomerIdentification} cashAdvanceCustomerIdentification 
	*/
	CashAdvanceExtra.prototype.setCashAdvanceCustomerIdentification = function(cashAdvanceCustomerIdentification) {
	  this.cashAdvanceCustomerIdentification = cashAdvanceCustomerIdentification;
	};

	/**
	* Get the field value
	* @memberof payments.CashAdvanceExtra
	* @return {payments.CashAdvanceCustomerIdentification} 
	*/
	CashAdvanceExtra.prototype.getCashAdvanceCustomerIdentification = function() {
	  return this.cashAdvanceCustomerIdentification;
	};

	/**
	* @memberof payments.CashAdvanceExtra
	* @private
	*/
	CashAdvanceExtra.prototype.getMetaInfo = function(fieldName) {
	  var curclass = this._class_;
	  do {
	    var fieldMetaInfo = curclass._meta_.fields[fieldName];
	    if(fieldMetaInfo) {
	      return fieldMetaInfo;
	    }
	    if(curclass._meta_._superMeta_) {
	      curclass = curclass._meta_._superMeta_._class_;
	    } else {
	      curclass = null;
	    }
	  } while(curclass);
	  return null;
	};

	CashAdvanceExtra.prototype.toString = function() {
	  return JSON.stringify(this);
	};

	CashAdvanceExtra._meta_ =  {fields:  {}};
	CashAdvanceExtra._meta_._class_ =  CashAdvanceExtra;
	CashAdvanceExtra._meta_.fields["cashAdvanceSerialNum"] = {};
	CashAdvanceExtra._meta_.fields["cashAdvanceSerialNum"].type = String;
	CashAdvanceExtra._meta_.fields["cashAdvanceCustomerIdentification"] = {};
	CashAdvanceExtra._meta_.fields["cashAdvanceCustomerIdentification"].type = payments_CashAdvanceCustomerIdentification;

	//
	// Expose the module.
	//
	if (true) {
	module.exports = CashAdvanceExtra;
	}



/***/ }),
/* 441 */
/***/ (function(module, exports, __webpack_require__) {

	/**
	 * Autogenerated by Avro
	 * 
	 * DO NOT EDIT DIRECTLY
	 */


	/**
	* @memberof payments
	* @enum {string}
	*/
	var Currency = {
	  USD : "USD",
	  GBP : "GBP",
	  EUR : "EUR"
	};


	//
	// Expose the module.
	//
	if (true) {
	module.exports = Currency;
	}



/***/ }),
/* 442 */
/***/ (function(module, exports, __webpack_require__) {

	/**
	 * Autogenerated by Avro
	 * 
	 * DO NOT EDIT DIRECTLY
	 */


	/**
	* @memberof payments
	* @enum {string}
	*/
	var CvmResult = {
	  NO_CVM_REQUIRED : "NO_CVM_REQUIRED",
	  SIGNATURE : "SIGNATURE",
	  SIGNATURE_VERIFIED : "SIGNATURE_VERIFIED",
	  SIGNATURE_ON_PAPER : "SIGNATURE_ON_PAPER",
	  SIGNATURE_REJECTED : "SIGNATURE_REJECTED",
	  PIN : "PIN",
	  ONLINE_PIN : "ONLINE_PIN",
	  SIGNATURE_AND_PIN : "SIGNATURE_AND_PIN",
	  CVM_FAILED : "CVM_FAILED",
	  DEVICE : "DEVICE"
	};


	//
	// Expose the module.
	//
	if (true) {
	module.exports = CvmResult;
	}



/***/ }),
/* 443 */
/***/ (function(module, exports, __webpack_require__) {

	/**
	 * Autogenerated by Avro
	 * 
	 * DO NOT EDIT DIRECTLY
	 */

	var payments_BatchCardTotal = __webpack_require__(160);
	var payments_BatchTotalType = __webpack_require__(161);

	/**
	* @constructor
	* @memberof payments
	*/
	var DeviceTotalStats = function() {
	  this._class_ = DeviceTotalStats;
	  this.deviceId = undefined;
	  this.deviceSerial = undefined;
	  this.deviceName = undefined;
	  this.terminalId = undefined;
	  this.sales = undefined;
	  this.refunds = undefined;
	  this.net = undefined;
	  this.giftCardLoads = undefined;
	  this.giftCardCashOuts = undefined;
	  this.tax = undefined;
	  this.tips = undefined;
	  this.cardTotals = undefined;
	};


	/**
	* Set the field value
	* Device ID corresponding to these stats
	*
	* @memberof payments.DeviceTotalStats
	* @param {Number} deviceId must be a long integer
	*/
	DeviceTotalStats.prototype.setDeviceId = function(deviceId) {
	  this.deviceId = deviceId;
	};

	/**
	* Get the field value
	* Device ID corresponding to these stats
	* @memberof payments.DeviceTotalStats
	* @return {Number} must be a long integer
	*/
	DeviceTotalStats.prototype.getDeviceId = function() {
	  return this.deviceId;
	};

	/**
	* Set the field value
	* Device serial number corresponding to these stats
	*
	* @memberof payments.DeviceTotalStats
	* @param {String} deviceSerial 
	*/
	DeviceTotalStats.prototype.setDeviceSerial = function(deviceSerial) {
	  this.deviceSerial = deviceSerial;
	};

	/**
	* Get the field value
	* Device serial number corresponding to these stats
	* @memberof payments.DeviceTotalStats
	* @return {String} 
	*/
	DeviceTotalStats.prototype.getDeviceSerial = function() {
	  return this.deviceSerial;
	};

	/**
	* Set the field value
	* Device name corresponding to these stats
	*
	* @memberof payments.DeviceTotalStats
	* @param {String} deviceName 
	*/
	DeviceTotalStats.prototype.setDeviceName = function(deviceName) {
	  this.deviceName = deviceName;
	};

	/**
	* Get the field value
	* Device name corresponding to these stats
	* @memberof payments.DeviceTotalStats
	* @return {String} 
	*/
	DeviceTotalStats.prototype.getDeviceName = function() {
	  return this.deviceName;
	};

	/**
	* Set the field value
	* Terminal ID of Device corresponding to these stats
	*
	* @memberof payments.DeviceTotalStats
	* @param {String} terminalId 
	*/
	DeviceTotalStats.prototype.setTerminalId = function(terminalId) {
	  this.terminalId = terminalId;
	};

	/**
	* Get the field value
	* Terminal ID of Device corresponding to these stats
	* @memberof payments.DeviceTotalStats
	* @return {String} 
	*/
	DeviceTotalStats.prototype.getTerminalId = function() {
	  return this.terminalId;
	};

	/**
	* Set the field value
	* @memberof payments.DeviceTotalStats
	* @param {payments.BatchTotalType} sales 
	*/
	DeviceTotalStats.prototype.setSales = function(sales) {
	  this.sales = sales;
	};

	/**
	* Get the field value
	* @memberof payments.DeviceTotalStats
	* @return {payments.BatchTotalType} 
	*/
	DeviceTotalStats.prototype.getSales = function() {
	  return this.sales;
	};

	/**
	* Set the field value
	* @memberof payments.DeviceTotalStats
	* @param {payments.BatchTotalType} refunds 
	*/
	DeviceTotalStats.prototype.setRefunds = function(refunds) {
	  this.refunds = refunds;
	};

	/**
	* Get the field value
	* @memberof payments.DeviceTotalStats
	* @return {payments.BatchTotalType} 
	*/
	DeviceTotalStats.prototype.getRefunds = function() {
	  return this.refunds;
	};

	/**
	* Set the field value
	* @memberof payments.DeviceTotalStats
	* @param {payments.BatchTotalType} net 
	*/
	DeviceTotalStats.prototype.setNet = function(net) {
	  this.net = net;
	};

	/**
	* Get the field value
	* @memberof payments.DeviceTotalStats
	* @return {payments.BatchTotalType} 
	*/
	DeviceTotalStats.prototype.getNet = function() {
	  return this.net;
	};

	/**
	* Set the field value
	* @memberof payments.DeviceTotalStats
	* @param {payments.BatchTotalType} giftCardLoads 
	*/
	DeviceTotalStats.prototype.setGiftCardLoads = function(giftCardLoads) {
	  this.giftCardLoads = giftCardLoads;
	};

	/**
	* Get the field value
	* @memberof payments.DeviceTotalStats
	* @return {payments.BatchTotalType} 
	*/
	DeviceTotalStats.prototype.getGiftCardLoads = function() {
	  return this.giftCardLoads;
	};

	/**
	* Set the field value
	* @memberof payments.DeviceTotalStats
	* @param {payments.BatchTotalType} giftCardCashOuts 
	*/
	DeviceTotalStats.prototype.setGiftCardCashOuts = function(giftCardCashOuts) {
	  this.giftCardCashOuts = giftCardCashOuts;
	};

	/**
	* Get the field value
	* @memberof payments.DeviceTotalStats
	* @return {payments.BatchTotalType} 
	*/
	DeviceTotalStats.prototype.getGiftCardCashOuts = function() {
	  return this.giftCardCashOuts;
	};

	/**
	* Set the field value
	* @memberof payments.DeviceTotalStats
	* @param {payments.BatchTotalType} tax 
	*/
	DeviceTotalStats.prototype.setTax = function(tax) {
	  this.tax = tax;
	};

	/**
	* Get the field value
	* @memberof payments.DeviceTotalStats
	* @return {payments.BatchTotalType} 
	*/
	DeviceTotalStats.prototype.getTax = function() {
	  return this.tax;
	};

	/**
	* Set the field value
	* @memberof payments.DeviceTotalStats
	* @param {payments.BatchTotalType} tips 
	*/
	DeviceTotalStats.prototype.setTips = function(tips) {
	  this.tips = tips;
	};

	/**
	* Get the field value
	* @memberof payments.DeviceTotalStats
	* @return {payments.BatchTotalType} 
	*/
	DeviceTotalStats.prototype.getTips = function() {
	  return this.tips;
	};

	/**
	* Set the field value
	* @memberof payments.DeviceTotalStats
	* @param {Array.<payments.BatchCardTotal>} cardTotals An array of 
	*/
	DeviceTotalStats.prototype.setCardTotals = function(cardTotals) {
	  this.cardTotals = cardTotals;
	};

	/**
	* Get the field value
	* @memberof payments.DeviceTotalStats
	* @return {Array.<payments.BatchCardTotal>} An array of 
	*/
	DeviceTotalStats.prototype.getCardTotals = function() {
	  return this.cardTotals;
	};

	/**
	* @memberof payments.DeviceTotalStats
	* @private
	*/
	DeviceTotalStats.prototype.getMetaInfo = function(fieldName) {
	  var curclass = this._class_;
	  do {
	    var fieldMetaInfo = curclass._meta_.fields[fieldName];
	    if(fieldMetaInfo) {
	      return fieldMetaInfo;
	    }
	    if(curclass._meta_._superMeta_) {
	      curclass = curclass._meta_._superMeta_._class_;
	    } else {
	      curclass = null;
	    }
	  } while(curclass);
	  return null;
	};

	DeviceTotalStats.prototype.toString = function() {
	  return JSON.stringify(this);
	};

	DeviceTotalStats._meta_ =  {fields:  {}};
	DeviceTotalStats._meta_._class_ =  DeviceTotalStats;
	DeviceTotalStats._meta_.fields["deviceId"] = {};
	DeviceTotalStats._meta_.fields["deviceId"].type = Number;
	DeviceTotalStats._meta_.fields["deviceSerial"] = {};
	DeviceTotalStats._meta_.fields["deviceSerial"].type = String;
	DeviceTotalStats._meta_.fields["deviceName"] = {};
	DeviceTotalStats._meta_.fields["deviceName"].type = String;
	DeviceTotalStats._meta_.fields["terminalId"] = {};
	DeviceTotalStats._meta_.fields["terminalId"].type = String;
	DeviceTotalStats._meta_.fields["sales"] = {};
	DeviceTotalStats._meta_.fields["sales"].type = payments_BatchTotalType;
	DeviceTotalStats._meta_.fields["refunds"] = {};
	DeviceTotalStats._meta_.fields["refunds"].type = payments_BatchTotalType;
	DeviceTotalStats._meta_.fields["net"] = {};
	DeviceTotalStats._meta_.fields["net"].type = payments_BatchTotalType;
	DeviceTotalStats._meta_.fields["giftCardLoads"] = {};
	DeviceTotalStats._meta_.fields["giftCardLoads"].type = payments_BatchTotalType;
	DeviceTotalStats._meta_.fields["giftCardCashOuts"] = {};
	DeviceTotalStats._meta_.fields["giftCardCashOuts"].type = payments_BatchTotalType;
	DeviceTotalStats._meta_.fields["tax"] = {};
	DeviceTotalStats._meta_.fields["tax"].type = payments_BatchTotalType;
	DeviceTotalStats._meta_.fields["tips"] = {};
	DeviceTotalStats._meta_.fields["tips"].type = payments_BatchTotalType;
	DeviceTotalStats._meta_.fields["cardTotals"] = {};
	DeviceTotalStats._meta_.fields["cardTotals"].type = Array;
	DeviceTotalStats._meta_.fields["cardTotals"].elementType = payments_BatchCardTotal;

	//
	// Expose the module.
	//
	if (true) {
	module.exports = DeviceTotalStats;
	}



/***/ }),
/* 444 */
/***/ (function(module, exports, __webpack_require__) {

	/**
	 * Autogenerated by Avro
	 * 
	 * DO NOT EDIT DIRECTLY
	 */

	var ecomm_EcommerceIndicator = __webpack_require__(955);
	var tokens_TokenType = __webpack_require__(1223);

	/**
	* @constructor
	* @memberof payments
	*/
	var ECommTransactionInfo = function() {
	  this._class_ = ECommTransactionInfo;
	  this.eCommTransaction = undefined;
	  this.credentialOnFile = undefined;
	  this.tokenType = undefined;
	  this.ecommIndicator = undefined;
	};


	/**
	* Set the field value
	* Set to True when it is an Ecomm Transaction
	*
	* @memberof payments.ECommTransactionInfo
	* @param {Boolean} eCommTransaction 
	*/
	ECommTransactionInfo.prototype.setECommTransaction = function(eCommTransaction) {
	  this.eCommTransaction = eCommTransaction;
	};

	/**
	* Get the field value
	* Set to True when it is an Ecomm Transaction
	* @memberof payments.ECommTransactionInfo
	* @return {Boolean} 
	*/
	ECommTransactionInfo.prototype.getECommTransaction = function() {
	  return this.eCommTransaction;
	};

	/**
	* Set the field value
	* Set to true when Card On File is used for the transaction
	*
	* @memberof payments.ECommTransactionInfo
	* @param {Boolean} credentialOnFile 
	*/
	ECommTransactionInfo.prototype.setCredentialOnFile = function(credentialOnFile) {
	  this.credentialOnFile = credentialOnFile;
	};

	/**
	* Get the field value
	* Set to true when Card On File is used for the transaction
	* @memberof payments.ECommTransactionInfo
	* @return {Boolean} 
	*/
	ECommTransactionInfo.prototype.getCredentialOnFile = function() {
	  return this.credentialOnFile;
	};

	/**
	* Set the field value
	* @memberof payments.ECommTransactionInfo
	* @param {tokens.TokenType} tokenType 
	*/
	ECommTransactionInfo.prototype.setTokenType = function(tokenType) {
	  this.tokenType = tokenType;
	};

	/**
	* Get the field value
	* @memberof payments.ECommTransactionInfo
	* @return {tokens.TokenType} 
	*/
	ECommTransactionInfo.prototype.getTokenType = function() {
	  return this.tokenType;
	};

	/**
	* Set the field value
	* @memberof payments.ECommTransactionInfo
	* @param {ecomm.EcommerceIndicator} ecommIndicator 
	*/
	ECommTransactionInfo.prototype.setEcommIndicator = function(ecommIndicator) {
	  this.ecommIndicator = ecommIndicator;
	};

	/**
	* Get the field value
	* @memberof payments.ECommTransactionInfo
	* @return {ecomm.EcommerceIndicator} 
	*/
	ECommTransactionInfo.prototype.getEcommIndicator = function() {
	  return this.ecommIndicator;
	};

	/**
	* @memberof payments.ECommTransactionInfo
	* @private
	*/
	ECommTransactionInfo.prototype.getMetaInfo = function(fieldName) {
	  var curclass = this._class_;
	  do {
	    var fieldMetaInfo = curclass._meta_.fields[fieldName];
	    if(fieldMetaInfo) {
	      return fieldMetaInfo;
	    }
	    if(curclass._meta_._superMeta_) {
	      curclass = curclass._meta_._superMeta_._class_;
	    } else {
	      curclass = null;
	    }
	  } while(curclass);
	  return null;
	};

	ECommTransactionInfo.prototype.toString = function() {
	  return JSON.stringify(this);
	};

	ECommTransactionInfo._meta_ =  {fields:  {}};
	ECommTransactionInfo._meta_._class_ =  ECommTransactionInfo;
	ECommTransactionInfo._meta_.fields["eCommTransaction"] = {};
	ECommTransactionInfo._meta_.fields["eCommTransaction"].type = Boolean;
	ECommTransactionInfo._meta_.fields["credentialOnFile"] = {};
	ECommTransactionInfo._meta_.fields["credentialOnFile"].type = Boolean;
	ECommTransactionInfo._meta_.fields["tokenType"] = {};
	ECommTransactionInfo._meta_.fields["tokenType"].type = tokens_TokenType;
	ECommTransactionInfo._meta_.fields["ecommIndicator"] = {};
	ECommTransactionInfo._meta_.fields["ecommIndicator"].type = ecomm_EcommerceIndicator;

	//
	// Expose the module.
	//
	if (true) {
	module.exports = ECommTransactionInfo;
	}



/***/ }),
/* 445 */
/***/ (function(module, exports, __webpack_require__) {

	/**
	 * Autogenerated by Avro
	 * 
	 * DO NOT EDIT DIRECTLY
	 */

	var payments_BatchCardTotal = __webpack_require__(160);

	/**
	* @constructor
	* @memberof payments
	*/
	var EndpointTotalStats = function() {
	  this._class_ = EndpointTotalStats;
	  this.success = undefined;
	  this.endpointName = undefined;
	  this.batchNumber = undefined;
	  this.terminalId = undefined;
	  this.count = undefined;
	  this.total = undefined;
	  this.cardTotals = undefined;
	};


	/**
	* Set the field value
	* Indicates if the closeout for terminalId/endpointName/batchNumber was successfully performed or not
	*
	* @memberof payments.EndpointTotalStats
	* @param {Boolean} success 
	*/
	EndpointTotalStats.prototype.setSuccess = function(success) {
	  this.success = success;
	};

	/**
	* Get the field value
	* Indicates if the closeout for terminalId/endpointName/batchNumber was successfully performed or not
	* @memberof payments.EndpointTotalStats
	* @return {Boolean} 
	*/
	EndpointTotalStats.prototype.getSuccess = function() {
	  return this.success;
	};

	/**
	* Set the field value
	* Name for the given endpoint
	*
	* @memberof payments.EndpointTotalStats
	* @param {String} endpointName 
	*/
	EndpointTotalStats.prototype.setEndpointName = function(endpointName) {
	  this.endpointName = endpointName;
	};

	/**
	* Get the field value
	* Name for the given endpoint
	* @memberof payments.EndpointTotalStats
	* @return {String} 
	*/
	EndpointTotalStats.prototype.getEndpointName = function() {
	  return this.endpointName;
	};

	/**
	* Set the field value
	* The batchNumber for this endpoint
	*
	* @memberof payments.EndpointTotalStats
	* @param {String} batchNumber 
	*/
	EndpointTotalStats.prototype.setBatchNumber = function(batchNumber) {
	  this.batchNumber = batchNumber;
	};

	/**
	* Get the field value
	* The batchNumber for this endpoint
	* @memberof payments.EndpointTotalStats
	* @return {String} 
	*/
	EndpointTotalStats.prototype.getBatchNumber = function() {
	  return this.batchNumber;
	};

	/**
	* Set the field value
	* The terminal id for this endpoint & batch details
	*
	* @memberof payments.EndpointTotalStats
	* @param {String} terminalId 
	*/
	EndpointTotalStats.prototype.setTerminalId = function(terminalId) {
	  this.terminalId = terminalId;
	};

	/**
	* Get the field value
	* The terminal id for this endpoint & batch details
	* @memberof payments.EndpointTotalStats
	* @return {String} 
	*/
	EndpointTotalStats.prototype.getTerminalId = function() {
	  return this.terminalId;
	};

	/**
	* Set the field value
	* Total count of endpoint transactions
	*
	* @memberof payments.EndpointTotalStats
	* @param {Number} count must be a long integer
	*/
	EndpointTotalStats.prototype.setCount = function(count) {
	  this.count = count;
	};

	/**
	* Get the field value
	* Total count of endpoint transactions
	* @memberof payments.EndpointTotalStats
	* @return {Number} must be a long integer
	*/
	EndpointTotalStats.prototype.getCount = function() {
	  return this.count;
	};

	/**
	* Set the field value
	* Total amount for transactions
	*
	* @memberof payments.EndpointTotalStats
	* @param {Number} total must be a long integer
	*/
	EndpointTotalStats.prototype.setTotal = function(total) {
	  this.total = total;
	};

	/**
	* Get the field value
	* Total amount for transactions
	* @memberof payments.EndpointTotalStats
	* @return {Number} must be a long integer
	*/
	EndpointTotalStats.prototype.getTotal = function() {
	  return this.total;
	};

	/**
	* Set the field value
	* @memberof payments.EndpointTotalStats
	* @param {Array.<payments.BatchCardTotal>} cardTotals An array of 
	*/
	EndpointTotalStats.prototype.setCardTotals = function(cardTotals) {
	  this.cardTotals = cardTotals;
	};

	/**
	* Get the field value
	* @memberof payments.EndpointTotalStats
	* @return {Array.<payments.BatchCardTotal>} An array of 
	*/
	EndpointTotalStats.prototype.getCardTotals = function() {
	  return this.cardTotals;
	};

	/**
	* @memberof payments.EndpointTotalStats
	* @private
	*/
	EndpointTotalStats.prototype.getMetaInfo = function(fieldName) {
	  var curclass = this._class_;
	  do {
	    var fieldMetaInfo = curclass._meta_.fields[fieldName];
	    if(fieldMetaInfo) {
	      return fieldMetaInfo;
	    }
	    if(curclass._meta_._superMeta_) {
	      curclass = curclass._meta_._superMeta_._class_;
	    } else {
	      curclass = null;
	    }
	  } while(curclass);
	  return null;
	};

	EndpointTotalStats.prototype.toString = function() {
	  return JSON.stringify(this);
	};

	EndpointTotalStats._meta_ =  {fields:  {}};
	EndpointTotalStats._meta_._class_ =  EndpointTotalStats;
	EndpointTotalStats._meta_.fields["success"] = {};
	EndpointTotalStats._meta_.fields["success"].type = Boolean;
	EndpointTotalStats._meta_.fields["endpointName"] = {};
	EndpointTotalStats._meta_.fields["endpointName"].type = String;
	EndpointTotalStats._meta_.fields["batchNumber"] = {};
	EndpointTotalStats._meta_.fields["batchNumber"].type = String;
	EndpointTotalStats._meta_.fields["terminalId"] = {};
	EndpointTotalStats._meta_.fields["terminalId"].type = String;
	EndpointTotalStats._meta_.fields["count"] = {};
	EndpointTotalStats._meta_.fields["count"].type = Number;
	EndpointTotalStats._meta_.fields["total"] = {};
	EndpointTotalStats._meta_.fields["total"].type = Number;
	EndpointTotalStats._meta_.fields["cardTotals"] = {};
	EndpointTotalStats._meta_.fields["cardTotals"].type = Array;
	EndpointTotalStats._meta_.fields["cardTotals"].elementType = payments_BatchCardTotal;

	//
	// Expose the module.
	//
	if (true) {
	module.exports = EndpointTotalStats;
	}



/***/ }),
/* 446 */
/***/ (function(module, exports, __webpack_require__) {

	/**
	 * Autogenerated by Avro
	 * 
	 * DO NOT EDIT DIRECTLY
	 */


	/**
	* @memberof payments
	* @enum {string}
	*/
	var FraudResponseCodeType = {
	  AVS : "AVS",
	  CVV : "CVV"
	};


	//
	// Expose the module.
	//
	if (true) {
	module.exports = FraudResponseCodeType;
	}



/***/ }),
/* 447 */
/***/ (function(module, exports, __webpack_require__) {

	/**
	 * Autogenerated by Avro
	 * 
	 * DO NOT EDIT DIRECTLY
	 */


	/**
	* @memberof payments
	* @enum {string}
	*/
	var GatewayTxType = {
	  AUTH : "AUTH",
	  PREAUTH : "PREAUTH",
	  PREAUTHCAPTURE : "PREAUTHCAPTURE",
	  ADJUST : "ADJUST",
	  VOID : "VOID",
	  VOIDRETURN : "VOIDRETURN",
	  RETURN : "RETURN",
	  REFUND : "REFUND",
	  NAKEDREFUND : "NAKEDREFUND",
	  GETBALANCE : "GETBALANCE",
	  BATCHCLOSE : "BATCHCLOSE",
	  ACTIVATE : "ACTIVATE",
	  BALANCE_LOCK : "BALANCE_LOCK",
	  LOAD : "LOAD",
	  CASHOUT : "CASHOUT",
	  CASHOUT_ACTIVE_STATUS : "CASHOUT_ACTIVE_STATUS",
	  REDEMPTION : "REDEMPTION",
	  REDEMPTION_UNLOCK : "REDEMPTION_UNLOCK",
	  RELOAD : "RELOAD",
	  CASH_ADVANCE : "CASH_ADVANCE",
	  INTERNET_ACTIVATE : "INTERNET_ACTIVATE",
	  TOKEN_REQUEST : "TOKEN_REQUEST",
	  VERIFICATION : "VERIFICATION"
	};


	//
	// Expose the module.
	//
	if (true) {
	module.exports = GatewayTxType;
	}



/***/ }),
/* 448 */
/***/ (function(module, exports, __webpack_require__) {

	/**
	 * Autogenerated by Avro
	 * 
	 * DO NOT EDIT DIRECTLY
	 */


	/**
	* @constructor
	* @memberof payments
	*/
	var GiftCard = function() {
	  this._class_ = GiftCard;
	  this.track2 = undefined;
	  this.cardNumber = undefined;
	  this.isManuallyEntered = false;
	  this.deviceSerial = undefined;
	  this.virtual = false;
	  this.promoCode = undefined;
	};


	/**
	* Set the field value
	* Track 2 Card Data
	*
	* @memberof payments.GiftCard
	* @param {String} track2 
	*/
	GiftCard.prototype.setTrack2 = function(track2) {
	  this.track2 = track2;
	};

	/**
	* Get the field value
	* Track 2 Card Data
	* @memberof payments.GiftCard
	* @return {String} 
	*/
	GiftCard.prototype.getTrack2 = function() {
	  return this.track2;
	};

	/**
	* Set the field value
	* Embossed Card Number
	*
	* @memberof payments.GiftCard
	* @param {String} cardNumber 
	*/
	GiftCard.prototype.setCardNumber = function(cardNumber) {
	  this.cardNumber = cardNumber;
	};

	/**
	* Get the field value
	* Embossed Card Number
	* @memberof payments.GiftCard
	* @return {String} 
	*/
	GiftCard.prototype.getCardNumber = function() {
	  return this.cardNumber;
	};

	/**
	* Set the field value
	* Was Account Number Manually Entered
	*
	* @memberof payments.GiftCard
	* @param {Boolean} isManuallyEntered 
	*/
	GiftCard.prototype.setIsManuallyEntered = function(isManuallyEntered) {
	  this.isManuallyEntered = isManuallyEntered;
	};

	/**
	* Get the field value
	* Was Account Number Manually Entered
	* @memberof payments.GiftCard
	* @return {Boolean} 
	*/
	GiftCard.prototype.getIsManuallyEntered = function() {
	  return this.isManuallyEntered;
	};

	/**
	* Set the field value
	* @memberof payments.GiftCard
	* @param {String} deviceSerial 
	*/
	GiftCard.prototype.setDeviceSerial = function(deviceSerial) {
	  this.deviceSerial = deviceSerial;
	};

	/**
	* Get the field value
	* @memberof payments.GiftCard
	* @return {String} 
	*/
	GiftCard.prototype.getDeviceSerial = function() {
	  return this.deviceSerial;
	};

	/**
	* Set the field value
	* Is this a virtual gift card
	*
	* @memberof payments.GiftCard
	* @param {Boolean} virtual 
	*/
	GiftCard.prototype.setVirtual = function(virtual) {
	  this.virtual = virtual;
	};

	/**
	* Get the field value
	* Is this a virtual gift card
	* @memberof payments.GiftCard
	* @return {Boolean} 
	*/
	GiftCard.prototype.getVirtual = function() {
	  return this.virtual;
	};

	/**
	* Set the field value
	* Virtual Promo Code
	*
	* @memberof payments.GiftCard
	* @param {String} promoCode 
	*/
	GiftCard.prototype.setPromoCode = function(promoCode) {
	  this.promoCode = promoCode;
	};

	/**
	* Get the field value
	* Virtual Promo Code
	* @memberof payments.GiftCard
	* @return {String} 
	*/
	GiftCard.prototype.getPromoCode = function() {
	  return this.promoCode;
	};

	/**
	* @memberof payments.GiftCard
	* @private
	*/
	GiftCard.prototype.getMetaInfo = function(fieldName) {
	  var curclass = this._class_;
	  do {
	    var fieldMetaInfo = curclass._meta_.fields[fieldName];
	    if(fieldMetaInfo) {
	      return fieldMetaInfo;
	    }
	    if(curclass._meta_._superMeta_) {
	      curclass = curclass._meta_._superMeta_._class_;
	    } else {
	      curclass = null;
	    }
	  } while(curclass);
	  return null;
	};

	GiftCard.prototype.toString = function() {
	  return JSON.stringify(this);
	};

	GiftCard._meta_ =  {fields:  {}};
	GiftCard._meta_._class_ =  GiftCard;
	GiftCard._meta_.fields["track2"] = {};
	GiftCard._meta_.fields["track2"].type = String;
	GiftCard._meta_.fields["cardNumber"] = {};
	GiftCard._meta_.fields["cardNumber"].type = String;
	GiftCard._meta_.fields["isManuallyEntered"] = {};
	GiftCard._meta_.fields["isManuallyEntered"].type = Boolean;
	GiftCard._meta_.fields["deviceSerial"] = {};
	GiftCard._meta_.fields["deviceSerial"].type = String;
	GiftCard._meta_.fields["virtual"] = {};
	GiftCard._meta_.fields["virtual"].type = Boolean;
	GiftCard._meta_.fields["promoCode"] = {};
	GiftCard._meta_.fields["promoCode"].type = String;

	//
	// Expose the module.
	//
	if (true) {
	module.exports = GiftCard;
	}



/***/ }),
/* 449 */
/***/ (function(module, exports, __webpack_require__) {

	/**
	 * Autogenerated by Avro
	 * 
	 * DO NOT EDIT DIRECTLY
	 */


	/**
	* @memberof payments
	* @enum {string}
	*/
	var GiftCardState = {
	  INVALID : "INVALID",
	  ACTIVATED : "ACTIVATED",
	  INACTIVE : "INACTIVE"
	};


	//
	// Expose the module.
	//
	if (true) {
	module.exports = GiftCardState;
	}



/***/ }),
/* 450 */
/***/ (function(module, exports, __webpack_require__) {

	/**
	 * Autogenerated by Avro
	 * 
	 * DO NOT EDIT DIRECTLY
	 */


	/**
	Identification type
	* @memberof payments
	* @enum {string}
	*/
	var IdType = {
	  DRIVERS_LICENSE : "DRIVERS_LICENSE",
	  PASSPORT : "PASSPORT"
	};


	//
	// Expose the module.
	//
	if (true) {
	module.exports = IdType;
	}



/***/ }),
/* 451 */
/***/ (function(module, exports, __webpack_require__) {

	/**
	 * Autogenerated by Avro
	 * 
	 * DO NOT EDIT DIRECTLY
	 */

	var payments_CardTransaction = __webpack_require__(102);
	var payments_Result = __webpack_require__(120);
	var base_Reference = __webpack_require__(5);

	/**
	* @constructor
	* @memberof payments
	*/
	var IncrementalAuthorization = function() {
	  this._class_ = IncrementalAuthorization;
	  this.id = undefined;
	  this.merchantId = undefined;
	  this.paymentId = undefined;
	  this.gatewayTxId = undefined;
	  this.amount = undefined;
	  this.cardTransaction = undefined;
	  this.result = undefined;
	  this.createdTime = undefined;
	  this.employee = undefined;
	};


	/**
	* Set the field value
	* Unique identifier
	*
	* @memberof payments.IncrementalAuthorization
	* @param {String} id 
	*/
	IncrementalAuthorization.prototype.setId = function(id) {
	  this.id = id;
	};

	/**
	* Get the field value
	* Unique identifier
	* @memberof payments.IncrementalAuthorization
	* @return {String} 
	*/
	IncrementalAuthorization.prototype.getId = function() {
	  return this.id;
	};

	/**
	* Set the field value
	* @memberof payments.IncrementalAuthorization
	* @param {Number} merchantId must be a long integer
	*/
	IncrementalAuthorization.prototype.setMerchantId = function(merchantId) {
	  this.merchantId = merchantId;
	};

	/**
	* Get the field value
	* @memberof payments.IncrementalAuthorization
	* @return {Number} must be a long integer
	*/
	IncrementalAuthorization.prototype.getMerchantId = function() {
	  return this.merchantId;
	};

	/**
	* Set the field value
	* @memberof payments.IncrementalAuthorization
	* @param {Number} paymentId must be a long integer
	*/
	IncrementalAuthorization.prototype.setPaymentId = function(paymentId) {
	  this.paymentId = paymentId;
	};

	/**
	* Get the field value
	* @memberof payments.IncrementalAuthorization
	* @return {Number} must be a long integer
	*/
	IncrementalAuthorization.prototype.getPaymentId = function() {
	  return this.paymentId;
	};

	/**
	* Set the field value
	* @memberof payments.IncrementalAuthorization
	* @param {Number} gatewayTxId must be a long integer
	*/
	IncrementalAuthorization.prototype.setGatewayTxId = function(gatewayTxId) {
	  this.gatewayTxId = gatewayTxId;
	};

	/**
	* Get the field value
	* @memberof payments.IncrementalAuthorization
	* @return {Number} must be a long integer
	*/
	IncrementalAuthorization.prototype.getGatewayTxId = function() {
	  return this.gatewayTxId;
	};

	/**
	* Set the field value
	* Amount of the incremental authorization
	*
	* @memberof payments.IncrementalAuthorization
	* @param {Number} amount must be a long integer
	*/
	IncrementalAuthorization.prototype.setAmount = function(amount) {
	  this.amount = amount;
	};

	/**
	* Get the field value
	* Amount of the incremental authorization
	* @memberof payments.IncrementalAuthorization
	* @return {Number} must be a long integer
	*/
	IncrementalAuthorization.prototype.getAmount = function() {
	  return this.amount;
	};

	/**
	* Set the field value
	* @memberof payments.IncrementalAuthorization
	* @param {payments.CardTransaction} cardTransaction 
	*/
	IncrementalAuthorization.prototype.setCardTransaction = function(cardTransaction) {
	  this.cardTransaction = cardTransaction;
	};

	/**
	* Get the field value
	* @memberof payments.IncrementalAuthorization
	* @return {payments.CardTransaction} 
	*/
	IncrementalAuthorization.prototype.getCardTransaction = function() {
	  return this.cardTransaction;
	};

	/**
	* Set the field value
	* Result of the incremental auth
	*
	* @memberof payments.IncrementalAuthorization
	* @param {payments.Result} result 
	*/
	IncrementalAuthorization.prototype.setResult = function(result) {
	  this.result = result;
	};

	/**
	* Get the field value
	* Result of the incremental auth
	* @memberof payments.IncrementalAuthorization
	* @return {payments.Result} 
	*/
	IncrementalAuthorization.prototype.getResult = function() {
	  return this.result;
	};

	/**
	* Set the field value
	* Created time on the server
	*
	* @memberof payments.IncrementalAuthorization
	* @param {Number} createdTime must be a long integer
	*/
	IncrementalAuthorization.prototype.setCreatedTime = function(createdTime) {
	  this.createdTime = createdTime;
	};

	/**
	* Get the field value
	* Created time on the server
	* @memberof payments.IncrementalAuthorization
	* @return {Number} must be a long integer
	*/
	IncrementalAuthorization.prototype.getCreatedTime = function() {
	  return this.createdTime;
	};

	/**
	* Set the field value
	* The employee who processed the incremental Auth
	*
	* @memberof payments.IncrementalAuthorization
	* @param {base.Reference} employee 
	*/
	IncrementalAuthorization.prototype.setEmployee = function(employee) {
	  this.employee = employee;
	};

	/**
	* Get the field value
	* The employee who processed the incremental Auth
	* @memberof payments.IncrementalAuthorization
	* @return {base.Reference} 
	*/
	IncrementalAuthorization.prototype.getEmployee = function() {
	  return this.employee;
	};

	/**
	* @memberof payments.IncrementalAuthorization
	* @private
	*/
	IncrementalAuthorization.prototype.getMetaInfo = function(fieldName) {
	  var curclass = this._class_;
	  do {
	    var fieldMetaInfo = curclass._meta_.fields[fieldName];
	    if(fieldMetaInfo) {
	      return fieldMetaInfo;
	    }
	    if(curclass._meta_._superMeta_) {
	      curclass = curclass._meta_._superMeta_._class_;
	    } else {
	      curclass = null;
	    }
	  } while(curclass);
	  return null;
	};

	IncrementalAuthorization.prototype.toString = function() {
	  return JSON.stringify(this);
	};

	IncrementalAuthorization._meta_ =  {fields:  {}};
	IncrementalAuthorization._meta_._class_ =  IncrementalAuthorization;
	IncrementalAuthorization._meta_.fields["id"] = {};
	IncrementalAuthorization._meta_.fields["id"].type = String;
	IncrementalAuthorization._meta_.fields["merchantId"] = {};
	IncrementalAuthorization._meta_.fields["merchantId"].type = Number;
	IncrementalAuthorization._meta_.fields["paymentId"] = {};
	IncrementalAuthorization._meta_.fields["paymentId"].type = Number;
	IncrementalAuthorization._meta_.fields["gatewayTxId"] = {};
	IncrementalAuthorization._meta_.fields["gatewayTxId"].type = Number;
	IncrementalAuthorization._meta_.fields["amount"] = {};
	IncrementalAuthorization._meta_.fields["amount"].type = Number;
	IncrementalAuthorization._meta_.fields["cardTransaction"] = {};
	IncrementalAuthorization._meta_.fields["cardTransaction"].type = payments_CardTransaction;
	IncrementalAuthorization._meta_.fields["result"] = {};
	IncrementalAuthorization._meta_.fields["result"].type = payments_Result;
	IncrementalAuthorization._meta_.fields["createdTime"] = {};
	IncrementalAuthorization._meta_.fields["createdTime"].type = Number;
	IncrementalAuthorization._meta_.fields["employee"] = {};
	IncrementalAuthorization._meta_.fields["employee"].type = base_Reference;

	//
	// Expose the module.
	//
	if (true) {
	module.exports = IncrementalAuthorization;
	}



/***/ }),
/* 452 */
/***/ (function(module, exports, __webpack_require__) {

	/**
	 * Autogenerated by Avro
	 * 
	 * DO NOT EDIT DIRECTLY
	 */


	/**
	* @constructor
	* @memberof payments
	*/
	var PaymentTaxRate = function() {
	  this._class_ = PaymentTaxRate;
	  this.id = undefined;
	  this.name = undefined;
	  this.rate = undefined;
	  this.isDefault = undefined;
	  this.taxableAmount = undefined;
	  this.isVat = undefined;
	  this.taxAmount = undefined;
	};


	/**
	* Set the field value
	* Tax rate id.
	*
	* @memberof payments.PaymentTaxRate
	* @param {String} id 
	*/
	PaymentTaxRate.prototype.setId = function(id) {
	  this.id = id;
	};

	/**
	* Get the field value
	* Tax rate id.
	* @memberof payments.PaymentTaxRate
	* @return {String} 
	*/
	PaymentTaxRate.prototype.getId = function() {
	  return this.id;
	};

	/**
	* Set the field value
	* Tax rate name. This field is optional.
	*
	* @memberof payments.PaymentTaxRate
	* @param {String} name 
	*/
	PaymentTaxRate.prototype.setName = function(name) {
	  this.name = name;
	};

	/**
	* Get the field value
	* Tax rate name. This field is optional.
	* @memberof payments.PaymentTaxRate
	* @return {String} 
	*/
	PaymentTaxRate.prototype.getName = function() {
	  return this.name;
	};

	/**
	* Set the field value
	* The tax rate. 100% = 1e7.
	*
	* @memberof payments.PaymentTaxRate
	* @param {Number} rate must be a long integer
	*/
	PaymentTaxRate.prototype.setRate = function(rate) {
	  this.rate = rate;
	};

	/**
	* Get the field value
	* The tax rate. 100% = 1e7.
	* @memberof payments.PaymentTaxRate
	* @return {Number} must be a long integer
	*/
	PaymentTaxRate.prototype.getRate = function() {
	  return this.rate;
	};

	/**
	* Set the field value
	* Whether the tax rate was configued as a default tax rate at the time that the payment was created.
	*
	* @memberof payments.PaymentTaxRate
	* @param {Boolean} isDefault 
	*/
	PaymentTaxRate.prototype.setIsDefault = function(isDefault) {
	  this.isDefault = isDefault;
	};

	/**
	* Get the field value
	* Whether the tax rate was configued as a default tax rate at the time that the payment was created.
	* @memberof payments.PaymentTaxRate
	* @return {Boolean} 
	*/
	PaymentTaxRate.prototype.getIsDefault = function() {
	  return this.isDefault;
	};

	/**
	* Set the field value
	* The sub-total of line items that the tax was based on. For VAT, this amount includes tax. For all others, this amount does not include tax.
	*
	* @memberof payments.PaymentTaxRate
	* @param {Number} taxableAmount must be a long integer
	*/
	PaymentTaxRate.prototype.setTaxableAmount = function(taxableAmount) {
	  this.taxableAmount = taxableAmount;
	};

	/**
	* Get the field value
	* The sub-total of line items that the tax was based on. For VAT, this amount includes tax. For all others, this amount does not include tax.
	* @memberof payments.PaymentTaxRate
	* @return {Number} must be a long integer
	*/
	PaymentTaxRate.prototype.getTaxableAmount = function() {
	  return this.taxableAmount;
	};

	/**
	* Set the field value
	* Whether merchant is configured as VAT
	*
	* @memberof payments.PaymentTaxRate
	* @param {Boolean} isVat 
	*/
	PaymentTaxRate.prototype.setIsVat = function(isVat) {
	  this.isVat = isVat;
	};

	/**
	* Get the field value
	* Whether merchant is configured as VAT
	* @memberof payments.PaymentTaxRate
	* @return {Boolean} 
	*/
	PaymentTaxRate.prototype.getIsVat = function() {
	  return this.isVat;
	};

	/**
	* Set the field value
	* The amount of tax collected. In cases where there are multiple payments for an order then it may be necessary to add an extra cent of tax to the last payment.
	*
	* @memberof payments.PaymentTaxRate
	* @param {Number} taxAmount must be a long integer
	*/
	PaymentTaxRate.prototype.setTaxAmount = function(taxAmount) {
	  this.taxAmount = taxAmount;
	};

	/**
	* Get the field value
	* The amount of tax collected. In cases where there are multiple payments for an order then it may be necessary to add an extra cent of tax to the last payment.
	* @memberof payments.PaymentTaxRate
	* @return {Number} must be a long integer
	*/
	PaymentTaxRate.prototype.getTaxAmount = function() {
	  return this.taxAmount;
	};

	/**
	* @memberof payments.PaymentTaxRate
	* @private
	*/
	PaymentTaxRate.prototype.getMetaInfo = function(fieldName) {
	  var curclass = this._class_;
	  do {
	    var fieldMetaInfo = curclass._meta_.fields[fieldName];
	    if(fieldMetaInfo) {
	      return fieldMetaInfo;
	    }
	    if(curclass._meta_._superMeta_) {
	      curclass = curclass._meta_._superMeta_._class_;
	    } else {
	      curclass = null;
	    }
	  } while(curclass);
	  return null;
	};

	PaymentTaxRate.prototype.toString = function() {
	  return JSON.stringify(this);
	};

	PaymentTaxRate._meta_ =  {fields:  {}};
	PaymentTaxRate._meta_._class_ =  PaymentTaxRate;
	PaymentTaxRate._meta_.fields["id"] = {};
	PaymentTaxRate._meta_.fields["id"].type = String;
	PaymentTaxRate._meta_.fields["name"] = {};
	PaymentTaxRate._meta_.fields["name"].type = String;
	PaymentTaxRate._meta_.fields["rate"] = {};
	PaymentTaxRate._meta_.fields["rate"].type = Number;
	PaymentTaxRate._meta_.fields["isDefault"] = {};
	PaymentTaxRate._meta_.fields["isDefault"].type = Boolean;
	PaymentTaxRate._meta_.fields["taxableAmount"] = {};
	PaymentTaxRate._meta_.fields["taxableAmount"].type = Number;
	PaymentTaxRate._meta_.fields["isVat"] = {};
	PaymentTaxRate._meta_.fields["isVat"].type = Boolean;
	PaymentTaxRate._meta_.fields["taxAmount"] = {};
	PaymentTaxRate._meta_.fields["taxAmount"].type = Number;

	//
	// Expose the module.
	//
	if (true) {
	module.exports = PaymentTaxRate;
	}



/***/ }),
/* 453 */
/***/ (function(module, exports, __webpack_require__) {

	/**
	 * Autogenerated by Avro
	 * 
	 * DO NOT EDIT DIRECTLY
	 */


	/**
	* @constructor
	* @memberof payments
	*/
	var PromotionalMessage = function() {
	  this._class_ = PromotionalMessage;
	  this.message = undefined;
	  this.showOnMerchantReceipt = undefined;
	  this.showOnCustomerReceipt = undefined;
	  this.showOnDisplay = undefined;
	};


	/**
	* Set the field value
	* @memberof payments.PromotionalMessage
	* @param {String} message 
	*/
	PromotionalMessage.prototype.setMessage = function(message) {
	  this.message = message;
	};

	/**
	* Get the field value
	* @memberof payments.PromotionalMessage
	* @return {String} 
	*/
	PromotionalMessage.prototype.getMessage = function() {
	  return this.message;
	};

	/**
	* Set the field value
	* @memberof payments.PromotionalMessage
	* @param {Boolean} showOnMerchantReceipt 
	*/
	PromotionalMessage.prototype.setShowOnMerchantReceipt = function(showOnMerchantReceipt) {
	  this.showOnMerchantReceipt = showOnMerchantReceipt;
	};

	/**
	* Get the field value
	* @memberof payments.PromotionalMessage
	* @return {Boolean} 
	*/
	PromotionalMessage.prototype.getShowOnMerchantReceipt = function() {
	  return this.showOnMerchantReceipt;
	};

	/**
	* Set the field value
	* @memberof payments.PromotionalMessage
	* @param {Boolean} showOnCustomerReceipt 
	*/
	PromotionalMessage.prototype.setShowOnCustomerReceipt = function(showOnCustomerReceipt) {
	  this.showOnCustomerReceipt = showOnCustomerReceipt;
	};

	/**
	* Get the field value
	* @memberof payments.PromotionalMessage
	* @return {Boolean} 
	*/
	PromotionalMessage.prototype.getShowOnCustomerReceipt = function() {
	  return this.showOnCustomerReceipt;
	};

	/**
	* Set the field value
	* @memberof payments.PromotionalMessage
	* @param {Boolean} showOnDisplay 
	*/
	PromotionalMessage.prototype.setShowOnDisplay = function(showOnDisplay) {
	  this.showOnDisplay = showOnDisplay;
	};

	/**
	* Get the field value
	* @memberof payments.PromotionalMessage
	* @return {Boolean} 
	*/
	PromotionalMessage.prototype.getShowOnDisplay = function() {
	  return this.showOnDisplay;
	};

	/**
	* @memberof payments.PromotionalMessage
	* @private
	*/
	PromotionalMessage.prototype.getMetaInfo = function(fieldName) {
	  var curclass = this._class_;
	  do {
	    var fieldMetaInfo = curclass._meta_.fields[fieldName];
	    if(fieldMetaInfo) {
	      return fieldMetaInfo;
	    }
	    if(curclass._meta_._superMeta_) {
	      curclass = curclass._meta_._superMeta_._class_;
	    } else {
	      curclass = null;
	    }
	  } while(curclass);
	  return null;
	};

	PromotionalMessage.prototype.toString = function() {
	  return JSON.stringify(this);
	};

	PromotionalMessage._meta_ =  {fields:  {}};
	PromotionalMessage._meta_._class_ =  PromotionalMessage;
	PromotionalMessage._meta_.fields["message"] = {};
	PromotionalMessage._meta_.fields["message"].type = String;
	PromotionalMessage._meta_.fields["showOnMerchantReceipt"] = {};
	PromotionalMessage._meta_.fields["showOnMerchantReceipt"].type = Boolean;
	PromotionalMessage._meta_.fields["showOnCustomerReceipt"] = {};
	PromotionalMessage._meta_.fields["showOnCustomerReceipt"].type = Boolean;
	PromotionalMessage._meta_.fields["showOnDisplay"] = {};
	PromotionalMessage._meta_.fields["showOnDisplay"].type = Boolean;

	//
	// Expose the module.
	//
	if (true) {
	module.exports = PromotionalMessage;
	}



/***/ }),
/* 454 */
/***/ (function(module, exports, __webpack_require__) {

	/**
	 * Autogenerated by Avro
	 * 
	 * DO NOT EDIT DIRECTLY
	 */


	/**
	* @memberof payments
	* @enum {string}
	*/
	var ReversalReason = {
	  CHIP_DECLINE : "CHIP_DECLINE",
	  CARDHOLDER_CANCELLATION : "CARDHOLDER_CANCELLATION",
	  COMMUNICATION_ERROR : "COMMUNICATION_ERROR",
	  OTHER_REASON : "OTHER_REASON"
	};


	//
	// Expose the module.
	//
	if (true) {
	module.exports = ReversalReason;
	}



/***/ }),
/* 455 */
/***/ (function(module, exports, __webpack_require__) {

	/**
	 * Autogenerated by Avro
	 * 
	 * DO NOT EDIT DIRECTLY
	 */


	/**
	* @memberof payments
	* @enum {string}
	*/
	var SelectedService = {
	  NONE : "NONE",
	  PAYMENT : "PAYMENT",
	  REFUND : "REFUND",
	  CANCELLATION : "CANCELLATION",
	  PRE_AUTH : "PRE_AUTH",
	  UPDATE_PRE_AUTH : "UPDATE_PRE_AUTH",
	  PAYMENT_COMPLETION : "PAYMENT_COMPLETION",
	  CASH_ADVANCE : "CASH_ADVANCE",
	  DEFERRED_PAYMENT : "DEFERRED_PAYMENT",
	  DEFERRED_PAYMENT_COMPLETION : "DEFERRED_PAYMENT_COMPLETION",
	  VOICE_AUTHORISATION : "VOICE_AUTHORISATION",
	  CARDHOLDER_DETECTION : "CARDHOLDER_DETECTION",
	  TOKEN_REQUEST : "TOKEN_REQUEST",
	  VERIFICATION : "VERIFICATION"
	};


	//
	// Expose the module.
	//
	if (true) {
	module.exports = SelectedService;
	}



/***/ }),
/* 456 */
/***/ (function(module, exports, __webpack_require__) {

	/**
	 * Autogenerated by Avro
	 * 
	 * DO NOT EDIT DIRECTLY
	 */

	var payments_BatchTotalType = __webpack_require__(161);

	/**
	* @constructor
	* @memberof payments
	*/
	var ServerTotalStats = function() {
	  this._class_ = ServerTotalStats;
	  this.employeeId = undefined;
	  this.employeeName = undefined;
	  this.sales = undefined;
	  this.refunds = undefined;
	  this.net = undefined;
	  this.giftCardLoads = undefined;
	  this.giftCardCashOuts = undefined;
	  this.tax = undefined;
	  this.tips = undefined;
	};


	/**
	* Set the field value
	* Employee corresponding to these stats
	*
	* @memberof payments.ServerTotalStats
	* @param {String} employeeId 
	*/
	ServerTotalStats.prototype.setEmployeeId = function(employeeId) {
	  this.employeeId = employeeId;
	};

	/**
	* Get the field value
	* Employee corresponding to these stats
	* @memberof payments.ServerTotalStats
	* @return {String} 
	*/
	ServerTotalStats.prototype.getEmployeeId = function() {
	  return this.employeeId;
	};

	/**
	* Set the field value
	* @memberof payments.ServerTotalStats
	* @param {String} employeeName 
	*/
	ServerTotalStats.prototype.setEmployeeName = function(employeeName) {
	  this.employeeName = employeeName;
	};

	/**
	* Get the field value
	* @memberof payments.ServerTotalStats
	* @return {String} 
	*/
	ServerTotalStats.prototype.getEmployeeName = function() {
	  return this.employeeName;
	};

	/**
	* Set the field value
	* @memberof payments.ServerTotalStats
	* @param {payments.BatchTotalType} sales 
	*/
	ServerTotalStats.prototype.setSales = function(sales) {
	  this.sales = sales;
	};

	/**
	* Get the field value
	* @memberof payments.ServerTotalStats
	* @return {payments.BatchTotalType} 
	*/
	ServerTotalStats.prototype.getSales = function() {
	  return this.sales;
	};

	/**
	* Set the field value
	* @memberof payments.ServerTotalStats
	* @param {payments.BatchTotalType} refunds 
	*/
	ServerTotalStats.prototype.setRefunds = function(refunds) {
	  this.refunds = refunds;
	};

	/**
	* Get the field value
	* @memberof payments.ServerTotalStats
	* @return {payments.BatchTotalType} 
	*/
	ServerTotalStats.prototype.getRefunds = function() {
	  return this.refunds;
	};

	/**
	* Set the field value
	* @memberof payments.ServerTotalStats
	* @param {payments.BatchTotalType} net 
	*/
	ServerTotalStats.prototype.setNet = function(net) {
	  this.net = net;
	};

	/**
	* Get the field value
	* @memberof payments.ServerTotalStats
	* @return {payments.BatchTotalType} 
	*/
	ServerTotalStats.prototype.getNet = function() {
	  return this.net;
	};

	/**
	* Set the field value
	* @memberof payments.ServerTotalStats
	* @param {payments.BatchTotalType} giftCardLoads 
	*/
	ServerTotalStats.prototype.setGiftCardLoads = function(giftCardLoads) {
	  this.giftCardLoads = giftCardLoads;
	};

	/**
	* Get the field value
	* @memberof payments.ServerTotalStats
	* @return {payments.BatchTotalType} 
	*/
	ServerTotalStats.prototype.getGiftCardLoads = function() {
	  return this.giftCardLoads;
	};

	/**
	* Set the field value
	* @memberof payments.ServerTotalStats
	* @param {payments.BatchTotalType} giftCardCashOuts 
	*/
	ServerTotalStats.prototype.setGiftCardCashOuts = function(giftCardCashOuts) {
	  this.giftCardCashOuts = giftCardCashOuts;
	};

	/**
	* Get the field value
	* @memberof payments.ServerTotalStats
	* @return {payments.BatchTotalType} 
	*/
	ServerTotalStats.prototype.getGiftCardCashOuts = function() {
	  return this.giftCardCashOuts;
	};

	/**
	* Set the field value
	* @memberof payments.ServerTotalStats
	* @param {payments.BatchTotalType} tax 
	*/
	ServerTotalStats.prototype.setTax = function(tax) {
	  this.tax = tax;
	};

	/**
	* Get the field value
	* @memberof payments.ServerTotalStats
	* @return {payments.BatchTotalType} 
	*/
	ServerTotalStats.prototype.getTax = function() {
	  return this.tax;
	};

	/**
	* Set the field value
	* @memberof payments.ServerTotalStats
	* @param {payments.BatchTotalType} tips 
	*/
	ServerTotalStats.prototype.setTips = function(tips) {
	  this.tips = tips;
	};

	/**
	* Get the field value
	* @memberof payments.ServerTotalStats
	* @return {payments.BatchTotalType} 
	*/
	ServerTotalStats.prototype.getTips = function() {
	  return this.tips;
	};

	/**
	* @memberof payments.ServerTotalStats
	* @private
	*/
	ServerTotalStats.prototype.getMetaInfo = function(fieldName) {
	  var curclass = this._class_;
	  do {
	    var fieldMetaInfo = curclass._meta_.fields[fieldName];
	    if(fieldMetaInfo) {
	      return fieldMetaInfo;
	    }
	    if(curclass._meta_._superMeta_) {
	      curclass = curclass._meta_._superMeta_._class_;
	    } else {
	      curclass = null;
	    }
	  } while(curclass);
	  return null;
	};

	ServerTotalStats.prototype.toString = function() {
	  return JSON.stringify(this);
	};

	ServerTotalStats._meta_ =  {fields:  {}};
	ServerTotalStats._meta_._class_ =  ServerTotalStats;
	ServerTotalStats._meta_.fields["employeeId"] = {};
	ServerTotalStats._meta_.fields["employeeId"].type = String;
	ServerTotalStats._meta_.fields["employeeName"] = {};
	ServerTotalStats._meta_.fields["employeeName"].type = String;
	ServerTotalStats._meta_.fields["sales"] = {};
	ServerTotalStats._meta_.fields["sales"].type = payments_BatchTotalType;
	ServerTotalStats._meta_.fields["refunds"] = {};
	ServerTotalStats._meta_.fields["refunds"].type = payments_BatchTotalType;
	ServerTotalStats._meta_.fields["net"] = {};
	ServerTotalStats._meta_.fields["net"].type = payments_BatchTotalType;
	ServerTotalStats._meta_.fields["giftCardLoads"] = {};
	ServerTotalStats._meta_.fields["giftCardLoads"].type = payments_BatchTotalType;
	ServerTotalStats._meta_.fields["giftCardCashOuts"] = {};
	ServerTotalStats._meta_.fields["giftCardCashOuts"].type = payments_BatchTotalType;
	ServerTotalStats._meta_.fields["tax"] = {};
	ServerTotalStats._meta_.fields["tax"].type = payments_BatchTotalType;
	ServerTotalStats._meta_.fields["tips"] = {};
	ServerTotalStats._meta_.fields["tips"].type = payments_BatchTotalType;

	//
	// Expose the module.
	//
	if (true) {
	module.exports = ServerTotalStats;
	}



/***/ }),
/* 457 */
/***/ (function(module, exports, __webpack_require__) {

	/**
	 * Autogenerated by Avro
	 * 
	 * DO NOT EDIT DIRECTLY
	 */


	/**
	* @constructor
	* @memberof payments
	*/
	var SignatureDisclaimer = function() {
	  this._class_ = SignatureDisclaimer;
	  this.disclaimerText = undefined;
	  this.disclaimerValues = undefined;
	};


	/**
	* Set the field value
	* @memberof payments.SignatureDisclaimer
	* @param {String|Null} disclaimerText 
	*/
	SignatureDisclaimer.prototype.setDisclaimerText = function(disclaimerText) {
	  this.disclaimerText = disclaimerText;
	};

	/**
	* Get the field value
	* @memberof payments.SignatureDisclaimer
	* @return {String|Null} 
	*/
	SignatureDisclaimer.prototype.getDisclaimerText = function() {
	  return this.disclaimerText;
	};

	/**
	* Set the field value
	* Values that will be substituted in standard disclaimer text (txn date/time, account number, product label, etc.
	*
	* @memberof payments.SignatureDisclaimer
	* @param {Object.<String,String>} disclaimerValues A map of <String> to <>
	*/
	SignatureDisclaimer.prototype.setDisclaimerValues = function(disclaimerValues) {
	  this.disclaimerValues = disclaimerValues;
	};

	/**
	* Get the field value
	* Values that will be substituted in standard disclaimer text (txn date/time, account number, product label, etc.
	* @memberof payments.SignatureDisclaimer
	* @return {Object.<String,String>} A map of <String> to <>
	*/
	SignatureDisclaimer.prototype.getDisclaimerValues = function() {
	  return this.disclaimerValues;
	};

	/**
	* @memberof payments.SignatureDisclaimer
	* @private
	*/
	SignatureDisclaimer.prototype.getMetaInfo = function(fieldName) {
	  var curclass = this._class_;
	  do {
	    var fieldMetaInfo = curclass._meta_.fields[fieldName];
	    if(fieldMetaInfo) {
	      return fieldMetaInfo;
	    }
	    if(curclass._meta_._superMeta_) {
	      curclass = curclass._meta_._superMeta_._class_;
	    } else {
	      curclass = null;
	    }
	  } while(curclass);
	  return null;
	};

	SignatureDisclaimer.prototype.toString = function() {
	  return JSON.stringify(this);
	};

	SignatureDisclaimer._meta_ =  {fields:  {}};
	SignatureDisclaimer._meta_._class_ =  SignatureDisclaimer;
	SignatureDisclaimer._meta_.fields["disclaimerText"] = {};
	SignatureDisclaimer._meta_.fields["disclaimerText"].type = String;
	SignatureDisclaimer._meta_.fields["disclaimerValues"] = {};
	SignatureDisclaimer._meta_.fields["disclaimerValues"].type = Object;

	//
	// Expose the module.
	//
	if (true) {
	module.exports = SignatureDisclaimer;
	}



/***/ }),
/* 458 */
/***/ (function(module, exports, __webpack_require__) {

	/**
	 * Autogenerated by Avro
	 * 
	 * DO NOT EDIT DIRECTLY
	 */


	/**
	* @memberof payments
	* @enum {string}
	*/
	var TokenRequestType = {
	  VERIFICATION : "VERIFICATION",
	  TOKEN_REQUEST : "TOKEN_REQUEST"
	};


	//
	// Expose the module.
	//
	if (true) {
	module.exports = TokenRequestType;
	}



/***/ }),
/* 459 */
/***/ (function(module, exports, __webpack_require__) {

	/**
	 * Autogenerated by Avro
	 * 
	 * DO NOT EDIT DIRECTLY
	 */


	/**
	* @memberof payments
	* @enum {string}
	*/
	var TransactionResult = {
	  APPROVED : "APPROVED",
	  DECLINED : "DECLINED",
	  ABORTED : "ABORTED",
	  VOICE_AUTHORISATION : "VOICE_AUTHORISATION",
	  PAYMENT_PART_ONLY : "PAYMENT_PART_ONLY",
	  PARTIALLY_APPROVED : "PARTIALLY_APPROVED",
	  NONE : "NONE"
	};


	//
	// Expose the module.
	//
	if (true) {
	module.exports = TransactionResult;
	}



/***/ }),
/* 460 */
/***/ (function(module, exports, __webpack_require__) {

	/**
	 * Autogenerated by Avro
	 * 
	 * DO NOT EDIT DIRECTLY
	 */


	/**
	* @memberof payments
	* @enum {string}
	*/
	var TxFormat = {
	  DEFAULT : "DEFAULT",
	  NEXO : "NEXO"
	};


	//
	// Expose the module.
	//
	if (true) {
	module.exports = TxFormat;
	}



/***/ }),
/* 461 */
/***/ (function(module, exports, __webpack_require__) {

	/**
	 * Autogenerated by Avro
	 * 
	 * DO NOT EDIT DIRECTLY
	 */


	/**
	* @memberof payments
	* @enum {string}
	*/
	var TxType = {
	  AUTH : "AUTH",
	  PREAUTH : "PREAUTH",
	  PREAUTHCAPTURE : "PREAUTHCAPTURE",
	  ADJUST : "ADJUST",
	  VOID : "VOID",
	  VOIDRETURN : "VOIDRETURN",
	  RETURN : "RETURN",
	  REFUND : "REFUND",
	  NAKEDREFUND : "NAKEDREFUND",
	  GETBALANCE : "GETBALANCE",
	  BATCHCLOSE : "BATCHCLOSE",
	  ACTIVATE : "ACTIVATE",
	  BALANCE_LOCK : "BALANCE_LOCK",
	  LOAD : "LOAD",
	  CASHOUT : "CASHOUT",
	  CASHOUT_ACTIVE_STATUS : "CASHOUT_ACTIVE_STATUS",
	  REDEMPTION : "REDEMPTION",
	  REDEMPTION_UNLOCK : "REDEMPTION_UNLOCK",
	  RELOAD : "RELOAD",
	  INTERNET_ACTIVATE : "INTERNET_ACTIVATE"
	};


	//
	// Expose the module.
	//
	if (true) {
	module.exports = TxType;
	}



/***/ }),
/* 462 */
/***/ (function(module, exports, __webpack_require__) {

	/**
	 * Autogenerated by Avro
	 * 
	 * DO NOT EDIT DIRECTLY
	 */


	/**
	* @memberof payments
	* @enum {string}
	*/
	var Type = {
	  TAB : "TAB",
	  AUTH : "AUTH"
	};


	//
	// Expose the module.
	//
	if (true) {
	module.exports = Type;
	}



/***/ }),
/* 463 */
/***/ (function(module, exports, __webpack_require__) {

	/**
	 * Autogenerated by Avro
	 * 
	 * DO NOT EDIT DIRECTLY
	 */


	/**
	* @memberof payments
	* @enum {string}
	*/
	var VasDataTypeType = {
	  ALL : "ALL",
	  LOYALTY : "LOYALTY",
	  OFFER : "OFFER",
	  GIFT_CARD : "GIFT_CARD",
	  PRIVATE_LABEL_CARD : "PRIVATE_LABEL_CARD",
	  CUSTOMER : "CUSTOMER",
	  VAS_DATA : "VAS_DATA"
	};


	//
	// Expose the module.
	//
	if (true) {
	module.exports = VasDataTypeType;
	}



/***/ }),
/* 464 */
/***/ (function(module, exports, __webpack_require__) {

	/**
	 * Autogenerated by Avro
	 * 
	 * DO NOT EDIT DIRECTLY
	 */

	var payments_VasPayloadElement = __webpack_require__(465);

	/**
	* @constructor
	* @memberof payments
	*/
	var VasPayload = function() {
	  this._class_ = VasPayload;
	  this.payloadElements = undefined;
	};


	/**
	* Set the field value
	* List of vas data elements returned during tx
	*
	* @memberof payments.VasPayload
	* @param {Array.<payments.VasPayloadElement>} payloadElements An array of 
	*/
	VasPayload.prototype.setPayloadElements = function(payloadElements) {
	  this.payloadElements = payloadElements;
	};

	/**
	* Get the field value
	* List of vas data elements returned during tx
	* @memberof payments.VasPayload
	* @return {Array.<payments.VasPayloadElement>} An array of 
	*/
	VasPayload.prototype.getPayloadElements = function() {
	  return this.payloadElements;
	};

	/**
	* @memberof payments.VasPayload
	* @private
	*/
	VasPayload.prototype.getMetaInfo = function(fieldName) {
	  var curclass = this._class_;
	  do {
	    var fieldMetaInfo = curclass._meta_.fields[fieldName];
	    if(fieldMetaInfo) {
	      return fieldMetaInfo;
	    }
	    if(curclass._meta_._superMeta_) {
	      curclass = curclass._meta_._superMeta_._class_;
	    } else {
	      curclass = null;
	    }
	  } while(curclass);
	  return null;
	};

	VasPayload.prototype.toString = function() {
	  return JSON.stringify(this);
	};

	VasPayload._meta_ =  {fields:  {}};
	VasPayload._meta_._class_ =  VasPayload;
	VasPayload._meta_.fields["payloadElements"] = {};
	VasPayload._meta_.fields["payloadElements"].type = Array;
	VasPayload._meta_.fields["payloadElements"].elementType = payments_VasPayloadElement;

	//
	// Expose the module.
	//
	if (true) {
	module.exports = VasPayload;
	}



/***/ }),
/* 465 */
/***/ (function(module, exports, __webpack_require__) {

	/**
	 * Autogenerated by Avro
	 * 
	 * DO NOT EDIT DIRECTLY
	 */

	var payments_VasResponseFormat = __webpack_require__(468);
	var payments_VasProtocol = __webpack_require__(257);
	var payments_VasDataType = __webpack_require__(165);

	/**
	* @constructor
	* @memberof payments
	*/
	var VasPayloadElement = function() {
	  this._class_ = VasPayloadElement;
	  this.dataType = undefined;
	  this.responseFormat = undefined;
	  this.vasData = undefined;
	  this.protocolId = undefined;
	  this.merchantId = undefined;
	};


	/**
	* Set the field value
	* Indicates the type of data in this response.
	*
	* @memberof payments.VasPayloadElement
	* @param {payments.VasDataType} dataType 
	*/
	VasPayloadElement.prototype.setDataType = function(dataType) {
	  this.dataType = dataType;
	};

	/**
	* Get the field value
	* Indicates the type of data in this response.
	* @memberof payments.VasPayloadElement
	* @return {payments.VasDataType} 
	*/
	VasPayloadElement.prototype.getDataType = function() {
	  return this.dataType;
	};

	/**
	* Set the field value
	* Format of vasData payload.
	*
	* @memberof payments.VasPayloadElement
	* @param {payments.VasResponseFormat} responseFormat 
	*/
	VasPayloadElement.prototype.setResponseFormat = function(responseFormat) {
	  this.responseFormat = responseFormat;
	};

	/**
	* Get the field value
	* Format of vasData payload.
	* @memberof payments.VasPayloadElement
	* @return {payments.VasResponseFormat} 
	*/
	VasPayloadElement.prototype.getResponseFormat = function() {
	  return this.responseFormat;
	};

	/**
	* Set the field value
	* Vas data.  For NDEF it will be base64 encoded binary.
	*
	* @memberof payments.VasPayloadElement
	* @param {String} vasData 
	*/
	VasPayloadElement.prototype.setVasData = function(vasData) {
	  this.vasData = vasData;
	};

	/**
	* Get the field value
	* Vas data.  For NDEF it will be base64 encoded binary.
	* @memberof payments.VasPayloadElement
	* @return {String} 
	*/
	VasPayloadElement.prototype.getVasData = function() {
	  return this.vasData;
	};

	/**
	* Set the field value
	* Protocol this payload element was derived from
	*
	* @memberof payments.VasPayloadElement
	* @param {payments.VasProtocol} protocolId 
	*/
	VasPayloadElement.prototype.setProtocolId = function(protocolId) {
	  this.protocolId = protocolId;
	};

	/**
	* Get the field value
	* Protocol this payload element was derived from
	* @memberof payments.VasPayloadElement
	* @return {payments.VasProtocol} 
	*/
	VasPayloadElement.prototype.getProtocolId = function() {
	  return this.protocolId;
	};

	/**
	* Set the field value
	* Merchant id associated with this payload element (hex encoded)
	*
	* @memberof payments.VasPayloadElement
	* @param {String} merchantId 
	*/
	VasPayloadElement.prototype.setMerchantId = function(merchantId) {
	  this.merchantId = merchantId;
	};

	/**
	* Get the field value
	* Merchant id associated with this payload element (hex encoded)
	* @memberof payments.VasPayloadElement
	* @return {String} 
	*/
	VasPayloadElement.prototype.getMerchantId = function() {
	  return this.merchantId;
	};

	/**
	* @memberof payments.VasPayloadElement
	* @private
	*/
	VasPayloadElement.prototype.getMetaInfo = function(fieldName) {
	  var curclass = this._class_;
	  do {
	    var fieldMetaInfo = curclass._meta_.fields[fieldName];
	    if(fieldMetaInfo) {
	      return fieldMetaInfo;
	    }
	    if(curclass._meta_._superMeta_) {
	      curclass = curclass._meta_._superMeta_._class_;
	    } else {
	      curclass = null;
	    }
	  } while(curclass);
	  return null;
	};

	VasPayloadElement.prototype.toString = function() {
	  return JSON.stringify(this);
	};

	VasPayloadElement._meta_ =  {fields:  {}};
	VasPayloadElement._meta_._class_ =  VasPayloadElement;
	VasPayloadElement._meta_.fields["dataType"] = {};
	VasPayloadElement._meta_.fields["dataType"].type = payments_VasDataType;
	VasPayloadElement._meta_.fields["responseFormat"] = {};
	VasPayloadElement._meta_.fields["responseFormat"].type = payments_VasResponseFormat;
	VasPayloadElement._meta_.fields["vasData"] = {};
	VasPayloadElement._meta_.fields["vasData"].type = String;
	VasPayloadElement._meta_.fields["protocolId"] = {};
	VasPayloadElement._meta_.fields["protocolId"].type = payments_VasProtocol;
	VasPayloadElement._meta_.fields["merchantId"] = {};
	VasPayloadElement._meta_.fields["merchantId"].type = String;

	//
	// Expose the module.
	//
	if (true) {
	module.exports = VasPayloadElement;
	}



/***/ }),
/* 466 */
/***/ (function(module, exports, __webpack_require__) {

	/**
	 * Autogenerated by Avro
	 * 
	 * DO NOT EDIT DIRECTLY
	 */


	/**
	* @memberof payments
	* @enum {string}
	*/
	var VasPayloadResponseType = {
	  ACCEPTED : "ACCEPTED",
	  PENDING : "PENDING"
	};


	//
	// Expose the module.
	//
	if (true) {
	module.exports = VasPayloadResponseType;
	}



/***/ }),
/* 467 */
/***/ (function(module, exports, __webpack_require__) {

	/**
	 * Autogenerated by Avro
	 * 
	 * DO NOT EDIT DIRECTLY
	 */


	/**
	* @memberof payments
	* @enum {string}
	*/
	var VasPushMode = {
	  PUSH_NONE : "PUSH_NONE",
	  PUSH_ONLY : "PUSH_ONLY",
	  PUSH_AND_GET : "PUSH_AND_GET"
	};


	//
	// Expose the module.
	//
	if (true) {
	module.exports = VasPushMode;
	}



/***/ }),
/* 468 */
/***/ (function(module, exports, __webpack_require__) {

	/**
	 * Autogenerated by Avro
	 * 
	 * DO NOT EDIT DIRECTLY
	 */


	/**
	* @memberof payments
	* @enum {string}
	*/
	var VasResponseFormat = {
	  NDEF : "NDEF",
	  STRING : "STRING",
	  ENCRYPTED : "ENCRYPTED"
	};


	//
	// Expose the module.
	//
	if (true) {
	module.exports = VasResponseFormat;
	}



/***/ }),
/* 469 */
/***/ (function(module, exports, __webpack_require__) {

	/**
	 * Autogenerated by Avro
	 * 
	 * DO NOT EDIT DIRECTLY
	 */

	var payments_VasProtocol = __webpack_require__(257);
	var payments_VasDataType = __webpack_require__(165);

	/**
	* @constructor
	* @memberof payments
	*/
	var VasServiceProvider = function() {
	  this._class_ = VasServiceProvider;
	  this.providerPackage = undefined;
	  this.protocolId = undefined;
	  this.supportedServices = undefined;
	  this.protocolConfig = undefined;
	  this.pushUrl = undefined;
	  this.pushTitle = undefined;
	};


	/**
	* Set the field value
	* Unique package name identifier of provider
	*
	* @memberof payments.VasServiceProvider
	* @param {String} providerPackage 
	*/
	VasServiceProvider.prototype.setProviderPackage = function(providerPackage) {
	  this.providerPackage = providerPackage;
	};

	/**
	* Get the field value
	* Unique package name identifier of provider
	* @memberof payments.VasServiceProvider
	* @return {String} 
	*/
	VasServiceProvider.prototype.getProviderPackage = function() {
	  return this.providerPackage;
	};

	/**
	* Set the field value
	* @memberof payments.VasServiceProvider
	* @param {payments.VasProtocol} protocolId 
	*/
	VasServiceProvider.prototype.setProtocolId = function(protocolId) {
	  this.protocolId = protocolId;
	};

	/**
	* Get the field value
	* @memberof payments.VasServiceProvider
	* @return {payments.VasProtocol} 
	*/
	VasServiceProvider.prototype.getProtocolId = function() {
	  return this.protocolId;
	};

	/**
	* Set the field value
	* Service types supported by this provider.
	*
	* @memberof payments.VasServiceProvider
	* @param {Array.<payments.VasDataType>} supportedServices An array of 
	*/
	VasServiceProvider.prototype.setSupportedServices = function(supportedServices) {
	  this.supportedServices = supportedServices;
	};

	/**
	* Get the field value
	* Service types supported by this provider.
	* @memberof payments.VasServiceProvider
	* @return {Array.<payments.VasDataType>} An array of 
	*/
	VasServiceProvider.prototype.getSupportedServices = function() {
	  return this.supportedServices;
	};

	/**
	* Set the field value
	* protocol specific configuration
	*
	* @memberof payments.VasServiceProvider
	* @param {Object.<String,String>} protocolConfig A map of <String> to <>
	*/
	VasServiceProvider.prototype.setProtocolConfig = function(protocolConfig) {
	  this.protocolConfig = protocolConfig;
	};

	/**
	* Get the field value
	* protocol specific configuration
	* @memberof payments.VasServiceProvider
	* @return {Object.<String,String>} A map of <String> to <>
	*/
	VasServiceProvider.prototype.getProtocolConfig = function() {
	  return this.protocolConfig;
	};

	/**
	* Set the field value
	* Populated for push use cases (e.g. send signup URL).
	*
	* @memberof payments.VasServiceProvider
	* @param {String} pushUrl 
	*/
	VasServiceProvider.prototype.setPushUrl = function(pushUrl) {
	  this.pushUrl = pushUrl;
	};

	/**
	* Get the field value
	* Populated for push use cases (e.g. send signup URL).
	* @memberof payments.VasServiceProvider
	* @return {String} 
	*/
	VasServiceProvider.prototype.getPushUrl = function() {
	  return this.pushUrl;
	};

	/**
	* Set the field value
	* Optionally populated for vas push use cases (e.g. send signup URL).
	*
	* @memberof payments.VasServiceProvider
	* @param {String} pushTitle 
	*/
	VasServiceProvider.prototype.setPushTitle = function(pushTitle) {
	  this.pushTitle = pushTitle;
	};

	/**
	* Get the field value
	* Optionally populated for vas push use cases (e.g. send signup URL).
	* @memberof payments.VasServiceProvider
	* @return {String} 
	*/
	VasServiceProvider.prototype.getPushTitle = function() {
	  return this.pushTitle;
	};

	/**
	* @memberof payments.VasServiceProvider
	* @private
	*/
	VasServiceProvider.prototype.getMetaInfo = function(fieldName) {
	  var curclass = this._class_;
	  do {
	    var fieldMetaInfo = curclass._meta_.fields[fieldName];
	    if(fieldMetaInfo) {
	      return fieldMetaInfo;
	    }
	    if(curclass._meta_._superMeta_) {
	      curclass = curclass._meta_._superMeta_._class_;
	    } else {
	      curclass = null;
	    }
	  } while(curclass);
	  return null;
	};

	VasServiceProvider.prototype.toString = function() {
	  return JSON.stringify(this);
	};

	VasServiceProvider._meta_ =  {fields:  {}};
	VasServiceProvider._meta_._class_ =  VasServiceProvider;
	VasServiceProvider._meta_.fields["providerPackage"] = {};
	VasServiceProvider._meta_.fields["providerPackage"].type = String;
	VasServiceProvider._meta_.fields["protocolId"] = {};
	VasServiceProvider._meta_.fields["protocolId"].type = payments_VasProtocol;
	VasServiceProvider._meta_.fields["supportedServices"] = {};
	VasServiceProvider._meta_.fields["supportedServices"].type = Array;
	VasServiceProvider._meta_.fields["supportedServices"].elementType = payments_VasDataType;
	VasServiceProvider._meta_.fields["protocolConfig"] = {};
	VasServiceProvider._meta_.fields["protocolConfig"].type = Object;
	VasServiceProvider._meta_.fields["pushUrl"] = {};
	VasServiceProvider._meta_.fields["pushUrl"].type = String;
	VasServiceProvider._meta_.fields["pushTitle"] = {};
	VasServiceProvider._meta_.fields["pushTitle"].type = String;

	//
	// Expose the module.
	//
	if (true) {
	module.exports = VasServiceProvider;
	}



/***/ }),
/* 470 */
/***/ (function(module, exports, __webpack_require__) {

	/**
	 * Autogenerated by Avro
	 * 
	 * DO NOT EDIT DIRECTLY
	 */


	/**
	* @memberof printer
	* @enum {string}
	*/
	var PrinterType = {
	  NETWORK : "NETWORK",
	  MY_LOCAL : "MY_LOCAL"
	};


	//
	// Expose the module.
	//
	if (true) {
	module.exports = PrinterType;
	}



/***/ }),
/* 471 */
/***/ (function(module, exports, __webpack_require__) {

	/**
	 * Autogenerated by Avro
	 * 
	 * DO NOT EDIT DIRECTLY
	 */

	var order_DisplayDiscount = __webpack_require__(156);

	/**
	* @constructor
	* @memberof remotemessage
	*/
	var AddDiscountAction = function() {
	  this._class_ = AddDiscountAction;
	  this.discount = undefined;
	};


	/**
	* Set the field value
	* @memberof remotemessage.AddDiscountAction
	* @param {order.DisplayDiscount} discount 
	*/
	AddDiscountAction.prototype.setDiscount = function(discount) {
	  this.discount = discount;
	};

	/**
	* Get the field value
	* @memberof remotemessage.AddDiscountAction
	* @return {order.DisplayDiscount} 
	*/
	AddDiscountAction.prototype.getDiscount = function() {
	  return this.discount;
	};

	/**
	* @memberof remotemessage.AddDiscountAction
	* @private
	*/
	AddDiscountAction.prototype.getMetaInfo = function(fieldName) {
	  var curclass = this._class_;
	  do {
	    var fieldMetaInfo = curclass._meta_.fields[fieldName];
	    if(fieldMetaInfo) {
	      return fieldMetaInfo;
	    }
	    if(curclass._meta_._superMeta_) {
	      curclass = curclass._meta_._superMeta_._class_;
	    } else {
	      curclass = null;
	    }
	  } while(curclass);
	  return null;
	};

	AddDiscountAction.prototype.toString = function() {
	  return JSON.stringify(this);
	};

	AddDiscountAction._meta_ =  {fields:  {}};
	AddDiscountAction._meta_._class_ =  AddDiscountAction;
	AddDiscountAction._meta_.fields["discount"] = {};
	AddDiscountAction._meta_.fields["discount"].type = order_DisplayDiscount;

	//
	// Expose the module.
	//
	if (true) {
	module.exports = AddDiscountAction;
	}



/***/ }),
/* 472 */
/***/ (function(module, exports, __webpack_require__) {

	/**
	 * Autogenerated by Avro
	 * 
	 * DO NOT EDIT DIRECTLY
	 */

	var order_DisplayLineItem = __webpack_require__(243);

	/**
	* @constructor
	* @memberof remotemessage
	*/
	var AddLineItemAction = function() {
	  this._class_ = AddLineItemAction;
	  this.lineItem = undefined;
	  this.taxable = undefined;
	};


	/**
	* Set the field value
	* @memberof remotemessage.AddLineItemAction
	* @param {order.DisplayLineItem} lineItem 
	*/
	AddLineItemAction.prototype.setLineItem = function(lineItem) {
	  this.lineItem = lineItem;
	};

	/**
	* Get the field value
	* @memberof remotemessage.AddLineItemAction
	* @return {order.DisplayLineItem} 
	*/
	AddLineItemAction.prototype.getLineItem = function() {
	  return this.lineItem;
	};

	/**
	* Set the field value
	* @memberof remotemessage.AddLineItemAction
	* @param {Boolean} taxable 
	*/
	AddLineItemAction.prototype.setTaxable = function(taxable) {
	  this.taxable = taxable;
	};

	/**
	* Get the field value
	* @memberof remotemessage.AddLineItemAction
	* @return {Boolean} 
	*/
	AddLineItemAction.prototype.getTaxable = function() {
	  return this.taxable;
	};

	/**
	* @memberof remotemessage.AddLineItemAction
	* @private
	*/
	AddLineItemAction.prototype.getMetaInfo = function(fieldName) {
	  var curclass = this._class_;
	  do {
	    var fieldMetaInfo = curclass._meta_.fields[fieldName];
	    if(fieldMetaInfo) {
	      return fieldMetaInfo;
	    }
	    if(curclass._meta_._superMeta_) {
	      curclass = curclass._meta_._superMeta_._class_;
	    } else {
	      curclass = null;
	    }
	  } while(curclass);
	  return null;
	};

	AddLineItemAction.prototype.toString = function() {
	  return JSON.stringify(this);
	};

	AddLineItemAction._meta_ =  {fields:  {}};
	AddLineItemAction._meta_._class_ =  AddLineItemAction;
	AddLineItemAction._meta_.fields["lineItem"] = {};
	AddLineItemAction._meta_.fields["lineItem"].type = order_DisplayLineItem;
	AddLineItemAction._meta_.fields["taxable"] = {};
	AddLineItemAction._meta_.fields["taxable"].type = Boolean;

	//
	// Expose the module.
	//
	if (true) {
	module.exports = AddLineItemAction;
	}



/***/ }),
/* 473 */
/***/ (function(module, exports, __webpack_require__) {

	/**
	 * Autogenerated by Avro
	 * 
	 * DO NOT EDIT DIRECTLY
	 */

	var remotemessage_KeyPress = __webpack_require__(167);

	/**
	* @constructor
	* @memberof remotemessage
	*/
	var InputOption = function() {
	  this._class_ = InputOption;
	  this.keyPress = undefined;
	  this.description = undefined;
	};


	/**
	* Set the field value
	* The keypress this represents
	*
	* @memberof remotemessage.InputOption
	* @param {remotemessage.KeyPress} keyPress 
	*/
	InputOption.prototype.setKeyPress = function(keyPress) {
	  this.keyPress = keyPress;
	};

	/**
	* Get the field value
	* The keypress this represents
	* @memberof remotemessage.InputOption
	* @return {remotemessage.KeyPress} 
	*/
	InputOption.prototype.getKeyPress = function() {
	  return this.keyPress;
	};

	/**
	* Set the field value
	* A description of what this input option represents
	*
	* @memberof remotemessage.InputOption
	* @param {String} description 
	*/
	InputOption.prototype.setDescription = function(description) {
	  this.description = description;
	};

	/**
	* Get the field value
	* A description of what this input option represents
	* @memberof remotemessage.InputOption
	* @return {String} 
	*/
	InputOption.prototype.getDescription = function() {
	  return this.description;
	};

	/**
	* @memberof remotemessage.InputOption
	* @private
	*/
	InputOption.prototype.getMetaInfo = function(fieldName) {
	  var curclass = this._class_;
	  do {
	    var fieldMetaInfo = curclass._meta_.fields[fieldName];
	    if(fieldMetaInfo) {
	      return fieldMetaInfo;
	    }
	    if(curclass._meta_._superMeta_) {
	      curclass = curclass._meta_._superMeta_._class_;
	    } else {
	      curclass = null;
	    }
	  } while(curclass);
	  return null;
	};

	InputOption.prototype.toString = function() {
	  return JSON.stringify(this);
	};

	InputOption._meta_ =  {fields:  {}};
	InputOption._meta_._class_ =  InputOption;
	InputOption._meta_.fields["keyPress"] = {};
	InputOption._meta_.fields["keyPress"].type = remotemessage_KeyPress;
	InputOption._meta_.fields["description"] = {};
	InputOption._meta_.fields["description"].type = String;

	//
	// Expose the module.
	//
	if (true) {
	module.exports = InputOption;
	}



/***/ }),
/* 474 */
/***/ (function(module, exports, __webpack_require__) {

	/**
	 * Autogenerated by Avro
	 * 
	 * DO NOT EDIT DIRECTLY
	 */


	/**
	* @memberof remotemessage
	* @enum {string}
	*/
	var LogLevelEnum = {
	  VERBOSE : "VERBOSE",
	  DEBUG : "DEBUG",
	  INFO : "INFO",
	  WARN : "WARN",
	  ERROR : "ERROR"
	};


	//
	// Expose the module.
	//
	if (true) {
	module.exports = LogLevelEnum;
	}



/***/ }),
/* 475 */
/***/ (function(module, exports, __webpack_require__) {

	/**
	 * Autogenerated by Avro
	 * 
	 * DO NOT EDIT DIRECTLY
	 */


	/**
	* @constructor
	* @memberof remotemessage
	*/
	var OrderActionResponse = function() {
	  this._class_ = OrderActionResponse;
	  this.accepted = undefined;
	  this.id = undefined;
	};


	/**
	* Set the field value
	* @memberof remotemessage.OrderActionResponse
	* @param {Boolean} accepted 
	*/
	OrderActionResponse.prototype.setAccepted = function(accepted) {
	  this.accepted = accepted;
	};

	/**
	* Get the field value
	* @memberof remotemessage.OrderActionResponse
	* @return {Boolean} 
	*/
	OrderActionResponse.prototype.getAccepted = function() {
	  return this.accepted;
	};

	/**
	* Set the field value
	* @memberof remotemessage.OrderActionResponse
	* @param {String} id 
	*/
	OrderActionResponse.prototype.setId = function(id) {
	  this.id = id;
	};

	/**
	* Get the field value
	* @memberof remotemessage.OrderActionResponse
	* @return {String} 
	*/
	OrderActionResponse.prototype.getId = function() {
	  return this.id;
	};

	/**
	* @memberof remotemessage.OrderActionResponse
	* @private
	*/
	OrderActionResponse.prototype.getMetaInfo = function(fieldName) {
	  var curclass = this._class_;
	  do {
	    var fieldMetaInfo = curclass._meta_.fields[fieldName];
	    if(fieldMetaInfo) {
	      return fieldMetaInfo;
	    }
	    if(curclass._meta_._superMeta_) {
	      curclass = curclass._meta_._superMeta_._class_;
	    } else {
	      curclass = null;
	    }
	  } while(curclass);
	  return null;
	};

	OrderActionResponse.prototype.toString = function() {
	  return JSON.stringify(this);
	};

	OrderActionResponse._meta_ =  {fields:  {}};
	OrderActionResponse._meta_._class_ =  OrderActionResponse;
	OrderActionResponse._meta_.fields["accepted"] = {};
	OrderActionResponse._meta_.fields["accepted"].type = Boolean;
	OrderActionResponse._meta_.fields["id"] = {};
	OrderActionResponse._meta_.fields["id"].type = String;

	//
	// Expose the module.
	//
	if (true) {
	module.exports = OrderActionResponse;
	}



/***/ }),
/* 476 */
/***/ (function(module, exports, __webpack_require__) {

	/**
	 * Autogenerated by Avro
	 * 
	 * DO NOT EDIT DIRECTLY
	 */

	var remotemessage_Method = __webpack_require__(2);
	var remotemessage_Message = __webpack_require__(3);

	/**
	* @constructor
	* @augments remotemessage.Message
	* @memberof remotemessage
	*/
	var PairingRequestMessage = function() {
	  remotemessage_Message.call(this);
	  this._superClass_ = remotemessage_Message;
	  this._class_ = PairingRequestMessage;
	  this.setMethod(remotemessage_Method["PAIRING_REQUEST"]);
	  this.name = undefined;
	  this.serialNumber = undefined;
	  this.applicationName = undefined;
	  this.authenticationToken = undefined;
	};

	PairingRequestMessage.prototype = Object.create(remotemessage_Message.prototype);
	PairingRequestMessage.prototype.constructor = PairingRequestMessage;

	/**
	* Set the field value
	* The peripheral sends a pairing request containing the peripheral name
	*
	* @memberof remotemessage.PairingRequestMessage
	* @param {String} name 
	*/
	PairingRequestMessage.prototype.setName = function(name) {
	  this.name = name;
	};

	/**
	* Get the field value
	* The peripheral sends a pairing request containing the peripheral name
	* @memberof remotemessage.PairingRequestMessage
	* @return {String} 
	*/
	PairingRequestMessage.prototype.getName = function() {
	  return this.name;
	};

	/**
	* Set the field value
	* The peripheral serial number
	*
	* @memberof remotemessage.PairingRequestMessage
	* @param {String} serialNumber 
	*/
	PairingRequestMessage.prototype.setSerialNumber = function(serialNumber) {
	  this.serialNumber = serialNumber;
	};

	/**
	* Get the field value
	* The peripheral serial number
	* @memberof remotemessage.PairingRequestMessage
	* @return {String} 
	*/
	PairingRequestMessage.prototype.getSerialNumber = function() {
	  return this.serialNumber;
	};

	/**
	* Set the field value
	* The name of the application the peripheral is associated with. This is the "resourceDescriptor" in the handshake
	*
	* @memberof remotemessage.PairingRequestMessage
	* @param {String} applicationName 
	*/
	PairingRequestMessage.prototype.setApplicationName = function(applicationName) {
	  this.applicationName = applicationName;
	};

	/**
	* Get the field value
	* The name of the application the peripheral is associated with. This is the "resourceDescriptor" in the handshake
	* @memberof remotemessage.PairingRequestMessage
	* @return {String} 
	*/
	PairingRequestMessage.prototype.getApplicationName = function() {
	  return this.applicationName;
	};

	/**
	* Set the field value
	* The token, recognized by the specific device.
	*
	* @memberof remotemessage.PairingRequestMessage
	* @param {String|Null} authenticationToken 
	*/
	PairingRequestMessage.prototype.setAuthenticationToken = function(authenticationToken) {
	  this.authenticationToken = authenticationToken;
	};

	/**
	* Get the field value
	* The token, recognized by the specific device.
	* @memberof remotemessage.PairingRequestMessage
	* @return {String|Null} 
	*/
	PairingRequestMessage.prototype.getAuthenticationToken = function() {
	  return this.authenticationToken;
	};

	PairingRequestMessage._meta_ =  {fields:  {}};
	PairingRequestMessage._meta_._class_ =  PairingRequestMessage;
	PairingRequestMessage._meta_._superMeta_ = remotemessage_Message._meta_;
	PairingRequestMessage._meta_.fields["name"] = {};
	PairingRequestMessage._meta_.fields["name"].type = String;
	PairingRequestMessage._meta_.fields["serialNumber"] = {};
	PairingRequestMessage._meta_.fields["serialNumber"].type = String;
	PairingRequestMessage._meta_.fields["applicationName"] = {};
	PairingRequestMessage._meta_.fields["applicationName"].type = String;
	PairingRequestMessage._meta_.fields["authenticationToken"] = {};
	PairingRequestMessage._meta_.fields["authenticationToken"].type = String;

	//
	// Expose the module.
	//
	if (true) {
	module.exports = PairingRequestMessage;
	}



/***/ }),
/* 477 */
/***/ (function(module, exports, __webpack_require__) {

	/**
	 * Autogenerated by Avro
	 * 
	 * DO NOT EDIT DIRECTLY
	 */


	/**
	* @memberof remotemessage
	* @enum {string}
	*/
	var PairingState = {
	  UNINITIALIZED : "UNINITIALIZED",
	  PAIRED : "PAIRED",
	  FAILED : "FAILED",
	  INITIAL : "INITIAL"
	};


	//
	// Expose the module.
	//
	if (true) {
	module.exports = PairingState;
	}



/***/ }),
/* 478 */
/***/ (function(module, exports, __webpack_require__) {

	/**
	 * Autogenerated by Avro
	 * 
	 * DO NOT EDIT DIRECTLY
	 */


	/**
	* @memberof remotemessage
	* @enum {string}
	*/
	var RemoteMessageType = {
	  COMMAND : "COMMAND",
	  QUERY : "QUERY",
	  EVENT : "EVENT",
	  PING : "PING",
	  PONG : "PONG"
	};


	//
	// Expose the module.
	//
	if (true) {
	module.exports = RemoteMessageType;
	}



/***/ }),
/* 479 */
/***/ (function(module, exports, __webpack_require__) {

	/**
	 * Autogenerated by Avro
	 * 
	 * DO NOT EDIT DIRECTLY
	 */


	/**
	* @constructor
	* @memberof remotemessage
	*/
	var RemoveDiscountAction = function() {
	  this._class_ = RemoveDiscountAction;
	  this.discountId = undefined;
	  this.lineItemId = undefined;
	};


	/**
	* Set the field value
	* @memberof remotemessage.RemoveDiscountAction
	* @param {String} discountId 
	*/
	RemoveDiscountAction.prototype.setDiscountId = function(discountId) {
	  this.discountId = discountId;
	};

	/**
	* Get the field value
	* @memberof remotemessage.RemoveDiscountAction
	* @return {String} 
	*/
	RemoveDiscountAction.prototype.getDiscountId = function() {
	  return this.discountId;
	};

	/**
	* Set the field value
	* @memberof remotemessage.RemoveDiscountAction
	* @param {String} lineItemId 
	*/
	RemoveDiscountAction.prototype.setLineItemId = function(lineItemId) {
	  this.lineItemId = lineItemId;
	};

	/**
	* Get the field value
	* @memberof remotemessage.RemoveDiscountAction
	* @return {String} 
	*/
	RemoveDiscountAction.prototype.getLineItemId = function() {
	  return this.lineItemId;
	};

	/**
	* @memberof remotemessage.RemoveDiscountAction
	* @private
	*/
	RemoveDiscountAction.prototype.getMetaInfo = function(fieldName) {
	  var curclass = this._class_;
	  do {
	    var fieldMetaInfo = curclass._meta_.fields[fieldName];
	    if(fieldMetaInfo) {
	      return fieldMetaInfo;
	    }
	    if(curclass._meta_._superMeta_) {
	      curclass = curclass._meta_._superMeta_._class_;
	    } else {
	      curclass = null;
	    }
	  } while(curclass);
	  return null;
	};

	RemoveDiscountAction.prototype.toString = function() {
	  return JSON.stringify(this);
	};

	RemoveDiscountAction._meta_ =  {fields:  {}};
	RemoveDiscountAction._meta_._class_ =  RemoveDiscountAction;
	RemoveDiscountAction._meta_.fields["discountId"] = {};
	RemoveDiscountAction._meta_.fields["discountId"].type = String;
	RemoveDiscountAction._meta_.fields["lineItemId"] = {};
	RemoveDiscountAction._meta_.fields["lineItemId"].type = String;

	//
	// Expose the module.
	//
	if (true) {
	module.exports = RemoveDiscountAction;
	}



/***/ }),
/* 480 */
/***/ (function(module, exports, __webpack_require__) {

	/**
	 * Autogenerated by Avro
	 * 
	 * DO NOT EDIT DIRECTLY
	 */


	/**
	* @constructor
	* @memberof remotemessage
	*/
	var RemoveLineItemAction = function() {
	  this._class_ = RemoveLineItemAction;
	  this.lineItemId = undefined;
	};


	/**
	* Set the field value
	* @memberof remotemessage.RemoveLineItemAction
	* @param {String} lineItemId 
	*/
	RemoveLineItemAction.prototype.setLineItemId = function(lineItemId) {
	  this.lineItemId = lineItemId;
	};

	/**
	* Get the field value
	* @memberof remotemessage.RemoveLineItemAction
	* @return {String} 
	*/
	RemoveLineItemAction.prototype.getLineItemId = function() {
	  return this.lineItemId;
	};

	/**
	* @memberof remotemessage.RemoveLineItemAction
	* @private
	*/
	RemoveLineItemAction.prototype.getMetaInfo = function(fieldName) {
	  var curclass = this._class_;
	  do {
	    var fieldMetaInfo = curclass._meta_.fields[fieldName];
	    if(fieldMetaInfo) {
	      return fieldMetaInfo;
	    }
	    if(curclass._meta_._superMeta_) {
	      curclass = curclass._meta_._superMeta_._class_;
	    } else {
	      curclass = null;
	    }
	  } while(curclass);
	  return null;
	};

	RemoveLineItemAction.prototype.toString = function() {
	  return JSON.stringify(this);
	};

	RemoveLineItemAction._meta_ =  {fields:  {}};
	RemoveLineItemAction._meta_._class_ =  RemoveLineItemAction;
	RemoveLineItemAction._meta_.fields["lineItemId"] = {};
	RemoveLineItemAction._meta_.fields["lineItemId"].type = String;

	//
	// Expose the module.
	//
	if (true) {
	module.exports = RemoveLineItemAction;
	}



/***/ }),
/* 481 */
/***/ (function(module, exports, __webpack_require__) {

	/**
	 * Autogenerated by Avro
	 * 
	 * DO NOT EDIT DIRECTLY
	 */


	/**
	* @memberof remotemessage
	* @enum {string}
	*/
	var TransactionType = {
	  PAYMENT : "PAYMENT",
	  CREDIT : "CREDIT",
	  AUTH : "AUTH",
	  DATA : "DATA",
	  BALANCE_INQUIRY : "BALANCE_INQUIRY",
	  PAYMENT_REVERSAL : "PAYMENT_REVERSAL",
	  PAYMENT_ADJUSTMENT : "PAYMENT_ADJUSTMENT",
	  CREDIT_REVERSAL : "CREDIT_REVERSAL",
	  REFUND_ADJUSTMENT : "REFUND_ADJUSTMENT",
	  CASH_ADVANCE : "CASH_ADVANCE",
	  CAPTURE_PREAUTH : "CAPTURE_PREAUTH",
	  VAS_DATA : "VAS_DATA",
	  VERIFY_CARD : "VERIFY_CARD",
	  TOKENIZE_CARD : "TOKENIZE_CARD"
	};


	//
	// Expose the module.
	//
	if (true) {
	module.exports = TransactionType;
	}



/***/ }),
/* 482 */
/***/ (function(module, exports, __webpack_require__) {

	/**
	 * Autogenerated by Avro
	 * 
	 * DO NOT EDIT DIRECTLY
	 */


	/**
	* @memberof remotemessage
	* @enum {string}
	*/
	var TxStartResponseResult = {
	  SUCCESS : "SUCCESS",
	  ORDER_MODIFIED : "ORDER_MODIFIED",
	  ORDER_LOAD : "ORDER_LOAD",
	  DUPLICATE : "DUPLICATE",
	  FAIL : "FAIL"
	};


	//
	// Expose the module.
	//
	if (true) {
	module.exports = TxStartResponseResult;
	}



/***/ }),
/* 483 */
/***/ (function(module, exports, __webpack_require__) {

	/**
	 * Autogenerated by Avro
	 * 
	 * DO NOT EDIT DIRECTLY
	 */


	/**
	* @memberof remotemessage
	* @enum {string}
	*/
	var UiDirection = {
	  ENTER : "ENTER",
	  EXIT : "EXIT"
	};


	//
	// Expose the module.
	//
	if (true) {
	module.exports = UiDirection;
	}



/***/ }),
/* 484 */
/***/ (function(module, exports, __webpack_require__) {

	/**
	 * Autogenerated by Avro
	 *
	 * DO NOT EDIT DIRECTLY
	 */


	/**
	 * @memberof remotemessage
	 * @enum {string}
	 */
	var UiState = {
	  ADD_SIGNATURE : "ADD_SIGNATURE",
	  ADD_SIGNATURE_CANCEL_CONFIRM : "ADD_SIGNATURE_CANCEL_CONFIRM",
	  ADD_TIP : "ADD_TIP",
	  APPROVE_ELV_LIMIT_OVERRIDE : "APPROVE_ELV_LIMIT_OVERRIDE",
	  APPROVED : "APPROVED",
	  CANCELED : "CANCELED",
	  CASHBACK_CONFIRM : "CASHBACK_CONFIRM",
	  CASHBACK_SELECT : "CASHBACK_SELECT",
	  CONFIGURING : "CONFIGURING",
	  CONFIRM_AMOUNT : "CONFIRM_AMOUNT",
	  CONFIRM_DUPLICATE_CHECK : "CONFIRM_DUPLICATE_CHECK",
	  CONFIRM_PARTIAL_AUTH : "CONFIRM_PARTIAL_AUTH",
	  CONTACTLESS_TAP_REQUIRED : "CONTACTLESS_TAP_REQUIRED",
	  CUSTOM_ACTIVITY : "CUSTOM_ACTIVITY",
	  CUSTOM_TIP_AMOUNT : "CUSTOM_TIP_AMOUNT",
	  DCC_HOST_REQUEST : "DCC_HOST_REQUEST",
	  DECLINED : "DECLINED",
	  DISPLAY_MESSAGE : "DISPLAY_MESSAGE",
	  DISPLAY_ORDER : "DISPLAY_ORDER",
	  ENTER_INSTALLMENT_CODE : "ENTER_INSTALLMENT_CODE",
	  ENTER_INSTALLMENTS : "ENTER_INSTALLMENTS",
	  ENTER_PAN_LAST_FOUR : "ENTER_PAN_LAST_FOUR",
	  ERROR_SCREEN : "ERROR_SCREEN",
	  FAILED : "FAILED",
	  FATAL : "FATAL",
	  FISCAL_INVOICE_NUMBER : "FISCAL_INVOICE_NUMBER",
	  FORCE_ACCEPTANCE : "FORCE_ACCEPTANCE",
	  HANDLE_TENDER : "HANDLE_TENDER",
	  INPUT_ERROR : "INPUT_ERROR",
	  MANUAL_CARD_CVV : "MANUAL_CARD_CVV",
	  MANUAL_CARD_CVV_UNREADABLE : "MANUAL_CARD_CVV_UNREADABLE",
	  MANUAL_CARD_EXPIRATION : "MANUAL_CARD_EXPIRATION",
	  MANUAL_CARD_NUMBER : "MANUAL_CARD_NUMBER",
	  MANUAL_ENTRY_FALLBACK : "MANUAL_ENTRY_FALLBACK",
	  OFFLINE_PAYMENT_CONFIRM : "OFFLINE_PAYMENT_CONFIRM",
	  PACKET_EXCEPTION : "PACKET_EXCEPTION",
	  PERSONAL_ID_ENTRY : "PERSONAL_ID_ENTRY",
	  PERSONAL_ID_ENTRY_PAS : "PERSONAL_ID_ENTRY_PAS",
	  PIN_BYPASS_CONFIRM : "PIN_BYPASS_CONFIRM",
	  PIN_PAD : "PIN_PAD",
	  PROCESSING : "PROCESSING",
	  PROCESSING_CREDIT : "PROCESSING_CREDIT",
	  PROCESSING_GO_ONLINE : "PROCESSING_GO_ONLINE",
	  PROCESSING_SWIPE : "PROCESSING_SWIPE",
	  RECEIPT_OPTIONS : "RECEIPT_OPTIONS",
	  REMOVE_CARD : "REMOVE_CARD",
	  RETURN_TO_MERCHANT : "RETURN_TO_MERCHANT",
	  SELECT_ACCOUNT : "SELECT_ACCOUNT",
	  SELECT_APPLICATION : "SELECT_APPLICATION",
	  SELECT_DCC : "SELECT_DCC",
	  SELECT_INSTALLMENT_PLAN : "SELECT_INSTALLMENT_PLAN",
	  SELECT_LANGUAGE : "SELECT_LANGUAGE",
	  SELECT_MULTI_MID: "SELECT_MULTI_MID",
	  SELECT_TIP: "SELECT_TIP",
	  SELECT_WITHDRAW_FROM_ACCOUNT: "SELECT_WITHDRAW_FROM_ACCOUNT",
	  SENSORY_EXPERIENCE: "SENSORY_EXPERIENCE",
	  SHOW_SEPA_MANDAT: "SHOW_SEPA_MANDAT",
	  SIGNATURE_CUSTOMER_MODE: "SIGNATURE_CUSTOMER_MODE",
	  SIGNATURE_ON_SCREEN_FALLBACK: "SIGNATURE_ON_SCREEN_FALLBACK",
	  SIGNATURE_REJECT: "SIGNATURE_REJECT",
	  START: "START",
	  STARTING_CUSTOM_ACTIVITY: "STARTING_CUSTOM_ACTIVITY",
	  START_QR_CODE_MODE: "START_QR_CODE_MODE",
	  SWIPE_CVV_ENTRY: "SWIPE_CVV_ENTRY",
	  THANKYOU_SCREEN: "THANKYOU_SCREEN",
	  TIMED_OUT: "TIMED_OUT",
	  TRY_AGAIN: "TRY_AGAIN",
	  VERIFY_SIGNATURE_ON_PAPER: "VERIFY_SIGNATURE_ON_PAPER",
	  VERIFY_SIGNATURE_ON_PAPER_CONFIRM_VOID: "VERIFY_SIGNATURE_ON_PAPER_CONFIRM_VOID",
	  VERIFY_SIGNATURE_ON_SCREEN: "VERIFY_SIGNATURE_ON_SCREEN",
	  VERIFY_SIGNATURE_ON_SCREEN_CONFIRM_VOID: "VERIFY_SIGNATURE_ON_SCREEN_CONFIRM_VOID",
	  VERIFY_SURCHARGES: "VERIFY_SURCHARGES",
	  VOICE_REFERRAL_RESULT: "VOICE_REFERRAL_RESULT",
	  VOID_CONFIRM : "VOID_CONFIRM",
	  VOIDED : "VOIDED",
	  WELCOME_SCREEN : "WELCOME_SCREEN"
	};


	//
	// Expose the module.
	//
	if (true) {
	  module.exports = UiState;
	}


/***/ }),
/* 485 */
/***/ (function(module, exports, __webpack_require__) {

	/**
	 * Autogenerated by Avro
	 * 
	 * DO NOT EDIT DIRECTLY
	 */

	var remotemessage_Method = __webpack_require__(2);
	var payments_VasConfig = __webpack_require__(255);
	var remotemessage_Message = __webpack_require__(3);

	/**
	* @constructor
	* @augments remotemessage.Message
	* @memberof remotemessage
	*/
	var VasConfigMessage = function() {
	  remotemessage_Message.call(this);
	  this._superClass_ = remotemessage_Message;
	  this._class_ = VasConfigMessage;
	  this.setMethod(remotemessage_Method["VAS_CONFIG"]);
	  this.config = undefined;
	};

	VasConfigMessage.prototype = Object.create(remotemessage_Message.prototype);
	VasConfigMessage.prototype.constructor = VasConfigMessage;

	/**
	* Set the field value
	* A VAS configuration
	*
	* @memberof remotemessage.VasConfigMessage
	* @param {payments.VasConfig} config 
	*/
	VasConfigMessage.prototype.setConfig = function(config) {
	  this.config = config;
	};

	/**
	* Get the field value
	* A VAS configuration
	* @memberof remotemessage.VasConfigMessage
	* @return {payments.VasConfig} 
	*/
	VasConfigMessage.prototype.getConfig = function() {
	  return this.config;
	};

	VasConfigMessage._meta_ =  {fields:  {}};
	VasConfigMessage._meta_._class_ =  VasConfigMessage;
	VasConfigMessage._meta_._superMeta_ = remotemessage_Message._meta_;
	VasConfigMessage._meta_.fields["config"] = {};
	VasConfigMessage._meta_.fields["config"].type = payments_VasConfig;

	//
	// Expose the module.
	//
	if (true) {
	module.exports = VasConfigMessage;
	}



/***/ }),
/* 486 */
/***/ (function(module, exports, __webpack_require__) {

	/**
	 * Autogenerated by Avro
	 * 
	 * DO NOT EDIT DIRECTLY
	 */

	var customers_Customer = __webpack_require__(67);

	/** Represents a customer that is linked to an external system.  This customer may be persisted in Clover, or it may not. */
	/**
	* @constructor
	* @memberof remotepay
	*/
	var CustomerInfo = function() {
	  this._class_ = CustomerInfo;
	  this.customer = undefined;
	  this.displayString = undefined;
	  this.externalId = undefined;
	  this.externalSystemName = undefined;
	  this.extras = undefined;
	};


	/**
	* Set the field value
	* The customer object that Clover uses.  This is the base model for a Clover customer, any additional information external systems need should exist in other fields
	*
	* @memberof remotepay.CustomerInfo
	* @param {customers.Customer} customer 
	*/
	CustomerInfo.prototype.setCustomer = function(customer) {
	  this.customer = customer;
	};

	/**
	* Get the field value
	* The customer object that Clover uses.  This is the base model for a Clover customer, any additional information external systems need should exist in other fields
	* @memberof remotepay.CustomerInfo
	* @return {customers.Customer} 
	*/
	CustomerInfo.prototype.getCustomer = function() {
	  return this.customer;
	};

	/**
	* Set the field value
	* A custom way to display this customer for an external system
	*
	* @memberof remotepay.CustomerInfo
	* @param {String} displayString 
	*/
	CustomerInfo.prototype.setDisplayString = function(displayString) {
	  this.displayString = displayString;
	};

	/**
	* Get the field value
	* A custom way to display this customer for an external system
	* @memberof remotepay.CustomerInfo
	* @return {String} 
	*/
	CustomerInfo.prototype.getDisplayString = function() {
	  return this.displayString;
	};

	/**
	* Set the field value
	* an id for an external system to use to reference this Customer.
	*
	* @memberof remotepay.CustomerInfo
	* @param {String} externalId 
	*/
	CustomerInfo.prototype.setExternalId = function(externalId) {
	  this.externalId = externalId;
	};

	/**
	* Get the field value
	* an id for an external system to use to reference this Customer.
	* @memberof remotepay.CustomerInfo
	* @return {String} 
	*/
	CustomerInfo.prototype.getExternalId = function() {
	  return this.externalId;
	};

	/**
	* Set the field value
	* The name of the external system that 'owns' this.  It is the system that understands the link from the externalId to the Customer.
	*
	* @memberof remotepay.CustomerInfo
	* @param {String} externalSystemName 
	*/
	CustomerInfo.prototype.setExternalSystemName = function(externalSystemName) {
	  this.externalSystemName = externalSystemName;
	};

	/**
	* Get the field value
	* The name of the external system that 'owns' this.  It is the system that understands the link from the externalId to the Customer.
	* @memberof remotepay.CustomerInfo
	* @return {String} 
	*/
	CustomerInfo.prototype.getExternalSystemName = function() {
	  return this.externalSystemName;
	};

	/**
	* Set the field value
	* Extra data used by external systems.
	*
	* @memberof remotepay.CustomerInfo
	* @param {Object.<String,String>} extras A map of <String> to <>
	*/
	CustomerInfo.prototype.setExtras = function(extras) {
	  this.extras = extras;
	};

	/**
	* Get the field value
	* Extra data used by external systems.
	* @memberof remotepay.CustomerInfo
	* @return {Object.<String,String>} A map of <String> to <>
	*/
	CustomerInfo.prototype.getExtras = function() {
	  return this.extras;
	};

	/**
	* @memberof remotepay.CustomerInfo
	* @private
	*/
	CustomerInfo.prototype.getMetaInfo = function(fieldName) {
	  var curclass = this._class_;
	  do {
	    var fieldMetaInfo = curclass._meta_.fields[fieldName];
	    if(fieldMetaInfo) {
	      return fieldMetaInfo;
	    }
	    if(curclass._meta_._superMeta_) {
	      curclass = curclass._meta_._superMeta_._class_;
	    } else {
	      curclass = null;
	    }
	  } while(curclass);
	  return null;
	};

	CustomerInfo.prototype.toString = function() {
	  return JSON.stringify(this);
	};

	CustomerInfo._meta_ =  {fields:  {}};
	CustomerInfo._meta_._class_ =  CustomerInfo;
	CustomerInfo._meta_.fields["customer"] = {};
	CustomerInfo._meta_.fields["customer"].type = customers_Customer;
	CustomerInfo._meta_.fields["displayString"] = {};
	CustomerInfo._meta_.fields["displayString"].type = String;
	CustomerInfo._meta_.fields["externalId"] = {};
	CustomerInfo._meta_.fields["externalId"].type = String;
	CustomerInfo._meta_.fields["externalSystemName"] = {};
	CustomerInfo._meta_.fields["externalSystemName"].type = String;
	CustomerInfo._meta_.fields["extras"] = {};
	CustomerInfo._meta_.fields["extras"].type = Object;

	//
	// Expose the module.
	//
	if (true) {
	module.exports = CustomerInfo;
	}



/***/ }),
/* 487 */
/***/ (function(module, exports, __webpack_require__) {

	/**
	 * Autogenerated by Avro
	 * 
	 * DO NOT EDIT DIRECTLY
	 */


	/**
	* @constructor
	* @memberof remotepay
	*/
	var DeviceInfo = function() {
	  this._class_ = DeviceInfo;
	  this.name = undefined;
	  this.model = undefined;
	  this.serial = undefined;
	  this.supportsAcks = undefined;
	  this.supportsVoidPaymentResponse = undefined;
	};


	/**
	* Set the field value
	* Name of the device (if entered)
	*
	* @memberof remotepay.DeviceInfo
	* @param {String} name 
	*/
	DeviceInfo.prototype.setName = function(name) {
	  this.name = name;
	};

	/**
	* Get the field value
	* Name of the device (if entered)
	* @memberof remotepay.DeviceInfo
	* @return {String} 
	*/
	DeviceInfo.prototype.getName = function() {
	  return this.name;
	};

	/**
	* Set the field value
	* @memberof remotepay.DeviceInfo
	* @param {String} model 
	*/
	DeviceInfo.prototype.setModel = function(model) {
	  this.model = model;
	};

	/**
	* Get the field value
	* @memberof remotepay.DeviceInfo
	* @return {String} 
	*/
	DeviceInfo.prototype.getModel = function() {
	  return this.model;
	};

	/**
	* Set the field value
	* @memberof remotepay.DeviceInfo
	* @param {String} serial 
	*/
	DeviceInfo.prototype.setSerial = function(serial) {
	  this.serial = serial;
	};

	/**
	* Get the field value
	* @memberof remotepay.DeviceInfo
	* @return {String} 
	*/
	DeviceInfo.prototype.getSerial = function() {
	  return this.serial;
	};

	/**
	* Set the field value
	* If true, then the device supports acknowledgements.
	*
	* @memberof remotepay.DeviceInfo
	* @param {Boolean} supportsAcks 
	*/
	DeviceInfo.prototype.setSupportsAcks = function(supportsAcks) {
	  this.supportsAcks = supportsAcks;
	};

	/**
	* Get the field value
	* If true, then the device supports acknowledgements.
	* @memberof remotepay.DeviceInfo
	* @return {Boolean} 
	*/
	DeviceInfo.prototype.getSupportsAcks = function() {
	  return this.supportsAcks;
	};

	/**
	* Set the field value
	* If true, then the device supports a void payment response.
	*
	* @memberof remotepay.DeviceInfo
	* @param {Boolean} supportsVoidPaymentResponse 
	*/
	DeviceInfo.prototype.setSupportsVoidPaymentResponse = function(supportsVoidPaymentResponse) {
	  this.supportsVoidPaymentResponse = supportsVoidPaymentResponse;
	};

	/**
	* Get the field value
	* If true, then the device supports a void payment response.
	* @memberof remotepay.DeviceInfo
	* @return {Boolean} 
	*/
	DeviceInfo.prototype.getSupportsVoidPaymentResponse = function() {
	  return this.supportsVoidPaymentResponse;
	};

	/**
	* @memberof remotepay.DeviceInfo
	* @private
	*/
	DeviceInfo.prototype.getMetaInfo = function(fieldName) {
	  var curclass = this._class_;
	  do {
	    var fieldMetaInfo = curclass._meta_.fields[fieldName];
	    if(fieldMetaInfo) {
	      return fieldMetaInfo;
	    }
	    if(curclass._meta_._superMeta_) {
	      curclass = curclass._meta_._superMeta_._class_;
	    } else {
	      curclass = null;
	    }
	  } while(curclass);
	  return null;
	};

	DeviceInfo.prototype.toString = function() {
	  return JSON.stringify(this);
	};

	DeviceInfo._meta_ =  {fields:  {}};
	DeviceInfo._meta_._class_ =  DeviceInfo;
	DeviceInfo._meta_.fields["name"] = {};
	DeviceInfo._meta_.fields["name"].type = String;
	DeviceInfo._meta_.fields["model"] = {};
	DeviceInfo._meta_.fields["model"].type = String;
	DeviceInfo._meta_.fields["serial"] = {};
	DeviceInfo._meta_.fields["serial"].type = String;
	DeviceInfo._meta_.fields["supportsAcks"] = {};
	DeviceInfo._meta_.fields["supportsAcks"].type = Boolean;
	DeviceInfo._meta_.fields["supportsVoidPaymentResponse"] = {};
	DeviceInfo._meta_.fields["supportsVoidPaymentResponse"].type = Boolean;

	//
	// Expose the module.
	//
	if (true) {
	module.exports = DeviceInfo;
	}



/***/ }),
/* 488 */
/***/ (function(module, exports, __webpack_require__) {

	/**
	 * Autogenerated by Avro
	 * 
	 * DO NOT EDIT DIRECTLY
	 */


	/**
	* @memberof remotepay
	* @enum {string}
	*/
	var ErrorType = {
	  COMMUNICATION : "COMMUNICATION",
	  VALIDATION : "VALIDATION",
	  EXCEPTION : "EXCEPTION"
	};


	//
	// Expose the module.
	//
	if (true) {
	module.exports = ErrorType;
	}



/***/ }),
/* 489 */
/***/ (function(module, exports, __webpack_require__) {

	/**
	 * Autogenerated by Avro
	 * 
	 * DO NOT EDIT DIRECTLY
	 */


	/**
	* @constructor
	* @memberof remotepay
	*/
	var Img = function() {
	  this._class_ = Img;
	  this.data = undefined;
	  this.src = undefined;
	  this.width = undefined;
	  this.height = undefined;
	};


	/**
	* Set the field value
	* The base64 encoded data of the image if available
	*
	* @memberof remotepay.Img
	* @param {String} data 
	*/
	Img.prototype.setData = function(data) {
	  this.data = data;
	};

	/**
	* Get the field value
	* The base64 encoded data of the image if available
	* @memberof remotepay.Img
	* @return {String} 
	*/
	Img.prototype.getData = function() {
	  return this.data;
	};

	/**
	* Set the field value
	* The url to the image if available
	*
	* @memberof remotepay.Img
	* @param {String} src 
	*/
	Img.prototype.setSrc = function(src) {
	  this.src = src;
	};

	/**
	* Get the field value
	* The url to the image if available
	* @memberof remotepay.Img
	* @return {String} 
	*/
	Img.prototype.getSrc = function() {
	  return this.src;
	};

	/**
	* Set the field value
	* The width of the image if available
	*
	* @memberof remotepay.Img
	* @param {Number} width must be a long integer
	*/
	Img.prototype.setWidth = function(width) {
	  this.width = width;
	};

	/**
	* Get the field value
	* The width of the image if available
	* @memberof remotepay.Img
	* @return {Number} must be a long integer
	*/
	Img.prototype.getWidth = function() {
	  return this.width;
	};

	/**
	* Set the field value
	* The height of the image if available
	*
	* @memberof remotepay.Img
	* @param {Number} height must be a long integer
	*/
	Img.prototype.setHeight = function(height) {
	  this.height = height;
	};

	/**
	* Get the field value
	* The height of the image if available
	* @memberof remotepay.Img
	* @return {Number} must be a long integer
	*/
	Img.prototype.getHeight = function() {
	  return this.height;
	};

	/**
	* @memberof remotepay.Img
	* @private
	*/
	Img.prototype.getMetaInfo = function(fieldName) {
	  var curclass = this._class_;
	  do {
	    var fieldMetaInfo = curclass._meta_.fields[fieldName];
	    if(fieldMetaInfo) {
	      return fieldMetaInfo;
	    }
	    if(curclass._meta_._superMeta_) {
	      curclass = curclass._meta_._superMeta_._class_;
	    } else {
	      curclass = null;
	    }
	  } while(curclass);
	  return null;
	};

	Img.prototype.toString = function() {
	  return JSON.stringify(this);
	};

	Img._meta_ =  {fields:  {}};
	Img._meta_._class_ =  Img;
	Img._meta_.fields["data"] = {};
	Img._meta_.fields["data"].type = String;
	Img._meta_.fields["src"] = {};
	Img._meta_.fields["src"].type = String;
	Img._meta_.fields["width"] = {};
	Img._meta_.fields["width"].type = Number;
	Img._meta_.fields["height"] = {};
	Img._meta_.fields["height"].type = Number;

	//
	// Expose the module.
	//
	if (true) {
	module.exports = Img;
	}



/***/ }),
/* 490 */
/***/ (function(module, exports, __webpack_require__) {

	/**
	 * Autogenerated by Avro
	 * 
	 * DO NOT EDIT DIRECTLY
	 */

	var remotepay_KeyPress = __webpack_require__(270);

	/**
	* @constructor
	* @memberof remotepay
	*/
	var InputOption = function() {
	  this._class_ = InputOption;
	  this.keyPress = undefined;
	  this.description = undefined;
	};


	/**
	* Set the field value
	* The keypress this represents
	*
	* @memberof remotepay.InputOption
	* @param {remotepay.KeyPress} keyPress 
	*/
	InputOption.prototype.setKeyPress = function(keyPress) {
	  this.keyPress = keyPress;
	};

	/**
	* Get the field value
	* The keypress this represents
	* @memberof remotepay.InputOption
	* @return {remotepay.KeyPress} 
	*/
	InputOption.prototype.getKeyPress = function() {
	  return this.keyPress;
	};

	/**
	* Set the field value
	* A description of what this input option represents
	*
	* @memberof remotepay.InputOption
	* @param {String} description 
	*/
	InputOption.prototype.setDescription = function(description) {
	  this.description = description;
	};

	/**
	* Get the field value
	* A description of what this input option represents
	* @memberof remotepay.InputOption
	* @return {String} 
	*/
	InputOption.prototype.getDescription = function() {
	  return this.description;
	};

	/**
	* @memberof remotepay.InputOption
	* @private
	*/
	InputOption.prototype.getMetaInfo = function(fieldName) {
	  var curclass = this._class_;
	  do {
	    var fieldMetaInfo = curclass._meta_.fields[fieldName];
	    if(fieldMetaInfo) {
	      return fieldMetaInfo;
	    }
	    if(curclass._meta_._superMeta_) {
	      curclass = curclass._meta_._superMeta_._class_;
	    } else {
	      curclass = null;
	    }
	  } while(curclass);
	  return null;
	};

	InputOption.prototype.toString = function() {
	  return JSON.stringify(this);
	};

	InputOption._meta_ =  {fields:  {}};
	InputOption._meta_._class_ =  InputOption;
	InputOption._meta_.fields["keyPress"] = {};
	InputOption._meta_.fields["keyPress"].type = remotepay_KeyPress;
	InputOption._meta_.fields["description"] = {};
	InputOption._meta_.fields["description"].type = String;

	//
	// Expose the module.
	//
	if (true) {
	module.exports = InputOption;
	}



/***/ }),
/* 491 */
/***/ (function(module, exports, __webpack_require__) {

	/**
	 * Autogenerated by Avro
	 * 
	 * DO NOT EDIT DIRECTLY
	 */


	/**
	* @constructor
	* @memberof remotepay
	*/
	var PlatformError = function() {
	  this._class_ = PlatformError;
	  this.message = undefined;
	};


	/**
	* Set the field value
	* Description of the error.
	*
	* @memberof remotepay.PlatformError
	* @param {String} message 
	*/
	PlatformError.prototype.setMessage = function(message) {
	  this.message = message;
	};

	/**
	* Get the field value
	* Description of the error.
	* @memberof remotepay.PlatformError
	* @return {String} 
	*/
	PlatformError.prototype.getMessage = function() {
	  return this.message;
	};

	/**
	* @memberof remotepay.PlatformError
	* @private
	*/
	PlatformError.prototype.getMetaInfo = function(fieldName) {
	  var curclass = this._class_;
	  do {
	    var fieldMetaInfo = curclass._meta_.fields[fieldName];
	    if(fieldMetaInfo) {
	      return fieldMetaInfo;
	    }
	    if(curclass._meta_._superMeta_) {
	      curclass = curclass._meta_._superMeta_._class_;
	    } else {
	      curclass = null;
	    }
	  } while(curclass);
	  return null;
	};

	PlatformError.prototype.toString = function() {
	  return JSON.stringify(this);
	};

	PlatformError._meta_ =  {fields:  {}};
	PlatformError._meta_._class_ =  PlatformError;
	PlatformError._meta_.fields["message"] = {};
	PlatformError._meta_.fields["message"].type = String;

	//
	// Expose the module.
	//
	if (true) {
	module.exports = PlatformError;
	}



/***/ }),
/* 492 */
/***/ (function(module, exports, __webpack_require__) {

	/**
	 * Autogenerated by Avro
	 * 
	 * DO NOT EDIT DIRECTLY
	 */

	var remotepay_BaseResponse = __webpack_require__(15);
	var payments_Refund = __webpack_require__(26);

	/**
	* @constructor
	* @augments remotepay.BaseResponse
	* @memberof remotepay
	*/
	var RefundPaymentResponse = function() {
	  remotepay_BaseResponse.call(this);
	  this._superClass_ = remotepay_BaseResponse;
	  this._class_ = RefundPaymentResponse;
	  this.orderId = undefined;
	  this.paymentId = undefined;
	  this.refund = undefined;
	};

	RefundPaymentResponse.prototype = Object.create(remotepay_BaseResponse.prototype);
	RefundPaymentResponse.prototype.constructor = RefundPaymentResponse;

	/**
	* Set the field value
	* Unique identifier
	*
	* @memberof remotepay.RefundPaymentResponse
	* @param {String} orderId 
	*/
	RefundPaymentResponse.prototype.setOrderId = function(orderId) {
	  this.orderId = orderId;
	};

	/**
	* Get the field value
	* Unique identifier
	* @memberof remotepay.RefundPaymentResponse
	* @return {String} 
	*/
	RefundPaymentResponse.prototype.getOrderId = function() {
	  return this.orderId;
	};

	/**
	* Set the field value
	* Unique identifier
	*
	* @memberof remotepay.RefundPaymentResponse
	* @param {String} paymentId 
	*/
	RefundPaymentResponse.prototype.setPaymentId = function(paymentId) {
	  this.paymentId = paymentId;
	};

	/**
	* Get the field value
	* Unique identifier
	* @memberof remotepay.RefundPaymentResponse
	* @return {String} 
	*/
	RefundPaymentResponse.prototype.getPaymentId = function() {
	  return this.paymentId;
	};

	/**
	* Set the field value
	* The actual refund from the request
	*
	* @memberof remotepay.RefundPaymentResponse
	* @param {payments.Refund} refund 
	*/
	RefundPaymentResponse.prototype.setRefund = function(refund) {
	  this.refund = refund;
	};

	/**
	* Get the field value
	* The actual refund from the request
	* @memberof remotepay.RefundPaymentResponse
	* @return {payments.Refund} 
	*/
	RefundPaymentResponse.prototype.getRefund = function() {
	  return this.refund;
	};

	RefundPaymentResponse._meta_ =  {fields:  {}};
	RefundPaymentResponse._meta_._class_ =  RefundPaymentResponse;
	RefundPaymentResponse._meta_._superMeta_ = remotepay_BaseResponse._meta_;
	RefundPaymentResponse._meta_.fields["orderId"] = {};
	RefundPaymentResponse._meta_.fields["orderId"].type = String;
	RefundPaymentResponse._meta_.fields["paymentId"] = {};
	RefundPaymentResponse._meta_.fields["paymentId"].type = String;
	RefundPaymentResponse._meta_.fields["refund"] = {};
	RefundPaymentResponse._meta_.fields["refund"].type = payments_Refund;

	//
	// Expose the module.
	//
	if (true) {
	module.exports = RefundPaymentResponse;
	}



/***/ }),
/* 493 */
/***/ (function(module, exports) {

	"use strict";
	Object.defineProperty(exports, "__esModule", { value: true });
	exports.Version = void 0;
	/**
	 * Constants class that defines the current version of the library.
	 */
	var Version = /** @class */ (function () {
	    function Version() {
	    }
	    /**
	     * @type {string} - The current version of this library
	     */
	    Version.CLOVER_CLOUD_SDK_VERSION = "4.1.2";
	    /**
	     * @type {string} - The current SDK name.
	     */
	    Version.CLOVER_CLOUD_SDK = "com.clover.cloverconnector.cloud";
	    return Version;
	}());
	exports.Version = Version;

	//# sourceMappingURL=../../maps/com/clover/Version.js.map


/***/ }),
/* 494 */
/***/ (function(module, exports, __webpack_require__) {

	"use strict";
	Object.defineProperty(exports, "__esModule", { value: true });
	exports.JSONToCustomObject = void 0;
	var Logger_1 = __webpack_require__(48);
	/**
	 * A generic parser to take annotated javascript objects and populate them with
	 * raw json data.
	 *
	 */
	var JSONToCustomObject = /** @class */ (function () {
	    function JSONToCustomObject() {
	        // Create a logger
	        this.log = Logger_1.Logger.create();
	        this.isPrimitive = function (metaInfo) {
	            var variableType = metaInfo.type;
	            return (variableType === String ||
	                variableType === Number ||
	                variableType === Boolean);
	        };
	        this.isArray = function (metaInfo) {
	            var variableType = metaInfo.type;
	            return (variableType === Array);
	        };
	        this.isObject = function (metaInfo) {
	            var variableType = metaInfo.type;
	            return (variableType === Object);
	        };
	        this.getArrayType = function (metaInfo) {
	            if (this.isArray(metaInfo)) {
	                return metaInfo.elementType;
	            }
	        };
	        /**
	         * Not used much.  Could be here for a map, but really do not want to see a map...
	         * @param metaInfo
	         * @returns {string}
	         */
	        this.getValueType = function (metaInfo) {
	            return metaInfo.valueType;
	        };
	        this.hasMetaInfo = function (obj) {
	            return obj && obj["getMetaInfo"] && typeof (obj.getMetaInfo) === 'function';
	        };
	    }
	    /**
	     * Copies properties from a plain JavaScript object (sourceObject) into a remote-pay-cloud-api
	     * object (targetObject) that contains meta information.
	     *
	     * Sample call:
	     *
	     *  const saleRequestJSON = {
	     *    amount: 5000,
	     *    cardEntryMethods: 1,
	     *    externalId: "testexternal",
	     *    tipMode: "NO_TIP"
	     *  };
	     *
	     *  const saleRequest = new sdk.remotepay.SaleRequest();
	     *  new JSONToCustomObject.transfertoObject(saleRequestJSON, saleRequest, true);
	     *
	     * @param {Object} sourceObject - A plain JavaScript Object.
	     * @param {Object} targetObject - Generally an sdk object that has meta information (getter/setters, etc.)
	     * @param attachUnknownProperties - if true, then properties that are not recognized will still be
	     *  attached to the returned object, or; if the top level targetObject has no meta information,
	     *  then a copy of the passed sourceObject will be returned.
	     * @returns {Object | null}
	     */
	    JSONToCustomObject.prototype.transfertoObject = function (sourceObject, targetObject, attachUnknownProperties) {
	        if (typeof sourceObject === "string") {
	            // This should not happen, primitives are set outside this.
	            // Try to parse it as a json string
	            try {
	                sourceObject = JSON.parse(sourceObject);
	            }
	            catch (e) {
	                this.log.warn("Invalid JSON: Failed to parse JSON string: " + sourceObject + ".");
	            }
	        }
	        // The sourceObject already has metainfo, we are done.
	        if (this.hasMetaInfo(sourceObject)) {
	            return sourceObject;
	        }
	        // First see if we can do this
	        if (this.hasMetaInfo(targetObject)) {
	            for (var key in sourceObject) {
	                // If the object is null or undefined (I don't think it can be undefined here...)
	                // Just set the field on the customobject to null or undefined.
	                if (sourceObject[key] === null || sourceObject[key] === undefined) {
	                    targetObject[key] = sourceObject[key];
	                }
	                else {
	                    var metaInfo = targetObject.getMetaInfo(key);
	                    if (metaInfo) {
	                        // The field exists on the customObject.  Do some checks on type to
	                        // make sure we set the field to the proper value.
	                        if (this.isPrimitive(metaInfo)) {
	                            // Hope for the same type?  There is the possibility
	                            // of having different types that are compatible...
	                            targetObject[key] = sourceObject[key];
	                        }
	                        else if (this.isArray(metaInfo)) {
	                            var elementType = this.getArrayType(metaInfo);
	                            var jsonArray = sourceObject[key];
	                            // This must be an array.
	                            // The json from remote-pay has this structure for arrays:
	                            // foo: { elements : [ element ] }
	                            // handle this here
	                            if (jsonArray.hasOwnProperty("elements")) {
	                                jsonArray = jsonArray.elements;
	                            }
	                            if (Array.isArray(jsonArray)) {
	                                targetObject[key] = [];
	                                for (var count = 0; count < jsonArray.length; count++) {
	                                    targetObject[key][count] = new elementType;
	                                    var copied = this.transfertoObject(jsonArray[count], targetObject[key][count], attachUnknownProperties);
	                                    if (copied) {
	                                        targetObject[key][count] = copied;
	                                    }
	                                }
	                            }
	                            else {
	                                // Warn.  We will be tolerant...
	                                this.log.warn("Passed json contains field " + key + " of type " + typeof jsonArray +
	                                    ".  The field on the object is of type array.  No assignment will be made", jsonArray, sourceObject);
	                                if (attachUnknownProperties) {
	                                    targetObject["x_" + key] = jsonArray;
	                                }
	                            }
	                        }
	                        else if (this.isObject(metaInfo)) {
	                            // This is a base object.
	                            targetObject[key] = {};
	                            var copied = this.transfertoObject(sourceObject[key], targetObject[key], true);
	                            if (copied) {
	                                targetObject[key] = copied;
	                            }
	                        }
	                        else {
	                            var fieldType = metaInfo.type;
	                            // Might be an enum.  Check here.
	                            if (fieldType[sourceObject[key]]) {
	                                // It is an 'enum', grab the enum value.
	                                targetObject[key] = fieldType[sourceObject[key]];
	                            }
	                            else {
	                                try {
	                                    // The field is not primitive, or an array, or an 'enum'
	                                    // Try to create an instance of the type
	                                    targetObject[key] = new fieldType;
	                                }
	                                catch (e) {
	                                    this.log.error("fieldType is ", fieldType, ", key is ", key, " for jsonobject ", sourceObject);
	                                }
	                                var copied = this.transfertoObject(sourceObject[key], targetObject[key], attachUnknownProperties);
	                                if (copied) {
	                                    targetObject[key] = copied;
	                                }
	                            }
	                        }
	                    }
	                    else if (attachUnknownProperties) {
	                        // Add the unknown information as properties.
	                        targetObject[key] = JSON.parse(JSON.stringify(sourceObject));
	                    }
	                }
	            }
	        }
	        else if (attachUnknownProperties) {
	            return JSON.parse(JSON.stringify(sourceObject));
	        }
	        return null;
	    };
	    ;
	    return JSONToCustomObject;
	}());
	exports.JSONToCustomObject = JSONToCustomObject;

	//# sourceMappingURL=../../../maps/com/clover/json/JSONToCustomObject.js.map


/***/ }),
/* 495 */
/***/ (function(module, exports, __webpack_require__) {

	"use strict";
	var __extends = (this && this.__extends) || (function () {
	    var extendStatics = function (d, b) {
	        extendStatics = Object.setPrototypeOf ||
	            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
	            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
	        return extendStatics(d, b);
	    };
	    return function (d, b) {
	        extendStatics(d, b);
	        function __() { this.constructor = d; }
	        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
	    };
	})();
	Object.defineProperty(exports, "__esModule", { value: true });
	exports.RemoteMessageParser = void 0;
	var sdk = __webpack_require__(35);
	var MethodToMessage_1 = __webpack_require__(1225);
	var JSONToCustomObject_1 = __webpack_require__(494);
	/**
	 * Parses remote messages from raw json, and extracts messages from the
	 * remote message payload object.
	 *
	 */
	var RemoteMessageParser = /** @class */ (function (_super) {
	    __extends(RemoteMessageParser, _super);
	    function RemoteMessageParser() {
	        return _super.call(this) || this;
	    }
	    RemoteMessageParser.getDefaultInstance = function () {
	        return RemoteMessageParser.INSTANCE;
	    };
	    /**
	     *
	     * @param remoteMessageObj - the sdk.remotemessage.RemoteMessage that has a payload that will be parsed to a
	     * sdk.remotemessage.Message
	     * @returns {sdk.remotemessage.Message}
	     */
	    RemoteMessageParser.prototype.parseMessageFromRemoteMessageObj = function (remoteMessageObj, attachUnknownProperties) {
	        if (attachUnknownProperties === void 0) { attachUnknownProperties = false; }
	        var responseMessageType = MethodToMessage_1.MethodToMessage.getType(remoteMessageObj.getMethod());
	        var messageToPopulate = null;
	        if (responseMessageType) {
	            messageToPopulate = new responseMessageType;
	            if (remoteMessageObj.getPayload()) {
	                // Older versions of the remote-pay lib did not return a body here
	                var payload = JSON.parse(remoteMessageObj.getPayload());
	                var copied = this.transfertoObject(payload, messageToPopulate, attachUnknownProperties);
	                if (copied) {
	                    return copied;
	                }
	            }
	        }
	        return messageToPopulate;
	    };
	    /**
	     * @param remoteMessage - a json object that is a serialized RemoteMessage
	     * @returns {sdk.remotemessage.RemoteMessage} - object populated from the input json object.
	     */
	    RemoteMessageParser.prototype.parseToRemoteMessage = function (remoteMessage) {
	        var remoteMessageObj = new sdk.remotemessage.RemoteMessage();
	        this.transfertoObject(remoteMessage, remoteMessageObj, false);
	        return remoteMessageObj;
	    };
	    // packageName:string;
	    RemoteMessageParser.INSTANCE = new RemoteMessageParser();
	    return RemoteMessageParser;
	}(JSONToCustomObject_1.JSONToCustomObject));
	exports.RemoteMessageParser = RemoteMessageParser;

	//# sourceMappingURL=../../../maps/com/clover/json/RemoteMessageParser.js.map


/***/ }),
/* 496 */
/***/ (function(module, exports) {

	"use strict";
	Object.defineProperty(exports, "__esModule", { value: true });
	exports.CardEntryMethods = void 0;
	/**
	 * Defines card entry method constants used in device communication.
	 *
	 */
	var CardEntryMethods = /** @class */ (function () {
	    function CardEntryMethods() {
	    }
	    CardEntryMethods.KIOSK_CARD_ENTRY_METHODS = 1 << 15;
	    CardEntryMethods.CARD_ENTRY_METHOD_MAG_STRIPE = 1 | 256 | CardEntryMethods.KIOSK_CARD_ENTRY_METHODS; // 33025
	    CardEntryMethods.CARD_ENTRY_METHOD_ICC_CONTACT = 2 | 512 | CardEntryMethods.KIOSK_CARD_ENTRY_METHODS; // 33282
	    CardEntryMethods.CARD_ENTRY_METHOD_NFC_CONTACTLESS = 4 | 1024 | CardEntryMethods.KIOSK_CARD_ENTRY_METHODS; // 33796
	    CardEntryMethods.CARD_ENTRY_METHOD_MANUAL = 8 | 2048 | CardEntryMethods.KIOSK_CARD_ENTRY_METHODS; // 34824
	    CardEntryMethods.DEFAULT = CardEntryMethods.CARD_ENTRY_METHOD_MAG_STRIPE |
	        CardEntryMethods.CARD_ENTRY_METHOD_ICC_CONTACT |
	        CardEntryMethods.CARD_ENTRY_METHOD_NFC_CONTACTLESS; // | CARD_ENTRY_METHOD_MANUAL;
	    CardEntryMethods.ALL = CardEntryMethods.CARD_ENTRY_METHOD_MAG_STRIPE |
	        CardEntryMethods.CARD_ENTRY_METHOD_ICC_CONTACT |
	        CardEntryMethods.CARD_ENTRY_METHOD_NFC_CONTACTLESS |
	        CardEntryMethods.CARD_ENTRY_METHOD_MANUAL;
	    return CardEntryMethods;
	}());
	exports.CardEntryMethods = CardEntryMethods;

	//# sourceMappingURL=../../../../maps/com/clover/remote/client/CardEntryMethods.js.map


/***/ }),
/* 497 */
/***/ (function(module, exports, __webpack_require__) {

	"use strict";
	var __extends = (this && this.__extends) || (function () {
	    var extendStatics = function (d, b) {
	        extendStatics = Object.setPrototypeOf ||
	            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
	            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
	        return extendStatics(d, b);
	    };
	    return function (d, b) {
	        extendStatics(d, b);
	        function __() { this.constructor = d; }
	        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
	    };
	})();
	Object.defineProperty(exports, "__esModule", { value: true });
	exports.LegacyCloverConnector = exports.CloverConnectorFactory = void 0;
	var sdk = __webpack_require__(35);
	var WebSocketCloudCloverDeviceConfiguration_1 = __webpack_require__(274);
	var Endpoints_1 = __webpack_require__(504);
	var HttpSupport_1 = __webpack_require__(277);
	var CloverConnector_1 = __webpack_require__(171);
	var BrowserWebSocketImpl_1 = __webpack_require__(173);
	var ImageUtil_1 = __webpack_require__(172);
	/**
	 * This is for backwards compatibility.  It will not work for non-browser!!!
	 *
	 * This is the equivalent of the old way we created and ran the cloud.
	 */
	var CloverConnectorFactory = /** @class */ (function () {
	    function CloverConnectorFactory() {
	    }
	    CloverConnectorFactory.prototype.createICloverConnector = function (configuration) {
	        return new LegacyCloverConnector(configuration);
	    };
	    return CloverConnectorFactory;
	}());
	exports.CloverConnectorFactory = CloverConnectorFactory;
	/**
	 * This connector uses Browser specific objects to work in a manner compatible with the
	 * 1.1.0 implementation of the ICloverConnector.
	 *
	 * It uses the domain && clientId to get the oauthtoken, then gets the merchantId,
	 * and the deviceId.  This process may involve redirection of the page, and XHR requests,
	 * all of which are performed using default Browser objects.
	 *
	 * Once these values have been obtained, a new WebSocketCloudCloverDeviceConfiguration is
	 * generated using the default Browser WebSocket implementation, and the connector is initialized.
	 *
	 */
	var LegacyCloverConnector = /** @class */ (function (_super) {
	    __extends(LegacyCloverConnector, _super);
	    function LegacyCloverConnector(legacyConfiguration) {
	        var _this = _super.call(this, null) || this;
	        _this.urlParamsInfo = null;
	        _this.httpSupport = new HttpSupport_1.HttpSupport(XMLHttpRequest);
	        _this.imageUtil = new ImageUtil_1.ImageUtil();
	        _this.legacyConfiguration = legacyConfiguration;
	        return _this;
	    }
	    LegacyCloverConnector.prototype.initializeConnection = function () {
	        if (this.device == null) {
	            this.initializeLegacyConnection(this.legacyConfiguration);
	        }
	    };
	    /**
	     * Generates a WebSocketCloudCloverDeviceConfiguration with a "raw" configuration
	     * @param rawConfiguration - a Json object that has values that can be used to construct the
	     *  object configuration.
	     */
	    LegacyCloverConnector.prototype.generateNewConfigurationAndInitialize = function (rawConfiguration) {
	        var newConfig = new WebSocketCloudCloverDeviceConfiguration_1.WebSocketCloudCloverDeviceConfiguration(rawConfiguration.remoteApplicationId, BrowserWebSocketImpl_1.BrowserWebSocketImpl.createInstance, this.imageUtil, rawConfiguration.domain, rawConfiguration.oauthToken, this.httpSupport, rawConfiguration.merchantId, rawConfiguration.deviceId, rawConfiguration.friendlyId, rawConfiguration.forceConnect);
	        if (this.device == null) {
	            this.initialize(newConfig);
	        }
	    };
	    /**
	     * Checks for a oauth token, does a redirect based on the configuration domain and
	     * clientid if necessary, then moves on to #onceWeHaveTheAccessToken(...)
	     *
	     * @param configuration - the raw configuration object
	     */
	    LegacyCloverConnector.prototype.initializeLegacyConnection = function (configuration) {
	        if (configuration.oauthToken) {
	            this.onceWeHaveTheAccessToken(configuration);
	        }
	        else {
	            // We MUST have the domain and clientId, or we are unable to go on.
	            if (configuration.domain && configuration.clientId) {
	                // The following will return the token, or else the page will redirect.
	                configuration.oauthToken = this.getAccessToken(configuration);
	                this.onceWeHaveTheAccessToken(configuration);
	            }
	            else {
	                var errorResponse = new sdk.remotepay.CloverDeviceErrorEvent();
	                errorResponse.setCode(sdk.remotepay.DeviceErrorEventCode.InvalidConfig);
	                errorResponse.setType(sdk.remotepay.ErrorType.EXCEPTION);
	                errorResponse.setMessage("Both 'clientId' and 'domain' are unset.  Cannot initialize.");
	                this.broadcaster.notifyOnDeviceError(errorResponse);
	            }
	        }
	    };
	    /**
	     * Gets the merchantId, redirecting if necessary, then moves on to #getDeviceId(...)
	     *
	     * @param configuration - the raw configuration object
	     */
	    LegacyCloverConnector.prototype.onceWeHaveTheAccessToken = function (configuration) {
	        // If we had the oauth token, but we do not have the merchantId, this will redirect
	        configuration.merchantId = this.getMerchantId(configuration);
	        // We need the deviceId in order to send the notification.
	        if (configuration.deviceId) {
	            this.generateNewConfigurationAndInitialize(configuration);
	        }
	        else {
	            this.getDeviceId(configuration);
	        }
	    };
	    /**
	     * Gets the deviceId, calling the webservice to get the device list if necessary.
	     * If the deviceId is not set, and the deviceSerialId is not set, then this will call
	     * notify of an error. If the deviceId is not set, and the deviceSerialId is set then
	     * the call to get the devices is made the result is used to build a mapping that is
	     * passed to handleDeviceResult.
	     *
	     * @param configuration - the raw configuration object
	     */
	    LegacyCloverConnector.prototype.getDeviceId = function (configuration) {
	        if (configuration.deviceSerialId || configuration.deviceId) {
	            if (configuration.deviceId) {
	                this.generateNewConfigurationAndInitialize(configuration);
	            }
	            else {
	                var devicesEndpoint = Endpoints_1.Endpoints.getDevicesEndpoint(configuration.domain, configuration.merchantId, configuration.oauthToken);
	                this.httpSupport.getData(devicesEndpoint, function (devices) {
	                    this.handleDeviceResult(LegacyCloverConnector.buildMapOfSerialToDevice(devices), configuration);
	                }.bind(this), function (error) {
	                    var errorResponse = new sdk.remotepay.CloverDeviceErrorEvent();
	                    errorResponse.setCode(sdk.remotepay.DeviceErrorEventCode.InvalidConfig);
	                    errorResponse.setType(sdk.remotepay.ErrorType.EXCEPTION);
	                    errorResponse.setMessage(JSON.stringify({ "Error retreiving devices:": error }, null, '\t'));
	                    this.broadcaster.notifyOnDeviceError(errorResponse);
	                }.bind(this));
	            }
	        }
	        else {
	            var errorResponse = new sdk.remotepay.CloverDeviceErrorEvent();
	            errorResponse.setCode(sdk.remotepay.DeviceErrorEventCode.InvalidConfig);
	            errorResponse.setType(sdk.remotepay.ErrorType.EXCEPTION);
	            errorResponse.setMessage("Neither 'deviceId' or 'deviceSerialId' passed, one must be set.  Cannot initialize.");
	            this.broadcaster.notifyOnDeviceError(errorResponse);
	        }
	    };
	    /**
	     * Builds a mapping of the passed set of devices, from the device serial number to the device.
	     *
	     * @param devicesVX
	     * @returns {{}} the mapping from the device serial number to the device
	     */
	    LegacyCloverConnector.buildMapOfSerialToDevice = function (devicesVX) {
	        var devices = null;
	        var deviceBySerial = {};
	        // depending on the version of the call, the devices might be in a slightly different format.
	        // We would need to determine what devices were capable of doing what we want.  This means we
	        // need to know if the device has the websocket connection enabled.  The best way to do this is
	        // to make a different REST call, but we could filter the devices here.
	        if (devicesVX['devices']) {
	            devices = devicesVX.devices;
	        }
	        else if (devicesVX['elements']) {
	            devices = devicesVX.elements;
	        }
	        if (devices) {
	            var i;
	            for (i = 0; i < devices.length; i++) {
	                deviceBySerial[devices[i].serial] = devices[i];
	            }
	        }
	        return deviceBySerial;
	    };
	    /**
	     * Uses the mapping of devices to find the correct deviceId to use in the configuration.
	     * This then moves on to generateNewConfigurationAndInitialize.
	     *
	     * @param devices
	     * @param configuration
	     */
	    LegacyCloverConnector.prototype.handleDeviceResult = function (devices, configuration) {
	        var myDevice = devices[configuration.deviceSerialId];
	        if (null == myDevice) {
	            var errorResponse = new sdk.remotepay.CloverDeviceErrorEvent();
	            errorResponse.setCode(sdk.remotepay.DeviceErrorEventCode.InvalidConfig);
	            errorResponse.setType(sdk.remotepay.ErrorType.EXCEPTION);
	            errorResponse.setMessage("Cannot determine device to use.  " +
	                "Device " + configuration.deviceSerialId + " not in set returned.");
	            this.broadcaster.notifyOnDeviceError(errorResponse);
	        }
	        else {
	            // Stations do not support the kiosk/pay display.
	            // If the user has selected one, then print out a (loud) warning
	            if (myDevice.model == "Clover_C100") {
	                this.logger.warn("Warning - Selected device model (" +
	                    devices[configuration.deviceSerialId].model +
	                    ") does not support pay display." +
	                    "  Will attempt to send notification to device, but no response" +
	                    " should be expected.");
	            }
	            configuration.deviceId = myDevice.id;
	            this.generateNewConfigurationAndInitialize(configuration);
	        }
	    };
	    /**
	     * Get the merchantId or redirect.
	     *
	     * @param configuration
	     * @returns {string|any}
	     */
	    LegacyCloverConnector.prototype.getMerchantId = function (configuration) {
	        if (!configuration.merchantId) {
	            if (!this.urlParamsInfo) {
	                if (configuration.domain && configuration.clientId) {
	                    // We must have the merchant id.  This will make the merchant log in again.
	                    this.getAccessToken(configuration);
	                    var errorResponse = new sdk.remotepay.CloverDeviceErrorEvent();
	                    errorResponse.setCode(sdk.remotepay.DeviceErrorEventCode.InvalidConfig);
	                    errorResponse.setType(sdk.remotepay.ErrorType.EXCEPTION);
	                    errorResponse.setMessage("Neither 'merchantId' or '" +
	                        LegacyCloverConnector.URL_MERCHANT_ID_KEY + "' specified. Cannot initialize.");
	                    this.broadcaster.notifyOnDeviceError(errorResponse);
	                }
	                else {
	                    var errorResponse = new sdk.remotepay.CloverDeviceErrorEvent();
	                    errorResponse.setCode(sdk.remotepay.DeviceErrorEventCode.InvalidConfig);
	                    errorResponse.setType(sdk.remotepay.ErrorType.EXCEPTION);
	                    errorResponse.setMessage("Both 'clientId' and 'domain' are unset.  Cannot initialize.");
	                    this.broadcaster.notifyOnDeviceError(errorResponse);
	                }
	            }
	            else {
	                configuration.merchantId = this.urlParamsInfo[LegacyCloverConnector.URL_MERCHANT_ID_KEY];
	            }
	        }
	        return configuration.merchantId;
	    };
	    /**
	     * Get the access token, either from the configuration or from the window URL, or redirect.
	     *
	     * @param configuration
	     * @returns {null}
	     */
	    LegacyCloverConnector.prototype.getAccessToken = function (configuration) {
	        this.parseWindowURL();
	        var token = null;
	        if (this.urlParamsInfo) {
	            token = this.urlParamsInfo[LegacyCloverConnector.accessTokenKey];
	        }
	        if (token == null) {
	            // There is no token attempt to redirect
	            LegacyCloverConnector.redirect(configuration);
	        }
	        return token;
	    };
	    LegacyCloverConnector.redirect = function (configuration) {
	        var finalRedirect = window.location.href.replace(window.location.hash, '');
	        var oAuthRedirectUrl = Endpoints_1.Endpoints.getOAuthURL(configuration.domain, configuration.clientId, null, finalRedirect);
	        window.location.href = oAuthRedirectUrl;
	    };
	    LegacyCloverConnector.prototype.parseWindowURL = function () {
	        if (!this.urlParamsInfo) {
	            this.parseURL(window.location);
	        }
	    };
	    LegacyCloverConnector.prototype.parseURL = function (windowLocationObject) {
	        this.urlParamsInfo = {};
	        var params = windowLocationObject.hash.split('&');
	        this.parseStuff(params);
	        var params2 = windowLocationObject.search.substr(1).split('&');
	        this.parseStuff(params2);
	    };
	    LegacyCloverConnector.prototype.parseStuff = function (params) {
	        var i = 0;
	        var param = null;
	        while (param = params[i++]) {
	            var multiParam = param.split("=");
	            this.urlParamsInfo[multiParam[0]] = multiParam[1];
	            // Make sure the access_token is mapped with the hash infront,
	            // and without.
	            if (multiParam[0] === LegacyCloverConnector._accessTokenKey) {
	                this.urlParamsInfo[LegacyCloverConnector.accessTokenKey] = multiParam[1];
	            }
	        }
	    };
	    LegacyCloverConnector._accessTokenKey = 'access_token';
	    LegacyCloverConnector.accessTokenKey = '#' + LegacyCloverConnector._accessTokenKey;
	    LegacyCloverConnector.URL_MERCHANT_ID_KEY = "merchant_id";
	    return LegacyCloverConnector;
	}(CloverConnector_1.CloverConnector));
	exports.LegacyCloverConnector = LegacyCloverConnector;

	//# sourceMappingURL=../../../../maps/com/clover/remote/client/CloverConnectorFactory.js.map


/***/ }),
/* 498 */
/***/ (function(module, exports, __webpack_require__) {

	"use strict";
	Object.defineProperty(exports, "__esModule", { value: true });
	exports.CloverDeviceFactory = void 0;
	var Logger_1 = __webpack_require__(48);
	/**
	 * Clover Device Factory
	 *
	 * The clover device factory returns new clover devices.
	 */
	var CloverDeviceFactory = /** @class */ (function () {
	    function CloverDeviceFactory() {
	    }
	    /**
	     * Returns a new clover device based on the configuration
	     *
	     * @param {CloverDeviceConfiguration} configuration
	     * @returns CloverDevice
	     */
	    CloverDeviceFactory.get = function (configuration) {
	        var cloverDeviceType = configuration.getCloverDeviceType();
	        // Try to get the requested clover device.
	        var cloverDevice = null;
	        try {
	            cloverDevice = new cloverDeviceType(configuration);
	        }
	        catch (e) {
	            Logger_1.Logger.create().error(e);
	        }
	        // Return the clover device or null.
	        return cloverDevice;
	    };
	    return CloverDeviceFactory;
	}());
	exports.CloverDeviceFactory = CloverDeviceFactory;

	//# sourceMappingURL=../../../../../maps/com/clover/remote/client/device/CloverDeviceFactory.js.map


/***/ }),
/* 499 */
/***/ (function(module, exports, __webpack_require__) {

	"use strict";
	var __extends = (this && this.__extends) || (function () {
	    var extendStatics = function (d, b) {
	        extendStatics = Object.setPrototypeOf ||
	            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
	            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
	        return extendStatics(d, b);
	    };
	    return function (d, b) {
	        extendStatics(d, b);
	        function __() { this.constructor = d; }
	        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
	    };
	})();
	Object.defineProperty(exports, "__esModule", { value: true });
	exports.DefaultCloverDevice = void 0;
	var sdk = __webpack_require__(35);
	var RemoteMessageParser_1 = __webpack_require__(495);
	var CloverDevice_1 = __webpack_require__(1230);
	var CloverConnector_1 = __webpack_require__(171);
	var Constants_1 = __webpack_require__(503);
	var Logger_1 = __webpack_require__(48);
	var Version_1 = __webpack_require__(493);
	var remote_pay_cloud_api_1 = __webpack_require__(35);
	var VoidPaymentResponseMessage = remote_pay_cloud_api_1.remotemessage.VoidPaymentResponseMessage;
	/**
	 * Default Clover Device
	 *
	 * This is a default implementation of the clover device.
	 */
	var DefaultCloverDevice = /** @class */ (function (_super) {
	    __extends(DefaultCloverDevice, _super);
	    function DefaultCloverDevice(configuration) {
	        var _this = _super.call(this, configuration.getMessagePackageName(), configuration.getCloverTransport(), configuration.getApplicationId()) || this;
	        _this.logger = Logger_1.Logger.create();
	        _this.messageParser = RemoteMessageParser_1.RemoteMessageParser.getDefaultInstance();
	        _this._remoteMessageVersion = DefaultCloverDevice.DEFAULT_REMOTE_MESSAGE_VERSION;
	        _this.msgIdToTask = {};
	        // Timer id for the heartbeat loop.  This state is required so that we can clear the timeout and stop the heartbeat check when we are not connected to the device.
	        _this.heartbeatTimer = null;
	        // Timer id for the heartbeat response.  This state is required so that we do not have more than one ongoing heartbeat request.  The timeout is cleared when a PONG is received,
	        // thus allowing another heartbeat check.
	        _this.heartbeatResponseTimer = null;
	        // Timer id for the reconnect loop.  This state is required so that we can clear the timeout and stop the reconnect loop when we are connected to the device.
	        _this.reconnectTimer = null;
	        // Flag that prevents multiple unresolved reconnect attempts.  Reset in onConnectionAttemptComplete.
	        _this.reconnecting = false;
	        _this.heartbeatIntervalInMillis = null;
	        _this.heartbeatDisconnectTimeoutInMillis = null;
	        _this.cloverDeviceConfiguration = configuration;
	        _this.imageUtil = configuration.getImageUtil();
	        _this.maxMessageSizeInChars = Math.max(1000, configuration.getMaxMessageCharacters());
	        _this.transport.subscribe(_this);
	        _this.transport.setObjectMessageSender(_this);
	        _this.reconnectDelayInMillis = _this.cloverDeviceConfiguration["getReconnectDelay"] ? _this.cloverDeviceConfiguration["getReconnectDelay"]() : -1;
	        _this.heartbeatIntervalInMillis = _this.cloverDeviceConfiguration["getHeartbeatInterval"] ? _this.cloverDeviceConfiguration["getHeartbeatInterval"]() : -1;
	        _this.heartbeatDisconnectTimeoutInMillis = _this.cloverDeviceConfiguration["getHeartbeatDisconnectTimeout"] ? _this.cloverDeviceConfiguration["getHeartbeatDisconnectTimeout"]() : -1;
	        _this.forceConnect = _this.cloverDeviceConfiguration["getForceConnect"] ? _this.cloverDeviceConfiguration["getForceConnect"]() : -1;
	        return _this;
	    }
	    /**
	     * @param transport
	     * @deprecated - see onConnected.
	     */
	    DefaultCloverDevice.prototype.onDeviceConnected = function (transport) {
	        this.onConnected(transport);
	    };
	    /**
	     * We are connected.  What "connected" means depends on the transport mechanism.
	     *
	     * For network (SNPD) this means that we have connected to the Clover device.
	     * For cloud (CPD) this means that we have connected to the cloud proxy.
	     */
	    DefaultCloverDevice.prototype.onConnected = function (transport) {
	        var _this = this;
	        // We must initiate the heartbeat to allow non-direct transports' reconnect logic to work upon.
	        // initial connection.  If the device is not connected to the proxy and we were initiating the heartbeat
	        // in onDeviceReady the heartbeat would never be initiated and the reconnect logic wouldn't work,
	        // resulting in a failure to connect and no retries.  If we don't do this with a delay the initial
	        // connection attempt may not be complete and we may send two discovery requests.
	        setTimeout(function () { return _this.initiateHeartbeat(); }, DefaultCloverDevice.INITIAL_HEARTBEAT_DELAY);
	        this.notifyObserversConnected(transport);
	    };
	    /**
	     * The connection attempt is complete.  Set the reconnecting flag to false so that the reconnect loop can try again (if running).
	     * @param transport
	     */
	    DefaultCloverDevice.prototype.onConnectionAttemptComplete = function (transport) {
	        this.reconnecting = false;
	    };
	    /**
	     * @param transport
	     * @deprecated - see onReady.
	     */
	    DefaultCloverDevice.prototype.onDeviceReady = function (transport) {
	        this.onReady(transport);
	    };
	    /**
	     * We are ready to send messages.  This has different meanings depending on the transport mechanism.
	     *
	     * For network (SNPD) this means that we have connected to and successfully pinged the Clover device.
	     * For cloud (CPD) this means that we have connected to and successfully pinged the cloud proxy.
	     *
	     * This is generally used to indicate that we are clear to initiate the device via a Discovery Request.
	     *
	     * Note: this does not mean the device is ready to take a payment through the SDK, which is solely determined
	     * by the receipt of a Discovery Response (see DefaultCloverDevice.notifyObserversReady).
	     */
	    DefaultCloverDevice.prototype.onReady = function (transport) {
	        this.doDiscoveryRequest();
	    };
	    /**
	     * Executes a device heartbeat check (via PING) when we are connected to the device. If a PING request is not answered
	     * within this.heartbeatResponseTimer disconnect will be called and the SDK will start reconnect attempts.
	     */
	    DefaultCloverDevice.prototype.initiateHeartbeat = function () {
	        var _this = this;
	        if (this.heartbeatIntervalInMillis === -1) {
	            this.logger.info(new Date().toISOString() + " - Device heartbeat checks are disabled, the heartbeatInterval is set to -1.");
	            return;
	        }
	        if (this.heartbeatTimer) {
	            return; // A heartbeatTimer already exists, don't create another.
	        }
	        var performHeartbeat = function () {
	            try {
	                if (!_this.heartbeatResponseTimer) {
	                    _this.logger.info(new Date().toISOString() + " - Executing device heartbeat check ...");
	                    _this.sendPingToDevice();
	                    _this.heartbeatResponseTimer = setTimeout(function () {
	                        var disconnectMessage = "Disconnecting: We have not received a heartbeat response from the device in " + _this.heartbeatDisconnectTimeoutInMillis + " millis.";
	                        _this.logger.warn(new Date().toISOString() + " - " + disconnectMessage);
	                        _this.onDisconnected(_this.transport, disconnectMessage);
	                    }, _this.heartbeatDisconnectTimeoutInMillis);
	                }
	                else {
	                    _this.logger.info(new Date().toISOString() + " - A heartbeat request is already outstanding, this interval will be skipped.");
	                }
	                // Schedule future heartbeats.
	                _this.heartbeatTimer = setTimeout(performHeartbeat, _this.heartbeatIntervalInMillis);
	            }
	            catch (e) {
	                _this.logger.info(new Date().toISOString() + " - Error caught executing device heartbeat checks.  Message: " + e.message + ".");
	            }
	        };
	        // First time in, perform the heartbeat immediately.
	        performHeartbeat();
	    };
	    DefaultCloverDevice.prototype.stopHeartbeat = function () {
	        if (this.heartbeatIntervalInMillis !== -1) {
	            this.logger.info(new Date().toISOString() + " - Stopping device heartbeat checks.");
	            clearTimeout(this.heartbeatTimer);
	            this.heartbeatTimer = null;
	            this.clearHeartbeartResponseTimer();
	        }
	    };
	    DefaultCloverDevice.prototype.clearHeartbeartResponseTimer = function () {
	        clearTimeout(this.heartbeatResponseTimer);
	        this.heartbeatResponseTimer = null;
	    };
	    /**
	     * Executes a device reconnect when we are not connected to the device and reconnect is enabled.
	     *
	     * The reconnect logic has been moved from the websocket transport layer to the device level to support non-direct connection
	     * transports (e.g. cloud).  For non-direct transports the transport layer does not tell the entire truth about the connection
	     * status as it only indicates the SDKs connection to the proxy layer.  In order to accurately determine the connection status
	     * to the device we must rely on the Discovery Response (notifyObserversReady) and a device PING/PONG (see pingDevice).
	     */
	    DefaultCloverDevice.prototype.initiateReconnect = function () {
	        var _this = this;
	        if (this.reconnectDelayInMillis === -1) {
	            this.logger.info(new Date().toISOString() + " - Device reconnection is disabled, the reconnectDelay is set to -1.");
	            return;
	        }
	        if (!this.transport || this.transport.isShutdown()) {
	            return; // The transport is shutdown, the connector has been disposed.
	        }
	        if (this.reconnectTimer) {
	            return; // A reconnectTimer already exists, don't create another.
	        }
	        var performReconnect = function () {
	            try {
	                if (_this.transport && !_this.transport.isShutdown()) {
	                    if (!_this.reconnecting) {
	                        _this.logger.info(new Date().toISOString() + " - Not connected to your Clover device.  Attempting to reconnect now ...");
	                        _this.transport.initialize();
	                        _this.reconnecting = true;
	                    }
	                    else {
	                        _this.logger.debug(new Date().toISOString() + " - A reconnection attempt is already outstanding, this attempt will be skipped.");
	                    }
	                }
	            }
	            catch (e) {
	                _this.logger.error(new Date().toISOString() + " - An exception was caught in the reconnect loop.  Message: " + e.message + ".");
	            }
	            // Schedule future reconnect attempts.
	            _this.reconnectTimer = setTimeout(performReconnect, _this.reconnectDelayInMillis);
	        };
	        // First time in, perform the reconnect attempt immediately.
	        performReconnect();
	    };
	    DefaultCloverDevice.prototype.stopReconnect = function () {
	        if (this.reconnectDelayInMillis !== -1) {
	            this.logger.info(new Date().toISOString() + " - Stopping reconnect loop.");
	            clearTimeout(this.reconnectTimer);
	            this.reconnectTimer = null;
	        }
	    };
	    /**
	     * @param transport - the way to notify is defined by the transport
	     * @param message - the optional message to send
	     * @deprecated - see onDisconnected.
	     */
	    DefaultCloverDevice.prototype.onDeviceDisconnected = function (transport, message) {
	        this.onDisconnected(transport, message);
	    };
	    /**
	     * We are disconnected.  What "disconnected" means depends on the transport mechanism.
	     *
	     * For network (SNPD) this means that we have disconnected from the Clover device.
	     * For cloud (CPD) this means that we have disconnected from the cloud proxy.
	     */
	    DefaultCloverDevice.prototype.onDisconnected = function (transport, message, reconnect) {
	        if (reconnect === void 0) { reconnect = true; }
	        // For CPD if we already have a device connected don't attempt reconnect
	        if (!message || message.indexOf(Constants_1.Constants.device_already_connected) == -1) {
	            this.stopHeartbeat(); // We are offline, kill the heartbeat.
	            this.reconnecting = false;
	            if (reconnect) {
	                this.initiateReconnect();
	            }
	            this.notifyObserversDisconnected(transport, message);
	        }
	    };
	    DefaultCloverDevice.prototype.onDeviceError = function (deviceError) {
	        // A deviceError code of sdk.remotepay.DeviceErrorEventCode.AccessDenied indicates that another
	        // POS is already connected to the Clover Device. In this case we want to disable the reconnect loop.
	        if (deviceError.getCode() && deviceError.getCode() === sdk.remotepay.DeviceErrorEventCode.AccessDenied) {
	            this.stopReconnect();
	        }
	        this.notifyObserversDeviceError(deviceError);
	    };
	    DefaultCloverDevice.prototype.getApplicationId = function () {
	        return this.applicationId;
	    };
	    DefaultCloverDevice.prototype.handleRemoteMessagePING = function () {
	        this.respondToDevicePing();
	    };
	    DefaultCloverDevice.prototype.handleRemoteMessagePONG = function () {
	        this.clearHeartbeartResponseTimer();
	        this.logger.debug("Received pong " + new Date().toISOString());
	    };
	    Object.defineProperty(DefaultCloverDevice.prototype, "remoteMessageVersion", {
	        get: function () {
	            return this._remoteMessageVersion;
	        },
	        /**
	         * Remote Message version is used for high-level feature detection e.g. is chunking supported.
	         * We set the remote version when incoming messages are handled (handleRemoteMessageCOMMAND).
	         * We only want to set _remoteMessageVersion if the inbound message is > than the version already set.
	         *
	         * @param {number} remoteMessageVersion
	         */
	        set: function (remoteMessageVersion) {
	            if (remoteMessageVersion > this._remoteMessageVersion) {
	                this._remoteMessageVersion = remoteMessageVersion;
	            }
	        },
	        enumerable: false,
	        configurable: true
	    });
	    DefaultCloverDevice.prototype.handleRemoteMessageCOMMAND = function (rMessage) {
	        this.remoteMessageVersion = typeof rMessage["getVersion"] === "function" ? rMessage.getVersion() : DefaultCloverDevice.DEFAULT_REMOTE_MESSAGE_VERSION;
	        var method = sdk.remotemessage.Method[rMessage.getMethod()];
	        if (method == null) {
	            this.logger.error('Unsupported method type: ' + rMessage.getMethod());
	        }
	        else {
	            var sdkMessage = this.messageParser.parseMessageFromRemoteMessageObj(rMessage);
	            if (sdkMessage == null) {
	                this.logger.error('Error parsing message: ' + JSON.stringify(rMessage));
	            }
	            switch (method) {
	                case sdk.remotemessage.Method.BREAK:
	                    break;
	                case sdk.remotemessage.Method.CASHBACK_SELECTED:
	                    this.notifyObserversCashbackSelected(sdkMessage);
	                    break;
	                case sdk.remotemessage.Method.ACK:
	                    this.notifyObserverAck(sdkMessage);
	                    break;
	                case sdk.remotemessage.Method.DISCOVERY_RESPONSE:
	                    this.logger.debug('Got a Discovery Response');
	                    this.notifyObserversReady(this.transport, sdkMessage);
	                    break;
	                case sdk.remotemessage.Method.CONFIRM_PAYMENT_MESSAGE:
	                    this.notifyObserversConfirmPayment(sdkMessage);
	                    break;
	                case sdk.remotemessage.Method.FINISH_CANCEL:
	                    this.notifyObserversFinishCancel(sdkMessage);
	                    break;
	                case sdk.remotemessage.Method.FINISH_OK:
	                    this.notifyObserversFinishOk(sdkMessage);
	                    break;
	                case sdk.remotemessage.Method.KEY_PRESS:
	                    this.notifyObserversKeyPressed(sdkMessage);
	                    break;
	                case sdk.remotemessage.Method.ORDER_ACTION_RESPONSE:
	                    break;
	                case sdk.remotemessage.Method.PARTIAL_AUTH:
	                    this.notifyObserversPartialAuth(sdkMessage);
	                    break;
	                case sdk.remotemessage.Method.VOID_PAYMENT_RESPONSE:
	                    this.notifyObserversPaymentVoided(sdkMessage);
	                    break;
	                case sdk.remotemessage.Method.VOID_PAYMENT_REFUND_RESPONSE:
	                    this.notifyObserversPaymentRefundVoided(sdkMessage);
	                    break;
	                case sdk.remotemessage.Method.PAYMENT_VOIDED:
	                    // currently this only gets called during a TX, so falls outside our current process flow
	                    //PaymentVoidedMessage vpMessage = (PaymentVoidedMessage) Message.fromJsonString(rMessage.payload);
	                    //this.notifyObserversPaymentVoided(vpMessage.payment, vpMessage.voidReason, ResultStatus.SUCCESS, null, null);
	                    break;
	                case sdk.remotemessage.Method.TIP_ADDED:
	                    this.notifyObserversTipAdded(sdkMessage);
	                    break;
	                case sdk.remotemessage.Method.TX_START_RESPONSE:
	                    this.notifyObserverTxStart(sdkMessage);
	                    break;
	                case sdk.remotemessage.Method.TX_STATE:
	                    this.notifyObserversTxState(sdkMessage);
	                    break;
	                case sdk.remotemessage.Method.UI_STATE:
	                    this.notifyObserversUiState(sdkMessage);
	                    break;
	                case sdk.remotemessage.Method.VERIFY_SIGNATURE:
	                    this.notifyObserversVerifySignature(sdkMessage);
	                    break;
	                case sdk.remotemessage.Method.REFUND_RESPONSE:
	                    this.notifyObserversPaymentRefundResponse(sdkMessage);
	                    break;
	                case sdk.remotemessage.Method.REFUND_REQUEST:
	                    //Outbound no-op
	                    break;
	                case sdk.remotemessage.Method.TIP_ADJUST_RESPONSE:
	                    this.notifyObserversTipAdjusted(sdkMessage);
	                    break;
	                case sdk.remotemessage.Method.VAULT_CARD_RESPONSE:
	                    this.notifyObserverVaultCardResponse(sdkMessage);
	                    break;
	                case sdk.remotemessage.Method.CAPTURE_PREAUTH_RESPONSE:
	                    this.notifyObserversCapturePreAuth(sdkMessage);
	                    break;
	                case sdk.remotemessage.Method.INCREMENT_PREAUTH_RESPONSE:
	                    this.notifyObserversIncrementPreAuth(sdkMessage);
	                    break;
	                case sdk.remotemessage.Method.CLOSEOUT_RESPONSE:
	                    this.notifyObserversCloseout(sdkMessage);
	                    break;
	                case sdk.remotemessage.Method.RETRIEVE_PENDING_PAYMENTS_RESPONSE:
	                    this.notifyObserversPendingPaymentsResponse(sdkMessage);
	                    break;
	                case sdk.remotemessage.Method.CARD_DATA_RESPONSE:
	                    this.notifyObserversReadCardData(sdkMessage);
	                    break;
	                case sdk.remotemessage.Method.ACTIVITY_MESSAGE_FROM_ACTIVITY:
	                    this.notifyObserverActivityMessage(sdkMessage);
	                    break;
	                case sdk.remotemessage.Method.DISCOVERY_REQUEST:
	                    //Outbound no-op
	                    break;
	                case sdk.remotemessage.Method.ORDER_ACTION_ADD_DISCOUNT:
	                    //Outbound no-op
	                    break;
	                case sdk.remotemessage.Method.ORDER_ACTION_ADD_LINE_ITEM:
	                    //Outbound no-op
	                    break;
	                case sdk.remotemessage.Method.ORDER_ACTION_REMOVE_LINE_ITEM:
	                    //Outbound no-op
	                    break;
	                case sdk.remotemessage.Method.ORDER_ACTION_REMOVE_DISCOUNT:
	                    //Outbound no-op
	                    break;
	                case sdk.remotemessage.Method.PRINT_IMAGE:
	                    //Outbound no-op
	                    break;
	                case sdk.remotemessage.Method.PRINT_TEXT:
	                    //Outbound no-op
	                    break;
	                case sdk.remotemessage.Method.PRINT_CREDIT:
	                    this.notifyObserversPrintCredit(sdkMessage);
	                    break;
	                case sdk.remotemessage.Method.PRINT_CREDIT_DECLINE:
	                    this.notifyObserversPrintCreditDecline(sdkMessage);
	                    break;
	                case sdk.remotemessage.Method.PRINT_PAYMENT:
	                    this.notifyObserversPrintPayment(sdkMessage);
	                    break;
	                case sdk.remotemessage.Method.PRINT_PAYMENT_DECLINE:
	                    this.notifyObserversPrintPaymentDecline(sdkMessage);
	                    break;
	                case sdk.remotemessage.Method.PRINT_PAYMENT_MERCHANT_COPY:
	                    this.notifyObserversPrintMerchantCopy(sdkMessage);
	                    break;
	                case sdk.remotemessage.Method.REFUND_PRINT_PAYMENT:
	                    this.notifyObserversPrintPaymentRefund(sdkMessage);
	                    break;
	                case sdk.remotemessage.Method.ACTIVITY_RESPONSE:
	                    this.notifyObserversActivityResponse(sdkMessage);
	                    break;
	                case sdk.remotemessage.Method.REMOTE_ERROR:
	                    this.notifyObserversRemoteError(sdkMessage);
	                    break;
	                case sdk.remotemessage.Method.RETRIEVE_DEVICE_STATUS_RESPONSE:
	                    this.notifyObserversRetrieveDeviceStatusResponse(sdkMessage);
	                    break;
	                case sdk.remotemessage.Method.RESET_DEVICE_RESPONSE:
	                    this.notifyObserversResetDeviceResponse(sdkMessage);
	                    break;
	                case sdk.remotemessage.Method.RETRIEVE_PAYMENT_RESPONSE:
	                    this.notifyObserversRetrievePaymentResponse(sdkMessage);
	                    break;
	                case sdk.remotemessage.Method.GET_PRINTERS_RESPONSE:
	                    this.notifyObserversRetrievePrintersResponse(sdkMessage);
	                    break;
	                case sdk.remotemessage.Method.PRINT_JOB_STATUS_RESPONSE:
	                    this.notifyObserversPrintJobStatusResponse(sdkMessage);
	                    break;
	                case sdk.remotemessage.Method.CUSTOMER_PROVIDED_DATA_MESSAGE:
	                    this.notifyObserversCustomerProvidedDataMessage(sdkMessage);
	                    break;
	                case sdk.remotemessage.Method.INVALID_STATE_TRANSITION:
	                    this.notifyObserversInvalidStateTransitionResponse(sdkMessage);
	                    break;
	                case sdk.remotemessage.Method.SHOW_RECEIPT_OPTIONS_RESPONSE:
	                    this.notifyObserverDisplayReceiptOptionsResponse(sdkMessage);
	                    break;
	                case sdk.remotemessage.Method.REQUEST_SIGNATURE_RESPONSE:
	                    this.notifyObserverDisplayCollectedSignature(sdkMessage);
	                    break;
	                case sdk.remotemessage.Method.BALANCE_INQUIRY_RESPONSE:
	                    this.notifyObserverBalanceInquiryResponse(sdkMessage);
	                    break;
	                case sdk.remotemessage.Method.REQUEST_TIP_RESPONSE: // this is NOT a tip in a payment flow, but for a stanalone tip request view REQUEST_TIP
	                    this.notifyObserverTipResponse(sdkMessage);
	                    break;
	                case sdk.remotemessage.Method.SHOW_ORDER_SCREEN:
	                    //Outbound no-op
	                    break;
	                case sdk.remotemessage.Method.SHOW_THANK_YOU_SCREEN:
	                    //Outbound no-op
	                    break;
	                case sdk.remotemessage.Method.SHOW_WELCOME_SCREEN:
	                    //Outbound no-op
	                    break;
	                case sdk.remotemessage.Method.SIGNATURE_VERIFIED:
	                    //Outbound no-op
	                    break;
	                case sdk.remotemessage.Method.TERMINAL_MESSAGE:
	                    //Outbound no-op
	                    break;
	                case sdk.remotemessage.Method.TX_START:
	                    //Outbound no-op
	                    break;
	                case sdk.remotemessage.Method.VOID_PAYMENT:
	                    //Outbound no-op
	                    break;
	                case sdk.remotemessage.Method.CAPTURE_PREAUTH:
	                    //Outbound no-op
	                    break;
	                case sdk.remotemessage.Method.LAST_MSG_REQUEST:
	                    //Outbound no-op
	                    break;
	                case sdk.remotemessage.Method.LAST_MSG_RESPONSE:
	                    //Outbound no-op
	                    break;
	                case sdk.remotemessage.Method.TIP_ADJUST:
	                    //Outbound no-op
	                    break;
	                case sdk.remotemessage.Method.OPEN_CASH_DRAWER:
	                    //Outbound no-op
	                    break;
	                case sdk.remotemessage.Method.SHOW_PAYMENT_RECEIPT_OPTIONS:
	                    //Outbound no-op
	                    break;
	                case sdk.remotemessage.Method.VAULT_CARD:
	                    //Outbound no-op
	                    break;
	                case sdk.remotemessage.Method.CLOSEOUT_REQUEST:
	                    //Outbound no-op
	                    break;
	                case sdk.remotemessage.Method.ACTIVITY_REQUEST:
	                    //Outbound no-op
	                    break;
	                case sdk.remotemessage.Method.RETRIEVE_PAYMENT_REQUEST:
	                    //Outbound no-op
	                    break;
	                default:
	                    this.logger.error('COMMAND not supported with method: ' + rMessage.getMethod());
	                    break;
	            }
	        }
	    };
	    DefaultCloverDevice.prototype.handleRemoteMessageQUERY = function (rMessage) {
	        // no-op
	    };
	    DefaultCloverDevice.prototype.handleRemoteMessageEVENT = function (rMessage) {
	        // no-op
	    };
	    DefaultCloverDevice.prototype.handleRemoteMessage = function (rMessage) {
	        try {
	            var msgType = rMessage.getType();
	            if (msgType == sdk.remotemessage.RemoteMessageType.PING) {
	                this.handleRemoteMessagePING();
	            }
	            else if (msgType == sdk.remotemessage.RemoteMessageType.PONG) {
	                this.handleRemoteMessagePONG();
	            }
	            else if (msgType == sdk.remotemessage.RemoteMessageType.COMMAND) {
	                this.handleRemoteMessageCOMMAND(rMessage);
	            }
	            else if (msgType == sdk.remotemessage.RemoteMessageType.QUERY) {
	                this.handleRemoteMessageQUERY(rMessage);
	            }
	            else if (msgType == sdk.remotemessage.RemoteMessageType.EVENT) {
	                this.handleRemoteMessageEVENT(rMessage);
	            }
	            else {
	                this.logger.error('Unsupported message type: ' + rMessage && rMessage["getType"] ? rMessage.getType() : "Message type unavailable" + " message: " + JSON.stringify(rMessage));
	            }
	        }
	        catch (eM) {
	            this.logger.error('Error processing message: ' + rMessage.getPayload(), eM);
	        }
	    };
	    /**
	     * Called when a raw message is received from the device
	     *
	     * @param {string} message - the raw message from the device
	     */
	    DefaultCloverDevice.prototype.onMessage = function (message) {
	        this.logger.debug("DefaultCloverDevice, handling remote message receipt.  Message: " + message + ".");
	        try {
	            // The cloud proxy sends two versions of the force connect message.  The new SDK can't parse and doesn't need to worry about the old one.
	            var isLegacyForceConnect = function (messageIn) {
	                return messageIn.indexOf("method") === -1 && messageIn.indexOf("forceConnect") > -1;
	            };
	            if (isLegacyForceConnect(message)) {
	                this.logger.debug('onMessage: Received a legacy force connect message, dropping.');
	                return;
	            }
	            var rMessage = this.messageParser.parseToRemoteMessage(message);
	            this.handleRemoteMessage(rMessage);
	        }
	        catch (e) {
	            this.logger.error(e);
	        }
	    };
	    /**
	     * Send a PONG response
	     */
	    DefaultCloverDevice.prototype.respondToDevicePing = function () {
	        if (this.transport) {
	            var remoteMessage = new sdk.remotemessage.RemoteMessage();
	            remoteMessage.setType(sdk.remotemessage.RemoteMessageType.PONG);
	            remoteMessage.setPackageName(this.packageName);
	            remoteMessage.setRemoteSourceSDK(DefaultCloverDevice.REMOTE_SDK);
	            remoteMessage.setRemoteApplicationID(this.applicationId);
	            this.sendRemoteMessage(remoteMessage);
	        }
	        else {
	            this.logger.info("Cannot respond to PING, the transport has been shutdown.");
	        }
	    };
	    /**
	     * Send a PING message
	     */
	    DefaultCloverDevice.prototype.sendPingToDevice = function () {
	        if (this.transport) {
	            var remoteMessage = new sdk.remotemessage.RemoteMessage();
	            remoteMessage.setType(sdk.remotemessage.RemoteMessageType.PING);
	            remoteMessage.setPackageName(this.packageName);
	            remoteMessage.setRemoteSourceSDK(DefaultCloverDevice.REMOTE_SDK);
	            remoteMessage.setRemoteApplicationID(this.applicationId);
	            this.sendRemoteMessage(remoteMessage);
	        }
	        else {
	            this.logger.info("Cannot send PING, the transport has been shutdown.");
	        }
	    };
	    /**
	     * Notify the observers that the device is connected
	     *
	     * @param transport
	     */
	    DefaultCloverDevice.prototype.notifyObserversConnected = function (transport) {
	        var _this = this;
	        this.deviceObservers.forEach(function (obs) {
	            obs.onDeviceConnected(_this);
	        });
	    };
	    /**
	     * Notify the observers that the device has disconnected
	     *
	     * @param transport
	     * @param message
	     */
	    DefaultCloverDevice.prototype.notifyObserversDisconnected = function (transport, message) {
	        var _this = this;
	        this.deviceObservers.forEach(function (obs) {
	            obs.onDeviceDisconnected(_this, message);
	        });
	    };
	    /**
	     * Notify the observers that the transport failed.
	     *
	     * @param errorEvent
	     */
	    DefaultCloverDevice.prototype.notifyObserversDeviceError = function (errorEvent) {
	        this.deviceObservers.forEach(function (obs) {
	            obs.onDeviceError(errorEvent);
	        });
	    };
	    /**
	     * Notify the observers that the device is ready
	     *
	     * @param transport
	     * @param drm
	     */
	    DefaultCloverDevice.prototype.notifyObserversReady = function (transport, drm) {
	        var _this = this;
	        if (drm.getReady()) {
	            this.stopReconnect();
	            this.clearHeartbeartResponseTimer();
	            this.initiateHeartbeat();
	        }
	        this.deviceObservers.forEach(function (obs) {
	            obs.onDeviceReady(_this, drm);
	        });
	    };
	    DefaultCloverDevice.prototype.notifyObserverAck = function (ackMessage) {
	        var ackTask = this.msgIdToTask[ackMessage.getSourceMessageId()];
	        if (ackTask) {
	            delete this.msgIdToTask[ackMessage.getSourceMessageId()];
	            ackTask.call(null);
	        }
	        // go ahead and notify listeners of the ACK
	        this.deviceObservers.forEach(function (obs) {
	            obs.onMessageAck(ackMessage.getSourceMessageId());
	        });
	    };
	    DefaultCloverDevice.prototype.notifyObserverActivityMessage = function (activityMessageFromActivity) {
	        this.deviceObservers.forEach(function (obs) {
	            obs.onMessageFromActivity(activityMessageFromActivity.getAction(), activityMessageFromActivity.getPayload());
	        });
	    };
	    DefaultCloverDevice.prototype.notifyObserversActivityResponse = function (activityResponseMessage) {
	        this.deviceObservers.forEach(function (obs) {
	            var status = activityResponseMessage.getResultCode() == -1 ?
	                sdk.remotemessage.ResultStatus.SUCCESS :
	                sdk.remotemessage.ResultStatus.CANCEL;
	            obs.onActivityResponse(status, activityResponseMessage.getPayload(), activityResponseMessage.getFailReason(), activityResponseMessage.getAction());
	        });
	    };
	    DefaultCloverDevice.prototype.notifyObserversReadCardData = function (cardDataResponseMessage) {
	        this.deviceObservers.forEach(function (obs) {
	            obs.onReadCardResponse(cardDataResponseMessage.getStatus(), cardDataResponseMessage.getReason(), cardDataResponseMessage.getCardData());
	        });
	    };
	    DefaultCloverDevice.prototype.notifyObserversRetrieveDeviceStatusResponse = function (retrieveDeviceStatusResponseMessage) {
	        this.deviceObservers.forEach(function (obs) {
	            obs.onDeviceStatusResponse(retrieveDeviceStatusResponseMessage);
	        });
	    };
	    DefaultCloverDevice.prototype.notifyObserversRetrievePaymentResponse = function (retrievePaymentResponseMessage) {
	        this.deviceObservers.forEach(function (obs) {
	            obs.onRetrievePaymentResponse(retrievePaymentResponseMessage);
	        });
	    };
	    DefaultCloverDevice.prototype.notifyObserversRetrievePrintersResponse = function (getPrintersResponseMessage) {
	        this.deviceObservers.forEach(function (obs) {
	            obs.onRetrievePrintersResponse(sdk.remotepay.ResponseCode.SUCCESS, getPrintersResponseMessage.getPrinters());
	        });
	    };
	    DefaultCloverDevice.prototype.notifyObserversPrintJobStatusResponse = function (printJobStatusResponseMessage) {
	        this.deviceObservers.forEach(function (obs) {
	            obs.onPrintJobStatusResponse(sdk.remotepay.ResponseCode.SUCCESS, printJobStatusResponseMessage.getExternalPrintJobId(), printJobStatusResponseMessage.getStatus());
	        });
	    };
	    DefaultCloverDevice.prototype.notifyObserversCustomerProvidedDataMessage = function (customerProvidedDataMessage) {
	        this.deviceObservers.forEach(function (obs) {
	            obs.onCustomerProvidedDataMessage(sdk.remotepay.ResponseCode.SUCCESS, customerProvidedDataMessage.getEventId(), customerProvidedDataMessage.getConfig(), customerProvidedDataMessage.getData());
	        });
	    };
	    DefaultCloverDevice.prototype.notifyObserversPrintCredit = function (creditPrintMessage) {
	        this.deviceObservers.forEach(function (obs) {
	            obs.onPrintCredit(creditPrintMessage.getCredit());
	        });
	    };
	    DefaultCloverDevice.prototype.notifyObserversPrintCreditDecline = function (declineCreditPrintMessage) {
	        this.deviceObservers.forEach(function (obs) {
	            obs.onPrintCreditDecline(declineCreditPrintMessage.getCredit(), declineCreditPrintMessage.getReason());
	        });
	    };
	    DefaultCloverDevice.prototype.notifyObserversPrintPayment = function (paymentPrintMessage) {
	        this.deviceObservers.forEach(function (obs) {
	            obs.onPrintPayment(paymentPrintMessage.getPayment(), paymentPrintMessage.getOrder());
	        });
	    };
	    DefaultCloverDevice.prototype.notifyObserversPrintPaymentDecline = function (declinePaymentPrintMessage) {
	        this.deviceObservers.forEach(function (obs) {
	            obs.onPrintPaymentDecline(declinePaymentPrintMessage.getPayment(), declinePaymentPrintMessage.getReason());
	        });
	    };
	    DefaultCloverDevice.prototype.notifyObserversPrintMerchantCopy = function (paymentPrintMerchantCopyMessage) {
	        this.deviceObservers.forEach(function (obs) {
	            obs.onPrintMerchantReceipt(paymentPrintMerchantCopyMessage.getPayment());
	        });
	    };
	    DefaultCloverDevice.prototype.notifyObserversPrintPaymentRefund = function (refundPaymentPrintMessage) {
	        this.deviceObservers.forEach(function (obs) {
	            obs.onPrintRefundPayment(refundPaymentPrintMessage.getPayment(), refundPaymentPrintMessage.getOrder(), refundPaymentPrintMessage.getRefund());
	        });
	    };
	    DefaultCloverDevice.prototype.notifyObserversResetDeviceResponse = function (resetDeviceResponseMessage) {
	        this.deviceObservers.forEach(function (obs) {
	            obs.onResetDeviceResponse(sdk.remotepay.ResponseCode.SUCCESS, resetDeviceResponseMessage.getReason(), resetDeviceResponseMessage.getState());
	        });
	    };
	    DefaultCloverDevice.prototype.notifyObserversRemoteError = function (remoteError) {
	        this.deviceObservers.forEach(function (obs) {
	            // todo:  Add remote error
	            var deviceErrorEvent = new sdk.remotepay.CloverDeviceErrorEvent();
	            deviceErrorEvent.setCode(sdk.remotepay.DeviceErrorEventCode.UnknownError);
	            deviceErrorEvent.setMessage(JSON.stringify(remoteError));
	            deviceErrorEvent.setType(sdk.remotepay.ErrorType.EXCEPTION);
	            obs.onDeviceError(deviceErrorEvent);
	        });
	    };
	    DefaultCloverDevice.prototype.notifyObserversPaymentRefundResponse = function (refundResponseMessage) {
	        this.deviceObservers.forEach(function (obs) {
	            obs.onPaymentRefundResponse(refundResponseMessage);
	        });
	    };
	    DefaultCloverDevice.prototype.notifyObserversPrintMessage = function (refundPaymentPrintMessage) {
	        this.deviceObservers.forEach(function (obs) {
	            obs.onPrintRefundPayment(refundPaymentPrintMessage.getPayment(), refundPaymentPrintMessage.getOrder(), refundPaymentPrintMessage.getRefund());
	        });
	    };
	    DefaultCloverDevice.prototype.notifyObserversKeyPressed = function (keyPress) {
	        this.deviceObservers.forEach(function (obs) {
	            obs.onKeyPressed(keyPress.getKeyPress());
	        });
	    };
	    DefaultCloverDevice.prototype.notifyObserversCashbackSelected = function (cashbackSelectedMessage) {
	        this.deviceObservers.forEach(function (obs) {
	            obs.onCashbackSelected(cashbackSelectedMessage.getCashbackAmount());
	        });
	    };
	    DefaultCloverDevice.prototype.notifyObserversTipAdded = function (tipAddedMessage) {
	        this.deviceObservers.forEach(function (obs) {
	            obs.onTipAdded(tipAddedMessage.getTipAmount());
	        });
	    };
	    DefaultCloverDevice.prototype.notifyObserverTxStart = function (txStartResponseMessage) {
	        this.deviceObservers.forEach(function (obs) {
	            obs.onTxStartResponse(txStartResponseMessage);
	        });
	    };
	    DefaultCloverDevice.prototype.notifyObserversTipAdjusted = function (tipAdjustResponseMessage) {
	        this.deviceObservers.forEach(function (obs) {
	            obs.onAuthTipAdjusted(tipAdjustResponseMessage);
	        });
	    };
	    DefaultCloverDevice.prototype.notifyObserversPartialAuth = function (partialAuthMessage) {
	        this.deviceObservers.forEach(function (obs) {
	            obs.onPartialAuth(partialAuthMessage.getPartialAuthAmount());
	        });
	    };
	    DefaultCloverDevice.prototype.notifyObserversPaymentVoided = function (voidPaymentResponseMessage) {
	        this.deviceObservers.forEach(function (obs) {
	            obs.onPaymentVoided(voidPaymentResponseMessage);
	        });
	    };
	    DefaultCloverDevice.prototype.notifyObserversPaymentRefundVoided = function (voidPaymentRefundResponseMessage) {
	        this.deviceObservers.forEach(function (obs) {
	            obs.onPaymentRefundVoidResponse(voidPaymentRefundResponseMessage);
	        });
	    };
	    DefaultCloverDevice.prototype.notifyObserversVerifySignature = function (verifySignatureMessage) {
	        this.deviceObservers.forEach(function (obs) {
	            obs.onVerifySignature(verifySignatureMessage.getPayment(), verifySignatureMessage.getSignature());
	        });
	    };
	    DefaultCloverDevice.prototype.notifyObserversConfirmPayment = function (confirmPaymentMessage) {
	        this.deviceObservers.forEach(function (obs) {
	            obs.onConfirmPayment(confirmPaymentMessage.getPayment(), confirmPaymentMessage.getChallenges());
	        });
	    };
	    DefaultCloverDevice.prototype.notifyObserverVaultCardResponse = function (vaultCardResponseMessage) {
	        this.deviceObservers.forEach(function (obs) {
	            obs.onVaultCardResponse(vaultCardResponseMessage);
	        });
	    };
	    DefaultCloverDevice.prototype.notifyObserversUiState = function (uiStateMsg) {
	        this.deviceObservers.forEach(function (obs) {
	            obs.onUiState(uiStateMsg.getUiState(), uiStateMsg.getUiText(), uiStateMsg.getUiDirection(), uiStateMsg.getInputOptions());
	        });
	    };
	    DefaultCloverDevice.prototype.notifyObserversCapturePreAuth = function (capturePreAuthResponseMessage) {
	        this.deviceObservers.forEach(function (obs) {
	            obs.onCapturePreAuth(capturePreAuthResponseMessage);
	        });
	    };
	    DefaultCloverDevice.prototype.notifyObserversIncrementPreAuth = function (incrementPreAuthResponseMessage) {
	        this.deviceObservers.forEach(function (obs) {
	            obs.onIncrementPreAuthResponse(incrementPreAuthResponseMessage);
	        });
	    };
	    DefaultCloverDevice.prototype.notifyObserversCloseout = function (closeoutResponseMessage) {
	        this.deviceObservers.forEach(function (obs) {
	            obs.onCloseoutResponse(closeoutResponseMessage.getStatus(), closeoutResponseMessage.getReason(), closeoutResponseMessage.getBatch());
	        });
	    };
	    DefaultCloverDevice.prototype.notifyObserversPendingPaymentsResponse = function (retrievePendingPaymentsResponseMessage) {
	        this.deviceObservers.forEach(function (obs) {
	            obs.onPendingPaymentsResponse(retrievePendingPaymentsResponseMessage.getStatus() == sdk.remotemessage.ResultStatus.SUCCESS, retrievePendingPaymentsResponseMessage.getPendingPaymentEntries());
	        });
	    };
	    DefaultCloverDevice.prototype.notifyObserversTxState = function (txStateMsg) {
	        this.deviceObservers.forEach(function (obs) {
	            obs.onTxState(txStateMsg.getTxState());
	        });
	    };
	    DefaultCloverDevice.prototype.notifyObserversFinishCancel = function (finishCancelMessage) {
	        this.deviceObservers.forEach(function (obs) {
	            obs.onFinishCancel(finishCancelMessage.getRequestInfo());
	        });
	    };
	    DefaultCloverDevice.prototype.notifyObserversFinishOk = function (finishOkMessage) {
	        this.deviceObservers.forEach(function (obs) {
	            if (finishOkMessage.getPayment()) {
	                obs.onFinishOk(finishOkMessage.getPayment(), finishOkMessage.getSignature(), finishOkMessage.getRequestInfo());
	            }
	            else if (finishOkMessage.getCredit()) {
	                obs.onFinishOk(finishOkMessage.getCredit());
	            }
	            else if (finishOkMessage.getRefund()) {
	                obs.onFinishOk(finishOkMessage.getRefund());
	            }
	        });
	    };
	    DefaultCloverDevice.prototype.notifyObserverDisplayCollectedSignature = function (msg) {
	        this.deviceObservers.forEach(function (obs) {
	            obs.onSignatureCollected(msg);
	        });
	    };
	    DefaultCloverDevice.prototype.notifyObserverBalanceInquiryResponse = function (msg) {
	        this.deviceObservers.forEach(function (obs) {
	            obs.onBalanceInquiryResponse(msg);
	        });
	    };
	    DefaultCloverDevice.prototype.notifyObserverTipResponse = function (msg) {
	        this.deviceObservers.forEach(function (obs) {
	            obs.onRequestTipResponse(msg);
	        });
	    };
	    DefaultCloverDevice.prototype.notifyObserversInvalidStateTransitionResponse = function (invalidStateTransitionMessage) {
	        this.deviceObservers.forEach(function (obs) {
	            obs.onInvalidStateTransitionResponse(sdk.remotemessage.ResultStatus.CANCEL, invalidStateTransitionMessage.getReason(), invalidStateTransitionMessage.getRequestedTransition(), invalidStateTransitionMessage.getState(), invalidStateTransitionMessage.getData());
	        });
	    };
	    DefaultCloverDevice.prototype.notifyObserverDisplayReceiptOptionsResponse = function (showReceiptOptionsResponseMessage) {
	        this.deviceObservers.forEach(function (obs) {
	            obs.onDisplayReceiptOptionsResponse(showReceiptOptionsResponseMessage.getStatus(), showReceiptOptionsResponseMessage.getReason());
	        });
	    };
	    /**
	     * Show Payment Receipt Screen
	     *
	     * @param {string} orderId
	     * @param {string} paymentId
	     */
	    DefaultCloverDevice.prototype.doShowPaymentReceiptScreen = function (orderId, paymentId) {
	        var showPaymentReceiptOptionsMessage = new sdk.remotemessage.ShowPaymentReceiptOptionsMessage();
	        showPaymentReceiptOptionsMessage.setOrderId(orderId);
	        showPaymentReceiptOptionsMessage.setPaymentId(paymentId);
	        showPaymentReceiptOptionsMessage.setVersion(2);
	        this.sendObjectMessage(showPaymentReceiptOptionsMessage);
	    };
	    DefaultCloverDevice.prototype.doShowReceiptScreen = function (orderId, paymentId, refundId, creditId, disablePrinting) {
	        var showReceiptOptionsMessage = new sdk.remotemessage.ShowReceiptOptionsMessage();
	        showReceiptOptionsMessage.setOrderId(orderId);
	        showReceiptOptionsMessage.setPaymentId(paymentId);
	        showReceiptOptionsMessage.setRefundId(refundId);
	        showReceiptOptionsMessage.setCreditId(creditId);
	        showReceiptOptionsMessage.setDisableCloverPrinting(disablePrinting);
	        this.sendObjectMessage(showReceiptOptionsMessage);
	    };
	    /**
	     * Key Press
	     *
	     * @param {sdk.remotemessage.KeyPress} keyPress
	     */
	    DefaultCloverDevice.prototype.doKeyPress = function (keyPress) {
	        var message = new sdk.remotemessage.KeyPressMessage();
	        message.setKeyPress(keyPress);
	        this.sendObjectMessage(message);
	    };
	    /**
	     * Show Thank You Screen
	     */
	    DefaultCloverDevice.prototype.doShowThankYouScreen = function () {
	        var message = new sdk.remotemessage.ThankYouMessage();
	        this.sendObjectMessage(message);
	    };
	    /**
	     * Show Welcome Screen
	     */
	    DefaultCloverDevice.prototype.doShowWelcomeScreen = function () {
	        var message = new sdk.remotemessage.WelcomeMessage();
	        this.sendObjectMessage(message);
	    };
	    /**
	     * Signature Verified
	     *
	     * @param {sdk.payments.Payment} payment
	     * @param {boolean} verified
	     */
	    DefaultCloverDevice.prototype.doSignatureVerified = function (payment, verified) {
	        var message = new sdk.remotemessage.SignatureVerifiedMessage();
	        message.setPayment(payment);
	        message.setVerified(verified);
	        this.sendObjectMessage(message);
	    };
	    /**
	     * Retrieve Pending Payments
	     */
	    DefaultCloverDevice.prototype.doRetrievePendingPayments = function () {
	        var message = new sdk.remotemessage.RetrievePendingPaymentsMessage();
	        this.sendObjectMessage(message);
	    };
	    /**
	     * Terminal Message
	     *
	     * @param {string} text
	     */
	    DefaultCloverDevice.prototype.doTerminalMessage = function (text) {
	        var message = new sdk.remotemessage.TerminalMessage();
	        message.setText(text);
	        this.sendObjectMessage(message);
	    };
	    /**
	     * Sends request to the clover device to send the log to the clover server
	     *
	     * @param message The message to display
	     */
	    DefaultCloverDevice.prototype.doSendDebugLog = function (message) {
	        var deviceLogMessage = new sdk.remotemessage.CloverDeviceLogMessage();
	        deviceLogMessage.setMessage(message);
	        this.sendObjectMessage(deviceLogMessage);
	    };
	    /**
	     * Open Cash Drawer
	     *
	     * @param {string} reason
	     * @param {string} deviceId (optional)
	     */
	    DefaultCloverDevice.prototype.doOpenCashDrawer = function (reason, deviceId) {
	        var message = new sdk.remotemessage.OpenCashDrawerMessage();
	        message.setReason(reason);
	        if (deviceId) {
	            var ptr = new sdk.printer.Printer();
	            ptr.setId(deviceId);
	            message.setPrinter(ptr);
	        }
	        this.sendObjectMessage(message);
	    };
	    /**
	     * Closeout
	     *
	     * @param {boolean} allowOpenTabs
	     * @param {string} batchId
	     */
	    DefaultCloverDevice.prototype.doCloseout = function (allowOpenTabs, batchId) {
	        var message = new sdk.remotemessage.CloseoutRequestMessage();
	        message.setAllowOpenTabs(allowOpenTabs);
	        message.setBatchId(batchId);
	        this.sendObjectMessage(message);
	    };
	    /**
	     * Transaction Start
	     *
	     * @param {sdk.remotemessage.PayIntent} payIntent
	     * @param {sdk.remotemessage.Order} order
	     * @param {string} requestInfo - request type.
	     */
	    DefaultCloverDevice.prototype.doTxStart = function (payIntent, order, requestInfo) {
	        var message = new sdk.remotemessage.TxStartRequestMessage();
	        message.setPayIntent(payIntent);
	        message.setOrder(order);
	        message.setRequestInfo(requestInfo);
	        message.setVersion(2);
	        this.sendObjectMessage(message);
	    };
	    /**
	     * Tip Adjust Auth
	     *
	     * @param {string} orderId
	     * @param {string} paymentId
	     * @param {number} amount
	     */
	    DefaultCloverDevice.prototype.doTipAdjustAuth = function (orderId, paymentId, amount) {
	        var message = new sdk.remotemessage.TipAdjustMessage();
	        message.setOrderId(orderId);
	        message.setPaymentId(paymentId);
	        message.setTipAmount(amount);
	        this.sendObjectMessage(message);
	    };
	    /**
	     * Read Cart Data
	     *
	     * @param {PayIntent} payIntent
	     */
	    DefaultCloverDevice.prototype.doReadCardData = function (payIntent) {
	        var message = new sdk.remotemessage.CardDataRequestMessage();
	        message.setPayIntent(payIntent);
	        this.sendObjectMessage(message);
	    };
	    /**
	     * Send a message to a running custom activity
	     *
	     * @param {string} actionId - the id used when the custom action was started
	     * @param {string} payload - the message content, unrestricted format
	     */
	    DefaultCloverDevice.prototype.doSendMessageToActivity = function (actionId, payload) {
	        var message = new sdk.remotemessage.ActivityMessageToActivity();
	        message.setAction(actionId);
	        message.setPayload(payload);
	        this.sendObjectMessage(message);
	    };
	    /**
	     * Print Text
	     *
	     * @param {Array<string>} textLines
	     * @param printRequestId - an optional id that will be used for the printjob.  This id will be used in notification calls about the status of the job.
	     * @param printDeviceId - the printer id to use when printing.  If left unset the default is used
	     */
	    DefaultCloverDevice.prototype.doPrintText = function (textLines, printRequestId, printDeviceId) {
	        var message = new sdk.remotemessage.TextPrintMessage();
	        message.setTextLines(textLines);
	        if (printRequestId) {
	            message.setExternalPrintJobId(printRequestId);
	        }
	        if (printDeviceId) {
	            var ptr = new sdk.printer.Printer();
	            ptr.setId(printDeviceId);
	            message.setPrinter(ptr);
	        }
	        this.sendObjectMessage(message);
	    };
	    /**
	     * Print Image (Bitmap)
	     *
	     * @param bitmap
	     * @param printRequestId
	     * @param printDeviceId
	     */
	    DefaultCloverDevice.prototype.doPrintImageObject = function (bitmap, printRequestId, printDeviceId) {
	        var _this = this;
	        var message = new sdk.remotemessage.ImagePrintMessage();
	        // bitmap - HTMLImageElement
	        this.imageUtil.getBase64Image(bitmap, function (imageString) {
	            message.setPng(imageString);
	            if (printRequestId) {
	                message.setExternalPrintJobId(printRequestId);
	            }
	            if (printDeviceId) {
	                var ptr = new sdk.printer.Printer();
	                ptr.setId(printDeviceId);
	                message.setPrinter(ptr);
	            }
	            if (_this.isFragmentationSupported()) {
	                // We need to be putting this in the attachment instead of the payload (for the remoteMessage)
	                var base64Png = message.getPng();
	                message.setPng(null);
	                _this.sendObjectMessage(message, base64Png, DefaultCloverDevice.BASE64);
	            }
	            else {
	                _this.sendObjectMessage(message);
	            }
	        });
	    };
	    /**
	     * Printing images from a url from the device is problematic.
	     * See - https://jira.dev.clover.com/browse/SEMI-1352
	     * and - https://jira.dev.clover.com/browse/SEMI-1377
	     *
	     * Instead of relying on the device, we can retrieve the image from the URL
	     * and call doPrintImageObject instead of doPrintImageUrl. The doPrintImageObject
	     * method is more robust (can handle large images via chunking, etc.).
	     *
	     * @param {string} url
	     * @param {string} printRequestId
	     * @param {string} printDeviceId
	     */
	    DefaultCloverDevice.prototype.doPrintImageUrl = function (url, printRequestId, printDeviceId) {
	        var _this = this;
	        this.imageUtil.loadImageFromURL(url, function (image) {
	            _this.doPrintImageObject(image, printRequestId, printDeviceId);
	        }, function (errorMessage) {
	            var deviceErrorEvent = new sdk.remotepay.CloverDeviceErrorEvent();
	            deviceErrorEvent.setCode(sdk.remotepay.DeviceErrorEventCode.UnknownError);
	            deviceErrorEvent.setMessage(errorMessage);
	            deviceErrorEvent.setType(sdk.remotepay.ErrorType.EXCEPTION);
	            _this.notifyObserversDeviceError(deviceErrorEvent);
	        });
	    };
	    DefaultCloverDevice.prototype.doStartActivity = function (action, payload, nonBlocking) {
	        var request = new sdk.remotemessage.ActivityRequest();
	        request.setAction(action);
	        request.setPayload(payload);
	        request.setNonBlocking(nonBlocking);
	        request.setForceLaunch(false);
	        this.sendObjectMessage(request);
	    };
	    /**
	     * Void Payment
	     *
	     * @param {sdk.payments.Payment} payment
	     * @param {sdk.order.VoidReason} voidReason
	     * @param {boolean} disablePrinting
	     * @param {boolean} disableReceiptSelection
	     */
	    DefaultCloverDevice.prototype.doVoidPayment = function (payment, voidReason, disablePrinting, disableReceiptSelection) {
	        var _this = this;
	        var message = new sdk.remotemessage.VoidPaymentMessage();
	        message.setPayment(payment);
	        message.setVoidReason(voidReason);
	        message.setDisableCloverPrinting(disablePrinting);
	        message.setDisableReceiptSelection(disableReceiptSelection);
	        if (this.getSupportsVoidPaymentResponse()) {
	            message.setVersion(3);
	        }
	        var remoteMessage = this.buildRemoteMessageToSend(message);
	        var msgId = remoteMessage.getId();
	        // remote-pay will send the void payment response.
	        if (this.getSupportsVoidPaymentResponse()) {
	            this.sendRemoteMessage(remoteMessage);
	        }
	        else {
	            var vprm_1 = new VoidPaymentResponseMessage();
	            vprm_1.setPayment(payment);
	            vprm_1.setVoidReason(voidReason);
	            // remote-pay will not-send the void payment response, we will send it here.  Because we don't know the real status
	            // of voids the best we can do is to set the status to success.
	            vprm_1.setStatus(sdk.remotemessage.ResultStatus.SUCCESS);
	            if (!this.getSupportsAck()) {
	                this.sendRemoteMessage(remoteMessage);
	                this.notifyObserversPaymentVoided(vprm_1);
	            }
	            else {
	                // we will send back response after we get an ack
	                this.addTaskForAck(msgId, function () {
	                    _this.notifyObserversPaymentVoided(vprm_1);
	                });
	                this.sendRemoteMessage(remoteMessage);
	            }
	        }
	    };
	    DefaultCloverDevice.prototype.addTaskForAck = function (msgId, task) {
	        this.msgIdToTask[msgId] = task;
	    };
	    /**
	     * Payment Refund
	     *
	     * @param {string} orderId
	     * @param {string} paymentId
	     * @param {number} amount
	     * @param {boolean} fullRefund
	     * @param {boolean} disablePrinting
	     * @param {boolean} disableReceiptSelection
	     */
	    DefaultCloverDevice.prototype.doPaymentRefund = function (orderId, paymentId, amount, fullRefund, disablePrinting, disableReceiptSelection) {
	        var message = new sdk.remotemessage.RefundRequestMessage();
	        message.setOrderId(orderId);
	        message.setPaymentId(paymentId);
	        message.setAmount(amount);
	        message.setFullRefund(fullRefund);
	        message.setDisableCloverPrinting(disablePrinting);
	        message.setDisableReceiptSelection(disableReceiptSelection);
	        message.setVersion(2);
	        this.sendObjectMessage(message);
	    };
	    /**
	     * Void Payment Refund
	     *
	     * @param {string} orderId
	     * @param {string} refundId
	     * @param {boolean} disablePrinting
	     * @param {boolean} disableReceiptSelection
	     */
	    DefaultCloverDevice.prototype.doVoidPaymentRefund = function (orderId, refundId, disablePrinting, disableReceiptSelection) {
	        var message = new sdk.remotemessage.VoidPaymentRefundMessage();
	        message.setOrderId(orderId);
	        message.setRefundId(refundId);
	        message.setDisableCloverPrinting(disablePrinting);
	        message.setDisableReceiptSelection(disableReceiptSelection);
	        message.setVersion(2);
	        this.sendObjectMessage(message);
	    };
	    /**
	     * Payment Refund
	     *
	     * @param {RefundPaymentRequest} request
	     */
	    DefaultCloverDevice.prototype.doPaymentRefundByRequest = function (request) {
	        var message = new sdk.remotemessage.RefundRequestMessage();
	        message.setOrderId(request.getOrderId());
	        message.setPaymentId(request.getPaymentId());
	        message.setAmount(request.getAmount());
	        message.setFullRefund(request.getFullRefund());
	        message.setDisableCloverPrinting(request.getDisablePrinting());
	        message.setDisableReceiptSelection(request.getDisableReceiptSelection());
	        message.setVersion(2);
	        this.sendObjectMessage(message);
	    };
	    /**
	     * Vault Card
	     *
	     * @param {number} cardEntryMethods
	     */
	    DefaultCloverDevice.prototype.doVaultCard = function (cardEntryMethods) {
	        var message = new sdk.remotemessage.VaultCardMessage();
	        message.setCardEntryMethods(cardEntryMethods);
	        this.sendObjectMessage(message);
	    };
	    /**
	     * Capture Auth
	     *
	     * @param {string} paymentId
	     * @param {number} amount
	     * @param {number} tipAmount
	     */
	    DefaultCloverDevice.prototype.doCaptureAuth = function (paymentId, amount, tipAmount) {
	        var message = new sdk.remotemessage.CapturePreAuthMessage();
	        message.setVersion(1);
	        message.setPaymentId(paymentId);
	        message.setAmount(amount);
	        message.setTipAmount(tipAmount);
	        this.sendObjectMessage(message);
	    };
	    /**
	     * Capture Auth
	     *
	     * @param {string} paymentId
	     * @param {number} amount
	     * @param {number} amount
	     */
	    DefaultCloverDevice.prototype.doIncrementPreAuth = function (paymentId, amount) {
	        var message = new sdk.remotemessage.IncrementPreAuthMessage();
	        message.setVersion(1);
	        message.setPaymentId(paymentId);
	        message.setAmount(amount);
	        this.sendObjectMessage(message);
	    };
	    /**
	     * Accept Payment
	     *
	     * @param {Payment} payment
	     */
	    DefaultCloverDevice.prototype.doAcceptPayment = function (payment) {
	        var message = new sdk.remotemessage.PaymentConfirmedMessage();
	        message.setPayment(payment);
	        this.sendObjectMessage(message);
	    };
	    /**
	     * Reject Payment
	     *
	     * @param {Payment} payment
	     * @param {Challenge} challenge
	     */
	    DefaultCloverDevice.prototype.doRejectPayment = function (payment, challenge) {
	        var message = new sdk.remotemessage.PaymentRejectedMessage();
	        message.setPayment(payment);
	        message.setReason(challenge.getReason());
	        this.sendObjectMessage(message);
	    };
	    /**
	     * Discovery request
	     */
	    DefaultCloverDevice.prototype.doDiscoveryRequest = function () {
	        var drm = new sdk.remotemessage.DiscoveryRequestMessage();
	        drm.setSupportsOrderModification(false);
	        this.sendObjectMessage(drm);
	    };
	    /**
	     * Order Update
	     *
	     * @param {DisplayOrder} order
	     * @param {any} orderOperation
	     */
	    DefaultCloverDevice.prototype.doOrderUpdate = function (order, orderOperation) {
	        var message = new sdk.remotemessage.OrderUpdateMessage();
	        message.setOrder(order);
	        if (orderOperation) {
	            if (orderOperation instanceof sdk.order.operation.DiscountsAddedOperation) {
	                message.setDiscountsAddedOperation(orderOperation);
	            }
	            else if (orderOperation instanceof sdk.order.operation.DiscountsDeletedOperation) {
	                message.setDiscountsDeletedOperation(orderOperation);
	            }
	            else if (orderOperation instanceof sdk.order.operation.LineItemsAddedOperation) {
	                message.setLineItemsAddedOperation(orderOperation);
	            }
	            else if (orderOperation instanceof sdk.order.operation.LineItemsDeletedOperation) {
	                message.setLineItemsDeletedOperation(orderOperation);
	            }
	            else if (orderOperation instanceof sdk.order.operation.OrderDeletedOperation) {
	                message.setOrderDeletedOperation(orderOperation);
	            }
	        }
	        this.sendObjectMessage(message);
	    };
	    /**
	     * Reset Device
	     */
	    DefaultCloverDevice.prototype.doResetDevice = function () {
	        var message = new sdk.remotemessage.BreakMessage();
	        this.sendObjectMessage(message);
	    };
	    DefaultCloverDevice.prototype.doRetrieveDeviceStatus = function (request) {
	        var message = new sdk.remotemessage.RetrieveDeviceStatusRequestMessage();
	        message.setSendLastMessage(request.getSendLastMessage());
	        this.sendObjectMessage(message);
	    };
	    DefaultCloverDevice.prototype.doRetrievePayment = function (externalPaymentId) {
	        var message = new sdk.remotemessage.RetrievePaymentRequestMessage();
	        message.setExternalPaymentId(externalPaymentId);
	        this.sendObjectMessage(message);
	    };
	    DefaultCloverDevice.prototype.doRetrievePrinters = function (category) {
	        var message = new sdk.remotemessage.GetPrintersRequestMessage();
	        if (category) {
	            message.setCategory(category);
	        }
	        this.sendObjectMessage(message);
	    };
	    DefaultCloverDevice.prototype.doRetrievePrintJobStatus = function (printRequestId) {
	        var message = new sdk.remotemessage.PrintJobStatusRequestMessage();
	        message.setExternalPrintJobId(printRequestId);
	        this.sendObjectMessage(message);
	    };
	    /**
	     * Loyalty
	     */
	    DefaultCloverDevice.prototype.doRegisterForCustomerProvidedData = function (configurations) {
	        var message = new sdk.remotemessage.RegisterForCustomerProvidedDataMessage();
	        message.setConfigurations(configurations);
	        this.sendObjectMessage(message);
	    };
	    DefaultCloverDevice.prototype.doSetCustomerInfo = function (customerInfo) {
	        var message = new sdk.remotemessage.CustomerInfoMessage();
	        message.setCustomer(customerInfo);
	        this.sendObjectMessage(message);
	    };
	    DefaultCloverDevice.prototype.doCheckBalance = function (cardEntryMethods) {
	        var balanceInquiryRequestMessage = new sdk.remotemessage.BalanceInquiryRequestMessage();
	        balanceInquiryRequestMessage.setCardEntryMethods(cardEntryMethods);
	        this.sendObjectMessage(balanceInquiryRequestMessage);
	    };
	    DefaultCloverDevice.prototype.doCollectSignature = function (acknowledge) {
	        var signatureRequestMessage = new sdk.remotemessage.SignatureRequestMessage();
	        signatureRequestMessage.setAcknowledgementMessage(acknowledge);
	        this.sendObjectMessage(signatureRequestMessage);
	    };
	    DefaultCloverDevice.prototype.doRequestTip = function (tippableAmount, suggestions) {
	        var requestTipRequestMessage = new sdk.remotemessage.RequestTipRequestMessage();
	        requestTipRequestMessage.setTipSuggestions(suggestions);
	        requestTipRequestMessage.setTippableAmount(tippableAmount);
	        this.sendObjectMessage(requestTipRequestMessage);
	    };
	    /**
	     * Dispose
	     */
	    DefaultCloverDevice.prototype.dispose = function () {
	        this.deviceObservers.splice(0, this.deviceObservers.length);
	        if (this.transport) {
	            this.transport.dispose();
	            this.transport = null;
	        }
	        this.stopReconnect(); // must be done after we dispose so the transport is shutdown.
	        this.stopHeartbeat();
	    };
	    DefaultCloverDevice.prototype.sendObjectMessage = function (remoteMessage, attachment, attachmentEncoding) {
	        return this.buildRemoteMessages(remoteMessage, attachment, attachmentEncoding); // this now sends the messages and returns the ID
	    };
	    DefaultCloverDevice.prototype.buildBaseRemoteMessage = function (remoteMessage) {
	        // Make sure the message is not null
	        if (remoteMessage == null) {
	            this.logger.debug('Message is null');
	            return null;
	        }
	        // Check the message method
	        if (remoteMessage.getMethod() == null) {
	            this.logger.error('Invalid Message', new Error('Invalid Message: ' + remoteMessage.toString()));
	            return null;
	        }
	        // Check the application id
	        if (this.applicationId == null) {
	            this.logger.error('Invalid ApplicationID: ' + this.applicationId);
	            throw new Error('Invalid applicationId');
	        }
	        var messageId = (++DefaultCloverDevice.id) + '';
	        remoteMessage.setMessageId(messageId);
	        var remoteMessageToReturn = new sdk.remotemessage.RemoteMessage();
	        remoteMessageToReturn.setId(messageId);
	        remoteMessageToReturn.setType(sdk.remotemessage.RemoteMessageType.COMMAND);
	        remoteMessageToReturn.setPackageName(this.packageName);
	        remoteMessageToReturn.setMethod(remoteMessage.getMethod());
	        remoteMessageToReturn.setVersion(this.remoteMessageVersion);
	        remoteMessageToReturn.setRemoteSourceSDK(DefaultCloverDevice.REMOTE_SDK);
	        remoteMessageToReturn.setRemoteApplicationID(this.applicationId);
	        return remoteMessageToReturn;
	    };
	    /**
	     * Special serialization handling
	     * The top level elements should not have the "elements" wrapper on collections (arrays).
	     * sdk.remotemessage.Message instances are the only ones this needs to happen for.  This
	     * is the result of the manner in which the serialization/deserialization happens in the
	     * Android code.  The top level objects are not (de)serialized by a
	     * com.clover.sdk.GenericClient#extractListOther
	     * (in the Clover common repo).  The GenericClient is the tool that adds the elements
	     * wrapper.  The top level objects are (de)serialized by themselves
	     * com.clover.remote.message.Message#fromJsonString
	     */
	    DefaultCloverDevice.prototype.addSuppressElementsWrapper = function (message) {
	        for (var fieldKey in message) {
	            // Make sure the message has property and is defined so we can set the `suppressElementsWrapper` flag
	            if (message.hasOwnProperty(fieldKey) && message[fieldKey]) {
	                var metaInfo = message ? message.getMetaInfo(fieldKey) : null;
	                if (metaInfo && (metaInfo.type == Array)) {
	                    message[fieldKey].suppressElementsWrapper = true;
	                }
	            }
	        }
	        return message;
	    };
	    DefaultCloverDevice.prototype.buildRemoteMessageToSend = function (message) {
	        var remoteMessage = this.buildBaseRemoteMessage(message);
	        message = this.addSuppressElementsWrapper(message);
	        remoteMessage.setPayload(JSON.stringify(message, DefaultCloverDevice.stringifyClover));
	        return remoteMessage;
	    };
	    DefaultCloverDevice.prototype.buildRemoteMessages = function (message, attachment, attachmentEncoding) {
	        var remoteMessage = this.buildBaseRemoteMessage(message);
	        message = this.addSuppressElementsWrapper(message);
	        if (attachmentEncoding) {
	            remoteMessage.setAttachmentEncoding(attachmentEncoding);
	        }
	        var messagePayload = JSON.stringify(message, DefaultCloverDevice.stringifyClover);
	        if (this.isFragmentationSupported()) {
	            var payloadTooLarge = (messagePayload ? messagePayload.length : 0) > this.maxMessageSizeInChars;
	            if (payloadTooLarge || attachment) { // need to fragment
	                if (attachment && attachment.length > CloverConnector_1.CloverConnector.MAX_PAYLOAD_SIZE) {
	                    this.logger.error('Error sending message - payload size is greater than the maximum allowed.');
	                    return null;
	                }
	                var fragmentIndex = 0;
	                // fragmenting loop for payload
	                while (messagePayload.length > 0) {
	                    remoteMessage.setLastFragment(false);
	                    if (messagePayload.length <= this.maxMessageSizeInChars) {
	                        remoteMessage.setPayload(messagePayload);
	                        messagePayload = "";
	                        // If the attachment is null at this point, then this is the last fragment
	                        remoteMessage.setLastFragment(attachment == null);
	                    }
	                    else {
	                        remoteMessage.setPayload(messagePayload.substr(0, this.maxMessageSizeInChars));
	                        messagePayload = messagePayload.substr(this.maxMessageSizeInChars);
	                    }
	                    remoteMessage.setFragmentIndex(fragmentIndex++);
	                    this.sendRemoteMessage(remoteMessage);
	                } //end fragment payload loop
	                remoteMessage.setPayload(null);
	                if (attachment) {
	                    //fragmenting loop for attachment
	                    if (attachmentEncoding == DefaultCloverDevice.BASE64) {
	                        remoteMessage.setAttachmentEncoding(DefaultCloverDevice.BASE64_ATTACHMENT);
	                        while (attachment.length > 0) {
	                            remoteMessage.setLastFragment(false);
	                            if (attachment.length <= this.maxMessageSizeInChars) {
	                                remoteMessage.setAttachment(attachment);
	                                attachment = "";
	                                remoteMessage.setLastFragment(true);
	                            }
	                            else {
	                                remoteMessage.setAttachment(attachment.substr(0, this.maxMessageSizeInChars));
	                                attachment = attachment.substr(this.maxMessageSizeInChars);
	                            }
	                            remoteMessage.setFragmentIndex(fragmentIndex++);
	                            this.sendRemoteMessage(remoteMessage);
	                        } //end fragment attachment loop
	                    }
	                    else {
	                        // We got an attachment, but no encoding, complain.
	                        this.logger.error('Attachment on message, but no encoding specified.  No idea how to send it.');
	                        // TODO:  Probably a good idea to throw here, but then we need to handle that in the top level.  Leave for later.
	                    }
	                }
	            }
	            else { // no need to fragment
	                if (messagePayload.length > this.maxMessageSizeInChars) {
	                    this.logger.warn("The message payload is larger than the maxMessageSizeInChars but fragmentation is not supported by the apps installed on the device.  This may result in a payload that is too large to handle and a silent failure.");
	                }
	                remoteMessage.setPayload(messagePayload);
	                if (attachment) {
	                    remoteMessage.setAttachment(attachment);
	                }
	                this.sendRemoteMessage(remoteMessage);
	            }
	        }
	        else {
	            // fragmenting is not possible, just send as is
	            remoteMessage.setPayload(messagePayload);
	            this.sendRemoteMessage(remoteMessage);
	        }
	        return remoteMessage.getId();
	    };
	    DefaultCloverDevice.stringifyClover = function (key, value) {
	        // If the element is an array, and it does NOT have the suppressElementsWrapper property,
	        // and the key is NOT "elements", then add the elements wrapper object
	        if (Array.isArray(value) &&
	            !value.hasOwnProperty("suppressElementsWrapper") &&
	            (key != "elements")) {
	            //converts array into the format that clover devices expect
	            //from) foo : []
	            //to) foo : {elements : []}
	            return { elements: value };
	        }
	        return value;
	    };
	    DefaultCloverDevice.prototype.sendRemoteMessage = function (remoteMessage) {
	        var message = JSON.stringify(remoteMessage);
	        if (this.transport) {
	            this.logger.debug("Sending: " + message);
	            this.transport.sendMessage(message);
	        }
	        else {
	            this.logger.error("Cannot send message, transport is null: " + message);
	        }
	    };
	    /**
	     * If the remote message version is 2, fragmentation is supported.
	     *
	     * @returns {boolean}
	     */
	    DefaultCloverDevice.prototype.isFragmentationSupported = function () {
	        return this.remoteMessageVersion > 1;
	    };
	    // Remote message version and message version are not the same.  Remote message version is used for high-level
	    // feature detection - e.g. is message fragmentation supported or not?
	    DefaultCloverDevice.DEFAULT_REMOTE_MESSAGE_VERSION = 1;
	    DefaultCloverDevice.REMOTE_SDK = Version_1.Version.CLOVER_CLOUD_SDK + ":" + Version_1.Version.CLOVER_CLOUD_SDK_VERSION;
	    DefaultCloverDevice.BASE64 = "BASE64";
	    DefaultCloverDevice.BASE64_ATTACHMENT = DefaultCloverDevice.BASE64 + ".ATTACHMENT";
	    DefaultCloverDevice.id = 0;
	    DefaultCloverDevice.INITIAL_HEARTBEAT_DELAY = 15000; // millis
	    return DefaultCloverDevice;
	}(CloverDevice_1.CloverDevice));
	exports.DefaultCloverDevice = DefaultCloverDevice;

	//# sourceMappingURL=../../../../../maps/com/clover/remote/client/device/DefaultCloverDevice.js.map


/***/ }),
/* 500 */
/***/ (function(module, exports, __webpack_require__) {

	"use strict";
	var __extends = (this && this.__extends) || (function () {
	    var extendStatics = function (d, b) {
	        extendStatics = Object.setPrototypeOf ||
	            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
	            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
	        return extendStatics(d, b);
	    };
	    return function (d, b) {
	        extendStatics(d, b);
	        function __() { this.constructor = d; }
	        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
	    };
	})();
	Object.defineProperty(exports, "__esModule", { value: true });
	exports.WebSocketPairedCloverDeviceConfigurationBuilder = exports.WebSocketPairedCloverDeviceConfiguration = void 0;
	var WebSocketPairedCloverTransport_1 = __webpack_require__(1236);
	var WebSocketCloverDeviceConfiguration_1 = __webpack_require__(275);
	var ImageUtil_1 = __webpack_require__(172);
	var BrowserWebSocketImpl_1 = __webpack_require__(173);
	/**
	 * This is the base class that is used when connecting directly to a device via the "Network Pay Display".
	 *
	 * A pairing scheme is used when connecting, so the function callbacks for when a pairing code is received,
	 * and when the pairing completes must be implemented here.
	 */
	var WebSocketPairedCloverDeviceConfiguration = /** @class */ (function (_super) {
	    __extends(WebSocketPairedCloverDeviceConfiguration, _super);
	    /**
	     *
	     * @param {string} endpoint - the endpoint of the Clover device. e.g. wss://192.168.1.15:12345/remote_pay
	     * @param {string} applicationId - the applicationId that uniquely identifies the POS. e.g. com.company.MyPOS:2.3.1
	     * @param {string} posName - Displayed during pairing to display the POS name on the Mini. e.g. MyPOS
	     * @param {string} serialNumber - Displayed during pairing to display the device identifier. e.g. 'Aisle 3' or 'POS-35153234'
	     * @param {string} authToken - The authToken retrieved from a previous pairing activity, passed as an argument to onPairingSuccess. This will be null for the first connection.
	     * @param onPairingCode - Function that will be called when a pairing code is sent.  Typically, this would be displayed to the user, and
	     * they would enter this code into the device screen.
	     * @param onPairingSuccess - Function that willbe called when the pairing process is complete, a authentication token is sent that be reused.
	     * @param {Object} webSocketFactoryFunction - the function that will return an instance of the CloverWebSocketInterface
	     *    that will be used when connecting.
	     * @param {IImageUtil} imageUtil - utility to translate images into base64 strings.
	     * @param {number} heartbeatInterval - Frequency at which we will ping the device - millis. Defaults to 5000 (millis), minimum value is 2500 millis. To disable the PING set to -1.
	     * @param {number} reconnectDelay - upon disconnect, duration to wait until a reconnect is attempted - millis. Defaults to 3000 (millis), minimum value is 3000 millis. To disable the reconnect set to -1.
	     * @param {number} heartbeatDisconnectTimeout - If a response to a heartbeat ping is not received within this time we will call disconnect.  Defaults to 3000 (millis).
	     */
	    function WebSocketPairedCloverDeviceConfiguration(endpoint, applicationId, posName, serialNumber, authToken, onPairingCode, onPairingSuccess, webSocketFactoryFunction, imageUtil, heartbeatInterval, reconnectDelay, heartbeatDisconnectTimeout) {
	        var _this = _super.call(this, applicationId, webSocketFactoryFunction, imageUtil, heartbeatInterval, reconnectDelay) || this;
	        _this.uri = null;
	        _this.uri = endpoint;
	        _this.posName = posName;
	        _this.serialNumber = serialNumber;
	        _this.authToken = authToken;
	        _this.webSocketImplClass = webSocketFactoryFunction;
	        _this.onPairingCodeHandler = onPairingCode;
	        _this.onPairingSuccessHandler = onPairingSuccess;
	        return _this;
	    }
	    WebSocketPairedCloverDeviceConfiguration.prototype.getMessagePackageName = function () {
	        return 'com.clover.remote_protocol_broadcast.app';
	    };
	    WebSocketPairedCloverDeviceConfiguration.prototype.getName = function () {
	        return 'Clover Secure WebSocket Connector';
	    };
	    WebSocketPairedCloverDeviceConfiguration.prototype.getCloverTransport = function () {
	        // this is where we determine more about the transport...
	        // The connection is paired:
	        var transport = new WebSocketPairedCloverTransport_1.WebSocketPairedCloverTransport(this.uri, this.getReconnectDelay(), this.posName, this.serialNumber, this.authToken, this.webSocketImplClass);
	        transport.setPairingDeviceConfiguration(this);
	        return transport;
	    };
	    WebSocketPairedCloverDeviceConfiguration.prototype.setAuthToken = function (authToken) {
	        this.authToken = authToken;
	    };
	    WebSocketPairedCloverDeviceConfiguration.prototype.onPairingCode = function (pairingCode) {
	        this.onPairingCodeHandler(pairingCode);
	    };
	    WebSocketPairedCloverDeviceConfiguration.prototype.onPairingSuccess = function (authToken) {
	        this.onPairingSuccessHandler(authToken);
	    };
	    return WebSocketPairedCloverDeviceConfiguration;
	}(WebSocketCloverDeviceConfiguration_1.WebSocketCloverDeviceConfiguration));
	exports.WebSocketPairedCloverDeviceConfiguration = WebSocketPairedCloverDeviceConfiguration;
	var WebSocketPairedCloverDeviceConfigurationBuilder = /** @class */ (function () {
	    /**
	     * @param {string} applicationId - the applicationId that uniquely identifies the POS. e.g. com.company.MyPOS:2.3.1
	     * @param {string} uri - the endpoint of the Clover device. e.g. wss://192.168.1.15:12345/remote_pay
	     * @param {string} posName - Displayed during pairing to display the POS name on the Mini. e.g. MyPOS
	     * @param {string} serialNumber - Displayed during pairing to display the device identifier. e.g. 'Aisle 3' or 'POS-35153234'
	     * @param {string} authToken - The authToken retrieved from a previous pairing activity, passed as an argument to onPairingSuccess. This will be null for the first connection
	     * @param onPairingCode - Function that will be called when a pairing code is sent.  Typically, this would be displayed to the user, and
	     * they would enter this code into the device screen.
	     * @param onPairingSuccess - Function that will be called when the pairing process is complete, a authentication token is sent that be reused.
	     */
	    function WebSocketPairedCloverDeviceConfigurationBuilder(applicationId, uri, posName, serialNumber, authToken, onPairingCode, onPairingSuccess) {
	        this.uri = null;
	        this.applicationId = applicationId;
	        this.uri = uri;
	        this.posName = posName;
	        this.serialNumber = serialNumber;
	        this.authToken = authToken;
	        this.imageUtil = new ImageUtil_1.ImageUtil();
	        this.webSocketFactoryFunction = BrowserWebSocketImpl_1.BrowserWebSocketImpl.createInstance;
	        this.onPairingCodeHandler = onPairingCode;
	        this.onPairingSuccessHandler = onPairingSuccess;
	    }
	    WebSocketPairedCloverDeviceConfigurationBuilder.prototype.getApplicationId = function () {
	        return this.applicationId;
	    };
	    WebSocketPairedCloverDeviceConfigurationBuilder.prototype.getUri = function () {
	        return this.uri;
	    };
	    WebSocketPairedCloverDeviceConfigurationBuilder.prototype.getSerialNumber = function () {
	        return this.serialNumber;
	    };
	    WebSocketPairedCloverDeviceConfigurationBuilder.prototype.getAuthToken = function () {
	        return this.authToken;
	    };
	    WebSocketPairedCloverDeviceConfigurationBuilder.prototype.getWebSocketFactoryFunction = function () {
	        return this.webSocketFactoryFunction;
	    };
	    WebSocketPairedCloverDeviceConfigurationBuilder.prototype.setWebSocketFactoryFunction = function (value) {
	        this.webSocketFactoryFunction = value;
	        return this;
	    };
	    WebSocketPairedCloverDeviceConfigurationBuilder.prototype.getImageUtil = function () {
	        return this.imageUtil;
	    };
	    WebSocketPairedCloverDeviceConfigurationBuilder.prototype.setImageUtil = function (value) {
	        this.imageUtil = value;
	        return this;
	    };
	    WebSocketPairedCloverDeviceConfigurationBuilder.prototype.getPosName = function () {
	        return this.posName;
	    };
	    WebSocketPairedCloverDeviceConfigurationBuilder.prototype.setPosName = function (value) {
	        this.posName = value;
	        return this;
	    };
	    WebSocketPairedCloverDeviceConfigurationBuilder.prototype.getHeartbeatInterval = function () {
	        return this.heartbeatInterval;
	    };
	    WebSocketPairedCloverDeviceConfigurationBuilder.prototype.setHeartbeatInterval = function (value) {
	        this.heartbeatInterval = value;
	        return this;
	    };
	    WebSocketPairedCloverDeviceConfigurationBuilder.prototype.getHeartbeatDisconnectTimeout = function () {
	        return this.heartbeatDisconnectTimeout;
	    };
	    WebSocketPairedCloverDeviceConfigurationBuilder.prototype.setHeartbeatDisconnectTimeout = function (value) {
	        this.heartbeatDisconnectTimeout = value;
	        return this;
	    };
	    WebSocketPairedCloverDeviceConfigurationBuilder.prototype.getReconnectDelay = function () {
	        return this.reconnectDelay;
	    };
	    WebSocketPairedCloverDeviceConfigurationBuilder.prototype.setReconnectDelay = function (value) {
	        this.reconnectDelay = value;
	        return this;
	    };
	    WebSocketPairedCloverDeviceConfigurationBuilder.prototype.build = function () {
	        return new WebSocketPairedCloverDeviceConfiguration(this.uri, this.applicationId, this.posName, this.serialNumber, this.authToken, this.onPairingCodeHandler, this.onPairingSuccessHandler, this.webSocketFactoryFunction, this.imageUtil, this.heartbeatInterval, this.reconnectDelay, this.heartbeatDisconnectTimeout);
	    };
	    return WebSocketPairedCloverDeviceConfigurationBuilder;
	}());
	exports.WebSocketPairedCloverDeviceConfigurationBuilder = WebSocketPairedCloverDeviceConfigurationBuilder;

	//# sourceMappingURL=../../../../../maps/com/clover/remote/client/device/WebSocketPairedCloverDeviceConfiguration.js.map


/***/ }),
/* 501 */
/***/ (function(module, exports) {

	"use strict";
	Object.defineProperty(exports, "__esModule", { value: true });
	exports.CloverTransport = void 0;
	/**
	 * Clover Transport
	 *
	 * The clover transport facilitates notification distribution
	 * from the device to a list of observers.
	 */
	var CloverTransport = /** @class */ (function () {
	    function CloverTransport() {
	        // List of observers to notify
	        this.observers = [];
	        // Flag to determine if the device is ready
	        this.ready = false;
	    }
	    /**
	     * @deprecated - see notifyConnected.
	     */
	    CloverTransport.prototype.notifyDeviceConnected = function () {
	        this.notifyConnected();
	    };
	    /**
	     * Notify observers that we are connected.  What "connected" means depends on the transport mechanism.
	     *
	     * For network (SNPD) this means that we have connected to the Clover device.
	     * For cloud (CPD) this means that we have connected to the cloud proxy.
	     */
	    CloverTransport.prototype.notifyConnected = function () {
	        var _this = this;
	        this.observers.forEach(function (obs) {
	            obs.onConnected(_this);
	        });
	    };
	    /**
	     * @deprecated - see notifyReady.
	     */
	    CloverTransport.prototype.notifyDeviceReady = function () {
	        this.notifyReady();
	    };
	    /**
	     * Notify observers that we are ready to send messages.  This has different meanings depending on the transport mechanism.
	     *
	     * For network (SNPD) this means that we have connected to and successfully pinged the Clover device.
	     * For cloud (CPD) this means that we have connected to and successfully pinged the cloud proxy.
	     *
	     * This is generally used to indicate that we are clear to initiate the device via a Discovery Request.
	     *
	     * Note: this does not mean the device is ready to take a payment through the SDK, which is solely determined
	     * by the receipt of a Discovery Response (see DefaultCloverDevice.notifyObserversReady).
	     */
	    CloverTransport.prototype.notifyReady = function () {
	        var _this = this;
	        this.ready = true;
	        this.observers.forEach(function (obs) {
	            obs.onReady(_this);
	        });
	    };
	    /**
	     * @deprecated - see notifyDisconnected.
	     */
	    CloverTransport.prototype.notifyDeviceDisconnected = function () {
	        this.notifyDisconnected();
	    };
	    /**
	     * Notify observers that we are disconnected.  What "disconnected" means depends on the transport mechanism.
	     *
	     * For network (SNPD) this means that we have disconnected from the Clover device.
	     * For cloud (CPD) this means that we have disconnected from the cloud proxy.
	     */
	    CloverTransport.prototype.notifyDisconnected = function () {
	        var _this = this;
	        this.ready = false;
	        this.observers.forEach(function (obs) {
	            obs.onDisconnected(_this);
	        });
	    };
	    CloverTransport.prototype.notifyConnectionAttemptComplete = function () {
	        var _this = this;
	        this.observers.forEach(function (obs) {
	            obs.onConnectionAttemptComplete(_this);
	        });
	    };
	    /**
	     * Should be called by subclasses (_super.onMessage) when a message is received
	     * in order to forward to all observers
	     *
	     * @param {string} message - The message we received
	     */
	    CloverTransport.prototype.onMessage = function (message) {
	        this.observers.forEach(function (obs) {
	            obs.onMessage(message);
	        });
	    };
	    /**
	     * Add new observer to receive notifications from the device
	     *
	     * @param {CloverTransportObserver} observer - the observer to notify
	     */
	    CloverTransport.prototype.subscribe = function (observer) {
	        var _this = this;
	        if (this.ready) {
	            this.observers.forEach(function (obs) {
	                obs.onReady(_this);
	            });
	        }
	        this.observers.push(observer);
	    };
	    /**
	     * Remove an observer from the list of observers
	     *
	     * @param {CloverTransportObserver} observer - the observer to remove
	     */
	    CloverTransport.prototype.unsubscribe = function (observer) {
	        var indexOfObserver = this.observers.indexOf(observer);
	        if (indexOfObserver !== -1) {
	            this.observers.splice(indexOfObserver, 1);
	        }
	    };
	    /**
	     * Clear the observers list
	     */
	    CloverTransport.prototype.clearListeners = function () {
	        this.observers.splice(0, this.observers.length);
	    };
	    CloverTransport.prototype.setObjectMessageSender = function (objectMessageSender) {
	        this.objectMessageSender = objectMessageSender;
	    };
	    return CloverTransport;
	}());
	exports.CloverTransport = CloverTransport;

	//# sourceMappingURL=../../../../../maps/com/clover/remote/client/transport/CloverTransport.js.map


/***/ }),
/* 502 */
/***/ (function(module, exports) {

	"use strict";
	Object.defineProperty(exports, "__esModule", { value: true });
	exports.DebugConfig = void 0;
	/**
	 * A simple central location for debugging configurations.
	 */
	var DebugConfig = /** @class */ (function () {
	    function DebugConfig() {
	    }
	    DebugConfig.loggingEnabled = false;
	    return DebugConfig;
	}());
	exports.DebugConfig = DebugConfig;

	//# sourceMappingURL=../../../../../maps/com/clover/remote/client/util/DebugConfig.js.map


/***/ }),
/* 503 */
/***/ (function(module, exports) {

	"use strict";
	Object.defineProperty(exports, "__esModule", { value: true });
	exports.Constants = void 0;
	var Constants = /** @class */ (function () {
	    function Constants() {
	    }
	    Constants.device_already_connected = "Device is already connected to";
	    return Constants;
	}());
	exports.Constants = Constants;

	//# sourceMappingURL=../../../maps/com/clover/util/Constants.js.map


/***/ }),
/* 504 */
/***/ (function(module, exports) {

	"use strict";
	Object.defineProperty(exports, "__esModule", { value: true });
	exports.Endpoints = void 0;
	/**
	 * Utility to centralize endpoints.
	 *
	 * This simplifies building urls to contact services.  If there is a need to add
	 * a call to a service on the server, it should be added here.
	 *
	 */
	var Endpoints = /** @class */ (function () {
	    function Endpoints() {
	    }
	    /**
	     * Builds the OAuth url to get an OAuth token.
	     *
	     * @param {string} domain - the clover server.  EX: https://www.clover.com, http://localhost:9000
	     * @param {string} clientId - the clover application uuid
	     * @param {string} [merchantId] - the clover merchant id
	     * @param {string} [redirectUri] - the url to redirect to after authentication
	     * @returns {string}
	     */
	    Endpoints.getOAuthURL = function (domain, clientId, merchantId, redirectUri) {
	        var variables = {};
	        variables[Endpoints.DOMAIN_KEY] = domain;
	        variables[Endpoints.OAUTH_CLIENT_ID_KEY] = clientId;
	        var oauthEndpointPath = Endpoints.DOMAIN_PATH + Endpoints.OAUTH_PATH + Endpoints.OAUTH_CLIENT_ID_SUFFIX;
	        if (merchantId) {
	            variables[Endpoints.OAUTH_MERCHANT_ID_KEY] = merchantId;
	            oauthEndpointPath += Endpoints.OAUTH_MERCHANT_ID_SUFFIX;
	        }
	        if (redirectUri) {
	            variables[Endpoints.OAUTH_REDIRECT_URI_KEY] = encodeURIComponent(redirectUri);
	            oauthEndpointPath += Endpoints.OAUTH_REDIRECT_URI_SUFFIX;
	        }
	        return Endpoints.setVariables(oauthEndpointPath, variables);
	    };
	    /**
	     * The endpoint used to connect to a websocket on the server that will proxy to a device.  Used by
	     * remote-pay cloud connectors.
	     *
	     * @param {any} notificationResponse - The notification response from COS.
	     * @param {string} friendlyId - an id used to identify the POS.
	     * @param {boolean} forceConnect - if true, then the attempt will overtake any existing connection
	     * @param {boolean} merchantId - unique identifier for the merchant.
	     * @returns {string} The endpoint used to connect to a websocket on the server that will proxy to a device
	     */
	    Endpoints.getDeviceWebSocketEndpoint = function (notificationResponse, friendlyId, forceConnect, merchantId) {
	        var variables = {};
	        // This is not an access token its a device id.
	        variables[Endpoints.WEBSOCKET_TOKEN_KEY] = notificationResponse.token;
	        variables[Endpoints.DOMAIN_KEY] = notificationResponse.host;
	        variables[Endpoints.WEBSOCKET_FRIENDLY_ID_KEY] = encodeURIComponent(friendlyId);
	        variables[Endpoints.WEBSOCKET_FORCE_CONNECT_KEY] = forceConnect;
	        var deviceWebSocketEndpointPath = Endpoints.DOMAIN_PATH + Endpoints.WEBSOCKET_PATH +
	            Endpoints.WEBSOCKET_TOKEN_SUFFIX +
	            Endpoints.WEBSOCKET_FRIENDLY_ID_SUFFIX +
	            Endpoints.WEBSOCKET_FORCE_CONNECT_SUFFIX;
	        if (notificationResponse.serverIdentifier) {
	            deviceWebSocketEndpointPath += "&" + Endpoints.CLOUD_SERVER_IDENTIFIER_KEY + "=" + notificationResponse.serverIdentifier;
	        }
	        return Endpoints.setVariables(deviceWebSocketEndpointPath, variables);
	    };
	    /**
	     * The endpoint used to obtain a merchant
	     *
	     * @param {string} domain - the clover server.  EX: https://www.clover.com, http://localhost:9000
	     * @param {string} merchantId - the id of the merchant to use when getting the merchant.
	     * @returns {string} endpoint - the url to use to retrieve the merchant
	     */
	    Endpoints.getMerchantEndpoint = function (domain, merchantId) {
	        var variables = {};
	        variables[Endpoints.MERCHANT_V3_KEY] = merchantId;
	        variables[Endpoints.DOMAIN_KEY] = domain;
	        var merchantEndpointPath = Endpoints.DOMAIN_PATH + Endpoints.MERCHANT_V3_PATH;
	        return Endpoints.setVariables(merchantEndpointPath, variables);
	    };
	    /**
	     * The endpoint used to obtain a list of devices
	     *
	     * @param {string} domain - the clover server.  EX: https://www.clover.com, http://localhost:9000
	     * @param {string} merchantId - the id of the merchant to use when getting the merchant.
	     * @param {string} accessToken - the OAuth token used when accessing the server
	     *
	     * @returns {string}
	     */
	    Endpoints.getDevicesEndpoint = function (domain, merchantId, accessToken) {
	        var variables = {};
	        variables[Endpoints.MERCHANT_V3_KEY] = merchantId;
	        variables[Endpoints.DOMAIN_KEY] = domain;
	        var devicesEndpointPath = Endpoints.DOMAIN_PATH + Endpoints.DEVICE_PATH;
	        return Endpoints.setVariables(devicesEndpointPath, variables);
	    };
	    /**
	     * Builds the endpoint to send the message to the server to let the device know we want to talk to it.
	     * @param {string} domain - the clover server.  EX: https://www.clover.com, http://localhost:9000
	     * @param {string} merchantId - the id of the merchant to use when getting the merchant.
	     * @param {string} accessToken - the OAuth token used when accessing the server
	     * @returns {string} endpoint - the url to use alert a device that we want to communicate with it
	     */
	    Endpoints.getAlertDeviceEndpoint = function (domain, merchantId) {
	        var variables = {};
	        variables[Endpoints.MERCHANT_V3_KEY] = merchantId;
	        variables[Endpoints.DOMAIN_KEY] = domain;
	        var alertDeviceEndpointPath = Endpoints.DOMAIN_PATH + Endpoints.REMOTE_PAY_PATH;
	        return Endpoints.setVariables(alertDeviceEndpointPath, variables);
	    };
	    Endpoints.parseQueryString = function (queryString) {
	        var queryStringStartIndex = queryString.indexOf("?");
	        queryString = queryString.substring(queryStringStartIndex + 1, queryString.length);
	        var params = {}, queries, temp, i, l;
	        // Split into key/value pairs
	        queries = queryString.split("&");
	        // Convert the array of strings into an object
	        for (i = 0, l = queries.length; i < l; i++) {
	            temp = queries[i].split('=');
	            params[temp[0]] = temp[1];
	        }
	        return params;
	    };
	    /**
	     * Does variable replacement on a template
	     *
	     * @private
	     * @param {string} template - a template string that will have tags replaced
	     * @param {map} variableMap - a named map of tag to value for the replacement process
	     * @returns {string}
	     */
	    Endpoints.setVariables = function (template, variableMap) {
	        for (var key in variableMap) {
	            if (variableMap.hasOwnProperty(key)) {
	                var bracedKey = new RegExp(this.escapeRegExp("{" + key + "}"), "g");
	                // If the value of DOMAIN_KEY does not have a trailing slash, add one.
	                if (key === Endpoints.DOMAIN_KEY) {
	                    variableMap[key] = Endpoints.appendTrailingSlashToDomain(variableMap[key]);
	                }
	                template = template.replace(bracedKey, variableMap[key]);
	            }
	        }
	        return template;
	    };
	    ;
	    Endpoints.appendTrailingSlashToDomain = function (domain) {
	        if (domain && domain.charAt(domain.length - 1) !== '/') {
	            return domain + "/";
	        }
	        return domain;
	    };
	    /**
	     *
	     * Does simple escaping to facilitate string replacement in a url
	     * @param {string} stringToGoIntoTheRegex - the unescaped regex
	     * @returns {XML|string|void} - the escaped regex
	     * @private
	     */
	    Endpoints.escapeRegExp = function (stringToGoIntoTheRegex) {
	        return stringToGoIntoTheRegex.replace(/[-\/\\^$*+?.()|[\]{}]/g, '\\$&');
	    };
	    Endpoints.ACCESS_TOKEN_KEY = "axsTkn";
	    Endpoints.ACCESS_TOKEN_SUFFIX = "?access_token={" + Endpoints.ACCESS_TOKEN_KEY + "}";
	    // The key of the server identifier that COS will return in the cloud server URL.
	    // See WebSocketCloudCloverTransport.initialize
	    Endpoints.CLOUD_SERVER_IDENTIFIER_KEY = "server";
	    Endpoints.ACCOUNT_V3_KEY = "acntId";
	    Endpoints.ACCOUNT_V3_PATH = "v3/accounts/{" + Endpoints.ACCOUNT_V3_KEY + "}";
	    Endpoints.DEVELOPER_V3_KEY = "dId";
	    Endpoints.DEVELOPER_V3_PATH = "v3/developers/{" + Endpoints.DEVELOPER_V3_KEY + "}";
	    Endpoints.RESELLER_V3_KEY = "rId";
	    Endpoints.RESELLER_V3_PATH = "v3/resellers/{" + Endpoints.RESELLER_V3_KEY + "}";
	    Endpoints.MERCHANT_V2_KEY = "mId";
	    Endpoints.MERCHANT_V2_PATH = "v2/merchant/{" + Endpoints.MERCHANT_V2_KEY + "}";
	    Endpoints.MERCHANT_V3_KEY = "mId";
	    Endpoints.MERCHANT_V3_PATH = "v3/merchants/{" + Endpoints.MERCHANT_V3_KEY + "}";
	    Endpoints.APPS_V3_KEY = "appId";
	    Endpoints.APPS_V3_PATH = "v3/apps/{" + Endpoints.APPS_V3_KEY + "}";
	    Endpoints.ORDER_PATH = Endpoints.MERCHANT_V3_PATH + "/orders";
	    Endpoints.ORDER_ID_KEY = "appId";
	    Endpoints.ORDER_ID_PATH = Endpoints.ORDER_PATH + "/{" + Endpoints.ORDER_ID_KEY + "}";
	    Endpoints.LINE_ITEM_PATH = Endpoints.ORDER_ID_PATH + "/line_items";
	    Endpoints.LINE_ITEM_ID_KEY = "lniId";
	    Endpoints.LINE_ITEM_ID_PATH = Endpoints.LINE_ITEM_PATH + "/{" + Endpoints.LINE_ITEM_ID_KEY + "}";
	    Endpoints.DEVICE_PATH = Endpoints.MERCHANT_V3_PATH + "/devices";
	    Endpoints.DEVICE_ID_KEY = "devId";
	    Endpoints.DEVICE_ID_PATH = Endpoints.DEVICE_PATH + "/{" + Endpoints.DEVICE_ID_KEY + "}";
	    Endpoints.REMOTE_PAY_PATH = Endpoints.MERCHANT_V2_PATH + "/remote_pay";
	    Endpoints.WEBSOCKET_PATH = "support/remote_pay/cs";
	    Endpoints.WEBSOCKET_TOKEN_KEY = "wsTkn";
	    Endpoints.WEBSOCKET_TOKEN_SUFFIX = "?token={" + Endpoints.WEBSOCKET_TOKEN_KEY + "}";
	    Endpoints.WEBSOCKET_FRIENDLY_ID_KEY = "wsFriendlyId";
	    Endpoints.WEBSOCKET_FRIENDLY_ID_SUFFIX = "&friendlyId={" + Endpoints.WEBSOCKET_FRIENDLY_ID_KEY + "}";
	    Endpoints.WEBSOCKET_FORCE_CONNECT_KEY = "wsForceConnect";
	    Endpoints.WEBSOCKET_FORCE_CONNECT_SUFFIX = "&forceConnect={" + Endpoints.WEBSOCKET_FORCE_CONNECT_KEY + "}";
	    Endpoints.OAUTH_PATH = "oauth/authorize?response_type=token";
	    Endpoints.OAUTH_CLIENT_ID_KEY = "client_id";
	    Endpoints.OAUTH_CLIENT_ID_SUFFIX = "&client_id={" + Endpoints.OAUTH_CLIENT_ID_KEY + "}";
	    Endpoints.OAUTH_MERCHANT_ID_KEY = "merchant_id";
	    Endpoints.OAUTH_MERCHANT_ID_SUFFIX = "&merchant_id={" + Endpoints.OAUTH_MERCHANT_ID_KEY + "}";
	    Endpoints.OAUTH_REDIRECT_URI_KEY = "redirect_uri";
	    Endpoints.OAUTH_REDIRECT_URI_SUFFIX = "&redirect_uri={" + Endpoints.OAUTH_REDIRECT_URI_KEY + "}";
	    Endpoints.DOMAIN_KEY = "server_url";
	    Endpoints.DOMAIN_PATH = "{server_url}";
	    return Endpoints;
	}());
	exports.Endpoints = Endpoints;

	//# sourceMappingURL=../../../maps/com/clover/util/Endpoints.js.map


/***/ }),
/* 505 */
/***/ (function(module, exports, __webpack_require__) {

	"use strict";
	Object.defineProperty(exports, "__esModule", { value: true });
	exports.CloverWebSocketInterface = void 0;
	var WebSocketState_1 = __webpack_require__(174);
	var Logger_1 = __webpack_require__(48);
	/**
	 * Used to abstract implementation details to allow for NodeJS and
	 * Browser usage of the library.
	 *
	 * WebSocket Clover Interface.  Abstracts the WebSocket implementation so that the library is not tied to a
	 * Browser implementation.
	 *
	 * Interface to connect a websocket implementation to.
	 *
	 * @see https://developer.mozilla.org/en-US/docs/Web/API/WebSocket
	 * or https://html.spec.whatwg.org/multipage/web-sockets.html
	 */
	var CloverWebSocketInterface = /** @class */ (function () {
	    function CloverWebSocketInterface(endpoint) {
	        // Create a logger
	        this.logger = Logger_1.Logger.create();
	        this.endpoint = endpoint;
	        this.listeners = new Array();
	    }
	    CloverWebSocketInterface.prototype.connect = function (accessToken) {
	        var _this = this;
	        this.webSocket = this.createWebSocket(this.endpoint, accessToken);
	        if (typeof this.webSocket["addEventListener"] !== "function") {
	            this.logger.error("FATAL: The websocket implementation being used must have an 'addEventListener' function.  Either use a supported websocket implementation (https://www.npmjs.com/package/ws) or override the connect method on CloverWebSocketInterface.");
	        }
	        else {
	            this.webSocket.addEventListener("open", function (event) { return _this.notifyOnOpen(event); });
	            this.webSocket.addEventListener("message", function (event) { return _this.notifyOnMessage(event); });
	            this.webSocket.addEventListener("close", function (event) { return _this.notifyOnClose(event); });
	            this.webSocket.addEventListener("error", function (event) { return _this.notifyOnError(event); });
	        }
	        return this;
	    };
	    CloverWebSocketInterface.prototype.notifyOnOpen = function (event) {
	        var _this = this;
	        this.listeners.forEach(function (listener) {
	            try {
	                // check event here for any additional data we can see - headers?
	                listener.onConnected(_this);
	            }
	            catch (e) {
	                _this.logger.error(e);
	            }
	        });
	    };
	    CloverWebSocketInterface.prototype.notifyOnMessage = function (event) {
	        var _this = this;
	        this.listeners.forEach(function (listener) {
	            try {
	                listener.onTextMessage(_this, event.data);
	            }
	            catch (e) {
	                _this.logger.error(e);
	            }
	        });
	    };
	    /**
	     * A simple error event is passed per the websocket spec - https://www.w3.org/TR/websockets/#concept-websocket-close-fail
	     * It doesn't appear that an exact typing for the websocket error event is available, so I am using any.
	     *
	     * @param {any} event - simple event passed per websocket spec.
	     */
	    CloverWebSocketInterface.prototype.notifyOnError = function (event) {
	        var _this = this;
	        this.listeners.forEach(function (listener) {
	            try {
	                // According to the spec, only CLOSING or OPEN should occur. This is a 'simple' event.
	                // check event here for any additional data we can see - headers?
	                if (_this.getReadyState() == WebSocketState_1.WebSocketState.CONNECTING) {
	                    listener.onConnectError(_this, event);
	                }
	                else if (_this.getReadyState() == WebSocketState_1.WebSocketState.CLOSING) {
	                    listener.onUnexpectedError(_this, event);
	                }
	                else if (_this.getReadyState() == WebSocketState_1.WebSocketState.CLOSED) {
	                    listener.onDisconnected(_this, event);
	                }
	                else if (_this.getReadyState() == WebSocketState_1.WebSocketState.OPEN) {
	                    listener.onSendError(_this, event);
	                }
	            }
	            catch (e) {
	                _this.logger.error(e);
	            }
	        });
	    };
	    CloverWebSocketInterface.prototype.notifyOnClose = function (event) {
	        var _this = this;
	        this.listeners.forEach(function (listener) {
	            try {
	                listener.onCloseFrame(_this, event.code, event.reason);
	            }
	            catch (e) {
	                _this.logger.error(e);
	            }
	        });
	    };
	    CloverWebSocketInterface.prototype.sendClose = function (code, reason) {
	        this.logger.debug("Close sent code ", code, " reason ", reason);
	        try {
	            /** 1000 indicates normal closure.  To avoid InvalidAccessErrors if no code is available default to 1000.
	             *  Per the websocket spec:
	             *    "If the method's first argument is present but is not an integer equal to 1000 or in the range 3000 to 4999,
	             *     throw an InvalidAccessError exception and abort these steps."
	             */
	            this.webSocket.close(code || 1000, reason || "NORMAL_CLOSURE");
	        }
	        catch (e) {
	            this.logger.error('error disposing of transport.', e);
	        }
	        return this;
	    };
	    CloverWebSocketInterface.prototype.sendText = function (data) {
	        /*
	         Exceptions thrown

	         INVALID_STATE_ERR
	         The connection is not currently OPEN.
	         SYNTAX_ERR
	         The data is a string that has unpaired surrogates. (???)
	         */
	        this.webSocket.send(data);
	        return this;
	    };
	    CloverWebSocketInterface.prototype.getState = function () {
	        return this.getReadyState();
	    };
	    CloverWebSocketInterface.prototype.isOpen = function () {
	        return this.getReadyState() == WebSocketState_1.WebSocketState.OPEN;
	    };
	    CloverWebSocketInterface.prototype.addListener = function (listener) {
	        this.listeners.push(listener);
	    };
	    CloverWebSocketInterface.prototype.removeListener = function (listener) {
	        var indexOfListener = this.listeners.indexOf(listener);
	        if (indexOfListener !== -1) {
	            this.listeners.splice(indexOfListener, 1);
	            return true;
	        }
	        return false;
	    };
	    CloverWebSocketInterface.prototype.getListeners = function () {
	        return this.listeners.slice();
	    };
	    // Wrapped functionality below
	    CloverWebSocketInterface.prototype.getUrl = function () {
	        return this.webSocket.url;
	    };
	    CloverWebSocketInterface.prototype.getReadyState = function () {
	        return this.webSocket.readyState;
	    };
	    CloverWebSocketInterface.prototype.getBufferedAmount = function () {
	        return this.webSocket.hasOwnProperty("bufferedAmount") ? this.webSocket.bufferedAmount : 0;
	    };
	    CloverWebSocketInterface.prototype.getProtocol = function () {
	        return this.webSocket.protocol;
	    };
	    return CloverWebSocketInterface;
	}());
	exports.CloverWebSocketInterface = CloverWebSocketInterface;

	//# sourceMappingURL=../../../maps/com/clover/websocket/CloverWebSocketInterface.js.map


/***/ }),
/* 506 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';

	var _react = __webpack_require__(4);

	var _react2 = _interopRequireDefault(_react);

	var _reactDom = __webpack_require__(801);

	var _reactDom2 = _interopRequireDefault(_reactDom);

	var _AppRoutes = __webpack_require__(507);

	var _AppRoutes2 = _interopRequireDefault(_AppRoutes);

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

	window.onload = function () {
	    _reactDom2.default.render(_react2.default.createElement(_AppRoutes2.default, null), document.getElementById('main'));
	};

/***/ }),
/* 507 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';

	Object.defineProperty(exports, "__esModule", {
	    value: true
	});

	var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

	var _react = __webpack_require__(4);

	var _react2 = _interopRequireDefault(_react);

	var _reactRouter = __webpack_require__(61);

	var _routes = __webpack_require__(562);

	var _routes2 = _interopRequireDefault(_routes);

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

	function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

	function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

	var AppRoutes = function (_React$Component) {
	    _inherits(AppRoutes, _React$Component);

	    function AppRoutes() {
	        _classCallCheck(this, AppRoutes);

	        return _possibleConstructorReturn(this, (AppRoutes.__proto__ || Object.getPrototypeOf(AppRoutes)).apply(this, arguments));
	    }

	    _createClass(AppRoutes, [{
	        key: 'render',
	        value: function render() {
	            return _react2.default.createElement(_reactRouter.Router, { history: _reactRouter.browserHistory, routes: _routes2.default, onUpdate: function onUpdate() {
	                    return window.scrollTo(0, 0);
	                } });
	        }
	    }]);

	    return AppRoutes;
	}(_react2.default.Component);

	exports.default = AppRoutes;

/***/ }),
/* 508 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';

	Object.defineProperty(exports, "__esModule", {
	    value: true
	});

	var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

	var _CurrencyFormatter = __webpack_require__(27);

	var _CurrencyFormatter2 = _interopRequireDefault(_CurrencyFormatter);

	var _propTypes = __webpack_require__(212);

	var _propTypes2 = _interopRequireDefault(_propTypes);

	var _react = __webpack_require__(4);

	var _react2 = _interopRequireDefault(_react);

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

	function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

	function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

	var AvailableDiscount = function (_React$Component) {
	    _inherits(AvailableDiscount, _React$Component);

	    function AvailableDiscount(props) {
	        _classCallCheck(this, AvailableDiscount);

	        var _this = _possibleConstructorReturn(this, (AvailableDiscount.__proto__ || Object.getPrototypeOf(AvailableDiscount)).call(this, props));

	        _this.discount = _this.props.discount;
	        _this.formatter = new _CurrencyFormatter2.default();
	        return _this;
	    }

	    _createClass(AvailableDiscount, [{
	        key: 'render',
	        value: function render() {
	            var _this2 = this;

	            var name = this.discount.name;
	            var _onClick = this.props.onClick;

	            return _react2.default.createElement(
	                'div',
	                { className: 'available_item', onClick: function onClick() {
	                        _onClick(_this2.discount);
	                    } },
	                _react2.default.createElement(
	                    'div',
	                    { className: 'item_title' },
	                    _react2.default.createElement(
	                        'span',
	                        null,
	                        name
	                    )
	                ),
	                _react2.default.createElement('div', { className: 'discount_bottom' })
	            );
	        }
	    }]);

	    return AvailableDiscount;
	}(_react2.default.Component);

	exports.default = AvailableDiscount;

/***/ }),
/* 509 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';

	Object.defineProperty(exports, "__esModule", {
	    value: true
	});

	var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

	var _CurrencyFormatter = __webpack_require__(27);

	var _CurrencyFormatter2 = _interopRequireDefault(_CurrencyFormatter);

	var _propTypes = __webpack_require__(212);

	var _propTypes2 = _interopRequireDefault(_propTypes);

	var _react = __webpack_require__(4);

	var _react2 = _interopRequireDefault(_react);

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

	function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

	function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

	var AvailableItem = function (_React$Component) {
	    _inherits(AvailableItem, _React$Component);

	    function AvailableItem(props) {
	        _classCallCheck(this, AvailableItem);

	        var _this = _possibleConstructorReturn(this, (AvailableItem.__proto__ || Object.getPrototypeOf(AvailableItem)).call(this, props));

	        _this.formatter = new _CurrencyFormatter2.default();
	        _this.item = _this.props.item;
	        return _this;
	    }

	    _createClass(AvailableItem, [{
	        key: 'render',
	        value: function render() {
	            var _this2 = this;

	            var id = this.item.id;
	            var title = this.item.title;
	            var itemPrice = this.formatter.formatCurrency(this.item.itemPrice);
	            var tippable = this.item.tippable;
	            var taxable = this.item.taxable;
	            var _onClick = this.props.onClick;
	            return _react2.default.createElement(
	                'div',
	                { className: 'available_item', onClick: function onClick() {
	                        _onClick(id, title, _this2.item.itemPrice, tippable, taxable);
	                    } },
	                _react2.default.createElement(
	                    'div',
	                    { className: 'item_title' },
	                    _react2.default.createElement(
	                        'span',
	                        null,
	                        title
	                    )
	                ),
	                _react2.default.createElement(
	                    'div',
	                    { className: 'item_price' },
	                    itemPrice
	                )
	            );
	        }
	    }]);

	    return AvailableItem;
	}(_react2.default.Component);

	exports.default = AvailableItem;

/***/ }),
/* 510 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';

	Object.defineProperty(exports, "__esModule", {
	    value: true
	});

	var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

	var _react = __webpack_require__(4);

	var _react2 = _interopRequireDefault(_react);

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

	function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

	function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

	var ButtonPrinterDropdown = function (_React$Component) {
	    _inherits(ButtonPrinterDropdown, _React$Component);

	    function ButtonPrinterDropdown(props) {
	        _classCallCheck(this, ButtonPrinterDropdown);

	        var _this = _possibleConstructorReturn(this, (ButtonPrinterDropdown.__proto__ || Object.getPrototypeOf(ButtonPrinterDropdown)).call(this, props));

	        _this.state = {
	            showDropDown: false
	        };
	        _this.printers = _this.props.printers;

	        _this.dropdownSelect = _this.dropdownSelect.bind(_this);
	        _this.showDropDown = _this.showDropDown.bind(_this);
	        return _this;
	    }

	    _createClass(ButtonPrinterDropdown, [{
	        key: 'showDropDown',
	        value: function showDropDown() {
	            // shows dropdown
	            this.setState({ showDropDown: !this.state.showDropDown });
	        }
	    }, {
	        key: 'dropdownSelect',
	        value: function dropdownSelect(printer) {
	            // selects printer from dropdown
	            this.setState({ showDropDown: false });
	            this.props.dropDownClick(printer, this.props.printType);
	        }
	    }, {
	        key: 'render',
	        value: function render() {
	            var _this2 = this;

	            var title = this.props.title;
	            var onClick = this.props.onClick;

	            var disabled = false;
	            if (this.props.disabled !== undefined) {
	                disabled = this.props.disabled;
	            }
	            var showDropDown = this.state.showDropDown;
	            var className = showDropDown ? 'button_dropdown_open' : 'button_dropdown';

	            return _react2.default.createElement(
	                'div',
	                { className: 'dropdown_container' },
	                _react2.default.createElement(
	                    'div',
	                    { className: className },
	                    _react2.default.createElement(
	                        'div',
	                        { className: 'row button_device' },
	                        _react2.default.createElement(
	                            'button',
	                            { className: 'dropdown_button', onClick: onClick, disabled: disabled },
	                            title
	                        ),
	                        _react2.default.createElement(
	                            'button',
	                            { onClick: this.showDropDown, className: 'dropdown_dropdown' },
	                            _react2.default.createElement('i', { className: 'fa fa-caret-down', 'aria-hidden': 'true' })
	                        )
	                    )
	                ),
	                showDropDown && _react2.default.createElement(
	                    'div',
	                    { className: 'dropdown' },
	                    _react2.default.createElement(
	                        'div',
	                        { className: 'printer_row border_top', onClick: function onClick() {
	                                _this2.dropdownSelect({ id: null });
	                            } },
	                        _react2.default.createElement('img', { className: 'printer_image', src: 'images/printer.png' }),
	                        _react2.default.createElement(
	                            'div',
	                            null,
	                            'DEFAULT'
	                        )
	                    ),
	                    this.printers.map(function (printer, i) {
	                        return _react2.default.createElement(
	                            'div',
	                            { key: "printer-" + i, className: 'printer_row',
	                                onClick: function onClick() {
	                                    _this2.dropdownSelect(printer);
	                                } },
	                            _react2.default.createElement('img', { className: 'printer_image', src: 'images/printer.png' }),
	                            _react2.default.createElement(
	                                'div',
	                                null,
	                                _react2.default.createElement(
	                                    'div',
	                                    { className: 'row_wrap print_row_bold' },
	                                    _react2.default.createElement(
	                                        'div',
	                                        null,
	                                        'Name:'
	                                    ),
	                                    _react2.default.createElement(
	                                        'div',
	                                        null,
	                                        printer.name
	                                    )
	                                ),
	                                _react2.default.createElement(
	                                    'div',
	                                    { className: 'row_wrap print_row_small' },
	                                    _react2.default.createElement(
	                                        'div',
	                                        null,
	                                        'ID:'
	                                    ),
	                                    _react2.default.createElement(
	                                        'div',
	                                        null,
	                                        printer.id
	                                    )
	                                ),
	                                _react2.default.createElement(
	                                    'div',
	                                    { className: 'row_wrap print_row_small' },
	                                    _react2.default.createElement(
	                                        'div',
	                                        null,
	                                        'Type:'
	                                    ),
	                                    _react2.default.createElement(
	                                        'div',
	                                        null,
	                                        printer.type
	                                    )
	                                )
	                            )
	                        );
	                    })
	                )
	            );
	        }
	    }]);

	    return ButtonPrinterDropdown;
	}(_react2.default.Component);

	exports.default = ButtonPrinterDropdown;

/***/ }),
/* 511 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';

	Object.defineProperty(exports, "__esModule", {
	    value: true
	});

	var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

	var _CustomPayloadMessage = __webpack_require__(550);

	var _CustomPayloadMessage2 = _interopRequireDefault(_CustomPayloadMessage);

	var _ButtonNormal = __webpack_require__(41);

	var _ButtonNormal2 = _interopRequireDefault(_ButtonNormal);

	var _PayloadMessage = __webpack_require__(521);

	var _PayloadMessage2 = _interopRequireDefault(_PayloadMessage);

	var _react = __webpack_require__(4);

	var _react2 = _interopRequireDefault(_react);

	var _remotePayCloud = __webpack_require__(57);

	var _remotePayCloud2 = _interopRequireDefault(_remotePayCloud);

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

	function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

	function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

	var CustomActivities = function (_React$Component) {
	    _inherits(CustomActivities, _React$Component);

	    function CustomActivities(props) {
	        _classCallCheck(this, CustomActivities);

	        var _this = _possibleConstructorReturn(this, (CustomActivities.__proto__ || Object.getPrototypeOf(CustomActivities)).call(this, props));

	        _this.state = {
	            activityPayload: '',
	            customActivityAction: 'com.clover.loyalty.example.BurgerBucksCFPActivity',
	            finalPayload: '',
	            initialPayload: '',
	            messages: [],
	            nonBlocking: true,
	            payloadToSend: '',
	            selectedValue: 'BasicExample',
	            sendPayloadDisabled: true,
	            startActivityDisabled: false,
	            showMessageButton: false
	        };

	        _this.cloverConnector = _this.props.cloverConnection.cloverConnector;
	        _this.CUSTOM_ACTIVITY_PACKAGE = 'com.clover.cfp.examples.';
	        _this.store = _this.props.store;

	        _this.changeCustomActionName = _this.changeCustomActionName.bind(_this);
	        _this.handleChange = _this.handleChange.bind(_this);
	        _this.initialPayloadChange = _this.initialPayloadChange.bind(_this);
	        _this.payloadChange = _this.payloadChange.bind(_this);
	        _this.toggleNonBlocking = _this.toggleNonBlocking.bind(_this);
	        _this.startActivity = _this.startActivity.bind(_this);
	        _this.sendMessageToActivity = _this.sendMessageToActivity.bind(_this);
	        return _this;
	    }

	    _createClass(CustomActivities, [{
	        key: 'startActivity',
	        value: function startActivity() {
	            var car = new _remotePayCloud2.default.sdk.remotepay.CustomActivityRequest();
	            car.setAction(this.state.customActivityAction);
	            car.setPayload(this.state.activityPayload);
	            car.setNonBlocking(this.state.nonBlocking);
	            console.log('CustomActivityRequest', car);
	            this.cloverConnector.startCustomActivity(car);
	        }
	    }, {
	        key: 'sendMessageToActivity',
	        value: function sendMessageToActivity() {
	            var messageRequest = new _remotePayCloud2.default.sdk.remotepay.MessageToActivity();
	            messageRequest.setAction(this.state.customActivityAction);
	            messageRequest.setPayload(this.state.payloadToSend);
	            console.log('MessageToActivity', messageRequest);
	            this.cloverConnector.sendMessageToActivity(messageRequest);
	            this.setState({ payloadToSend: '', messages: this.state.messages.concat([new _CustomPayloadMessage2.default(this.state.payloadToSend, true)]) });
	        }
	    }, {
	        key: 'finalPayload',
	        value: function finalPayload(finalMessageFromCustomActivity) {
	            this.setState({ finalPayload: finalMessageFromCustomActivity, startActivityDisabled: false, sendPayloadDisabled: true });
	        }
	    }, {
	        key: 'changeCustomActionName',
	        value: function changeCustomActionName(e) {
	            // handle custom activity action name change
	            this.setState({ customActivityAction: e.target.value });
	        }
	    }, {
	        key: 'handleChange',
	        value: function handleChange(e) {
	            // handles change on custom activity type
	            this.setState({ selectedValue: e.target.value });
	        }
	    }, {
	        key: 'initialPayloadChange',
	        value: function initialPayloadChange(e) {
	            // handles change on payload
	            this.setState({ activityPayload: e.target.value });
	        }
	    }, {
	        key: 'payloadChange',
	        value: function payloadChange(e) {
	            // handles change on payload
	            this.setState({ payloadToSend: e.target.value });
	        }
	    }, {
	        key: 'toggleNonBlocking',
	        value: function toggleNonBlocking() {
	            // toggles non-blocking
	            this.setState({ nonBlocking: !this.state.nonBlocking });
	        }
	    }, {
	        key: 'componentWillReceiveProps',
	        value: function componentWillReceiveProps(newProps) {
	            if (newProps.customSuccess) {
	                this.setState({ initialPayload: this.state.activityPayload });
	                this.setState({ startActivityDisabled: true, sendPayloadDisabled: false, messages: [], activityPayload: '', finalPayload: '' });
	            }
	            if (newProps.newCustomMessage) {
	                var message = newProps.messageFromCustomActivity;
	                this.setState({ messages: this.state.messages.concat([new _CustomPayloadMessage2.default(message, false)]) });
	            }
	            if (newProps.finalCustomMessage) {
	                this.finalPayload(newProps.finalMessageFromCustomActivity);
	            }
	        }
	    }, {
	        key: 'render',
	        value: function render() {
	            var initialPayload = this.state.initialPayload;
	            var finalPayload = this.state.finalPayload;
	            var customPayloadClasses = "custom_payload_send";
	            var messageContainerClasses = "flex_grow custom_messages_container";
	            if (this.state.sendPayloadDisabled) {
	                customPayloadClasses = "custom_payload_send disabled";
	                messageContainerClasses = "flex_grow custom_messages_container disabled";
	            }
	            var customLeftClasses = "custom_left";
	            if (this.state.startActivityDisabled) {
	                customLeftClasses = "custom_left disabled";
	            }
	            var messages = this.state.messages;

	            return _react2.default.createElement(
	                'div',
	                { className: 'custom_container' },
	                _react2.default.createElement(
	                    'h2',
	                    null,
	                    'Test Custom Activity'
	                ),
	                _react2.default.createElement(
	                    'div',
	                    { className: 'row border_top grow' },
	                    _react2.default.createElement(
	                        'div',
	                        { className: customLeftClasses },
	                        _react2.default.createElement(
	                            'div',
	                            { className: 'custom_section' },
	                            _react2.default.createElement(
	                                'div',
	                                null,
	                                'Action Name of Custom Activity:'
	                            ),
	                            _react2.default.createElement('input', { className: 'custom_item', type: 'text', value: this.state.customActivityAction, onChange: this.changeCustomActionName, disabled: this.state.startActivityDisabled })
	                        ),
	                        _react2.default.createElement(
	                            'div',
	                            { className: 'custom_section_row misc_row' },
	                            _react2.default.createElement(
	                                'div',
	                                null,
	                                'Non-Blocking'
	                            ),
	                            _react2.default.createElement(
	                                'label',
	                                { className: 'switch' },
	                                _react2.default.createElement('input', { type: 'checkbox', ref: 'non_blocking', checked: this.state.nonBlocking, onChange: this.toggleNonBlocking, disabled: this.state.startActivityDisabled }),
	                                _react2.default.createElement('span', { className: 'slider round' })
	                            )
	                        ),
	                        _react2.default.createElement(
	                            'div',
	                            { className: 'column_plain padding' },
	                            _react2.default.createElement(
	                                'div',
	                                null,
	                                'Send Initial Payload to Activity:'
	                            ),
	                            _react2.default.createElement('input', { className: 'custom_item', type: 'text', value: this.state.activityPayload, onChange: this.initialPayloadChange, placeholder: '{Message: Start Activity Payload}', disabled: this.state.startActivityDisabled }),
	                            _react2.default.createElement('input', { className: 'normal_button button_white custom_activity_button margin_top', type: 'submit', value: 'Start Activity', onClick: this.startActivity, disabled: this.state.startActivityDisabled })
	                        )
	                    ),
	                    _react2.default.createElement(
	                        'div',
	                        { className: 'custom_right' },
	                        _react2.default.createElement(
	                            'div',
	                            { className: 'custom_section_row' },
	                            _react2.default.createElement(
	                                'h3',
	                                { className: 'no_margin padding_right_15' },
	                                'Initial Payload:'
	                            ),
	                            _react2.default.createElement(
	                                'div',
	                                null,
	                                initialPayload
	                            )
	                        ),
	                        _react2.default.createElement(
	                            'div',
	                            { className: messageContainerClasses },
	                            messages.map(function (message, i) {
	                                return _react2.default.createElement(_PayloadMessage2.default, { key: 'message-' + i, payload: message.getPayload(), isSentToCustomActivity: message.isSentToCustomActivity() });
	                            }, this)
	                        ),
	                        _react2.default.createElement(
	                            'div',
	                            { className: customPayloadClasses },
	                            _react2.default.createElement(
	                                'div',
	                                null,
	                                'Payload to be sent to Custom Activity:'
	                            ),
	                            _react2.default.createElement(
	                                'div',
	                                { className: 'row align_center' },
	                                _react2.default.createElement('input', { className: 'custom_item flex_grow', type: 'text', value: this.state.payloadToSend, onChange: this.payloadChange, placeholder: '{Message: I am a message!}', disabled: this.state.sendPayloadDisabled }),
	                                _react2.default.createElement(_ButtonNormal2.default, { extra: 'custom_button', title: 'Send Payload', color: 'white', disabled: this.state.sendPayloadDisabled, onClick: this.sendMessageToActivity })
	                            )
	                        ),
	                        _react2.default.createElement(
	                            'div',
	                            { className: 'custom_final' },
	                            _react2.default.createElement(
	                                'h3',
	                                { className: 'no_margin padding_right_15' },
	                                'Final Payload:'
	                            ),
	                            _react2.default.createElement(
	                                'div',
	                                null,
	                                finalPayload
	                            )
	                        )
	                    )
	                )
	            );
	        }
	    }]);

	    return CustomActivities;
	}(_react2.default.Component);

	exports.default = CustomActivities;

/***/ }),
/* 512 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';

	Object.defineProperty(exports, "__esModule", {
	    value: true
	});

	var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

	var _ButtonNormal = __webpack_require__(41);

	var _ButtonNormal2 = _interopRequireDefault(_ButtonNormal);

	var _ButtonPrinterDropdown = __webpack_require__(510);

	var _ButtonPrinterDropdown2 = _interopRequireDefault(_ButtonPrinterDropdown);

	var _react = __webpack_require__(4);

	var _react2 = _interopRequireDefault(_react);

	var _remotePayCloud = __webpack_require__(57);

	var _remotePayCloud2 = _interopRequireDefault(_remotePayCloud);

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

	function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

	function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

	var Device = function (_React$Component) {
	    _inherits(Device, _React$Component);

	    function Device(props) {
	        _classCallCheck(this, Device);

	        var _this = _possibleConstructorReturn(this, (Device.__proto__ || Object.getPrototypeOf(Device)).call(this, props));

	        _this.state = {
	            file: null,
	            imagePreviewUrl: null,
	            printers: [],
	            printImageURL: 'http://dkcoin8.com/images/game-of-thrones-live-clipart-6.jpg',
	            printTextContent: 'Print This!!',
	            printType: null,
	            queryPaymentText: 'JANRZXDFT3JF',
	            showDropDown: false,
	            showMessageContent: 'Hello Message!'
	        };

	        _this.cloverConnector = _this.props.cloverConnection.cloverConnector;
	        _this.store = _this.props.store;

	        _this.closeout = _this.closeout.bind(_this);
	        _this.handleImageChange = _this.handleImageChange.bind(_this);
	        _this.handleImageChangeDropDown = _this.handleImageChangeDropDown.bind(_this);
	        _this.showMessage = _this.showMessage.bind(_this);
	        _this.messageChange = _this.messageChange.bind(_this);
	        _this.openCashDrawer = _this.openCashDrawer.bind(_this);
	        _this.printChange = _this.printChange.bind(_this);
	        _this.printerChosen = _this.printerChosen.bind(_this);
	        _this.printFromURL = _this.printFromURL.bind(_this);
	        _this.printImageChange = _this.printImageChange.bind(_this);
	        _this.printText = _this.printText.bind(_this);
	        _this.readCardData = _this.readCardData.bind(_this);
	        _this.showDropDown = _this.showDropDown.bind(_this);
	        _this.showThankYouScreen = _this.showThankYouScreen.bind(_this);
	        _this.showWelcomeScreen = _this.showWelcomeScreen.bind(_this);
	        return _this;
	    }

	    _createClass(Device, [{
	        key: 'showMessage',
	        value: function showMessage() {
	            // shows message on Clover Device
	            console.log('showMessage', this.state.showMessageContent);
	            this.cloverConnector.showMessage(this.state.showMessageContent);
	        }
	    }, {
	        key: 'printText',
	        value: function printText() {
	            // prints text on Clover Device
	            var pr = new _remotePayCloud2.default.sdk.remotepay.PrintRequest();
	            pr.setText([this.state.printTextContent]);
	            console.log('PrintRequest - Print Text', pr);
	            this.cloverConnector.print(pr);
	        }
	    }, {
	        key: 'printerChosen',
	        value: function printerChosen(printer, printType) {
	            // executes print job based on type selected
	            if (printType === 'URL') {
	                var pr = new _remotePayCloud2.default.sdk.remotepay.PrintRequest();
	                pr.setImageUrl([this.state.printImageURL]);
	                pr.setPrintDeviceId(printer.id);
	                console.log('PrintRequest - Print Image URL', pr);
	                this.cloverConnector.print(pr);
	            } else if (printType === 'TEXT') {
	                var _pr = new _remotePayCloud2.default.sdk.remotepay.PrintRequest();
	                _pr.setText([this.state.printTextContent]);
	                _pr.setPrintDeviceId(printer.id);
	                console.log('PrintRequest - Print Text', _pr);
	                this.cloverConnector.print(_pr);
	            } else if (printType === 'CASH') {
	                var ocdr = new _remotePayCloud2.default.sdk.remotepay.OpenCashDrawerRequest();
	                ocdr.setReason('POS JavaScript Example Test');
	                ocdr.setDeviceId(printer.id);
	                console.log('OpenCashDrawerRequest', ocdr);
	                this.cloverConnector.openCashDrawer(ocdr);
	            }
	            this.setState({ printType: null });
	        }
	    }, {
	        key: 'showWelcomeScreen',
	        value: function showWelcomeScreen() {
	            // shows welcome screen on Clover device
	            console.log('showing welcome screen');
	            this.cloverConnector.showWelcomeScreen();
	        }
	    }, {
	        key: 'showThankYouScreen',
	        value: function showThankYouScreen() {
	            // shows thank you screen on Clover device
	            console.log('showing thank you screen');
	            this.cloverConnector.showThankYouScreen();
	        }
	    }, {
	        key: 'handleImageChange',
	        value: function handleImageChange(e) {
	            var _this2 = this;

	            // tells device to print image selected
	            e.preventDefault();
	            this.setState({ showDropDown: false });

	            var reader = new FileReader();
	            var file = e.target.files[0];

	            reader.onloadend = function () {
	                _this2.setState({ file: file, imagePreviewUrl: reader.result });
	                var image = new Image();
	                image.src = reader.result;

	                var pr = new _remotePayCloud2.default.sdk.remotepay.PrintRequest();
	                pr.setImage([image]);

	                image.addEventListener('load', function () {
	                    console.log('PrintRequest - Print Image', pr);
	                    this.cloverConnector.print(pr);
	                }.bind(_this2));
	                image.addEventListener('error', function () {
	                    alert('error');
	                });
	            };
	            reader.readAsDataURL(file);
	        }
	    }, {
	        key: 'handleImageChangeDropDown',
	        value: function handleImageChangeDropDown(e, printer) {
	            var _this3 = this;

	            // tells device to print image selected from printer selected
	            this.setState({ showDropDown: false });
	            e.preventDefault();

	            var reader = new FileReader();
	            var file = e.target.files[0];

	            reader.onloadend = function () {
	                _this3.setState({
	                    file: file,
	                    imagePreviewUrl: reader.result
	                });
	                var image = new Image();
	                image.src = reader.result;

	                var pr = new _remotePayCloud2.default.sdk.remotepay.PrintRequest();
	                pr.setImage([image]);
	                pr.setPrintDeviceId(printer.id);

	                image.addEventListener('load', function () {
	                    console.log('PrintRequest - Print Image URL', pr);
	                    this.cloverConnector.print(pr);
	                }.bind(_this3));
	                image.addEventListener('error', function () {
	                    alert('error');
	                });
	            };
	            reader.readAsDataURL(file);
	        }
	    }, {
	        key: 'closeout',
	        value: function closeout() {
	            // tells Clover device to closeout
	            var request = new _remotePayCloud2.default.sdk.remotepay.CloseoutRequest();
	            request.setAllowOpenTabs(false);
	            request.setBatchId(null);
	            console.log('CloseoutRequest', request);
	            this.cloverConnector.closeout(request);
	        }
	    }, {
	        key: 'openCashDrawer',
	        value: function openCashDrawer() {
	            // tells Clover device to open cash drawer
	            var ocdr = new _remotePayCloud2.default.sdk.remotepay.OpenCashDrawerRequest();
	            ocdr.setReason('POS JavaScript Example Test');
	            console.log('OpenCashDrawerRequest', ocdr);
	            this.cloverConnector.openCashDrawer(ocdr);
	        }
	    }, {
	        key: 'printFromURL',
	        value: function printFromURL() {
	            // tells Clover device to print image from URL
	            var pr = new _remotePayCloud2.default.sdk.remotepay.PrintRequest();
	            pr.setImageUrl([this.state.printImageURL]);
	            console.log('PrintRequest - Print Image URL', pr);
	            this.cloverConnector.print(pr);
	        }
	    }, {
	        key: 'readCardData',
	        value: function readCardData() {
	            // tells Clover device to read card data
	            var request = new _remotePayCloud2.default.sdk.remotepay.ReadCardDataRequest(this.store.getCardEntryMethods());
	            console.log('ReadCardDataRequest', request);
	            this.cloverConnector.readCardData(request);
	        }
	    }, {
	        key: 'messageChange',
	        value: function messageChange(e) {
	            // handles message change for show message
	            this.setState({ showMessageContent: e.target.value });
	        }
	    }, {
	        key: 'printChange',
	        value: function printChange(e) {
	            // handles text change for print text
	            this.setState({ printTextContent: e.target.value });
	        }
	    }, {
	        key: 'printImageChange',
	        value: function printImageChange(e) {
	            // handles image url change for print image from url
	            this.setState({ printImageURL: e.target.value });
	        }
	    }, {
	        key: 'showDropDown',
	        value: function showDropDown() {
	            // toggles dropdown for print image printer selection
	            this.setState({ showDropDown: !this.state.showDropDown });
	        }
	    }, {
	        key: 'componentWillMount',
	        value: function componentWillMount() {
	            var rpr = new _remotePayCloud2.default.sdk.remotepay.RetrievePrintersRequest();
	            console.log('RetrievePrintersRequest', rpr);
	            this.cloverConnector.retrievePrinters(rpr);
	        }
	    }, {
	        key: 'componentWillReceiveProps',
	        value: function componentWillReceiveProps(newProps) {
	            if (newProps.printers !== null && this.state.printers.length < 1) {
	                this.setState({ printers: newProps.printers });
	            }
	        }
	    }, {
	        key: 'render',
	        value: function render() {
	            var _this4 = this;

	            var printersAdded = this.state.printers.length > 0;
	            var showDropDown = this.state.showDropDown;

	            var className = showDropDown ? 'button_dropdown_open' : 'button_dropdown';
	            return _react2.default.createElement(
	                'div',
	                null,
	                printersAdded && _react2.default.createElement(
	                    'div',
	                    { className: 'device' },
	                    _react2.default.createElement(
	                        'h2',
	                        null,
	                        'Device Options'
	                    ),
	                    _react2.default.createElement(
	                        'div',
	                        { className: 'device_options' },
	                        _react2.default.createElement(
	                            'div',
	                            { className: 'misc_row' },
	                            _react2.default.createElement('input', { className: 'device_input', type: 'text', value: this.state.showMessageContent, onChange: this.messageChange }),
	                            _react2.default.createElement(_ButtonNormal2.default, { extra: 'button_input', color: 'white', title: 'Show Message', onClick: this.showMessage })
	                        ),
	                        _react2.default.createElement(
	                            'div',
	                            { className: 'misc_row' },
	                            _react2.default.createElement('input', { className: 'device_input', type: 'text', value: this.state.printTextContent, onChange: this.printChange }),
	                            _react2.default.createElement(_ButtonPrinterDropdown2.default, { title: 'Print Text', onClick: this.printText, printers: this.state.printers, dropDownClick: this.printerChosen, printType: 'TEXT' })
	                        ),
	                        _react2.default.createElement(
	                            'div',
	                            { className: 'misc_row' },
	                            _react2.default.createElement('input', { className: 'device_input', type: 'text', onChange: this.printImageChange, value: this.state.printImageURL }),
	                            _react2.default.createElement(_ButtonPrinterDropdown2.default, { title: 'Print Image from Url', onClick: this.printFromURL, printers: this.state.printers, dropDownClick: this.printerChosen, printType: 'URL' })
	                        ),
	                        _react2.default.createElement(
	                            'div',
	                            { className: 'misc_row' },
	                            _react2.default.createElement(
	                                'div',
	                                { className: 'dropdown_container' },
	                                _react2.default.createElement(
	                                    'div',
	                                    { className: className },
	                                    _react2.default.createElement(
	                                        'div',
	                                        { className: 'row button_device' },
	                                        _react2.default.createElement('input', { className: 'file_upload upload', name: 'file', id: 'file', type: 'file', onChange: function onChange(e) {
	                                                return _this4.handleImageChange(e);
	                                            } }),
	                                        _react2.default.createElement(
	                                            'label',
	                                            { className: 'dropdown_button', htmlFor: 'file' },
	                                            'Print Image'
	                                        ),
	                                        _react2.default.createElement(
	                                            'button',
	                                            { onClick: this.showDropDown, className: 'dropdown_dropdown' },
	                                            _react2.default.createElement('i', { className: 'fa fa-caret-down', 'aria-hidden': 'true' })
	                                        )
	                                    )
	                                ),
	                                showDropDown && _react2.default.createElement(
	                                    'div',
	                                    { className: 'dropdown' },
	                                    _react2.default.createElement(
	                                        'div',
	                                        { className: 'printer_row border_top' },
	                                        _react2.default.createElement('input', { className: 'file_upload', name: 'file', id: "file_dropdown_default", type: 'file', onChange: function onChange(e) {
	                                                return _this4.handleImageChange(e);
	                                            } }),
	                                        _react2.default.createElement(
	                                            'label',
	                                            { className: 'printer_row_no_border', htmlFor: "file_dropdown_default" },
	                                            _react2.default.createElement('img', { className: 'printer_image', src: 'images/printer.png' }),
	                                            _react2.default.createElement(
	                                                'div',
	                                                null,
	                                                'DEFAULT'
	                                            )
	                                        )
	                                    ),
	                                    this.state.printers.map(function (printer, i) {
	                                        return _react2.default.createElement(
	                                            'div',
	                                            { key: 'printer-' + i, className: 'printer_row' },
	                                            _react2.default.createElement('input', { className: 'file_upload', name: 'file', id: "file_dropdown" + i, type: 'file', onChange: function onChange(e) {
	                                                    return _this4.handleImageChangeDropDown(e, printer);
	                                                } }),
	                                            _react2.default.createElement(
	                                                'label',
	                                                { className: 'printer_row_no_border', htmlFor: "file_dropdown" + i },
	                                                _react2.default.createElement('img', { className: 'printer_image', src: 'images/printer.png' }),
	                                                _react2.default.createElement(
	                                                    'div',
	                                                    null,
	                                                    _react2.default.createElement(
	                                                        'div',
	                                                        { className: 'row_wrap print_row_bold' },
	                                                        _react2.default.createElement(
	                                                            'div',
	                                                            null,
	                                                            'Name:'
	                                                        ),
	                                                        _react2.default.createElement(
	                                                            'div',
	                                                            null,
	                                                            printer.name
	                                                        )
	                                                    ),
	                                                    _react2.default.createElement(
	                                                        'div',
	                                                        { className: 'row_wrap print_row_small' },
	                                                        _react2.default.createElement(
	                                                            'div',
	                                                            null,
	                                                            'ID:'
	                                                        ),
	                                                        _react2.default.createElement(
	                                                            'div',
	                                                            null,
	                                                            printer.id
	                                                        )
	                                                    ),
	                                                    _react2.default.createElement(
	                                                        'div',
	                                                        { className: 'row_wrap print_row_small' },
	                                                        _react2.default.createElement(
	                                                            'div',
	                                                            null,
	                                                            'Type:'
	                                                        ),
	                                                        _react2.default.createElement(
	                                                            'div',
	                                                            null,
	                                                            printer.type
	                                                        )
	                                                    )
	                                                )
	                                            )
	                                        );
	                                    })
	                                )
	                            ),
	                            _react2.default.createElement(_ButtonNormal2.default, { extra: 'button_device', color: 'white', title: 'Read Card Data', onClick: this.readCardData })
	                        ),
	                        _react2.default.createElement(
	                            'div',
	                            { className: 'misc_row' },
	                            _react2.default.createElement(_ButtonNormal2.default, { extra: 'button_device', color: 'white', title: 'Show Welcome Screen', onClick: this.showWelcomeScreen }),
	                            _react2.default.createElement(_ButtonNormal2.default, { extra: 'button_device', color: 'white', title: 'Show Thank You Screen', onClick: this.showThankYouScreen })
	                        ),
	                        _react2.default.createElement(
	                            'div',
	                            { className: 'misc_row' },
	                            _react2.default.createElement(_ButtonNormal2.default, { extra: 'button_device', color: 'white', title: 'Closeout Orders', onClick: this.closeout }),
	                            _react2.default.createElement(_ButtonPrinterDropdown2.default, { title: 'Open Cash Drawer', onClick: this.openCashDrawer, printers: this.state.printers, dropDownClick: this.printerChosen, printType: 'CASH' })
	                        )
	                    )
	                )
	            );
	        }
	    }]);

	    return Device;
	}(_react2.default.Component);

	exports.default = Device;

/***/ }),
/* 513 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';

	Object.defineProperty(exports, "__esModule", {
	    value: true
	});

	var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

	var _ImageHelper = __webpack_require__(126);

	var _ImageHelper2 = _interopRequireDefault(_ImageHelper);

	var _react = __webpack_require__(4);

	var _react2 = _interopRequireDefault(_react);

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

	function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

	function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

	var DeviceRow = function (_React$Component) {
	    _inherits(DeviceRow, _React$Component);

	    function DeviceRow(props) {
	        _classCallCheck(this, DeviceRow);

	        var _this = _possibleConstructorReturn(this, (DeviceRow.__proto__ || Object.getPrototypeOf(DeviceRow)).call(this, props));

	        _this.device = _this.props.device;
	        _this.imageHelper = new _ImageHelper2.default();
	        _this.onClick = _this.props.onClick;
	        return _this;
	    }

	    _createClass(DeviceRow, [{
	        key: 'render',
	        value: function render() {
	            var imageSrc = this.imageHelper.getDeviceImage(this.device.deviceTypeName);
	            var name = '';
	            if (this.device.name !== undefined && this.device.name !== null) {
	                name = this.device.name;
	            }
	            var showName = false;
	            if (name.length > 0) {
	                showName = true;
	            }
	            return _react2.default.createElement(
	                'div',
	                { className: 'device_row' },
	                _react2.default.createElement(
	                    'div',
	                    { className: 'row align_center full_height', onClick: this.onClick },
	                    _react2.default.createElement(
	                        'div',
	                        { className: 'device_image_box' },
	                        _react2.default.createElement('img', { className: 'device_image', src: imageSrc })
	                    ),
	                    showName && _react2.default.createElement(
	                        'div',
	                        { className: 'device_name' },
	                        name
	                    ),
	                    this.device.serial
	                )
	            );
	        }
	    }]);

	    return DeviceRow;
	}(_react2.default.Component);

	exports.default = DeviceRow;

/***/ }),
/* 514 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';

	Object.defineProperty(exports, "__esModule", {
	    value: true
	});

	var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

	var _HomeMenu = __webpack_require__(278);

	var _HomeMenu2 = _interopRequireDefault(_HomeMenu);

	var _react = __webpack_require__(4);

	var _react2 = _interopRequireDefault(_react);

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

	function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

	function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

	var IndexPage = function (_React$Component) {
	    _inherits(IndexPage, _React$Component);

	    function IndexPage(props) {
	        _classCallCheck(this, IndexPage);

	        return _possibleConstructorReturn(this, (IndexPage.__proto__ || Object.getPrototypeOf(IndexPage)).call(this, props));
	    }

	    _createClass(IndexPage, [{
	        key: 'render',
	        value: function render() {
	            return _react2.default.createElement(_HomeMenu2.default, { cloverConnection: this.props.cloverConnection, store: this.props.store, setStatus: this.props.setStatus });
	        }
	    }]);

	    return IndexPage;
	}(_react2.default.Component);

	exports.default = IndexPage;

/***/ }),
/* 515 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';

	Object.defineProperty(exports, "__esModule", {
	    value: true
	});

	var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };

	var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

	var _ButtonNormal = __webpack_require__(41);

	var _ButtonNormal2 = _interopRequireDefault(_ButtonNormal);

	var _CloverConnection = __webpack_require__(563);

	var _CloverConnection2 = _interopRequireDefault(_CloverConnection);

	var _ConnectionHelper = __webpack_require__(564);

	var _ConnectionHelper2 = _interopRequireDefault(_ConnectionHelper);

	var _DeviceRow = __webpack_require__(513);

	var _DeviceRow2 = _interopRequireDefault(_DeviceRow);

	var _Discount = __webpack_require__(556);

	var _Discount2 = _interopRequireDefault(_Discount);

	var _Item = __webpack_require__(282);

	var _Item2 = _interopRequireDefault(_Item);

	var _reactRouter = __webpack_require__(61);

	var _config = __webpack_require__(280);

	var _reactQrReader = __webpack_require__(877);

	var _reactQrReader2 = _interopRequireDefault(_reactQrReader);

	var _react = __webpack_require__(4);

	var _react2 = _interopRequireDefault(_react);

	var _Store = __webpack_require__(560);

	var _Store2 = _interopRequireDefault(_Store);

	var _Cloud = __webpack_require__(531);

	var _Cloud2 = _interopRequireDefault(_Cloud);

	var _Network = __webpack_require__(536);

	var _Network2 = _interopRequireDefault(_Network);

	var _Home = __webpack_require__(535);

	var _Home2 = _interopRequireDefault(_Home);

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

	function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

	function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

	var data = __webpack_require__(281);

	var Layout = function (_Component) {
	    _inherits(Layout, _Component);

	    function Layout(props) {
	        _classCallCheck(this, Layout);

	        var _this = _possibleConstructorReturn(this, (Layout.__proto__ || Object.getPrototypeOf(Layout)).call(this, props));

	        _this.state = {
	            forceConnect: false,
	            cloudConnect: false,
	            challenge: false,
	            challengeContent: null,
	            connected: false,
	            customSuccess: false,
	            delay: 100,
	            fadeBackground: false,
	            finalCustomMessage: false,
	            finalMessageFromCustomActivity: '',
	            inputOptions: null,
	            localhost: false,
	            messageFromCustomActivity: '',
	            newCustomMessage: false,
	            pairingCode: '',
	            preAuth: false,
	            printers: [],
	            refundSuccess: false,
	            response: false,
	            responseFail: false,
	            result: 'No Result',
	            request: null,
	            saleFinished: false,
	            signatureRequest: null,
	            showCloudOptions: false,
	            showConnectionOptions: true,
	            showNetworkOptions: false,
	            showSignature: false,
	            showQR: false,
	            statusArray: null,
	            statusText: '',
	            statusToggle: false,
	            tipAdjust: false,
	            tipAmount: 0,
	            uriText: _config.myConfig.uriText,
	            vaultedCard: false
	        };

	        _this.acceptPayment = _this.acceptPayment.bind(_this);
	        _this.acceptSignature = _this.acceptSignature.bind(_this);
	        _this.challenge = _this.challenge.bind(_this);
	        _this.closeCloudConnect = _this.closeCloudConnect.bind(_this);
	        _this.closeStatusArray = _this.closeStatusArray.bind(_this);
	        _this.closePairingCode = _this.closePairingCode.bind(_this);
	        _this.closeStatus = _this.closeStatus.bind(_this);
	        _this.cloudConnect = _this.cloudConnect.bind(_this);
	        _this.confirmSignature = _this.confirmSignature.bind(_this);
	        _this.connect = _this.connect.bind(_this);
	        _this.customSuccess = _this.customSuccess.bind(_this);
	        _this.fadeBackground = _this.fadeBackground.bind(_this);
	        _this.finalCustomMessage = _this.finalCustomMessage.bind(_this);
	        _this.handleChange = _this.handleChange.bind(_this);
	        _this.handleError = _this.handleError.bind(_this);
	        _this.handleScan = _this.handleScan.bind(_this);
	        _this.inputOptions = _this.inputOptions.bind(_this);
	        _this.newCustomMessage = _this.newCustomMessage.bind(_this);
	        _this.QRClicked = _this.QRClicked.bind(_this);
	        _this.rejectPayment = _this.rejectPayment.bind(_this);
	        _this.rejectSignature = _this.rejectSignature.bind(_this);
	        _this.selectDevice = _this.selectDevice.bind(_this);
	        _this.setPairingCode = _this.setPairingCode.bind(_this);
	        _this.setStatus = _this.setStatus.bind(_this);
	        _this.showNetworkOptions = _this.showNetworkOptions.bind(_this);
	        _this.tipAdded = _this.tipAdded.bind(_this);
	        _this.toggleConnectionState = _this.toggleConnectionState.bind(_this);
	        _this.unfadeBackground = _this.unfadeBackground.bind(_this);

	        _this.connectionHelper = new _ConnectionHelper2.default();
	        _this.store = new _Store2.default();
	        _this.test = 'before';

	        _this.cloverConnection = new _CloverConnection2.default({
	            toggleConnectionState: _this.toggleConnectionState,
	            setPairingCode: _this.setPairingCode,
	            setStatus: _this.setStatus,
	            challenge: _this.challenge,
	            tipAdded: _this.tipAdded,
	            store: _this.store,
	            closeStatus: _this.closeStatus,
	            inputOptions: _this.inputOptions,
	            confirmSignature: _this.confirmSignature,
	            customSuccess: _this.customSuccess,
	            newCustomMessage: _this.newCustomMessage,
	            finalCustomMessage: _this.finalCustomMessage
	        });

	        _this.initStore();
	        _this.url = window.location.href;
	        console.log('url', _this.url);
	        if (_this.url.includes('merchant')) {

	            console.log('redirected', _this.test);
	            _this.merchant_regex = new RegExp('merchant_id=(.*)&em.*');
	            _this.token_regex = new RegExp('access_token=(.*)');

	            _this.merchant_array = _this.merchant_regex.exec(window.location.search);
	            _this.token_array = _this.token_regex.exec(window.location.hash);

	            _this.merchantId = _this.merchant_array[1];
	            _this.access_code = _this.token_array[1];
	            _this.devicesUrl = '' + _config.myConfig.devicesDomain + _this.merchantId + '/devices';

	            var xhttp = new XMLHttpRequest();
	            xhttp.onreadystatechange = function () {
	                if (xhttp.readyState != 4) return; // Not there yet
	                if (xhttp.status != 200) {
	                    console.log('There has been an error) status: ' + xhttp.status + ' readyState: ' + xhttp.readyState);
	                    return;
	                }
	                // Request successful, read the response
	                this.devices = JSON.parse(xhttp.responseText);
	                console.log(this.devices);
	                this.connectToCloud();
	                // ... and use it as needed by your app.
	            }.bind(_this);
	            xhttp.open("GET", _this.devicesUrl, true);
	            xhttp.setRequestHeader("authorization", 'Bearer ' + _this.access_code);
	            //xhttp.setRequestHeader("Content-type", "application/json");
	            xhttp.send();
	        }
	        return _this;
	    }

	    _createClass(Layout, [{
	        key: 'connectToCloud',
	        value: function connectToCloud() {
	            this.setState({ cloudConnect: true });
	        }
	    }, {
	        key: 'initStore',
	        value: function initStore() {
	            // initializes store
	            data.forEach(function (item) {
	                var newItem = new _Item2.default(item.id, item.title, item.itemPrice, item.taxable, item.tippable);
	                this.store.addItem(newItem);
	            }, this);

	            this.store.addDiscount(new _Discount2.default('10% Off', 0, 0.1));
	            this.store.addDiscount(new _Discount2.default('$5 Off', 500, 0.00));
	        }
	    }, {
	        key: 'connect',
	        value: function connect() {
	            // connects to Clover device
	            console.log('connecting to device');
	            this.cloverConnection.connectToDevicePairing(this.state.uriText, null);
	        }
	    }, {
	        key: 'toggleConnectionState',
	        value: function toggleConnectionState(connected) {
	            // toggles Clover device connection state
	            this.setState({ connected: connected });
	            if (connected) {
	                this.setState({ fadeBackground: false });
	            }
	        }
	    }, {
	        key: 'cloudConnect',
	        value: function cloudConnect() {
	            var finalRedirect = window.location.href.replace(window.location.hash, '');
	            console.log(finalRedirect);
	            var oAuthRedirectUrl = this.connectionHelper.getOAuthUrl(_config.myConfig.oAuthDomain, _config.myConfig.clientId, null, finalRedirect);
	            console.log(oAuthRedirectUrl);
	            window.location.href = oAuthRedirectUrl;
	            this.test = 'after';
	        }
	    }, {
	        key: 'showNetworkOptions',
	        value: function showNetworkOptions() {
	            this.setState({ showNetworkOptions: true, showConnectionOptions: false });
	        }
	    }, {
	        key: 'setPairingCode',
	        value: function setPairingCode(pairingCode) {
	            // sets pairing code
	            console.log('setPairingCode', pairingCode);
	            this.setState({ pairingCode: pairingCode, fadeBackground: true });
	        }
	    }, {
	        key: 'closePairingCode',
	        value: function closePairingCode() {
	            // closes pairing code
	            this.setState({ pairingCode: '', fadeBackground: false });
	        }
	    }, {
	        key: 'confirmSignature',
	        value: function confirmSignature(request) {
	            // shows popup for confirming signature
	            this.closeStatus();
	            var signature = request.signature;
	            this.setState({ showSignature: true, fadeBackground: true, signatureRequest: request });
	            var ctx = this.refs.canvas.getContext('2d');
	            ctx.scale(0.25, 0.25);
	            for (var strokeIndex = 0; strokeIndex < signature.strokes.length; strokeIndex++) {
	                var stroke = signature.strokes[strokeIndex];
	                ctx.moveTo(stroke.points[0].x, stroke.points[0].y);
	                for (var pointIndex = 1; pointIndex < stroke.points.length; pointIndex++) {
	                    ctx.lineTo(stroke.points[pointIndex].x, stroke.points[pointIndex].y);
	                    ctx.stroke();
	                }
	            }
	        }
	    }, {
	        key: 'acceptSignature',
	        value: function acceptSignature() {
	            // accepts signature
	            console.log('accepting signature', this.state.signatureRequest);
	            this.cloverConnection.cloverConnector.acceptSignature(this.state.signatureRequest);
	            this.closeSignature();
	        }
	    }, {
	        key: 'rejectSignature',
	        value: function rejectSignature() {
	            // rejects signature
	            console.log('rejecting signature', this.state.signatureRequest);
	            this.cloverConnection.cloverConnector.rejectSignature(this.state.signatureRequest);
	            this.closeSignature();
	        }
	    }, {
	        key: 'setStatus',
	        value: function setStatus(message, reason) {
	            var _this2 = this;

	            // decides how to display status
	            //console.log(message, reason);
	            if ((typeof message === 'undefined' ? 'undefined' : _typeof(message)) === 'object' && message !== null) {
	                this.setState({ statusArray: message, statusToggle: false, fadeBackground: true, responseFail: false, refundSuccess: false, tipAdjust: false, vaultedCard: false, newCustomMessage: false, finalCustomMessage: false });
	            } else if (message === 'Printers') {
	                this.setState({ printers: reason, newCustomMessage: false, finalCustomMessage: false });
	            } else if (message === 'Sale Processed Successfully' || message === 'Auth Processed Successfully' || message === 'PreAuth Successful' || message === 'PreAuth Processed Successfully') {
	                this.saleFinished(message);
	            } else if (message === 'Response was not a sale') {
	                this.setState({ responseFail: true, statusText: reason, fadeBackground: true, statusToggle: true, inputOptions: null, refundSuccess: false, tipAdjust: false, vaultedCard: false, newCustomMessage: false, finalCustomMessage: false });
	                setTimeout(function () {
	                    _this2.setState({ statusToggle: false, fadeBackground: false });
	                }, 1200);
	            } else if (reason === 'Toggle') {
	                this.statusToggle(message);
	            } else {
	                this.setState({
	                    statusToggle: true,
	                    statusText: message,
	                    challenge: false,
	                    saleFinished: false,
	                    vaultedCard: false,
	                    preAuth: false,
	                    inputOptions: null,
	                    fadeBackground: true,
	                    responseFail: false,
	                    refundSuccess: false,
	                    tipAdjust: false,
	                    newCustomMessage: false,
	                    finalCustomMessage: false
	                });
	            }
	        }
	    }, {
	        key: 'saleFinished',
	        value: function saleFinished(message) {
	            var _this3 = this;

	            // called when sale is finished
	            if (message === 'PreAuth Successful') {
	                this.setState({ preAuth: true });
	            }
	            this.setState({ statusText: message, statusToggle: true, saleFinished: true, fadeBackground: true, responseFail: false, refundSuccess: false, response: true, tipAdjust: false, vaultedCard: false });
	            setTimeout(function () {
	                _this3.setState({ statusToggle: false, fadeBackground: false, response: false });
	            }, 1000);
	        }
	    }, {
	        key: 'statusToggle',
	        value: function statusToggle(message) {
	            var _this4 = this;

	            // shows status for 1.5 seconds then closes
	            if (message === 'Card Successfully Vaulted') {
	                this.setState({ vaultedCard: true, refundSuccess: false, tipAdjust: false });
	            } else if (message === 'Refund Processed Successfully') {
	                this.setState({ refundSuccess: true, vaultedCard: false, tipAdjust: false });
	            } else if (message === 'Tip adjusted successfully') {
	                this.setState({ refundSuccess: false, vaultedCard: false, tipAdjust: true });
	            } else {
	                this.setState({ refundSuccess: false, vaultedCard: false, tipAdjust: false });
	            }
	            this.setState({ statusToggle: true, statusText: message, challenge: false, saleFinished: false, fadeBackground: true, responseFail: false, inputOptions: null, newCustomMessage: false, finalCustomMessage: false });
	            setTimeout(function () {
	                _this4.setState({ statusToggle: false, fadeBackground: false });
	            }, 1500);
	        }
	    }, {
	        key: 'closeStatusArray',
	        value: function closeStatusArray() {
	            // closes status array
	            this.setState({ statusArray: null, fadeBackground: false });
	        }
	    }, {
	        key: 'closeSignature',
	        value: function closeSignature() {
	            // closes signature verification popup
	            this.setState({ showSignature: false, fadeBackground: false });
	        }
	    }, {
	        key: 'closeCloudConnect',
	        value: function closeCloudConnect() {
	            // closes cloud connect popup which displays devices or an error message
	            this.setState({ cloudConnect: false, fadeBackground: false });
	        }
	    }, {
	        key: 'closeStatus',
	        value: function closeStatus() {
	            // closes status
	            if (!this.state.challenge && !this.state.response) {
	                this.setState({ statusToggle: false, inputOptions: null });
	                if (this.state.statusArray === null) {
	                    this.setState({ fadeBackground: false });
	                }
	            }
	        }
	    }, {
	        key: 'customSuccess',
	        value: function customSuccess(success) {
	            this.setState({ customSuccess: success, newCustomMessage: false, finalCustomMessage: false });
	        }
	    }, {
	        key: 'tipAdded',
	        value: function tipAdded(tipAmount) {
	            // sets tip amount
	            this.setState({ tipAmount: tipAmount });
	        }
	    }, {
	        key: 'challenge',
	        value: function challenge(_challenge, request) {
	            // shows challenge as popup
	            this.setState({ statusToggle: true, statusText: _challenge.message, challenge: true, request: request, inputOptions: null, challengeContent: _challenge });
	        }
	    }, {
	        key: 'acceptPayment',
	        value: function acceptPayment() {
	            // accepts payment
	            console.log('accepting payment', this.state.request.payment);
	            this.cloverConnection.cloverConnector.acceptPayment(this.state.request.payment);
	            this.setState({ challenge: false, statusToggle: false, fadeBackground: false });
	        }
	    }, {
	        key: 'rejectPayment',
	        value: function rejectPayment() {
	            //rejects payment
	            console.log('rejecting payment', this.state.request.payment);
	            this.cloverConnection.cloverConnector.rejectPayment(this.state.request.payment, this.state.challengeContent);
	            this.setState({ challenge: false, statusToggle: false, fadeBackground: false, responseFail: true });
	        }
	    }, {
	        key: 'inputOptions',
	        value: function inputOptions(io) {
	            // sets input options
	            this.setState({ inputOptions: io });
	        }
	    }, {
	        key: 'inputClick',
	        value: function inputClick(io) {
	            // performs input option click
	            console.log('selecting input option', io);
	            this.cloverConnection.cloverConnector.invokeInputOption(io);
	            this.closeStatus();
	        }
	    }, {
	        key: 'selectDevice',
	        value: function selectDevice(device) {
	            console.log('device selected: ', device);
	            this.cloverConnection.connectToDeviceCloud(this.access_code, this.merchantId, device.id, this.state.forceConnect);
	            this.setState({ cloudConnect: false, showCloudOptions: true });
	        }
	    }, {
	        key: 'newCustomMessage',
	        value: function newCustomMessage(message) {
	            this.setState({ newCustomMessage: true, messageFromCustomActivity: message, customSuccess: false, finalCustomMessage: false });
	        }
	    }, {
	        key: 'finalCustomMessage',
	        value: function finalCustomMessage(message) {
	            this.setState({ finalCustomMessage: true, finalMessageFromCustomActivity: message, newCustomMessage: false, customSuccess: false });
	        }
	    }, {
	        key: 'QRClicked',
	        value: function QRClicked() {
	            // shows QR screen
	            this.setState({ showQR: true });
	        }
	    }, {
	        key: 'handleScan',
	        value: function handleScan(data) {
	            // connects to device from qr scan
	            console.log("handleScan", data);
	            if (data !== null && data !== undefined && this.state.result === 'No Result') {
	                if (!this.state.connected) {
	                    this.setState({ result: data });
	                    var dataPieces = data.split('?');
	                    var authToken = dataPieces[1].split('=')[1];
	                    console.log('connecting to device');
	                    this.cloverConnection.connectToDevicePairing(dataPieces[0], authToken);
	                }
	            }
	        }
	    }, {
	        key: 'handleError',
	        value: function handleError(err) {
	            // handles qr code reader error
	            console.log('QR Reader Error', err);
	            this.setStatus('There was an error using the QR-Reader, please connect through Network Pay Display');
	            this.setState({ showQR: false, localhost: false });
	        }
	    }, {
	        key: 'handleChange',
	        value: function handleChange(e) {
	            // handles network pay display uri text
	            this.setState({ uriText: e.target.value });
	        }
	    }, {
	        key: 'fadeBackground',
	        value: function fadeBackground() {
	            // fades background for popup
	            this.setState({ fadeBackground: true });
	        }
	    }, {
	        key: 'unfadeBackground',
	        value: function unfadeBackground() {
	            // unfades background
	            this.setState({ fadeBackground: false });
	        }
	    }, {
	        key: 'componentWillMount',
	        value: function componentWillMount() {
	            if (location.hostname === 'localhost' || location.protocol === 'https:') {
	                this.setState({ localhost: true });
	            }
	        }
	    }, {
	        key: 'componentDidMount',
	        value: function componentDidMount() {
	            var _this5 = this;

	            window.addEventListener('beforeunload', function () {
	                var cloverConnector = _this5.cloverConnection.cloverConnector;
	                if (cloverConnector) {
	                    cloverConnector.dispose();
	                }
	            });
	        }
	    }, {
	        key: 'render',
	        value: function render() {
	            var _this6 = this;

	            var cloudConnect = this.state.cloudConnect;
	            var fadeBackground = this.state.fadeBackground;
	            var localhost = this.state.localhost;
	            var showBody = this.state.connected;
	            var showChallenge = this.state.challenge;
	            var showQR = this.state.showQR;
	            var showCloudOptions = this.state.showCloudOptions;
	            var showConnectionOptions = this.state.showConnectionOptions;
	            var showNetworkOptions = this.state.showNetworkOptions;
	            var showSignature = this.state.showSignature;
	            var showStatus = this.state.statusToggle;
	            var status = this.state.statusText;

	            var connectionState = 'Disconnected';
	            if (this.state.connected) {
	                connectionState = 'Connected';
	                if (this.store.getStoreName() !== null) {
	                    connectionState = connectionState + ': ' + this.store.getDeviceId() + ' (' + this.store.getStoreName() + ')';
	                }
	            }

	            var pairing = _react2.default.createElement('div', null);
	            if (this.state.pairingCode.length > 0) {
	                pairing = _react2.default.createElement(
	                    'div',
	                    { className: 'popup popup_container' },
	                    _react2.default.createElement(
	                        'div',
	                        { className: 'close_popup', onClick: this.closePairingCode },
	                        'X'
	                    ),
	                    _react2.default.createElement(
	                        'div',
	                        { className: 'pairing_code' },
	                        'Enter pairing code: ',
	                        _react2.default.createElement(
	                            'span',
	                            null,
	                            this.state.pairingCode
	                        ),
	                        ' into your device'
	                    )
	                );
	            }

	            var listContainer = _react2.default.createElement('div', null);
	            var showStatusArray = false;
	            var statusArrayTitle = '';
	            if (this.state.statusArray !== null) {
	                showStatusArray = true;
	                statusArrayTitle = this.state.statusArray.title;
	                var listItems = this.state.statusArray.data.map(function (line, i) {
	                    return _react2.default.createElement(
	                        'p',
	                        { key: "line-" + i },
	                        line
	                    );
	                });
	                listContainer = _react2.default.createElement(
	                    'div',
	                    { className: 'card_data_content' },
	                    listItems
	                );
	            }

	            var inputContainer = _react2.default.createElement('div', null);
	            var showInputOptions = false;
	            if (this.state.inputOptions !== null) {
	                showInputOptions = true;
	                showStatus = true;
	                var inputButtons = this.state.inputOptions.map(function (option, i) {
	                    return _react2.default.createElement(_ButtonNormal2.default, { key: "option-" + i, title: option.description, color: 'white', extra: 'input_options_button', onClick: function onClick() {
	                            _this6.inputClick(option);
	                        } });
	                });
	                inputContainer = _react2.default.createElement(
	                    'div',
	                    { className: 'input_buttons' },
	                    inputButtons
	                );
	            }
	            var devices = _react2.default.createElement('div', null);
	            var numDevices = 0;
	            if (cloudConnect && this.devices.elements.length > 0) {
	                var _devices = Object.keys(this.devices.elements).map(function (device, i) {
	                    if (_this6.devices.elements[device].deviceTypeName !== 'GOLDENOAK' && _this6.devices.elements[device].deviceTypeName !== 'GOLDLEAF') {
	                        numDevices++;
	                        return _react2.default.createElement(_DeviceRow2.default, { key: "device-" + i, device: _this6.devices.elements[device],
	                            onClick: function onClick() {
	                                _this6.selectDevice(_this6.devices.elements[device]);
	                            } });
	                    }
	                });
	                devices = _react2.default.createElement(
	                    'div',
	                    null,
	                    _devices
	                );
	            }
	            if (parseInt(numDevices) < 1) {
	                devices = _react2.default.createElement(
	                    'div',
	                    { className: 'container_padding' },
	                    _react2.default.createElement(
	                        'div',
	                        { className: 'close_popup', onClick: this.closeCloudConnect },
	                        'X'
	                    ),
	                    _react2.default.createElement(
	                        'div',
	                        null,
	                        'I\'m sorry, there are no available devices for this merchant.'
	                    )
	                );
	            };

	            var previewStyle = {
	                height: 240,
	                width: 320
	            };

	            return _react2.default.createElement(
	                'div',
	                { className: 'app-content' },
	                fadeBackground && _react2.default.createElement('div', { className: 'popup_opaque' }),
	                cloudConnect && _react2.default.createElement(
	                    'div',
	                    { className: 'popup_full_opaque' },
	                    _react2.default.createElement(
	                        'div',
	                        { className: 'popup devices_popup' },
	                        _react2.default.createElement(
	                            'div',
	                            { className: 'force_connect' },
	                            _react2.default.createElement(
	                                'label',
	                                { htmlFor: 'forceConnect' },
	                                'Force Connect:'
	                            ),
	                            _react2.default.createElement('input', { id: 'forceConnect', type: 'checkbox', checked: this.state.forceConnect, onChange: function onChange() {
	                                    return _this6.setState({ forceConnect: !_this6.state.forceConnect });
	                                } })
	                        ),
	                        devices
	                    )
	                ),
	                _react2.default.createElement(
	                    'div',
	                    { className: 'page_header' },
	                    _react2.default.createElement(
	                        _reactRouter.Link,
	                        { to: '/' },
	                        _react2.default.createElement(_Home2.default, null)
	                    ),
	                    _react2.default.createElement(
	                        'div',
	                        { id: 'connection_status' },
	                        connectionState
	                    ),
	                    _react2.default.createElement('div', { className: 'filler_space' })
	                ),
	                showSignature && _react2.default.createElement(
	                    'div',
	                    { className: 'popup popup_container' },
	                    _react2.default.createElement(
	                        'div',
	                        { className: 'close_popup', onClick: this.closeSignature },
	                        'X'
	                    ),
	                    _react2.default.createElement('canvas', { className: 'signature', ref: 'canvas' }),
	                    _react2.default.createElement(
	                        'div',
	                        { className: 'reject_accept' },
	                        _react2.default.createElement(_ButtonNormal2.default, { title: 'Reject', color: 'white', extra: 'left dialog_button', onClick: this.rejectSignature }),
	                        _react2.default.createElement(_ButtonNormal2.default, { title: 'Accept', color: 'white', extra: 'right dialog_button', onClick: this.acceptSignature })
	                    )
	                ),
	                showStatusArray && _react2.default.createElement(
	                    'div',
	                    { className: 'card_data popup' },
	                    _react2.default.createElement(
	                        'div',
	                        { className: 'close_popup', onClick: this.closeStatusArray },
	                        'X'
	                    ),
	                    _react2.default.createElement(
	                        'h3',
	                        null,
	                        statusArrayTitle
	                    ),
	                    listContainer
	                ),
	                showStatus && _react2.default.createElement(
	                    'div',
	                    { className: 'popup_container popup' },
	                    _react2.default.createElement(
	                        'div',
	                        { className: 'close_popup', onClick: this.closeStatus },
	                        'X'
	                    ),
	                    _react2.default.createElement(
	                        'div',
	                        { className: 'status' },
	                        status
	                    ),
	                    showInputOptions && _react2.default.createElement(
	                        'div',
	                        null,
	                        inputContainer
	                    ),
	                    showChallenge && _react2.default.createElement(
	                        'div',
	                        { className: 'reject_accept' },
	                        _react2.default.createElement(_ButtonNormal2.default, { title: 'Reject', color: 'white', extra: 'left dialog_button', onClick: this.rejectPayment }),
	                        _react2.default.createElement(_ButtonNormal2.default, { title: 'Accept', color: 'white', extra: 'right dialog_button', onClick: this.acceptPayment })
	                    )
	                ),
	                showBody ? _react2.default.createElement(
	                    'div',
	                    { className: 'body_content' },
	                    _react2.default.cloneElement(this.props.children, {
	                        toggleConnectionState: this.toggleConnectionState,
	                        cloverConnection: this.cloverConnection,
	                        store: this.store,
	                        setStatus: this.setStatus,
	                        closeStatus: this.closeStatus,
	                        saleFinished: this.state.saleFinished,
	                        tipAmount: this.state.tipAmount,
	                        vaultedCard: this.state.vaultedCard,
	                        preAuth: this.state.preAuth,
	                        fadeBackground: this.fadeBackground,
	                        unfadeBackground: this.unfadeBackground,
	                        responseFail: this.state.responseFail,
	                        refundSuccess: this.state.refundSuccess,
	                        printers: this.state.printers,
	                        tipAdjust: this.state.tipAdjust,
	                        customSuccess: this.state.customSuccess,
	                        newCustomMessage: this.state.newCustomMessage,
	                        messageFromCustomActivity: this.state.messageFromCustomActivity,
	                        finalCustomMessage: this.state.finalCustomMessage,
	                        finalMessageFromCustomActivity: this.state.finalMessageFromCustomActivity
	                    })
	                ) : _react2.default.createElement(
	                    'div',
	                    { className: 'connect_container' },
	                    showCloudOptions && _react2.default.createElement('div', { className: 'popup_full_opaque_white' }),
	                    _react2.default.createElement('img', { className: 'clover_logo', src: "images/clover_logo.png" }),
	                    _react2.default.createElement(
	                        'p',
	                        null,
	                        'Example POS'
	                    ),
	                    showConnectionOptions && _react2.default.createElement(
	                        'div',
	                        { className: 'row connect_row' },
	                        _react2.default.createElement(
	                            'div',
	                            { onClick: this.showNetworkOptions },
	                            _react2.default.createElement(_Network2.default, null),
	                            _react2.default.createElement(
	                                'p',
	                                null,
	                                'Connect with Network'
	                            )
	                        ),
	                        _react2.default.createElement(
	                            'div',
	                            { onClick: this.cloudConnect },
	                            _react2.default.createElement(_Cloud2.default, null),
	                            _react2.default.createElement(
	                                'p',
	                                null,
	                                'Connect with Cloud'
	                            )
	                        )
	                    ),
	                    showNetworkOptions && !showQR && _react2.default.createElement(
	                        'div',
	                        { className: 'column_plain center' },
	                        _react2.default.createElement(
	                            'h3',
	                            null,
	                            'Enter the URI of your device'
	                        ),
	                        _react2.default.createElement(
	                            'p',
	                            null,
	                            ' This can be found in the Network Pay Display app'
	                        ),
	                        _react2.default.createElement(
	                            'div',
	                            { className: 'connect_box' },
	                            _react2.default.createElement('input', { className: 'input_field', type: 'text', id: 'uri', value: this.state.uriText, onChange: this.handleChange }),
	                            _react2.default.createElement(_ButtonNormal2.default, { color: 'white', title: 'Connect', extra: 'connect_button', onClick: this.connect })
	                        ),
	                        localhost && _react2.default.createElement(
	                            'div',
	                            { className: 'qr_box' },
	                            _react2.default.createElement(
	                                'div',
	                                { className: 'row_padding' },
	                                'or'
	                            ),
	                            _react2.default.createElement(
	                                'div',
	                                { className: 'qr_button' },
	                                _react2.default.createElement(_ButtonNormal2.default, { color: 'white', extra: 'connect_button margin_right', title: 'Connect with QR', onClick: this.QRClicked }),
	                                _react2.default.createElement(
	                                    'span',
	                                    { className: 'qr_tooltip' },
	                                    'This can be found by running your finger up and down four times on the screen while in Network Pay Display and then pressing the QR code to print'
	                                )
	                            )
	                        )
	                    ),
	                    pairing,
	                    showQR && _react2.default.createElement(
	                        'div',
	                        { className: 'column_plain center' },
	                        _react2.default.createElement(_reactQrReader2.default, {
	                            delay: this.state.delay,
	                            style: previewStyle,
	                            onError: this.handleError,
	                            onScan: this.handleScan
	                        }),
	                        _react2.default.createElement(
	                            'p',
	                            null,
	                            this.state.result
	                        )
	                    )
	                )
	            );
	        }
	    }]);

	    return Layout;
	}(_react.Component);

	exports.default = Layout;

/***/ }),
/* 516 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';

	Object.defineProperty(exports, "__esModule", {
	    value: true
	});

	var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

	var _reactRouter = __webpack_require__(61);

	var _react = __webpack_require__(4);

	var _react2 = _interopRequireDefault(_react);

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

	function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

	function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

	var NotFoundPage = function (_React$Component) {
	    _inherits(NotFoundPage, _React$Component);

	    function NotFoundPage() {
	        _classCallCheck(this, NotFoundPage);

	        return _possibleConstructorReturn(this, (NotFoundPage.__proto__ || Object.getPrototypeOf(NotFoundPage)).apply(this, arguments));
	    }

	    _createClass(NotFoundPage, [{
	        key: 'render',
	        value: function render() {
	            return _react2.default.createElement(
	                'div',
	                { className: 'not-found' },
	                _react2.default.createElement(
	                    'h1',
	                    null,
	                    '404'
	                ),
	                _react2.default.createElement(
	                    'h2',
	                    null,
	                    'Page not found!'
	                ),
	                _react2.default.createElement(
	                    'p',
	                    null,
	                    _react2.default.createElement(
	                        _reactRouter.Link,
	                        { to: '/' },
	                        'Go back to the main page'
	                    )
	                )
	            );
	        }
	    }]);

	    return NotFoundPage;
	}(_react2.default.Component);

	exports.default = NotFoundPage;

/***/ }),
/* 517 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';

	Object.defineProperty(exports, "__esModule", {
	    value: true
	});

	var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

	var _CurrencyFormatter = __webpack_require__(27);

	var _CurrencyFormatter2 = _interopRequireDefault(_CurrencyFormatter);

	var _react = __webpack_require__(4);

	var _react2 = _interopRequireDefault(_react);

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

	function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

	function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

	var OrderItemRow = function (_React$Component) {
	    _inherits(OrderItemRow, _React$Component);

	    function OrderItemRow(props) {
	        _classCallCheck(this, OrderItemRow);

	        var _this = _possibleConstructorReturn(this, (OrderItemRow.__proto__ || Object.getPrototypeOf(OrderItemRow)).call(this, props));

	        _this.formatter = new _CurrencyFormatter2.default();
	        _this.orderItem = _this.props.orderItem;
	        return _this;
	    }

	    _createClass(OrderItemRow, [{
	        key: 'render',
	        value: function render() {
	            var itemName = this.orderItem.name;
	            var orderTotal = parseFloat(this.orderItem.quantity * this.formatter.convertStringToFloat(this.orderItem.price)).toFixed(2);
	            var quantity = this.orderItem.quantity;

	            return _react2.default.createElement(
	                'div',
	                { className: 'order_item_row' },
	                _react2.default.createElement(
	                    'div',
	                    null,
	                    quantity
	                ),
	                _react2.default.createElement(
	                    'div',
	                    null,
	                    itemName
	                ),
	                _react2.default.createElement(
	                    'div',
	                    null,
	                    '$',
	                    orderTotal
	                )
	            );
	        }
	    }]);

	    return OrderItemRow;
	}(_react2.default.Component);

	exports.default = OrderItemRow;

/***/ }),
/* 518 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';

	Object.defineProperty(exports, "__esModule", {
	    value: true
	});

	var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

	var _Checkmark = __webpack_require__(175);

	var _Checkmark2 = _interopRequireDefault(_Checkmark);

	var _CurrencyFormatter = __webpack_require__(27);

	var _CurrencyFormatter2 = _interopRequireDefault(_CurrencyFormatter);

	var _ImageHelper = __webpack_require__(126);

	var _ImageHelper2 = _interopRequireDefault(_ImageHelper);

	var _react = __webpack_require__(4);

	var _react2 = _interopRequireDefault(_react);

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

	function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

	function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

	var OrderPaymentRow = function (_React$Component) {
	    _inherits(OrderPaymentRow, _React$Component);

	    function OrderPaymentRow(props) {
	        _classCallCheck(this, OrderPaymentRow);

	        var _this = _possibleConstructorReturn(this, (OrderPaymentRow.__proto__ || Object.getPrototypeOf(OrderPaymentRow)).call(this, props));

	        _this.formatter = new _CurrencyFormatter2.default();
	        _this.imageHelper = new _ImageHelper2.default();
	        _this.order = _this.props.order;
	        _this.orderPayment = _this.props.orderPayment;
	        return _this;
	    }

	    _createClass(OrderPaymentRow, [{
	        key: 'render',
	        value: function render() {
	            var _this2 = this;

	            var cardDetails = this.orderPayment.cardDetails;
	            var check = this.orderPayment.status === 'SUCCESS';
	            var date = this.orderPayment.date;
	            var image = this.imageHelper.getCardTypeImage(this.orderPayment.cardType);
	            var _onClick = this.props.onClick;
	            var tender = this.orderPayment.tender;
	            var total = this.formatter.formatCurrency(this.orderPayment.amount);
	            var transactionType = this.orderPayment.transactionType.toUpperCase();

	            return _react2.default.createElement(
	                'div',
	                { className: 'order_item_row', onClick: function onClick() {
	                        _onClick(_this2.orderPayment);
	                    } },
	                _react2.default.createElement(
	                    'div',
	                    { className: 'row' },
	                    check && _react2.default.createElement(_Checkmark2.default, null),
	                    _react2.default.createElement(
	                        'div',
	                        { className: 'column_plain' },
	                        _react2.default.createElement(
	                            'div',
	                            null,
	                            _react2.default.createElement(
	                                'strong',
	                                null,
	                                date.toLocaleTimeString([], { hour: "2-digit", minute: "2-digit" })
	                            )
	                        ),
	                        _react2.default.createElement(
	                            'div',
	                            { className: 'grey_text' },
	                            date.toLocaleDateString()
	                        )
	                    )
	                ),
	                _react2.default.createElement(
	                    'div',
	                    { className: 'transaction_tender' },
	                    _react2.default.createElement('img', { className: 'tender_logo', src: image }),
	                    _react2.default.createElement(
	                        'div',
	                        { className: 'transaction_tender_column' },
	                        _react2.default.createElement(
	                            'div',
	                            null,
	                            _react2.default.createElement(
	                                'strong',
	                                null,
	                                tender
	                            )
	                        ),
	                        _react2.default.createElement(
	                            'div',
	                            { className: 'grey_text' },
	                            cardDetails
	                        )
	                    )
	                ),
	                _react2.default.createElement(
	                    'div',
	                    { className: 'order_row_right' },
	                    _react2.default.createElement(
	                        'div',
	                        null,
	                        _react2.default.createElement(
	                            'strong',
	                            null,
	                            total
	                        )
	                    ),
	                    _react2.default.createElement(
	                        'div',
	                        { className: 'grey_text' },
	                        transactionType
	                    )
	                )
	            );
	        }
	    }]);

	    return OrderPaymentRow;
	}(_react2.default.Component);

	exports.default = OrderPaymentRow;

/***/ }),
/* 519 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';

	Object.defineProperty(exports, "__esModule", {
	    value: true
	});

	var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

	var _react = __webpack_require__(4);

	var _react2 = _interopRequireDefault(_react);

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

	function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

	function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

	var OrderRow = function (_React$Component) {
	    _inherits(OrderRow, _React$Component);

	    function OrderRow(props) {
	        _classCallCheck(this, OrderRow);

	        var _this = _possibleConstructorReturn(this, (OrderRow.__proto__ || Object.getPrototypeOf(OrderRow)).call(this, props));

	        _this.order = _this.props.order;
	        return _this;
	    }

	    _createClass(OrderRow, [{
	        key: 'render',
	        value: function render() {
	            var _onClick = this.props.onClick;
	            var orderDate = this.order.date;
	            var orderId = this.order.id;
	            var orderStatus = this.order.status;
	            var totalWTax = this.order.getTotal();

	            var employee = '';
	            var tender = '';
	            if (this.order.orderPayments.length > 0) {
	                tender = this.order.orderPayments[0].tender;
	                employee = this.order.orderPayments[0].employee;
	            }

	            var statusColor = 'yellow_text';
	            if (orderStatus == 'PAID') {
	                statusColor = 'green_text';
	            } else if (orderStatus == 'REFUNDED' || orderStatus == 'MANUALLY REFUNDED') {
	                statusColor = 'red_text';
	            }

	            return _react2.default.createElement(
	                'div',
	                { className: 'order_row', onClick: function onClick() {
	                        _onClick(orderId);
	                    } },
	                _react2.default.createElement(
	                    'div',
	                    { className: 'order_row_left' },
	                    _react2.default.createElement(
	                        'div',
	                        null,
	                        _react2.default.createElement(
	                            'strong',
	                            null,
	                            orderDate.toLocaleTimeString([], { hour: "2-digit", minute: "2-digit" })
	                        )
	                    ),
	                    _react2.default.createElement(
	                        'div',
	                        { className: 'grey_text' },
	                        orderDate.toLocaleDateString()
	                    )
	                ),
	                _react2.default.createElement(
	                    'div',
	                    { className: 'order_row_left' },
	                    _react2.default.createElement(
	                        'div',
	                        null,
	                        _react2.default.createElement(
	                            'strong',
	                            null,
	                            '$',
	                            totalWTax
	                        )
	                    ),
	                    _react2.default.createElement(
	                        'div',
	                        { className: 'grey_text' },
	                        tender
	                    )
	                ),
	                _react2.default.createElement(
	                    'div',
	                    { className: 'order_row_middle' },
	                    _react2.default.createElement(
	                        'div',
	                        { className: statusColor },
	                        _react2.default.createElement(
	                            'strong',
	                            null,
	                            orderStatus
	                        )
	                    ),
	                    _react2.default.createElement(
	                        'div',
	                        { className: 'grey_text' },
	                        employee
	                    )
	                ),
	                _react2.default.createElement(
	                    'div',
	                    { className: 'order_row_right' },
	                    _react2.default.createElement(
	                        'div',
	                        null,
	                        orderId
	                    )
	                )
	            );
	        }
	    }]);

	    return OrderRow;
	}(_react2.default.Component);

	exports.default = OrderRow;

/***/ }),
/* 520 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';

	Object.defineProperty(exports, "__esModule", {
	    value: true
	});

	var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

	var _ButtonNormal = __webpack_require__(41);

	var _ButtonNormal2 = _interopRequireDefault(_ButtonNormal);

	var _reactRouter = __webpack_require__(61);

	var _OrderItemRow = __webpack_require__(517);

	var _OrderItemRow2 = _interopRequireDefault(_OrderItemRow);

	var _OrderPaymentRow = __webpack_require__(518);

	var _OrderPaymentRow2 = _interopRequireDefault(_OrderPaymentRow);

	var _OrderRow = __webpack_require__(519);

	var _OrderRow2 = _interopRequireDefault(_OrderRow);

	var _react = __webpack_require__(4);

	var _react2 = _interopRequireDefault(_react);

	var _TitleBar = __webpack_require__(105);

	var _TitleBar2 = _interopRequireDefault(_TitleBar);

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

	function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

	function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

	var Orders = function (_React$Component) {
	    _inherits(Orders, _React$Component);

	    function Orders(props) {
	        _classCallCheck(this, Orders);

	        var _this = _possibleConstructorReturn(this, (Orders.__proto__ || Object.getPrototypeOf(Orders)).call(this, props));

	        _this.state = {
	            order: null,
	            orderItems: [],
	            orderOpen: false,
	            orderPayments: []
	        };

	        _this.store = _this.props.store;
	        _this.orders = _this.store.getOrders();

	        _this.goToPayment = _this.goToPayment.bind(_this);
	        _this.goToRegister = _this.goToRegister.bind(_this);
	        _this.showOrderDetails = _this.showOrderDetails.bind(_this);
	        return _this;
	    }

	    _createClass(Orders, [{
	        key: 'showOrderDetails',
	        value: function showOrderDetails(id) {
	            // displays details of order
	            var order = this.store.getOrderById(id);
	            if (order !== null) {
	                var orderOpen = false;
	                if (order.status === 'OPEN') {
	                    orderOpen = true;
	                }
	                this.setState({ order: order, orderItems: order.getDisplayItems(), orderPayments: order.getOrderPayments(), orderOpen: orderOpen });
	            }
	            console.log('orderDetails', order);
	        }
	    }, {
	        key: 'goToPayment',
	        value: function goToPayment(orderPayment) {
	            // opens payment page for specified payment
	            _reactRouter.browserHistory.push({ pathname: '/payment', state: { type: 'payment', id: orderPayment.cloverPaymentId } });
	        }
	    }, {
	        key: 'goToRegister',
	        value: function goToRegister(order) {
	            // opens selected order in register
	            this.store.setCurrentOrder(order);
	            _reactRouter.browserHistory.push({ pathname: '/register' });
	        }
	    }, {
	        key: 'render',
	        value: function render() {
	            var _this2 = this;

	            var discounts = false;
	            var discount = null;

	            if (this.state.order != null && this.state.order.getDiscount() !== null) {
	                discounts = true;
	                discount = this.state.order.getDiscount();
	            }
	            var register = this.state.orderOpen;

	            return _react2.default.createElement(
	                'div',
	                { className: 'orders' },
	                _react2.default.createElement(
	                    'div',
	                    { className: 'column' },
	                    _react2.default.createElement(
	                        'div',
	                        { className: 'orders_list' },
	                        _react2.default.createElement(_TitleBar2.default, { title: 'Orders' }),
	                        this.orders.map(function (order, i) {
	                            return _react2.default.createElement(_OrderRow2.default, { key: "order-" + i, order: order, onClick: this.showOrderDetails });
	                        }, this)
	                    ),
	                    _react2.default.createElement(
	                        'div',
	                        { className: 'order_items_and_payments' },
	                        _react2.default.createElement(
	                            'div',
	                            { className: 'order_items container_left' },
	                            _react2.default.createElement(_TitleBar2.default, { title: 'Order Items' }),
	                            this.state.orderItems.map(function (orderItem, i) {
	                                return _react2.default.createElement(_OrderItemRow2.default, { key: "order_orderItem-" + i, orderItem: orderItem });
	                            }),
	                            discounts && _react2.default.createElement(
	                                'div',
	                                { className: 'order_item_row' },
	                                _react2.default.createElement(
	                                    'strong',
	                                    null,
	                                    'Discount: '
	                                ),
	                                discount.name
	                            )
	                        ),
	                        _react2.default.createElement(
	                            'div',
	                            { className: 'order_payments container_right' },
	                            _react2.default.createElement(
	                                'div',
	                                null,
	                                _react2.default.createElement(_TitleBar2.default, { title: 'Transactions' })
	                            ),
	                            this.state.orderPayments.map(function (orderPayment, i) {
	                                return _react2.default.createElement(_OrderPaymentRow2.default, { key: "order_orderPayment-" + i, order: this.state.order, orderPayment: orderPayment, onClick: this.goToPayment });
	                            }, this),
	                            register && _react2.default.createElement(
	                                'div',
	                                { className: 'column_plain flex_grow flex_end margin_bottom' },
	                                _react2.default.createElement('div', { className: 'filler_space' }),
	                                _react2.default.createElement(_ButtonNormal2.default, { title: 'Open in Register', color: 'white', extra: 'open_register_button', onClick: function onClick() {
	                                        _this2.goToRegister(_this2.state.order);
	                                    } })
	                            )
	                        )
	                    )
	                )
	            );
	        }
	    }]);

	    return Orders;
	}(_react2.default.Component);

	exports.default = Orders;

/***/ }),
/* 521 */
/***/ (function(module, exports, __webpack_require__) {

	"use strict";

	Object.defineProperty(exports, "__esModule", {
	    value: true
	});

	var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

	var _react = __webpack_require__(4);

	var _react2 = _interopRequireDefault(_react);

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

	function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

	function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

	var PayloadMessage = function (_React$Component) {
	    _inherits(PayloadMessage, _React$Component);

	    function PayloadMessage() {
	        _classCallCheck(this, PayloadMessage);

	        return _possibleConstructorReturn(this, (PayloadMessage.__proto__ || Object.getPrototypeOf(PayloadMessage)).apply(this, arguments));
	    }

	    _createClass(PayloadMessage, [{
	        key: "render",
	        value: function render() {
	            var content = this.props.payload;
	            var isSentToCustomActivity = this.props.isSentToCustomActivity;

	            var messageClass = "from_custom_activity";
	            if (isSentToCustomActivity) {
	                messageClass = "to_custom_activity";
	            }

	            return _react2.default.createElement(
	                "div",
	                null,
	                isSentToCustomActivity ? _react2.default.createElement(
	                    "div",
	                    { className: "payload_message" },
	                    _react2.default.createElement(
	                        "div",
	                        { className: messageClass },
	                        _react2.default.createElement(
	                            "strong",
	                            null,
	                            "Payload: "
	                        ),
	                        content
	                    ),
	                    _react2.default.createElement("div", { className: "flex_grow" })
	                ) : _react2.default.createElement(
	                    "div",
	                    { className: "payload_message" },
	                    _react2.default.createElement("div", { className: "flex_grow" }),
	                    _react2.default.createElement(
	                        "div",
	                        { className: messageClass },
	                        _react2.default.createElement(
	                            "strong",
	                            null,
	                            "Payload: "
	                        ),
	                        content
	                    )
	                )
	            );
	        }
	    }]);

	    return PayloadMessage;
	}(_react2.default.Component);

	exports.default = PayloadMessage;

/***/ }),
/* 522 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';

	Object.defineProperty(exports, "__esModule", {
	    value: true
	});

	var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

	var _ButtonNormal = __webpack_require__(41);

	var _ButtonNormal2 = _interopRequireDefault(_ButtonNormal);

	var _Checkmark = __webpack_require__(175);

	var _Checkmark2 = _interopRequireDefault(_Checkmark);

	var _remotePayCloud = __webpack_require__(57);

	var _remotePayCloud2 = _interopRequireDefault(_remotePayCloud);

	var _CurrencyFormatter = __webpack_require__(27);

	var _CurrencyFormatter2 = _interopRequireDefault(_CurrencyFormatter);

	var _PaymentRow = __webpack_require__(523);

	var _PaymentRow2 = _interopRequireDefault(_PaymentRow);

	var _react = __webpack_require__(4);

	var _react2 = _interopRequireDefault(_react);

	var _Refund = __webpack_require__(177);

	var _Refund2 = _interopRequireDefault(_Refund);

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

	function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

	function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

	var Payment = function (_React$Component) {
	    _inherits(Payment, _React$Component);

	    function Payment(props) {
	        _classCallCheck(this, Payment);

	        var _this = _possibleConstructorReturn(this, (Payment.__proto__ || Object.getPrototypeOf(Payment)).call(this, props));

	        _this.state = {
	            fullRefundDisabled: false,
	            isRefund: false,
	            partialRefundAmount: '0.00',
	            refundDate: null,
	            refundDisabled: false,
	            refundId: null,
	            showPartialRefunds: false,
	            showRefund: false,
	            showTipAdjust: false,
	            tipAmount: 0.00
	        };

	        _this.cloverConnector = _this.props.cloverConnection.cloverConnector;
	        _this.formatter = new _CurrencyFormatter2.default();
	        _this.store = _this.props.store;

	        _this.adjustTip = _this.adjustTip.bind(_this);
	        _this.finishAdjustTip = _this.finishAdjustTip.bind(_this);
	        _this.handleChange = _this.handleChange.bind(_this);
	        _this.makeRefund = _this.makeRefund.bind(_this);
	        _this.voidPayment = _this.voidPayment.bind(_this);
	        _this.changePartialRefundAmount = _this.changePartialRefundAmount.bind(_this);
	        _this.handleRefund = _this.handleRefund.bind(_this);
	        _this.makePartialRefund = _this.makePartialRefund.bind(_this);
	        _this.showReceiptsSale = _this.showReceiptsSale.bind(_this);

	        if (_this.props.location.state != null) {
	            _this.type = _this.props.location.state.type;
	            if (_this.type === 'payment') {
	                _this.paymentId = _this.props.location.state.id;
	                console.log(_this.paymentId);
	                _this.payment = _this.store.getPaymentByCloverId(_this.paymentId);
	            } else if (_this.type === 'refund') {
	                console.log('refund');
	                _this.refundId = _this.props.location.state.refund;
	                _this.payment = _this.store.getRefundByCloverId(_this.refundId);
	            }
	        }
	        return _this;
	    }

	    _createClass(Payment, [{
	        key: 'adjustTip',
	        value: function adjustTip() {
	            this.setState({ showTipAdjust: true });
	        }
	    }, {
	        key: 'finishAdjustTip',
	        value: function finishAdjustTip() {
	            this.setState({ showTipAdjust: false });
	            var tempTip = parseFloat(this.state.tipAmount).toFixed(2);
	            var taar = new _remotePayCloud2.default.sdk.remotepay.TipAdjustAuthRequest();
	            taar.setPaymentId(this.payment.cloverPaymentId);
	            taar.setOrderId(this.payment.cloverOrderId);
	            taar.setTipAmount(this.formatter.convertFromFloat(tempTip));
	            console.log('TipAdjustAuthRequest', taar);
	            this.cloverConnector.tipAdjustAuth(taar);
	        }
	    }, {
	        key: 'handleChange',
	        value: function handleChange(e) {
	            this.setState({ tipAmount: e.target.value });
	        }
	    }, {
	        key: 'changePartialRefundAmount',
	        value: function changePartialRefundAmount(e) {
	            // handle partial refund amount change
	            this.setState({ partialRefundAmount: e.target.value });
	        }
	    }, {
	        key: 'handleRefund',
	        value: function handleRefund() {
	            if (this.payment.transactionTitle == 'Payment') {
	                this.setState({ showPartialRefunds: true });
	            } else {
	                this.makeRefund();
	            }
	        }
	    }, {
	        key: 'makeRefund',
	        value: function makeRefund() {
	            this.setState({ showPartialRefunds: false });
	            var refund = new _remotePayCloud2.default.sdk.remotepay.RefundPaymentRequest();
	            refund.setAmount(this.payment.amount);
	            refund.setPaymentId(this.payment.cloverPaymentId);
	            refund.setOrderId(this.payment.cloverOrderId);
	            refund.setFullRefund(true);
	            console.log('RefundPaymentRequest', refund);
	            this.cloverConnector.refundPayment(refund);
	        }
	    }, {
	        key: 'makePartialRefund',
	        value: function makePartialRefund() {
	            this.setState({ showPartialRefunds: false });
	            var refund = new _remotePayCloud2.default.sdk.remotepay.RefundPaymentRequest();
	            refund.setAmount(this.formatter.convertFromFloat(this.state.partialRefundAmount));
	            refund.setPaymentId(this.payment.cloverPaymentId);
	            refund.setOrderId(this.payment.cloverOrderId);
	            refund.setFullRefund(false);
	            console.log('RefundPaymentRequest', refund);
	            this.cloverConnector.refundPayment(refund);
	        }
	    }, {
	        key: 'voidPayment',
	        value: function voidPayment() {
	            var vpr = new _remotePayCloud2.default.sdk.remotepay.VoidPaymentRequest();
	            vpr.setPaymentId(this.payment.cloverPaymentId);
	            vpr.setOrderId(this.payment.cloverOrderId);
	            vpr.setVoidReason(_remotePayCloud2.default.sdk.order.VoidReason.USER_CANCEL);
	            console.log('VoidPaymentRequest', vpr);
	            this.cloverConnector.voidPayment(vpr);
	        }
	    }, {
	        key: 'showReceiptsSale',
	        value: function showReceiptsSale() {
	            var dror = new _remotePayCloud2.default.sdk.remotepay.DisplayReceiptOptionsRequest();
	            dror.setPaymentId(this.payment.cloverPaymentId);
	            dror.setOrderId(this.payment.cloverOrderId);
	            this.cloverConnector.displayReceiptOptions(dror);
	        }
	    }, {
	        key: 'componentWillReceiveProps',
	        value: function componentWillReceiveProps(newProps) {
	            this.payment = this.store.getPaymentByCloverId(this.payment.cloverPaymentId);
	            console.log("componentWillReceiveProps", this.payment);
	            if (newProps.refundSuccess) {
	                var _amount = parseFloat(this.formatter.convertToFloat(this.payment.amount));
	                var _tipAmount = parseFloat(this.formatter.convertToFloat(this.payment.getTipAmount()));
	                var _refundAmount = parseFloat(this.formatter.convertToFloat(this.payment.getRefundsAmount()));

	                var absTotal = parseFloat(_amount + _tipAmount - _refundAmount).toFixed(2);
	                var refundDisabled = absTotal <= 0;
	                var fullDisabled = absTotal < this.payment.amount;
	                this.setState({ showRefund: true, refundDisabled: refundDisabled, refundId: this.payment.refunds[0].refundId, refundDate: this.payment.refunds[0].date, fullRefundDisabled: fullDisabled });
	            }
	            if (this.payment.transactionType === 'VOIDED') {
	                this.setState({ refundDisabled: true });
	            }
	        }
	    }, {
	        key: 'componentWillMount',
	        value: function componentWillMount() {
	            if (this.payment !== null) {
	                if (this.payment.refund) {
	                    console.log("componentWillMount", this.payment);
	                    var _amount = parseFloat(this.formatter.convertToFloat(this.payment.amount));
	                    if (this.payment.transactionTitle !== 'Manual Refund') {
	                        var _tipAmount = parseFloat(this.formatter.convertToFloat(this.payment.getTipAmount()));

	                        var _refundAmount = parseFloat(this.formatter.convertToFloat(this.payment.getRefundsAmount()));

	                        var absTotal = parseFloat(_amount + _tipAmount - _refundAmount).toFixed(2);
	                        var refundDisabled = absTotal <= 0;
	                        var fullDisabled = absTotal < this.payment.amount;
	                        console.log('setting isRefund');
	                        this.setState({ isRefund: true, refundDisabled: refundDisabled, fullRefundDisabled: fullDisabled });
	                    } else {
	                        this.setState({ isRefund: true, refundDisabled: true, fullRefundDisabled: true });
	                    }
	                }
	                if (this.payment.transactionType === 'VOIDED') {
	                    this.setState({ refundDisabled: true });
	                }
	            }
	        }
	    }, {
	        key: 'componentDidMount',
	        value: function componentDidMount() {
	            console.log('componentDidMount', this.payment);
	            if (this.payment.refunds !== undefined) {
	                var _amount = parseFloat(this.formatter.convertToFloat(this.payment.amount));
	                var _tipAmount = parseFloat(this.formatter.convertToFloat(this.payment.getTipAmount()));
	                var _refundAmount = parseFloat(this.formatter.convertToFloat(this.payment.getRefundsAmount()));

	                var absTotal = parseFloat(_amount + _tipAmount - _refundAmount).toFixed(2);
	                var refundDisabled = absTotal <= 0;
	                var fullDisabled = absTotal < this.payment.amount;
	                this.setState({ showRefund: true, refundDisabled: refundDisabled, refundId: this.payment.refunds[0].refundId, refundDate: this.payment.refunds[0].date, fullRefundDisabled: fullDisabled });
	            }
	        }
	    }, {
	        key: 'render',
	        value: function render() {
	            var _this2 = this;

	            var cardDetails = this.payment.cardDetails;
	            var date = this.payment.date;
	            var deviceId = this.payment.deviceId;
	            var employee = this.payment.employee;
	            var entryMethod = this.payment.entryMethod;
	            var paymentId = this.payment.id;
	            var total = this.formatter.formatCurrency(this.payment.amount);
	            var tender = this.payment.tender;
	            var transactionType = this.payment.transactionType;
	            var transactionState = this.payment.transactionState;
	            var showTips = true;
	            var showTipButton = this.payment.transactionTitle !== 'Payment';
	            var tipText = 'Adjust Tip';
	            var tipAmount = '';
	            var absTotal = parseFloat(parseFloat(this.formatter.convertToFloat(this.payment.amount))).toFixed(2);
	            if (!this.state.isRefund) {
	                tipAmount = parseFloat(this.formatter.convertToFloat(this.payment.getTipAmount())).toFixed(2);
	                absTotal = parseFloat(parseFloat(this.formatter.convertToFloat(this.payment.amount)) + parseFloat(this.formatter.convertToFloat(this.payment.getTipAmount()))).toFixed(2);
	            }
	            if (tipAmount === 0 || tipAmount <= 0) {
	                showTips = false;
	                tipAmount = '0.00';
	                tipText = 'Add Tip';
	            }
	            var partialRefundAmount = this.state.partialRefundAmount !== undefined ? this.formatter.convertToFloatDisplay(this.state.partialRefundAmount) : '';
	            var showPartialRefunds = this.state.showPartialRefunds;
	            var showRefunds = this.state.showRefund;
	            var showTipAdj = this.state.showTipAdjust;
	            var refundId = '';
	            var refundDate = '';
	            if (this.state.showRefund) {
	                var _amount = parseFloat(this.formatter.convertToFloat(this.payment.amount));
	                var _tipAmount = parseFloat(this.formatter.convertToFloat(this.payment.getTipAmount()));
	                var _refundAmount = parseFloat(this.formatter.convertToFloat(this.payment.getRefundsAmount()));

	                absTotal = parseFloat(_amount + _tipAmount - _refundAmount).toFixed(2);
	                refundId = this.state.refundId;
	                refundDate = this.state.refundDate;
	            }
	            var status = this.payment.status;
	            var check = status === 'SUCCESS';

	            var showReceipts = true;
	            if (this.payment.transactionTitle === 'Manual Refund') {
	                showReceipts = false;
	            }
	            return _react2.default.createElement(
	                'div',
	                { className: 'payments' },
	                _react2.default.createElement(
	                    'h2',
	                    null,
	                    'Payment Details'
	                ),
	                _react2.default.createElement(
	                    'div',
	                    { className: 'payments_container' },
	                    showPartialRefunds && _react2.default.createElement(
	                        'div',
	                        { className: 'popup popup_container' },
	                        _react2.default.createElement(
	                            'div',
	                            { className: 'row center row_padding' },
	                            _react2.default.createElement(
	                                'strong',
	                                null,
	                                'Payment Refund'
	                            )
	                        ),
	                        _react2.default.createElement(
	                            'div',
	                            { className: 'row center row_padding' },
	                            _react2.default.createElement(
	                                'div',
	                                { className: 'input_title' },
	                                'Enter Refund Amount:'
	                            ),
	                            _react2.default.createElement('input', { className: 'input_input', type: 'text', value: partialRefundAmount, onChange: this.changePartialRefundAmount })
	                        ),
	                        _react2.default.createElement(
	                            'div',
	                            { className: 'row center row_padding' },
	                            _react2.default.createElement(_ButtonNormal2.default, { title: 'Make Full Refund', extra: 'partial_refund_button', color: 'white', onClick: this.makeRefund, disabled: this.state.fullRefundDisabled }),
	                            _react2.default.createElement(_ButtonNormal2.default, { title: 'Make Partial Refund', extra: 'partial_refund_button', color: 'white', onClick: this.makePartialRefund })
	                        )
	                    ),
	                    _react2.default.createElement(
	                        'div',
	                        { className: 'payments_all_details' },
	                        _react2.default.createElement(
	                            'div',
	                            { className: 'payments_list' },
	                            _react2.default.createElement(
	                                'div',
	                                { className: 'paymentDetails' },
	                                _react2.default.createElement(
	                                    'div',
	                                    { className: 'space_between_row space_under' },
	                                    _react2.default.createElement(
	                                        'div',
	                                        null,
	                                        _react2.default.createElement(
	                                            'strong',
	                                            null,
	                                            this.payment.transactionTitle
	                                        )
	                                    ),
	                                    _react2.default.createElement(
	                                        'div',
	                                        { className: 'middle_grow' },
	                                        _react2.default.createElement(
	                                            'strong',
	                                            null,
	                                            date.toLocaleDateString([], { month: 'long', day: 'numeric', year: 'numeric' }),
	                                            '  \u2022  ',
	                                            date.toLocaleTimeString()
	                                        )
	                                    ),
	                                    _react2.default.createElement(
	                                        'div',
	                                        null,
	                                        _react2.default.createElement(
	                                            'strong',
	                                            null,
	                                            total
	                                        )
	                                    ),
	                                    showReceipts && _react2.default.createElement(
	                                        'span',
	                                        { className: 'show_receipts', onClick: this.showReceiptsSale },
	                                        'RECEIPTS'
	                                    )
	                                ),
	                                check && _react2.default.createElement(
	                                    'div',
	                                    { className: 'row font_15' },
	                                    _react2.default.createElement(_Checkmark2.default, { 'class': 'checkmark_small' }),
	                                    _react2.default.createElement(
	                                        'div',
	                                        { className: 'payment_successful' },
	                                        'Payment successful'
	                                    )
	                                ),
	                                _react2.default.createElement(
	                                    'div',
	                                    { className: 'payment_details_list' },
	                                    _react2.default.createElement(_PaymentRow2.default, { left: 'Tender:', right: tender }),
	                                    _react2.default.createElement(_PaymentRow2.default, { left: 'Card Details:', right: cardDetails }),
	                                    _react2.default.createElement(_PaymentRow2.default, { left: 'Employee:', right: employee }),
	                                    _react2.default.createElement(_PaymentRow2.default, { left: 'Device ID:', right: deviceId }),
	                                    _react2.default.createElement(_PaymentRow2.default, { left: 'Payment ID:', right: paymentId }),
	                                    _react2.default.createElement(_PaymentRow2.default, { left: 'Entry Method:', right: entryMethod }),
	                                    _react2.default.createElement(_PaymentRow2.default, { left: 'Transaction Type:', right: transactionType }),
	                                    _react2.default.createElement(_PaymentRow2.default, { left: 'Transaction State:', right: transactionState })
	                                )
	                            ),
	                            showTips && _react2.default.createElement(
	                                'div',
	                                { className: 'payment_section' },
	                                _react2.default.createElement(
	                                    'div',
	                                    { className: 'space_between_row space_under' },
	                                    _react2.default.createElement(
	                                        'div',
	                                        null,
	                                        _react2.default.createElement(
	                                            'strong',
	                                            null,
	                                            'Tip'
	                                        )
	                                    ),
	                                    _react2.default.createElement(
	                                        'div',
	                                        null,
	                                        _react2.default.createElement(
	                                            'strong',
	                                            null,
	                                            '$',
	                                            tipAmount
	                                        )
	                                    )
	                                )
	                            ),
	                            showRefunds && _react2.default.createElement(
	                                'div',
	                                { className: 'payment_section' },
	                                this.payment.refunds.map(function (refund, i) {
	                                    return _react2.default.createElement(
	                                        'div',
	                                        { key: "refund-" + i, className: 'paymentDetails' },
	                                        _react2.default.createElement(
	                                            'div',
	                                            { className: 'space_between_row space_under' },
	                                            _react2.default.createElement(
	                                                'div',
	                                                null,
	                                                _react2.default.createElement(
	                                                    'strong',
	                                                    null,
	                                                    'Refund'
	                                                )
	                                            ),
	                                            _react2.default.createElement(
	                                                'div',
	                                                { className: 'middle_grow' },
	                                                _react2.default.createElement(
	                                                    'strong',
	                                                    null,
	                                                    refundDate.toLocaleDateString([], { month: 'long', day: 'numeric', year: 'numeric' }),
	                                                    '  \u2022  ',
	                                                    refundDate.toLocaleTimeString()
	                                                )
	                                            ),
	                                            _react2.default.createElement(
	                                                'div',
	                                                { className: 'red_text' },
	                                                _react2.default.createElement(
	                                                    'strong',
	                                                    null,
	                                                    '(',
	                                                    _this2.formatter.formatCurrency(refund.amount),
	                                                    ')'
	                                                )
	                                            )
	                                        ),
	                                        _react2.default.createElement(
	                                            'div',
	                                            { className: 'row font_15' },
	                                            _react2.default.createElement(_Checkmark2.default, { 'class': 'checkmark_small' }),
	                                            _react2.default.createElement(
	                                                'div',
	                                                { className: 'payment_successful' },
	                                                'Refund successful'
	                                            )
	                                        ),
	                                        _react2.default.createElement(
	                                            'div',
	                                            { className: 'payment_details_list' },
	                                            _react2.default.createElement(_PaymentRow2.default, { left: 'Tender:', right: 'to ' + tender }),
	                                            _react2.default.createElement(_PaymentRow2.default, { left: 'Employee:', right: employee }),
	                                            _react2.default.createElement(_PaymentRow2.default, { left: 'Device ID:', right: deviceId }),
	                                            _react2.default.createElement(_PaymentRow2.default, { left: 'Refund ID:', right: refundId })
	                                        )
	                                    );
	                                }, this)
	                            ),
	                            _react2.default.createElement(
	                                'div',
	                                { className: 'payment_section' },
	                                _react2.default.createElement(
	                                    'div',
	                                    { className: 'space_between_row space_under' },
	                                    _react2.default.createElement(
	                                        'div',
	                                        null,
	                                        _react2.default.createElement(
	                                            'strong',
	                                            null,
	                                            'Total'
	                                        )
	                                    ),
	                                    _react2.default.createElement(
	                                        'div',
	                                        null,
	                                        _react2.default.createElement(
	                                            'strong',
	                                            null,
	                                            '$',
	                                            absTotal
	                                        )
	                                    )
	                                )
	                            ),
	                            showTipAdj && _react2.default.createElement(
	                                'div',
	                                { className: 'popup_container popup' },
	                                _react2.default.createElement(
	                                    'h4',
	                                    null,
	                                    'Adjust Tip Amount:'
	                                ),
	                                _react2.default.createElement(
	                                    'div',
	                                    { className: 'tip_adjust_input' },
	                                    _react2.default.createElement(
	                                        'span',
	                                        { className: 'dollar_span' },
	                                        '$'
	                                    ),
	                                    _react2.default.createElement('input', { id: 'adjustTip', type: 'number', min: '0.01', step: '0.01', defaultValue: tipAmount, onChange: this.handleChange })
	                                ),
	                                _react2.default.createElement(_ButtonNormal2.default, { title: 'Save', color: 'white', extra: 'row_padding', onClick: this.finishAdjustTip })
	                            )
	                        )
	                    ),
	                    _react2.default.createElement(
	                        'div',
	                        { className: 'column' },
	                        _react2.default.createElement(_ButtonNormal2.default, { title: 'Refund', color: 'red', extra: 'add_tip', onClick: this.handleRefund, disabled: this.state.refundDisabled }),
	                        _react2.default.createElement(_ButtonNormal2.default, { title: 'Void Payment', color: 'white', extra: 'add_tip', onClick: this.voidPayment, disabled: this.state.refundDisabled }),
	                        showTipButton && _react2.default.createElement(_ButtonNormal2.default, { title: tipText, color: 'white', extra: 'add_tip', onClick: this.adjustTip, disabled: this.state.refundDisabled })
	                    )
	                )
	            );
	        }
	    }]);

	    return Payment;
	}(_react2.default.Component);

	exports.default = Payment;

/***/ }),
/* 523 */
/***/ (function(module, exports, __webpack_require__) {

	"use strict";

	Object.defineProperty(exports, "__esModule", {
	    value: true
	});

	var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

	var _react = __webpack_require__(4);

	var _react2 = _interopRequireDefault(_react);

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

	function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

	function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

	var PaymentRow = function (_React$Component) {
	    _inherits(PaymentRow, _React$Component);

	    function PaymentRow() {
	        _classCallCheck(this, PaymentRow);

	        return _possibleConstructorReturn(this, (PaymentRow.__proto__ || Object.getPrototypeOf(PaymentRow)).apply(this, arguments));
	    }

	    _createClass(PaymentRow, [{
	        key: "render",
	        value: function render() {
	            var left = this.props.left;
	            var right = this.props.right;

	            return _react2.default.createElement(
	                "div",
	                { className: "payment_row" },
	                _react2.default.createElement(
	                    "div",
	                    { className: "payment_row_left" },
	                    left
	                ),
	                _react2.default.createElement(
	                    "div",
	                    { className: "payment_row_right" },
	                    right
	                )
	            );
	        }
	    }]);

	    return PaymentRow;
	}(_react2.default.Component);

	exports.default = PaymentRow;

/***/ }),
/* 524 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';

	Object.defineProperty(exports, "__esModule", {
	    value: true
	});

	var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

	var _ButtonNormal = __webpack_require__(41);

	var _ButtonNormal2 = _interopRequireDefault(_ButtonNormal);

	var _react = __webpack_require__(4);

	var _react2 = _interopRequireDefault(_react);

	var _TitleBar = __webpack_require__(105);

	var _TitleBar2 = _interopRequireDefault(_TitleBar);

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

	function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

	function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

	var PreAuth = function (_React$Component) {
	    _inherits(PreAuth, _React$Component);

	    function PreAuth() {
	        _classCallCheck(this, PreAuth);

	        return _possibleConstructorReturn(this, (PreAuth.__proto__ || Object.getPrototypeOf(PreAuth)).apply(this, arguments));
	    }

	    _createClass(PreAuth, [{
	        key: 'render',
	        value: function render() {
	            return _react2.default.createElement(
	                'div',
	                { className: 'column' },
	                _react2.default.createElement(
	                    'div',
	                    { className: 'card_list' },
	                    _react2.default.createElement(_TitleBar2.default, { title: 'PreAuths' })
	                ),
	                _react2.default.createElement(
	                    'div',
	                    { className: 'cards_footer' },
	                    _react2.default.createElement('div', { className: 'filler_space' }),
	                    _react2.default.createElement(_ButtonNormal2.default, { title: 'PreAuth Card', color: 'white' })
	                )
	            );
	        }
	    }]);

	    return PreAuth;
	}(_react2.default.Component);

	exports.default = PreAuth;

/***/ }),
/* 525 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';

	Object.defineProperty(exports, "__esModule", {
	    value: true
	});

	var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

	var _ButtonNormal = __webpack_require__(41);

	var _ButtonNormal2 = _interopRequireDefault(_ButtonNormal);

	var _react = __webpack_require__(4);

	var _react2 = _interopRequireDefault(_react);

	var _remotePayCloud = __webpack_require__(57);

	var _remotePayCloud2 = _interopRequireDefault(_remotePayCloud);

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

	function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

	function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

	var RecoveryOptions = function (_React$Component) {
	    _inherits(RecoveryOptions, _React$Component);

	    function RecoveryOptions(props) {
	        _classCallCheck(this, RecoveryOptions);

	        var _this = _possibleConstructorReturn(this, (RecoveryOptions.__proto__ || Object.getPrototypeOf(RecoveryOptions)).call(this, props));

	        _this.state = {
	            keepPaymentPopupOpen: false,
	            queryPaymentText: 'JANRZXDFT3JF',
	            showPaymentPopup: false,
	            showReset: false
	        };
	        _this.cloverConnector = _this.props.cloverConnection.cloverConnector;
	        _this.fadeBackground = _this.props.fadeBackground;
	        _this.unfadeBackground = _this.props.unfadeBackground;

	        _this.addPaymentID = _this.addPaymentID.bind(_this);
	        _this.closePaymentID = _this.closePaymentID.bind(_this);
	        _this.dismissReset = _this.dismissReset.bind(_this);
	        _this.getDeviceStatus = _this.getDeviceStatus.bind(_this);
	        _this.getDeviceStatusResend = _this.getDeviceStatusResend.bind(_this);
	        _this.getPendingPayments = _this.getPendingPayments.bind(_this);
	        _this.queryPayment = _this.queryPayment.bind(_this);
	        _this.queryPaymentChange = _this.queryPaymentChange.bind(_this);
	        _this.resetClicked = _this.resetClicked.bind(_this);
	        _this.resetDevice = _this.resetDevice.bind(_this);
	        return _this;
	    }

	    _createClass(RecoveryOptions, [{
	        key: 'resetDevice',
	        value: function resetDevice() {
	            // tells Clover device to reset
	            this.unfadeBackground();
	            console.log('resetting device');
	            this.cloverConnector.resetDevice();
	            this.dismissReset();
	        }
	    }, {
	        key: 'resetClicked',
	        value: function resetClicked() {
	            // shows reset confirmation popup
	            this.fadeBackground();
	            this.setState({ showReset: true });
	        }
	    }, {
	        key: 'dismissReset',
	        value: function dismissReset() {
	            // dismisses reset confirmation popup
	            this.unfadeBackground();
	            this.setState({ showReset: false });
	        }
	    }, {
	        key: 'addPaymentID',
	        value: function addPaymentID() {
	            // shows query payment by id popup
	            this.fadeBackground();
	            this.setState({ showPaymentPopup: true });
	        }
	    }, {
	        key: 'queryPaymentChange',
	        value: function queryPaymentChange(e) {
	            // handles query by payment id text (id) change
	            this.setState({ queryPaymentText: e.target.value });
	        }
	    }, {
	        key: 'queryPayment',
	        value: function queryPayment() {
	            // queries payment by payment id
	            this.unfadeBackground();
	            var externalPaymentId = this.state.queryPaymentText;
	            this.closePaymentID();
	            var request = new _remotePayCloud2.default.sdk.remotepay.RetrievePaymentRequest();
	            request.setExternalPaymentId(externalPaymentId);
	            console.log('RetrievePaymentRequest', request);
	            this.cloverConnector.retrievePayment(request);
	        }
	    }, {
	        key: 'closePaymentID',
	        value: function closePaymentID() {
	            // closes query by payment id popup
	            this.unfadeBackground();
	            this.setState({ showPaymentPopup: false });
	        }
	    }, {
	        key: 'getDeviceStatus',
	        value: function getDeviceStatus() {
	            // gets Clover device status
	            var request = new _remotePayCloud2.default.sdk.remotepay.RetrieveDeviceStatusRequest(false);
	            console.log('RetrieveDeviceStatusRequest', request);
	            this.cloverConnector.retrieveDeviceStatus(request);
	        }
	    }, {
	        key: 'getDeviceStatusResend',
	        value: function getDeviceStatusResend() {
	            // gets Clover device status and resends last device activity
	            var request = new _remotePayCloud2.default.sdk.remotepay.RetrieveDeviceStatusRequest(true);
	            console.log('RetrieveDeviceStatusRequest', request);
	            this.cloverConnector.retrieveDeviceStatus(request);
	        }
	    }, {
	        key: 'getPendingPayments',
	        value: function getPendingPayments() {
	            // gets pending payments
	            console.log('retrieving pending payments');
	            this.cloverConnector.retrievePendingPayments();
	        }
	    }, {
	        key: 'render',
	        value: function render() {
	            var reset = this.state.showReset;
	            var showPaymentId = this.state.showPaymentPopup;

	            return _react2.default.createElement(
	                'div',
	                { className: 'recovery_options' },
	                reset && _react2.default.createElement(
	                    'div',
	                    { className: 'reset_warning popup' },
	                    _react2.default.createElement(
	                        'p',
	                        null,
	                        'Are you sure you want to reset the device?'
	                    ),
	                    _react2.default.createElement(
	                        'p',
	                        null,
	                        'Warning: You may lose any pending transaction information.'
	                    ),
	                    _react2.default.createElement(
	                        'div',
	                        { className: 'reject_accept' },
	                        _react2.default.createElement(_ButtonNormal2.default, { color: 'white', extra: 'left dialog_button', title: 'No', onClick: this.dismissReset }),
	                        _react2.default.createElement(_ButtonNormal2.default, { color: 'red', extra: 'right dialog_button', title: 'Yes', onClick: this.resetDevice })
	                    )
	                ),
	                showPaymentId && _react2.default.createElement(
	                    'div',
	                    { className: 'enter_payment_id popup' },
	                    _react2.default.createElement(
	                        'div',
	                        { className: 'close_popup', onClick: this.closePaymentID },
	                        'X'
	                    ),
	                    _react2.default.createElement(
	                        'div',
	                        { className: 'payment_id_body' },
	                        _react2.default.createElement(
	                            'div',
	                            { className: 'row center row_padding' },
	                            _react2.default.createElement(
	                                'div',
	                                { className: 'input_title' },
	                                'Enter Payment ID:'
	                            ),
	                            _react2.default.createElement('input', { className: 'input_input', type: 'text', onChange: this.queryPaymentChange, value: this.state.queryPaymentText })
	                        ),
	                        _react2.default.createElement(
	                            'div',
	                            { className: 'row center margin_top' },
	                            _react2.default.createElement(_ButtonNormal2.default, { title: 'Lookup', extra: 'preauth_button', color: 'white', onClick: this.queryPayment })
	                        )
	                    )
	                ),
	                _react2.default.createElement(
	                    'h2',
	                    null,
	                    'Recovery Options'
	                ),
	                _react2.default.createElement(_ButtonNormal2.default, { title: 'Reset', color: 'white', extra: 'button_large', onClick: this.resetClicked }),
	                _react2.default.createElement(_ButtonNormal2.default, { title: 'Payment by ID', color: 'white', extra: 'button_large', onClick: this.addPaymentID }),
	                _react2.default.createElement(_ButtonNormal2.default, { title: 'Pending Payments', color: 'white', extra: 'button_large', onClick: this.getPendingPayments }),
	                _react2.default.createElement(_ButtonNormal2.default, { title: 'Device Status', color: 'white', extra: 'button_large', onClick: this.getDeviceStatus }),
	                _react2.default.createElement(_ButtonNormal2.default, { title: 'Device Status (w/message resend)', color: 'white', extra: 'button_large', onClick: this.getDeviceStatusResend })
	            );
	        }
	    }]);

	    return RecoveryOptions;
	}(_react2.default.Component);

	exports.default = RecoveryOptions;

/***/ }),
/* 526 */
/***/ (function(module, exports, __webpack_require__) {

	"use strict";

	Object.defineProperty(exports, "__esModule", {
	    value: true
	});

	var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

	var _react = __webpack_require__(4);

	var _react2 = _interopRequireDefault(_react);

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

	function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

	function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

	var RefundRow = function (_React$Component) {
	    _inherits(RefundRow, _React$Component);

	    function RefundRow(props) {
	        _classCallCheck(this, RefundRow);

	        var _this = _possibleConstructorReturn(this, (RefundRow.__proto__ || Object.getPrototypeOf(RefundRow)).call(this, props));

	        _this.refund = _this.props.refund;
	        return _this;
	    }

	    _createClass(RefundRow, [{
	        key: "render",
	        value: function render() {
	            var amount = parseFloat(this.refund.amount).toFixed(2);
	            var date = this.refund.date;

	            return _react2.default.createElement(
	                "div",
	                { className: "refund_row" },
	                _react2.default.createElement(
	                    "div",
	                    null,
	                    date.toLocaleDateString(),
	                    " ",
	                    date.toLocaleTimeString()
	                ),
	                _react2.default.createElement(
	                    "div",
	                    null,
	                    _react2.default.createElement(
	                        "strong",
	                        null,
	                        "$",
	                        amount
	                    )
	                )
	            );
	        }
	    }]);

	    return RefundRow;
	}(_react2.default.Component);

	exports.default = RefundRow;

/***/ }),
/* 527 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';

	Object.defineProperty(exports, "__esModule", {
	    value: true
	});

	var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

	var _reactRouter = __webpack_require__(61);

	var _ButtonNormal = __webpack_require__(41);

	var _ButtonNormal2 = _interopRequireDefault(_ButtonNormal);

	var _remotePayCloud = __webpack_require__(57);

	var _remotePayCloud2 = _interopRequireDefault(_remotePayCloud);

	var _CurrencyFormatter = __webpack_require__(27);

	var _CurrencyFormatter2 = _interopRequireDefault(_CurrencyFormatter);

	var _react = __webpack_require__(4);

	var _react2 = _interopRequireDefault(_react);

	var _Refund = __webpack_require__(177);

	var _Refund2 = _interopRequireDefault(_Refund);

	var _RefundRow = __webpack_require__(526);

	var _RefundRow2 = _interopRequireDefault(_RefundRow);

	var _TitleBar = __webpack_require__(105);

	var _TitleBar2 = _interopRequireDefault(_TitleBar);

	var _TransactionRow = __webpack_require__(279);

	var _TransactionRow2 = _interopRequireDefault(_TransactionRow);

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

	function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

	function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

	var Refunds = function (_React$Component) {
	    _inherits(Refunds, _React$Component);

	    function Refunds(props) {
	        _classCallCheck(this, Refunds);

	        var _this = _possibleConstructorReturn(this, (Refunds.__proto__ || Object.getPrototypeOf(Refunds)).call(this, props));

	        _this.cloverConnector = _this.props.cloverConnection.cloverConnector;
	        _this.formatter = new _CurrencyFormatter2.default();
	        _this.store = _this.props.store;
	        _this.state = {
	            refundAmount: 0,
	            refunds: _this.store.getRefunds()
	        };

	        _this.goToRefund = _this.goToRefund.bind(_this);
	        _this.handleChange = _this.handleChange.bind(_this);
	        _this.makeRefund = _this.makeRefund.bind(_this);
	        return _this;
	    }

	    _createClass(Refunds, [{
	        key: 'handleChange',
	        value: function handleChange(e) {
	            // handles refund amount change
	            this.setState({ refundAmount: e.target.value });
	        }
	    }, {
	        key: 'makeRefund',
	        value: function makeRefund() {
	            // makes manual refund
	            var externalPaymentID = _remotePayCloud2.default.CloverID.getNewId();
	            document.getElementById('refund_input').value = '0.00';

	            var request = new _remotePayCloud2.default.sdk.remotepay.ManualRefundRequest();
	            request.setExternalId(externalPaymentID);
	            request.setAmount(this.formatter.convertFromFloat(this.state.refundAmount));
	            request.setCardEntryMethods(this.store.getCardEntryMethods());
	            this.setState({ refundAmount: 0 });
	            console.log('ManualRefundRequest', request);
	            this.cloverConnector.manualRefund(request);
	        }
	    }, {
	        key: 'goToRefund',
	        value: function goToRefund(refund) {
	            _reactRouter.browserHistory.push({ pathname: '/payment', state: { type: 'refund', refund: refund.id } });
	        }
	    }, {
	        key: 'render',
	        value: function render() {
	            var refunds = this.store.getRefunds();
	            var refundAmount = this.state.refundAmount !== undefined ? this.formatter.convertToFloatDisplay(this.state.refundAmount) : '';

	            return _react2.default.createElement(
	                'div',
	                { className: 'refunds' },
	                _react2.default.createElement(
	                    'div',
	                    { className: 'make_refund' },
	                    _react2.default.createElement(
	                        'div',
	                        null,
	                        'Enter the Refund Amount:'
	                    ),
	                    _react2.default.createElement('input', { id: 'refund_input', className: 'refund_input', type: 'text', value: refundAmount, onChange: this.handleChange }),
	                    _react2.default.createElement(_ButtonNormal2.default, { extra: 'refund_button', title: 'Make Refund', color: 'white', onClick: this.makeRefund })
	                ),
	                _react2.default.createElement(_TitleBar2.default, { title: 'Refunds' }),
	                refunds.map(function (refund, i) {
	                    return _react2.default.createElement(_TransactionRow2.default, { key: "refund-" + i, transaction: refund, onClick: this.goToRefund });
	                }, this)
	            );
	        }
	    }]);

	    return Refunds;
	}(_react2.default.Component);

	exports.default = Refunds;

/***/ }),
/* 528 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';

	Object.defineProperty(exports, "__esModule", {
	    value: true
	});

	var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

	var _AvailableDiscount = __webpack_require__(508);

	var _AvailableDiscount2 = _interopRequireDefault(_AvailableDiscount);

	var _AvailableItem = __webpack_require__(509);

	var _AvailableItem2 = _interopRequireDefault(_AvailableItem);

	var _ButtonNormal = __webpack_require__(41);

	var _ButtonNormal2 = _interopRequireDefault(_ButtonNormal);

	var _remotePayCloud = __webpack_require__(57);

	var _remotePayCloud2 = _interopRequireDefault(_remotePayCloud);

	var _CurrencyFormatter = __webpack_require__(27);

	var _CurrencyFormatter2 = _interopRequireDefault(_CurrencyFormatter);

	var _ImageHelper = __webpack_require__(126);

	var _ImageHelper2 = _interopRequireDefault(_ImageHelper);

	var _Order = __webpack_require__(557);

	var _Order2 = _interopRequireDefault(_Order);

	var _OrderPayment = __webpack_require__(283);

	var _OrderPayment2 = _interopRequireDefault(_OrderPayment);

	var _react = __webpack_require__(4);

	var _react2 = _interopRequireDefault(_react);

	var _RegisterLine = __webpack_require__(529);

	var _RegisterLine2 = _interopRequireDefault(_RegisterLine);

	var _RegisterLineItem = __webpack_require__(530);

	var _RegisterLineItem2 = _interopRequireDefault(_RegisterLineItem);

	var _User = __webpack_require__(543);

	var _User2 = _interopRequireDefault(_User);

	var _TipSuggestions = __webpack_require__(544);

	var _TipSuggestions2 = _interopRequireDefault(_TipSuggestions);

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

	function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

	function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

	var data = __webpack_require__(281);

	var Register = function (_React$Component) {
	    _inherits(Register, _React$Component);

	    function Register(props) {
	        _classCallCheck(this, Register);

	        var _this = _possibleConstructorReturn(this, (Register.__proto__ || Object.getPrototypeOf(Register)).call(this, props));

	        _this.state = {
	            acceptOfflineSelection: 'default',
	            allowOfflinePaymentsSelection: 'default',
	            amountExceeded: false,
	            areVaultedCards: false,
	            chipCardEntry: false,
	            confirmChallenges: false,
	            confirmSignature: true,
	            contactlessCardEntry: false,
	            disableDuplicate: false,
	            disablePrinting: false,
	            disableReceipt: false,
	            discount: '',
	            fadeBackground: false,
	            fadeSettingsBackground: false,
	            forceOfflinePaymentSelection: 'default',
	            makingSale: false,
	            manualCardEntry: false,
	            orderItems: [],
	            payNoItems: false,
	            preAuth: null,
	            preAuthAmount: '50.00',
	            preAuthChosen: false,
	            preAuthName: '',
	            promptPreAuth: false,
	            responseFail: false,
	            saveNoItems: false,
	            showPaymentMethods: false,
	            showSaleMethod: false,
	            showSettings: false,
	            showTipSuggestions: false,
	            signatureEntryLocation: 'DEFAULT',
	            sigThreshold: '0.00',
	            subtotal: 0,
	            swipeCardEntry: false,
	            tax: 0,
	            tipAmount: '0.00',
	            tipMode: 'DEFAULT',
	            total: 0
	        };

	        _this.cloverConnector = _this.props.cloverConnection.cloverConnector;
	        _this.closeStatus = _this.props.closeStatus;
	        _this.displayOrder = new _remotePayCloud2.default.sdk.order.DisplayOrder();
	        _this.formatter = new _CurrencyFormatter2.default();
	        _this.imageHelper = new _ImageHelper2.default();
	        _this.saleMethod = null;
	        _this.setStatus = _this.props.setStatus;
	        _this.store = _this.props.store;

	        _this.addDiscount = _this.addDiscount.bind(_this);
	        _this.addToOrder = _this.addToOrder.bind(_this);
	        _this.authChosen = _this.authChosen.bind(_this);
	        _this.cardChosen = _this.cardChosen.bind(_this);
	        _this.choosePaymentMethod = _this.choosePaymentMethod.bind(_this);
	        _this.changePreAuthAmount = _this.changePreAuthAmount.bind(_this);
	        _this.changePreAuthName = _this.changePreAuthName.bind(_this);
	        _this.changeSignatureThreshold = _this.changeSignatureThreshold.bind(_this);
	        _this.changeTipAmount = _this.changeTipAmount.bind(_this);
	        _this.chooseSaleMethod = _this.chooseSaleMethod.bind(_this);
	        _this.closePreAuth = _this.closePreAuth.bind(_this);
	        _this.closeSaleMethod = _this.closeSaleMethod.bind(_this);
	        _this.closeSettings = _this.closeSettings.bind(_this);
	        _this.closePaymentMethods = _this.closePaymentMethods.bind(_this);
	        _this.doPreAuth = _this.doPreAuth.bind(_this);
	        _this.exitPreAuth = _this.exitPreAuth.bind(_this);
	        _this.handleAcceptOfflineChange = _this.handleAcceptOfflineChange.bind(_this);
	        _this.handleAllowOfflineChange = _this.handleAllowOfflineChange.bind(_this);
	        _this.handleForceOfflineChange = _this.handleForceOfflineChange.bind(_this);
	        _this.handleSignatureEntryChange = _this.handleSignatureEntryChange.bind(_this);
	        _this.handleTipModeChange = _this.handleTipModeChange.bind(_this);
	        _this.initSettings = _this.initSettings.bind(_this);
	        _this.isTipNull = _this.isTipNull.bind(_this);
	        _this.makeSale = _this.makeSale.bind(_this);
	        _this.newOrder = _this.newOrder.bind(_this);
	        _this.preAuth = _this.preAuth.bind(_this);
	        _this.preAuthContinue = _this.preAuthContinue.bind(_this);
	        _this.promptPreAuth = _this.promptPreAuth.bind(_this);
	        _this.saleChosen = _this.saleChosen.bind(_this);
	        _this.save = _this.save.bind(_this);
	        _this.saveSettings = _this.saveSettings.bind(_this);
	        _this.saveTipSuggestions = _this.saveTipSuggestions.bind(_this);
	        _this.setTipSuggestions = _this.setTipSuggestions.bind(_this);
	        _this.showTipSuggestions = _this.showTipSuggestions.bind(_this);
	        _this.vaultedCardChosen = _this.vaultedCardChosen.bind(_this);
	        _this.toggleChip = _this.toggleChip.bind(_this);
	        _this.toggleConfirmChallenges = _this.toggleConfirmChallenges.bind(_this);
	        _this.toggleConfirmSignature = _this.toggleConfirmSignature.bind(_this);
	        _this.toggleContactless = _this.toggleContactless.bind(_this);
	        _this.toggleDisableDuplicate = _this.toggleDisableDuplicate.bind(_this);
	        _this.toggleDisablePrinting = _this.toggleDisablePrinting.bind(_this);
	        _this.toggleDisableReceipt = _this.toggleDisableReceipt.bind(_this);
	        _this.toggleManual = _this.toggleManual.bind(_this);
	        _this.toggleSwipe = _this.toggleSwipe.bind(_this);

	        if (_this.store.getCurrentOrder() === null || _this.store.getCurrentOrder().getStatus() !== 'OPEN') {
	            var lastOrder = _this.store.getLastOpenOrder();
	            if (lastOrder === null) {
	                _this.order = new _Order2.default(_this.store.getNextOrderId());
	                _this.store.addOrder(_this.order);
	            } else {
	                _this.order = lastOrder;
	            }
	        } else {
	            _this.order = _this.store.getCurrentOrder();
	        }
	        _this.store.setCurrentOrder(_this.order);
	        if (_this.props.location.state != null) {
	            _this.saleMethod = _this.props.location.state.saleType;
	            if (_this.saleMethod === 'Vaulted' || _this.saleMethod === 'Vaulted PreAuth') {
	                _this.card = _this.props.location.state.card;
	                if (_this.saleMethod === 'Vaulted PreAuth') {
	                    _this.saleMethod = 'PreAuth';
	                }
	            }
	        }
	        return _this;
	    }

	    _createClass(Register, [{
	        key: 'initSettings',
	        value: function initSettings() {
	            // initializes transaction settings
	            var manual = (this.store.cardEntryMethods & _remotePayCloud2.default.CardEntryMethods.CARD_ENTRY_METHOD_MANUAL) === _remotePayCloud2.default.CardEntryMethods.CARD_ENTRY_METHOD_MANUAL;
	            var swipe = (this.store.cardEntryMethods & _remotePayCloud2.default.CardEntryMethods.CARD_ENTRY_METHOD_MAG_STRIPE) === _remotePayCloud2.default.CardEntryMethods.CARD_ENTRY_METHOD_MAG_STRIPE;
	            var chip = (this.store.cardEntryMethods & _remotePayCloud2.default.CardEntryMethods.CARD_ENTRY_METHOD_ICC_CONTACT) === _remotePayCloud2.default.CardEntryMethods.CARD_ENTRY_METHOD_ICC_CONTACT;
	            var contactless = (this.store.cardEntryMethods & _remotePayCloud2.default.CardEntryMethods.CARD_ENTRY_METHOD_NFC_CONTACTLESS) === _remotePayCloud2.default.CardEntryMethods.CARD_ENTRY_METHOD_NFC_CONTACTLESS;
	            var forceOffline = this.getOfflineValueForState(this.store.getForceOfflinePayments());
	            var allowOffline = this.getOfflineValueForState(this.store.getAllowOfflinePayments());
	            var acceptOffline = this.getOfflineValueForState(this.store.getApproveOfflinePaymentWithoutPrompt());
	            var signatureEntry = this.getSignatureValueForState(this.store.getSignatureEntryLocation());
	            var tipMode = this.getTipValueForState(this.store.getTipMode());
	            var tipAmount = this.formatter.convertToFloat(this.store.getTipAmount());
	            var sigThreshold = this.formatter.convertToFloat(this.store.getSignatureThreshold());
	            this.setState({
	                manualCardEntry: manual,
	                swipeCardEntry: swipe,
	                chipCardEntry: chip,
	                contactlessCardEntry: contactless,
	                forceOfflinePaymentSelection: forceOffline,
	                allowOfflinePaymentsSelection: allowOffline,
	                acceptOfflineSelection: acceptOffline,
	                signatureEntryLocation: signatureEntry,
	                tipMode: tipMode,
	                tipAmount: tipAmount,
	                sigThreshold: sigThreshold,
	                disableDuplicate: this.store.getDisableDuplicateChecking(),
	                disableReceipt: this.store.getDisableReceiptOptions(),
	                disablePrinting: this.store.getDisablePrinting(),
	                confirmSignature: this.store.getAutomaticSignatureConfirmation(),
	                confirmChallenges: this.store.getAutomaticPaymentConfirmation()
	            });
	        }
	    }, {
	        key: 'saveSettings',
	        value: function saveSettings() {
	            // saves transaction settings
	            var val = 0;
	            val |= this.state.manualCardEntry ? _remotePayCloud2.default.CardEntryMethods.CARD_ENTRY_METHOD_MANUAL : 0;
	            val |= this.state.swipeCardEntry ? _remotePayCloud2.default.CardEntryMethods.CARD_ENTRY_METHOD_MAG_STRIPE : 0;
	            val |= this.state.chipCardEntry ? _remotePayCloud2.default.CardEntryMethods.CARD_ENTRY_METHOD_ICC_CONTACT : 0;
	            val |= this.state.contactlessCardEntry ? _remotePayCloud2.default.CardEntryMethods.CARD_ENTRY_METHOD_NFC_CONTACTLESS : 0;
	            this.store.setCardEntryMethods(val);
	            //offline settings
	            this.store.setForceOfflinePayments(this.getOfflineValueForStore(this.state.forceOfflinePaymentSelection));
	            this.store.setAllowOfflinePayments(this.getOfflineValueForStore(this.state.allowOfflinePaymentsSelection));
	            this.store.setApproveOfflinePaymentWithoutPrompt(this.getOfflineValueForStore(this.state.acceptOfflineSelection));
	            //signature
	            this.store.setSignatureEntryLocation(this.getSignatureValueForStore(this.state.signatureEntryLocation));
	            //tipMode
	            this.store.setTipMode(this.getTipValueForStore(this.state.tipMode));
	            this.store.setTipAmount(this.formatter.convertFromFloat(this.state.tipAmount));
	            this.store.setSignatureThreshold(this.formatter.convertFromFloat(parseFloat(this.state.sigThreshold).toFixed(2)));
	            this.store.setDisableDuplicateChecking(this.state.disableDuplicate);
	            this.store.setDisableReceiptOptions(this.state.disableReceipt);
	            this.store.setDisablePrinting(this.state.disablePrinting);
	            this.store.setAutomaticSignatureConfirmation(this.state.confirmSignature);
	            this.store.setAutomaticPaymentConfirmation(this.state.confirmChallenges);
	        }
	    }, {
	        key: 'getOfflineValueForStore',
	        value: function getOfflineValueForStore(input) {
	            // gets offline value formatted for store
	            if (input === 'true') {
	                return true;
	            }
	            if (input === 'false') {
	                return false;
	            }
	            if (input === 'default') {
	                return undefined;
	            }
	        }
	    }, {
	        key: 'getOfflineValueForState',
	        value: function getOfflineValueForState(input) {
	            // gets offline value formatted for state
	            if (input === true) {
	                return 'true';
	            }
	            if (input === false) {
	                return 'false';
	            }
	            if (input === undefined) {
	                return 'default';
	            }
	        }
	    }, {
	        key: 'getSignatureValueForStore',
	        value: function getSignatureValueForStore(input) {
	            // gets signature value formatter for store
	            if (input === 'DEFAULT') {
	                return undefined;
	            }
	            if (input === 'ON_SCREEN') {
	                return _remotePayCloud2.default.sdk.payments.DataEntryLocation.ON_SCREEN;
	            }
	            if (input === 'ON_PAPER') {
	                this.setState({ sigThreshold: '0.00' });
	                return _remotePayCloud2.default.sdk.payments.DataEntryLocation.ON_PAPER;
	            }
	            if (input === 'NONE') {
	                this.setState({ sigThreshold: '0.00' });
	                return _remotePayCloud2.default.sdk.payments.DataEntryLocation.NONE;
	            }
	        }
	    }, {
	        key: 'getSignatureValueForState',
	        value: function getSignatureValueForState(input) {
	            // gets signature value formatted for state
	            if (input === undefined) {
	                return 'DEFAULT';
	            }
	            if (input === _remotePayCloud2.default.sdk.payments.DataEntryLocation.ON_SCREEN) {
	                return 'ON_SCREEN';
	            }
	            if (input === _remotePayCloud2.default.sdk.payments.DataEntryLocation.ON_PAPER) {
	                return 'ON_PAPER';
	            }
	            if (input === _remotePayCloud2.default.sdk.payments.DataEntryLocation.NONE) {
	                return 'NONE';
	            }
	        }
	    }, {
	        key: 'getTipValueForStore',
	        value: function getTipValueForStore(input) {
	            // gets tip value formatted for store
	            if (input === 'DEFAULT') {
	                this.setState({ tipAmount: '0.00' });
	                return undefined;
	            }
	            if (input === 'NO_TIP') {
	                this.setState({ tipAmount: '0.00' });
	                return _remotePayCloud2.default.sdk.payments.TipMode.NO_TIP;
	            }
	            if (input === 'ON_SCREEN_BEFORE_PAYMENT') {
	                this.setState({ tipAmount: '0.00' });
	                return _remotePayCloud2.default.sdk.payments.TipMode.ON_SCREEN_BEFORE_PAYMENT;
	            }
	            if (input === 'TIP_PROVIDED') {
	                return _remotePayCloud2.default.sdk.payments.TipMode.TIP_PROVIDED;
	            }
	        }
	    }, {
	        key: 'getTipValueForState',
	        value: function getTipValueForState(input) {
	            // gets tip value formatted for state
	            if (input === undefined) {
	                return 'DEFAULT';
	            }
	            if (input === _remotePayCloud2.default.sdk.payments.TipMode.NO_TIP) {
	                return 'NO_TIP';
	            }
	            if (input === _remotePayCloud2.default.sdk.payments.TipMode.ON_SCREEN_BEFORE_PAYMENT) {
	                return 'ON_SCREEN_BEFORE_PAYMENT';
	            }
	            if (input === _remotePayCloud2.default.sdk.payments.TipMode.TIP_PROVIDED) {
	                return 'TIP_PROVIDED';
	            }
	        }
	    }, {
	        key: 'toggleManual',
	        value: function toggleManual() {
	            // toggles manual card entry
	            this.setState({ manualCardEntry: !this.state.manualCardEntry });
	        }
	    }, {
	        key: 'toggleSwipe',
	        value: function toggleSwipe() {
	            // toggles swipe card entry
	            this.setState({ swipeCardEntry: !this.state.swipeCardEntry });
	        }
	    }, {
	        key: 'toggleChip',
	        value: function toggleChip() {
	            // toggles chip card entry
	            this.setState({ chipCardEntry: !this.state.chipCardEntry });
	        }
	    }, {
	        key: 'toggleContactless',
	        value: function toggleContactless() {
	            // toggles contactless card entry
	            this.setState({ contactlessCardEntry: !this.state.contactlessCardEntry });
	        }
	    }, {
	        key: 'toggleDisableDuplicate',
	        value: function toggleDisableDuplicate() {
	            // toggles disable duplicates setting
	            this.setState({ disableDuplicate: !this.state.disableDuplicate });
	        }
	    }, {
	        key: 'toggleDisableReceipt',
	        value: function toggleDisableReceipt() {
	            // toggles disable receipt selection setting
	            this.setState({ disableReceipt: !this.state.disableReceipt });
	        }
	    }, {
	        key: 'toggleDisablePrinting',
	        value: function toggleDisablePrinting() {
	            // toggles disable printing setting
	            this.setState({ disablePrinting: !this.state.disablePrinting });
	        }
	    }, {
	        key: 'toggleConfirmSignature',
	        value: function toggleConfirmSignature() {
	            // toggles confrim signature setting
	            this.setState({ confirmSignature: !this.state.confirmSignature });
	        }
	    }, {
	        key: 'toggleConfirmChallenges',
	        value: function toggleConfirmChallenges() {
	            // toggles confirm challenges setting
	            this.setState({ confirmChallenges: !this.state.confirmChallenges });
	        }
	    }, {
	        key: 'handleForceOfflineChange',
	        value: function handleForceOfflineChange(changeEvent) {
	            // handles force offline change
	            this.setState({ forceOfflinePaymentSelection: changeEvent.target.value });
	        }
	    }, {
	        key: 'handleAllowOfflineChange',
	        value: function handleAllowOfflineChange(changeEvent) {
	            // handles allow offline change
	            this.setState({ allowOfflinePaymentsSelection: changeEvent.target.value });
	        }
	    }, {
	        key: 'handleAcceptOfflineChange',
	        value: function handleAcceptOfflineChange(changeEvent) {
	            // handles accept offline change
	            this.setState({ acceptOfflineSelection: changeEvent.target.value });
	        }
	    }, {
	        key: 'handleSignatureEntryChange',
	        value: function handleSignatureEntryChange(e) {
	            // handles signature entry change
	            this.setState({ signatureEntryLocation: e.target.value });
	        }
	    }, {
	        key: 'handleTipModeChange',
	        value: function handleTipModeChange(e) {
	            // handles tip mode change
	            this.setState({ tipMode: e.target.value });
	        }
	    }, {
	        key: 'changeTipAmount',
	        value: function changeTipAmount(e) {
	            // handles tip amount change for tip provided
	            this.setState({ tipAmount: e.target.value });
	        }
	    }, {
	        key: 'changeSignatureThreshold',
	        value: function changeSignatureThreshold(e) {
	            // handles signature threshold change
	            this.setState({ sigThreshold: e.target.value });
	        }
	    }, {
	        key: 'closePreAuth',
	        value: function closePreAuth() {
	            // closes pre auth popup
	            this.setState({ preAuthChosen: false });
	        }
	    }, {
	        key: 'saveTipSuggestions',
	        value: function saveTipSuggestions(tipSuggestion1, tipSuggestion2, tipSuggestion3, tipSuggestion4) {
	            // saves tip suggestions to the store
	            this.unfadeBackgroundSettings();
	            this.setState({ showTipSuggestions: false });
	            this.store.tipSuggestion1 = tipSuggestion1;
	            this.store.tipSuggestion2 = tipSuggestion2;
	            this.store.tipSuggestion3 = tipSuggestion3;
	            this.store.tipSuggestion4 = tipSuggestion4;
	        }
	    }, {
	        key: 'showTipSuggestions',
	        value: function showTipSuggestions() {
	            this.fadeBackgroundSettings();
	            this.setState({ showTipSuggestions: true });
	        }
	    }, {
	        key: 'addToOrder',
	        value: function addToOrder(id, title, price, tippable, taxable) {
	            // adds available item to order
	            this.order.addItem(id, title, price, tippable, taxable);
	            this.setState({
	                orderItems: this.order.getDisplayItems(),
	                subtotal: this.order.getPreTaxSubTotal(),
	                tax: this.order.getTaxAmount(),
	                total: this.order.getTotal(),
	                payNoItems: false,
	                saveNoItems: false
	            });
	            if (this.saleMethod === 'PreAuth') {
	                if (parseFloat(this.order.getTotal()) > parseFloat(this.state.preAuthAmount)) {
	                    this.setState({ amountExceeded: true });
	                }
	            }
	            this.updateDisplayOrder();
	        }
	    }, {
	        key: 'updateDisplayOrder',
	        value: function updateDisplayOrder() {
	            // updates display order on Clover device
	            this.displayOrder.setLineItems(this.order.getDisplayItems());
	            this.displayOrder.setSubtotal('$' + parseFloat(this.order.getPreTaxSubTotal()).toFixed(2));
	            this.displayOrder.setTax('$' + parseFloat(this.order.getTaxAmount()).toFixed(2));
	            this.displayOrder.setTotal('$' + parseFloat(this.order.getTotal()).toFixed(2));
	            this.cloverConnector.showDisplayOrder(this.displayOrder);
	        }
	    }, {
	        key: 'addDiscount',
	        value: function addDiscount(discount) {
	            // adds discount to current order
	            if (this.order.getDiscount() !== discount) {
	                this.order.addDiscount(discount);
	                this.setState({
	                    discount: discount,
	                    subtotal: this.order.getPreTaxSubTotal(),
	                    tax: this.order.getTaxAmount(),
	                    total: this.order.getTotal(),
	                    payNoItems: false,
	                    saveNoItems: false
	                });
	            } else {
	                this.order.addDiscount(null);
	                this.setState({
	                    discount: '',
	                    subtotal: this.order.getPreTaxSubTotal(),
	                    tax: this.order.getTaxAmount(),
	                    total: this.order.getTotal(),
	                    payNoItems: false,
	                    saveNoItems: false
	                });
	            }
	            this.updateDisplayOrder();
	        }
	    }, {
	        key: 'newOrder',
	        value: function newOrder() {
	            // start new order
	            if (this.state.orderItems.length > 0 && !this.state.showSaleMethod && !this.state.showPaymentMethods && !this.state.showSettings) {
	                var lastOrder = this.store.getLastOpenOrder();
	                if (lastOrder === null) {
	                    this.order = new _Order2.default(this.store.getNextOrderId());
	                    this.store.addOrder(this.order);
	                    this.saleMethod = null;
	                    this.setState({ orderItems: this.order.getItems(), subtotal: 0.00, tax: 0.00, total: 0.00, makingSale: false, preAuth: null });
	                } else {
	                    this.order = lastOrder;
	                    this.saleMethod = null;
	                    this.setState({ orderItems: this.order.getDisplayItems(), subtotal: this.order.getPreTaxSubTotal(), tax: this.order.getTaxAmount(), total: this.order.getTotal(), payNoItems: false, saveNoItems: false });
	                }
	                this.unfadeBackground();
	                this.cloverConnector.showWelcomeScreen();
	                this.store.setCurrentOrder(this.order);
	            }
	        }
	    }, {
	        key: 'save',
	        value: function save() {
	            // saves current order
	            this.setState({ payNoItems: false });
	            if (this.state.orderItems.length > 0) {
	                this.newOrder();
	            } else {
	                this.setState({ saveNoItems: true });
	            };
	        }
	    }, {
	        key: 'choosePaymentMethod',
	        value: function choosePaymentMethod() {
	            // displays popup to choose payment method
	            this.setState({ showPaymentMethods: true, showSettings: false });
	        }
	    }, {
	        key: 'closePaymentMethods',
	        value: function closePaymentMethods() {
	            // closes popup to choose payment method
	            this.setState({ showPaymentMethods: false });
	        }
	    }, {
	        key: 'chooseSaleMethod',
	        value: function chooseSaleMethod() {
	            // display popup to choose a sale method
	            //console.log(this.order);
	            this.initSettings();
	            if (this.state.orderItems.length > 0) {
	                if (this.saleMethod === 'PreAuth') {
	                    this.setState({ makingSale: true, showSettings: true });
	                } else {
	                    this.setState({ showSaleMethod: true, makingSale: true });
	                }
	                this.fadeBackground();
	            } else {
	                this.setState({ payNoItems: true, saveNoItems: false });
	            }
	        }
	    }, {
	        key: 'closeSaleMethod',
	        value: function closeSaleMethod() {
	            // closes popup to choose a sale method
	            this.setState({ showSaleMethod: false, makingSale: false, fadeBackground: false });
	        }
	    }, {
	        key: 'closeSettings',
	        value: function closeSettings() {
	            // closes transaction settings popup
	            this.setState({ showSettings: false, makingSale: false, fadeBackground: false });
	        }
	    }, {
	        key: 'exitPreAuth',
	        value: function exitPreAuth() {
	            // exits pre auth transaction
	            this.setState({ promptPreAuth: false, fadeBackground: false });
	            this.saleMethod = null;
	        }
	    }, {
	        key: 'saleChosen',
	        value: function saleChosen() {
	            // choose sale as sale method
	            this.saleMethod = 'Sale';
	            this.setState({ showSettings: true, showSaleMethod: false });
	        }
	    }, {
	        key: 'authChosen',
	        value: function authChosen() {
	            // choose auth as sale method
	            this.saleMethod = 'Auth';
	            this.setState({ showSettings: true, showSaleMethod: false });
	        }
	    }, {
	        key: 'makeSale',
	        value: function makeSale() {
	            // make sake
	            this.saveSettings();
	            if (this.saleMethod === 'Sale' || this.saleMethod === 'Auth') {
	                this.cardChosen();
	            } else if (this.saleMethod === 'Vaulted') {
	                this.vaultedCardChosen();
	            } else if (this.saleMethod === 'PreAuth') {
	                this.setState({ showSettings: false });
	                this.preAuth();
	            }
	            this.unfadeBackground();
	        }
	    }, {
	        key: 'preAuthContinue',
	        value: function preAuthContinue() {
	            // show transaction settings for preauth
	            this.initSettings();
	            this.setState({ promptPreAuth: false });
	            this.doPreAuth();
	        }
	    }, {
	        key: 'promptPreAuth',
	        value: function promptPreAuth() {
	            // show popup for preauth
	            this.setState({ promptPreAuth: true });
	            this.fadeBackground();
	        }
	    }, {
	        key: 'changePreAuthName',
	        value: function changePreAuthName(e) {
	            // handle pre auth name change
	            this.setState({ preAuthName: e.target.value });
	        }
	    }, {
	        key: 'changePreAuthAmount',
	        value: function changePreAuthAmount(e) {
	            // handle pre auth amount change
	            this.setState({ preAuthAmount: e.target.value });
	        }
	    }, {
	        key: 'isTipNull',
	        value: function isTipNull(tipSuggestion) {
	            if (tipSuggestion == null || !tipSuggestion.isEnabled || tipSuggestion.percentage.length < 1) {
	                return null;
	            }
	            return tipSuggestion;
	        }
	    }, {
	        key: 'setTipSuggestions',
	        value: function setTipSuggestions(request) {
	            var tipSuggestion1 = this.isTipNull(this.store.tipSuggestion1);
	            var tipSuggestion2 = this.isTipNull(this.store.tipSuggestion2);
	            var tipSuggestion3 = this.isTipNull(this.store.tipSuggestion3);
	            var tipSuggestion4 = this.isTipNull(this.store.tipSuggestion4);
	            if (tipSuggestion1 == null & tipSuggestion2 == null & tipSuggestion3 == null & tipSuggestion4 == null) {
	                return;
	            } else {
	                request.setTipSuggestions([tipSuggestion1, tipSuggestion2, tipSuggestion3, tipSuggestion4]);
	            }
	        }
	    }, {
	        key: 'doPreAuth',
	        value: function doPreAuth() {
	            // make preauth transaction
	            this.unfadeBackground();
	            this.setState({ promptPreAuth: false });
	            var externalPaymentID = _remotePayCloud2.default.CloverID.getNewId();
	            this.store.getCurrentOrder().setPendingPaymentId(externalPaymentID);
	            var request = new _remotePayCloud2.default.sdk.remotepay.PreAuthRequest();
	            request.setAmount(this.formatter.convertFromFloat(parseFloat(this.state.preAuthAmount).toFixed(2)));
	            request.setExternalId(externalPaymentID);
	            request.setCardEntryMethods(this.store.getCardEntryMethods());
	            request.setDisablePrinting(this.store.getDisablePrinting());
	            request.setDisableReceiptSelection(this.store.getDisableReceiptOptions());
	            request.setDisableDuplicateChecking(this.store.getDisableDuplicateChecking());
	            if (this.card != null) {
	                request.setVaultedCard(this.card.card);
	            }
	            console.log('PreAuthRequest', request);
	            this.cloverConnector.preAuth(request);
	        }
	    }, {
	        key: 'preAuth',
	        value: function preAuth() {
	            // capture pre auth
	            this.setState({ showSettings: false, showPaymentMethods: false });
	            var car = new _remotePayCloud2.default.sdk.remotepay.CapturePreAuthRequest();
	            car.paymentId = this.store.getPreAuthPaymentId();
	            car.amount = this.formatter.convertFromFloat(this.order.getTotal());
	            car.tipAmount = this.store.getTipAmount() == null ? 0 : this.store.getTipAmount();
	            car.disablePrinting = this.store.getDisablePrinting();
	            car.signatureEntryLocation = this.store.getSignatureEntryLocation();
	            car.signatureThreshold = this.store.getSignatureThreshold();
	            car.disableReceiptSelection = this.store.getDisableReceiptOptions();
	            car.disableDuplicateChecking = this.store.getDisableDuplicateChecking();
	            car.autoAcceptPaymentConfirmations = this.store.getAutomaticPaymentConfirmation();
	            car.autoAcceptSignature = this.store.getAutomaticSignatureConfirmation();
	            console.log('CapturePreAuthRequest', car);
	            this.cloverConnector.capturePreAuth(car);
	            this.saleMethod = null;
	        }
	    }, {
	        key: 'makeSaleRequest',
	        value: function makeSaleRequest() {
	            //  returns transaction request for sale
	            var externalPaymentID = _remotePayCloud2.default.CloverID.getNewId();
	            this.store.getCurrentOrder().setPendingPaymentId(externalPaymentID);
	            var request = new _remotePayCloud2.default.sdk.remotepay.SaleRequest();
	            request.setExternalId(externalPaymentID);
	            request.setAmount(this.formatter.convertFromFloat(this.order.getTotal()));
	            request.setTippableAmount(this.formatter.convertFromFloat(this.order.getTippableAmount()));
	            request.setTaxAmount(this.formatter.convertFromFloat(this.order.getTaxAmount()));
	            request.setAllowOfflinePayment(this.store.getAllowOfflinePayments());
	            request.setForceOfflinePayment(this.store.getForceOfflinePayments());
	            request.setApproveOfflinePaymentWithoutPrompt(this.store.getApproveOfflinePaymentWithoutPrompt());
	            request.setCardEntryMethods(this.store.getCardEntryMethods());
	            request.setSignatureEntryLocation(this.store.getSignatureEntryLocation());
	            request.setSignatureThreshold(this.store.getSignatureThreshold());
	            request.setTipMode(this.store.getTipMode());
	            request.setTipAmount(this.store.getTipAmount());
	            request.setDisablePrinting(this.store.getDisablePrinting());
	            request.setDisableReceiptSelection(this.store.getDisableReceiptOptions());
	            request.setDisableDuplicateChecking(this.store.getDisableDuplicateChecking());
	            request.setAutoAcceptPaymentConfirmations(this.store.getAutomaticPaymentConfirmation());
	            request.setAutoAcceptSignature(this.store.getAutomaticSignatureConfirmation());
	            this.setTipSuggestions(request);
	            if (this.card != null) {
	                request.setVaultedCard(this.card.card);
	            }
	            return request;
	        }
	    }, {
	        key: 'makeAuthRequest',
	        value: function makeAuthRequest() {
	            //  returns transaction request for auth
	            var externalPaymentID = _remotePayCloud2.default.CloverID.getNewId();
	            this.store.getCurrentOrder().setPendingPaymentId(externalPaymentID);
	            var request = new _remotePayCloud2.default.sdk.remotepay.AuthRequest();
	            request.setAmount(this.formatter.convertFromFloat(this.order.getTotal()));
	            request.setTippableAmount(this.formatter.convertFromFloat(this.order.getTippableAmount()));
	            request.setTaxAmount(this.formatter.convertFromFloat(this.order.getTaxAmount()));
	            request.setExternalId(externalPaymentID);
	            request.setAllowOfflinePayment(this.store.getAllowOfflinePayments());
	            request.setForceOfflinePayment(this.store.getForceOfflinePayments());
	            request.setApproveOfflinePaymentWithoutPrompt(this.store.getApproveOfflinePaymentWithoutPrompt());
	            request.setCardEntryMethods(this.store.getCardEntryMethods());
	            request.setSignatureEntryLocation(this.store.getSignatureEntryLocation());
	            request.setSignatureThreshold(this.store.getSignatureThreshold());
	            request.setDisablePrinting(this.store.getDisablePrinting());
	            request.setDisableReceiptSelection(this.store.getDisableReceiptOptions());
	            request.setDisableDuplicateChecking(this.store.getDisableDuplicateChecking());
	            request.setAutoAcceptPaymentConfirmations(this.store.getAutomaticPaymentConfirmation());
	            request.setAutoAcceptSignature(this.store.getAutomaticSignatureConfirmation());

	            if (this.card != null) {
	                request.setVaultedCard(this.card.card);
	            }
	            return request;
	        }
	    }, {
	        key: 'cardChosen',
	        value: function cardChosen() {
	            // tells Clover device to make transaction
	            this.setState({ showSettings: false, showPaymentMethods: false });
	            if (this.saleMethod === 'Sale') {
	                var request = this.makeSaleRequest();
	                console.log('SaleRequest', request);
	                this.cloverConnector.sale(request);
	            } else if (this.saleMethod === 'Auth') {
	                var _request = this.makeAuthRequest();
	                console.log('AuthRequest', _request);
	                this.cloverConnector.auth(_request);
	            }
	            this.saleMethod = null;
	        }
	    }, {
	        key: 'vaultedCardChosen',
	        value: function vaultedCardChosen() {
	            // make sale with vaulted card
	            this.setState({ showSettings: false, showPaymentMethods: false });
	            this.store.setCurrentOrder(this.order);
	            var request = this.makeSaleRequest();
	            request.setVaultedCard(this.card.card);
	            console.log('SaleRequest w/ Vaulted', request);
	            this.cloverConnector.sale(request);
	            this.saleMethod = null;
	        }
	    }, {
	        key: 'fadeBackground',
	        value: function fadeBackground() {
	            // fade background for popups
	            this.setState({ fadeBackground: true });
	        }
	    }, {
	        key: 'fadeBackgroundSettings',
	        value: function fadeBackgroundSettings() {
	            this.setState({ fadeSettingsBackground: true });
	        }
	    }, {
	        key: 'unfadeBackground',
	        value: function unfadeBackground() {
	            // unfade background
	            this.setState({ fadeBackground: false });
	        }
	    }, {
	        key: 'unfadeBackgroundSettings',
	        value: function unfadeBackgroundSettings() {
	            // unfade background
	            this.setState({ fadeSettingsBackground: false });
	        }
	    }, {
	        key: 'componentWillReceiveProps',
	        value: function componentWillReceiveProps(newProps) {
	            if (newProps.responseFail) {
	                this.setState({ makingSale: false });
	            } else if (newProps.saleFinished) {
	                if (this.state.makingSale) {
	                    this.setState({ makingSale: false });
	                    this.newOrder();
	                }
	            } else if (newProps.preAuth === true) {
	                var preAuth = this.store.getPreAuth();
	                preAuth.setName(this.state.preAuthName);
	                this.setState({ preAuth: this.store.getPreAuth(), makingSale: false });
	            }
	        }
	    }, {
	        key: 'componentDidMount',
	        value: function componentDidMount() {
	            if (this.saleMethod === 'PreAuth') {
	                this.promptPreAuth();
	            }
	            this.setState({
	                orderItems: this.order.getDisplayItems(),
	                subtotal: this.order.getPreTaxSubTotal(),
	                tax: this.order.getTaxAmount(),
	                total: this.order.getTotal(),
	                payNoItems: false,
	                saveNoItems: false
	            });
	            this.updateDisplayOrder();
	        }
	    }, {
	        key: 'render',
	        value: function render() {
	            var _this2 = this;

	            var cardText = 'Card';
	            var discount = this.state.discount.name;
	            var fadeBackground = this.state.fadeBackground;
	            var fadeSettingsBackground = this.state.fadeSettingsBackground;
	            var isSale = false;
	            var newOrder = 'New Order';
	            var notPreAuth = true;
	            var settingType = 'Sale';
	            var showPayMethods = this.state.showPaymentMethods;
	            var showPreAuth = false;
	            var showPreAuthHeader = false;
	            var preAuthAmount = this.state.preAuthAmount !== undefined ? this.formatter.convertToFloatDisplay(this.state.preAuthAmount) : '';
	            var tipAmount = this.state.tipAmount !== undefined ? this.formatter.convertToFloatDisplay(this.state.tipAmount) : '';
	            var showSaleMethods = this.state.showSaleMethod;
	            var showTipSuggestions = this.state.showTipSuggestions;
	            var showVaultedCard = this.state.areVaultedCards;
	            var vaultedCard = false;

	            if (this.saleMethod !== null) {
	                if (this.saleMethod === 'Sale') {
	                    newOrder = 'New Sale';
	                    isSale = true;
	                } else if (this.saleMethod === 'Auth') {
	                    newOrder = 'New Authorization';
	                    settingType = 'Auth';
	                } else if (this.saleMethod === 'Vaulted') {
	                    newOrder = 'New Customer (Vaulted Card)';
	                    isSale = true;
	                    vaultedCard = true;
	                } else if (this.saleMethod === 'PreAuth') {
	                    newOrder = 'New Tab (PreAuth)';
	                    notPreAuth = false;
	                    settingType = 'PreAuth';
	                }
	            }
	            var orderItems = this.state.orderItems;
	            var promptPreAuth = this.state.promptPreAuth;
	            var subtotal = this.formatter.convertToFloatDisplay(this.state.subtotal);
	            var tax = this.formatter.convertToFloatDisplay(this.state.tax);
	            var total = this.formatter.convertToFloatDisplay(this.state.total);
	            var preAuthPopup = this.state.preAuthChosen;
	            var tipProvided = this.state.tipMode === 'TIP_PROVIDED';
	            var sigThreshold = this.state.signatureEntryLocation !== 'NONE' && this.state.signatureEntryLocation !== 'ON_PAPER';
	            var image = 'images/tender_default.png';
	            if (this.state.preAuth !== null) {
	                showPreAuthHeader = true;
	                image = this.imageHelper.getCardTypeImage(this.state.preAuth.preAuth.payment.cardTransaction.cardType);
	            }
	            var amountExceeded = this.state.amountExceeded;
	            var amountSpan = amountExceeded ? 'red_text' : '';

	            return _react2.default.createElement(
	                'div',
	                { className: 'register' },
	                fadeBackground && _react2.default.createElement('div', { className: 'popup_opaque' }),
	                fadeSettingsBackground && _react2.default.createElement('div', { className: 'popup_opaque_settings' }),
	                promptPreAuth && _react2.default.createElement(
	                    'div',
	                    { className: 'popup popup_container' },
	                    _react2.default.createElement(
	                        'div',
	                        { className: 'close_popup', onClick: this.exitPreAuth },
	                        'X'
	                    ),
	                    _react2.default.createElement(
	                        'div',
	                        { className: 'preauth_prompt' },
	                        _react2.default.createElement(
	                            'div',
	                            { className: 'row center row_padding' },
	                            _react2.default.createElement(
	                                'div',
	                                { className: 'input_title' },
	                                'Enter Name for PreAuth:'
	                            ),
	                            _react2.default.createElement('input', { className: 'input_input', type: 'text', value: this.state.preAuthName, onChange: this.changePreAuthName })
	                        ),
	                        _react2.default.createElement(
	                            'div',
	                            { className: 'row center row_padding' },
	                            _react2.default.createElement(
	                                'div',
	                                { className: 'input_title' },
	                                'Enter Amount for PreAuth:'
	                            ),
	                            _react2.default.createElement('input', { className: 'input_input', type: 'text', value: preAuthAmount, onChange: this.changePreAuthAmount })
	                        ),
	                        _react2.default.createElement(
	                            'div',
	                            { className: 'row center margin_top' },
	                            _react2.default.createElement(_ButtonNormal2.default, { title: 'Continue', extra: 'preauth_button', color: 'white', onClick: this.preAuthContinue })
	                        )
	                    )
	                ),
	                showTipSuggestions && _react2.default.createElement(_TipSuggestions2.default, { tipSuggestion1: this.store.tipSuggestion1, tipSuggestion2: this.store.tipSuggestion2, tipSuggestion3: this.store.tipSuggestion3, tipSuggestion4: this.store.tipSuggestion4, onClick: this.saveTipSuggestions }),
	                this.state.showSettings && _react2.default.createElement(
	                    'div',
	                    { className: 'settings' },
	                    _react2.default.createElement(
	                        'div',
	                        { className: 'close_popup', onClick: this.closeSettings },
	                        'X'
	                    ),
	                    _react2.default.createElement(
	                        'h2',
	                        { className: 'left_margin' },
	                        settingType,
	                        ' Settings'
	                    ),
	                    _react2.default.createElement(
	                        'div',
	                        { className: 'transaction_settings' },
	                        _react2.default.createElement(
	                            'div',
	                            { className: 'settings_left settings_side' },
	                            notPreAuth && _react2.default.createElement(
	                                'div',
	                                { className: 'settings_section' },
	                                _react2.default.createElement(
	                                    'h3',
	                                    null,
	                                    'Card Options'
	                                ),
	                                _react2.default.createElement(
	                                    'div',
	                                    { className: 'settings_row' },
	                                    _react2.default.createElement(
	                                        'div',
	                                        { className: 'setting_title' },
	                                        'Manual'
	                                    ),
	                                    _react2.default.createElement(
	                                        'label',
	                                        { className: 'switch' },
	                                        _react2.default.createElement('input', { type: 'checkbox', ref: 'manual_entry', checked: this.state.manualCardEntry,
	                                            onChange: this.toggleManual }),
	                                        _react2.default.createElement('span', { className: 'slider round' })
	                                    )
	                                ),
	                                _react2.default.createElement(
	                                    'div',
	                                    { className: 'settings_row' },
	                                    _react2.default.createElement(
	                                        'div',
	                                        { className: 'setting_title' },
	                                        'Swipe'
	                                    ),
	                                    _react2.default.createElement(
	                                        'label',
	                                        { className: 'switch' },
	                                        _react2.default.createElement('input', { type: 'checkbox', ref: 'swipe_entry', checked: this.state.swipeCardEntry,
	                                            onChange: this.toggleSwipe }),
	                                        _react2.default.createElement('span', { className: 'slider round' })
	                                    )
	                                ),
	                                _react2.default.createElement(
	                                    'div',
	                                    { className: 'settings_row' },
	                                    _react2.default.createElement(
	                                        'div',
	                                        { className: 'setting_title' },
	                                        'Chip'
	                                    ),
	                                    _react2.default.createElement(
	                                        'label',
	                                        { className: 'switch' },
	                                        _react2.default.createElement('input', { type: 'checkbox', ref: 'chip_entry', checked: this.state.chipCardEntry,
	                                            onChange: this.toggleChip }),
	                                        _react2.default.createElement('span', { className: 'slider round' })
	                                    )
	                                ),
	                                _react2.default.createElement(
	                                    'div',
	                                    { className: 'settings_row' },
	                                    _react2.default.createElement(
	                                        'div',
	                                        { className: 'setting_title' },
	                                        'Contactless'
	                                    ),
	                                    _react2.default.createElement(
	                                        'label',
	                                        { className: 'switch' },
	                                        _react2.default.createElement('input', { type: 'checkbox', ref: 'contactless_entry',
	                                            checked: this.state.contactlessCardEntry,
	                                            onChange: this.toggleContactless }),
	                                        _react2.default.createElement('span', { className: 'slider round' })
	                                    )
	                                )
	                            ),
	                            notPreAuth && _react2.default.createElement(
	                                'div',
	                                { className: 'settings_section' },
	                                _react2.default.createElement(
	                                    'h3',
	                                    null,
	                                    'Offline Payments'
	                                ),
	                                _react2.default.createElement(
	                                    'div',
	                                    { className: 'settings_row' },
	                                    _react2.default.createElement(
	                                        'div',
	                                        null,
	                                        'Force Offline Payment'
	                                    ),
	                                    _react2.default.createElement(
	                                        'form',
	                                        { className: 'row' },
	                                        _react2.default.createElement(
	                                            'div',
	                                            { className: 'row' },
	                                            _react2.default.createElement('input', { className: 'radio_button', type: 'radio', value: 'default', checked: this.state.forceOfflinePaymentSelection === 'default', onChange: this.handleForceOfflineChange }),
	                                            _react2.default.createElement(
	                                                'div',
	                                                null,
	                                                'Default'
	                                            )
	                                        ),
	                                        _react2.default.createElement(
	                                            'div',
	                                            { className: 'row' },
	                                            _react2.default.createElement('input', { className: 'radio_button', type: 'radio', value: 'true', checked: this.state.forceOfflinePaymentSelection === 'true', onChange: this.handleForceOfflineChange }),
	                                            _react2.default.createElement(
	                                                'div',
	                                                null,
	                                                'Yes'
	                                            )
	                                        ),
	                                        _react2.default.createElement(
	                                            'div',
	                                            { className: 'row' },
	                                            _react2.default.createElement('input', { className: 'radio_button', type: 'radio', value: 'false', checked: this.state.forceOfflinePaymentSelection === 'false', onChange: this.handleForceOfflineChange }),
	                                            _react2.default.createElement(
	                                                'div',
	                                                null,
	                                                'No'
	                                            )
	                                        )
	                                    )
	                                ),
	                                _react2.default.createElement(
	                                    'div',
	                                    { className: 'settings_row' },
	                                    _react2.default.createElement(
	                                        'div',
	                                        null,
	                                        'Allow Offline Payments'
	                                    ),
	                                    _react2.default.createElement(
	                                        'form',
	                                        { className: 'row' },
	                                        _react2.default.createElement(
	                                            'div',
	                                            { className: 'row' },
	                                            _react2.default.createElement('input', { className: 'radio_button', type: 'radio', value: 'default', checked: this.state.allowOfflinePaymentsSelection === 'default', onChange: this.handleAllowOfflineChange }),
	                                            _react2.default.createElement(
	                                                'div',
	                                                { className: 'row' },
	                                                'Default'
	                                            )
	                                        ),
	                                        _react2.default.createElement(
	                                            'div',
	                                            { className: 'row' },
	                                            _react2.default.createElement('input', { className: 'radio_button', type: 'radio', value: 'true', checked: this.state.allowOfflinePaymentsSelection === 'true', onChange: this.handleAllowOfflineChange }),
	                                            _react2.default.createElement(
	                                                'div',
	                                                { className: 'row' },
	                                                'Yes'
	                                            )
	                                        ),
	                                        _react2.default.createElement(
	                                            'div',
	                                            { className: 'row' },
	                                            _react2.default.createElement('input', { className: 'radio_button', type: 'radio', value: 'false', checked: this.state.allowOfflinePaymentsSelection === 'false', onChange: this.handleAllowOfflineChange }),
	                                            _react2.default.createElement(
	                                                'div',
	                                                { className: 'row' },
	                                                'No'
	                                            )
	                                        )
	                                    )
	                                ),
	                                _react2.default.createElement(
	                                    'div',
	                                    { className: 'settings_row' },
	                                    _react2.default.createElement(
	                                        'div',
	                                        null,
	                                        'Accept Offline w/o Prompt'
	                                    ),
	                                    _react2.default.createElement(
	                                        'form',
	                                        { className: 'row' },
	                                        _react2.default.createElement(
	                                            'div',
	                                            { className: 'row' },
	                                            _react2.default.createElement('input', { className: 'radio_button', type: 'radio', value: 'default', checked: this.state.acceptOfflineSelection === 'default', onChange: this.handleAcceptOfflineChange }),
	                                            _react2.default.createElement(
	                                                'div',
	                                                { className: 'row' },
	                                                'Default'
	                                            )
	                                        ),
	                                        _react2.default.createElement(
	                                            'div',
	                                            { className: 'row' },
	                                            _react2.default.createElement('input', { className: 'radio_button', type: 'radio', value: 'true', checked: this.state.acceptOfflineSelection === 'true', onChange: this.handleAcceptOfflineChange }),
	                                            _react2.default.createElement(
	                                                'div',
	                                                null,
	                                                'Yes'
	                                            )
	                                        ),
	                                        _react2.default.createElement(
	                                            'div',
	                                            { className: 'row' },
	                                            _react2.default.createElement('input', { className: 'radio_button', type: 'radio', value: 'false', checked: this.state.acceptOfflineSelection === 'false', onChange: this.handleAcceptOfflineChange }),
	                                            _react2.default.createElement(
	                                                'div',
	                                                null,
	                                                'No'
	                                            )
	                                        )
	                                    )
	                                )
	                            ),
	                            !notPreAuth && _react2.default.createElement(
	                                'div',
	                                { className: 'settings_section' },
	                                _react2.default.createElement(
	                                    'h3',
	                                    null,
	                                    'Signatures'
	                                ),
	                                _react2.default.createElement(
	                                    'div',
	                                    { className: 'settings_row' },
	                                    _react2.default.createElement(
	                                        'div',
	                                        null,
	                                        'Signature Entry Location'
	                                    ),
	                                    _react2.default.createElement(
	                                        'select',
	                                        { className: 'setting_select', value: this.state.signatureEntryLocation, onChange: this.handleSignatureEntryChange },
	                                        _react2.default.createElement(
	                                            'option',
	                                            { value: 'DEFAULT' },
	                                            'Default'
	                                        ),
	                                        _react2.default.createElement(
	                                            'option',
	                                            { value: 'ON_SCREEN' },
	                                            'On Screen'
	                                        ),
	                                        _react2.default.createElement(
	                                            'option',
	                                            { value: 'ON_PAPER' },
	                                            'On Paper'
	                                        ),
	                                        _react2.default.createElement(
	                                            'option',
	                                            { value: 'NONE' },
	                                            'None'
	                                        )
	                                    )
	                                ),
	                                sigThreshold && _react2.default.createElement(
	                                    'div',
	                                    { className: 'settings_row' },
	                                    _react2.default.createElement(
	                                        'div',
	                                        null,
	                                        'Signature Threshold'
	                                    ),
	                                    _react2.default.createElement(
	                                        'div',
	                                        null,
	                                        _react2.default.createElement(
	                                            'span',
	                                            { className: 'setting_span' },
	                                            '$'
	                                        ),
	                                        _react2.default.createElement('input', { className: 'setting_input', type: 'text', value: this.state.sigThreshold, onChange: this.changeSignatureThreshold })
	                                    )
	                                )
	                            ),
	                            isSale && _react2.default.createElement(
	                                'div',
	                                { className: 'settings_section' },
	                                _react2.default.createElement(
	                                    'h3',
	                                    null,
	                                    'Tips'
	                                ),
	                                _react2.default.createElement(
	                                    'div',
	                                    { className: 'settings_row' },
	                                    _react2.default.createElement(
	                                        'div',
	                                        null,
	                                        'Tip Mode'
	                                    ),
	                                    _react2.default.createElement(
	                                        'select',
	                                        { className: 'setting_select', value: this.state.tipMode, onChange: this.handleTipModeChange },
	                                        _react2.default.createElement(
	                                            'option',
	                                            { value: 'DEFAULT' },
	                                            'Default'
	                                        ),
	                                        _react2.default.createElement(
	                                            'option',
	                                            { value: 'TIP_PROVIDED' },
	                                            'Tip Provided'
	                                        ),
	                                        _react2.default.createElement(
	                                            'option',
	                                            { value: 'ON_SCREEN_BEFORE_PAYMENT' },
	                                            'On Screen Before Payment'
	                                        ),
	                                        _react2.default.createElement(
	                                            'option',
	                                            { value: 'NO_TIP' },
	                                            'No Tip'
	                                        )
	                                    )
	                                ),
	                                tipProvided && _react2.default.createElement(
	                                    'div',
	                                    { className: 'settings_row' },
	                                    _react2.default.createElement(
	                                        'div',
	                                        null,
	                                        'Tip Amount'
	                                    ),
	                                    _react2.default.createElement('input', { className: 'setting_input', type: 'text', value: tipAmount, onChange: this.changeTipAmount })
	                                ),
	                                _react2.default.createElement(_ButtonNormal2.default, { title: 'Tip Suggestions', color: 'white', extra: 'refund_button', onClick: this.showTipSuggestions })
	                            )
	                        ),
	                        _react2.default.createElement(
	                            'div',
	                            { className: 'settings_right settings_side' },
	                            notPreAuth && _react2.default.createElement(
	                                'div',
	                                { className: 'settings_section' },
	                                _react2.default.createElement(
	                                    'h3',
	                                    null,
	                                    'Signatures'
	                                ),
	                                _react2.default.createElement(
	                                    'div',
	                                    { className: 'settings_row' },
	                                    _react2.default.createElement(
	                                        'div',
	                                        null,
	                                        'Signature Entry Location'
	                                    ),
	                                    _react2.default.createElement(
	                                        'select',
	                                        { className: 'setting_select', value: this.state.signatureEntryLocation, onChange: this.handleSignatureEntryChange },
	                                        _react2.default.createElement(
	                                            'option',
	                                            { value: 'DEFAULT' },
	                                            'Default'
	                                        ),
	                                        _react2.default.createElement(
	                                            'option',
	                                            { value: 'ON_SCREEN' },
	                                            'On Screen'
	                                        ),
	                                        _react2.default.createElement(
	                                            'option',
	                                            { value: 'ON_PAPER' },
	                                            'On Paper'
	                                        ),
	                                        _react2.default.createElement(
	                                            'option',
	                                            { value: 'NONE' },
	                                            'None'
	                                        )
	                                    )
	                                ),
	                                sigThreshold && _react2.default.createElement(
	                                    'div',
	                                    { className: 'settings_row' },
	                                    _react2.default.createElement(
	                                        'div',
	                                        null,
	                                        'Signature Threshold'
	                                    ),
	                                    _react2.default.createElement(
	                                        'div',
	                                        null,
	                                        _react2.default.createElement(
	                                            'span',
	                                            { className: 'setting_span' },
	                                            '$'
	                                        ),
	                                        _react2.default.createElement('input', { className: 'setting_input', type: 'text', value: this.state.sigThreshold, onChange: this.changeSignatureThreshold })
	                                    )
	                                )
	                            ),
	                            _react2.default.createElement(
	                                'div',
	                                { className: 'settings_section' },
	                                _react2.default.createElement(
	                                    'h3',
	                                    null,
	                                    'Payment Acceptance'
	                                ),
	                                _react2.default.createElement(
	                                    'div',
	                                    { className: 'settings_row' },
	                                    _react2.default.createElement(
	                                        'div',
	                                        { className: 'setting_title' },
	                                        'Disable Duplicate Payment Checking'
	                                    ),
	                                    _react2.default.createElement(
	                                        'label',
	                                        { className: 'switch' },
	                                        _react2.default.createElement('input', { type: 'checkbox', checked: this.state.disableDuplicate, onChange: this.toggleDisableDuplicate }),
	                                        _react2.default.createElement('span', { className: 'slider round' })
	                                    )
	                                ),
	                                _react2.default.createElement(
	                                    'div',
	                                    { className: 'settings_row' },
	                                    _react2.default.createElement(
	                                        'div',
	                                        { className: 'setting_title' },
	                                        'Disable Device Receipt Options Screen'
	                                    ),
	                                    _react2.default.createElement(
	                                        'label',
	                                        { className: 'switch' },
	                                        _react2.default.createElement('input', { type: 'checkbox', checked: this.state.disableReceipt, onChange: this.toggleDisableReceipt }),
	                                        _react2.default.createElement('span', { className: 'slider round' })
	                                    )
	                                ),
	                                _react2.default.createElement(
	                                    'div',
	                                    { className: 'settings_row' },
	                                    _react2.default.createElement(
	                                        'div',
	                                        { className: 'setting_title' },
	                                        'Disable Device Printing'
	                                    ),
	                                    _react2.default.createElement(
	                                        'label',
	                                        { className: 'switch' },
	                                        _react2.default.createElement('input', { type: 'checkbox', checked: this.state.disablePrinting, onChange: this.toggleDisablePrinting }),
	                                        _react2.default.createElement('span', { className: 'slider round' })
	                                    )
	                                ),
	                                _react2.default.createElement(
	                                    'div',
	                                    { className: 'settings_row' },
	                                    _react2.default.createElement(
	                                        'div',
	                                        { className: 'setting_title' },
	                                        'Automatically Confirm Signature'
	                                    ),
	                                    _react2.default.createElement(
	                                        'label',
	                                        { className: 'switch' },
	                                        _react2.default.createElement('input', { type: 'checkbox', checked: this.state.confirmSignature, onChange: this.toggleConfirmSignature }),
	                                        _react2.default.createElement('span', { className: 'slider round' })
	                                    )
	                                ),
	                                _react2.default.createElement(
	                                    'div',
	                                    { className: 'settings_row' },
	                                    _react2.default.createElement(
	                                        'div',
	                                        { className: 'setting_title' },
	                                        'Automatically Confirm Payment Challenges'
	                                    ),
	                                    _react2.default.createElement(
	                                        'label',
	                                        { className: 'switch' },
	                                        _react2.default.createElement('input', { type: 'checkbox', checked: this.state.confirmChallenges, onChange: this.toggleConfirmChallenges }),
	                                        _react2.default.createElement('span', { className: 'slider round' })
	                                    )
	                                )
	                            )
	                        )
	                    ),
	                    _react2.default.createElement(
	                        'div',
	                        { className: 'settings_actions' },
	                        _react2.default.createElement(_ButtonNormal2.default, { extra: 'refund_button', title: 'Continue', color: 'white', onClick: this.makeSale })
	                    )
	                ),
	                preAuthPopup && _react2.default.createElement(
	                    'div',
	                    { className: 'preauth_popup popup' },
	                    'Please swipe your card',
	                    _react2.default.createElement(
	                        'div',
	                        { className: 'preauth_button_row' },
	                        _react2.default.createElement(_ButtonNormal2.default, { title: 'Cancel', color: 'red', onClick: this.closePreAuth, extra: 'preauth_button' }),
	                        _react2.default.createElement(_ButtonNormal2.default, { title: 'Card Swiped', color: 'white', onClick: this.openPreAuth, extra: 'preauth_button' })
	                    )
	                ),
	                showSaleMethods && _react2.default.createElement(
	                    'div',
	                    { className: 'popup_container popup' },
	                    _react2.default.createElement(
	                        'div',
	                        { className: 'close_popup', onClick: this.closeSaleMethod },
	                        'X'
	                    ),
	                    _react2.default.createElement(
	                        'div',
	                        { className: 'payment_methods' },
	                        _react2.default.createElement(_ButtonNormal2.default, { title: 'Sale', onClick: this.saleChosen, extra: 'button_large', color: 'white' }),
	                        _react2.default.createElement(_ButtonNormal2.default, { title: 'Auth', onClick: this.authChosen, extra: 'button_large', color: 'white' })
	                    )
	                ),
	                showPayMethods && _react2.default.createElement(
	                    'div',
	                    { className: 'popup_container popup' },
	                    _react2.default.createElement(
	                        'div',
	                        { className: 'close_popup', onClick: this.closePaymentMethods },
	                        'X'
	                    ),
	                    _react2.default.createElement(
	                        'div',
	                        { className: 'payment_methods' },
	                        _react2.default.createElement(_ButtonNormal2.default, { title: cardText, onClick: this.cardChosen, extra: 'button_large', color: 'white' }),
	                        showVaultedCard && _react2.default.createElement(_ButtonNormal2.default, { title: 'Vaulted Card', onClick: this.vaultedCardChosen, extra: 'button_large', color: 'white' }),
	                        showPreAuth && _react2.default.createElement(_ButtonNormal2.default, { title: 'Existing PreAuth', onClick: this.preAuthChosen, extra: 'button_large', color: 'white' })
	                    )
	                ),
	                _react2.default.createElement(
	                    'div',
	                    { className: 'register_left' },
	                    _react2.default.createElement(
	                        'h3',
	                        null,
	                        newOrder
	                    ),
	                    vaultedCard && _react2.default.createElement(
	                        'div',
	                        { className: 'row sale_header' },
	                        _react2.default.createElement(_User2.default, null),
	                        _react2.default.createElement(
	                            'div',
	                            { className: 'order_detail_column' },
	                            _react2.default.createElement(
	                                'div',
	                                null,
	                                'Name: ',
	                                this.card.name
	                            ),
	                            _react2.default.createElement(
	                                'div',
	                                null,
	                                'Card: ',
	                                this.card.card.first6,
	                                'xxxxxx',
	                                this.card.card.last4
	                            )
	                        )
	                    ),
	                    showPreAuthHeader && _react2.default.createElement(
	                        'div',
	                        { className: 'row sale_header' },
	                        _react2.default.createElement('img', { className: 'order_detail_icon', src: image }),
	                        _react2.default.createElement(
	                            'div',
	                            { className: 'order_detail_column' },
	                            _react2.default.createElement(
	                                'div',
	                                null,
	                                'Name: ',
	                                this.state.preAuth.name
	                            ),
	                            _react2.default.createElement(
	                                'div',
	                                { className: 'preAuth_amount' },
	                                _react2.default.createElement(
	                                    'span',
	                                    { className: amountSpan },
	                                    ' Amount: $',
	                                    this.state.preAuthAmount
	                                ),
	                                amountExceeded && _react2.default.createElement(
	                                    'span',
	                                    { className: 'amount_tooltip' },
	                                    'The total exceeds the PreAuth amount, payment may not go through'
	                                )
	                            ),
	                            _react2.default.createElement(
	                                'div',
	                                null,
	                                'Card: ',
	                                this.state.preAuth.preAuth.payment.cardTransaction.cardType,
	                                ' ',
	                                this.state.preAuth.preAuth.payment.cardTransaction.last4
	                            )
	                        )
	                    ),
	                    _react2.default.createElement(
	                        'div',
	                        { className: 'register_sale_items' },
	                        _react2.default.createElement(
	                            'h3',
	                            null,
	                            'Current Order: '
	                        ),
	                        _react2.default.createElement(
	                            'div',
	                            { className: 'order_items' },
	                            orderItems.map(function (orderItem, i) {
	                                return _react2.default.createElement(_RegisterLineItem2.default, { key: 'orderItem-' + i, quantity: orderItem.quantity, title: orderItem.name, price: orderItem.price });
	                            }, this)
	                        ),
	                        this.state.payNoItems && _react2.default.createElement(
	                            'div',
	                            null,
	                            'You cannot make a sale with no items'
	                        ),
	                        this.state.saveNoItems && _react2.default.createElement(
	                            'div',
	                            null,
	                            'You cannot save an order with no items'
	                        )
	                    ),
	                    _react2.default.createElement(
	                        'div',
	                        { className: 'register_actions' },
	                        _react2.default.createElement(_RegisterLine2.default, { left: 'Discounts:', right: discount }),
	                        _react2.default.createElement(_RegisterLine2.default, { left: 'Subtotal:', right: subtotal }),
	                        _react2.default.createElement(_RegisterLine2.default, { left: 'Tax:', right: tax }),
	                        _react2.default.createElement(_RegisterLine2.default, { left: 'Total:', right: total, extraLeft: 'total' }),
	                        _react2.default.createElement(
	                            'div',
	                            { className: 'register_buttons' },
	                            _react2.default.createElement(_ButtonNormal2.default, { title: 'Save', color: 'green', extra: 'register_button left', onClick: this.save }),
	                            _react2.default.createElement(_ButtonNormal2.default, { title: 'Pay', color: 'green', extra: 'register_button right', onClick: this.chooseSaleMethod })
	                        )
	                    )
	                ),
	                _react2.default.createElement(
	                    'div',
	                    { className: 'register_right' },
	                    !this.state.makingSale && _react2.default.createElement(
	                        'div',
	                        { className: 'column_plain full_height' },
	                        _react2.default.createElement(
	                            'div',
	                            { className: 'register_items' },
	                            data.map(function (item, i) {
	                                return _react2.default.createElement(_AvailableItem2.default, { key: 'item-' + i, item: item, onClick: _this2.addToOrder });
	                            })
	                        ),
	                        _react2.default.createElement('div', { className: 'filler_space' }),
	                        _react2.default.createElement(
	                            'div',
	                            { className: 'discount_items' },
	                            _react2.default.createElement(
	                                'div',
	                                { className: 'discount_title' },
	                                _react2.default.createElement(
	                                    'strong',
	                                    null,
	                                    'Discounts:'
	                                )
	                            ),
	                            this.store.discounts.map(function (discount, i) {
	                                return _react2.default.createElement(_AvailableDiscount2.default, { key: 'discount-' + i, discount: discount, onClick: _this2.addDiscount });
	                            })
	                        )
	                    )
	                )
	            );
	        }
	    }]);

	    return Register;
	}(_react2.default.Component);

	exports.default = Register;

/***/ }),
/* 529 */
/***/ (function(module, exports, __webpack_require__) {

	"use strict";

	Object.defineProperty(exports, "__esModule", {
	    value: true
	});

	var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

	var _react = __webpack_require__(4);

	var _react2 = _interopRequireDefault(_react);

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

	function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

	function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

	var RegisterLine = function (_React$Component) {
	    _inherits(RegisterLine, _React$Component);

	    function RegisterLine() {
	        _classCallCheck(this, RegisterLine);

	        return _possibleConstructorReturn(this, (RegisterLine.__proto__ || Object.getPrototypeOf(RegisterLine)).apply(this, arguments));
	    }

	    _createClass(RegisterLine, [{
	        key: "render",
	        value: function render() {
	            var extraLeft = this.props.extraLeft;
	            var extraRight = this.props.extraRight;
	            var left = this.props.left;
	            var right = this.props.right;

	            var leftClassName = "register_line_left " + extraLeft;
	            var rightClassName = "register_line_right " + extraRight;

	            return _react2.default.createElement(
	                "div",
	                { className: "register_line" },
	                _react2.default.createElement(
	                    "div",
	                    { className: leftClassName },
	                    left
	                ),
	                _react2.default.createElement(
	                    "div",
	                    { className: rightClassName },
	                    right
	                )
	            );
	        }
	    }]);

	    return RegisterLine;
	}(_react2.default.Component);

	exports.default = RegisterLine;

/***/ }),
/* 530 */
/***/ (function(module, exports, __webpack_require__) {

	"use strict";

	Object.defineProperty(exports, "__esModule", {
	    value: true
	});

	var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

	var _react = __webpack_require__(4);

	var _react2 = _interopRequireDefault(_react);

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

	function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

	function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

	var RegisterLineItem = function (_React$Component) {
	    _inherits(RegisterLineItem, _React$Component);

	    function RegisterLineItem() {
	        _classCallCheck(this, RegisterLineItem);

	        return _possibleConstructorReturn(this, (RegisterLineItem.__proto__ || Object.getPrototypeOf(RegisterLineItem)).apply(this, arguments));
	    }

	    _createClass(RegisterLineItem, [{
	        key: "render",
	        value: function render() {
	            var price = this.props.price;
	            var quantity = this.props.quantity;
	            var title = this.props.title;

	            return _react2.default.createElement(
	                "div",
	                { className: "space_between_row" },
	                _react2.default.createElement(
	                    "div",
	                    null,
	                    quantity
	                ),
	                _react2.default.createElement(
	                    "div",
	                    { className: "register_item_title" },
	                    title
	                ),
	                _react2.default.createElement(
	                    "div",
	                    null,
	                    price
	                )
	            );
	        }
	    }]);

	    return RegisterLineItem;
	}(_react2.default.Component);

	exports.default = RegisterLineItem;

/***/ }),
/* 531 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';

	Object.defineProperty(exports, "__esModule", {
	    value: true
	});

	var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

	var _react = __webpack_require__(4);

	var _react2 = _interopRequireDefault(_react);

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

	function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

	function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

	var Cloud = function (_React$Component) {
	    _inherits(Cloud, _React$Component);

	    function Cloud() {
	        _classCallCheck(this, Cloud);

	        return _possibleConstructorReturn(this, (Cloud.__proto__ || Object.getPrototypeOf(Cloud)).call(this));
	    }

	    _createClass(Cloud, [{
	        key: 'render',
	        value: function render() {
	            var className = 'cloud';
	            if (this.props.class !== undefined) {
	                className = this.props.class;
	            }

	            return _react2.default.createElement(
	                'svg',
	                { className: className, version: '1.1', id: 'Layer_1', xmlns: 'http://www.w3.org/2000/svg', x: '0px', y: '0px',
	                    viewBox: '0 0 80 80' },
	                _react2.default.createElement('path', { d: 'M61.2,34.3c3.7,0.3,6.9,1.8,9.5,4.5c2.6,2.8,3.9,6,3.9,9.8c0,4-1.4,7.4-4.3,10.2s-6.2,4.3-10.2,4.3H22.7 c-4.8,0-8.9-1.7-12.2-5.1s-5.1-7.5-5.1-12.2c0-4.4,1.5-8.3,4.5-11.6c3-3.3,6.6-5.2,11-5.6c1.9-3.5,4.6-6.4,8-8.5 c3.4-2.2,7.2-3.2,11.2-3.2c5.2,0,9.8,1.6,13.8,4.9C57.8,25.1,60.3,29.3,61.2,34.3z M60.2,57.3c2.3,0,4.4-0.9,6.1-2.6 c1.7-1.7,2.6-3.7,2.6-6.1c0-2.3-0.9-4.4-2.6-6.1c-1.7-1.7-3.7-2.6-6.1-2.6h-4.3v-1.5c0-4.4-1.5-8.2-4.6-11.2 c-3.1-3.1-6.8-4.6-11.2-4.6c-3.6,0-6.8,1.1-9.6,3.2c-2.8,2.2-4.7,4.9-5.7,8.3h-2c-3.2,0-5.9,1.2-8.1,3.5c-2.3,2.3-3.4,5-3.4,8.2 c0,3.2,1.1,5.9,3.4,8.1c2.3,2.3,5,3.4,8.1,3.4H60.2z' })
	            );
	        }
	    }]);

	    return Cloud;
	}(_react2.default.Component);

	exports.default = Cloud;

/***/ }),
/* 532 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';

	Object.defineProperty(exports, "__esModule", {
	    value: true
	});

	var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

	var _react = __webpack_require__(4);

	var _react2 = _interopRequireDefault(_react);

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

	function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

	function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

	var CustomActivitiesIcon = function (_React$Component) {
	    _inherits(CustomActivitiesIcon, _React$Component);

	    function CustomActivitiesIcon() {
	        _classCallCheck(this, CustomActivitiesIcon);

	        return _possibleConstructorReturn(this, (CustomActivitiesIcon.__proto__ || Object.getPrototypeOf(CustomActivitiesIcon)).call(this));
	    }

	    _createClass(CustomActivitiesIcon, [{
	        key: 'render',
	        value: function render() {
	            var className = 'home_icon';
	            if (this.props.class !== undefined) {
	                className = this.props.class;
	            }

	            return _react2.default.createElement(
	                'svg',
	                { className: className, version: '1.1', id: 'Layer_1', xmlns: 'http://www.w3.org/2000/svg', x: '0px', y: '0px', viewBox: '0 0 80 80' },
	                _react2.default.createElement('path', { d: 'M46.5,74.1h-13c-1.8,0-3.1-1.1-3.5-2.9l0-0.1L29,63.7c-1.3-0.6-2.6-1.4-3.9-2.3L18,64.2 c-1.8,0.6-3.5,0-4.3-1.5L7.2,51.6c-1.2-2.2-0.3-3.9,0.9-4.7l5.9-4.6c0-0.6-0.1-1.4-0.1-2.3c0-0.9,0-1.6,0.1-2.3L8,33.1 c-1.2-0.8-2-2.5-0.8-4.7l6.5-11.2c0.9-1.5,2.5-2.1,4.3-1.5l0.1,0l7,2.8c1.4-1,2.7-1.7,3.9-2.3l1.1-7.5c0.4-1.8,1.7-2.9,3.5-2.9h13 c1.8,0,3,1.1,3.5,2.9L50,9l1.1,7.4c1.3,0.6,2.6,1.4,3.9,2.3l7.1-2.8c1.8-0.6,3.5,0,4.3,1.5l6.5,11.1c1.2,2.2,0.3,3.9-0.9,4.7 l-5.9,4.6c0,0.6,0.1,1.4,0.1,2.3c0,0.9,0,1.6-0.1,2.3l5.9,4.6c1.1,0.8,2,2.5,0.8,4.7l-6.5,11.2c-0.9,1.5-2.5,2.1-4.3,1.5l-0.1,0 l-7-2.8c-1.4,1-2.7,1.7-3.9,2.3l-1.1,7.5C49.5,73,48.2,74.1,46.5,74.1z M33.9,70.1h12.1l1.3-9.2l1.1-0.4c1.4-0.5,3-1.5,5-2.9 l0.9-0.6l8.7,3.5l6.1-10.6L61.8,44l0.2-1.1c0.1-0.4,0.1-1.3,0.1-2.9c0-1.6-0.1-2.5-0.1-2.9L61.8,36l7.4-5.7l-6.1-10.6l-8.7,3.5 l-0.9-0.7c-1.6-1.2-3.2-2.2-5-2.9l-1-0.4l-1.3-9.2H33.9l-1.3,9.2l-1.1,0.4c-1.4,0.5-3,1.5-5,2.9l-0.9,0.6l-8.7-3.5l-6.1,10.6 l7.4,5.7L18,37.1c-0.1,0.4-0.1,1.3-0.1,2.9c0,1.6,0.1,2.5,0.1,2.9l0.2,1.1l-7.4,5.7l6.1,10.6l8.8-3.5l0.9,0.7 c1.6,1.2,3.2,2.2,5,2.9l1,0.4L33.9,70.1z M40,53.3c-3.7,0-6.8-1.3-9.4-3.9c-2.6-2.6-3.9-5.8-3.9-9.4c0-3.7,1.3-6.8,3.9-9.4 c2.6-2.6,5.8-3.9,9.4-3.9c3.6,0,6.8,1.3,9.4,3.9c2.6,2.6,3.9,5.8,3.9,9.4c0,3.7-1.3,6.8-3.9,9.4C46.8,52,43.7,53.3,40,53.3z M40,30.7c-2.6,0-4.7,0.9-6.6,2.7c-1.8,1.8-2.7,4-2.7,6.6c0,2.6,0.9,4.7,2.7,6.6l0,0c1.8,1.8,4,2.7,6.6,2.7c2.6,0,4.7-0.9,6.6-2.7 c1.8-1.8,2.7-4,2.7-6.6c0-2.6-0.9-4.7-2.7-6.6C44.7,31.6,42.6,30.7,40,30.7z' })
	            );
	        }
	    }]);

	    return CustomActivitiesIcon;
	}(_react2.default.Component);

	exports.default = CustomActivitiesIcon;

/***/ }),
/* 533 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';

	Object.defineProperty(exports, "__esModule", {
	    value: true
	});

	var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

	var _react = __webpack_require__(4);

	var _react2 = _interopRequireDefault(_react);

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

	function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

	function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

	var CustomersIcon = function (_React$Component) {
	    _inherits(CustomersIcon, _React$Component);

	    function CustomersIcon() {
	        _classCallCheck(this, CustomersIcon);

	        return _possibleConstructorReturn(this, (CustomersIcon.__proto__ || Object.getPrototypeOf(CustomersIcon)).call(this));
	    }

	    _createClass(CustomersIcon, [{
	        key: 'render',
	        value: function render() {
	            var className = 'home_icon';
	            if (this.props.class !== undefined) {
	                className = this.props.class;
	            }

	            return _react2.default.createElement(
	                'svg',
	                { className: className, version: '1.1', id: 'Layer_1', xmlns: 'http://www.w3.org/2000/svg', x: '0px', y: '0px', viewBox: '0 0 80 80' },
	                _react2.default.createElement('path', { d: 'M69.6,16.9H10.4c-2.3,0-4.1,1.8-4.1,4.1v37.9c0,2.3,1.8,4.1,4.1,4.1h59.2c2.3,0,4.1-1.8,4.1-4.1V21.1 C73.7,18.8,71.9,16.9,69.6,16.9z M69.5,21.2v7.9h-59v-7.9H69.5z M10.5,58.8V37.5h59v21.3H10.5z' }),
	                _react2.default.createElement('path', { d: 'M20.8,50.2h-4.7c-1.2,0-2.1,0.9-2.1,2.1s0.9,2.1,2.1,2.1h4.7c1.2,0,2.1-0.9,2.1-2.1S22,50.2,20.8,50.2z' }),
	                _react2.default.createElement('path', { d: 'M46.2,50.2H29c-1.2,0-2.1,0.9-2.1,2.1s0.9,2.1,2.1,2.1h17.1c1.2,0,2.1-0.9,2.1-2.1S47.3,50.2,46.2,50.2z' })
	            );
	        }
	    }]);

	    return CustomersIcon;
	}(_react2.default.Component);

	exports.default = CustomersIcon;

/***/ }),
/* 534 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';

	Object.defineProperty(exports, "__esModule", {
	    value: true
	});

	var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

	var _react = __webpack_require__(4);

	var _react2 = _interopRequireDefault(_react);

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

	function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

	function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

	var DeviceIcon = function (_React$Component) {
	    _inherits(DeviceIcon, _React$Component);

	    function DeviceIcon() {
	        _classCallCheck(this, DeviceIcon);

	        return _possibleConstructorReturn(this, (DeviceIcon.__proto__ || Object.getPrototypeOf(DeviceIcon)).call(this));
	    }

	    _createClass(DeviceIcon, [{
	        key: 'render',
	        value: function render() {
	            var className = 'home_icon';
	            if (this.props.class !== undefined) {
	                className = this.props.class;
	            }

	            return _react2.default.createElement(
	                'svg',
	                { className: className, version: '1.1', id: 'Layer_1', xmlns: 'http://www.w3.org/2000/svg', x: '0px', y: '0px', viewBox: '0 0 80 80' },
	                _react2.default.createElement('path', { d: 'M56.1,23.9c-1.8,0-3.5,0-5.3,0c0-0.2,0-0.3,0-0.5c0-3.8,0-7.6,0-11.3c0-1.1-0.5-1.6-1.6-1.6 c-12.3,0-24.7,0-37,0c-1.1,0-1.6,0.5-1.6,1.6c0,15.9,0,31.9,0,47.8c0,1.1,0.5,1.6,1.6,1.6c9.1,0,18.2,0,27.3,0c0.2,0,0.4,0,0.6,0 c0,2.7,0,5.3,0,8c-0.2,0-0.3,0-0.4,0c-10.1,0-20.2,0-30.3,0c-2.4,0-4.2-1.7-4.2-4.2c0-18.7,0-37.4,0-56c0-2.4,1.7-4.2,4.2-4.2 c14.2,0,28.5,0,42.7,0c2.3,0,4.1,1.7,4.1,4.1c0,4.8,0,9.6,0,14.4C56.1,23.7,56.1,23.8,56.1,23.9z M30.6,67.8 c1.4,0,2.4-1.1,2.4-2.4c0-1.3-1.1-2.3-2.4-2.3c-1.4,0-2.4,1.1-2.4,2.4C28.2,66.8,29.3,67.8,30.6,67.8z M30.6,6.9 c-0.6,0-1.3,0-1.9,0c-0.6,0-1,0.4-1,0.9c0,0.5,0.4,0.9,0.9,0.9c1.3,0,2.5,0,3.8,0c0.6,0,0.9-0.4,0.9-0.9c0-0.5-0.4-0.9-0.9-0.9 C31.9,6.9,31.3,6.9,30.6,6.9z' }),
	                _react2.default.createElement('path', { d: 'M42.7,50.7c0-6.6,0-13.3,0-19.9c0-1.6,0.7-2.9,2.1-3.7c0.6-0.3,1.2-0.5,1.9-0.5c8,0,16.1,0,24.1,0 c2.3,0,4,1.7,4.1,4c0,0.1,0,0.1,0,0.2c0,13.3,0,26.6,0,39.8c0,2-1.2,3.6-3.1,4.1c-0.4,0.1-0.8,0.1-1.1,0.1c-7.9,0-15.8,0-23.7,0 c-2.5,0-4.2-1.7-4.2-4.3C42.7,64,42.7,57.3,42.7,50.7z M69.5,49.4c0-5.3,0-10.6,0-15.9c0-1-0.5-1.6-1.6-1.6c-6.1,0-12.2,0-18.3,0 c-1.1,0-1.6,0.5-1.6,1.6c0,10.5,0,21.1,0,31.6c0,1.1,0.5,1.6,1.6,1.6c6.1,0,12.1,0,18.2,0c1,0,1.7-0.5,1.7-1.7 C69.5,59.9,69.5,54.6,69.5,49.4z M58.8,68.5c-1.3,0-2.4,1-2.4,2.3c0,1.3,1.1,2.4,2.4,2.4c1.4,0,2.4-1,2.4-2.4 C61.2,69.5,60.1,68.5,58.8,68.5z M58.8,30.2c0.6,0,1.2,0,1.9,0c0.6,0,1-0.4,1-0.9c0-0.5-0.4-0.9-1-0.9c-1.3,0-2.5,0-3.8,0 c-0.6,0-0.9,0.4-0.9,0.9c0,0.5,0.4,0.9,1,0.9C57.5,30.2,58.1,30.2,58.8,30.2z' })
	            );
	        }
	    }]);

	    return DeviceIcon;
	}(_react2.default.Component);

	exports.default = DeviceIcon;

/***/ }),
/* 535 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';

	Object.defineProperty(exports, "__esModule", {
	    value: true
	});

	var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

	var _react = __webpack_require__(4);

	var _react2 = _interopRequireDefault(_react);

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

	function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

	function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

	var Home = function (_React$Component) {
	    _inherits(Home, _React$Component);

	    function Home() {
	        _classCallCheck(this, Home);

	        return _possibleConstructorReturn(this, (Home.__proto__ || Object.getPrototypeOf(Home)).call(this));
	    }

	    _createClass(Home, [{
	        key: 'render',
	        value: function render() {
	            var className = 'home_logo';
	            if (this.props.class !== undefined) {
	                className = this.props.class;
	            }

	            return _react2.default.createElement(
	                'svg',
	                { className: className, version: '1.1', id: 'Layer_1', xmlns: 'http://www.w3.org/2000/svg', x: '0px', y: '0px', viewBox: '0 0 80 80' },
	                _react2.default.createElement('path', { d: 'M76.2,41.3l-2.8,3.4c-0.2,0.3-0.6,0.4-1,0.5h-0.1c-0.4,0-0.7-0.1-1-0.3L40,18.7L8.7,44.8 c-0.4,0.2-0.7,0.3-1.1,0.3c-0.4-0.1-0.7-0.2-1-0.5l-2.8-3.4c-0.2-0.3-0.3-0.7-0.3-1.1c0-0.4,0.2-0.7,0.5-1l32.6-27.1 c1-0.8,2.1-1.2,3.4-1.2c1.3,0,2.5,0.4,3.4,1.2l11,9.2v-8.8c0-0.4,0.1-0.8,0.4-1c0.3-0.3,0.6-0.4,1-0.4h8.7c0.4,0,0.8,0.1,1,0.4 c0.3,0.3,0.4,0.6,0.4,1V31l9.9,8.2c0.3,0.2,0.5,0.6,0.5,1C76.5,40.6,76.4,41,76.2,41.3z M66.1,44.4v21.7c0,0.8-0.3,1.5-0.9,2 c-0.6,0.6-1.3,0.9-2,0.9H45.8V51.7H34.2V69H16.8c-0.8,0-1.5-0.3-2-0.9c-0.6-0.6-0.9-1.3-0.9-2V44.4c0,0,0-0.1,0-0.1 c0-0.1,0-0.1,0-0.1l26-21.5l26,21.5C66.1,44.2,66.1,44.3,66.1,44.4z' })
	            );
	        }
	    }]);

	    return Home;
	}(_react2.default.Component);

	exports.default = Home;

/***/ }),
/* 536 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';

	Object.defineProperty(exports, "__esModule", {
	    value: true
	});

	var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

	var _react = __webpack_require__(4);

	var _react2 = _interopRequireDefault(_react);

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

	function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

	function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

	var Network = function (_React$Component) {
	    _inherits(Network, _React$Component);

	    function Network() {
	        _classCallCheck(this, Network);

	        return _possibleConstructorReturn(this, (Network.__proto__ || Object.getPrototypeOf(Network)).call(this));
	    }

	    _createClass(Network, [{
	        key: 'render',
	        value: function render() {
	            var className = 'network';
	            if (this.props.class !== undefined) {
	                className = this.props.class;
	            }

	            return _react2.default.createElement(
	                'svg',
	                { className: className, version: '1.1', id: 'Layer_1', xmlns: 'http://www.w3.org/2000/svg', x: '0px', y: '0px',
	                    viewBox: '0 0 80 80' },
	                _react2.default.createElement('path', { d: 'M8.2,30.7c8.8-8.7,19.5-13.1,31.9-13.1c12.4,0,23,4.4,31.7,13.1L66,36.5c-7.2-7.1-15.9-10.7-26-10.7 c-10.1,0-18.8,3.6-26,10.7L8.2,30.7z M19.8,42.2c5.6-5.5,12.3-8.3,20.2-8.3c7.9,0,14.6,2.8,20.1,8.3L54.5,48c-4-4-8.8-6-14.5-6 c-5.7,0-10.5,2-14.5,6L19.8,42.2z M31.3,53.8c2.3-2.3,5.2-3.5,8.7-3.5c3.4,0,6.3,1.2,8.7,3.5L40,62.5L31.3,53.8z' })
	            );
	        }
	    }]);

	    return Network;
	}(_react2.default.Component);

	exports.default = Network;

/***/ }),
/* 537 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';

	Object.defineProperty(exports, "__esModule", {
	    value: true
	});

	var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

	var _react = __webpack_require__(4);

	var _react2 = _interopRequireDefault(_react);

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

	function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

	function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

	var NewTabIcon = function (_React$Component) {
	    _inherits(NewTabIcon, _React$Component);

	    function NewTabIcon() {
	        _classCallCheck(this, NewTabIcon);

	        return _possibleConstructorReturn(this, (NewTabIcon.__proto__ || Object.getPrototypeOf(NewTabIcon)).call(this));
	    }

	    _createClass(NewTabIcon, [{
	        key: 'render',
	        value: function render() {
	            var className = 'home_icon';
	            if (this.props.class !== undefined) {
	                className = this.props.class;
	            }

	            return _react2.default.createElement(
	                'svg',
	                { className: className, version: '1.1', id: 'Layer_1', xmlns: 'http://www.w3.org/2000/svg', x: '0px', y: '0px',
	                    viewBox: '0 0 80 80' },
	                _react2.default.createElement('path', { d: 'M59.3,37.5C48.1,37.5,39,46.7,39,57.9c0,4,1.2,7.7,3.1,10.8H30l0.1-17.5l14.2-17.1c1.4,0.6,3.1,1,5.4,1 c8.7,0,15.9-7.4,15.9-16.5c0-4.4-1.6-8.6-4.5-11.8c-3-3.2-6.9-5-11.2-5c0,0-0.1,0-0.1,0C41.5,1.8,34.7,8.5,34,17H2.4 c-0.8,0-1.5,0.5-1.9,1.2c-0.3,0.7-0.2,1.6,0.3,2.2L26,51.1l-0.1,17.6H12.9c-1.1,0-2.1,0.9-2.1,2.1s0.9,2.1,2.1,2.1h29.6 c0.8,0,1.5-0.5,1.9-1.2c3.7,4,9,6.5,14.9,6.5c11.2,0,20.3-9.1,20.3-20.3C79.7,46.7,70.6,37.5,59.3,37.5z M49.8,5.9 C49.8,5.9,49.8,5.9,49.8,5.9c3.2,0,6.1,1.3,8.3,3.7c2.2,2.4,3.4,5.5,3.4,8.9c-0.1,6.8-5.3,12.4-11.8,12.4c-1,0-1.8-0.1-2.5-0.3 l8.5-10.2c0.5-0.6,0.6-1.5,0.3-2.2C55.5,17.5,54.8,17,54,17H38.1C38.8,10.8,43.8,5.9,49.8,5.9z M6.8,21.2h42.8l-6.1,7.4l-30.6,0 L6.8,21.2z M16.2,32.7l23.7,0L28.1,47.1L16.2,32.7z M71.2,59.6H61v10.2h-3.3V59.6H47.5v-3.3h10.2V46H61v10.2h10.2V59.6z' })
	            );
	        }
	    }]);

	    return NewTabIcon;
	}(_react2.default.Component);

	exports.default = NewTabIcon;

/***/ }),
/* 538 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';

	Object.defineProperty(exports, "__esModule", {
	    value: true
	});

	var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

	var _react = __webpack_require__(4);

	var _react2 = _interopRequireDefault(_react);

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

	function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

	function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

	var OrdersIcon = function (_React$Component) {
	    _inherits(OrdersIcon, _React$Component);

	    function OrdersIcon() {
	        _classCallCheck(this, OrdersIcon);

	        return _possibleConstructorReturn(this, (OrdersIcon.__proto__ || Object.getPrototypeOf(OrdersIcon)).call(this));
	    }

	    _createClass(OrdersIcon, [{
	        key: 'render',
	        value: function render() {
	            var className = 'home_icon';
	            if (this.props.class !== undefined) {
	                className = this.props.class;
	            }

	            return _react2.default.createElement(
	                'svg',
	                { className: className, version: '1.1', id: 'Layer_1', xmlns: 'http://www.w3.org/2000/svg', x: '0px', y: '0px', viewBox: '0 0 80 80' },
	                _react2.default.createElement('path', { d: 'M56.4,38.8l-31.9-0.2c-1.3,0-2.3-1.1-2.3-2.3v0c0-1.3,1.1-2.3,2.3-2.3l31.9,0.2c1.3,0,2.3,1.1,2.3,2.3v0 C58.7,37.7,57.7,38.8,56.4,38.8z' }),
	                _react2.default.createElement('path', { d: 'M56.3,49.1l-31.9-0.2c-1.3,0-2.3-1.1-2.3-2.3v0c0-1.3,1.1-2.3,2.3-2.3l31.9,0.2c1.3,0,2.3,1.1,2.3,2.3v0 C58.7,48.1,57.6,49.1,56.3,49.1z' }),
	                _react2.default.createElement('path', { d: 'M43.5,59.3l-19.1-0.1c-1.3,0-2.3-1-2.3-2.3v0c0-1.3,1-2.3,2.3-2.3l19.1,0.1c1.3,0,2.3,1,2.3,2.3v0 C45.8,58.3,44.7,59.3,43.5,59.3z' }),
	                _react2.default.createElement('path', { d: 'M62.3,14.9H57v-0.3c0-1.5-1.2-2.7-2.7-2.7h-7.5c0-0.3,0.1-0.6,0.1-0.9c0-3.8-3.1-6.8-6.8-6.8 s-6.8,3.1-6.8,6.8c0,0.3,0,0.6,0.1,0.9h-7.5c-1.5,0-2.7,1.2-2.7,2.7v0.3h-5.3c-3.7,0-6.7,3-6.7,6.7v47.5c0,3.7,3,6.7,6.7,6.7h44.5 c3.7,0,6.7-3,6.7-6.7V21.6C69,17.9,66,14.9,62.3,14.9z M40,7.5c1.2,0,2.2,1,2.2,2.2c0,1.2-1,2.2-2.2,2.2s-2.2-1-2.2-2.2 C37.8,8.4,38.8,7.5,40,7.5z M65,69.1c0,1.5-1.2,2.7-2.7,2.7H17.7c-1.5,0-2.7-1.2-2.7-2.7V21.6c0-1.5,1.2-2.7,2.7-2.7H23v2.3 c0,1.5,1.2,2.7,2.7,2.7h28.5c1.5,0,2.7-1.2,2.7-2.7v-2.3h5.3c1.5,0,2.7,1.2,2.7,2.7V69.1z' })
	            );
	        }
	    }]);

	    return OrdersIcon;
	}(_react2.default.Component);

	exports.default = OrdersIcon;

/***/ }),
/* 539 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';

	Object.defineProperty(exports, "__esModule", {
	    value: true
	});

	var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

	var _react = __webpack_require__(4);

	var _react2 = _interopRequireDefault(_react);

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

	function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

	function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

	var RecoveryIcon = function (_React$Component) {
	    _inherits(RecoveryIcon, _React$Component);

	    function RecoveryIcon() {
	        _classCallCheck(this, RecoveryIcon);

	        return _possibleConstructorReturn(this, (RecoveryIcon.__proto__ || Object.getPrototypeOf(RecoveryIcon)).call(this));
	    }

	    _createClass(RecoveryIcon, [{
	        key: 'render',
	        value: function render() {
	            var className = 'home_icon';
	            if (this.props.class !== undefined) {
	                className = this.props.class;
	            }

	            return _react2.default.createElement(
	                'svg',
	                { className: className, version: '1.1', id: 'Layer_1', xmlns: 'http://www.w3.org/2000/svg', x: '0px', y: '0px', viewBox: '0 0 80 80' },
	                _react2.default.createElement('path', { d: 'M55.5,48c-0.1-0.4-0.3-0.7-0.7-0.9l-10.1-6V28.9c0-0.8-0.7-1.5-1.5-1.5h-0.9c-0.8,0-1.5,0.7-1.5,1.5v13.2 c0,0.5,0.3,1,0.7,1.3l11.4,6.9c0.2,0.1,0.5,0.2,0.8,0.2c0.5,0,1-0.3,1.3-0.7l0.4-0.6C55.5,48.8,55.6,48.4,55.5,48z' }),
	                _react2.default.createElement('path', { d: 'M63.7,19.7c-5.6-5.5-12.4-8.3-20.2-8.3c-7.8,0-14.6,2.8-20.2,8.3c-5.6,5.5-8.4,12.4-8.4,20.3v1h-6 c-0.9,0-1.3,1.1-0.7,1.7l8.4,8.4c0.4,0.4,1,0.4,1.4,0l8.4-8.4c0.6-0.6,0.2-1.7-0.7-1.7h-6v-1c0-6.6,2.4-12.3,7-17 c4.4-4.4,9.8-6.8,16.1-7c6.5-0.2,12.8,2.1,17.5,6.6c5,4.7,7.5,10.6,7.5,17.4c0,6.6-2.4,12.3-7.1,17c-4.7,4.6-10.4,7-17,7 c-5.9,0-11.1-1.9-15.4-5.7c-0.4-0.3-1-0.3-1.4,0l-1.9,1.9c-0.4,0.4-0.4,1.1,0,1.4c5.2,4.6,11.5,7,18.6,7c7.8,0,14.6-2.8,20.2-8.3 c5.6-5.5,8.4-12.3,8.4-20.3C72.1,32.1,69.3,25.3,63.7,19.7z' })
	            );
	        }
	    }]);

	    return RecoveryIcon;
	}(_react2.default.Component);

	exports.default = RecoveryIcon;

/***/ }),
/* 540 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';

	Object.defineProperty(exports, "__esModule", {
	    value: true
	});

	var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

	var _react = __webpack_require__(4);

	var _react2 = _interopRequireDefault(_react);

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

	function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

	function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

	var RefundsIcon = function (_React$Component) {
	    _inherits(RefundsIcon, _React$Component);

	    function RefundsIcon() {
	        _classCallCheck(this, RefundsIcon);

	        return _possibleConstructorReturn(this, (RefundsIcon.__proto__ || Object.getPrototypeOf(RefundsIcon)).call(this));
	    }

	    _createClass(RefundsIcon, [{
	        key: 'render',
	        value: function render() {
	            var className = 'home_icon';
	            if (this.props.class !== undefined) {
	                className = this.props.class;
	            }

	            return _react2.default.createElement(
	                'svg',
	                { className: className, version: '1.1', id: 'Layer_1', xmlns: 'http://www.w3.org/2000/svg', x: '0px', y: '0px', viewBox: '0 0 80 80' },
	                _react2.default.createElement('path', { d: 'M18.7,21.9l1.9,1c0.2-0.3,0.4-0.7,0.6-1H18.7z' }),
	                _react2.default.createElement('path', { d: 'M39.9,59c7.7,0.1,14-6.1,14-13.8c0.1-7.7-6.1-13.9-13.8-14l-14,13c0,0.3,0,0.6,0,0.8 C26,52.7,32.2,58.9,39.9,59z M38.9,36.8l0-1.8c0-0.4,0.3-0.7,0.7-0.7l1.5,0c0.4,0,0.7,0.3,0.7,0.7l0,1.6c0.8,0.1,1.5,0.2,2.1,0.3 c0.4,0.1,0.8,0.4,1.1,0.8c0.2,0.4,0.3,0.9,0.2,1.3l0,0.1c-0.1,0.4-0.3,0.7-0.7,0.8c-0.3,0.2-0.7,0.2-1.1,0.1 c-0.7-0.2-1.5-0.4-2.5-0.4c-1.8,0-2.3,0.7-2.3,1.5c0,0.9,0.9,1.5,3.2,2.4c3.2,1.2,4.5,2.7,4.5,5.1c0,2.3-1.7,4.3-4.6,4.9l0,2.1 c0,0.4-0.3,0.7-0.7,0.7l-1.5,0c-0.4,0-0.7-0.3-0.7-0.7l0-1.8c-1-0.1-2.1-0.2-2.9-0.5c-0.9-0.3-1.5-1.2-1.2-2.2l0,0 c0.1-0.4,0.4-0.7,0.7-0.9c0.4-0.2,0.8-0.2,1.1-0.1c0.9,0.3,1.9,0.6,3,0.6c1.5,0,2.6-0.6,2.6-1.7c0-1-0.9-1.7-2.8-2.4 c-2.9-1-4.8-2.4-4.8-5C34.5,39.2,36.1,37.4,38.9,36.8z' }),
	                _react2.default.createElement('path', { d: 'M73.5,21.9h-12c-4.2-6.4-11.1-10.2-18.8-10.2c-9.2,0-17.7,5.9-21,14.5l-6.8-3.7c-0.8-0.4-1.7,0.3-1.4,1.1 l5.7,21.8c0.2,0.7,1.1,1,1.6,0.5l16.5-15.3c0.6-0.6,0.3-1.7-0.6-1.7L29,28.4c3.6-8.3,14.5-11.8,22-6.5H40.3 c-3,0.6-5.5,2.1-7.4,4.3h31.6c0.5,1.4,1.2,2.7,2.1,3.9c1.6,2,3.7,3.6,6.2,4.4v21.1c-3.9,1.3-7,4.4-8.3,8.3H15.4 c-1.3-3.9-4.4-7-8.3-8.3V34.5c2.3-0.8,4.3-2.2,5.8-3.9L10.7,22l0-0.1H6.5c-2.1,0-3.7,1.7-3.7,3.7v38.9c0,0.5,0.1,1,0.3,1.4 c0.6,1.4,1.9,2.3,3.4,2.3h67c1.5,0,2.9-0.9,3.4-2.3c0.2-0.4,0.3-0.9,0.3-1.4V25.6C77.2,23.6,75.5,21.9,73.5,21.9z' })
	            );
	        }
	    }]);

	    return RefundsIcon;
	}(_react2.default.Component);

	exports.default = RefundsIcon;

/***/ }),
/* 541 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';

	Object.defineProperty(exports, "__esModule", {
	    value: true
	});

	var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

	var _react = __webpack_require__(4);

	var _react2 = _interopRequireDefault(_react);

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

	function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

	function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

	var RegisterIcon = function (_React$Component) {
	    _inherits(RegisterIcon, _React$Component);

	    function RegisterIcon() {
	        _classCallCheck(this, RegisterIcon);

	        return _possibleConstructorReturn(this, (RegisterIcon.__proto__ || Object.getPrototypeOf(RegisterIcon)).call(this));
	    }

	    _createClass(RegisterIcon, [{
	        key: 'render',
	        value: function render() {
	            var className = 'home_icon';
	            if (this.props.class !== undefined) {
	                className = this.props.class;
	            }

	            return _react2.default.createElement(
	                'svg',
	                { className: className, version: '1.1', id: 'Layer_1', xmlns: 'http://www.w3.org/2000/svg', x: '0px', y: '0px',
	                    viewBox: '0 0 80 80' },
	                _react2.default.createElement(
	                    'g',
	                    null,
	                    _react2.default.createElement(
	                        'g',
	                        null,
	                        _react2.default.createElement(
	                            'g',
	                            null,
	                            _react2.default.createElement('path', { d: 'M47.4,36.4l-31.9-0.2c-1.3,0-2.3-1.1-2.3-2.3v0c0-1.3,1.1-2.3,2.3-2.3l31.9,0.2c1.3,0,2.3,1.1,2.3,2.3v0 C49.8,35.4,48.7,36.4,47.4,36.4z' }),
	                            _react2.default.createElement('path', { d: 'M47.4,46.7l-31.9-0.2c-1.3,0-2.3-1.1-2.3-2.3v0c0-1.3,1.1-2.3,2.3-2.3l31.9,0.2c1.3,0,2.3,1.1,2.3,2.3v0 C49.7,45.7,48.6,46.7,47.4,46.7z' }),
	                            _react2.default.createElement('path', { d: 'M34.5,57l-19.1-0.1c-1.3,0-2.3-1-2.3-2.3v0c0-1.3,1-2.3,2.3-2.3l19.1,0.1c1.3,0,2.3,1,2.3,2.3v0 C36.8,56,35.7,57,34.5,57z' })
	                        ),
	                        _react2.default.createElement('path', { d: 'M60,37.7V19.2c0-3.7-3-6.7-6.7-6.7H48v-0.3c0-1.5-1.2-2.7-2.7-2.7h-7.5c0-0.3,0.1-0.6,0.1-0.9 c0-3.8-3.1-6.8-6.8-6.8s-6.8,3.1-6.8,6.8c0,0.3,0,0.6,0.1,0.9h-7.5c-1.5,0-2.7,1.2-2.7,2.7v0.3H8.7c-3.7,0-6.7,3-6.7,6.7v47.5 c0,3.7,3,6.7,6.7,6.7h35.8c3.5,3,8.1,4.7,13,4.7c11.2,0,20.3-9.1,20.3-20.3C78,47.5,70.1,38.9,60,37.7z M31,5.1 c1.2,0,2.2,1,2.2,2.2c0,1.2-1,2.2-2.2,2.2s-2.2-1-2.2-2.2C28.9,6.1,29.8,5.1,31,5.1z M37.3,57.9c0,4.3,1.4,8.3,3.7,11.6H8.7 c-1.5,0-2.7-1.2-2.7-2.7V19.2c0-1.5,1.2-2.7,2.7-2.7H14v2.3c0,1.5,1.2,2.7,2.7,2.7h28.5c1.5,0,2.7-1.2,2.7-2.7v-2.3h5.3 c1.5,0,2.7,1.2,2.7,2.7v18.4C45.5,38.5,37.3,47.2,37.3,57.9z M69.5,59.6H59.3v10.2H56V59.6H45.8v-3.3H56V46h3.3v10.2h10.2V59.6z'
	                        })
	                    )
	                )
	            );
	        }
	    }]);

	    return RegisterIcon;
	}(_react2.default.Component);

	exports.default = RegisterIcon;

/***/ }),
/* 542 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';

	Object.defineProperty(exports, "__esModule", {
	    value: true
	});

	var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

	var _react = __webpack_require__(4);

	var _react2 = _interopRequireDefault(_react);

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

	function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

	function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

	var TransactionsIcon = function (_React$Component) {
	    _inherits(TransactionsIcon, _React$Component);

	    function TransactionsIcon() {
	        _classCallCheck(this, TransactionsIcon);

	        return _possibleConstructorReturn(this, (TransactionsIcon.__proto__ || Object.getPrototypeOf(TransactionsIcon)).call(this));
	    }

	    _createClass(TransactionsIcon, [{
	        key: 'render',
	        value: function render() {
	            var className = 'home_icon';
	            if (this.props.class !== undefined) {
	                className = this.props.class;
	            }

	            return _react2.default.createElement(
	                'svg',
	                { className: className, version: '1.1', id: 'Layer_1', xmlns: 'http://www.w3.org/2000/svg', x: '0px', y: '0px', viewBox: '0 0 80 80' },
	                _react2.default.createElement('path', { d: 'M41.5,26.5c-1.1,0-2-0.9-2-2s0.9-2,2-2l15.4,0c1.1,0,2,0.9,2,2s-0.9,2-2,2L41.5,26.5z' }),
	                _react2.default.createElement('path', { d: 'M53,34.7L53,34.7l-11.5,0c-1.1,0-2-0.9-2-2s0.9-2,2-2l0,0l11.5,0c1.1,0,2,0.9,2,2S54.1,34.7,53,34.7z' }),
	                _react2.default.createElement('path', { d: 'M56.8,48.3H41.4c-1.1,0-2-0.9-2-2s0.9-2,2-2h15.4c1.1,0,2,0.9,2,2S57.9,48.3,56.8,48.3z' }),
	                _react2.default.createElement('path', { d: 'M52.8,56.5H41.3c-1.1,0-2-0.9-2-2s0.9-2,2-2h11.5c1.1,0,2,0.9,2,2S53.9,56.5,52.8,56.5z' }),
	                _react2.default.createElement(
	                    'g',
	                    { transform: 'translate(0,-952.36218)' },
	                    _react2.default.createElement('path', { d: 'M31.9,974.8l-6.9,6.7c-0.2,0.2-0.6,0.3-0.9,0.1l-2.4-1.9c-0.3-0.2-0.7-0.2-1,0.1l-1.3,1.7 c-0.2,0.3-0.2,0.7,0.1,1l4.1,3.2c0,0,0.3,0.2,0.7,0.5c0.5,0.4,0.9,0,0.9,0l0.7-0.7l8.4-8.1c0.3-0.3,0.3-0.7,0-1l-1.5-1.6 C32.7,974.6,32.2,974.6,31.9,974.8z' })
	                ),
	                _react2.default.createElement('path', { d: 'M29.3,50.3l3.2-3.2c0.7-0.7,0.7-1.7,0-2.4l-0.4-0.4c-0.7-0.7-1.7-0.7-2.4,0l-3.2,3.2l-3.2-3.2 c-0.7-0.7-1.7-0.7-2.4,0l-0.4,0.4c-0.7,0.7-0.7,1.7,0,2.4l3.2,3.2l-3.2,3.2c-0.7,0.7-0.7,1.7,0,2.4l0.4,0.4c0.7,0.7,1.7,0.7,2.4,0 l3.2-3.2l3.2,3.2c0.7,0.7,1.7,0.7,2.4,0l0.4-0.4c0.7-0.7,0.7-1.7,0-2.4L29.3,50.3z' }),
	                _react2.default.createElement('path', { className: 'st1', d: 'M25.9,67.8' }),
	                _react2.default.createElement('path', { d: 'M67.4,69.7c-0.3,0-0.5-0.1-0.8-0.2l-6.7-2.8l-5.6,2.6c-0.6,0.4-1.4,0.4-2,0.1l-6.1-2.8l-5.7,2.8 c-0.5,0.3-1.2,0.3-1.7,0l-6.2-2.9l-5.7,2.9c-0.6,0.3-1.3,0.3-1.8,0l-5.6-3l-5.8,3c-0.6,0.3-1.4,0.3-2-0.1c-0.6-0.4-1-1-1-1.7 l0-55.3c0-0.5,0.2-1,0.6-1.4s0.9-0.6,1.4-0.6l0,0l54.8,0c1.1,0,2,0.9,2,2l0,55.3c0,0.7-0.3,1.3-0.9,1.7 C68.2,69.6,67.8,69.7,67.4,69.7z M46.1,62.4c0.3,0,0.6,0.1,0.8,0.2l6.2,2.8l5.8-2.7c0.5-0.2,1.1-0.3,1.6,0l4.8,2l0-50.3l-50.8,0 l0,50.1l3.8-2c0.6-0.3,1.3-0.3,1.8,0l5.6,3l5.7-2.9c0.5-0.3,1.2-0.3,1.8,0l6.2,2.9l5.7-2.8C45.5,62.5,45.8,62.4,46.1,62.4z' })
	            );
	        }
	    }]);

	    return TransactionsIcon;
	}(_react2.default.Component);

	exports.default = TransactionsIcon;

/***/ }),
/* 543 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';

	Object.defineProperty(exports, "__esModule", {
	    value: true
	});

	var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

	var _react = __webpack_require__(4);

	var _react2 = _interopRequireDefault(_react);

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

	function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

	function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

	var User = function (_React$Component) {
	    _inherits(User, _React$Component);

	    function User() {
	        _classCallCheck(this, User);

	        return _possibleConstructorReturn(this, (User.__proto__ || Object.getPrototypeOf(User)).call(this));
	    }

	    _createClass(User, [{
	        key: 'render',
	        value: function render() {
	            var className = 'order_detail_icon';
	            if (this.props.class !== undefined) {
	                className = this.props.class;
	            }

	            return _react2.default.createElement(
	                'svg',
	                { className: className, version: '1.1', id: 'Layer_1', xmlns: 'http://www.w3.org/2000/svg', x: '0px', y: '0px', viewBox: '0 0 80 80' },
	                _react2.default.createElement('path', { d: 'M16.7,16.7C23.1,10.2,30.9,7,40,7c9.1,0,16.9,3.2,23.3,9.7C69.8,23.1,73,30.9,73,40c0,9.1-3.2,16.9-9.7,23.3 C56.9,69.8,49.1,73,40,73c-9.1,0-16.9-3.2-23.3-9.7C10.2,56.9,7,49.1,7,40C7,30.9,10.2,23.1,16.7,16.7z M40,63.9 c8.4,0,15-3.6,19.8-10.7c-0.1-2.9-2.4-5.3-7-7.3c-4.5-2-8.8-2.9-12.9-2.9s-8.3,1-12.9,2.9c-4.5,1.9-6.9,4.4-7,7.4 C25,60.3,31.6,63.9,40,63.9z M47,19.9c-2-2-4.3-2.9-7-2.9c-2.7,0-5,1-7,2.9c-2,2-2.9,4.3-2.9,7c0,2.7,1,5,2.9,7c2,2,4.3,2.9,7,2.9 c2.7,0,5-1,7-2.9c2-2,2.9-4.3,2.9-7C49.9,24.1,48.9,21.8,47,19.9z' })
	            );
	        }
	    }]);

	    return User;
	}(_react2.default.Component);

	exports.default = User;

/***/ }),
/* 544 */
/***/ (function(module, exports, __webpack_require__) {

	"use strict";

	Object.defineProperty(exports, "__esModule", {
	    value: true
	});

	var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

	var _react = __webpack_require__(4);

	var _react2 = _interopRequireDefault(_react);

	var _ButtonNormal = __webpack_require__(41);

	var _ButtonNormal2 = _interopRequireDefault(_ButtonNormal);

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

	function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

	function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

	var TipSuggestions = function (_React$Component) {
	    _inherits(TipSuggestions, _React$Component);

	    function TipSuggestions(props) {
	        _classCallCheck(this, TipSuggestions);

	        var _this = _possibleConstructorReturn(this, (TipSuggestions.__proto__ || Object.getPrototypeOf(TipSuggestions)).call(this, props));

	        console.log(_this.props);
	        _this.state = {
	            tipSuggestion1Enabled: _this.props.tipSuggestion1 != null ? _this.props.tipSuggestion1.isEnabled : false,
	            tipSuggestion2Enabled: _this.props.tipSuggestion2 != null ? _this.props.tipSuggestion2.isEnabled : false,
	            tipSuggestion3Enabled: _this.props.tipSuggestion3 != null ? _this.props.tipSuggestion3.isEnabled : false,
	            tipSuggestion4Enabled: _this.props.tipSuggestion4 != null ? _this.props.tipSuggestion4.isEnabled : false,
	            tipSuggestion1Percentage: _this.props.tipSuggestion1.percentage,
	            tipSuggestion2Percentage: _this.props.tipSuggestion2.percentage,
	            tipSuggestion3Percentage: _this.props.tipSuggestion3.percentage,
	            tipSuggestion4Percentage: _this.props.tipSuggestion4.percentage,
	            tipSuggestion1Label: _this.props.tipSuggestion1.name,
	            tipSuggestion2Label: _this.props.tipSuggestion2.name,
	            tipSuggestion3Label: _this.props.tipSuggestion3.name,
	            tipSuggestion4Label: _this.props.tipSuggestion4.name

	        };
	        _this.tipSuggestion1 = _this.props.tipSuggestion1;
	        _this.tipSuggestion2 = _this.props.tipSuggestion2;
	        _this.tipSuggestion3 = _this.props.tipSuggestion3;
	        _this.tipSuggestion4 = _this.props.tipSuggestion4;

	        _this.onTipSuggestion1EnabledChange = _this.onTipSuggestion1EnabledChange.bind(_this);
	        _this.onTipSuggestion2EnabledChange = _this.onTipSuggestion2EnabledChange.bind(_this);
	        _this.onTipSuggestion3EnabledChange = _this.onTipSuggestion3EnabledChange.bind(_this);
	        _this.onTipSuggestion4EnabledChange = _this.onTipSuggestion4EnabledChange.bind(_this);
	        _this.tipSuggestion1PercentageChange = _this.tipSuggestion1PercentageChange.bind(_this);
	        _this.tipSuggestion2PercentageChange = _this.tipSuggestion2PercentageChange.bind(_this);
	        _this.tipSuggestion3PercentageChange = _this.tipSuggestion3PercentageChange.bind(_this);
	        _this.tipSuggestion4PercentageChange = _this.tipSuggestion4PercentageChange.bind(_this);
	        _this.tipSuggestion1LabelChange = _this.tipSuggestion1LabelChange.bind(_this);
	        _this.tipSuggestion2LabelChange = _this.tipSuggestion2LabelChange.bind(_this);
	        _this.tipSuggestion3LabelChange = _this.tipSuggestion3LabelChange.bind(_this);
	        _this.tipSuggestion4LabelChange = _this.tipSuggestion4LabelChange.bind(_this);
	        return _this;
	    }

	    _createClass(TipSuggestions, [{
	        key: "onTipSuggestion1EnabledChange",
	        value: function onTipSuggestion1EnabledChange() {
	            this.tipSuggestion1.isEnabled = !this.state.tipSuggestion1Enabled;
	            this.setState({ tipSuggestion1Enabled: !this.state.tipSuggestion1Enabled });
	        }
	    }, {
	        key: "onTipSuggestion2EnabledChange",
	        value: function onTipSuggestion2EnabledChange() {
	            this.tipSuggestion2.isEnabled = !this.state.tipSuggestion2Enabled;
	            this.setState({ tipSuggestion2Enabled: !this.state.tipSuggestion2Enabled });
	        }
	    }, {
	        key: "onTipSuggestion3EnabledChange",
	        value: function onTipSuggestion3EnabledChange() {
	            this.tipSuggestion3.isEnabled = !this.state.tipSuggestion3Enabled;
	            this.setState({ tipSuggestion3Enabled: !this.state.tipSuggestion3Enabled });
	        }
	    }, {
	        key: "onTipSuggestion4EnabledChange",
	        value: function onTipSuggestion4EnabledChange() {
	            this.tipSuggestion4.isEnabled = !this.state.tipSuggestion4Enabled;
	            this.setState({ tipSuggestion4Enabled: !this.state.tipSuggestion4Enabled });
	        }
	    }, {
	        key: "tipSuggestion1PercentageChange",
	        value: function tipSuggestion1PercentageChange(e) {
	            var percentage = e.target.value;
	            if (percentage.length < 1) {
	                percentage = "";
	            } else if (percentage < 0) {
	                percentage = 0;
	            } else if (percentage > 100) {
	                percentage = 100;
	            }
	            this.setState({ tipSuggestion1Percentage: percentage });
	            this.tipSuggestion1.percentage = percentage;
	        }
	    }, {
	        key: "tipSuggestion2PercentageChange",
	        value: function tipSuggestion2PercentageChange(e) {
	            var percentage = e.target.value;
	            if (percentage.length < 1) {
	                percentage = "";
	            } else if (percentage < 0) {
	                percentage = 0;
	            } else if (percentage > 100) {
	                percentage = 100;
	            }
	            this.setState({ tipSuggestion2Percentage: percentage });
	            this.tipSuggestion2.percentage = percentage;
	        }
	    }, {
	        key: "tipSuggestion3PercentageChange",
	        value: function tipSuggestion3PercentageChange(e) {
	            var percentage = e.target.value;
	            if (percentage.length < 1) {
	                percentage = "";
	            } else if (percentage < 0) {
	                percentage = 0;
	            } else if (percentage > 100) {
	                percentage = 100;
	            }
	            this.setState({ tipSuggestion3Percentage: percentage });
	            this.tipSuggestion3.percentage = percentage;
	        }
	    }, {
	        key: "tipSuggestion4PercentageChange",
	        value: function tipSuggestion4PercentageChange(e) {
	            var percentage = e.target.value;
	            if (percentage.length < 1) {
	                percentage = "";
	            } else if (percentage < 0) {
	                percentage = 0;
	            } else if (percentage > 100) {
	                percentage = 100;
	            }
	            this.setState({ tipSuggestion4Percentage: percentage });
	            this.tipSuggestion4.percentage = percentage;
	        }
	    }, {
	        key: "tipSuggestion1LabelChange",
	        value: function tipSuggestion1LabelChange(e) {
	            this.setState({ tipSuggestion1Label: e.target.value });
	            this.tipSuggestion1.name = e.target.value;
	        }
	    }, {
	        key: "tipSuggestion2LabelChange",
	        value: function tipSuggestion2LabelChange(e) {
	            this.setState({ tipSuggestion2Label: e.target.value });
	            this.tipSuggestion2.name = e.target.value;
	        }
	    }, {
	        key: "tipSuggestion3LabelChange",
	        value: function tipSuggestion3LabelChange(e) {
	            this.setState({ tipSuggestion3Label: e.target.value });
	            this.tipSuggestion3.name = e.target.value;
	        }
	    }, {
	        key: "tipSuggestion4LabelChange",
	        value: function tipSuggestion4LabelChange(e) {
	            this.setState({ tipSuggestion4Label: e.target.value });
	            this.tipSuggestion4.name = e.target.value;
	        }
	    }, {
	        key: "render",
	        value: function render() {
	            var _this2 = this;

	            var _onClick = this.props.onClick;
	            return _react2.default.createElement(
	                "div",
	                { className: "tip_suggestions" },
	                _react2.default.createElement(
	                    "h3",
	                    { className: "tip_suggestions_header" },
	                    "Set Tip Suggestions"
	                ),
	                _react2.default.createElement(
	                    "div",
	                    { className: "tipSuggestion" },
	                    _react2.default.createElement("input", { className: "tip_suggestion_checkbox", type: "checkbox", ref: "manual_entry", checked: this.state.tipSuggestion1Enabled, onChange: this.onTipSuggestion1EnabledChange }),
	                    _react2.default.createElement("input", { className: "tip_suggestion_percentage", type: "number", min: 1, max: 100, maxLength: 3, value: this.state.tipSuggestion1Percentage, onChange: this.tipSuggestion1PercentageChange }),
	                    _react2.default.createElement("input", { className: "tip_suggestion_label", type: "text", value: this.state.tipSuggestion1Label, onChange: this.tipSuggestion1LabelChange })
	                ),
	                _react2.default.createElement(
	                    "div",
	                    { className: "tipSuggestion" },
	                    _react2.default.createElement("input", { className: "tip_suggestion_checkbox", type: "checkbox", ref: "manual_entry", checked: this.state.tipSuggestion2Enabled, onChange: this.onTipSuggestion2EnabledChange }),
	                    _react2.default.createElement("input", { className: "tip_suggestion_percentage", type: "number", min: "1", max: "100", value: this.state.tipSuggestion2Percentage, onChange: this.tipSuggestion2PercentageChange }),
	                    _react2.default.createElement("input", { className: "tip_suggestion_label", type: "text", value: this.state.tipSuggestion2Label, onChange: this.tipSuggestion2LabelChange })
	                ),
	                _react2.default.createElement(
	                    "div",
	                    { className: "tipSuggestion" },
	                    _react2.default.createElement("input", { className: "tip_suggestion_checkbox", type: "checkbox", ref: "manual_entry", checked: this.state.tipSuggestion3Enabled, onChange: this.onTipSuggestion3EnabledChange }),
	                    _react2.default.createElement("input", { className: "tip_suggestion_percentage", type: "number", min: "1", max: "100", value: this.state.tipSuggestion3Percentage, onChange: this.tipSuggestion3PercentageChange }),
	                    _react2.default.createElement("input", { className: "tip_suggestion_label", type: "text", defaultValue: this.state.tipSuggestion3Label, onChange: this.tipSuggestion3LabelChange })
	                ),
	                _react2.default.createElement(
	                    "div",
	                    { className: "tipSuggestion" },
	                    _react2.default.createElement("input", { className: "tip_suggestion_checkbox", type: "checkbox", ref: "manual_entry", checked: this.state.tipSuggestion4Enabled, onChange: this.onTipSuggestion4EnabledChange }),
	                    _react2.default.createElement("input", { className: "tip_suggestion_percentage", type: "number", min: "1", max: "100", defaultValue: this.state.tipSuggestion4Percentage, onChange: this.tipSuggestion4PercentageChange }),
	                    _react2.default.createElement("input", { className: "tip_suggestion_label", type: "text", defaultValue: this.state.tipSuggestion4Label, onChange: this.tipSuggestion4LabelChange })
	                ),
	                _react2.default.createElement(
	                    "div",
	                    { className: "tip_suggestions_button_container" },
	                    _react2.default.createElement(_ButtonNormal2.default, { title: "Save", color: "white", extra: "tip_suggestions_button", onClick: function onClick() {
	                            _onClick(_this2.tipSuggestion1, _this2.tipSuggestion2, _this2.tipSuggestion3, _this2.tipSuggestion4);
	                        } })
	                )
	            );
	        }
	    }]);

	    return TipSuggestions;
	}(_react2.default.Component);

	exports.default = TipSuggestions;

/***/ }),
/* 545 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';

	Object.defineProperty(exports, "__esModule", {
	    value: true
	});

	var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

	var _reactRouter = __webpack_require__(61);

	var _react = __webpack_require__(4);

	var _react2 = _interopRequireDefault(_react);

	var _TitleBar = __webpack_require__(105);

	var _TitleBar2 = _interopRequireDefault(_TitleBar);

	var _TransactionRow = __webpack_require__(279);

	var _TransactionRow2 = _interopRequireDefault(_TransactionRow);

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

	function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

	function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

	var Transactions = function (_React$Component) {
	    _inherits(Transactions, _React$Component);

	    function Transactions(props) {
	        _classCallCheck(this, Transactions);

	        var _this = _possibleConstructorReturn(this, (Transactions.__proto__ || Object.getPrototypeOf(Transactions)).call(this, props));

	        _this.store = _this.props.store;
	        _this.transactions = _this.store.getTransactions();
	        console.log("transactions - getTransactions", _this.transactions);

	        _this.goToPayment = _this.goToPayment.bind(_this);
	        return _this;
	    }

	    _createClass(Transactions, [{
	        key: 'goToPayment',
	        value: function goToPayment(transaction) {
	            console.log('goToPayment', transaction);
	            if (transaction.transactionTitle !== 'Manual Refund') {
	                _reactRouter.browserHistory.push({ pathname: '/payment', state: { type: 'payment', id: transaction.id } });
	            } else {
	                _reactRouter.browserHistory.push({ pathname: '/payment', state: { type: 'refund', refund: transaction.id } });
	            }
	        }
	    }, {
	        key: 'render',
	        value: function render() {

	            return _react2.default.createElement(
	                'div',
	                { className: 'transactions' },
	                _react2.default.createElement(
	                    'div',
	                    { className: 'transactions_list' },
	                    _react2.default.createElement(_TitleBar2.default, { title: 'Transactions' }),
	                    this.transactions.map(function (transaction, i) {
	                        return _react2.default.createElement(_TransactionRow2.default, { key: "transaction-" + i, transaction: transaction, onClick: this.goToPayment });
	                    }, this)
	                )
	            );
	        }
	    }]);

	    return Transactions;
	}(_react2.default.Component);

	exports.default = Transactions;

/***/ }),
/* 546 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';

	Object.defineProperty(exports, "__esModule", {
	    value: true
	});

	var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

	var _reactRouter = __webpack_require__(61);

	var _ButtonNormal = __webpack_require__(41);

	var _ButtonNormal2 = _interopRequireDefault(_ButtonNormal);

	var _react = __webpack_require__(4);

	var _react2 = _interopRequireDefault(_react);

	var _TitleBar = __webpack_require__(105);

	var _TitleBar2 = _interopRequireDefault(_TitleBar);

	var _VaultedCardRow = __webpack_require__(547);

	var _VaultedCardRow2 = _interopRequireDefault(_VaultedCardRow);

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

	function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

	function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

	var VaultCard = function (_React$Component) {
	    _inherits(VaultCard, _React$Component);

	    function VaultCard(props) {
	        _classCallCheck(this, VaultCard);

	        var _this = _possibleConstructorReturn(this, (VaultCard.__proto__ || Object.getPrototypeOf(VaultCard)).call(this, props));

	        _this.state = {
	            currentCard: '',
	            customerName: '',
	            showPrompt: false,
	            showVaultPrompt: false,
	            vaultedCards: []
	        };
	        _this.cloverConnector = _this.props.cloverConnection.cloverConnector;
	        _this.fadeBackground = _this.props.fadeBackground;
	        _this.store = _this.props.store;
	        _this.unfadeBackground = _this.props.unfadeBackground;

	        _this.handleCustomerName = _this.handleCustomerName.bind(_this);
	        _this.openRegister = _this.openRegister.bind(_this);
	        _this.openOrder = _this.openOrder.bind(_this);
	        _this.promptForName = _this.promptForName.bind(_this);
	        _this.vaultCard = _this.vaultCard.bind(_this);
	        return _this;
	    }

	    _createClass(VaultCard, [{
	        key: 'init',
	        value: function init() {
	            // populate with existing vaulted cards
	            this.setState({ vaultedCards: this.store.getVaultedCards() });
	        }
	    }, {
	        key: 'promptForName',
	        value: function promptForName() {
	            // prompt user for name to be associated with card
	            this.fadeBackground();
	            this.setState({ showPrompt: true, customerName: '' });
	        }
	    }, {
	        key: 'vaultCard',
	        value: function vaultCard() {
	            // vault card on Clover device
	            this.unfadeBackground();
	            this.setState({ showPrompt: false });
	            console.log('vaulting card, entry methods:', this.store.cardEntryMethods);
	            this.cloverConnector.vaultCard(this.store.cardEntryMethods);
	        }
	    }, {
	        key: 'openRegister',
	        value: function openRegister(vaultType) {
	            // go to register and pass through vaulted card
	            console.log('vaultType:' + vaultType);
	            if (vaultType === 'New Order') {
	                _reactRouter.browserHistory.push({ pathname: '/register', state: { saleType: 'Vaulted', card: this.state.currentCard } });
	            } else if (vaultType === "PreAuth") {
	                _reactRouter.browserHistory.push({ pathname: '/register', state: { saleType: 'Vaulted PreAuth', card: this.state.currentCard } });
	            }
	        }
	    }, {
	        key: 'openOrder',
	        value: function openOrder(vaultedCard) {
	            this.setState({ showVaultPrompt: true, currentCard: vaultedCard });
	        }
	    }, {
	        key: 'handleCustomerName',
	        value: function handleCustomerName(e) {
	            // handle customer name change
	            this.setState({ customerName: e.target.value });
	        }
	    }, {
	        key: 'componentWillReceiveProps',
	        value: function componentWillReceiveProps(newProps) {
	            if (newProps.vaultedCard === true) {
	                var lastVaulted = this.store.getLastVaultedCard();
	                lastVaulted.setName(this.state.customerName);
	                this.setState({ vaultedCards: this.store.getVaultedCards() });
	            }
	        }
	    }, {
	        key: 'componentDidMount',
	        value: function componentDidMount() {
	            this.init();
	        }
	    }, {
	        key: 'render',
	        value: function render() {
	            var _this2 = this;

	            var cards = this.state.vaultedCards;

	            return _react2.default.createElement(
	                'div',
	                { className: 'column' },
	                this.state.showPrompt && _react2.default.createElement(
	                    'div',
	                    { className: 'popup popup_container' },
	                    _react2.default.createElement(
	                        'div',
	                        { className: 'row_padding' },
	                        _react2.default.createElement(
	                            'div',
	                            { className: 'cards_title' },
	                            'Enter Customer Name to be Associated with Card:'
	                        ),
	                        _react2.default.createElement(
	                            'div',
	                            { className: 'row' },
	                            _react2.default.createElement('input', { className: 'cards_input', type: 'text', value: this.state.customerName, onChange: this.handleCustomerName }),
	                            _react2.default.createElement(_ButtonNormal2.default, { color: 'white', title: 'Save', extra: 'cards_save_button', onClick: this.vaultCard })
	                        )
	                    )
	                ),
	                this.state.showVaultPrompt && _react2.default.createElement(
	                    'div',
	                    { className: 'popup popup_container' },
	                    _react2.default.createElement(
	                        'div',
	                        { className: 'payment_methods' },
	                        _react2.default.createElement(_ButtonNormal2.default, { color: 'white', extra: 'button_large', title: 'New Order', onClick: function onClick() {
	                                _this2.openRegister('New Order');
	                            } }),
	                        _react2.default.createElement(_ButtonNormal2.default, { color: 'white', extra: 'button_large', title: 'New PreAuth(Tab)', onClick: function onClick() {
	                                _this2.openRegister('PreAuth');
	                            } })
	                    )
	                ),
	                _react2.default.createElement(
	                    'div',
	                    { className: 'card_list' },
	                    _react2.default.createElement(_TitleBar2.default, { title: 'Vaulted Cards Associated w/ Customers' }),
	                    cards.map(function (card, i) {
	                        return _react2.default.createElement(_VaultedCardRow2.default, { key: 'card-' + i, card: card, onClick: _this2.openOrder });
	                    })
	                ),
	                _react2.default.createElement(
	                    'div',
	                    { className: 'cards_footer' },
	                    _react2.default.createElement('div', { className: 'filler_space' }),
	                    _react2.default.createElement(_ButtonNormal2.default, { title: 'Vault New Card', color: 'white', extra: 'cards_button', onClick: this.promptForName })
	                )
	            );
	        }
	    }]);

	    return VaultCard;
	}(_react2.default.Component);

	exports.default = VaultCard;

/***/ }),
/* 547 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';

	Object.defineProperty(exports, "__esModule", {
	    value: true
	});

	var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

	var _CardDataHelper = __webpack_require__(285);

	var _CardDataHelper2 = _interopRequireDefault(_CardDataHelper);

	var _CurrencyFormatter = __webpack_require__(27);

	var _CurrencyFormatter2 = _interopRequireDefault(_CurrencyFormatter);

	var _react = __webpack_require__(4);

	var _react2 = _interopRequireDefault(_react);

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

	function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

	function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

	var VaultedCardRow = function (_React$Component) {
	    _inherits(VaultedCardRow, _React$Component);

	    function VaultedCardRow(props) {
	        _classCallCheck(this, VaultedCardRow);

	        var _this = _possibleConstructorReturn(this, (VaultedCardRow.__proto__ || Object.getPrototypeOf(VaultedCardRow)).call(this, props));

	        _this.card = _this.props.card;
	        _this.cdh = new _CardDataHelper2.default();
	        _this.formatter = new _CurrencyFormatter2.default();
	        return _this;
	    }

	    _createClass(VaultedCardRow, [{
	        key: 'render',
	        value: function render() {
	            var _this2 = this;

	            var card = this.card.card;
	            var _onClick = this.props.onClick;

	            return _react2.default.createElement(
	                'div',
	                { className: 'vaulted_card_row', onClick: function onClick() {
	                        _onClick(_this2.card);
	                    } },
	                _react2.default.createElement(
	                    'div',
	                    { className: 'vaulted_card_name' },
	                    this.card.name
	                ),
	                _react2.default.createElement(
	                    'div',
	                    { className: 'vaulted_card_info' },
	                    _react2.default.createElement(
	                        'div',
	                        null,
	                        card.first6,
	                        'xxxxxx',
	                        card.last4
	                    ),
	                    _react2.default.createElement(
	                        'div',
	                        null,
	                        'Exp: ',
	                        this.cdh.getExpirationDate(card.expirationDate)
	                    )
	                )
	            );
	        }
	    }]);

	    return VaultedCardRow;
	}(_react2.default.Component);

	exports.default = VaultedCardRow;

/***/ }),
/* 548 */
/***/ (function(module, exports) {

	"use strict";

	Object.defineProperty(exports, "__esModule", {
	    value: true
	});

	var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

	var ActivityMessage = function () {
	    function ActivityMessage(action, payload) {
	        _classCallCheck(this, ActivityMessage);

	        this.action = action;
	        this.payload = payload;
	    }

	    _createClass(ActivityMessage, [{
	        key: "getAction",
	        value: function getAction() {
	            return this.action;
	        }
	    }, {
	        key: "getPayload",
	        value: function getPayload() {
	            return this.payload;
	        }
	    }]);

	    return ActivityMessage;
	}();

	exports.default = ActivityMessage;

/***/ }),
/* 549 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';

	Object.defineProperty(exports, "__esModule", {
	    value: true
	});

	var _PayloadMessage2 = __webpack_require__(176);

	var _PayloadMessage3 = _interopRequireDefault(_PayloadMessage2);

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

	function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

	function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

	var ConversationResponseMessage = function (_PayloadMessage) {
	    _inherits(ConversationResponseMessage, _PayloadMessage);

	    function ConversationResponseMessage(message) {
	        _classCallCheck(this, ConversationResponseMessage);

	        var _this = _possibleConstructorReturn(this, (ConversationResponseMessage.__proto__ || Object.getPrototypeOf(ConversationResponseMessage)).call(this, 'ConversationResponseMessage', 'CONVERSATION_RESPONSE'));

	        _this.message = message;
	        return _this;
	    }

	    return ConversationResponseMessage;
	}(_PayloadMessage3.default);

	exports.default = ConversationResponseMessage;

/***/ }),
/* 550 */
/***/ (function(module, exports) {

	"use strict";

	Object.defineProperty(exports, "__esModule", {
	    value: true
	});

	var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

	var CustomPayloadMessage = function () {
	    function CustomPayloadMessage(payloadContent, sentToCustomActivity) {
	        _classCallCheck(this, CustomPayloadMessage);

	        this.payloadContent = payloadContent;
	        this.sentToCustomActivity = sentToCustomActivity;
	    }

	    _createClass(CustomPayloadMessage, [{
	        key: "getPayload",
	        value: function getPayload() {
	            return this.payloadContent;
	        }
	    }, {
	        key: "isSentToCustomActivity",
	        value: function isSentToCustomActivity() {
	            return this.sentToCustomActivity;
	        }
	    }]);

	    return CustomPayloadMessage;
	}();

	exports.default = CustomPayloadMessage;

/***/ }),
/* 551 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';

	Object.defineProperty(exports, "__esModule", {
	    value: true
	});

	var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

	var _PayloadMessage2 = __webpack_require__(176);

	var _PayloadMessage3 = _interopRequireDefault(_PayloadMessage2);

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

	function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

	function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

	var CustomerInfoMessage = function (_PayloadMessage) {
	    _inherits(CustomerInfoMessage, _PayloadMessage);

	    function CustomerInfoMessage(customerInfo) {
	        _classCallCheck(this, CustomerInfoMessage);

	        var _this = _possibleConstructorReturn(this, (CustomerInfoMessage.__proto__ || Object.getPrototypeOf(CustomerInfoMessage)).call(this, 'CustomerInfoMessage', 'CUSTOMER_INFO'));

	        _this.customerInfo = customerInfo;
	        return _this;
	    }

	    _createClass(CustomerInfoMessage, [{
	        key: 'getCustomerInfo',
	        value: function getCustomerInfo() {
	            return this.customerInfo;
	        }
	    }]);

	    return CustomerInfoMessage;
	}(_PayloadMessage3.default);

	exports.default = CustomerInfoMessage;

/***/ }),
/* 552 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';

	Object.defineProperty(exports, "__esModule", {
	    value: true
	});

	var _ActivityMessage2 = __webpack_require__(548);

	var _ActivityMessage3 = _interopRequireDefault(_ActivityMessage2);

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

	function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

	function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

	var MessageToActivity = function (_ActivityMessage) {
	    _inherits(MessageToActivity, _ActivityMessage);

	    function MessageToActivity(action, payload) {
	        _classCallCheck(this, MessageToActivity);

	        return _possibleConstructorReturn(this, (MessageToActivity.__proto__ || Object.getPrototypeOf(MessageToActivity)).call(this, action, payload));
	    }

	    return MessageToActivity;
	}(_ActivityMessage3.default);

	exports.default = MessageToActivity;

/***/ }),
/* 553 */
/***/ (function(module, exports) {

	"use strict";

	Object.defineProperty(exports, "__esModule", {
	    value: true
	});

	var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

	var Rating = function () {
	    function Rating() {
	        _classCallCheck(this, Rating);

	        this.id = null;
	        this.question = null;
	        this.value = null;
	    }

	    _createClass(Rating, [{
	        key: "getId",
	        value: function getId() {
	            return this.id;
	        }
	    }, {
	        key: "setId",
	        value: function setId(id) {
	            this.id = id;
	        }
	    }, {
	        key: "getQuestion",
	        value: function getQuestion() {
	            return this.question;
	        }
	    }, {
	        key: "setQuestion",
	        value: function setQuestion(question) {
	            this.question = question;
	        }
	    }, {
	        key: "getValue",
	        value: function getValue() {
	            return this.value;
	        }
	    }, {
	        key: "setValue",
	        value: function setValue(value) {
	            this.value = value;
	        }
	    }]);

	    return Rating;
	}();

	exports.default = Rating;

/***/ }),
/* 554 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';

	Object.defineProperty(exports, "__esModule", {
	    value: true
	});

	var _PayloadMessage2 = __webpack_require__(176);

	var _PayloadMessage3 = _interopRequireDefault(_PayloadMessage2);

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

	function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

	function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

	var RatingsMessage = function (_PayloadMessage) {
	    _inherits(RatingsMessage, _PayloadMessage);

	    function RatingsMessage(ratings) {
	        _classCallCheck(this, RatingsMessage);

	        var _this = _possibleConstructorReturn(this, (RatingsMessage.__proto__ || Object.getPrototypeOf(RatingsMessage)).call(this, 'RatingsMessage', 'RATINGS'));

	        _this.ratings = ratings;
	        return _this;
	    }

	    return RatingsMessage;
	}(_PayloadMessage3.default);

	exports.default = RatingsMessage;

/***/ }),
/* 555 */
/***/ (function(module, exports) {

	"use strict";

	Object.defineProperty(exports, "__esModule", {
	    value: true
	});

	var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

	var CustomerInfo = function () {
	    function CustomerInfo() {
	        _classCallCheck(this, CustomerInfo);

	        this.customerName = null;
	        this.phoneNumber = null;
	    }

	    _createClass(CustomerInfo, [{
	        key: "setCustomerName",
	        value: function setCustomerName(name) {
	            this.customerName = name;
	        }
	    }, {
	        key: "getCustomerName",
	        value: function getCustomerName() {
	            return this.customerName;
	        }
	    }, {
	        key: "setPhoneNumber",
	        value: function setPhoneNumber(number) {
	            this.phoneNumber = number;
	        }
	    }, {
	        key: "getPhoneNumber",
	        value: function getPhoneNumber() {
	            return this.phoneNumber;
	        }
	    }]);

	    return CustomerInfo;
	}();

	exports.default = CustomerInfo;

/***/ }),
/* 556 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';

	Object.defineProperty(exports, "__esModule", {
	    value: true
	});

	var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

	var _CurrencyFormatter = __webpack_require__(27);

	var _CurrencyFormatter2 = _interopRequireDefault(_CurrencyFormatter);

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

	var Discount = function () {
	    function Discount(name, amount, percentage) {
	        _classCallCheck(this, Discount);

	        this.amountOff = amount;
	        this.formatter = new _CurrencyFormatter2.default();
	        this.name = name;
	        this.percentageOff = percentage;
	    }

	    _createClass(Discount, [{
	        key: 'getAmountOff',
	        value: function getAmountOff() {
	            return this.amountOff;
	        }
	    }, {
	        key: 'setAmountOff',
	        value: function setAmountOff(value) {
	            this.percentageOff = 0.00;
	            this.amountOff = value;
	        }
	    }, {
	        key: 'getPercentageOff',
	        value: function getPercentageOff() {
	            return this.percentageOff;
	        }
	    }, {
	        key: 'setPercentageOff',
	        value: function setPercentageOff(value) {
	            this.amountOff = 0;
	            this.percentageOff = value;
	        }
	    }, {
	        key: 'getName',
	        value: function getName() {
	            return this.name;
	        }
	    }, {
	        key: 'appliedTo',
	        value: function appliedTo(sub) {
	            if (this.getAmountOff() == 0) {
	                sub = this.formatter.convertToFloat(sub);
	                sub = parseFloat(sub - sub * this.getPercentageOff()).toFixed(2);
	                sub = this.formatter.convertFromFloat(sub);
	            } else {
	                sub -= this.amountOff;
	            }
	            return Math.max(sub, 0);
	        }
	    }, {
	        key: 'getValue',
	        value: function getValue(sub) {
	            var value = this.formatter.convertToFloat(this.amountOff);
	            if (this.getAmountOff() == 0) {
	                value = sub * this.getPercentageOff();
	            }
	            return value;
	        }
	    }]);

	    return Discount;
	}();

	exports.default = Discount;

/***/ }),
/* 557 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';

	Object.defineProperty(exports, "__esModule", {
	    value: true
	});

	var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

	var _CurrencyFormatter = __webpack_require__(27);

	var _CurrencyFormatter2 = _interopRequireDefault(_CurrencyFormatter);

	var _remotePayCloud = __webpack_require__(57);

	var _remotePayCloud2 = _interopRequireDefault(_remotePayCloud);

	var _Item = __webpack_require__(282);

	var _Item2 = _interopRequireDefault(_Item);

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

	var Order = function () {
	    function Order(id) {
	        _classCallCheck(this, Order);

	        this.cloverOrderId = '';
	        this.date = new Date();
	        this.discount = null;
	        this.displayItems = [];
	        this.formatter = new _CurrencyFormatter2.default();
	        this.id = id;
	        this.items = [];
	        this.orderPayments = [];
	        this.pendingPaymentId = null;
	        this.refunds = [];
	        this.status = 'OPEN';
	    }

	    _createClass(Order, [{
	        key: 'getId',
	        value: function getId() {
	            return this.id;
	        }
	    }, {
	        key: 'setPendingPaymentId',
	        value: function setPendingPaymentId(id) {
	            this.pendingPaymentId = id;
	        }
	    }, {
	        key: 'getPendingPaymentId',
	        value: function getPendingPaymentId() {
	            return this.pendingPaymentId;
	        }
	    }, {
	        key: 'getStatus',
	        value: function getStatus() {
	            return this.status;
	        }
	    }, {
	        key: 'setStatus',
	        value: function setStatus(status) {
	            this.status = status;
	        }
	    }, {
	        key: 'addItem',
	        value: function addItem(id, title, price, tippable, taxable) {
	            var orderItem = this.getOrderItemById(id);
	            var item = this.getItemById(id);
	            if (item == null) {
	                this.items.push(new _Item2.default(id, title, price, tippable, taxable));
	            }
	            if (orderItem == null) {
	                var lineItem = new _remotePayCloud2.default.sdk.order.DisplayLineItem();
	                lineItem.setId(id);
	                lineItem.setName(title);
	                lineItem.setPrice(this.formatter.formatCurrency(price));
	                lineItem.setQuantity(1);
	                this.displayItems.push(lineItem);
	            } else {
	                orderItem.setQuantity(orderItem.quantity + 1);
	            }
	        }
	    }, {
	        key: 'getItems',
	        value: function getItems() {
	            return this.items;
	        }
	    }, {
	        key: 'getDisplayItems',
	        value: function getDisplayItems() {
	            return this.displayItems;
	        }
	    }, {
	        key: 'getItemById',
	        value: function getItemById(id) {
	            var orderItem = null;
	            this.items.filter(function (obj) {
	                if (obj.id == id) {
	                    orderItem = obj;
	                }
	            });
	            return orderItem;
	        }
	    }, {
	        key: 'getOrderItemById',
	        value: function getOrderItemById(id) {
	            var orderItem = null;
	            this.displayItems.filter(function (obj) {
	                if (obj.id == id) {
	                    orderItem = obj;
	                }
	            });
	            return orderItem;
	        }
	    }, {
	        key: 'getPaymentById',
	        value: function getPaymentById(id) {
	            var payment = null;
	            this.payments.filter(function (obj) {
	                if (obj.id == id) {
	                    payment = obj;
	                }
	            });
	            return payment;
	        }
	    }, {
	        key: 'getTotal',
	        value: function getTotal() {
	            var total = parseFloat(this.getPreTaxSubTotal()) + parseFloat(this.getTaxAmount());
	            return parseFloat(total).toFixed(2);
	        }
	    }, {
	        key: 'getDate',
	        value: function getDate() {
	            return this.date;
	        }
	    }, {
	        key: 'addOrderPayment',
	        value: function addOrderPayment(orderPayment) {
	            this.orderPayments.push(orderPayment);
	        }
	    }, {
	        key: 'getOrderPayments',
	        value: function getOrderPayments() {
	            return this.orderPayments;
	        }
	    }, {
	        key: 'getRefunds',
	        value: function getRefunds() {
	            return this.refunds;
	        }
	    }, {
	        key: 'addRefund',
	        value: function addRefund(refund) {
	            this.refunds.push(refund);
	        }
	    }, {
	        key: 'addDiscount',
	        value: function addDiscount(discount) {
	            this.discount = discount;
	        }
	    }, {
	        key: 'getDiscount',
	        value: function getDiscount() {
	            return this.discount;
	        }
	    }, {
	        key: 'getTaxableSubtotal',
	        value: function getTaxableSubtotal() {
	            var sub = 0;
	            this.displayItems.forEach(function (item) {
	                var _item = this.getItemById(item.id);
	                if (_item.getTaxable()) {
	                    sub = parseFloat(parseFloat(sub) + this.formatter.convertFromFloat(item.price) * item.quantity);
	                }
	            }, this);
	            if (this.discount != null) {
	                sub = this.discount.appliedTo(sub);
	            }
	            return this.formatter.convertToFloat(sub);
	        }
	    }, {
	        key: 'getPreTaxSubTotal',
	        value: function getPreTaxSubTotal() {
	            var sub = 0;
	            this.displayItems.forEach(function (item) {
	                sub = parseFloat(parseFloat(sub) + this.formatter.convertFromFloat(item.price) * item.quantity);
	            }, this);
	            if (this.discount != null) {
	                sub = this.discount.appliedTo(sub);
	            }
	            return this.formatter.convertToFloat(sub);
	        }
	    }, {
	        key: 'getTaxAmount',
	        value: function getTaxAmount() {
	            var taxable = this.getTaxableSubtotal();
	            taxable = taxable.replace('$', '');
	            var taxAmount = parseFloat(taxable * 0.07).toFixed(2);
	            return taxAmount;
	        }
	    }, {
	        key: 'getTippableAmount',
	        value: function getTippableAmount() {
	            var tippableAmount = 0;
	            this.displayItems.forEach(function (item) {
	                var _item = this.getItemById(item.id);
	                if (_item.getTippable()) {
	                    tippableAmount = parseFloat(parseFloat(tippableAmount) + this.formatter.convertToFloat(_item.price) * item.quantity);
	                }
	            }, this);
	            if (this.discount != null) {
	                tippableAmount = this.discount.appliedTo(tippableAmount);
	            }
	            return parseFloat(tippableAmount + parseFloat(this.getTaxAmount())).toFixed(2); // should match Total if there aren't any "non-tippable" items
	        }
	    }, {
	        key: 'getCloverOrderId',
	        value: function getCloverOrderId() {
	            return this.cloverOrderId;
	        }
	    }, {
	        key: 'setCloverOrderId',
	        value: function setCloverOrderId(id) {
	            this.cloverOrderId = id;
	        }
	    }]);

	    return Order;
	}();

	exports.default = Order;

/***/ }),
/* 558 */
/***/ (function(module, exports) {

	'use strict';

	Object.defineProperty(exports, "__esModule", {
	    value: true
	});

	var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

	var PaymentRefund = function () {
	    function PaymentRefund() {
	        _classCallCheck(this, PaymentRefund);

	        this.amount = 0;
	        this.date = new Date();
	        this.employee = 'EMPLOYEE';
	        this.orderId = undefined;
	        this.paymentId = undefined;
	        this.refundId = undefined;
	    }

	    _createClass(PaymentRefund, [{
	        key: 'getAmount',
	        value: function getAmount() {
	            return this.amount;
	        }
	    }, {
	        key: 'setAmount',
	        value: function setAmount(amount) {
	            this.amount = amount;
	        }
	    }, {
	        key: 'getDate',
	        value: function getDate() {
	            return this.date;
	        }
	    }, {
	        key: 'setDate',
	        value: function setDate(date) {
	            this.date = date;
	        }
	    }, {
	        key: 'getEmployee',
	        value: function getEmployee() {
	            return this.employee;
	        }
	    }, {
	        key: 'setEmployee',
	        value: function setEmployee(employee) {
	            this.employee = employee;
	        }
	    }, {
	        key: 'getOrderId',
	        value: function getOrderId() {
	            return this.orderId;
	        }
	    }, {
	        key: 'setOrderId',
	        value: function setOrderId(orderId) {
	            this.orderId = orderId;
	        }
	    }, {
	        key: 'getPaymentId',
	        value: function getPaymentId() {
	            return this.paymentId;
	        }
	    }, {
	        key: 'setPaymentId',
	        value: function setPaymentId(paymentId) {
	            this.paymentId = paymentId;
	        }
	    }, {
	        key: 'getRefundId',
	        value: function getRefundId() {
	            return this.refundId;
	        }
	    }, {
	        key: 'setRefundId',
	        value: function setRefundId(refundId) {
	            this.refundId = refundId;
	        }
	    }]);

	    return PaymentRefund;
	}();

	exports.default = PaymentRefund;

/***/ }),
/* 559 */
/***/ (function(module, exports) {

	'use strict';

	Object.defineProperty(exports, "__esModule", {
	    value: true
	});

	var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

	var PreAuth = function () {
	    function PreAuth(preAuth, payment) {
	        _classCallCheck(this, PreAuth);

	        this.name = '';
	        this.payment = payment;
	        this.preAuth = preAuth;
	    }

	    _createClass(PreAuth, [{
	        key: 'getCard',
	        value: function getCard() {
	            return this.card;
	        }
	    }, {
	        key: 'setCard',
	        value: function setCard(card) {
	            this.card = card;
	        }
	    }, {
	        key: 'getName',
	        value: function getName() {
	            return this.name;
	        }
	    }, {
	        key: 'setName',
	        value: function setName(name) {
	            this.name = name;
	        }
	    }, {
	        key: 'getPayment',
	        value: function getPayment() {
	            return this.payment;
	        }
	    }, {
	        key: 'setPayment',
	        value: function setPayment(payment) {
	            this.payment = payment;
	        }
	    }]);

	    return PreAuth;
	}();

	exports.default = PreAuth;

/***/ }),
/* 560 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';

	Object.defineProperty(exports, "__esModule", {
	    value: true
	});

	var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

	var _remotePayCloud = __webpack_require__(57);

	var _remotePayCloud2 = _interopRequireDefault(_remotePayCloud);

	var _CurrencyFormatter = __webpack_require__(27);

	var _CurrencyFormatter2 = _interopRequireDefault(_CurrencyFormatter);

	var _Transaction = __webpack_require__(284);

	var _Transaction2 = _interopRequireDefault(_Transaction);

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

	var Store = function () {
	    function Store() {
	        _classCallCheck(this, Store);

	        this.allowOfflinePayments = true;
	        this.approveOfflinePaymentWithoutPrompt = true;
	        this.automaticSignatureConfirmation = true;
	        this.automaticPaymentConfirmation = true;
	        this.availableItems = [];
	        this.cardEntryMethods = _remotePayCloud2.default.CardEntryMethods.DEFAULT;
	        this.credits = [];
	        this.customActivity = null;
	        this.deviceId = null;
	        this.disableDuplicateChecking = true;
	        this.disablePrinting = false;
	        this.disableReceiptOptions = true;
	        this.discounts = [];
	        this.forceOfflinePayments = false;
	        this.formatter = new _CurrencyFormatter2.default();
	        this.currentOrder = null;
	        this.lastVaultedCard = null;
	        this.orders = [];
	        this.orderId = 0;
	        this.paymentId = 0;
	        this.preAuth = null;
	        this.preAuthPaymentId = null;
	        this.refunds = [];
	        this.signatureEntryLocation = _remotePayCloud2.default.sdk.payments.DataEntryLocation.NONE;
	        this.signatureThreshold = 0;
	        this.storeName = null;
	        this.tipAmount = 0;
	        this.tipMode = _remotePayCloud2.default.sdk.payments.TipMode.ON_SCREEN_BEFORE_PAYMENT;
	        this.transactions = [];
	        this.vaultedCards = [];
	        this.tipSuggestion1 = new _remotePayCloud2.default.sdk.merchant.TipSuggestion();
	        this.tipSuggestion1.setIsEnabled(true);
	        this.tipSuggestion1.setName("Good");
	        this.tipSuggestion1.setPercentage(15);
	        this.tipSuggestion2 = new _remotePayCloud2.default.sdk.merchant.TipSuggestion();
	        this.tipSuggestion2.setIsEnabled(true);
	        this.tipSuggestion2.setName("Great");
	        this.tipSuggestion2.setPercentage(18);
	        this.tipSuggestion3 = new _remotePayCloud2.default.sdk.merchant.TipSuggestion();
	        this.tipSuggestion3.setIsEnabled(true);
	        this.tipSuggestion3.setName("Wow!");
	        this.tipSuggestion3.setPercentage(20);
	        this.tipSuggestion4 = new _remotePayCloud2.default.sdk.merchant.TipSuggestion();
	        this.tipSuggestion4.setIsEnabled(true);
	        this.tipSuggestion4.setName("Best Service Ever!");
	        this.tipSuggestion4.setPercentage(30);
	        this.getNextPaymentId = this.getNextPaymentId.bind(this);
	    }

	    _createClass(Store, [{
	        key: 'setStoreName',
	        value: function setStoreName(name) {
	            this.storeName = name;
	        }
	    }, {
	        key: 'getStoreName',
	        value: function getStoreName() {
	            return this.storeName;
	        }
	    }, {
	        key: 'setCurrentOrder',
	        value: function setCurrentOrder(current) {
	            this.currentOrder = current;
	        }
	    }, {
	        key: 'getCurrentOrder',
	        value: function getCurrentOrder() {
	            return this.currentOrder;
	        }
	    }, {
	        key: 'getNextPaymentId',
	        value: function getNextPaymentId() {
	            this.paymentId++;
	            return this.paymentId;
	        }
	    }, {
	        key: 'getNextOrderId',
	        value: function getNextOrderId() {
	            this.orderId++;
	            return this.orderId;
	        }
	    }, {
	        key: 'getLastOpenOrder',
	        value: function getLastOpenOrder() {
	            var order = null;
	            if (this.orders.length > 0) {
	                var lastOrder = this.orders[this.orders.length - 1];
	                if (lastOrder.status === 'OPEN' && this.currentOrder.id !== lastOrder.id && lastOrder.items.length === 0) {
	                    order = lastOrder;
	                }
	            }
	            return order;
	        }
	    }, {
	        key: 'getOrderById',
	        value: function getOrderById(id) {
	            var order = null;
	            this.orders.filter(function (obj) {
	                if (obj.id == id) {
	                    order = obj;
	                }
	            });
	            return order;
	        }
	    }, {
	        key: 'getItemById',
	        value: function getItemById(id) {
	            var item = null;
	            this.availableItems.filter(function (obj) {
	                if (obj.id == id) {
	                    item = obj;
	                }
	            });
	            return item;
	        }
	    }, {
	        key: 'getPaymentByCloverId',
	        value: function getPaymentByCloverId(paymentId) {
	            var payment = null;
	            this.orders.forEach(function (order) {
	                order.orderPayments.forEach(function (orderPayment) {
	                    if (orderPayment.cloverPaymentId === paymentId) {
	                        payment = orderPayment;
	                    }
	                }, this);
	            }, this);
	            return payment;
	        }
	    }, {
	        key: 'getRefundByCloverId',
	        value: function getRefundByCloverId(refundId) {
	            var refund = null;
	            this.refunds.forEach(function (refund_) {
	                if (refund_.id === refundId) {
	                    refund = refund_;
	                }
	            }, this);
	            return refund;
	        }
	    }, {
	        key: 'getOrderByCloverPaymentId',
	        value: function getOrderByCloverPaymentId(paymentId) {
	            var selectedOrder = null;
	            this.orders.forEach(function (order) {
	                order.orderPayments.forEach(function (orderPayment) {
	                    if (orderPayment.cloverPaymentId === paymentId) {
	                        selectedOrder = order;
	                    }
	                }, this);
	            }, this);
	            return selectedOrder;
	        }
	    }, {
	        key: 'getOrders',
	        value: function getOrders() {
	            return this.orders;
	        }
	    }, {
	        key: 'getTransactions',
	        value: function getTransactions() {
	            return this.transactions;
	        }
	    }, {
	        key: 'addTransaction',
	        value: function addTransaction(transaction) {
	            this.transactions.push(transaction);
	        }
	    }, {
	        key: 'updateTransactionToRefund',
	        value: function updateTransactionToRefund(transactionId) {
	            this.transactions.filter(function (obj) {
	                if (obj.id == transactionId) {
	                    var refundTransaction = obj;
	                    obj.setRefund(true);
	                }
	            });
	        }
	    }, {
	        key: 'updateTransactionToVoided',
	        value: function updateTransactionToVoided(transactionId) {
	            this.transactions.filter(function (obj) {
	                if (obj.id == transactionId) {
	                    obj.setTransactionType('VOIDED');
	                }
	            });
	            var payment = this.getPaymentByCloverId(transactionId);
	            payment.setTransactionType('VOIDED');
	            var order = this.getOrderByCloverPaymentId(transactionId);
	            order.setStatus('OPEN');
	        }
	    }, {
	        key: 'setCardEntryMethods',
	        value: function setCardEntryMethods(cardEntryMethods) {
	            this.cardEntryMethods = cardEntryMethods;
	        }
	    }, {
	        key: 'getCardEntryMethods',
	        value: function getCardEntryMethods() {
	            return this.cardEntryMethods;
	        }
	    }, {
	        key: 'getItems',
	        value: function getItems() {
	            return this.availableItems;
	        }
	    }, {
	        key: 'addItem',
	        value: function addItem(item) {
	            this.availableItems.push(item);
	        }
	    }, {
	        key: 'getOrders',
	        value: function getOrders() {
	            return this.orders;
	        }
	    }, {
	        key: 'addOrder',
	        value: function addOrder(order) {
	            this.orders.push(order);
	        }
	    }, {
	        key: 'getVaultedCards',
	        value: function getVaultedCards() {
	            return this.vaultedCards;
	        }
	    }, {
	        key: 'addCard',
	        value: function addCard(card) {
	            this.lastVaultedCard = card;
	            this.vaultedCards.push(this.lastVaultedCard);
	        }
	    }, {
	        key: 'getLastVaultedCard',
	        value: function getLastVaultedCard() {
	            return this.lastVaultedCard;
	        }
	    }, {
	        key: 'getCredits',
	        value: function getCredits() {
	            return this.credits;
	        }
	    }, {
	        key: 'addRefund',
	        value: function addRefund(refund) {
	            this.refunds.push(refund);
	            var transaction = this.createTransactionFromRefund(refund);
	            this.transactions.push(transaction);
	        }
	    }, {
	        key: 'createTransactionFromRefund',
	        value: function createTransactionFromRefund(refund) {
	            var transaction = new _Transaction2.default();
	            transaction.amount = this.formatter.convertToFloat(refund.amount);
	            transaction.cardDetails = refund.getCardDetails();
	            transaction.cardType = refund.getCardType();
	            transaction.date = refund.getDate();
	            transaction.id = refund.getId();
	            transaction.tender = refund.getTender();
	            transaction.transactionTitle = refund.getTransactionTitle();
	            transaction.transactionType = refund.getTransactionType();
	            transaction.refund = true;
	            transaction.entryMethod = refund.getEntryMethod();
	            transaction.transactionState = refund.getTransactionState();
	            transaction.deviceId = this.getDeviceId();
	            return transaction;
	        }
	    }, {
	        key: 'getPreAuth',
	        value: function getPreAuth() {
	            return this.preAuth;
	        }
	    }, {
	        key: 'setPreAuth',
	        value: function setPreAuth(preauth) {
	            this.preAuth = preauth;
	        }
	    }, {
	        key: 'getPreAuthPaymentId',
	        value: function getPreAuthPaymentId() {
	            return this.preAuthPaymentId;
	        }
	    }, {
	        key: 'setPreAuthPaymentId',
	        value: function setPreAuthPaymentId(id) {
	            this.preAuthPaymentId = id;
	        }
	    }, {
	        key: 'getRefunds',
	        value: function getRefunds() {
	            return this.refunds;
	        }
	    }, {
	        key: 'addPaymentToCurrentOrder',
	        value: function addPaymentToCurrentOrder(payment) {
	            this.currentOrder.addOrderPayment(payment);
	        }
	    }, {
	        key: 'addDiscount',
	        value: function addDiscount(discount) {
	            this.discounts.push(discount);
	        }
	    }, {
	        key: 'getDiscounts',
	        value: function getDiscounts() {
	            return this.discounts;
	        }
	    }, {
	        key: 'setForceOfflinePayments',
	        value: function setForceOfflinePayments(forceOffline) {
	            this.forceOfflinePayments = forceOffline;
	        }
	    }, {
	        key: 'getForceOfflinePayments',
	        value: function getForceOfflinePayments() {
	            return this.forceOfflinePayments;
	        }
	    }, {
	        key: 'setAllowOfflinePayments',
	        value: function setAllowOfflinePayments(allowOffline) {
	            this.allowOfflinePayments = allowOffline;
	        }
	    }, {
	        key: 'getAllowOfflinePayments',
	        value: function getAllowOfflinePayments() {
	            return this.allowOfflinePayments;
	        }
	    }, {
	        key: 'setApproveOfflinePaymentWithoutPrompt',
	        value: function setApproveOfflinePaymentWithoutPrompt(approveOfflinePaymentWithoutPrompt) {
	            this.approveOfflinePaymentWithoutPrompt = approveOfflinePaymentWithoutPrompt;
	        }
	    }, {
	        key: 'getApproveOfflinePaymentWithoutPrompt',
	        value: function getApproveOfflinePaymentWithoutPrompt() {
	            return this.approveOfflinePaymentWithoutPrompt;
	        }
	    }, {
	        key: 'getSignatureEntryLocation',
	        value: function getSignatureEntryLocation() {
	            return this.signatureEntryLocation;
	        }
	    }, {
	        key: 'setSignatureEntryLocation',
	        value: function setSignatureEntryLocation(location) {
	            this.signatureEntryLocation = location;
	        }
	    }, {
	        key: 'getTipMode',
	        value: function getTipMode() {
	            return this.tipMode;
	        }
	    }, {
	        key: 'setTipMode',
	        value: function setTipMode(tipMode) {
	            this.tipMode = tipMode;
	        }
	    }, {
	        key: 'getTipAmount',
	        value: function getTipAmount() {
	            return this.tipAmount;
	        }
	    }, {
	        key: 'setTipAmount',
	        value: function setTipAmount(tipAmount) {
	            this.tipAmount = tipAmount;
	        }
	    }, {
	        key: 'getSignatureThreshold',
	        value: function getSignatureThreshold() {
	            return this.signatureThreshold;
	        }
	    }, {
	        key: 'setSignatureThreshold',
	        value: function setSignatureThreshold(threshold) {
	            this.signatureThreshold = threshold;
	        }
	    }, {
	        key: 'getDisableDuplicateChecking',
	        value: function getDisableDuplicateChecking() {
	            return this.disableDuplicateChecking;
	        }
	    }, {
	        key: 'setDisableDuplicateChecking',
	        value: function setDisableDuplicateChecking(disableDuplicateChecking) {
	            this.disableDuplicateChecking = disableDuplicateChecking;
	        }
	    }, {
	        key: 'getDisableReceiptOptions',
	        value: function getDisableReceiptOptions() {
	            return this.disableReceiptOptions;
	        }
	    }, {
	        key: 'setDisableReceiptOptions',
	        value: function setDisableReceiptOptions(disableReceiptOptions) {
	            this.disableReceiptOptions = disableReceiptOptions;
	        }
	    }, {
	        key: 'getDisablePrinting',
	        value: function getDisablePrinting() {
	            return this.disablePrinting;
	        }
	    }, {
	        key: 'setDisablePrinting',
	        value: function setDisablePrinting(disablePrinting) {
	            this.disablePrinting = disablePrinting;
	        }
	    }, {
	        key: 'getAutomaticSignatureConfirmation',
	        value: function getAutomaticSignatureConfirmation() {
	            return this.automaticSignatureConfirmation;
	        }
	    }, {
	        key: 'setAutomaticSignatureConfirmation',
	        value: function setAutomaticSignatureConfirmation(automaticSignatureConfirmation) {
	            this.automaticSignatureConfirmation = automaticSignatureConfirmation;
	        }
	    }, {
	        key: 'getAutomaticPaymentConfirmation',
	        value: function getAutomaticPaymentConfirmation() {
	            return this.automaticPaymentConfirmation;
	        }
	    }, {
	        key: 'setAutomaticPaymentConfirmation',
	        value: function setAutomaticPaymentConfirmation(automaticPaymentConfirmation) {
	            this.automaticPaymentConfirmation = automaticPaymentConfirmation;
	        }
	    }, {
	        key: 'setCustomActivity',
	        value: function setCustomActivity(activity) {
	            this.customActivity = activity;
	        }
	    }, {
	        key: 'getCustomActivity',
	        value: function getCustomActivity() {
	            return this.customActivity;
	        }
	    }, {
	        key: 'getDeviceId',
	        value: function getDeviceId() {
	            return this.deviceId;
	        }
	    }, {
	        key: 'setDeviceId',
	        value: function setDeviceId(id) {
	            this.deviceId = id;
	        }
	    }, {
	        key: 'getTipSuggestion1',
	        value: function getTipSuggestion1() {
	            return this.tipSuggestion1;
	        }
	    }, {
	        key: 'setTipSuggestion1',
	        value: function setTipSuggestion1(tipSuggestion1) {
	            this.tipSuggestion1 = tipSuggestion1;
	        }
	    }, {
	        key: 'getTipSuggestion2',
	        value: function getTipSuggestion2() {
	            return this.tipSuggestion2;
	        }
	    }, {
	        key: 'setTipSuggestion2',
	        value: function setTipSuggestion2(tipSuggestion2) {
	            this.tipSuggestion2 = tipSuggestion2;
	        }
	    }, {
	        key: 'getTipSuggestion3',
	        value: function getTipSuggestion3() {
	            return this.tipSuggestion3;
	        }
	    }, {
	        key: 'setTipSuggestion3',
	        value: function setTipSuggestion3(tipSuggestion3) {
	            this.tipSuggestion3 = tipSuggestion3;
	        }
	    }, {
	        key: 'getTipSuggestion4',
	        value: function getTipSuggestion4() {
	            return this.tipSuggestion4;
	        }
	    }, {
	        key: 'setTipSuggestion4',
	        value: function setTipSuggestion4(tipSuggestion4) {
	            this.tipSuggestion4 = tipSuggestion4;
	        }
	    }]);

	    return Store;
	}();

	exports.default = Store;

/***/ }),
/* 561 */
/***/ (function(module, exports) {

	'use strict';

	Object.defineProperty(exports, "__esModule", {
	    value: true
	});

	var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

	var VaultedCard = function () {
	    function VaultedCard(card) {
	        _classCallCheck(this, VaultedCard);

	        this.card = card;
	        this.name = '';
	    }

	    _createClass(VaultedCard, [{
	        key: 'getCard',
	        value: function getCard() {
	            return this.card;
	        }
	    }, {
	        key: 'setCard',
	        value: function setCard(card) {
	            this.card = card;
	        }
	    }, {
	        key: 'getName',
	        value: function getName() {
	            return this.name;
	        }
	    }, {
	        key: 'setName',
	        value: function setName(name) {
	            this.name = name;
	        }
	    }]);

	    return VaultedCard;
	}();

	exports.default = VaultedCard;

/***/ }),
/* 562 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';

	Object.defineProperty(exports, "__esModule", {
	        value: true
	});

	var _react = __webpack_require__(4);

	var _react2 = _interopRequireDefault(_react);

	var _reactRouter = __webpack_require__(61);

	var _Register = __webpack_require__(528);

	var _Register2 = _interopRequireDefault(_Register);

	var _Refunds = __webpack_require__(527);

	var _Refunds2 = _interopRequireDefault(_Refunds);

	var _Transactions = __webpack_require__(545);

	var _Transactions2 = _interopRequireDefault(_Transactions);

	var _HomeMenu = __webpack_require__(278);

	var _HomeMenu2 = _interopRequireDefault(_HomeMenu);

	var _Orders = __webpack_require__(520);

	var _Orders2 = _interopRequireDefault(_Orders);

	var _VaultCard = __webpack_require__(546);

	var _VaultCard2 = _interopRequireDefault(_VaultCard);

	var _CustomActivities = __webpack_require__(511);

	var _CustomActivities2 = _interopRequireDefault(_CustomActivities);

	var _Payment = __webpack_require__(522);

	var _Payment2 = _interopRequireDefault(_Payment);

	var _Device = __webpack_require__(512);

	var _Device2 = _interopRequireDefault(_Device);

	var _RecoveryOptions = __webpack_require__(525);

	var _RecoveryOptions2 = _interopRequireDefault(_RecoveryOptions);

	var _Layout = __webpack_require__(515);

	var _Layout2 = _interopRequireDefault(_Layout);

	var _IndexPage = __webpack_require__(514);

	var _IndexPage2 = _interopRequireDefault(_IndexPage);

	var _NotFoundPage = __webpack_require__(516);

	var _NotFoundPage2 = _interopRequireDefault(_NotFoundPage);

	var _PreAuth = __webpack_require__(524);

	var _PreAuth2 = _interopRequireDefault(_PreAuth);

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

	var routes = _react2.default.createElement(
	        _reactRouter.Route,
	        { path: '/', component: _Layout2.default },
	        _react2.default.createElement(_reactRouter.IndexRoute, { component: _IndexPage2.default }),
	        _react2.default.createElement(_reactRouter.Route, { path: 'register', component: _Register2.default }),
	        _react2.default.createElement(_reactRouter.Route, { path: 'refunds', component: _Refunds2.default }),
	        _react2.default.createElement(_reactRouter.Route, { path: 'home-menu', component: _HomeMenu2.default }),
	        _react2.default.createElement(_reactRouter.Route, { path: 'preauth', component: _PreAuth2.default }),
	        _react2.default.createElement(_reactRouter.Route, { path: 'transactions', component: _Transactions2.default }),
	        _react2.default.createElement(_reactRouter.Route, { path: 'payment', component: _Payment2.default }),
	        _react2.default.createElement(_reactRouter.Route, { path: 'orders', component: _Orders2.default }),
	        _react2.default.createElement(_reactRouter.Route, { path: 'vault-card', component: _VaultCard2.default }),
	        _react2.default.createElement(_reactRouter.Route, { path: 'custom-activities', component: _CustomActivities2.default }),
	        _react2.default.createElement(_reactRouter.Route, { path: 'device', component: _Device2.default }),
	        _react2.default.createElement(_reactRouter.Route, { path: 'recovery-options', component: _RecoveryOptions2.default }),
	        _react2.default.createElement(_reactRouter.Route, { path: '*', component: _NotFoundPage2.default })
	);

	exports.default = routes;

/***/ }),
/* 563 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';

	Object.defineProperty(exports, "__esModule", {
	    value: true
	});

	var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

	var _remotePayCloud = __webpack_require__(57);

	var _remotePayCloud2 = _interopRequireDefault(_remotePayCloud);

	var _POSCloverConnectorListener = __webpack_require__(565);

	var _POSCloverConnectorListener2 = _interopRequireDefault(_POSCloverConnectorListener);

	var _react = __webpack_require__(4);

	var _react2 = _interopRequireDefault(_react);

	var _config = __webpack_require__(280);

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

	var CloverConnection = function () {
	    function CloverConnection(options) {
	        _classCallCheck(this, CloverConnection);

	        this.cloverConnector = null;
	        this.connected = false;
	        this.applicationId = 'com.clover.cloud-pos-example-react';
	        Object.assign(this, options);
	    }

	    _createClass(CloverConnection, [{
	        key: 'connectToDevicePairing',
	        value: function connectToDevicePairing(uriText, authToken) {
	            var _this = this;

	            console.log('connecting.....', uriText, authToken);
	            var factoryConfig = {};
	            factoryConfig[_remotePayCloud2.default.CloverConnectorFactoryBuilder.FACTORY_VERSION] = _remotePayCloud2.default.CloverConnectorFactoryBuilder.VERSION_12;
	            var cloverConnectorFactory = _remotePayCloud2.default.CloverConnectorFactoryBuilder.createICloverConnectorFactory(factoryConfig);

	            var onPairingCode = function onPairingCode(pairingCode) {
	                console.log('Pairing code is ' + pairingCode);
	                _this.setPairingCode(pairingCode);
	            };

	            var onPairingSuccess = function onPairingSuccess(authToken) {
	                console.log('Pairing succeeded, authToken is ' + authToken);
	            };

	            var networkConfigurationBuilder = new _remotePayCloud2.default.WebSocketPairedCloverDeviceConfigurationBuilder(this.applicationId, uriText, 'example_pos', 'register_1', authToken, onPairingCode, onPairingSuccess);
	            var pairedConfiguration = networkConfigurationBuilder.setPosName('pos.name').setHeartbeatInterval(1000).setReconnectDelay(3000).build();
	            this.cloverConnector = cloverConnectorFactory.createICloverConnector(pairedConfiguration);

	            var connectorListener = new _POSCloverConnectorListener2.default({
	                cloverConnector: this.cloverConnector,
	                setStatus: this.setStatus,
	                challenge: this.challenge,
	                tipAdded: this.tipAdded,
	                store: this.store,
	                closeStatus: this.closeStatus,
	                inputOptions: this.inputOptions,
	                confirmSignature: this.confirmSignature,
	                toggleConnection: this.toggleConnectionState,
	                customSuccess: this.customSuccess,
	                newCustomMessage: this.newCustomMessage,
	                finalCustomMessage: this.finalCustomMessage
	            });

	            this.cloverConnector.addCloverConnectorListener(connectorListener);
	            this.cloverConnector.initializeConnection();
	        }
	    }, {
	        key: 'connectToDeviceCloud',
	        value: function connectToDeviceCloud(accessToken, merchantId, deviceId) {
	            var forceConnect = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : false;

	            console.log('connecting.....', accessToken, merchantId, deviceId);
	            var factoryConfig = {};
	            factoryConfig[_remotePayCloud2.default.CloverConnectorFactoryBuilder.FACTORY_VERSION] = _remotePayCloud2.default.CloverConnectorFactoryBuilder.VERSION_12;
	            var cloverConnectorFactory = _remotePayCloud2.default.CloverConnectorFactoryBuilder.createICloverConnectorFactory(factoryConfig);

	            var cloudConfigurationBuilder = new _remotePayCloud2.default.WebSocketCloudCloverDeviceConfigurationBuilder(this.applicationId, deviceId, merchantId, accessToken);
	            var cloudConfiguration = cloudConfigurationBuilder.setCloverServer(_config.myConfig.cloverServer).setFriendlyId(_remotePayCloud2.default.CloverID.getNewId()).setForceConnect(forceConnect).setHeartbeatInterval(1000).setHeartbeatDisconnectTimeout(3000).build();
	            this.cloverConnector = cloverConnectorFactory.createICloverConnector(cloudConfiguration);

	            var connectorListener = new _POSCloverConnectorListener2.default({
	                cloverConnector: this.cloverConnector,
	                setStatus: this.setStatus,
	                challenge: this.challenge,
	                tipAdded: this.tipAdded,
	                store: this.store,
	                closeStatus: this.closeStatus,
	                inputOptions: this.inputOptions,
	                confirmSignature: this.confirmSignature,
	                toggleConnection: this.toggleConnectionState,
	                customSuccess: this.customSuccess,
	                newCustomMessage: this.newCustomMessage,
	                finalCustomMessage: this.finalCustomMessage
	            });

	            this.cloverConnector.addCloverConnectorListener(connectorListener);
	            this.cloverConnector.initializeConnection();
	        }
	    }]);

	    return CloverConnection;
	}();

	exports.default = CloverConnection;

/***/ }),
/* 564 */
/***/ (function(module, exports) {

	'use strict';

	Object.defineProperty(exports, "__esModule", {
	    value: true
	});

	var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

	/**
	 * Created by rachel.antion on 11/2/17.
	 */
	var ConnectionHelper = function () {
	    function ConnectionHelper() {
	        _classCallCheck(this, ConnectionHelper);

	        this.DOMAIN_KEY = 'server_url';
	        this.DOMAIN_PATH = '{server_url}';
	        this.OAUTH_CLIENT_ID_KEY = 'client_id';
	        this.OAUTH_CLIENT_ID_SUFFIX = '&client_id={' + this.OAUTH_CLIENT_ID_KEY + '}';
	        this.OAUTH_CLIENT_SECRET_KEY = 'client_secret';
	        this.OAUTH_CLIENT_SECRET_SUFFIX = '&client_secret={' + this.OAUTH_CLIENT_SECRET_KEY + '}';
	        this.OAUTH_CODE = 'code';
	        this.OAUTH_CODE_SUFFIX = '&code={' + this.OAUTH_CODE + '}';
	        this.OAUTH_MERCHANT_ID_KEY = 'merchant_id';
	        this.OAUTH_MERCHANT_ID_SUFFIX = '&merchant_id={' + this.OAUTH_MERCHANT_ID_KEY + '}';
	        this.OAUTH_PATH = 'oauth/authorize?response_type=token';
	        this.OAUTH_PATH_TOKEN = 'oauth/token?response_type=token';
	        this.OAUTH_REDIRECT_URI_KEY = 'redirect_uri';
	        this.OAUTH_REDIRECT_URI_SUFFIX = '&redirect_uri={' + this.OAUTH_REDIRECT_URI_KEY + '}';
	    }

	    _createClass(ConnectionHelper, [{
	        key: 'getOAuthUrl',
	        value: function getOAuthUrl(domain, clientId, merchantId, redirectUri) {
	            var variables = {};
	            variables[this.DOMAIN_KEY] = domain;
	            variables[this.OAUTH_CLIENT_ID_KEY] = clientId;
	            var oauthEndpointPath = this.DOMAIN_PATH + this.OAUTH_PATH + this.OAUTH_CLIENT_ID_SUFFIX;
	            if (merchantId) {
	                variables[this.OAUTH_MERCHANT_ID_KEY] = merchantId;
	                oauthEndpointPath += this.OAUTH_MERCHANT_ID_SUFFIX;
	            }
	            if (redirectUri) {
	                variables[this.OAUTH_REDIRECT_URI_KEY] = encodeURIComponent(redirectUri);
	                oauthEndpointPath += this.OAUTH_REDIRECT_URI_SUFFIX;
	            }
	            return this.setVariables(oauthEndpointPath, variables);
	        }
	    }, {
	        key: 'getOAuthTokenUrl',
	        value: function getOAuthTokenUrl(domain, clientId, clientSecret, code) {
	            console.log('this was called');
	            var variables = {};
	            variables[this.DOMAIN_KEY] = domain;
	            variables[this.OAUTH_CLIENT_ID_KEY] = clientId;
	            var oauthEndpointPath = this.DOMAIN_PATH + this.OAUTH_PATH_TOKEN + this.OAUTH_CLIENT_ID_SUFFIX;
	            if (clientSecret) {
	                variables[this.OAUTH_CLIENT_SECRET_KEY] = clientSecret;
	                oauthEndpointPath += this.OAUTH_CLIENT_SECRET_SUFFIX;
	            }
	            if (code) {
	                variables[this.OAUTH_CODE] = code;
	                oauthEndpointPath += this.OAUTH_CODE_SUFFIX;
	            }
	            return this.setVariables(oauthEndpointPath, variables);
	        }
	    }, {
	        key: 'setVariables',
	        value: function setVariables(template, variableMap) {
	            for (var key in variableMap) {
	                if (variableMap.hasOwnProperty(key)) {
	                    var bracedKey = new RegExp(this.escapeRegExp("{" + key + "}"), "g");
	                    // If the value of DOMAIN_KEY does not have a trailing slash, add one.
	                    if (key === this.DOMAIN_KEY) {
	                        variableMap[key] = this.appendTrailingSlashToDomain(variableMap[key]);
	                    }
	                    template = template.replace(bracedKey, variableMap[key]);
	                }
	            }
	            return template;
	        }
	    }, {
	        key: 'appendTrailingSlashToDomain',
	        value: function appendTrailingSlashToDomain(domain) {
	            if (domain && domain.charAt(domain.length - 1) !== '/') {
	                return domain + '/';
	            }
	            return domain;
	        }
	    }, {
	        key: 'escapeRegExp',
	        value: function escapeRegExp(stringToGoIntoTheRegex) {
	            return stringToGoIntoTheRegex.replace(/[-\/\\^$*+?.()|[\]{}]/g, '\\$&');
	        }
	    }]);

	    return ConnectionHelper;
	}();

	exports.default = ConnectionHelper;

/***/ }),
/* 565 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';

	Object.defineProperty(exports, "__esModule", {
	    value: true
	});

	var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

	var _react = __webpack_require__(4);

	var _react2 = _interopRequireDefault(_react);

	var _Refund = __webpack_require__(177);

	var _Refund2 = _interopRequireDefault(_Refund);

	var _PaymentRefund = __webpack_require__(558);

	var _PaymentRefund2 = _interopRequireDefault(_PaymentRefund);

	var _remotePayCloud = __webpack_require__(57);

	var _remotePayCloud2 = _interopRequireDefault(_remotePayCloud);

	var _OrderPayment = __webpack_require__(283);

	var _OrderPayment2 = _interopRequireDefault(_OrderPayment);

	var _Transaction = __webpack_require__(284);

	var _Transaction2 = _interopRequireDefault(_Transaction);

	var _VaultedCard = __webpack_require__(561);

	var _VaultedCard2 = _interopRequireDefault(_VaultedCard);

	var _PreAuth = __webpack_require__(559);

	var _PreAuth2 = _interopRequireDefault(_PreAuth);

	var _CustomerInfo = __webpack_require__(555);

	var _CustomerInfo2 = _interopRequireDefault(_CustomerInfo);

	var _Rating = __webpack_require__(553);

	var _Rating2 = _interopRequireDefault(_Rating);

	var _RatingsMessage = __webpack_require__(554);

	var _RatingsMessage2 = _interopRequireDefault(_RatingsMessage);

	var _ConversationResponseMessage = __webpack_require__(549);

	var _ConversationResponseMessage2 = _interopRequireDefault(_ConversationResponseMessage);

	var _MessageToActivity = __webpack_require__(552);

	var _MessageToActivity2 = _interopRequireDefault(_MessageToActivity);

	var _CustomerInfoMessage = __webpack_require__(551);

	var _CustomerInfoMessage2 = _interopRequireDefault(_CustomerInfoMessage);

	var _CurrencyFormatter = __webpack_require__(27);

	var _CurrencyFormatter2 = _interopRequireDefault(_CurrencyFormatter);

	var _CardDataHelper = __webpack_require__(285);

	var _CardDataHelper2 = _interopRequireDefault(_CardDataHelper);

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

	function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

	function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

	var POSCloverConnectorListener = function (_clover$sdk$remotepay) {
	    _inherits(POSCloverConnectorListener, _clover$sdk$remotepay);

	    function POSCloverConnectorListener(options) {
	        _classCallCheck(this, POSCloverConnectorListener);

	        var _this = _possibleConstructorReturn(this, (POSCloverConnectorListener.__proto__ || Object.getPrototypeOf(POSCloverConnectorListener)).call(this));

	        Object.assign(_this, options);
	        _this.lastDeviceEvent = null;
	        _this.formatter = new _CurrencyFormatter2.default();
	        _this.cdh = new _CardDataHelper2.default();
	        _this.setPaymentStatus = _this.setPaymentStatus.bind(_this);
	        _this.createOrderPayment = _this.createOrderPayment.bind(_this);
	        _this.CUSTOM_ACTIVITY_PACKAGE = 'com.clover.cfp.examples.';
	        return _this;
	    }

	    //<editor-fold desc="Clover Device Events">

	    /*
	     *                     CLOVER DEVICE EVENTS
	     *****************************************************************
	     */

	    //<editor-fold desc="Device Communication">
	    // COMMUNICATION

	    _createClass(POSCloverConnectorListener, [{
	        key: 'onDeviceActivityStart',
	        value: function onDeviceActivityStart(deviceEvent) {
	            // called when a Clover device activity starts
	            // console.log("onDeviceActivityStart", deviceEvent);
	            this.lastDeviceEvent = deviceEvent.getEventState();
	            var message = deviceEvent.getMessage();
	            if (message !== undefined && this.notCustomActivity(message) && message !== null) {
	                this.setStatus(deviceEvent.getMessage());
	            }
	            if (!this.notCustomActivity(message)) {
	                this.customSuccess(true);
	            }
	            if (deviceEvent.inputOptions.length > 0) {
	                this.inputOptions(deviceEvent.inputOptions);
	            }
	        }
	    }, {
	        key: 'onDeviceActivityEnd',
	        value: function onDeviceActivityEnd(deviceEvent) {
	            // called when a Clover device activity ends
	            // console.log("onDeviceActivityEnd", deviceEvent);
	            if (deviceEvent.getEventState() !== undefined) {
	                this.closeStatus();
	            }
	        }
	    }, {
	        key: 'onDeviceConnected',
	        value: function onDeviceConnected() {
	            // called when the Clover device is connected, but not ready to communicate
	            console.log('onDeviceConnected');
	        }
	    }, {
	        key: 'onDeviceDisconnected',
	        value: function onDeviceDisconnected() {
	            // called when the Clover device is disconnected
	            console.log('onDeviceDisconnected');
	            this.setStatus('The device is disconnected!  Refresh the webapp to reconnect.');
	        }
	    }, {
	        key: 'onDeviceError',
	        value: function onDeviceError(deviceErrorEvent) {
	            // called when a Clover device error event is encountered
	            console.log('onDeviceError', deviceErrorEvent);
	            if (deviceErrorEvent.code === _remotePayCloud2.default.sdk.remotepay.DeviceErrorEventCode.AccessDenied && deviceErrorEvent.message.includes("already connected to")) {
	                this.setStatus(deviceErrorEvent.message + '  You should refresh the page and use the \'Force Connect\' flag.');
	            } else if (deviceErrorEvent.code === _remotePayCloud2.default.sdk.remotepay.DeviceErrorEventCode.NotConnected) {
	                this.setStatus('Device is disconnected. You should refresh the page and reconnect');
	            } else {
	                this.setStatus('A device error has occurred: ' + deviceErrorEvent);
	            }
	        }
	    }, {
	        key: 'onDeviceReady',
	        value: function onDeviceReady(merchantInfo) {
	            // called when the Clover device is ready to communicate
	            // console.log('onDeviceReady', merchantInfo);
	            this.store.setStoreName(merchantInfo.merchantName);
	            this.store.setDeviceId(merchantInfo.deviceInfo.serial);
	            this.toggleConnection(true);
	        }
	    }, {
	        key: 'onReady',
	        value: function onReady(merchantInfo) {
	            // console.log('onReady', merchantInfo);
	            this.onDeviceReady(merchantInfo);
	        }
	        //</editor-fold>

	        // PRINTING

	    }, {
	        key: 'onPrintJobStatusResponse',
	        value: function onPrintJobStatusResponse(response) {
	            // the response contains the print job identifier and status
	            console.log('onPrintJobStatusResponse', response);
	            this.setStatus('Print Job Status: ' + response.status, 'Toggle');
	        }
	    }, {
	        key: 'onRetrievePrintersResponse',
	        value: function onRetrievePrintersResponse(response) {
	            // the response contains an array of the printers being passed back
	            console.log('onRetrievePrintersResponse', response);
	            this.setStatus('Printers', response.printers);
	        }

	        // RECOVERY

	    }, {
	        key: 'onRetrievePendingPaymentsResponse',
	        value: function onRetrievePendingPaymentsResponse(response) {
	            // called in response to a retrievePendingPayments request
	            console.log('onRetrievePendingPaymentsResponse', response);
	            var pending = [];
	            if (response.success) {
	                if (response.pendingPaymentEntries.length < 1) {
	                    pending.push('There are no Pending Payments');
	                } else {
	                    response.pendingPaymentEntries.forEach(function (payment) {
	                        var line = payment.paymentId + ' ' + this.formatter.formatCurrency(payment.amount);
	                        pending.push(line);
	                    }, this);
	                }
	                this.setStatus({ title: 'Pending Payments', data: pending });
	            } else {
	                this.setStatus('Error Retrieving Pending Payments', 'Toggle');
	            }
	        }
	    }, {
	        key: 'onRetrieveDeviceStatusResponse',
	        value: function onRetrieveDeviceStatusResponse(response) {
	            // called in response to retrieveDeviceState request
	            console.log('onRetrieveDeviceStatusResponse', response);
	            var status = [];
	            status.push('Result: ' + response.result);
	            status.push('State: ' + response.state);
	            status.push('ExternalActivityId: ' + response.data.customActivityId);
	            status.push('Reason: ' + response.reason);
	            this.setStatus({ title: 'Device Status', data: status });
	        }
	    }, {
	        key: 'onResetDeviceResponse',
	        value: function onResetDeviceResponse(response) {
	            // called in response to a resetDevice request
	            console.log('onResetDeviceResponse', response);
	            if (response.success) {
	                this.setStatus('Reset Device Successful', 'Toggle');
	            } else {
	                this.setStatus('Reset Device Failed, Reason: ' + response.reason);
	            }
	        }
	    }, {
	        key: 'onRetrievePaymentResponse',
	        value: function onRetrievePaymentResponse(response) {
	            // called in response to a retrievePaymentRequest
	            console.log('onRetrievePaymentResponse', response);
	            var paymentLines = [];
	            paymentLines.push('Retrieve Payment: ' + (response.success ? 'Success!' : 'Failed!'));
	            paymentLines.push('Query Status: ' + response.queryStatus);
	            paymentLines.push('Reason: ' + response.reason);
	            if (response.payment !== null && response.payment !== undefined) {
	                paymentLines.push('**************************************************');
	                paymentLines.push('PAYMENT');
	                paymentLines.push('Result: ' + response.payment.result);
	                paymentLines.push('    Amount: ' + this.formatter.formatCurrency(response.payment.amount));
	                var date = new Date(response.payment.createdTime);
	                paymentLines.push('    Date: ' + date.toLocaleDateString() + ' ' + date.toLocaleTimeString());
	            }
	            console.log(paymentLines);
	            this.setStatus({ title: 'Payment Details', data: paymentLines });
	        }
	    }, {
	        key: 'onMessageFromActivity',


	        // CUSTOM ACTIVITIES

	        value: function onMessageFromActivity(message) {
	            // called when a message is sent from a custom activity
	            console.log('onMessageFromActivity', message);
	            this.newCustomMessage(message.payload);
	        }
	    }, {
	        key: 'onCustomActivityResponse',
	        value: function onCustomActivityResponse(response) {
	            // called when a custom activity finishes
	            console.log('onCustomActivityResponse', response);
	            if (response.success) {
	                this.finalCustomMessage(response.payload);
	            } else {
	                if (response.result === 'CANCEL') {
	                    this.setStatus('Custom activity: ' + response.action + ' was canceled. Reason: ' + response.reason, 'Toggle');
	                } else {
	                    this.setStatus('Failure! Custom activity: ' + response.action + ' failed.  Reason: ' + response.reason, 'Toggle');
	                }
	            }
	        }

	        //HELPERS

	    }, {
	        key: 'notCustomActivity',
	        value: function notCustomActivity(message) {
	            // returns if message is custom activity or not
	            return !message.includes('com.');
	        }
	    }, {
	        key: 'handleJokeResponse',
	        value: function handleJokeResponse(payload) {
	            // handles response of joke for custom conversation activity
	            var jokeResponseMessage = new _ConversationResponseMessage2.default(payload.message);
	            this.setStatus('Received response of: ' + jokeResponseMessage.message, 'Toggle');
	        }
	    }, {
	        key: 'handleCustomerLookup',
	        value: function handleCustomerLookup(payload) {
	            // handles customer lookup for the custom ratings activity
	            console.log('handleCustomerLookup', payload);
	            var phoneNumber = payload.phoneNumber;
	            console.log('Just received phone number ' + phoneNumber + ' from the Ratings remote application.', 3000);
	            console.log('Sending customer name Ron Burgundy to the Ratings remote application for phone number ' + phoneNumber, 3000);
	            var customerInfo = new _CustomerInfo2.default();
	            customerInfo.customerName = 'Ron Burgundy';
	            customerInfo.phoneNumber = phoneNumber;
	            var customerInfoMessage = new _CustomerInfoMessage2.default(customerInfo);
	            console.log(customerInfoMessage);
	            var customerInfoJson = JSON.stringify(customerInfoMessage);
	            console.log(customerInfoJson);
	            this.sendMessageToActivity('com.clover.cfp.examples.RatingsExample', customerInfoJson);
	        }
	    }, {
	        key: 'handleRatings',
	        value: function handleRatings(payload) {
	            // handles ratings for custom ratings activity
	            console.log('handleRatings', payload);
	            var ratingsMessage = new _RatingsMessage2.default(JSON.stringify(payload));
	            var ratingsPayload = ratingsMessage.ratings;
	            this.setStatus(ratingsPayload, 'Toggle');
	            //this.showRatingsDialog(ratingsPayload);
	        }
	    }, {
	        key: 'handleRequestRatings',
	        value: function handleRequestRatings() {
	            // handles the request ratings for the custom ratings activity
	            console.log('handleRequestRatings');
	            var rating1 = new _Rating2.default();
	            rating1.id = 'Quality';
	            rating1.question = 'How would you rate the overall quality of your entree?';
	            rating1.value = 0;
	            var rating2 = new _Rating2.default();
	            rating2.id = 'Server';
	            rating2.question = 'How would you rate the overall performance of your server?';
	            rating2.value = 0;
	            var rating3 = new _Rating2.default();
	            rating3.id = 'Value';
	            rating3.question = 'How would you rate the overall value of your dining experience?';
	            rating3.value = 0;
	            var rating4 = new _Rating2.default();
	            rating4.id = 'RepeatBusiness';
	            rating4.question = 'How likely are you to dine at this establishment again in the near future?';
	            rating4.value = 0;
	            var ratings = [rating1, rating2, rating3, rating4];
	            var ratingsMessage = new _RatingsMessage2.default(ratings);
	            var ratingsListJson = JSON.stringify(ratingsMessage);
	            this.sendMessageToActivity('com.clover.cfp.examples.RatingsExample', ratingsListJson);
	        }
	    }, {
	        key: 'sendMessageToActivity',
	        value: function sendMessageToActivity(activityId, payload) {
	            // sends message to device for custom activities
	            var messageRequest = new _MessageToActivity2.default(activityId, payload);
	            this.cloverConnector.sendMessageToActivity(messageRequest);
	        }

	        // OTHER

	    }, {
	        key: 'onReadCardDataResponse',
	        value: function onReadCardDataResponse(response) {
	            // called in response to a readCardData request
	            console.log('onReadCardDataResponse', response);
	            if (response.success) {
	                var cardData = response.cardData;
	                var cardDataString = this.cdh.getCardDataArray(cardData);
	                this.setStatus({ title: 'Card Data', data: cardDataString });
	            } else {
	                this.setStatus('There was an Error Reading Card Data Reason: ' + response.reason);
	            }
	        }

	        //</editor-fold>

	        //<editor-fold desc="Transaction Responses">

	        /*
	         *                      TRANSACTION RESPONSES
	         *****************************************************************
	         */

	        // PRE AUTH

	    }, {
	        key: 'onCapturePreAuthResponse',
	        value: function onCapturePreAuthResponse(response) {
	            // called in response to a capture of a pre auth payment
	            console.log('onCapturePreAuthResponse', response);
	            if (response.success) {
	                var payment = this.store.getPreAuth().payment;
	                console.log('capturePreAuthResponse', payment, this.store.getCurrentOrder());
	                if (payment.id = response.paymentId) {
	                    payment.setStatus('PREAUTH');
	                    payment.setAmount(response.amount);
	                    this.store.setPreAuth(null);
	                    this.store.addPaymentToCurrentOrder(payment);
	                    this.store.getCurrentOrder().setStatus('PAID');
	                    this.store.getCurrentOrder().setCloverOrderId(payment.cloverOrderId);
	                    this.setStatus('PreAuth Processed Successfully');
	                } else {
	                    this.setStatus('PreAuth Capture: Payment received does not match any of the stored PreAuth records');
	                }
	            } else {
	                this.setStatus('PreAuth Capture Error: Payment failed with response code = ' + response.result + ' and reason: ' + response.reason);
	            }
	            this.cloverConnector.showWelcomeScreen();
	        }
	    }, {
	        key: 'onPreAuthResponse',
	        value: function onPreAuthResponse(response) {
	            // called in response to a pre auth request
	            console.log('onPreAuthResponse', response);
	            if (response.success) {
	                if (this.store.getCurrentOrder().getPendingPaymentId() === response.payment.externalPaymentId) {
	                    var _payment = response.payment;
	                    var cashback = _payment.cashbackAmount === null ? 0 : _payment.cashbackAmount;
	                    var tip = _payment.tipAmount === null ? 0 : _payment.tipAmount;
	                    var payment = this.createOrderPayment(_payment, 'PreAuth');
	                    payment.setTipAmount(tip);
	                    payment.setCashback(cashback);
	                    this.setPaymentStatus(payment, response);
	                    var transaction = this.createTransactionFromOrderPayment(payment, true);
	                    this.store.addTransaction(transaction);
	                    this.store.setPreAuth(new _PreAuth2.default(response, payment));
	                    this.store.setPreAuthPaymentId(_payment.id);
	                    this.setStatus('PreAuth Successful');
	                } else {
	                    this.setStatus('External Id\'s Do Not Match', 'Toggle');
	                }
	            } else {
	                this.setStatus('PreAuth Failed Reason: ' + response.reason);
	            }
	        }

	        // AUTH

	    }, {
	        key: 'onAuthResponse',
	        value: function onAuthResponse(response) {
	            // called in response to an auth request
	            console.log('onAuthResponse', response);
	            if (!response.isAuth) {
	                console.error('Response is not an Auth!');
	                console.error(response);
	            } else {
	                if (response.success) {
	                    if (this.store.getCurrentOrder().getPendingPaymentId() === response.payment.externalPaymentId) {
	                        this.cloverConnector.showWelcomeScreen();
	                        var currentOrder = this.store.currentOrder;
	                        var orderPayment = this.createOrderPayment(response.payment, 'Auth');
	                        var transaction = this.createTransactionFromOrderPayment(orderPayment, true);
	                        this.store.addTransaction(transaction);
	                        currentOrder.addOrderPayment(orderPayment);
	                        currentOrder.setStatus('PAID');
	                        currentOrder.setCloverOrderId(response.payment.order.id);
	                        this.setStatus('Auth Processed Successfully');
	                    } else {
	                        this.setStatus('External Id\'s Do Not Match', 'Toggle');
	                    }
	                } else {
	                    this.setStatus('Auth Failed Reason: ' + response.reason);
	                }
	            }
	        }

	        // SALE

	    }, {
	        key: 'onSaleResponse',
	        value: function onSaleResponse(response) {
	            // called in response to a sale request
	            console.log('onSaleResponse', response);
	            if (response !== null) {
	                if (!response.isSale) {
	                    console.log('response was not a sale #1');
	                    this.setStatus('Response was not a sale', response.reason);
	                    if (response.payment.offline) {
	                        if (response.success) {
	                            var currentOrder = this.store.currentOrder;
	                            currentOrder.setCloverOrderId(response.payment.order.id);
	                            var orderPayment = this.createOrderPayment(response.payment, 'Payment');
	                            currentOrder.addOrderPayment(orderPayment);
	                            currentOrder.setStatus('Pending');
	                            var transaction = this.createTransactionFromOrderPayment(orderPayment, true);
	                            this.store.addTransaction(transaction);
	                            this.setStatus('Sale Processed Successfully', 'Toggle');
	                            this.cloverConnector.showWelcomeScreen();
	                        }
	                    } else {
	                        console.error('Response is not an sale!');
	                        console.error(response);
	                    }
	                } else {
	                    if (response.success) {
	                        if (this.store.getCurrentOrder().getPendingPaymentId() === response.payment.externalPaymentId) {
	                            this.cloverConnector.showWelcomeScreen();
	                            var _currentOrder = this.store.getCurrentOrder();
	                            _currentOrder.setCloverOrderId(response.payment.order.id);
	                            var _orderPayment = this.createOrderPayment(response.payment, 'Payment');
	                            _currentOrder.addOrderPayment(_orderPayment);
	                            _currentOrder.setStatus('PAID');
	                            var _transaction = this.createTransactionFromOrderPayment(_orderPayment, true);
	                            this.store.addTransaction(_transaction);
	                            this.setStatus('Sale Processed Successfully', 'Toggle');
	                        } else {
	                            this.setStatus('External Id\'s Do Not Match');
	                        }
	                    } else {
	                        this.setStatus('Sale Failed Reason: ' + response.reason);
	                    }
	                }
	            } else {
	                console.error('Error: Null SaleResponse');
	            }
	        }

	        // TIPS

	    }, {
	        key: 'onTipAdjustAuthResponse',
	        value: function onTipAdjustAuthResponse(response) {
	            // called in response to a tip adjust of an auth payment
	            console.log('onTipAdjustAuthResponse', response);
	            if (response.success) {
	                var payment = this.store.getPaymentByCloverId(response.paymentId);
	                payment.setTipAmount(response.tipAmount);
	                this.setStatus('Tip adjusted successfully', 'Toggle');
	            } else {
	                this.setStatus('Tip adjust failed, Reason: ' + response.reason);
	            }
	        }
	    }, {
	        key: 'onTipAdded',
	        value: function onTipAdded(tipAdded) {
	            // called when a customer selects a tip amount on the Clover device screen
	            console.log('onTipAdded', tipAdded);
	            //TODO add success check
	            if (tipAdded.tipAmount > 0) {
	                this.tipAdded(tipAdded.tipAmount);
	            } else {
	                this.tipAdded(0);
	            }
	        }

	        // REFUNDS

	    }, {
	        key: 'onManualRefundResponse',
	        value: function onManualRefundResponse(response) {
	            // called in response to a manual refund request
	            console.log('onManualRefundResponse', response);
	            if (response.success) {
	                this.setStatus('Manual Refund Successful', 'Toggle');
	                var refund = this.createRefund(response);
	                this.store.addRefund(refund);
	            } else {
	                this.setStatus('Manual Refund Failed, Reason: ' + response.reason);
	            }
	        }
	    }, {
	        key: 'onRefundPaymentResponse',
	        value: function onRefundPaymentResponse(response) {
	            // called in response to a refund payment request
	            console.log('onRefundPaymentResponse', response);
	            if (response.success) {
	                var refund = new _PaymentRefund2.default();
	                refund.setAmount(response.refund.amount);
	                refund.setOrderId(response.orderId);
	                refund.setPaymentId(response.paymentId);
	                refund.setRefundId(response.refund.id);
	                refund.setDate(new Date(response.refund.createdTime));
	                var payment = this.store.getPaymentByCloverId(response.paymentId);
	                payment.addRefund(refund);
	                payment.setTransactionType('Refund');
	                var order = this.store.getOrderByCloverPaymentId(response.paymentId);
	                order.setStatus('REFUNDED');
	                this.store.updateTransactionToRefund(response.paymentId);
	                this.setStatus('Refund Processed Successfully', 'Toggle');
	            } else {
	                this.setStatus('Refund Failed: ' + response.message, 'Toggle');
	            }
	        }

	        // VAULTED CARDS

	    }, {
	        key: 'onVaultCardResponse',
	        value: function onVaultCardResponse(response) {
	            // called in response to a vault card request
	            console.log('Vault Card Response', response);
	            if (response.success) {
	                var card = response.getCard();
	                if (card) {
	                    this.store.addCard(new _VaultedCard2.default(card));
	                    this.setStatus('Card Successfully Vaulted', 'Toggle');
	                }
	            } else {
	                this.setStatus('Card Vaulting Failed');
	            }
	        }

	        // OTHER

	    }, {
	        key: 'onConfirmPaymentRequest',
	        value: function onConfirmPaymentRequest(request) {
	            // called when the Clover device requires confirmation for a payment (ex. duplicates/offline)
	            console.log('onConfirmPaymentRequest', request);
	            if (request.challenges.length > 0 && request.payment !== null) {
	                this.challenge(request.challenges[0], request);
	            } else {
	                console.error('Error: The ConfirmPaymentRequest was missing the payment and/or challenges.');
	            }
	        }
	    }, {
	        key: 'onVerifySignatureRequest',
	        value: function onVerifySignatureRequest(request) {
	            // called when the Clover device requires a signature to be verified
	            console.log('onVerifySignatureRequest', request);
	            this.confirmSignature(request);
	        }
	    }, {
	        key: 'onCloseoutResponse',
	        value: function onCloseoutResponse(response) {
	            // called in response to a closeout being processed
	            console.log('onCloseoutResponse', response);
	            if (response.success) {
	                this.setStatus('Closeout Successful', 'Toggle');
	            } else {
	                this.setStatus('Closeout Failed, Reason: ' + response.reason);
	            }
	        }
	    }, {
	        key: 'onVoidPaymentResponse',
	        value: function onVoidPaymentResponse(response) {
	            // called in response to a void payment request
	            console.log('onVoidPaymentResponse', response);
	            if (response.success) {
	                this.store.updateTransactionToVoided(response.paymentId);
	                this.setStatus('Payment Voided Successfully', 'Toggle');
	            } else {
	                this.setStatus('Payment Void Failed, Reason: ' + response.reason);
	            }
	        }

	        // HELPERS

	    }, {
	        key: 'createOrderPayment',
	        value: function createOrderPayment(payment, type) {
	            // creates a new OrderPayment object from payment
	            var orderPayment = new _OrderPayment2.default(this.store.getNextPaymentId());
	            orderPayment.cloverPaymentId = payment.id;
	            orderPayment.status = payment.result;
	            orderPayment.transactionState = payment.cardTransaction.state;
	            orderPayment.amount = payment.amount;
	            orderPayment.taxAmount = payment.taxAmount;
	            orderPayment.tipAmount = payment.tipAmount;
	            orderPayment.date = new Date(payment.createdTime);
	            orderPayment.tender = payment.tender.label;
	            orderPayment.transactionType = payment.cardTransaction.type;
	            orderPayment.cardDetails = payment.cardTransaction.cardType + ' ' + payment.cardTransaction.last4;
	            orderPayment.cardType = payment.cardTransaction.cardType;
	            orderPayment.externalPaymentId = payment.externalPaymentId;
	            orderPayment.refunds = payment.refunds;
	            orderPayment.cashBackAmount = payment.cashbackAmount;
	            orderPayment.entryMethod = payment.cardTransaction.entryType;
	            orderPayment.cloverOrderId = payment.order.id;
	            orderPayment.cardType = payment.cardTransaction.cardType;
	            orderPayment.transactionTitle = type;
	            console.log(orderPayment);
	            return orderPayment;
	        }
	    }, {
	        key: 'createTransactionFromOrderPayment',
	        value: function createTransactionFromOrderPayment(payment, result) {
	            // creates a new Transaction object from payment
	            var transaction = new _Transaction2.default();
	            transaction.amount = payment.getTotal();
	            transaction.cardDetails = payment.getCardDetails();
	            transaction.cardType = payment.getCardType();
	            transaction.date = payment.getDate();
	            transaction.id = payment.getCloverPaymentId();
	            transaction.result = result;
	            transaction.tender = payment.getTender();
	            transaction.transactionType = payment.getTransactionType();
	            transaction.transactionTitle = payment.getTransactionTitle();
	            var tipAmount = payment.getTipAmount().toString();
	            transaction.tipAmount = payment.getTipAmount().toString();
	            console.log(transaction);
	            return transaction;
	        }
	    }, {
	        key: 'setPaymentStatus',
	        value: function setPaymentStatus(payment, response) {
	            // sets the payment status based on the response
	            if (response.isSale) {
	                payment.setStatus('PAID');
	            } else if (response.isAuth) {
	                payment.setStatus('AUTH');
	            } else if (response.isPreAuth) {
	                payment.setStatus('PREAUTH');
	            }
	        }
	    }, {
	        key: 'createRefund',
	        value: function createRefund(response) {
	            // creates a Refund object based on the response
	            console.log('createRefund', response);
	            var refund = new _Refund2.default();
	            refund.setAmount(response.credit.amount);
	            refund.setCardDetails(response.credit.cardTransaction.cardType + ' ' + response.credit.cardTransaction.last4);
	            refund.setCardType(response.credit.cardTransaction.cardType);
	            refund.setDate(new Date(response.credit.createdTime));
	            refund.setId(response.credit.id);
	            refund.setTender(response.credit.tender.label);
	            refund.setTransactionTitle('Manual Refund');
	            refund.setTransactionType(response.credit.cardTransaction.type);
	            refund.setEntryMethod(response.credit.cardTransaction.entryType);
	            refund.setTransactionState(response.credit.cardTransaction.state);
	            console.log('createRefund', response);
	            return refund;
	        }

	        //</editor-fold>

	    }]);

	    return POSCloverConnectorListener;
	}(_remotePayCloud2.default.sdk.remotepay.ICloverConnectorListener);

	exports.default = POSCloverConnectorListener;

/***/ }),
/* 566 */
/***/ (function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(global) {"use strict";

	__webpack_require__(766);

	__webpack_require__(921);

	__webpack_require__(567);

	if (global._babelPolyfill) {
	  throw new Error("only one instance of babel-polyfill is allowed");
	}
	global._babelPolyfill = true;

	var DEFINE_PROPERTY = "defineProperty";
	function define(O, key, value) {
	  O[key] || Object[DEFINE_PROPERTY](O, key, {
	    writable: true,
	    configurable: true,
	    value: value
	  });
	}

	define(String.prototype, "padLeft", "".padStart);
	define(String.prototype, "padRight", "".padEnd);

	"pop,reverse,shift,keys,values,entries,indexOf,every,some,forEach,map,filter,find,findIndex,includes,join,slice,concat,push,splice,unshift,sort,lastIndexOf,reduce,reduceRight,copyWithin,fill".split(",").forEach(function (key) {
	  [][key] && define(Array, key, Function.call.bind([][key]));
	});
	/* WEBPACK VAR INJECTION */}.call(exports, (function() { return this; }())))

/***/ }),
/* 567 */
/***/ (function(module, exports, __webpack_require__) {

	__webpack_require__(574);
	module.exports = __webpack_require__(43).RegExp.escape;


/***/ }),
/* 568 */
/***/ (function(module, exports, __webpack_require__) {

	var isObject = __webpack_require__(12);
	var isArray = __webpack_require__(130);
	var SPECIES = __webpack_require__(16)('species');

	module.exports = function (original) {
	  var C;
	  if (isArray(original)) {
	    C = original.constructor;
	    // cross-realm fallback
	    if (typeof C == 'function' && (C === Array || isArray(C.prototype))) C = undefined;
	    if (isObject(C)) {
	      C = C[SPECIES];
	      if (C === null) C = undefined;
	    }
	  } return C === undefined ? Array : C;
	};


/***/ }),
/* 569 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';
	// 20.3.4.36 / 15.9.5.43 Date.prototype.toISOString()
	var fails = __webpack_require__(10);
	var getTime = Date.prototype.getTime;
	var $toISOString = Date.prototype.toISOString;

	var lz = function (num) {
	  return num > 9 ? num : '0' + num;
	};

	// PhantomJS / old WebKit has a broken implementations
	module.exports = (fails(function () {
	  return $toISOString.call(new Date(-5e13 - 1)) != '0385-07-25T07:06:39.999Z';
	}) || !fails(function () {
	  $toISOString.call(new Date(NaN));
	})) ? function toISOString() {
	  if (!isFinite(getTime.call(this))) throw RangeError('Invalid time value');
	  var d = this;
	  var y = d.getUTCFullYear();
	  var m = d.getUTCMilliseconds();
	  var s = y < 0 ? '-' : y > 9999 ? '+' : '';
	  return s + ('00000' + Math.abs(y)).slice(s ? -6 : -4) +
	    '-' + lz(d.getUTCMonth() + 1) + '-' + lz(d.getUTCDate()) +
	    'T' + lz(d.getUTCHours()) + ':' + lz(d.getUTCMinutes()) +
	    ':' + lz(d.getUTCSeconds()) + '.' + (m > 99 ? m : '0' + lz(m)) + 'Z';
	} : $toISOString;


/***/ }),
/* 570 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';
	var anObject = __webpack_require__(6);
	var toPrimitive = __webpack_require__(52);
	var NUMBER = 'number';

	module.exports = function (hint) {
	  if (hint !== 'string' && hint !== NUMBER && hint !== 'default') throw TypeError('Incorrect hint');
	  return toPrimitive(anObject(this), hint != NUMBER);
	};


/***/ }),
/* 571 */
/***/ (function(module, exports, __webpack_require__) {

	// all enumerable object keys, includes symbols
	var getKeys = __webpack_require__(75);
	var gOPS = __webpack_require__(134);
	var pIE = __webpack_require__(108);
	module.exports = function (it) {
	  var result = getKeys(it);
	  var getSymbols = gOPS.f;
	  if (getSymbols) {
	    var symbols = getSymbols(it);
	    var isEnum = pIE.f;
	    var i = 0;
	    var key;
	    while (symbols.length > i) if (isEnum.call(it, key = symbols[i++])) result.push(key);
	  } return result;
	};


/***/ }),
/* 572 */
/***/ (function(module, exports, __webpack_require__) {

	module.exports = __webpack_require__(109)('native-function-to-string', Function.toString);


/***/ }),
/* 573 */
/***/ (function(module, exports) {

	module.exports = function (regExp, replace) {
	  var replacer = replace === Object(replace) ? function (part) {
	    return replace[part];
	  } : replace;
	  return function (it) {
	    return String(it).replace(regExp, replacer);
	  };
	};


/***/ }),
/* 574 */
/***/ (function(module, exports, __webpack_require__) {

	// https://github.com/benjamingr/RexExp.escape
	var $export = __webpack_require__(1);
	var $re = __webpack_require__(573)(/[\\^$*+?.()|[\]{}]/g, '\\$&');

	$export($export.S, 'RegExp', { escape: function escape(it) { return $re(it); } });


/***/ }),
/* 575 */
/***/ (function(module, exports, __webpack_require__) {

	// 22.1.3.3 Array.prototype.copyWithin(target, start, end = this.length)
	var $export = __webpack_require__(1);

	$export($export.P, 'Array', { copyWithin: __webpack_require__(288) });

	__webpack_require__(62)('copyWithin');


/***/ }),
/* 576 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';
	var $export = __webpack_require__(1);
	var $every = __webpack_require__(49)(4);

	$export($export.P + $export.F * !__webpack_require__(45)([].every, true), 'Array', {
	  // 22.1.3.5 / 15.4.4.16 Array.prototype.every(callbackfn [, thisArg])
	  every: function every(callbackfn /* , thisArg */) {
	    return $every(this, callbackfn, arguments[1]);
	  }
	});


/***/ }),
/* 577 */
/***/ (function(module, exports, __webpack_require__) {

	// 22.1.3.6 Array.prototype.fill(value, start = 0, end = this.length)
	var $export = __webpack_require__(1);

	$export($export.P, 'Array', { fill: __webpack_require__(180) });

	__webpack_require__(62)('fill');


/***/ }),
/* 578 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';
	var $export = __webpack_require__(1);
	var $filter = __webpack_require__(49)(2);

	$export($export.P + $export.F * !__webpack_require__(45)([].filter, true), 'Array', {
	  // 22.1.3.7 / 15.4.4.20 Array.prototype.filter(callbackfn [, thisArg])
	  filter: function filter(callbackfn /* , thisArg */) {
	    return $filter(this, callbackfn, arguments[1]);
	  }
	});


/***/ }),
/* 579 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';
	// 22.1.3.9 Array.prototype.findIndex(predicate, thisArg = undefined)
	var $export = __webpack_require__(1);
	var $find = __webpack_require__(49)(6);
	var KEY = 'findIndex';
	var forced = true;
	// Shouldn't skip holes
	if (KEY in []) Array(1)[KEY](function () { forced = false; });
	$export($export.P + $export.F * forced, 'Array', {
	  findIndex: function findIndex(callbackfn /* , that = undefined */) {
	    return $find(this, callbackfn, arguments.length > 1 ? arguments[1] : undefined);
	  }
	});
	__webpack_require__(62)(KEY);


/***/ }),
/* 580 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';
	// 22.1.3.8 Array.prototype.find(predicate, thisArg = undefined)
	var $export = __webpack_require__(1);
	var $find = __webpack_require__(49)(5);
	var KEY = 'find';
	var forced = true;
	// Shouldn't skip holes
	if (KEY in []) Array(1)[KEY](function () { forced = false; });
	$export($export.P + $export.F * forced, 'Array', {
	  find: function find(callbackfn /* , that = undefined */) {
	    return $find(this, callbackfn, arguments.length > 1 ? arguments[1] : undefined);
	  }
	});
	__webpack_require__(62)(KEY);


/***/ }),
/* 581 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';
	var $export = __webpack_require__(1);
	var $forEach = __webpack_require__(49)(0);
	var STRICT = __webpack_require__(45)([].forEach, true);

	$export($export.P + $export.F * !STRICT, 'Array', {
	  // 22.1.3.10 / 15.4.4.18 Array.prototype.forEach(callbackfn [, thisArg])
	  forEach: function forEach(callbackfn /* , thisArg */) {
	    return $forEach(this, callbackfn, arguments[1]);
	  }
	});


/***/ }),
/* 582 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';
	var ctx = __webpack_require__(44);
	var $export = __webpack_require__(1);
	var toObject = __webpack_require__(22);
	var call = __webpack_require__(299);
	var isArrayIter = __webpack_require__(188);
	var toLength = __webpack_require__(17);
	var createProperty = __webpack_require__(182);
	var getIterFn = __webpack_require__(204);

	$export($export.S + $export.F * !__webpack_require__(132)(function (iter) { Array.from(iter); }), 'Array', {
	  // 22.1.2.1 Array.from(arrayLike, mapfn = undefined, thisArg = undefined)
	  from: function from(arrayLike /* , mapfn = undefined, thisArg = undefined */) {
	    var O = toObject(arrayLike);
	    var C = typeof this == 'function' ? this : Array;
	    var aLen = arguments.length;
	    var mapfn = aLen > 1 ? arguments[1] : undefined;
	    var mapping = mapfn !== undefined;
	    var index = 0;
	    var iterFn = getIterFn(O);
	    var length, result, step, iterator;
	    if (mapping) mapfn = ctx(mapfn, aLen > 2 ? arguments[2] : undefined, 2);
	    // if object isn't iterable or it's array with default iterator - use simple case
	    if (iterFn != undefined && !(C == Array && isArrayIter(iterFn))) {
	      for (iterator = iterFn.call(O), result = new C(); !(step = iterator.next()).done; index++) {
	        createProperty(result, index, mapping ? call(iterator, mapfn, [step.value, index], true) : step.value);
	      }
	    } else {
	      length = toLength(O.length);
	      for (result = new C(length); length > index; index++) {
	        createProperty(result, index, mapping ? mapfn(O[index], index) : O[index]);
	      }
	    }
	    result.length = index;
	    return result;
	  }
	});


/***/ }),
/* 583 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';
	var $export = __webpack_require__(1);
	var $indexOf = __webpack_require__(127)(false);
	var $native = [].indexOf;
	var NEGATIVE_ZERO = !!$native && 1 / [1].indexOf(1, -0) < 0;

	$export($export.P + $export.F * (NEGATIVE_ZERO || !__webpack_require__(45)($native)), 'Array', {
	  // 22.1.3.11 / 15.4.4.14 Array.prototype.indexOf(searchElement [, fromIndex])
	  indexOf: function indexOf(searchElement /* , fromIndex = 0 */) {
	    return NEGATIVE_ZERO
	      // convert -0 to +0
	      ? $native.apply(this, arguments) || 0
	      : $indexOf(this, searchElement, arguments[1]);
	  }
	});


/***/ }),
/* 584 */
/***/ (function(module, exports, __webpack_require__) {

	// 22.1.2.2 / 15.4.3.2 Array.isArray(arg)
	var $export = __webpack_require__(1);

	$export($export.S, 'Array', { isArray: __webpack_require__(130) });


/***/ }),
/* 585 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';
	// 22.1.3.13 Array.prototype.join(separator)
	var $export = __webpack_require__(1);
	var toIObject = __webpack_require__(39);
	var arrayJoin = [].join;

	// fallback for not array-like strings
	$export($export.P + $export.F * (__webpack_require__(107) != Object || !__webpack_require__(45)(arrayJoin)), 'Array', {
	  join: function join(separator) {
	    return arrayJoin.call(toIObject(this), separator === undefined ? ',' : separator);
	  }
	});


/***/ }),
/* 586 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';
	var $export = __webpack_require__(1);
	var toIObject = __webpack_require__(39);
	var toInteger = __webpack_require__(46);
	var toLength = __webpack_require__(17);
	var $native = [].lastIndexOf;
	var NEGATIVE_ZERO = !!$native && 1 / [1].lastIndexOf(1, -0) < 0;

	$export($export.P + $export.F * (NEGATIVE_ZERO || !__webpack_require__(45)($native)), 'Array', {
	  // 22.1.3.14 / 15.4.4.15 Array.prototype.lastIndexOf(searchElement [, fromIndex])
	  lastIndexOf: function lastIndexOf(searchElement /* , fromIndex = @[*-1] */) {
	    // convert -0 to +0
	    if (NEGATIVE_ZERO) return $native.apply(this, arguments) || 0;
	    var O = toIObject(this);
	    var length = toLength(O.length);
	    var index = length - 1;
	    if (arguments.length > 1) index = Math.min(index, toInteger(arguments[1]));
	    if (index < 0) index = length + index;
	    for (;index >= 0; index--) if (index in O) if (O[index] === searchElement) return index || 0;
	    return -1;
	  }
	});


/***/ }),
/* 587 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';
	var $export = __webpack_require__(1);
	var $map = __webpack_require__(49)(1);

	$export($export.P + $export.F * !__webpack_require__(45)([].map, true), 'Array', {
	  // 22.1.3.15 / 15.4.4.19 Array.prototype.map(callbackfn [, thisArg])
	  map: function map(callbackfn /* , thisArg */) {
	    return $map(this, callbackfn, arguments[1]);
	  }
	});


/***/ }),
/* 588 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';
	var $export = __webpack_require__(1);
	var createProperty = __webpack_require__(182);

	// WebKit Array.of isn't generic
	$export($export.S + $export.F * __webpack_require__(10)(function () {
	  function F() { /* empty */ }
	  return !(Array.of.call(F) instanceof F);
	}), 'Array', {
	  // 22.1.2.3 Array.of( ...items)
	  of: function of(/* ...args */) {
	    var index = 0;
	    var aLen = arguments.length;
	    var result = new (typeof this == 'function' ? this : Array)(aLen);
	    while (aLen > index) createProperty(result, index, arguments[index++]);
	    result.length = aLen;
	    return result;
	  }
	});


/***/ }),
/* 589 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';
	var $export = __webpack_require__(1);
	var $reduce = __webpack_require__(290);

	$export($export.P + $export.F * !__webpack_require__(45)([].reduceRight, true), 'Array', {
	  // 22.1.3.19 / 15.4.4.22 Array.prototype.reduceRight(callbackfn [, initialValue])
	  reduceRight: function reduceRight(callbackfn /* , initialValue */) {
	    return $reduce(this, callbackfn, arguments.length, arguments[1], true);
	  }
	});


/***/ }),
/* 590 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';
	var $export = __webpack_require__(1);
	var $reduce = __webpack_require__(290);

	$export($export.P + $export.F * !__webpack_require__(45)([].reduce, true), 'Array', {
	  // 22.1.3.18 / 15.4.4.21 Array.prototype.reduce(callbackfn [, initialValue])
	  reduce: function reduce(callbackfn /* , initialValue */) {
	    return $reduce(this, callbackfn, arguments.length, arguments[1], false);
	  }
	});


/***/ }),
/* 591 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';
	var $export = __webpack_require__(1);
	var html = __webpack_require__(186);
	var cof = __webpack_require__(42);
	var toAbsoluteIndex = __webpack_require__(79);
	var toLength = __webpack_require__(17);
	var arraySlice = [].slice;

	// fallback for not array-like ES3 strings and DOM objects
	$export($export.P + $export.F * __webpack_require__(10)(function () {
	  if (html) arraySlice.call(html);
	}), 'Array', {
	  slice: function slice(begin, end) {
	    var len = toLength(this.length);
	    var klass = cof(this);
	    end = end === undefined ? len : end;
	    if (klass == 'Array') return arraySlice.call(this, begin, end);
	    var start = toAbsoluteIndex(begin, len);
	    var upTo = toAbsoluteIndex(end, len);
	    var size = toLength(upTo - start);
	    var cloned = new Array(size);
	    var i = 0;
	    for (; i < size; i++) cloned[i] = klass == 'String'
	      ? this.charAt(start + i)
	      : this[start + i];
	    return cloned;
	  }
	});


/***/ }),
/* 592 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';
	var $export = __webpack_require__(1);
	var $some = __webpack_require__(49)(3);

	$export($export.P + $export.F * !__webpack_require__(45)([].some, true), 'Array', {
	  // 22.1.3.23 / 15.4.4.17 Array.prototype.some(callbackfn [, thisArg])
	  some: function some(callbackfn /* , thisArg */) {
	    return $some(this, callbackfn, arguments[1]);
	  }
	});


/***/ }),
/* 593 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';
	var $export = __webpack_require__(1);
	var aFunction = __webpack_require__(28);
	var toObject = __webpack_require__(22);
	var fails = __webpack_require__(10);
	var $sort = [].sort;
	var test = [1, 2, 3];

	$export($export.P + $export.F * (fails(function () {
	  // IE8-
	  test.sort(undefined);
	}) || !fails(function () {
	  // V8 bug
	  test.sort(null);
	  // Old WebKit
	}) || !__webpack_require__(45)($sort)), 'Array', {
	  // 22.1.3.25 Array.prototype.sort(comparefn)
	  sort: function sort(comparefn) {
	    return comparefn === undefined
	      ? $sort.call(toObject(this))
	      : $sort.call(toObject(this), aFunction(comparefn));
	  }
	});


/***/ }),
/* 594 */
/***/ (function(module, exports, __webpack_require__) {

	__webpack_require__(78)('Array');


/***/ }),
/* 595 */
/***/ (function(module, exports, __webpack_require__) {

	// 20.3.3.1 / 15.9.4.4 Date.now()
	var $export = __webpack_require__(1);

	$export($export.S, 'Date', { now: function () { return new Date().getTime(); } });


/***/ }),
/* 596 */
/***/ (function(module, exports, __webpack_require__) {

	// 20.3.4.36 / 15.9.5.43 Date.prototype.toISOString()
	var $export = __webpack_require__(1);
	var toISOString = __webpack_require__(569);

	// PhantomJS / old WebKit has a broken implementations
	$export($export.P + $export.F * (Date.prototype.toISOString !== toISOString), 'Date', {
	  toISOString: toISOString
	});


/***/ }),
/* 597 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';
	var $export = __webpack_require__(1);
	var toObject = __webpack_require__(22);
	var toPrimitive = __webpack_require__(52);

	$export($export.P + $export.F * __webpack_require__(10)(function () {
	  return new Date(NaN).toJSON() !== null
	    || Date.prototype.toJSON.call({ toISOString: function () { return 1; } }) !== 1;
	}), 'Date', {
	  // eslint-disable-next-line no-unused-vars
	  toJSON: function toJSON(key) {
	    var O = toObject(this);
	    var pv = toPrimitive(O);
	    return typeof pv == 'number' && !isFinite(pv) ? null : O.toISOString();
	  }
	});


/***/ }),
/* 598 */
/***/ (function(module, exports, __webpack_require__) {

	var TO_PRIMITIVE = __webpack_require__(16)('toPrimitive');
	var proto = Date.prototype;

	if (!(TO_PRIMITIVE in proto)) __webpack_require__(31)(proto, TO_PRIMITIVE, __webpack_require__(570));


/***/ }),
/* 599 */
/***/ (function(module, exports, __webpack_require__) {

	var DateProto = Date.prototype;
	var INVALID_DATE = 'Invalid Date';
	var TO_STRING = 'toString';
	var $toString = DateProto[TO_STRING];
	var getTime = DateProto.getTime;
	if (new Date(NaN) + '' != INVALID_DATE) {
	  __webpack_require__(32)(DateProto, TO_STRING, function toString() {
	    var value = getTime.call(this);
	    // eslint-disable-next-line no-self-compare
	    return value === value ? $toString.call(this) : INVALID_DATE;
	  });
	}


/***/ }),
/* 600 */
/***/ (function(module, exports, __webpack_require__) {

	// 19.2.3.2 / 15.3.4.5 Function.prototype.bind(thisArg, args...)
	var $export = __webpack_require__(1);

	$export($export.P, 'Function', { bind: __webpack_require__(291) });


/***/ }),
/* 601 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';
	var isObject = __webpack_require__(12);
	var getPrototypeOf = __webpack_require__(38);
	var HAS_INSTANCE = __webpack_require__(16)('hasInstance');
	var FunctionProto = Function.prototype;
	// 19.2.3.6 Function.prototype[@@hasInstance](V)
	if (!(HAS_INSTANCE in FunctionProto)) __webpack_require__(20).f(FunctionProto, HAS_INSTANCE, { value: function (O) {
	  if (typeof this != 'function' || !isObject(O)) return false;
	  if (!isObject(this.prototype)) return O instanceof this;
	  // for environment w/o native `@@hasInstance` logic enough `instanceof`, but add this:
	  while (O = getPrototypeOf(O)) if (this.prototype === O) return true;
	  return false;
	} });


/***/ }),
/* 602 */
/***/ (function(module, exports, __webpack_require__) {

	var dP = __webpack_require__(20).f;
	var FProto = Function.prototype;
	var nameRE = /^\s*function ([^ (]*)/;
	var NAME = 'name';

	// 19.2.4.2 name
	NAME in FProto || __webpack_require__(18) && dP(FProto, NAME, {
	  configurable: true,
	  get: function () {
	    try {
	      return ('' + this).match(nameRE)[1];
	    } catch (e) {
	      return '';
	    }
	  }
	});


/***/ }),
/* 603 */
/***/ (function(module, exports, __webpack_require__) {

	// 20.2.2.3 Math.acosh(x)
	var $export = __webpack_require__(1);
	var log1p = __webpack_require__(302);
	var sqrt = Math.sqrt;
	var $acosh = Math.acosh;

	$export($export.S + $export.F * !($acosh
	  // V8 bug: https://code.google.com/p/v8/issues/detail?id=3509
	  && Math.floor($acosh(Number.MAX_VALUE)) == 710
	  // Tor Browser bug: Math.acosh(Infinity) -> NaN
	  && $acosh(Infinity) == Infinity
	), 'Math', {
	  acosh: function acosh(x) {
	    return (x = +x) < 1 ? NaN : x > 94906265.62425156
	      ? Math.log(x) + Math.LN2
	      : log1p(x - 1 + sqrt(x - 1) * sqrt(x + 1));
	  }
	});


/***/ }),
/* 604 */
/***/ (function(module, exports, __webpack_require__) {

	// 20.2.2.5 Math.asinh(x)
	var $export = __webpack_require__(1);
	var $asinh = Math.asinh;

	function asinh(x) {
	  return !isFinite(x = +x) || x == 0 ? x : x < 0 ? -asinh(-x) : Math.log(x + Math.sqrt(x * x + 1));
	}

	// Tor Browser bug: Math.asinh(0) -> -0
	$export($export.S + $export.F * !($asinh && 1 / $asinh(0) > 0), 'Math', { asinh: asinh });


/***/ }),
/* 605 */
/***/ (function(module, exports, __webpack_require__) {

	// 20.2.2.7 Math.atanh(x)
	var $export = __webpack_require__(1);
	var $atanh = Math.atanh;

	// Tor Browser bug: Math.atanh(-0) -> 0
	$export($export.S + $export.F * !($atanh && 1 / $atanh(-0) < 0), 'Math', {
	  atanh: function atanh(x) {
	    return (x = +x) == 0 ? x : Math.log((1 + x) / (1 - x)) / 2;
	  }
	});


/***/ }),
/* 606 */
/***/ (function(module, exports, __webpack_require__) {

	// 20.2.2.9 Math.cbrt(x)
	var $export = __webpack_require__(1);
	var sign = __webpack_require__(192);

	$export($export.S, 'Math', {
	  cbrt: function cbrt(x) {
	    return sign(x = +x) * Math.pow(Math.abs(x), 1 / 3);
	  }
	});


/***/ }),
/* 607 */
/***/ (function(module, exports, __webpack_require__) {

	// 20.2.2.11 Math.clz32(x)
	var $export = __webpack_require__(1);

	$export($export.S, 'Math', {
	  clz32: function clz32(x) {
	    return (x >>>= 0) ? 31 - Math.floor(Math.log(x + 0.5) * Math.LOG2E) : 32;
	  }
	});


/***/ }),
/* 608 */
/***/ (function(module, exports, __webpack_require__) {

	// 20.2.2.12 Math.cosh(x)
	var $export = __webpack_require__(1);
	var exp = Math.exp;

	$export($export.S, 'Math', {
	  cosh: function cosh(x) {
	    return (exp(x = +x) + exp(-x)) / 2;
	  }
	});


/***/ }),
/* 609 */
/***/ (function(module, exports, __webpack_require__) {

	// 20.2.2.14 Math.expm1(x)
	var $export = __webpack_require__(1);
	var $expm1 = __webpack_require__(191);

	$export($export.S + $export.F * ($expm1 != Math.expm1), 'Math', { expm1: $expm1 });


/***/ }),
/* 610 */
/***/ (function(module, exports, __webpack_require__) {

	// 20.2.2.16 Math.fround(x)
	var $export = __webpack_require__(1);

	$export($export.S, 'Math', { fround: __webpack_require__(301) });


/***/ }),
/* 611 */
/***/ (function(module, exports, __webpack_require__) {

	// 20.2.2.17 Math.hypot([value1[, value2[, … ]]])
	var $export = __webpack_require__(1);
	var abs = Math.abs;

	$export($export.S, 'Math', {
	  hypot: function hypot(value1, value2) { // eslint-disable-line no-unused-vars
	    var sum = 0;
	    var i = 0;
	    var aLen = arguments.length;
	    var larg = 0;
	    var arg, div;
	    while (i < aLen) {
	      arg = abs(arguments[i++]);
	      if (larg < arg) {
	        div = larg / arg;
	        sum = sum * div * div + 1;
	        larg = arg;
	      } else if (arg > 0) {
	        div = arg / larg;
	        sum += div * div;
	      } else sum += arg;
	    }
	    return larg === Infinity ? Infinity : larg * Math.sqrt(sum);
	  }
	});


/***/ }),
/* 612 */
/***/ (function(module, exports, __webpack_require__) {

	// 20.2.2.18 Math.imul(x, y)
	var $export = __webpack_require__(1);
	var $imul = Math.imul;

	// some WebKit versions fails with big numbers, some has wrong arity
	$export($export.S + $export.F * __webpack_require__(10)(function () {
	  return $imul(0xffffffff, 5) != -5 || $imul.length != 2;
	}), 'Math', {
	  imul: function imul(x, y) {
	    var UINT16 = 0xffff;
	    var xn = +x;
	    var yn = +y;
	    var xl = UINT16 & xn;
	    var yl = UINT16 & yn;
	    return 0 | xl * yl + ((UINT16 & xn >>> 16) * yl + xl * (UINT16 & yn >>> 16) << 16 >>> 0);
	  }
	});


/***/ }),
/* 613 */
/***/ (function(module, exports, __webpack_require__) {

	// 20.2.2.21 Math.log10(x)
	var $export = __webpack_require__(1);

	$export($export.S, 'Math', {
	  log10: function log10(x) {
	    return Math.log(x) * Math.LOG10E;
	  }
	});


/***/ }),
/* 614 */
/***/ (function(module, exports, __webpack_require__) {

	// 20.2.2.20 Math.log1p(x)
	var $export = __webpack_require__(1);

	$export($export.S, 'Math', { log1p: __webpack_require__(302) });


/***/ }),
/* 615 */
/***/ (function(module, exports, __webpack_require__) {

	// 20.2.2.22 Math.log2(x)
	var $export = __webpack_require__(1);

	$export($export.S, 'Math', {
	  log2: function log2(x) {
	    return Math.log(x) / Math.LN2;
	  }
	});


/***/ }),
/* 616 */
/***/ (function(module, exports, __webpack_require__) {

	// 20.2.2.28 Math.sign(x)
	var $export = __webpack_require__(1);

	$export($export.S, 'Math', { sign: __webpack_require__(192) });


/***/ }),
/* 617 */
/***/ (function(module, exports, __webpack_require__) {

	// 20.2.2.30 Math.sinh(x)
	var $export = __webpack_require__(1);
	var expm1 = __webpack_require__(191);
	var exp = Math.exp;

	// V8 near Chromium 38 has a problem with very small numbers
	$export($export.S + $export.F * __webpack_require__(10)(function () {
	  return !Math.sinh(-2e-17) != -2e-17;
	}), 'Math', {
	  sinh: function sinh(x) {
	    return Math.abs(x = +x) < 1
	      ? (expm1(x) - expm1(-x)) / 2
	      : (exp(x - 1) - exp(-x - 1)) * (Math.E / 2);
	  }
	});


/***/ }),
/* 618 */
/***/ (function(module, exports, __webpack_require__) {

	// 20.2.2.33 Math.tanh(x)
	var $export = __webpack_require__(1);
	var expm1 = __webpack_require__(191);
	var exp = Math.exp;

	$export($export.S, 'Math', {
	  tanh: function tanh(x) {
	    var a = expm1(x = +x);
	    var b = expm1(-x);
	    return a == Infinity ? 1 : b == Infinity ? -1 : (a - b) / (exp(x) + exp(-x));
	  }
	});


/***/ }),
/* 619 */
/***/ (function(module, exports, __webpack_require__) {

	// 20.2.2.34 Math.trunc(x)
	var $export = __webpack_require__(1);

	$export($export.S, 'Math', {
	  trunc: function trunc(it) {
	    return (it > 0 ? Math.floor : Math.ceil)(it);
	  }
	});


/***/ }),
/* 620 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';
	var global = __webpack_require__(9);
	var has = __webpack_require__(36);
	var cof = __webpack_require__(42);
	var inheritIfRequired = __webpack_require__(187);
	var toPrimitive = __webpack_require__(52);
	var fails = __webpack_require__(10);
	var gOPN = __webpack_require__(74).f;
	var gOPD = __webpack_require__(37).f;
	var dP = __webpack_require__(20).f;
	var $trim = __webpack_require__(93).trim;
	var NUMBER = 'Number';
	var $Number = global[NUMBER];
	var Base = $Number;
	var proto = $Number.prototype;
	// Opera ~12 has broken Object#toString
	var BROKEN_COF = cof(__webpack_require__(73)(proto)) == NUMBER;
	var TRIM = 'trim' in String.prototype;

	// 7.1.3 ToNumber(argument)
	var toNumber = function (argument) {
	  var it = toPrimitive(argument, false);
	  if (typeof it == 'string' && it.length > 2) {
	    it = TRIM ? it.trim() : $trim(it, 3);
	    var first = it.charCodeAt(0);
	    var third, radix, maxCode;
	    if (first === 43 || first === 45) {
	      third = it.charCodeAt(2);
	      if (third === 88 || third === 120) return NaN; // Number('+0x1') should be NaN, old V8 fix
	    } else if (first === 48) {
	      switch (it.charCodeAt(1)) {
	        case 66: case 98: radix = 2; maxCode = 49; break; // fast equal /^0b[01]+$/i
	        case 79: case 111: radix = 8; maxCode = 55; break; // fast equal /^0o[0-7]+$/i
	        default: return +it;
	      }
	      for (var digits = it.slice(2), i = 0, l = digits.length, code; i < l; i++) {
	        code = digits.charCodeAt(i);
	        // parseInt parses a string to a first unavailable symbol
	        // but ToNumber should return NaN if a string contains unavailable symbols
	        if (code < 48 || code > maxCode) return NaN;
	      } return parseInt(digits, radix);
	    }
	  } return +it;
	};

	if (!$Number(' 0o1') || !$Number('0b1') || $Number('+0x1')) {
	  $Number = function Number(value) {
	    var it = arguments.length < 1 ? 0 : value;
	    var that = this;
	    return that instanceof $Number
	      // check on 1..constructor(foo) case
	      && (BROKEN_COF ? fails(function () { proto.valueOf.call(that); }) : cof(that) != NUMBER)
	        ? inheritIfRequired(new Base(toNumber(it)), that, $Number) : toNumber(it);
	  };
	  for (var keys = __webpack_require__(18) ? gOPN(Base) : (
	    // ES3:
	    'MAX_VALUE,MIN_VALUE,NaN,NEGATIVE_INFINITY,POSITIVE_INFINITY,' +
	    // ES6 (in case, if modules with ES6 Number statics required before):
	    'EPSILON,isFinite,isInteger,isNaN,isSafeInteger,MAX_SAFE_INTEGER,' +
	    'MIN_SAFE_INTEGER,parseFloat,parseInt,isInteger'
	  ).split(','), j = 0, key; keys.length > j; j++) {
	    if (has(Base, key = keys[j]) && !has($Number, key)) {
	      dP($Number, key, gOPD(Base, key));
	    }
	  }
	  $Number.prototype = proto;
	  proto.constructor = $Number;
	  __webpack_require__(32)(global, NUMBER, $Number);
	}


/***/ }),
/* 621 */
/***/ (function(module, exports, __webpack_require__) {

	// 20.1.2.1 Number.EPSILON
	var $export = __webpack_require__(1);

	$export($export.S, 'Number', { EPSILON: Math.pow(2, -52) });


/***/ }),
/* 622 */
/***/ (function(module, exports, __webpack_require__) {

	// 20.1.2.2 Number.isFinite(number)
	var $export = __webpack_require__(1);
	var _isFinite = __webpack_require__(9).isFinite;

	$export($export.S, 'Number', {
	  isFinite: function isFinite(it) {
	    return typeof it == 'number' && _isFinite(it);
	  }
	});


/***/ }),
/* 623 */
/***/ (function(module, exports, __webpack_require__) {

	// 20.1.2.3 Number.isInteger(number)
	var $export = __webpack_require__(1);

	$export($export.S, 'Number', { isInteger: __webpack_require__(298) });


/***/ }),
/* 624 */
/***/ (function(module, exports, __webpack_require__) {

	// 20.1.2.4 Number.isNaN(number)
	var $export = __webpack_require__(1);

	$export($export.S, 'Number', {
	  isNaN: function isNaN(number) {
	    // eslint-disable-next-line no-self-compare
	    return number != number;
	  }
	});


/***/ }),
/* 625 */
/***/ (function(module, exports, __webpack_require__) {

	// 20.1.2.5 Number.isSafeInteger(number)
	var $export = __webpack_require__(1);
	var isInteger = __webpack_require__(298);
	var abs = Math.abs;

	$export($export.S, 'Number', {
	  isSafeInteger: function isSafeInteger(number) {
	    return isInteger(number) && abs(number) <= 0x1fffffffffffff;
	  }
	});


/***/ }),
/* 626 */
/***/ (function(module, exports, __webpack_require__) {

	// 20.1.2.6 Number.MAX_SAFE_INTEGER
	var $export = __webpack_require__(1);

	$export($export.S, 'Number', { MAX_SAFE_INTEGER: 0x1fffffffffffff });


/***/ }),
/* 627 */
/***/ (function(module, exports, __webpack_require__) {

	// 20.1.2.10 Number.MIN_SAFE_INTEGER
	var $export = __webpack_require__(1);

	$export($export.S, 'Number', { MIN_SAFE_INTEGER: -0x1fffffffffffff });


/***/ }),
/* 628 */
/***/ (function(module, exports, __webpack_require__) {

	var $export = __webpack_require__(1);
	var $parseFloat = __webpack_require__(310);
	// 20.1.2.12 Number.parseFloat(string)
	$export($export.S + $export.F * (Number.parseFloat != $parseFloat), 'Number', { parseFloat: $parseFloat });


/***/ }),
/* 629 */
/***/ (function(module, exports, __webpack_require__) {

	var $export = __webpack_require__(1);
	var $parseInt = __webpack_require__(311);
	// 20.1.2.13 Number.parseInt(string, radix)
	$export($export.S + $export.F * (Number.parseInt != $parseInt), 'Number', { parseInt: $parseInt });


/***/ }),
/* 630 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';
	var $export = __webpack_require__(1);
	var toInteger = __webpack_require__(46);
	var aNumberValue = __webpack_require__(287);
	var repeat = __webpack_require__(199);
	var $toFixed = 1.0.toFixed;
	var floor = Math.floor;
	var data = [0, 0, 0, 0, 0, 0];
	var ERROR = 'Number.toFixed: incorrect invocation!';
	var ZERO = '0';

	var multiply = function (n, c) {
	  var i = -1;
	  var c2 = c;
	  while (++i < 6) {
	    c2 += n * data[i];
	    data[i] = c2 % 1e7;
	    c2 = floor(c2 / 1e7);
	  }
	};
	var divide = function (n) {
	  var i = 6;
	  var c = 0;
	  while (--i >= 0) {
	    c += data[i];
	    data[i] = floor(c / n);
	    c = (c % n) * 1e7;
	  }
	};
	var numToString = function () {
	  var i = 6;
	  var s = '';
	  while (--i >= 0) {
	    if (s !== '' || i === 0 || data[i] !== 0) {
	      var t = String(data[i]);
	      s = s === '' ? t : s + repeat.call(ZERO, 7 - t.length) + t;
	    }
	  } return s;
	};
	var pow = function (x, n, acc) {
	  return n === 0 ? acc : n % 2 === 1 ? pow(x, n - 1, acc * x) : pow(x * x, n / 2, acc);
	};
	var log = function (x) {
	  var n = 0;
	  var x2 = x;
	  while (x2 >= 4096) {
	    n += 12;
	    x2 /= 4096;
	  }
	  while (x2 >= 2) {
	    n += 1;
	    x2 /= 2;
	  } return n;
	};

	$export($export.P + $export.F * (!!$toFixed && (
	  0.00008.toFixed(3) !== '0.000' ||
	  0.9.toFixed(0) !== '1' ||
	  1.255.toFixed(2) !== '1.25' ||
	  1000000000000000128.0.toFixed(0) !== '1000000000000000128'
	) || !__webpack_require__(10)(function () {
	  // V8 ~ Android 4.3-
	  $toFixed.call({});
	})), 'Number', {
	  toFixed: function toFixed(fractionDigits) {
	    var x = aNumberValue(this, ERROR);
	    var f = toInteger(fractionDigits);
	    var s = '';
	    var m = ZERO;
	    var e, z, j, k;
	    if (f < 0 || f > 20) throw RangeError(ERROR);
	    // eslint-disable-next-line no-self-compare
	    if (x != x) return 'NaN';
	    if (x <= -1e21 || x >= 1e21) return String(x);
	    if (x < 0) {
	      s = '-';
	      x = -x;
	    }
	    if (x > 1e-21) {
	      e = log(x * pow(2, 69, 1)) - 69;
	      z = e < 0 ? x * pow(2, -e, 1) : x / pow(2, e, 1);
	      z *= 0x10000000000000;
	      e = 52 - e;
	      if (e > 0) {
	        multiply(0, z);
	        j = f;
	        while (j >= 7) {
	          multiply(1e7, 0);
	          j -= 7;
	        }
	        multiply(pow(10, j, 1), 0);
	        j = e - 1;
	        while (j >= 23) {
	          divide(1 << 23);
	          j -= 23;
	        }
	        divide(1 << j);
	        multiply(1, 1);
	        divide(2);
	        m = numToString();
	      } else {
	        multiply(0, z);
	        multiply(1 << -e, 0);
	        m = numToString() + repeat.call(ZERO, f);
	      }
	    }
	    if (f > 0) {
	      k = m.length;
	      m = s + (k <= f ? '0.' + repeat.call(ZERO, f - k) + m : m.slice(0, k - f) + '.' + m.slice(k - f));
	    } else {
	      m = s + m;
	    } return m;
	  }
	});


/***/ }),
/* 631 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';
	var $export = __webpack_require__(1);
	var $fails = __webpack_require__(10);
	var aNumberValue = __webpack_require__(287);
	var $toPrecision = 1.0.toPrecision;

	$export($export.P + $export.F * ($fails(function () {
	  // IE7-
	  return $toPrecision.call(1, undefined) !== '1';
	}) || !$fails(function () {
	  // V8 ~ Android 4.3-
	  $toPrecision.call({});
	})), 'Number', {
	  toPrecision: function toPrecision(precision) {
	    var that = aNumberValue(this, 'Number#toPrecision: incorrect invocation!');
	    return precision === undefined ? $toPrecision.call(that) : $toPrecision.call(that, precision);
	  }
	});


/***/ }),
/* 632 */
/***/ (function(module, exports, __webpack_require__) {

	// 19.1.3.1 Object.assign(target, source)
	var $export = __webpack_require__(1);

	$export($export.S + $export.F, 'Object', { assign: __webpack_require__(304) });


/***/ }),
/* 633 */
/***/ (function(module, exports, __webpack_require__) {

	var $export = __webpack_require__(1);
	// 19.1.2.2 / 15.2.3.5 Object.create(O [, Properties])
	$export($export.S, 'Object', { create: __webpack_require__(73) });


/***/ }),
/* 634 */
/***/ (function(module, exports, __webpack_require__) {

	var $export = __webpack_require__(1);
	// 19.1.2.3 / 15.2.3.7 Object.defineProperties(O, Properties)
	$export($export.S + $export.F * !__webpack_require__(18), 'Object', { defineProperties: __webpack_require__(305) });


/***/ }),
/* 635 */
/***/ (function(module, exports, __webpack_require__) {

	var $export = __webpack_require__(1);
	// 19.1.2.4 / 15.2.3.6 Object.defineProperty(O, P, Attributes)
	$export($export.S + $export.F * !__webpack_require__(18), 'Object', { defineProperty: __webpack_require__(20).f });


/***/ }),
/* 636 */
/***/ (function(module, exports, __webpack_require__) {

	// 19.1.2.5 Object.freeze(O)
	var isObject = __webpack_require__(12);
	var meta = __webpack_require__(64).onFreeze;

	__webpack_require__(51)('freeze', function ($freeze) {
	  return function freeze(it) {
	    return $freeze && isObject(it) ? $freeze(meta(it)) : it;
	  };
	});


/***/ }),
/* 637 */
/***/ (function(module, exports, __webpack_require__) {

	// 19.1.2.6 Object.getOwnPropertyDescriptor(O, P)
	var toIObject = __webpack_require__(39);
	var $getOwnPropertyDescriptor = __webpack_require__(37).f;

	__webpack_require__(51)('getOwnPropertyDescriptor', function () {
	  return function getOwnPropertyDescriptor(it, key) {
	    return $getOwnPropertyDescriptor(toIObject(it), key);
	  };
	});


/***/ }),
/* 638 */
/***/ (function(module, exports, __webpack_require__) {

	// 19.1.2.7 Object.getOwnPropertyNames(O)
	__webpack_require__(51)('getOwnPropertyNames', function () {
	  return __webpack_require__(306).f;
	});


/***/ }),
/* 639 */
/***/ (function(module, exports, __webpack_require__) {

	// 19.1.2.9 Object.getPrototypeOf(O)
	var toObject = __webpack_require__(22);
	var $getPrototypeOf = __webpack_require__(38);

	__webpack_require__(51)('getPrototypeOf', function () {
	  return function getPrototypeOf(it) {
	    return $getPrototypeOf(toObject(it));
	  };
	});


/***/ }),
/* 640 */
/***/ (function(module, exports, __webpack_require__) {

	// 19.1.2.11 Object.isExtensible(O)
	var isObject = __webpack_require__(12);

	__webpack_require__(51)('isExtensible', function ($isExtensible) {
	  return function isExtensible(it) {
	    return isObject(it) ? $isExtensible ? $isExtensible(it) : true : false;
	  };
	});


/***/ }),
/* 641 */
/***/ (function(module, exports, __webpack_require__) {

	// 19.1.2.12 Object.isFrozen(O)
	var isObject = __webpack_require__(12);

	__webpack_require__(51)('isFrozen', function ($isFrozen) {
	  return function isFrozen(it) {
	    return isObject(it) ? $isFrozen ? $isFrozen(it) : false : true;
	  };
	});


/***/ }),
/* 642 */
/***/ (function(module, exports, __webpack_require__) {

	// 19.1.2.13 Object.isSealed(O)
	var isObject = __webpack_require__(12);

	__webpack_require__(51)('isSealed', function ($isSealed) {
	  return function isSealed(it) {
	    return isObject(it) ? $isSealed ? $isSealed(it) : false : true;
	  };
	});


/***/ }),
/* 643 */
/***/ (function(module, exports, __webpack_require__) {

	// 19.1.3.10 Object.is(value1, value2)
	var $export = __webpack_require__(1);
	$export($export.S, 'Object', { is: __webpack_require__(314) });


/***/ }),
/* 644 */
/***/ (function(module, exports, __webpack_require__) {

	// 19.1.2.14 Object.keys(O)
	var toObject = __webpack_require__(22);
	var $keys = __webpack_require__(75);

	__webpack_require__(51)('keys', function () {
	  return function keys(it) {
	    return $keys(toObject(it));
	  };
	});


/***/ }),
/* 645 */
/***/ (function(module, exports, __webpack_require__) {

	// 19.1.2.15 Object.preventExtensions(O)
	var isObject = __webpack_require__(12);
	var meta = __webpack_require__(64).onFreeze;

	__webpack_require__(51)('preventExtensions', function ($preventExtensions) {
	  return function preventExtensions(it) {
	    return $preventExtensions && isObject(it) ? $preventExtensions(meta(it)) : it;
	  };
	});


/***/ }),
/* 646 */
/***/ (function(module, exports, __webpack_require__) {

	// 19.1.2.17 Object.seal(O)
	var isObject = __webpack_require__(12);
	var meta = __webpack_require__(64).onFreeze;

	__webpack_require__(51)('seal', function ($seal) {
	  return function seal(it) {
	    return $seal && isObject(it) ? $seal(meta(it)) : it;
	  };
	});


/***/ }),
/* 647 */
/***/ (function(module, exports, __webpack_require__) {

	// 19.1.3.19 Object.setPrototypeOf(O, proto)
	var $export = __webpack_require__(1);
	$export($export.S, 'Object', { setPrototypeOf: __webpack_require__(196).set });


/***/ }),
/* 648 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';
	// 19.1.3.6 Object.prototype.toString()
	var classof = __webpack_require__(90);
	var test = {};
	test[__webpack_require__(16)('toStringTag')] = 'z';
	if (test + '' != '[object z]') {
	  __webpack_require__(32)(Object.prototype, 'toString', function toString() {
	    return '[object ' + classof(this) + ']';
	  }, true);
	}


/***/ }),
/* 649 */
/***/ (function(module, exports, __webpack_require__) {

	var $export = __webpack_require__(1);
	var $parseFloat = __webpack_require__(310);
	// 18.2.4 parseFloat(string)
	$export($export.G + $export.F * (parseFloat != $parseFloat), { parseFloat: $parseFloat });


/***/ }),
/* 650 */
/***/ (function(module, exports, __webpack_require__) {

	var $export = __webpack_require__(1);
	var $parseInt = __webpack_require__(311);
	// 18.2.5 parseInt(string, radix)
	$export($export.G + $export.F * (parseInt != $parseInt), { parseInt: $parseInt });


/***/ }),
/* 651 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';
	var LIBRARY = __webpack_require__(63);
	var global = __webpack_require__(9);
	var ctx = __webpack_require__(44);
	var classof = __webpack_require__(90);
	var $export = __webpack_require__(1);
	var isObject = __webpack_require__(12);
	var aFunction = __webpack_require__(28);
	var anInstance = __webpack_require__(71);
	var forOf = __webpack_require__(72);
	var speciesConstructor = __webpack_require__(110);
	var task = __webpack_require__(201).set;
	var microtask = __webpack_require__(193)();
	var newPromiseCapabilityModule = __webpack_require__(194);
	var perform = __webpack_require__(312);
	var userAgent = __webpack_require__(140);
	var promiseResolve = __webpack_require__(313);
	var PROMISE = 'Promise';
	var TypeError = global.TypeError;
	var process = global.process;
	var versions = process && process.versions;
	var v8 = versions && versions.v8 || '';
	var $Promise = global[PROMISE];
	var isNode = classof(process) == 'process';
	var empty = function () { /* empty */ };
	var Internal, newGenericPromiseCapability, OwnPromiseCapability, Wrapper;
	var newPromiseCapability = newGenericPromiseCapability = newPromiseCapabilityModule.f;

	var USE_NATIVE = !!function () {
	  try {
	    // correct subclassing with @@species support
	    var promise = $Promise.resolve(1);
	    var FakePromise = (promise.constructor = {})[__webpack_require__(16)('species')] = function (exec) {
	      exec(empty, empty);
	    };
	    // unhandled rejections tracking support, NodeJS Promise without it fails @@species test
	    return (isNode || typeof PromiseRejectionEvent == 'function')
	      && promise.then(empty) instanceof FakePromise
	      // v8 6.6 (Node 10 and Chrome 66) have a bug with resolving custom thenables
	      // https://bugs.chromium.org/p/chromium/issues/detail?id=830565
	      // we can't detect it synchronously, so just check versions
	      && v8.indexOf('6.6') !== 0
	      && userAgent.indexOf('Chrome/66') === -1;
	  } catch (e) { /* empty */ }
	}();

	// helpers
	var isThenable = function (it) {
	  var then;
	  return isObject(it) && typeof (then = it.then) == 'function' ? then : false;
	};
	var notify = function (promise, isReject) {
	  if (promise._n) return;
	  promise._n = true;
	  var chain = promise._c;
	  microtask(function () {
	    var value = promise._v;
	    var ok = promise._s == 1;
	    var i = 0;
	    var run = function (reaction) {
	      var handler = ok ? reaction.ok : reaction.fail;
	      var resolve = reaction.resolve;
	      var reject = reaction.reject;
	      var domain = reaction.domain;
	      var result, then, exited;
	      try {
	        if (handler) {
	          if (!ok) {
	            if (promise._h == 2) onHandleUnhandled(promise);
	            promise._h = 1;
	          }
	          if (handler === true) result = value;
	          else {
	            if (domain) domain.enter();
	            result = handler(value); // may throw
	            if (domain) {
	              domain.exit();
	              exited = true;
	            }
	          }
	          if (result === reaction.promise) {
	            reject(TypeError('Promise-chain cycle'));
	          } else if (then = isThenable(result)) {
	            then.call(result, resolve, reject);
	          } else resolve(result);
	        } else reject(value);
	      } catch (e) {
	        if (domain && !exited) domain.exit();
	        reject(e);
	      }
	    };
	    while (chain.length > i) run(chain[i++]); // variable length - can't use forEach
	    promise._c = [];
	    promise._n = false;
	    if (isReject && !promise._h) onUnhandled(promise);
	  });
	};
	var onUnhandled = function (promise) {
	  task.call(global, function () {
	    var value = promise._v;
	    var unhandled = isUnhandled(promise);
	    var result, handler, console;
	    if (unhandled) {
	      result = perform(function () {
	        if (isNode) {
	          process.emit('unhandledRejection', value, promise);
	        } else if (handler = global.onunhandledrejection) {
	          handler({ promise: promise, reason: value });
	        } else if ((console = global.console) && console.error) {
	          console.error('Unhandled promise rejection', value);
	        }
	      });
	      // Browsers should not trigger `rejectionHandled` event if it was handled here, NodeJS - should
	      promise._h = isNode || isUnhandled(promise) ? 2 : 1;
	    } promise._a = undefined;
	    if (unhandled && result.e) throw result.v;
	  });
	};
	var isUnhandled = function (promise) {
	  return promise._h !== 1 && (promise._a || promise._c).length === 0;
	};
	var onHandleUnhandled = function (promise) {
	  task.call(global, function () {
	    var handler;
	    if (isNode) {
	      process.emit('rejectionHandled', promise);
	    } else if (handler = global.onrejectionhandled) {
	      handler({ promise: promise, reason: promise._v });
	    }
	  });
	};
	var $reject = function (value) {
	  var promise = this;
	  if (promise._d) return;
	  promise._d = true;
	  promise = promise._w || promise; // unwrap
	  promise._v = value;
	  promise._s = 2;
	  if (!promise._a) promise._a = promise._c.slice();
	  notify(promise, true);
	};
	var $resolve = function (value) {
	  var promise = this;
	  var then;
	  if (promise._d) return;
	  promise._d = true;
	  promise = promise._w || promise; // unwrap
	  try {
	    if (promise === value) throw TypeError("Promise can't be resolved itself");
	    if (then = isThenable(value)) {
	      microtask(function () {
	        var wrapper = { _w: promise, _d: false }; // wrap
	        try {
	          then.call(value, ctx($resolve, wrapper, 1), ctx($reject, wrapper, 1));
	        } catch (e) {
	          $reject.call(wrapper, e);
	        }
	      });
	    } else {
	      promise._v = value;
	      promise._s = 1;
	      notify(promise, false);
	    }
	  } catch (e) {
	    $reject.call({ _w: promise, _d: false }, e); // wrap
	  }
	};

	// constructor polyfill
	if (!USE_NATIVE) {
	  // 25.4.3.1 Promise(executor)
	  $Promise = function Promise(executor) {
	    anInstance(this, $Promise, PROMISE, '_h');
	    aFunction(executor);
	    Internal.call(this);
	    try {
	      executor(ctx($resolve, this, 1), ctx($reject, this, 1));
	    } catch (err) {
	      $reject.call(this, err);
	    }
	  };
	  // eslint-disable-next-line no-unused-vars
	  Internal = function Promise(executor) {
	    this._c = [];             // <- awaiting reactions
	    this._a = undefined;      // <- checked in isUnhandled reactions
	    this._s = 0;              // <- state
	    this._d = false;          // <- done
	    this._v = undefined;      // <- value
	    this._h = 0;              // <- rejection state, 0 - default, 1 - handled, 2 - unhandled
	    this._n = false;          // <- notify
	  };
	  Internal.prototype = __webpack_require__(77)($Promise.prototype, {
	    // 25.4.5.3 Promise.prototype.then(onFulfilled, onRejected)
	    then: function then(onFulfilled, onRejected) {
	      var reaction = newPromiseCapability(speciesConstructor(this, $Promise));
	      reaction.ok = typeof onFulfilled == 'function' ? onFulfilled : true;
	      reaction.fail = typeof onRejected == 'function' && onRejected;
	      reaction.domain = isNode ? process.domain : undefined;
	      this._c.push(reaction);
	      if (this._a) this._a.push(reaction);
	      if (this._s) notify(this, false);
	      return reaction.promise;
	    },
	    // 25.4.5.1 Promise.prototype.catch(onRejected)
	    'catch': function (onRejected) {
	      return this.then(undefined, onRejected);
	    }
	  });
	  OwnPromiseCapability = function () {
	    var promise = new Internal();
	    this.promise = promise;
	    this.resolve = ctx($resolve, promise, 1);
	    this.reject = ctx($reject, promise, 1);
	  };
	  newPromiseCapabilityModule.f = newPromiseCapability = function (C) {
	    return C === $Promise || C === Wrapper
	      ? new OwnPromiseCapability(C)
	      : newGenericPromiseCapability(C);
	  };
	}

	$export($export.G + $export.W + $export.F * !USE_NATIVE, { Promise: $Promise });
	__webpack_require__(92)($Promise, PROMISE);
	__webpack_require__(78)(PROMISE);
	Wrapper = __webpack_require__(43)[PROMISE];

	// statics
	$export($export.S + $export.F * !USE_NATIVE, PROMISE, {
	  // 25.4.4.5 Promise.reject(r)
	  reject: function reject(r) {
	    var capability = newPromiseCapability(this);
	    var $$reject = capability.reject;
	    $$reject(r);
	    return capability.promise;
	  }
	});
	$export($export.S + $export.F * (LIBRARY || !USE_NATIVE), PROMISE, {
	  // 25.4.4.6 Promise.resolve(x)
	  resolve: function resolve(x) {
	    return promiseResolve(LIBRARY && this === Wrapper ? $Promise : this, x);
	  }
	});
	$export($export.S + $export.F * !(USE_NATIVE && __webpack_require__(132)(function (iter) {
	  $Promise.all(iter)['catch'](empty);
	})), PROMISE, {
	  // 25.4.4.1 Promise.all(iterable)
	  all: function all(iterable) {
	    var C = this;
	    var capability = newPromiseCapability(C);
	    var resolve = capability.resolve;
	    var reject = capability.reject;
	    var result = perform(function () {
	      var values = [];
	      var index = 0;
	      var remaining = 1;
	      forOf(iterable, false, function (promise) {
	        var $index = index++;
	        var alreadyCalled = false;
	        values.push(undefined);
	        remaining++;
	        C.resolve(promise).then(function (value) {
	          if (alreadyCalled) return;
	          alreadyCalled = true;
	          values[$index] = value;
	          --remaining || resolve(values);
	        }, reject);
	      });
	      --remaining || resolve(values);
	    });
	    if (result.e) reject(result.v);
	    return capability.promise;
	  },
	  // 25.4.4.4 Promise.race(iterable)
	  race: function race(iterable) {
	    var C = this;
	    var capability = newPromiseCapability(C);
	    var reject = capability.reject;
	    var result = perform(function () {
	      forOf(iterable, false, function (promise) {
	        C.resolve(promise).then(capability.resolve, reject);
	      });
	    });
	    if (result.e) reject(result.v);
	    return capability.promise;
	  }
	});


/***/ }),
/* 652 */
/***/ (function(module, exports, __webpack_require__) {

	// 26.1.1 Reflect.apply(target, thisArgument, argumentsList)
	var $export = __webpack_require__(1);
	var aFunction = __webpack_require__(28);
	var anObject = __webpack_require__(6);
	var rApply = (__webpack_require__(9).Reflect || {}).apply;
	var fApply = Function.apply;
	// MS Edge argumentsList argument is optional
	$export($export.S + $export.F * !__webpack_require__(10)(function () {
	  rApply(function () { /* empty */ });
	}), 'Reflect', {
	  apply: function apply(target, thisArgument, argumentsList) {
	    var T = aFunction(target);
	    var L = anObject(argumentsList);
	    return rApply ? rApply(T, thisArgument, L) : fApply.call(T, thisArgument, L);
	  }
	});


/***/ }),
/* 653 */
/***/ (function(module, exports, __webpack_require__) {

	// 26.1.2 Reflect.construct(target, argumentsList [, newTarget])
	var $export = __webpack_require__(1);
	var create = __webpack_require__(73);
	var aFunction = __webpack_require__(28);
	var anObject = __webpack_require__(6);
	var isObject = __webpack_require__(12);
	var fails = __webpack_require__(10);
	var bind = __webpack_require__(291);
	var rConstruct = (__webpack_require__(9).Reflect || {}).construct;

	// MS Edge supports only 2 arguments and argumentsList argument is optional
	// FF Nightly sets third argument as `new.target`, but does not create `this` from it
	var NEW_TARGET_BUG = fails(function () {
	  function F() { /* empty */ }
	  return !(rConstruct(function () { /* empty */ }, [], F) instanceof F);
	});
	var ARGS_BUG = !fails(function () {
	  rConstruct(function () { /* empty */ });
	});

	$export($export.S + $export.F * (NEW_TARGET_BUG || ARGS_BUG), 'Reflect', {
	  construct: function construct(Target, args /* , newTarget */) {
	    aFunction(Target);
	    anObject(args);
	    var newTarget = arguments.length < 3 ? Target : aFunction(arguments[2]);
	    if (ARGS_BUG && !NEW_TARGET_BUG) return rConstruct(Target, args, newTarget);
	    if (Target == newTarget) {
	      // w/o altered newTarget, optimization for 0-4 arguments
	      switch (args.length) {
	        case 0: return new Target();
	        case 1: return new Target(args[0]);
	        case 2: return new Target(args[0], args[1]);
	        case 3: return new Target(args[0], args[1], args[2]);
	        case 4: return new Target(args[0], args[1], args[2], args[3]);
	      }
	      // w/o altered newTarget, lot of arguments case
	      var $args = [null];
	      $args.push.apply($args, args);
	      return new (bind.apply(Target, $args))();
	    }
	    // with altered newTarget, not support built-in constructors
	    var proto = newTarget.prototype;
	    var instance = create(isObject(proto) ? proto : Object.prototype);
	    var result = Function.apply.call(Target, instance, args);
	    return isObject(result) ? result : instance;
	  }
	});


/***/ }),
/* 654 */
/***/ (function(module, exports, __webpack_require__) {

	// 26.1.3 Reflect.defineProperty(target, propertyKey, attributes)
	var dP = __webpack_require__(20);
	var $export = __webpack_require__(1);
	var anObject = __webpack_require__(6);
	var toPrimitive = __webpack_require__(52);

	// MS Edge has broken Reflect.defineProperty - throwing instead of returning false
	$export($export.S + $export.F * __webpack_require__(10)(function () {
	  // eslint-disable-next-line no-undef
	  Reflect.defineProperty(dP.f({}, 1, { value: 1 }), 1, { value: 2 });
	}), 'Reflect', {
	  defineProperty: function defineProperty(target, propertyKey, attributes) {
	    anObject(target);
	    propertyKey = toPrimitive(propertyKey, true);
	    anObject(attributes);
	    try {
	      dP.f(target, propertyKey, attributes);
	      return true;
	    } catch (e) {
	      return false;
	    }
	  }
	});


/***/ }),
/* 655 */
/***/ (function(module, exports, __webpack_require__) {

	// 26.1.4 Reflect.deleteProperty(target, propertyKey)
	var $export = __webpack_require__(1);
	var gOPD = __webpack_require__(37).f;
	var anObject = __webpack_require__(6);

	$export($export.S, 'Reflect', {
	  deleteProperty: function deleteProperty(target, propertyKey) {
	    var desc = gOPD(anObject(target), propertyKey);
	    return desc && !desc.configurable ? false : delete target[propertyKey];
	  }
	});


/***/ }),
/* 656 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';
	// 26.1.5 Reflect.enumerate(target)
	var $export = __webpack_require__(1);
	var anObject = __webpack_require__(6);
	var Enumerate = function (iterated) {
	  this._t = anObject(iterated); // target
	  this._i = 0;                  // next index
	  var keys = this._k = [];      // keys
	  var key;
	  for (key in iterated) keys.push(key);
	};
	__webpack_require__(189)(Enumerate, 'Object', function () {
	  var that = this;
	  var keys = that._k;
	  var key;
	  do {
	    if (that._i >= keys.length) return { value: undefined, done: true };
	  } while (!((key = keys[that._i++]) in that._t));
	  return { value: key, done: false };
	});

	$export($export.S, 'Reflect', {
	  enumerate: function enumerate(target) {
	    return new Enumerate(target);
	  }
	});


/***/ }),
/* 657 */
/***/ (function(module, exports, __webpack_require__) {

	// 26.1.7 Reflect.getOwnPropertyDescriptor(target, propertyKey)
	var gOPD = __webpack_require__(37);
	var $export = __webpack_require__(1);
	var anObject = __webpack_require__(6);

	$export($export.S, 'Reflect', {
	  getOwnPropertyDescriptor: function getOwnPropertyDescriptor(target, propertyKey) {
	    return gOPD.f(anObject(target), propertyKey);
	  }
	});


/***/ }),
/* 658 */
/***/ (function(module, exports, __webpack_require__) {

	// 26.1.8 Reflect.getPrototypeOf(target)
	var $export = __webpack_require__(1);
	var getProto = __webpack_require__(38);
	var anObject = __webpack_require__(6);

	$export($export.S, 'Reflect', {
	  getPrototypeOf: function getPrototypeOf(target) {
	    return getProto(anObject(target));
	  }
	});


/***/ }),
/* 659 */
/***/ (function(module, exports, __webpack_require__) {

	// 26.1.6 Reflect.get(target, propertyKey [, receiver])
	var gOPD = __webpack_require__(37);
	var getPrototypeOf = __webpack_require__(38);
	var has = __webpack_require__(36);
	var $export = __webpack_require__(1);
	var isObject = __webpack_require__(12);
	var anObject = __webpack_require__(6);

	function get(target, propertyKey /* , receiver */) {
	  var receiver = arguments.length < 3 ? target : arguments[2];
	  var desc, proto;
	  if (anObject(target) === receiver) return target[propertyKey];
	  if (desc = gOPD.f(target, propertyKey)) return has(desc, 'value')
	    ? desc.value
	    : desc.get !== undefined
	      ? desc.get.call(receiver)
	      : undefined;
	  if (isObject(proto = getPrototypeOf(target))) return get(proto, propertyKey, receiver);
	}

	$export($export.S, 'Reflect', { get: get });


/***/ }),
/* 660 */
/***/ (function(module, exports, __webpack_require__) {

	// 26.1.9 Reflect.has(target, propertyKey)
	var $export = __webpack_require__(1);

	$export($export.S, 'Reflect', {
	  has: function has(target, propertyKey) {
	    return propertyKey in target;
	  }
	});


/***/ }),
/* 661 */
/***/ (function(module, exports, __webpack_require__) {

	// 26.1.10 Reflect.isExtensible(target)
	var $export = __webpack_require__(1);
	var anObject = __webpack_require__(6);
	var $isExtensible = Object.isExtensible;

	$export($export.S, 'Reflect', {
	  isExtensible: function isExtensible(target) {
	    anObject(target);
	    return $isExtensible ? $isExtensible(target) : true;
	  }
	});


/***/ }),
/* 662 */
/***/ (function(module, exports, __webpack_require__) {

	// 26.1.11 Reflect.ownKeys(target)
	var $export = __webpack_require__(1);

	$export($export.S, 'Reflect', { ownKeys: __webpack_require__(309) });


/***/ }),
/* 663 */
/***/ (function(module, exports, __webpack_require__) {

	// 26.1.12 Reflect.preventExtensions(target)
	var $export = __webpack_require__(1);
	var anObject = __webpack_require__(6);
	var $preventExtensions = Object.preventExtensions;

	$export($export.S, 'Reflect', {
	  preventExtensions: function preventExtensions(target) {
	    anObject(target);
	    try {
	      if ($preventExtensions) $preventExtensions(target);
	      return true;
	    } catch (e) {
	      return false;
	    }
	  }
	});


/***/ }),
/* 664 */
/***/ (function(module, exports, __webpack_require__) {

	// 26.1.14 Reflect.setPrototypeOf(target, proto)
	var $export = __webpack_require__(1);
	var setProto = __webpack_require__(196);

	if (setProto) $export($export.S, 'Reflect', {
	  setPrototypeOf: function setPrototypeOf(target, proto) {
	    setProto.check(target, proto);
	    try {
	      setProto.set(target, proto);
	      return true;
	    } catch (e) {
	      return false;
	    }
	  }
	});


/***/ }),
/* 665 */
/***/ (function(module, exports, __webpack_require__) {

	// 26.1.13 Reflect.set(target, propertyKey, V [, receiver])
	var dP = __webpack_require__(20);
	var gOPD = __webpack_require__(37);
	var getPrototypeOf = __webpack_require__(38);
	var has = __webpack_require__(36);
	var $export = __webpack_require__(1);
	var createDesc = __webpack_require__(76);
	var anObject = __webpack_require__(6);
	var isObject = __webpack_require__(12);

	function set(target, propertyKey, V /* , receiver */) {
	  var receiver = arguments.length < 4 ? target : arguments[3];
	  var ownDesc = gOPD.f(anObject(target), propertyKey);
	  var existingDescriptor, proto;
	  if (!ownDesc) {
	    if (isObject(proto = getPrototypeOf(target))) {
	      return set(proto, propertyKey, V, receiver);
	    }
	    ownDesc = createDesc(0);
	  }
	  if (has(ownDesc, 'value')) {
	    if (ownDesc.writable === false || !isObject(receiver)) return false;
	    if (existingDescriptor = gOPD.f(receiver, propertyKey)) {
	      if (existingDescriptor.get || existingDescriptor.set || existingDescriptor.writable === false) return false;
	      existingDescriptor.value = V;
	      dP.f(receiver, propertyKey, existingDescriptor);
	    } else dP.f(receiver, propertyKey, createDesc(0, V));
	    return true;
	  }
	  return ownDesc.set === undefined ? false : (ownDesc.set.call(receiver, V), true);
	}

	$export($export.S, 'Reflect', { set: set });


/***/ }),
/* 666 */
/***/ (function(module, exports, __webpack_require__) {

	var global = __webpack_require__(9);
	var inheritIfRequired = __webpack_require__(187);
	var dP = __webpack_require__(20).f;
	var gOPN = __webpack_require__(74).f;
	var isRegExp = __webpack_require__(131);
	var $flags = __webpack_require__(106);
	var $RegExp = global.RegExp;
	var Base = $RegExp;
	var proto = $RegExp.prototype;
	var re1 = /a/g;
	var re2 = /a/g;
	// "new" creates a new object, old webkit buggy here
	var CORRECT_NEW = new $RegExp(re1) !== re1;

	if (__webpack_require__(18) && (!CORRECT_NEW || __webpack_require__(10)(function () {
	  re2[__webpack_require__(16)('match')] = false;
	  // RegExp constructor can alter flags and IsRegExp works correct with @@match
	  return $RegExp(re1) != re1 || $RegExp(re2) == re2 || $RegExp(re1, 'i') != '/a/i';
	}))) {
	  $RegExp = function RegExp(p, f) {
	    var tiRE = this instanceof $RegExp;
	    var piRE = isRegExp(p);
	    var fiU = f === undefined;
	    return !tiRE && piRE && p.constructor === $RegExp && fiU ? p
	      : inheritIfRequired(CORRECT_NEW
	        ? new Base(piRE && !fiU ? p.source : p, f)
	        : Base((piRE = p instanceof $RegExp) ? p.source : p, piRE && fiU ? $flags.call(p) : f)
	      , tiRE ? this : proto, $RegExp);
	  };
	  var proxy = function (key) {
	    key in $RegExp || dP($RegExp, key, {
	      configurable: true,
	      get: function () { return Base[key]; },
	      set: function (it) { Base[key] = it; }
	    });
	  };
	  for (var keys = gOPN(Base), i = 0; keys.length > i;) proxy(keys[i++]);
	  proto.constructor = $RegExp;
	  $RegExp.prototype = proto;
	  __webpack_require__(32)(global, 'RegExp', $RegExp);
	}

	__webpack_require__(78)('RegExp');


/***/ }),
/* 667 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';

	var anObject = __webpack_require__(6);
	var toLength = __webpack_require__(17);
	var advanceStringIndex = __webpack_require__(179);
	var regExpExec = __webpack_require__(135);

	// @@match logic
	__webpack_require__(129)('match', 1, function (defined, MATCH, $match, maybeCallNative) {
	  return [
	    // `String.prototype.match` method
	    // https://tc39.github.io/ecma262/#sec-string.prototype.match
	    function match(regexp) {
	      var O = defined(this);
	      var fn = regexp == undefined ? undefined : regexp[MATCH];
	      return fn !== undefined ? fn.call(regexp, O) : new RegExp(regexp)[MATCH](String(O));
	    },
	    // `RegExp.prototype[@@match]` method
	    // https://tc39.github.io/ecma262/#sec-regexp.prototype-@@match
	    function (regexp) {
	      var res = maybeCallNative($match, regexp, this);
	      if (res.done) return res.value;
	      var rx = anObject(regexp);
	      var S = String(this);
	      if (!rx.global) return regExpExec(rx, S);
	      var fullUnicode = rx.unicode;
	      rx.lastIndex = 0;
	      var A = [];
	      var n = 0;
	      var result;
	      while ((result = regExpExec(rx, S)) !== null) {
	        var matchStr = String(result[0]);
	        A[n] = matchStr;
	        if (matchStr === '') rx.lastIndex = advanceStringIndex(S, toLength(rx.lastIndex), fullUnicode);
	        n++;
	      }
	      return n === 0 ? null : A;
	    }
	  ];
	});


/***/ }),
/* 668 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';

	var anObject = __webpack_require__(6);
	var toObject = __webpack_require__(22);
	var toLength = __webpack_require__(17);
	var toInteger = __webpack_require__(46);
	var advanceStringIndex = __webpack_require__(179);
	var regExpExec = __webpack_require__(135);
	var max = Math.max;
	var min = Math.min;
	var floor = Math.floor;
	var SUBSTITUTION_SYMBOLS = /\$([$&`']|\d\d?|<[^>]*>)/g;
	var SUBSTITUTION_SYMBOLS_NO_NAMED = /\$([$&`']|\d\d?)/g;

	var maybeToString = function (it) {
	  return it === undefined ? it : String(it);
	};

	// @@replace logic
	__webpack_require__(129)('replace', 2, function (defined, REPLACE, $replace, maybeCallNative) {
	  return [
	    // `String.prototype.replace` method
	    // https://tc39.github.io/ecma262/#sec-string.prototype.replace
	    function replace(searchValue, replaceValue) {
	      var O = defined(this);
	      var fn = searchValue == undefined ? undefined : searchValue[REPLACE];
	      return fn !== undefined
	        ? fn.call(searchValue, O, replaceValue)
	        : $replace.call(String(O), searchValue, replaceValue);
	    },
	    // `RegExp.prototype[@@replace]` method
	    // https://tc39.github.io/ecma262/#sec-regexp.prototype-@@replace
	    function (regexp, replaceValue) {
	      var res = maybeCallNative($replace, regexp, this, replaceValue);
	      if (res.done) return res.value;

	      var rx = anObject(regexp);
	      var S = String(this);
	      var functionalReplace = typeof replaceValue === 'function';
	      if (!functionalReplace) replaceValue = String(replaceValue);
	      var global = rx.global;
	      if (global) {
	        var fullUnicode = rx.unicode;
	        rx.lastIndex = 0;
	      }
	      var results = [];
	      while (true) {
	        var result = regExpExec(rx, S);
	        if (result === null) break;
	        results.push(result);
	        if (!global) break;
	        var matchStr = String(result[0]);
	        if (matchStr === '') rx.lastIndex = advanceStringIndex(S, toLength(rx.lastIndex), fullUnicode);
	      }
	      var accumulatedResult = '';
	      var nextSourcePosition = 0;
	      for (var i = 0; i < results.length; i++) {
	        result = results[i];
	        var matched = String(result[0]);
	        var position = max(min(toInteger(result.index), S.length), 0);
	        var captures = [];
	        // NOTE: This is equivalent to
	        //   captures = result.slice(1).map(maybeToString)
	        // but for some reason `nativeSlice.call(result, 1, result.length)` (called in
	        // the slice polyfill when slicing native arrays) "doesn't work" in safari 9 and
	        // causes a crash (https://pastebin.com/N21QzeQA) when trying to debug it.
	        for (var j = 1; j < result.length; j++) captures.push(maybeToString(result[j]));
	        var namedCaptures = result.groups;
	        if (functionalReplace) {
	          var replacerArgs = [matched].concat(captures, position, S);
	          if (namedCaptures !== undefined) replacerArgs.push(namedCaptures);
	          var replacement = String(replaceValue.apply(undefined, replacerArgs));
	        } else {
	          replacement = getSubstitution(matched, S, position, captures, namedCaptures, replaceValue);
	        }
	        if (position >= nextSourcePosition) {
	          accumulatedResult += S.slice(nextSourcePosition, position) + replacement;
	          nextSourcePosition = position + matched.length;
	        }
	      }
	      return accumulatedResult + S.slice(nextSourcePosition);
	    }
	  ];

	    // https://tc39.github.io/ecma262/#sec-getsubstitution
	  function getSubstitution(matched, str, position, captures, namedCaptures, replacement) {
	    var tailPos = position + matched.length;
	    var m = captures.length;
	    var symbols = SUBSTITUTION_SYMBOLS_NO_NAMED;
	    if (namedCaptures !== undefined) {
	      namedCaptures = toObject(namedCaptures);
	      symbols = SUBSTITUTION_SYMBOLS;
	    }
	    return $replace.call(replacement, symbols, function (match, ch) {
	      var capture;
	      switch (ch.charAt(0)) {
	        case '$': return '$';
	        case '&': return matched;
	        case '`': return str.slice(0, position);
	        case "'": return str.slice(tailPos);
	        case '<':
	          capture = namedCaptures[ch.slice(1, -1)];
	          break;
	        default: // \d\d?
	          var n = +ch;
	          if (n === 0) return match;
	          if (n > m) {
	            var f = floor(n / 10);
	            if (f === 0) return match;
	            if (f <= m) return captures[f - 1] === undefined ? ch.charAt(1) : captures[f - 1] + ch.charAt(1);
	            return match;
	          }
	          capture = captures[n - 1];
	      }
	      return capture === undefined ? '' : capture;
	    });
	  }
	});


/***/ }),
/* 669 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';

	var anObject = __webpack_require__(6);
	var sameValue = __webpack_require__(314);
	var regExpExec = __webpack_require__(135);

	// @@search logic
	__webpack_require__(129)('search', 1, function (defined, SEARCH, $search, maybeCallNative) {
	  return [
	    // `String.prototype.search` method
	    // https://tc39.github.io/ecma262/#sec-string.prototype.search
	    function search(regexp) {
	      var O = defined(this);
	      var fn = regexp == undefined ? undefined : regexp[SEARCH];
	      return fn !== undefined ? fn.call(regexp, O) : new RegExp(regexp)[SEARCH](String(O));
	    },
	    // `RegExp.prototype[@@search]` method
	    // https://tc39.github.io/ecma262/#sec-regexp.prototype-@@search
	    function (regexp) {
	      var res = maybeCallNative($search, regexp, this);
	      if (res.done) return res.value;
	      var rx = anObject(regexp);
	      var S = String(this);
	      var previousLastIndex = rx.lastIndex;
	      if (!sameValue(previousLastIndex, 0)) rx.lastIndex = 0;
	      var result = regExpExec(rx, S);
	      if (!sameValue(rx.lastIndex, previousLastIndex)) rx.lastIndex = previousLastIndex;
	      return result === null ? -1 : result.index;
	    }
	  ];
	});


/***/ }),
/* 670 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';

	var isRegExp = __webpack_require__(131);
	var anObject = __webpack_require__(6);
	var speciesConstructor = __webpack_require__(110);
	var advanceStringIndex = __webpack_require__(179);
	var toLength = __webpack_require__(17);
	var callRegExpExec = __webpack_require__(135);
	var regexpExec = __webpack_require__(195);
	var fails = __webpack_require__(10);
	var $min = Math.min;
	var $push = [].push;
	var $SPLIT = 'split';
	var LENGTH = 'length';
	var LAST_INDEX = 'lastIndex';
	var MAX_UINT32 = 0xffffffff;

	// babel-minify transpiles RegExp('x', 'y') -> /x/y and it causes SyntaxError
	var SUPPORTS_Y = !fails(function () { RegExp(MAX_UINT32, 'y'); });

	// @@split logic
	__webpack_require__(129)('split', 2, function (defined, SPLIT, $split, maybeCallNative) {
	  var internalSplit;
	  if (
	    'abbc'[$SPLIT](/(b)*/)[1] == 'c' ||
	    'test'[$SPLIT](/(?:)/, -1)[LENGTH] != 4 ||
	    'ab'[$SPLIT](/(?:ab)*/)[LENGTH] != 2 ||
	    '.'[$SPLIT](/(.?)(.?)/)[LENGTH] != 4 ||
	    '.'[$SPLIT](/()()/)[LENGTH] > 1 ||
	    ''[$SPLIT](/.?/)[LENGTH]
	  ) {
	    // based on es5-shim implementation, need to rework it
	    internalSplit = function (separator, limit) {
	      var string = String(this);
	      if (separator === undefined && limit === 0) return [];
	      // If `separator` is not a regex, use native split
	      if (!isRegExp(separator)) return $split.call(string, separator, limit);
	      var output = [];
	      var flags = (separator.ignoreCase ? 'i' : '') +
	                  (separator.multiline ? 'm' : '') +
	                  (separator.unicode ? 'u' : '') +
	                  (separator.sticky ? 'y' : '');
	      var lastLastIndex = 0;
	      var splitLimit = limit === undefined ? MAX_UINT32 : limit >>> 0;
	      // Make `global` and avoid `lastIndex` issues by working with a copy
	      var separatorCopy = new RegExp(separator.source, flags + 'g');
	      var match, lastIndex, lastLength;
	      while (match = regexpExec.call(separatorCopy, string)) {
	        lastIndex = separatorCopy[LAST_INDEX];
	        if (lastIndex > lastLastIndex) {
	          output.push(string.slice(lastLastIndex, match.index));
	          if (match[LENGTH] > 1 && match.index < string[LENGTH]) $push.apply(output, match.slice(1));
	          lastLength = match[0][LENGTH];
	          lastLastIndex = lastIndex;
	          if (output[LENGTH] >= splitLimit) break;
	        }
	        if (separatorCopy[LAST_INDEX] === match.index) separatorCopy[LAST_INDEX]++; // Avoid an infinite loop
	      }
	      if (lastLastIndex === string[LENGTH]) {
	        if (lastLength || !separatorCopy.test('')) output.push('');
	      } else output.push(string.slice(lastLastIndex));
	      return output[LENGTH] > splitLimit ? output.slice(0, splitLimit) : output;
	    };
	  // Chakra, V8
	  } else if ('0'[$SPLIT](undefined, 0)[LENGTH]) {
	    internalSplit = function (separator, limit) {
	      return separator === undefined && limit === 0 ? [] : $split.call(this, separator, limit);
	    };
	  } else {
	    internalSplit = $split;
	  }

	  return [
	    // `String.prototype.split` method
	    // https://tc39.github.io/ecma262/#sec-string.prototype.split
	    function split(separator, limit) {
	      var O = defined(this);
	      var splitter = separator == undefined ? undefined : separator[SPLIT];
	      return splitter !== undefined
	        ? splitter.call(separator, O, limit)
	        : internalSplit.call(String(O), separator, limit);
	    },
	    // `RegExp.prototype[@@split]` method
	    // https://tc39.github.io/ecma262/#sec-regexp.prototype-@@split
	    //
	    // NOTE: This cannot be properly polyfilled in engines that don't support
	    // the 'y' flag.
	    function (regexp, limit) {
	      var res = maybeCallNative(internalSplit, regexp, this, limit, internalSplit !== $split);
	      if (res.done) return res.value;

	      var rx = anObject(regexp);
	      var S = String(this);
	      var C = speciesConstructor(rx, RegExp);

	      var unicodeMatching = rx.unicode;
	      var flags = (rx.ignoreCase ? 'i' : '') +
	                  (rx.multiline ? 'm' : '') +
	                  (rx.unicode ? 'u' : '') +
	                  (SUPPORTS_Y ? 'y' : 'g');

	      // ^(? + rx + ) is needed, in combination with some S slicing, to
	      // simulate the 'y' flag.
	      var splitter = new C(SUPPORTS_Y ? rx : '^(?:' + rx.source + ')', flags);
	      var lim = limit === undefined ? MAX_UINT32 : limit >>> 0;
	      if (lim === 0) return [];
	      if (S.length === 0) return callRegExpExec(splitter, S) === null ? [S] : [];
	      var p = 0;
	      var q = 0;
	      var A = [];
	      while (q < S.length) {
	        splitter.lastIndex = SUPPORTS_Y ? q : 0;
	        var z = callRegExpExec(splitter, SUPPORTS_Y ? S : S.slice(q));
	        var e;
	        if (
	          z === null ||
	          (e = $min(toLength(splitter.lastIndex + (SUPPORTS_Y ? 0 : q)), S.length)) === p
	        ) {
	          q = advanceStringIndex(S, q, unicodeMatching);
	        } else {
	          A.push(S.slice(p, q));
	          if (A.length === lim) return A;
	          for (var i = 1; i <= z.length - 1; i++) {
	            A.push(z[i]);
	            if (A.length === lim) return A;
	          }
	          q = p = e;
	        }
	      }
	      A.push(S.slice(p));
	      return A;
	    }
	  ];
	});


/***/ }),
/* 671 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';
	__webpack_require__(320);
	var anObject = __webpack_require__(6);
	var $flags = __webpack_require__(106);
	var DESCRIPTORS = __webpack_require__(18);
	var TO_STRING = 'toString';
	var $toString = /./[TO_STRING];

	var define = function (fn) {
	  __webpack_require__(32)(RegExp.prototype, TO_STRING, fn, true);
	};

	// 21.2.5.14 RegExp.prototype.toString()
	if (__webpack_require__(10)(function () { return $toString.call({ source: 'a', flags: 'b' }) != '/a/b'; })) {
	  define(function toString() {
	    var R = anObject(this);
	    return '/'.concat(R.source, '/',
	      'flags' in R ? R.flags : !DESCRIPTORS && R instanceof RegExp ? $flags.call(R) : undefined);
	  });
	// FF44- RegExp#toString has a wrong name
	} else if ($toString.name != TO_STRING) {
	  define(function toString() {
	    return $toString.call(this);
	  });
	}


/***/ }),
/* 672 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';
	// B.2.3.2 String.prototype.anchor(name)
	__webpack_require__(33)('anchor', function (createHTML) {
	  return function anchor(name) {
	    return createHTML(this, 'a', 'name', name);
	  };
	});


/***/ }),
/* 673 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';
	// B.2.3.3 String.prototype.big()
	__webpack_require__(33)('big', function (createHTML) {
	  return function big() {
	    return createHTML(this, 'big', '', '');
	  };
	});


/***/ }),
/* 674 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';
	// B.2.3.4 String.prototype.blink()
	__webpack_require__(33)('blink', function (createHTML) {
	  return function blink() {
	    return createHTML(this, 'blink', '', '');
	  };
	});


/***/ }),
/* 675 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';
	// B.2.3.5 String.prototype.bold()
	__webpack_require__(33)('bold', function (createHTML) {
	  return function bold() {
	    return createHTML(this, 'b', '', '');
	  };
	});


/***/ }),
/* 676 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';
	var $export = __webpack_require__(1);
	var $at = __webpack_require__(138)(false);
	$export($export.P, 'String', {
	  // 21.1.3.3 String.prototype.codePointAt(pos)
	  codePointAt: function codePointAt(pos) {
	    return $at(this, pos);
	  }
	});


/***/ }),
/* 677 */
/***/ (function(module, exports, __webpack_require__) {

	// 21.1.3.6 String.prototype.endsWith(searchString [, endPosition])
	'use strict';
	var $export = __webpack_require__(1);
	var toLength = __webpack_require__(17);
	var context = __webpack_require__(198);
	var ENDS_WITH = 'endsWith';
	var $endsWith = ''[ENDS_WITH];

	$export($export.P + $export.F * __webpack_require__(185)(ENDS_WITH), 'String', {
	  endsWith: function endsWith(searchString /* , endPosition = @length */) {
	    var that = context(this, searchString, ENDS_WITH);
	    var endPosition = arguments.length > 1 ? arguments[1] : undefined;
	    var len = toLength(that.length);
	    var end = endPosition === undefined ? len : Math.min(toLength(endPosition), len);
	    var search = String(searchString);
	    return $endsWith
	      ? $endsWith.call(that, search, end)
	      : that.slice(end - search.length, end) === search;
	  }
	});


/***/ }),
/* 678 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';
	// B.2.3.6 String.prototype.fixed()
	__webpack_require__(33)('fixed', function (createHTML) {
	  return function fixed() {
	    return createHTML(this, 'tt', '', '');
	  };
	});


/***/ }),
/* 679 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';
	// B.2.3.7 String.prototype.fontcolor(color)
	__webpack_require__(33)('fontcolor', function (createHTML) {
	  return function fontcolor(color) {
	    return createHTML(this, 'font', 'color', color);
	  };
	});


/***/ }),
/* 680 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';
	// B.2.3.8 String.prototype.fontsize(size)
	__webpack_require__(33)('fontsize', function (createHTML) {
	  return function fontsize(size) {
	    return createHTML(this, 'font', 'size', size);
	  };
	});


/***/ }),
/* 681 */
/***/ (function(module, exports, __webpack_require__) {

	var $export = __webpack_require__(1);
	var toAbsoluteIndex = __webpack_require__(79);
	var fromCharCode = String.fromCharCode;
	var $fromCodePoint = String.fromCodePoint;

	// length should be 1, old FF problem
	$export($export.S + $export.F * (!!$fromCodePoint && $fromCodePoint.length != 1), 'String', {
	  // 21.1.2.2 String.fromCodePoint(...codePoints)
	  fromCodePoint: function fromCodePoint(x) { // eslint-disable-line no-unused-vars
	    var res = [];
	    var aLen = arguments.length;
	    var i = 0;
	    var code;
	    while (aLen > i) {
	      code = +arguments[i++];
	      if (toAbsoluteIndex(code, 0x10ffff) !== code) throw RangeError(code + ' is not a valid code point');
	      res.push(code < 0x10000
	        ? fromCharCode(code)
	        : fromCharCode(((code -= 0x10000) >> 10) + 0xd800, code % 0x400 + 0xdc00)
	      );
	    } return res.join('');
	  }
	});


/***/ }),
/* 682 */
/***/ (function(module, exports, __webpack_require__) {

	// 21.1.3.7 String.prototype.includes(searchString, position = 0)
	'use strict';
	var $export = __webpack_require__(1);
	var context = __webpack_require__(198);
	var INCLUDES = 'includes';

	$export($export.P + $export.F * __webpack_require__(185)(INCLUDES), 'String', {
	  includes: function includes(searchString /* , position = 0 */) {
	    return !!~context(this, searchString, INCLUDES)
	      .indexOf(searchString, arguments.length > 1 ? arguments[1] : undefined);
	  }
	});


/***/ }),
/* 683 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';
	// B.2.3.9 String.prototype.italics()
	__webpack_require__(33)('italics', function (createHTML) {
	  return function italics() {
	    return createHTML(this, 'i', '', '');
	  };
	});


/***/ }),
/* 684 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';
	var $at = __webpack_require__(138)(true);

	// 21.1.3.27 String.prototype[@@iterator]()
	__webpack_require__(190)(String, 'String', function (iterated) {
	  this._t = String(iterated); // target
	  this._i = 0;                // next index
	// 21.1.5.2.1 %StringIteratorPrototype%.next()
	}, function () {
	  var O = this._t;
	  var index = this._i;
	  var point;
	  if (index >= O.length) return { value: undefined, done: true };
	  point = $at(O, index);
	  this._i += point.length;
	  return { value: point, done: false };
	});


/***/ }),
/* 685 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';
	// B.2.3.10 String.prototype.link(url)
	__webpack_require__(33)('link', function (createHTML) {
	  return function link(url) {
	    return createHTML(this, 'a', 'href', url);
	  };
	});


/***/ }),
/* 686 */
/***/ (function(module, exports, __webpack_require__) {

	var $export = __webpack_require__(1);
	var toIObject = __webpack_require__(39);
	var toLength = __webpack_require__(17);

	$export($export.S, 'String', {
	  // 21.1.2.4 String.raw(callSite, ...substitutions)
	  raw: function raw(callSite) {
	    var tpl = toIObject(callSite.raw);
	    var len = toLength(tpl.length);
	    var aLen = arguments.length;
	    var res = [];
	    var i = 0;
	    while (len > i) {
	      res.push(String(tpl[i++]));
	      if (i < aLen) res.push(String(arguments[i]));
	    } return res.join('');
	  }
	});


/***/ }),
/* 687 */
/***/ (function(module, exports, __webpack_require__) {

	var $export = __webpack_require__(1);

	$export($export.P, 'String', {
	  // 21.1.3.13 String.prototype.repeat(count)
	  repeat: __webpack_require__(199)
	});


/***/ }),
/* 688 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';
	// B.2.3.11 String.prototype.small()
	__webpack_require__(33)('small', function (createHTML) {
	  return function small() {
	    return createHTML(this, 'small', '', '');
	  };
	});


/***/ }),
/* 689 */
/***/ (function(module, exports, __webpack_require__) {

	// 21.1.3.18 String.prototype.startsWith(searchString [, position ])
	'use strict';
	var $export = __webpack_require__(1);
	var toLength = __webpack_require__(17);
	var context = __webpack_require__(198);
	var STARTS_WITH = 'startsWith';
	var $startsWith = ''[STARTS_WITH];

	$export($export.P + $export.F * __webpack_require__(185)(STARTS_WITH), 'String', {
	  startsWith: function startsWith(searchString /* , position = 0 */) {
	    var that = context(this, searchString, STARTS_WITH);
	    var index = toLength(Math.min(arguments.length > 1 ? arguments[1] : undefined, that.length));
	    var search = String(searchString);
	    return $startsWith
	      ? $startsWith.call(that, search, index)
	      : that.slice(index, index + search.length) === search;
	  }
	});


/***/ }),
/* 690 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';
	// B.2.3.12 String.prototype.strike()
	__webpack_require__(33)('strike', function (createHTML) {
	  return function strike() {
	    return createHTML(this, 'strike', '', '');
	  };
	});


/***/ }),
/* 691 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';
	// B.2.3.13 String.prototype.sub()
	__webpack_require__(33)('sub', function (createHTML) {
	  return function sub() {
	    return createHTML(this, 'sub', '', '');
	  };
	});


/***/ }),
/* 692 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';
	// B.2.3.14 String.prototype.sup()
	__webpack_require__(33)('sup', function (createHTML) {
	  return function sup() {
	    return createHTML(this, 'sup', '', '');
	  };
	});


/***/ }),
/* 693 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';
	// 21.1.3.25 String.prototype.trim()
	__webpack_require__(93)('trim', function ($trim) {
	  return function trim() {
	    return $trim(this, 3);
	  };
	});


/***/ }),
/* 694 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';
	// ECMAScript 6 symbols shim
	var global = __webpack_require__(9);
	var has = __webpack_require__(36);
	var DESCRIPTORS = __webpack_require__(18);
	var $export = __webpack_require__(1);
	var redefine = __webpack_require__(32);
	var META = __webpack_require__(64).KEY;
	var $fails = __webpack_require__(10);
	var shared = __webpack_require__(109);
	var setToStringTag = __webpack_require__(92);
	var uid = __webpack_require__(80);
	var wks = __webpack_require__(16);
	var wksExt = __webpack_require__(317);
	var wksDefine = __webpack_require__(203);
	var enumKeys = __webpack_require__(571);
	var isArray = __webpack_require__(130);
	var anObject = __webpack_require__(6);
	var isObject = __webpack_require__(12);
	var toObject = __webpack_require__(22);
	var toIObject = __webpack_require__(39);
	var toPrimitive = __webpack_require__(52);
	var createDesc = __webpack_require__(76);
	var _create = __webpack_require__(73);
	var gOPNExt = __webpack_require__(306);
	var $GOPD = __webpack_require__(37);
	var $GOPS = __webpack_require__(134);
	var $DP = __webpack_require__(20);
	var $keys = __webpack_require__(75);
	var gOPD = $GOPD.f;
	var dP = $DP.f;
	var gOPN = gOPNExt.f;
	var $Symbol = global.Symbol;
	var $JSON = global.JSON;
	var _stringify = $JSON && $JSON.stringify;
	var PROTOTYPE = 'prototype';
	var HIDDEN = wks('_hidden');
	var TO_PRIMITIVE = wks('toPrimitive');
	var isEnum = {}.propertyIsEnumerable;
	var SymbolRegistry = shared('symbol-registry');
	var AllSymbols = shared('symbols');
	var OPSymbols = shared('op-symbols');
	var ObjectProto = Object[PROTOTYPE];
	var USE_NATIVE = typeof $Symbol == 'function' && !!$GOPS.f;
	var QObject = global.QObject;
	// Don't use setters in Qt Script, https://github.com/zloirock/core-js/issues/173
	var setter = !QObject || !QObject[PROTOTYPE] || !QObject[PROTOTYPE].findChild;

	// fallback for old Android, https://code.google.com/p/v8/issues/detail?id=687
	var setSymbolDesc = DESCRIPTORS && $fails(function () {
	  return _create(dP({}, 'a', {
	    get: function () { return dP(this, 'a', { value: 7 }).a; }
	  })).a != 7;
	}) ? function (it, key, D) {
	  var protoDesc = gOPD(ObjectProto, key);
	  if (protoDesc) delete ObjectProto[key];
	  dP(it, key, D);
	  if (protoDesc && it !== ObjectProto) dP(ObjectProto, key, protoDesc);
	} : dP;

	var wrap = function (tag) {
	  var sym = AllSymbols[tag] = _create($Symbol[PROTOTYPE]);
	  sym._k = tag;
	  return sym;
	};

	var isSymbol = USE_NATIVE && typeof $Symbol.iterator == 'symbol' ? function (it) {
	  return typeof it == 'symbol';
	} : function (it) {
	  return it instanceof $Symbol;
	};

	var $defineProperty = function defineProperty(it, key, D) {
	  if (it === ObjectProto) $defineProperty(OPSymbols, key, D);
	  anObject(it);
	  key = toPrimitive(key, true);
	  anObject(D);
	  if (has(AllSymbols, key)) {
	    if (!D.enumerable) {
	      if (!has(it, HIDDEN)) dP(it, HIDDEN, createDesc(1, {}));
	      it[HIDDEN][key] = true;
	    } else {
	      if (has(it, HIDDEN) && it[HIDDEN][key]) it[HIDDEN][key] = false;
	      D = _create(D, { enumerable: createDesc(0, false) });
	    } return setSymbolDesc(it, key, D);
	  } return dP(it, key, D);
	};
	var $defineProperties = function defineProperties(it, P) {
	  anObject(it);
	  var keys = enumKeys(P = toIObject(P));
	  var i = 0;
	  var l = keys.length;
	  var key;
	  while (l > i) $defineProperty(it, key = keys[i++], P[key]);
	  return it;
	};
	var $create = function create(it, P) {
	  return P === undefined ? _create(it) : $defineProperties(_create(it), P);
	};
	var $propertyIsEnumerable = function propertyIsEnumerable(key) {
	  var E = isEnum.call(this, key = toPrimitive(key, true));
	  if (this === ObjectProto && has(AllSymbols, key) && !has(OPSymbols, key)) return false;
	  return E || !has(this, key) || !has(AllSymbols, key) || has(this, HIDDEN) && this[HIDDEN][key] ? E : true;
	};
	var $getOwnPropertyDescriptor = function getOwnPropertyDescriptor(it, key) {
	  it = toIObject(it);
	  key = toPrimitive(key, true);
	  if (it === ObjectProto && has(AllSymbols, key) && !has(OPSymbols, key)) return;
	  var D = gOPD(it, key);
	  if (D && has(AllSymbols, key) && !(has(it, HIDDEN) && it[HIDDEN][key])) D.enumerable = true;
	  return D;
	};
	var $getOwnPropertyNames = function getOwnPropertyNames(it) {
	  var names = gOPN(toIObject(it));
	  var result = [];
	  var i = 0;
	  var key;
	  while (names.length > i) {
	    if (!has(AllSymbols, key = names[i++]) && key != HIDDEN && key != META) result.push(key);
	  } return result;
	};
	var $getOwnPropertySymbols = function getOwnPropertySymbols(it) {
	  var IS_OP = it === ObjectProto;
	  var names = gOPN(IS_OP ? OPSymbols : toIObject(it));
	  var result = [];
	  var i = 0;
	  var key;
	  while (names.length > i) {
	    if (has(AllSymbols, key = names[i++]) && (IS_OP ? has(ObjectProto, key) : true)) result.push(AllSymbols[key]);
	  } return result;
	};

	// 19.4.1.1 Symbol([description])
	if (!USE_NATIVE) {
	  $Symbol = function Symbol() {
	    if (this instanceof $Symbol) throw TypeError('Symbol is not a constructor!');
	    var tag = uid(arguments.length > 0 ? arguments[0] : undefined);
	    var $set = function (value) {
	      if (this === ObjectProto) $set.call(OPSymbols, value);
	      if (has(this, HIDDEN) && has(this[HIDDEN], tag)) this[HIDDEN][tag] = false;
	      setSymbolDesc(this, tag, createDesc(1, value));
	    };
	    if (DESCRIPTORS && setter) setSymbolDesc(ObjectProto, tag, { configurable: true, set: $set });
	    return wrap(tag);
	  };
	  redefine($Symbol[PROTOTYPE], 'toString', function toString() {
	    return this._k;
	  });

	  $GOPD.f = $getOwnPropertyDescriptor;
	  $DP.f = $defineProperty;
	  __webpack_require__(74).f = gOPNExt.f = $getOwnPropertyNames;
	  __webpack_require__(108).f = $propertyIsEnumerable;
	  $GOPS.f = $getOwnPropertySymbols;

	  if (DESCRIPTORS && !__webpack_require__(63)) {
	    redefine(ObjectProto, 'propertyIsEnumerable', $propertyIsEnumerable, true);
	  }

	  wksExt.f = function (name) {
	    return wrap(wks(name));
	  };
	}

	$export($export.G + $export.W + $export.F * !USE_NATIVE, { Symbol: $Symbol });

	for (var es6Symbols = (
	  // 19.4.2.2, 19.4.2.3, 19.4.2.4, 19.4.2.6, 19.4.2.8, 19.4.2.9, 19.4.2.10, 19.4.2.11, 19.4.2.12, 19.4.2.13, 19.4.2.14
	  'hasInstance,isConcatSpreadable,iterator,match,replace,search,species,split,toPrimitive,toStringTag,unscopables'
	).split(','), j = 0; es6Symbols.length > j;)wks(es6Symbols[j++]);

	for (var wellKnownSymbols = $keys(wks.store), k = 0; wellKnownSymbols.length > k;) wksDefine(wellKnownSymbols[k++]);

	$export($export.S + $export.F * !USE_NATIVE, 'Symbol', {
	  // 19.4.2.1 Symbol.for(key)
	  'for': function (key) {
	    return has(SymbolRegistry, key += '')
	      ? SymbolRegistry[key]
	      : SymbolRegistry[key] = $Symbol(key);
	  },
	  // 19.4.2.5 Symbol.keyFor(sym)
	  keyFor: function keyFor(sym) {
	    if (!isSymbol(sym)) throw TypeError(sym + ' is not a symbol!');
	    for (var key in SymbolRegistry) if (SymbolRegistry[key] === sym) return key;
	  },
	  useSetter: function () { setter = true; },
	  useSimple: function () { setter = false; }
	});

	$export($export.S + $export.F * !USE_NATIVE, 'Object', {
	  // 19.1.2.2 Object.create(O [, Properties])
	  create: $create,
	  // 19.1.2.4 Object.defineProperty(O, P, Attributes)
	  defineProperty: $defineProperty,
	  // 19.1.2.3 Object.defineProperties(O, Properties)
	  defineProperties: $defineProperties,
	  // 19.1.2.6 Object.getOwnPropertyDescriptor(O, P)
	  getOwnPropertyDescriptor: $getOwnPropertyDescriptor,
	  // 19.1.2.7 Object.getOwnPropertyNames(O)
	  getOwnPropertyNames: $getOwnPropertyNames,
	  // 19.1.2.8 Object.getOwnPropertySymbols(O)
	  getOwnPropertySymbols: $getOwnPropertySymbols
	});

	// Chrome 38 and 39 `Object.getOwnPropertySymbols` fails on primitives
	// https://bugs.chromium.org/p/v8/issues/detail?id=3443
	var FAILS_ON_PRIMITIVES = $fails(function () { $GOPS.f(1); });

	$export($export.S + $export.F * FAILS_ON_PRIMITIVES, 'Object', {
	  getOwnPropertySymbols: function getOwnPropertySymbols(it) {
	    return $GOPS.f(toObject(it));
	  }
	});

	// 24.3.2 JSON.stringify(value [, replacer [, space]])
	$JSON && $export($export.S + $export.F * (!USE_NATIVE || $fails(function () {
	  var S = $Symbol();
	  // MS Edge converts symbol values to JSON as {}
	  // WebKit converts symbol values to JSON as null
	  // V8 throws on boxed symbols
	  return _stringify([S]) != '[null]' || _stringify({ a: S }) != '{}' || _stringify(Object(S)) != '{}';
	})), 'JSON', {
	  stringify: function stringify(it) {
	    var args = [it];
	    var i = 1;
	    var replacer, $replacer;
	    while (arguments.length > i) args.push(arguments[i++]);
	    $replacer = replacer = args[1];
	    if (!isObject(replacer) && it === undefined || isSymbol(it)) return; // IE8 returns string on undefined
	    if (!isArray(replacer)) replacer = function (key, value) {
	      if (typeof $replacer == 'function') value = $replacer.call(this, key, value);
	      if (!isSymbol(value)) return value;
	    };
	    args[1] = replacer;
	    return _stringify.apply($JSON, args);
	  }
	});

	// 19.4.3.4 Symbol.prototype[@@toPrimitive](hint)
	$Symbol[PROTOTYPE][TO_PRIMITIVE] || __webpack_require__(31)($Symbol[PROTOTYPE], TO_PRIMITIVE, $Symbol[PROTOTYPE].valueOf);
	// 19.4.3.5 Symbol.prototype[@@toStringTag]
	setToStringTag($Symbol, 'Symbol');
	// 20.2.1.9 Math[@@toStringTag]
	setToStringTag(Math, 'Math', true);
	// 24.3.3 JSON[@@toStringTag]
	setToStringTag(global.JSON, 'JSON', true);


/***/ }),
/* 695 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';
	var $export = __webpack_require__(1);
	var $typed = __webpack_require__(139);
	var buffer = __webpack_require__(202);
	var anObject = __webpack_require__(6);
	var toAbsoluteIndex = __webpack_require__(79);
	var toLength = __webpack_require__(17);
	var isObject = __webpack_require__(12);
	var ArrayBuffer = __webpack_require__(9).ArrayBuffer;
	var speciesConstructor = __webpack_require__(110);
	var $ArrayBuffer = buffer.ArrayBuffer;
	var $DataView = buffer.DataView;
	var $isView = $typed.ABV && ArrayBuffer.isView;
	var $slice = $ArrayBuffer.prototype.slice;
	var VIEW = $typed.VIEW;
	var ARRAY_BUFFER = 'ArrayBuffer';

	$export($export.G + $export.W + $export.F * (ArrayBuffer !== $ArrayBuffer), { ArrayBuffer: $ArrayBuffer });

	$export($export.S + $export.F * !$typed.CONSTR, ARRAY_BUFFER, {
	  // 24.1.3.1 ArrayBuffer.isView(arg)
	  isView: function isView(it) {
	    return $isView && $isView(it) || isObject(it) && VIEW in it;
	  }
	});

	$export($export.P + $export.U + $export.F * __webpack_require__(10)(function () {
	  return !new $ArrayBuffer(2).slice(1, undefined).byteLength;
	}), ARRAY_BUFFER, {
	  // 24.1.4.3 ArrayBuffer.prototype.slice(start, end)
	  slice: function slice(start, end) {
	    if ($slice !== undefined && end === undefined) return $slice.call(anObject(this), start); // FF fix
	    var len = anObject(this).byteLength;
	    var first = toAbsoluteIndex(start, len);
	    var fin = toAbsoluteIndex(end === undefined ? len : end, len);
	    var result = new (speciesConstructor(this, $ArrayBuffer))(toLength(fin - first));
	    var viewS = new $DataView(this);
	    var viewT = new $DataView(result);
	    var index = 0;
	    while (first < fin) {
	      viewT.setUint8(index++, viewS.getUint8(first++));
	    } return result;
	  }
	});

	__webpack_require__(78)(ARRAY_BUFFER);


/***/ }),
/* 696 */
/***/ (function(module, exports, __webpack_require__) {

	var $export = __webpack_require__(1);
	$export($export.G + $export.W + $export.F * !__webpack_require__(139).ABV, {
	  DataView: __webpack_require__(202).DataView
	});


/***/ }),
/* 697 */
/***/ (function(module, exports, __webpack_require__) {

	__webpack_require__(59)('Float32', 4, function (init) {
	  return function Float32Array(data, byteOffset, length) {
	    return init(this, data, byteOffset, length);
	  };
	});


/***/ }),
/* 698 */
/***/ (function(module, exports, __webpack_require__) {

	__webpack_require__(59)('Float64', 8, function (init) {
	  return function Float64Array(data, byteOffset, length) {
	    return init(this, data, byteOffset, length);
	  };
	});


/***/ }),
/* 699 */
/***/ (function(module, exports, __webpack_require__) {

	__webpack_require__(59)('Int16', 2, function (init) {
	  return function Int16Array(data, byteOffset, length) {
	    return init(this, data, byteOffset, length);
	  };
	});


/***/ }),
/* 700 */
/***/ (function(module, exports, __webpack_require__) {

	__webpack_require__(59)('Int32', 4, function (init) {
	  return function Int32Array(data, byteOffset, length) {
	    return init(this, data, byteOffset, length);
	  };
	});


/***/ }),
/* 701 */
/***/ (function(module, exports, __webpack_require__) {

	__webpack_require__(59)('Int8', 1, function (init) {
	  return function Int8Array(data, byteOffset, length) {
	    return init(this, data, byteOffset, length);
	  };
	});


/***/ }),
/* 702 */
/***/ (function(module, exports, __webpack_require__) {

	__webpack_require__(59)('Uint16', 2, function (init) {
	  return function Uint16Array(data, byteOffset, length) {
	    return init(this, data, byteOffset, length);
	  };
	});


/***/ }),
/* 703 */
/***/ (function(module, exports, __webpack_require__) {

	__webpack_require__(59)('Uint32', 4, function (init) {
	  return function Uint32Array(data, byteOffset, length) {
	    return init(this, data, byteOffset, length);
	  };
	});


/***/ }),
/* 704 */
/***/ (function(module, exports, __webpack_require__) {

	__webpack_require__(59)('Uint8', 1, function (init) {
	  return function Uint8Array(data, byteOffset, length) {
	    return init(this, data, byteOffset, length);
	  };
	});


/***/ }),
/* 705 */
/***/ (function(module, exports, __webpack_require__) {

	__webpack_require__(59)('Uint8', 1, function (init) {
	  return function Uint8ClampedArray(data, byteOffset, length) {
	    return init(this, data, byteOffset, length);
	  };
	}, true);


/***/ }),
/* 706 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';
	var weak = __webpack_require__(294);
	var validate = __webpack_require__(81);
	var WEAK_SET = 'WeakSet';

	// 23.4 WeakSet Objects
	__webpack_require__(128)(WEAK_SET, function (get) {
	  return function WeakSet() { return get(this, arguments.length > 0 ? arguments[0] : undefined); };
	}, {
	  // 23.4.3.1 WeakSet.prototype.add(value)
	  add: function add(value) {
	    return weak.def(validate(this, WEAK_SET), value, true);
	  }
	}, weak, false, true);


/***/ }),
/* 707 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';
	// https://tc39.github.io/proposal-flatMap/#sec-Array.prototype.flatMap
	var $export = __webpack_require__(1);
	var flattenIntoArray = __webpack_require__(295);
	var toObject = __webpack_require__(22);
	var toLength = __webpack_require__(17);
	var aFunction = __webpack_require__(28);
	var arraySpeciesCreate = __webpack_require__(181);

	$export($export.P, 'Array', {
	  flatMap: function flatMap(callbackfn /* , thisArg */) {
	    var O = toObject(this);
	    var sourceLen, A;
	    aFunction(callbackfn);
	    sourceLen = toLength(O.length);
	    A = arraySpeciesCreate(O, 0);
	    flattenIntoArray(A, O, O, sourceLen, 0, 1, callbackfn, arguments[1]);
	    return A;
	  }
	});

	__webpack_require__(62)('flatMap');


/***/ }),
/* 708 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';
	// https://tc39.github.io/proposal-flatMap/#sec-Array.prototype.flatten
	var $export = __webpack_require__(1);
	var flattenIntoArray = __webpack_require__(295);
	var toObject = __webpack_require__(22);
	var toLength = __webpack_require__(17);
	var toInteger = __webpack_require__(46);
	var arraySpeciesCreate = __webpack_require__(181);

	$export($export.P, 'Array', {
	  flatten: function flatten(/* depthArg = 1 */) {
	    var depthArg = arguments[0];
	    var O = toObject(this);
	    var sourceLen = toLength(O.length);
	    var A = arraySpeciesCreate(O, 0);
	    flattenIntoArray(A, O, O, sourceLen, 0, depthArg === undefined ? 1 : toInteger(depthArg));
	    return A;
	  }
	});

	__webpack_require__(62)('flatten');


/***/ }),
/* 709 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';
	// https://github.com/tc39/Array.prototype.includes
	var $export = __webpack_require__(1);
	var $includes = __webpack_require__(127)(true);

	$export($export.P, 'Array', {
	  includes: function includes(el /* , fromIndex = 0 */) {
	    return $includes(this, el, arguments.length > 1 ? arguments[1] : undefined);
	  }
	});

	__webpack_require__(62)('includes');


/***/ }),
/* 710 */
/***/ (function(module, exports, __webpack_require__) {

	// https://github.com/rwaldron/tc39-notes/blob/master/es6/2014-09/sept-25.md#510-globalasap-for-enqueuing-a-microtask
	var $export = __webpack_require__(1);
	var microtask = __webpack_require__(193)();
	var process = __webpack_require__(9).process;
	var isNode = __webpack_require__(42)(process) == 'process';

	$export($export.G, {
	  asap: function asap(fn) {
	    var domain = isNode && process.domain;
	    microtask(domain ? domain.bind(fn) : fn);
	  }
	});


/***/ }),
/* 711 */
/***/ (function(module, exports, __webpack_require__) {

	// https://github.com/ljharb/proposal-is-error
	var $export = __webpack_require__(1);
	var cof = __webpack_require__(42);

	$export($export.S, 'Error', {
	  isError: function isError(it) {
	    return cof(it) === 'Error';
	  }
	});


/***/ }),
/* 712 */
/***/ (function(module, exports, __webpack_require__) {

	// https://github.com/tc39/proposal-global
	var $export = __webpack_require__(1);

	$export($export.G, { global: __webpack_require__(9) });


/***/ }),
/* 713 */
/***/ (function(module, exports, __webpack_require__) {

	// https://tc39.github.io/proposal-setmap-offrom/#sec-map.from
	__webpack_require__(136)('Map');


/***/ }),
/* 714 */
/***/ (function(module, exports, __webpack_require__) {

	// https://tc39.github.io/proposal-setmap-offrom/#sec-map.of
	__webpack_require__(137)('Map');


/***/ }),
/* 715 */
/***/ (function(module, exports, __webpack_require__) {

	// https://github.com/DavidBruant/Map-Set.prototype.toJSON
	var $export = __webpack_require__(1);

	$export($export.P + $export.R, 'Map', { toJSON: __webpack_require__(293)('Map') });


/***/ }),
/* 716 */
/***/ (function(module, exports, __webpack_require__) {

	// https://rwaldron.github.io/proposal-math-extensions/
	var $export = __webpack_require__(1);

	$export($export.S, 'Math', {
	  clamp: function clamp(x, lower, upper) {
	    return Math.min(upper, Math.max(lower, x));
	  }
	});


/***/ }),
/* 717 */
/***/ (function(module, exports, __webpack_require__) {

	// https://rwaldron.github.io/proposal-math-extensions/
	var $export = __webpack_require__(1);

	$export($export.S, 'Math', { DEG_PER_RAD: Math.PI / 180 });


/***/ }),
/* 718 */
/***/ (function(module, exports, __webpack_require__) {

	// https://rwaldron.github.io/proposal-math-extensions/
	var $export = __webpack_require__(1);
	var RAD_PER_DEG = 180 / Math.PI;

	$export($export.S, 'Math', {
	  degrees: function degrees(radians) {
	    return radians * RAD_PER_DEG;
	  }
	});


/***/ }),
/* 719 */
/***/ (function(module, exports, __webpack_require__) {

	// https://rwaldron.github.io/proposal-math-extensions/
	var $export = __webpack_require__(1);
	var scale = __webpack_require__(303);
	var fround = __webpack_require__(301);

	$export($export.S, 'Math', {
	  fscale: function fscale(x, inLow, inHigh, outLow, outHigh) {
	    return fround(scale(x, inLow, inHigh, outLow, outHigh));
	  }
	});


/***/ }),
/* 720 */
/***/ (function(module, exports, __webpack_require__) {

	// https://gist.github.com/BrendanEich/4294d5c212a6d2254703
	var $export = __webpack_require__(1);

	$export($export.S, 'Math', {
	  iaddh: function iaddh(x0, x1, y0, y1) {
	    var $x0 = x0 >>> 0;
	    var $x1 = x1 >>> 0;
	    var $y0 = y0 >>> 0;
	    return $x1 + (y1 >>> 0) + (($x0 & $y0 | ($x0 | $y0) & ~($x0 + $y0 >>> 0)) >>> 31) | 0;
	  }
	});


/***/ }),
/* 721 */
/***/ (function(module, exports, __webpack_require__) {

	// https://gist.github.com/BrendanEich/4294d5c212a6d2254703
	var $export = __webpack_require__(1);

	$export($export.S, 'Math', {
	  imulh: function imulh(u, v) {
	    var UINT16 = 0xffff;
	    var $u = +u;
	    var $v = +v;
	    var u0 = $u & UINT16;
	    var v0 = $v & UINT16;
	    var u1 = $u >> 16;
	    var v1 = $v >> 16;
	    var t = (u1 * v0 >>> 0) + (u0 * v0 >>> 16);
	    return u1 * v1 + (t >> 16) + ((u0 * v1 >>> 0) + (t & UINT16) >> 16);
	  }
	});


/***/ }),
/* 722 */
/***/ (function(module, exports, __webpack_require__) {

	// https://gist.github.com/BrendanEich/4294d5c212a6d2254703
	var $export = __webpack_require__(1);

	$export($export.S, 'Math', {
	  isubh: function isubh(x0, x1, y0, y1) {
	    var $x0 = x0 >>> 0;
	    var $x1 = x1 >>> 0;
	    var $y0 = y0 >>> 0;
	    return $x1 - (y1 >>> 0) - ((~$x0 & $y0 | ~($x0 ^ $y0) & $x0 - $y0 >>> 0) >>> 31) | 0;
	  }
	});


/***/ }),
/* 723 */
/***/ (function(module, exports, __webpack_require__) {

	// https://rwaldron.github.io/proposal-math-extensions/
	var $export = __webpack_require__(1);

	$export($export.S, 'Math', { RAD_PER_DEG: 180 / Math.PI });


/***/ }),
/* 724 */
/***/ (function(module, exports, __webpack_require__) {

	// https://rwaldron.github.io/proposal-math-extensions/
	var $export = __webpack_require__(1);
	var DEG_PER_RAD = Math.PI / 180;

	$export($export.S, 'Math', {
	  radians: function radians(degrees) {
	    return degrees * DEG_PER_RAD;
	  }
	});


/***/ }),
/* 725 */
/***/ (function(module, exports, __webpack_require__) {

	// https://rwaldron.github.io/proposal-math-extensions/
	var $export = __webpack_require__(1);

	$export($export.S, 'Math', { scale: __webpack_require__(303) });


/***/ }),
/* 726 */
/***/ (function(module, exports, __webpack_require__) {

	// http://jfbastien.github.io/papers/Math.signbit.html
	var $export = __webpack_require__(1);

	$export($export.S, 'Math', { signbit: function signbit(x) {
	  // eslint-disable-next-line no-self-compare
	  return (x = +x) != x ? x : x == 0 ? 1 / x == Infinity : x > 0;
	} });


/***/ }),
/* 727 */
/***/ (function(module, exports, __webpack_require__) {

	// https://gist.github.com/BrendanEich/4294d5c212a6d2254703
	var $export = __webpack_require__(1);

	$export($export.S, 'Math', {
	  umulh: function umulh(u, v) {
	    var UINT16 = 0xffff;
	    var $u = +u;
	    var $v = +v;
	    var u0 = $u & UINT16;
	    var v0 = $v & UINT16;
	    var u1 = $u >>> 16;
	    var v1 = $v >>> 16;
	    var t = (u1 * v0 >>> 0) + (u0 * v0 >>> 16);
	    return u1 * v1 + (t >>> 16) + ((u0 * v1 >>> 0) + (t & UINT16) >>> 16);
	  }
	});


/***/ }),
/* 728 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';
	var $export = __webpack_require__(1);
	var toObject = __webpack_require__(22);
	var aFunction = __webpack_require__(28);
	var $defineProperty = __webpack_require__(20);

	// B.2.2.2 Object.prototype.__defineGetter__(P, getter)
	__webpack_require__(18) && $export($export.P + __webpack_require__(133), 'Object', {
	  __defineGetter__: function __defineGetter__(P, getter) {
	    $defineProperty.f(toObject(this), P, { get: aFunction(getter), enumerable: true, configurable: true });
	  }
	});


/***/ }),
/* 729 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';
	var $export = __webpack_require__(1);
	var toObject = __webpack_require__(22);
	var aFunction = __webpack_require__(28);
	var $defineProperty = __webpack_require__(20);

	// B.2.2.3 Object.prototype.__defineSetter__(P, setter)
	__webpack_require__(18) && $export($export.P + __webpack_require__(133), 'Object', {
	  __defineSetter__: function __defineSetter__(P, setter) {
	    $defineProperty.f(toObject(this), P, { set: aFunction(setter), enumerable: true, configurable: true });
	  }
	});


/***/ }),
/* 730 */
/***/ (function(module, exports, __webpack_require__) {

	// https://github.com/tc39/proposal-object-values-entries
	var $export = __webpack_require__(1);
	var $entries = __webpack_require__(308)(true);

	$export($export.S, 'Object', {
	  entries: function entries(it) {
	    return $entries(it);
	  }
	});


/***/ }),
/* 731 */
/***/ (function(module, exports, __webpack_require__) {

	// https://github.com/tc39/proposal-object-getownpropertydescriptors
	var $export = __webpack_require__(1);
	var ownKeys = __webpack_require__(309);
	var toIObject = __webpack_require__(39);
	var gOPD = __webpack_require__(37);
	var createProperty = __webpack_require__(182);

	$export($export.S, 'Object', {
	  getOwnPropertyDescriptors: function getOwnPropertyDescriptors(object) {
	    var O = toIObject(object);
	    var getDesc = gOPD.f;
	    var keys = ownKeys(O);
	    var result = {};
	    var i = 0;
	    var key, desc;
	    while (keys.length > i) {
	      desc = getDesc(O, key = keys[i++]);
	      if (desc !== undefined) createProperty(result, key, desc);
	    }
	    return result;
	  }
	});


/***/ }),
/* 732 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';
	var $export = __webpack_require__(1);
	var toObject = __webpack_require__(22);
	var toPrimitive = __webpack_require__(52);
	var getPrototypeOf = __webpack_require__(38);
	var getOwnPropertyDescriptor = __webpack_require__(37).f;

	// B.2.2.4 Object.prototype.__lookupGetter__(P)
	__webpack_require__(18) && $export($export.P + __webpack_require__(133), 'Object', {
	  __lookupGetter__: function __lookupGetter__(P) {
	    var O = toObject(this);
	    var K = toPrimitive(P, true);
	    var D;
	    do {
	      if (D = getOwnPropertyDescriptor(O, K)) return D.get;
	    } while (O = getPrototypeOf(O));
	  }
	});


/***/ }),
/* 733 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';
	var $export = __webpack_require__(1);
	var toObject = __webpack_require__(22);
	var toPrimitive = __webpack_require__(52);
	var getPrototypeOf = __webpack_require__(38);
	var getOwnPropertyDescriptor = __webpack_require__(37).f;

	// B.2.2.5 Object.prototype.__lookupSetter__(P)
	__webpack_require__(18) && $export($export.P + __webpack_require__(133), 'Object', {
	  __lookupSetter__: function __lookupSetter__(P) {
	    var O = toObject(this);
	    var K = toPrimitive(P, true);
	    var D;
	    do {
	      if (D = getOwnPropertyDescriptor(O, K)) return D.set;
	    } while (O = getPrototypeOf(O));
	  }
	});


/***/ }),
/* 734 */
/***/ (function(module, exports, __webpack_require__) {

	// https://github.com/tc39/proposal-object-values-entries
	var $export = __webpack_require__(1);
	var $values = __webpack_require__(308)(false);

	$export($export.S, 'Object', {
	  values: function values(it) {
	    return $values(it);
	  }
	});


/***/ }),
/* 735 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';
	// https://github.com/zenparsing/es-observable
	var $export = __webpack_require__(1);
	var global = __webpack_require__(9);
	var core = __webpack_require__(43);
	var microtask = __webpack_require__(193)();
	var OBSERVABLE = __webpack_require__(16)('observable');
	var aFunction = __webpack_require__(28);
	var anObject = __webpack_require__(6);
	var anInstance = __webpack_require__(71);
	var redefineAll = __webpack_require__(77);
	var hide = __webpack_require__(31);
	var forOf = __webpack_require__(72);
	var RETURN = forOf.RETURN;

	var getMethod = function (fn) {
	  return fn == null ? undefined : aFunction(fn);
	};

	var cleanupSubscription = function (subscription) {
	  var cleanup = subscription._c;
	  if (cleanup) {
	    subscription._c = undefined;
	    cleanup();
	  }
	};

	var subscriptionClosed = function (subscription) {
	  return subscription._o === undefined;
	};

	var closeSubscription = function (subscription) {
	  if (!subscriptionClosed(subscription)) {
	    subscription._o = undefined;
	    cleanupSubscription(subscription);
	  }
	};

	var Subscription = function (observer, subscriber) {
	  anObject(observer);
	  this._c = undefined;
	  this._o = observer;
	  observer = new SubscriptionObserver(this);
	  try {
	    var cleanup = subscriber(observer);
	    var subscription = cleanup;
	    if (cleanup != null) {
	      if (typeof cleanup.unsubscribe === 'function') cleanup = function () { subscription.unsubscribe(); };
	      else aFunction(cleanup);
	      this._c = cleanup;
	    }
	  } catch (e) {
	    observer.error(e);
	    return;
	  } if (subscriptionClosed(this)) cleanupSubscription(this);
	};

	Subscription.prototype = redefineAll({}, {
	  unsubscribe: function unsubscribe() { closeSubscription(this); }
	});

	var SubscriptionObserver = function (subscription) {
	  this._s = subscription;
	};

	SubscriptionObserver.prototype = redefineAll({}, {
	  next: function next(value) {
	    var subscription = this._s;
	    if (!subscriptionClosed(subscription)) {
	      var observer = subscription._o;
	      try {
	        var m = getMethod(observer.next);
	        if (m) return m.call(observer, value);
	      } catch (e) {
	        try {
	          closeSubscription(subscription);
	        } finally {
	          throw e;
	        }
	      }
	    }
	  },
	  error: function error(value) {
	    var subscription = this._s;
	    if (subscriptionClosed(subscription)) throw value;
	    var observer = subscription._o;
	    subscription._o = undefined;
	    try {
	      var m = getMethod(observer.error);
	      if (!m) throw value;
	      value = m.call(observer, value);
	    } catch (e) {
	      try {
	        cleanupSubscription(subscription);
	      } finally {
	        throw e;
	      }
	    } cleanupSubscription(subscription);
	    return value;
	  },
	  complete: function complete(value) {
	    var subscription = this._s;
	    if (!subscriptionClosed(subscription)) {
	      var observer = subscription._o;
	      subscription._o = undefined;
	      try {
	        var m = getMethod(observer.complete);
	        value = m ? m.call(observer, value) : undefined;
	      } catch (e) {
	        try {
	          cleanupSubscription(subscription);
	        } finally {
	          throw e;
	        }
	      } cleanupSubscription(subscription);
	      return value;
	    }
	  }
	});

	var $Observable = function Observable(subscriber) {
	  anInstance(this, $Observable, 'Observable', '_f')._f = aFunction(subscriber);
	};

	redefineAll($Observable.prototype, {
	  subscribe: function subscribe(observer) {
	    return new Subscription(observer, this._f);
	  },
	  forEach: function forEach(fn) {
	    var that = this;
	    return new (core.Promise || global.Promise)(function (resolve, reject) {
	      aFunction(fn);
	      var subscription = that.subscribe({
	        next: function (value) {
	          try {
	            return fn(value);
	          } catch (e) {
	            reject(e);
	            subscription.unsubscribe();
	          }
	        },
	        error: reject,
	        complete: resolve
	      });
	    });
	  }
	});

	redefineAll($Observable, {
	  from: function from(x) {
	    var C = typeof this === 'function' ? this : $Observable;
	    var method = getMethod(anObject(x)[OBSERVABLE]);
	    if (method) {
	      var observable = anObject(method.call(x));
	      return observable.constructor === C ? observable : new C(function (observer) {
	        return observable.subscribe(observer);
	      });
	    }
	    return new C(function (observer) {
	      var done = false;
	      microtask(function () {
	        if (!done) {
	          try {
	            if (forOf(x, false, function (it) {
	              observer.next(it);
	              if (done) return RETURN;
	            }) === RETURN) return;
	          } catch (e) {
	            if (done) throw e;
	            observer.error(e);
	            return;
	          } observer.complete();
	        }
	      });
	      return function () { done = true; };
	    });
	  },
	  of: function of() {
	    for (var i = 0, l = arguments.length, items = new Array(l); i < l;) items[i] = arguments[i++];
	    return new (typeof this === 'function' ? this : $Observable)(function (observer) {
	      var done = false;
	      microtask(function () {
	        if (!done) {
	          for (var j = 0; j < items.length; ++j) {
	            observer.next(items[j]);
	            if (done) return;
	          } observer.complete();
	        }
	      });
	      return function () { done = true; };
	    });
	  }
	});

	hide($Observable.prototype, OBSERVABLE, function () { return this; });

	$export($export.G, { Observable: $Observable });

	__webpack_require__(78)('Observable');


/***/ }),
/* 736 */
/***/ (function(module, exports, __webpack_require__) {

	// https://github.com/tc39/proposal-promise-finally
	'use strict';
	var $export = __webpack_require__(1);
	var core = __webpack_require__(43);
	var global = __webpack_require__(9);
	var speciesConstructor = __webpack_require__(110);
	var promiseResolve = __webpack_require__(313);

	$export($export.P + $export.R, 'Promise', { 'finally': function (onFinally) {
	  var C = speciesConstructor(this, core.Promise || global.Promise);
	  var isFunction = typeof onFinally == 'function';
	  return this.then(
	    isFunction ? function (x) {
	      return promiseResolve(C, onFinally()).then(function () { return x; });
	    } : onFinally,
	    isFunction ? function (e) {
	      return promiseResolve(C, onFinally()).then(function () { throw e; });
	    } : onFinally
	  );
	} });


/***/ }),
/* 737 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';
	// https://github.com/tc39/proposal-promise-try
	var $export = __webpack_require__(1);
	var newPromiseCapability = __webpack_require__(194);
	var perform = __webpack_require__(312);

	$export($export.S, 'Promise', { 'try': function (callbackfn) {
	  var promiseCapability = newPromiseCapability.f(this);
	  var result = perform(callbackfn);
	  (result.e ? promiseCapability.reject : promiseCapability.resolve)(result.v);
	  return promiseCapability.promise;
	} });


/***/ }),
/* 738 */
/***/ (function(module, exports, __webpack_require__) {

	var metadata = __webpack_require__(58);
	var anObject = __webpack_require__(6);
	var toMetaKey = metadata.key;
	var ordinaryDefineOwnMetadata = metadata.set;

	metadata.exp({ defineMetadata: function defineMetadata(metadataKey, metadataValue, target, targetKey) {
	  ordinaryDefineOwnMetadata(metadataKey, metadataValue, anObject(target), toMetaKey(targetKey));
	} });


/***/ }),
/* 739 */
/***/ (function(module, exports, __webpack_require__) {

	var metadata = __webpack_require__(58);
	var anObject = __webpack_require__(6);
	var toMetaKey = metadata.key;
	var getOrCreateMetadataMap = metadata.map;
	var store = metadata.store;

	metadata.exp({ deleteMetadata: function deleteMetadata(metadataKey, target /* , targetKey */) {
	  var targetKey = arguments.length < 3 ? undefined : toMetaKey(arguments[2]);
	  var metadataMap = getOrCreateMetadataMap(anObject(target), targetKey, false);
	  if (metadataMap === undefined || !metadataMap['delete'](metadataKey)) return false;
	  if (metadataMap.size) return true;
	  var targetMetadata = store.get(target);
	  targetMetadata['delete'](targetKey);
	  return !!targetMetadata.size || store['delete'](target);
	} });


/***/ }),
/* 740 */
/***/ (function(module, exports, __webpack_require__) {

	var Set = __webpack_require__(321);
	var from = __webpack_require__(289);
	var metadata = __webpack_require__(58);
	var anObject = __webpack_require__(6);
	var getPrototypeOf = __webpack_require__(38);
	var ordinaryOwnMetadataKeys = metadata.keys;
	var toMetaKey = metadata.key;

	var ordinaryMetadataKeys = function (O, P) {
	  var oKeys = ordinaryOwnMetadataKeys(O, P);
	  var parent = getPrototypeOf(O);
	  if (parent === null) return oKeys;
	  var pKeys = ordinaryMetadataKeys(parent, P);
	  return pKeys.length ? oKeys.length ? from(new Set(oKeys.concat(pKeys))) : pKeys : oKeys;
	};

	metadata.exp({ getMetadataKeys: function getMetadataKeys(target /* , targetKey */) {
	  return ordinaryMetadataKeys(anObject(target), arguments.length < 2 ? undefined : toMetaKey(arguments[1]));
	} });


/***/ }),
/* 741 */
/***/ (function(module, exports, __webpack_require__) {

	var metadata = __webpack_require__(58);
	var anObject = __webpack_require__(6);
	var getPrototypeOf = __webpack_require__(38);
	var ordinaryHasOwnMetadata = metadata.has;
	var ordinaryGetOwnMetadata = metadata.get;
	var toMetaKey = metadata.key;

	var ordinaryGetMetadata = function (MetadataKey, O, P) {
	  var hasOwn = ordinaryHasOwnMetadata(MetadataKey, O, P);
	  if (hasOwn) return ordinaryGetOwnMetadata(MetadataKey, O, P);
	  var parent = getPrototypeOf(O);
	  return parent !== null ? ordinaryGetMetadata(MetadataKey, parent, P) : undefined;
	};

	metadata.exp({ getMetadata: function getMetadata(metadataKey, target /* , targetKey */) {
	  return ordinaryGetMetadata(metadataKey, anObject(target), arguments.length < 3 ? undefined : toMetaKey(arguments[2]));
	} });


/***/ }),
/* 742 */
/***/ (function(module, exports, __webpack_require__) {

	var metadata = __webpack_require__(58);
	var anObject = __webpack_require__(6);
	var ordinaryOwnMetadataKeys = metadata.keys;
	var toMetaKey = metadata.key;

	metadata.exp({ getOwnMetadataKeys: function getOwnMetadataKeys(target /* , targetKey */) {
	  return ordinaryOwnMetadataKeys(anObject(target), arguments.length < 2 ? undefined : toMetaKey(arguments[1]));
	} });


/***/ }),
/* 743 */
/***/ (function(module, exports, __webpack_require__) {

	var metadata = __webpack_require__(58);
	var anObject = __webpack_require__(6);
	var ordinaryGetOwnMetadata = metadata.get;
	var toMetaKey = metadata.key;

	metadata.exp({ getOwnMetadata: function getOwnMetadata(metadataKey, target /* , targetKey */) {
	  return ordinaryGetOwnMetadata(metadataKey, anObject(target)
	    , arguments.length < 3 ? undefined : toMetaKey(arguments[2]));
	} });


/***/ }),
/* 744 */
/***/ (function(module, exports, __webpack_require__) {

	var metadata = __webpack_require__(58);
	var anObject = __webpack_require__(6);
	var getPrototypeOf = __webpack_require__(38);
	var ordinaryHasOwnMetadata = metadata.has;
	var toMetaKey = metadata.key;

	var ordinaryHasMetadata = function (MetadataKey, O, P) {
	  var hasOwn = ordinaryHasOwnMetadata(MetadataKey, O, P);
	  if (hasOwn) return true;
	  var parent = getPrototypeOf(O);
	  return parent !== null ? ordinaryHasMetadata(MetadataKey, parent, P) : false;
	};

	metadata.exp({ hasMetadata: function hasMetadata(metadataKey, target /* , targetKey */) {
	  return ordinaryHasMetadata(metadataKey, anObject(target), arguments.length < 3 ? undefined : toMetaKey(arguments[2]));
	} });


/***/ }),
/* 745 */
/***/ (function(module, exports, __webpack_require__) {

	var metadata = __webpack_require__(58);
	var anObject = __webpack_require__(6);
	var ordinaryHasOwnMetadata = metadata.has;
	var toMetaKey = metadata.key;

	metadata.exp({ hasOwnMetadata: function hasOwnMetadata(metadataKey, target /* , targetKey */) {
	  return ordinaryHasOwnMetadata(metadataKey, anObject(target)
	    , arguments.length < 3 ? undefined : toMetaKey(arguments[2]));
	} });


/***/ }),
/* 746 */
/***/ (function(module, exports, __webpack_require__) {

	var $metadata = __webpack_require__(58);
	var anObject = __webpack_require__(6);
	var aFunction = __webpack_require__(28);
	var toMetaKey = $metadata.key;
	var ordinaryDefineOwnMetadata = $metadata.set;

	$metadata.exp({ metadata: function metadata(metadataKey, metadataValue) {
	  return function decorator(target, targetKey) {
	    ordinaryDefineOwnMetadata(
	      metadataKey, metadataValue,
	      (targetKey !== undefined ? anObject : aFunction)(target),
	      toMetaKey(targetKey)
	    );
	  };
	} });


/***/ }),
/* 747 */
/***/ (function(module, exports, __webpack_require__) {

	// https://tc39.github.io/proposal-setmap-offrom/#sec-set.from
	__webpack_require__(136)('Set');


/***/ }),
/* 748 */
/***/ (function(module, exports, __webpack_require__) {

	// https://tc39.github.io/proposal-setmap-offrom/#sec-set.of
	__webpack_require__(137)('Set');


/***/ }),
/* 749 */
/***/ (function(module, exports, __webpack_require__) {

	// https://github.com/DavidBruant/Map-Set.prototype.toJSON
	var $export = __webpack_require__(1);

	$export($export.P + $export.R, 'Set', { toJSON: __webpack_require__(293)('Set') });


/***/ }),
/* 750 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';
	// https://github.com/mathiasbynens/String.prototype.at
	var $export = __webpack_require__(1);
	var $at = __webpack_require__(138)(true);
	var $fails = __webpack_require__(10);

	var FORCED = $fails(function () {
	  return '𠮷'.at(0) !== '𠮷';
	});

	$export($export.P + $export.F * FORCED, 'String', {
	  at: function at(pos) {
	    return $at(this, pos);
	  }
	});


/***/ }),
/* 751 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';
	// https://tc39.github.io/String.prototype.matchAll/
	var $export = __webpack_require__(1);
	var defined = __webpack_require__(50);
	var toLength = __webpack_require__(17);
	var isRegExp = __webpack_require__(131);
	var getFlags = __webpack_require__(106);
	var RegExpProto = RegExp.prototype;

	var $RegExpStringIterator = function (regexp, string) {
	  this._r = regexp;
	  this._s = string;
	};

	__webpack_require__(189)($RegExpStringIterator, 'RegExp String', function next() {
	  var match = this._r.exec(this._s);
	  return { value: match, done: match === null };
	});

	$export($export.P, 'String', {
	  matchAll: function matchAll(regexp) {
	    defined(this);
	    if (!isRegExp(regexp)) throw TypeError(regexp + ' is not a regexp!');
	    var S = String(this);
	    var flags = 'flags' in RegExpProto ? String(regexp.flags) : getFlags.call(regexp);
	    var rx = new RegExp(regexp.source, ~flags.indexOf('g') ? flags : 'g' + flags);
	    rx.lastIndex = toLength(regexp.lastIndex);
	    return new $RegExpStringIterator(rx, S);
	  }
	});


/***/ }),
/* 752 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';
	// https://github.com/tc39/proposal-string-pad-start-end
	var $export = __webpack_require__(1);
	var $pad = __webpack_require__(315);
	var userAgent = __webpack_require__(140);

	// https://github.com/zloirock/core-js/issues/280
	var WEBKIT_BUG = /Version\/10\.\d+(\.\d+)?( Mobile\/\w+)? Safari\//.test(userAgent);

	$export($export.P + $export.F * WEBKIT_BUG, 'String', {
	  padEnd: function padEnd(maxLength /* , fillString = ' ' */) {
	    return $pad(this, maxLength, arguments.length > 1 ? arguments[1] : undefined, false);
	  }
	});


/***/ }),
/* 753 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';
	// https://github.com/tc39/proposal-string-pad-start-end
	var $export = __webpack_require__(1);
	var $pad = __webpack_require__(315);
	var userAgent = __webpack_require__(140);

	// https://github.com/zloirock/core-js/issues/280
	var WEBKIT_BUG = /Version\/10\.\d+(\.\d+)?( Mobile\/\w+)? Safari\//.test(userAgent);

	$export($export.P + $export.F * WEBKIT_BUG, 'String', {
	  padStart: function padStart(maxLength /* , fillString = ' ' */) {
	    return $pad(this, maxLength, arguments.length > 1 ? arguments[1] : undefined, true);
	  }
	});


/***/ }),
/* 754 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';
	// https://github.com/sebmarkbage/ecmascript-string-left-right-trim
	__webpack_require__(93)('trimLeft', function ($trim) {
	  return function trimLeft() {
	    return $trim(this, 1);
	  };
	}, 'trimStart');


/***/ }),
/* 755 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';
	// https://github.com/sebmarkbage/ecmascript-string-left-right-trim
	__webpack_require__(93)('trimRight', function ($trim) {
	  return function trimRight() {
	    return $trim(this, 2);
	  };
	}, 'trimEnd');


/***/ }),
/* 756 */
/***/ (function(module, exports, __webpack_require__) {

	__webpack_require__(203)('asyncIterator');


/***/ }),
/* 757 */
/***/ (function(module, exports, __webpack_require__) {

	__webpack_require__(203)('observable');


/***/ }),
/* 758 */
/***/ (function(module, exports, __webpack_require__) {

	// https://github.com/tc39/proposal-global
	var $export = __webpack_require__(1);

	$export($export.S, 'System', { global: __webpack_require__(9) });


/***/ }),
/* 759 */
/***/ (function(module, exports, __webpack_require__) {

	// https://tc39.github.io/proposal-setmap-offrom/#sec-weakmap.from
	__webpack_require__(136)('WeakMap');


/***/ }),
/* 760 */
/***/ (function(module, exports, __webpack_require__) {

	// https://tc39.github.io/proposal-setmap-offrom/#sec-weakmap.of
	__webpack_require__(137)('WeakMap');


/***/ }),
/* 761 */
/***/ (function(module, exports, __webpack_require__) {

	// https://tc39.github.io/proposal-setmap-offrom/#sec-weakset.from
	__webpack_require__(136)('WeakSet');


/***/ }),
/* 762 */
/***/ (function(module, exports, __webpack_require__) {

	// https://tc39.github.io/proposal-setmap-offrom/#sec-weakset.of
	__webpack_require__(137)('WeakSet');


/***/ }),
/* 763 */
/***/ (function(module, exports, __webpack_require__) {

	var $iterators = __webpack_require__(205);
	var getKeys = __webpack_require__(75);
	var redefine = __webpack_require__(32);
	var global = __webpack_require__(9);
	var hide = __webpack_require__(31);
	var Iterators = __webpack_require__(91);
	var wks = __webpack_require__(16);
	var ITERATOR = wks('iterator');
	var TO_STRING_TAG = wks('toStringTag');
	var ArrayValues = Iterators.Array;

	var DOMIterables = {
	  CSSRuleList: true, // TODO: Not spec compliant, should be false.
	  CSSStyleDeclaration: false,
	  CSSValueList: false,
	  ClientRectList: false,
	  DOMRectList: false,
	  DOMStringList: false,
	  DOMTokenList: true,
	  DataTransferItemList: false,
	  FileList: false,
	  HTMLAllCollection: false,
	  HTMLCollection: false,
	  HTMLFormElement: false,
	  HTMLSelectElement: false,
	  MediaList: true, // TODO: Not spec compliant, should be false.
	  MimeTypeArray: false,
	  NamedNodeMap: false,
	  NodeList: true,
	  PaintRequestList: false,
	  Plugin: false,
	  PluginArray: false,
	  SVGLengthList: false,
	  SVGNumberList: false,
	  SVGPathSegList: false,
	  SVGPointList: false,
	  SVGStringList: false,
	  SVGTransformList: false,
	  SourceBufferList: false,
	  StyleSheetList: true, // TODO: Not spec compliant, should be false.
	  TextTrackCueList: false,
	  TextTrackList: false,
	  TouchList: false
	};

	for (var collections = getKeys(DOMIterables), i = 0; i < collections.length; i++) {
	  var NAME = collections[i];
	  var explicit = DOMIterables[NAME];
	  var Collection = global[NAME];
	  var proto = Collection && Collection.prototype;
	  var key;
	  if (proto) {
	    if (!proto[ITERATOR]) hide(proto, ITERATOR, ArrayValues);
	    if (!proto[TO_STRING_TAG]) hide(proto, TO_STRING_TAG, NAME);
	    Iterators[NAME] = ArrayValues;
	    if (explicit) for (key in $iterators) if (!proto[key]) redefine(proto, key, $iterators[key], true);
	  }
	}


/***/ }),
/* 764 */
/***/ (function(module, exports, __webpack_require__) {

	var $export = __webpack_require__(1);
	var $task = __webpack_require__(201);
	$export($export.G + $export.B, {
	  setImmediate: $task.set,
	  clearImmediate: $task.clear
	});


/***/ }),
/* 765 */
/***/ (function(module, exports, __webpack_require__) {

	// ie9- setTimeout & setInterval additional parameters fix
	var global = __webpack_require__(9);
	var $export = __webpack_require__(1);
	var userAgent = __webpack_require__(140);
	var slice = [].slice;
	var MSIE = /MSIE .\./.test(userAgent); // <- dirty ie9- check
	var wrap = function (set) {
	  return function (fn, time /* , ...args */) {
	    var boundArgs = arguments.length > 2;
	    var args = boundArgs ? slice.call(arguments, 2) : false;
	    return set(boundArgs ? function () {
	      // eslint-disable-next-line no-new-func
	      (typeof fn == 'function' ? fn : Function(fn)).apply(this, args);
	    } : fn, time);
	  };
	};
	$export($export.G + $export.B + $export.F * MSIE, {
	  setTimeout: wrap(global.setTimeout),
	  setInterval: wrap(global.setInterval)
	});


/***/ }),
/* 766 */
/***/ (function(module, exports, __webpack_require__) {

	__webpack_require__(694);
	__webpack_require__(633);
	__webpack_require__(635);
	__webpack_require__(634);
	__webpack_require__(637);
	__webpack_require__(639);
	__webpack_require__(644);
	__webpack_require__(638);
	__webpack_require__(636);
	__webpack_require__(646);
	__webpack_require__(645);
	__webpack_require__(641);
	__webpack_require__(642);
	__webpack_require__(640);
	__webpack_require__(632);
	__webpack_require__(643);
	__webpack_require__(647);
	__webpack_require__(648);
	__webpack_require__(600);
	__webpack_require__(602);
	__webpack_require__(601);
	__webpack_require__(650);
	__webpack_require__(649);
	__webpack_require__(620);
	__webpack_require__(630);
	__webpack_require__(631);
	__webpack_require__(621);
	__webpack_require__(622);
	__webpack_require__(623);
	__webpack_require__(624);
	__webpack_require__(625);
	__webpack_require__(626);
	__webpack_require__(627);
	__webpack_require__(628);
	__webpack_require__(629);
	__webpack_require__(603);
	__webpack_require__(604);
	__webpack_require__(605);
	__webpack_require__(606);
	__webpack_require__(607);
	__webpack_require__(608);
	__webpack_require__(609);
	__webpack_require__(610);
	__webpack_require__(611);
	__webpack_require__(612);
	__webpack_require__(613);
	__webpack_require__(614);
	__webpack_require__(615);
	__webpack_require__(616);
	__webpack_require__(617);
	__webpack_require__(618);
	__webpack_require__(619);
	__webpack_require__(681);
	__webpack_require__(686);
	__webpack_require__(693);
	__webpack_require__(684);
	__webpack_require__(676);
	__webpack_require__(677);
	__webpack_require__(682);
	__webpack_require__(687);
	__webpack_require__(689);
	__webpack_require__(672);
	__webpack_require__(673);
	__webpack_require__(674);
	__webpack_require__(675);
	__webpack_require__(678);
	__webpack_require__(679);
	__webpack_require__(680);
	__webpack_require__(683);
	__webpack_require__(685);
	__webpack_require__(688);
	__webpack_require__(690);
	__webpack_require__(691);
	__webpack_require__(692);
	__webpack_require__(595);
	__webpack_require__(597);
	__webpack_require__(596);
	__webpack_require__(599);
	__webpack_require__(598);
	__webpack_require__(584);
	__webpack_require__(582);
	__webpack_require__(588);
	__webpack_require__(585);
	__webpack_require__(591);
	__webpack_require__(593);
	__webpack_require__(581);
	__webpack_require__(587);
	__webpack_require__(578);
	__webpack_require__(592);
	__webpack_require__(576);
	__webpack_require__(590);
	__webpack_require__(589);
	__webpack_require__(583);
	__webpack_require__(586);
	__webpack_require__(575);
	__webpack_require__(577);
	__webpack_require__(580);
	__webpack_require__(579);
	__webpack_require__(594);
	__webpack_require__(205);
	__webpack_require__(666);
	__webpack_require__(319);
	__webpack_require__(671);
	__webpack_require__(320);
	__webpack_require__(667);
	__webpack_require__(668);
	__webpack_require__(669);
	__webpack_require__(670);
	__webpack_require__(651);
	__webpack_require__(318);
	__webpack_require__(321);
	__webpack_require__(322);
	__webpack_require__(706);
	__webpack_require__(695);
	__webpack_require__(696);
	__webpack_require__(701);
	__webpack_require__(704);
	__webpack_require__(705);
	__webpack_require__(699);
	__webpack_require__(702);
	__webpack_require__(700);
	__webpack_require__(703);
	__webpack_require__(697);
	__webpack_require__(698);
	__webpack_require__(652);
	__webpack_require__(653);
	__webpack_require__(654);
	__webpack_require__(655);
	__webpack_require__(656);
	__webpack_require__(659);
	__webpack_require__(657);
	__webpack_require__(658);
	__webpack_require__(660);
	__webpack_require__(661);
	__webpack_require__(662);
	__webpack_require__(663);
	__webpack_require__(665);
	__webpack_require__(664);
	__webpack_require__(709);
	__webpack_require__(707);
	__webpack_require__(708);
	__webpack_require__(750);
	__webpack_require__(753);
	__webpack_require__(752);
	__webpack_require__(754);
	__webpack_require__(755);
	__webpack_require__(751);
	__webpack_require__(756);
	__webpack_require__(757);
	__webpack_require__(731);
	__webpack_require__(734);
	__webpack_require__(730);
	__webpack_require__(728);
	__webpack_require__(729);
	__webpack_require__(732);
	__webpack_require__(733);
	__webpack_require__(715);
	__webpack_require__(749);
	__webpack_require__(714);
	__webpack_require__(748);
	__webpack_require__(760);
	__webpack_require__(762);
	__webpack_require__(713);
	__webpack_require__(747);
	__webpack_require__(759);
	__webpack_require__(761);
	__webpack_require__(712);
	__webpack_require__(758);
	__webpack_require__(711);
	__webpack_require__(716);
	__webpack_require__(717);
	__webpack_require__(718);
	__webpack_require__(719);
	__webpack_require__(720);
	__webpack_require__(722);
	__webpack_require__(721);
	__webpack_require__(723);
	__webpack_require__(724);
	__webpack_require__(725);
	__webpack_require__(727);
	__webpack_require__(726);
	__webpack_require__(736);
	__webpack_require__(737);
	__webpack_require__(738);
	__webpack_require__(739);
	__webpack_require__(741);
	__webpack_require__(740);
	__webpack_require__(743);
	__webpack_require__(742);
	__webpack_require__(744);
	__webpack_require__(745);
	__webpack_require__(746);
	__webpack_require__(710);
	__webpack_require__(735);
	__webpack_require__(765);
	__webpack_require__(764);
	__webpack_require__(763);
	module.exports = __webpack_require__(43);


/***/ }),
/* 767 */
/***/ (function(module, exports, __webpack_require__) {

	/**
	 * Copyright (c) 2013-present, Facebook, Inc.
	 *
	 * This source code is licensed under the MIT license found in the
	 * LICENSE file in the root directory of this source tree.
	 *
	 */

	'use strict';

	var _assign = __webpack_require__(19);

	// -- Inlined from fbjs --

	var emptyObject = {};

	if ((undefined) !== 'production') {
	  Object.freeze(emptyObject);
	}

	var validateFormat = function validateFormat(format) {};

	if ((undefined) !== 'production') {
	  validateFormat = function validateFormat(format) {
	    if (format === undefined) {
	      throw new Error('invariant requires an error message argument');
	    }
	  };
	}

	function _invariant(condition, format, a, b, c, d, e, f) {
	  validateFormat(format);

	  if (!condition) {
	    var error;
	    if (format === undefined) {
	      error = new Error('Minified exception occurred; use the non-minified dev environment ' + 'for the full error message and additional helpful warnings.');
	    } else {
	      var args = [a, b, c, d, e, f];
	      var argIndex = 0;
	      error = new Error(format.replace(/%s/g, function () {
	        return args[argIndex++];
	      }));
	      error.name = 'Invariant Violation';
	    }

	    error.framesToPop = 1; // we don't care about invariant's own frame
	    throw error;
	  }
	}

	var warning = function(){};

	if ((undefined) !== 'production') {
	  var printWarning = function printWarning(format) {
	    for (var _len = arguments.length, args = Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
	      args[_key - 1] = arguments[_key];
	    }

	    var argIndex = 0;
	    var message = 'Warning: ' + format.replace(/%s/g, function () {
	      return args[argIndex++];
	    });
	    if (typeof console !== 'undefined') {
	      console.error(message);
	    }
	    try {
	      // --- Welcome to debugging React ---
	      // This error was thrown as a convenience so that you can use this stack
	      // to find the callsite that caused this warning to fire.
	      throw new Error(message);
	    } catch (x) {}
	  };

	  warning = function warning(condition, format) {
	    if (format === undefined) {
	      throw new Error('`warning(condition, format, ...args)` requires a warning ' + 'message argument');
	    }

	    if (format.indexOf('Failed Composite propType: ') === 0) {
	      return; // Ignore CompositeComponent proptype check.
	    }

	    if (!condition) {
	      for (var _len2 = arguments.length, args = Array(_len2 > 2 ? _len2 - 2 : 0), _key2 = 2; _key2 < _len2; _key2++) {
	        args[_key2 - 2] = arguments[_key2];
	      }

	      printWarning.apply(undefined, [format].concat(args));
	    }
	  };
	}

	// /-- Inlined from fbjs --

	var MIXINS_KEY = 'mixins';

	// Helper function to allow the creation of anonymous functions which do not
	// have .name set to the name of the variable being assigned to.
	function identity(fn) {
	  return fn;
	}

	var ReactPropTypeLocationNames;
	if ((undefined) !== 'production') {
	  ReactPropTypeLocationNames = {
	    prop: 'prop',
	    context: 'context',
	    childContext: 'child context'
	  };
	} else {
	  ReactPropTypeLocationNames = {};
	}

	function factory(ReactComponent, isValidElement, ReactNoopUpdateQueue) {
	  /**
	   * Policies that describe methods in `ReactClassInterface`.
	   */

	  var injectedMixins = [];

	  /**
	   * Composite components are higher-level components that compose other composite
	   * or host components.
	   *
	   * To create a new type of `ReactClass`, pass a specification of
	   * your new class to `React.createClass`. The only requirement of your class
	   * specification is that you implement a `render` method.
	   *
	   *   var MyComponent = React.createClass({
	   *     render: function() {
	   *       return <div>Hello World</div>;
	   *     }
	   *   });
	   *
	   * The class specification supports a specific protocol of methods that have
	   * special meaning (e.g. `render`). See `ReactClassInterface` for
	   * more the comprehensive protocol. Any other properties and methods in the
	   * class specification will be available on the prototype.
	   *
	   * @interface ReactClassInterface
	   * @internal
	   */
	  var ReactClassInterface = {
	    /**
	     * An array of Mixin objects to include when defining your component.
	     *
	     * @type {array}
	     * @optional
	     */
	    mixins: 'DEFINE_MANY',

	    /**
	     * An object containing properties and methods that should be defined on
	     * the component's constructor instead of its prototype (static methods).
	     *
	     * @type {object}
	     * @optional
	     */
	    statics: 'DEFINE_MANY',

	    /**
	     * Definition of prop types for this component.
	     *
	     * @type {object}
	     * @optional
	     */
	    propTypes: 'DEFINE_MANY',

	    /**
	     * Definition of context types for this component.
	     *
	     * @type {object}
	     * @optional
	     */
	    contextTypes: 'DEFINE_MANY',

	    /**
	     * Definition of context types this component sets for its children.
	     *
	     * @type {object}
	     * @optional
	     */
	    childContextTypes: 'DEFINE_MANY',

	    // ==== Definition methods ====

	    /**
	     * Invoked when the component is mounted. Values in the mapping will be set on
	     * `this.props` if that prop is not specified (i.e. using an `in` check).
	     *
	     * This method is invoked before `getInitialState` and therefore cannot rely
	     * on `this.state` or use `this.setState`.
	     *
	     * @return {object}
	     * @optional
	     */
	    getDefaultProps: 'DEFINE_MANY_MERGED',

	    /**
	     * Invoked once before the component is mounted. The return value will be used
	     * as the initial value of `this.state`.
	     *
	     *   getInitialState: function() {
	     *     return {
	     *       isOn: false,
	     *       fooBaz: new BazFoo()
	     *     }
	     *   }
	     *
	     * @return {object}
	     * @optional
	     */
	    getInitialState: 'DEFINE_MANY_MERGED',

	    /**
	     * @return {object}
	     * @optional
	     */
	    getChildContext: 'DEFINE_MANY_MERGED',

	    /**
	     * Uses props from `this.props` and state from `this.state` to render the
	     * structure of the component.
	     *
	     * No guarantees are made about when or how often this method is invoked, so
	     * it must not have side effects.
	     *
	     *   render: function() {
	     *     var name = this.props.name;
	     *     return <div>Hello, {name}!</div>;
	     *   }
	     *
	     * @return {ReactComponent}
	     * @required
	     */
	    render: 'DEFINE_ONCE',

	    // ==== Delegate methods ====

	    /**
	     * Invoked when the component is initially created and about to be mounted.
	     * This may have side effects, but any external subscriptions or data created
	     * by this method must be cleaned up in `componentWillUnmount`.
	     *
	     * @optional
	     */
	    componentWillMount: 'DEFINE_MANY',

	    /**
	     * Invoked when the component has been mounted and has a DOM representation.
	     * However, there is no guarantee that the DOM node is in the document.
	     *
	     * Use this as an opportunity to operate on the DOM when the component has
	     * been mounted (initialized and rendered) for the first time.
	     *
	     * @param {DOMElement} rootNode DOM element representing the component.
	     * @optional
	     */
	    componentDidMount: 'DEFINE_MANY',

	    /**
	     * Invoked before the component receives new props.
	     *
	     * Use this as an opportunity to react to a prop transition by updating the
	     * state using `this.setState`. Current props are accessed via `this.props`.
	     *
	     *   componentWillReceiveProps: function(nextProps, nextContext) {
	     *     this.setState({
	     *       likesIncreasing: nextProps.likeCount > this.props.likeCount
	     *     });
	     *   }
	     *
	     * NOTE: There is no equivalent `componentWillReceiveState`. An incoming prop
	     * transition may cause a state change, but the opposite is not true. If you
	     * need it, you are probably looking for `componentWillUpdate`.
	     *
	     * @param {object} nextProps
	     * @optional
	     */
	    componentWillReceiveProps: 'DEFINE_MANY',

	    /**
	     * Invoked while deciding if the component should be updated as a result of
	     * receiving new props, state and/or context.
	     *
	     * Use this as an opportunity to `return false` when you're certain that the
	     * transition to the new props/state/context will not require a component
	     * update.
	     *
	     *   shouldComponentUpdate: function(nextProps, nextState, nextContext) {
	     *     return !equal(nextProps, this.props) ||
	     *       !equal(nextState, this.state) ||
	     *       !equal(nextContext, this.context);
	     *   }
	     *
	     * @param {object} nextProps
	     * @param {?object} nextState
	     * @param {?object} nextContext
	     * @return {boolean} True if the component should update.
	     * @optional
	     */
	    shouldComponentUpdate: 'DEFINE_ONCE',

	    /**
	     * Invoked when the component is about to update due to a transition from
	     * `this.props`, `this.state` and `this.context` to `nextProps`, `nextState`
	     * and `nextContext`.
	     *
	     * Use this as an opportunity to perform preparation before an update occurs.
	     *
	     * NOTE: You **cannot** use `this.setState()` in this method.
	     *
	     * @param {object} nextProps
	     * @param {?object} nextState
	     * @param {?object} nextContext
	     * @param {ReactReconcileTransaction} transaction
	     * @optional
	     */
	    componentWillUpdate: 'DEFINE_MANY',

	    /**
	     * Invoked when the component's DOM representation has been updated.
	     *
	     * Use this as an opportunity to operate on the DOM when the component has
	     * been updated.
	     *
	     * @param {object} prevProps
	     * @param {?object} prevState
	     * @param {?object} prevContext
	     * @param {DOMElement} rootNode DOM element representing the component.
	     * @optional
	     */
	    componentDidUpdate: 'DEFINE_MANY',

	    /**
	     * Invoked when the component is about to be removed from its parent and have
	     * its DOM representation destroyed.
	     *
	     * Use this as an opportunity to deallocate any external resources.
	     *
	     * NOTE: There is no `componentDidUnmount` since your component will have been
	     * destroyed by that point.
	     *
	     * @optional
	     */
	    componentWillUnmount: 'DEFINE_MANY',

	    /**
	     * Replacement for (deprecated) `componentWillMount`.
	     *
	     * @optional
	     */
	    UNSAFE_componentWillMount: 'DEFINE_MANY',

	    /**
	     * Replacement for (deprecated) `componentWillReceiveProps`.
	     *
	     * @optional
	     */
	    UNSAFE_componentWillReceiveProps: 'DEFINE_MANY',

	    /**
	     * Replacement for (deprecated) `componentWillUpdate`.
	     *
	     * @optional
	     */
	    UNSAFE_componentWillUpdate: 'DEFINE_MANY',

	    // ==== Advanced methods ====

	    /**
	     * Updates the component's currently mounted DOM representation.
	     *
	     * By default, this implements React's rendering and reconciliation algorithm.
	     * Sophisticated clients may wish to override this.
	     *
	     * @param {ReactReconcileTransaction} transaction
	     * @internal
	     * @overridable
	     */
	    updateComponent: 'OVERRIDE_BASE'
	  };

	  /**
	   * Similar to ReactClassInterface but for static methods.
	   */
	  var ReactClassStaticInterface = {
	    /**
	     * This method is invoked after a component is instantiated and when it
	     * receives new props. Return an object to update state in response to
	     * prop changes. Return null to indicate no change to state.
	     *
	     * If an object is returned, its keys will be merged into the existing state.
	     *
	     * @return {object || null}
	     * @optional
	     */
	    getDerivedStateFromProps: 'DEFINE_MANY_MERGED'
	  };

	  /**
	   * Mapping from class specification keys to special processing functions.
	   *
	   * Although these are declared like instance properties in the specification
	   * when defining classes using `React.createClass`, they are actually static
	   * and are accessible on the constructor instead of the prototype. Despite
	   * being static, they must be defined outside of the "statics" key under
	   * which all other static methods are defined.
	   */
	  var RESERVED_SPEC_KEYS = {
	    displayName: function(Constructor, displayName) {
	      Constructor.displayName = displayName;
	    },
	    mixins: function(Constructor, mixins) {
	      if (mixins) {
	        for (var i = 0; i < mixins.length; i++) {
	          mixSpecIntoComponent(Constructor, mixins[i]);
	        }
	      }
	    },
	    childContextTypes: function(Constructor, childContextTypes) {
	      if ((undefined) !== 'production') {
	        validateTypeDef(Constructor, childContextTypes, 'childContext');
	      }
	      Constructor.childContextTypes = _assign(
	        {},
	        Constructor.childContextTypes,
	        childContextTypes
	      );
	    },
	    contextTypes: function(Constructor, contextTypes) {
	      if ((undefined) !== 'production') {
	        validateTypeDef(Constructor, contextTypes, 'context');
	      }
	      Constructor.contextTypes = _assign(
	        {},
	        Constructor.contextTypes,
	        contextTypes
	      );
	    },
	    /**
	     * Special case getDefaultProps which should move into statics but requires
	     * automatic merging.
	     */
	    getDefaultProps: function(Constructor, getDefaultProps) {
	      if (Constructor.getDefaultProps) {
	        Constructor.getDefaultProps = createMergedResultFunction(
	          Constructor.getDefaultProps,
	          getDefaultProps
	        );
	      } else {
	        Constructor.getDefaultProps = getDefaultProps;
	      }
	    },
	    propTypes: function(Constructor, propTypes) {
	      if ((undefined) !== 'production') {
	        validateTypeDef(Constructor, propTypes, 'prop');
	      }
	      Constructor.propTypes = _assign({}, Constructor.propTypes, propTypes);
	    },
	    statics: function(Constructor, statics) {
	      mixStaticSpecIntoComponent(Constructor, statics);
	    },
	    autobind: function() {}
	  };

	  function validateTypeDef(Constructor, typeDef, location) {
	    for (var propName in typeDef) {
	      if (typeDef.hasOwnProperty(propName)) {
	        // use a warning instead of an _invariant so components
	        // don't show up in prod but only in __DEV__
	        if ((undefined) !== 'production') {
	          warning(
	            typeof typeDef[propName] === 'function',
	            '%s: %s type `%s` is invalid; it must be a function, usually from ' +
	              'React.PropTypes.',
	            Constructor.displayName || 'ReactClass',
	            ReactPropTypeLocationNames[location],
	            propName
	          );
	        }
	      }
	    }
	  }

	  function validateMethodOverride(isAlreadyDefined, name) {
	    var specPolicy = ReactClassInterface.hasOwnProperty(name)
	      ? ReactClassInterface[name]
	      : null;

	    // Disallow overriding of base class methods unless explicitly allowed.
	    if (ReactClassMixin.hasOwnProperty(name)) {
	      _invariant(
	        specPolicy === 'OVERRIDE_BASE',
	        'ReactClassInterface: You are attempting to override ' +
	          '`%s` from your class specification. Ensure that your method names ' +
	          'do not overlap with React methods.',
	        name
	      );
	    }

	    // Disallow defining methods more than once unless explicitly allowed.
	    if (isAlreadyDefined) {
	      _invariant(
	        specPolicy === 'DEFINE_MANY' || specPolicy === 'DEFINE_MANY_MERGED',
	        'ReactClassInterface: You are attempting to define ' +
	          '`%s` on your component more than once. This conflict may be due ' +
	          'to a mixin.',
	        name
	      );
	    }
	  }

	  /**
	   * Mixin helper which handles policy validation and reserved
	   * specification keys when building React classes.
	   */
	  function mixSpecIntoComponent(Constructor, spec) {
	    if (!spec) {
	      if ((undefined) !== 'production') {
	        var typeofSpec = typeof spec;
	        var isMixinValid = typeofSpec === 'object' && spec !== null;

	        if ((undefined) !== 'production') {
	          warning(
	            isMixinValid,
	            "%s: You're attempting to include a mixin that is either null " +
	              'or not an object. Check the mixins included by the component, ' +
	              'as well as any mixins they include themselves. ' +
	              'Expected object but got %s.',
	            Constructor.displayName || 'ReactClass',
	            spec === null ? null : typeofSpec
	          );
	        }
	      }

	      return;
	    }

	    _invariant(
	      typeof spec !== 'function',
	      "ReactClass: You're attempting to " +
	        'use a component class or function as a mixin. Instead, just use a ' +
	        'regular object.'
	    );
	    _invariant(
	      !isValidElement(spec),
	      "ReactClass: You're attempting to " +
	        'use a component as a mixin. Instead, just use a regular object.'
	    );

	    var proto = Constructor.prototype;
	    var autoBindPairs = proto.__reactAutoBindPairs;

	    // By handling mixins before any other properties, we ensure the same
	    // chaining order is applied to methods with DEFINE_MANY policy, whether
	    // mixins are listed before or after these methods in the spec.
	    if (spec.hasOwnProperty(MIXINS_KEY)) {
	      RESERVED_SPEC_KEYS.mixins(Constructor, spec.mixins);
	    }

	    for (var name in spec) {
	      if (!spec.hasOwnProperty(name)) {
	        continue;
	      }

	      if (name === MIXINS_KEY) {
	        // We have already handled mixins in a special case above.
	        continue;
	      }

	      var property = spec[name];
	      var isAlreadyDefined = proto.hasOwnProperty(name);
	      validateMethodOverride(isAlreadyDefined, name);

	      if (RESERVED_SPEC_KEYS.hasOwnProperty(name)) {
	        RESERVED_SPEC_KEYS[name](Constructor, property);
	      } else {
	        // Setup methods on prototype:
	        // The following member methods should not be automatically bound:
	        // 1. Expected ReactClass methods (in the "interface").
	        // 2. Overridden methods (that were mixed in).
	        var isReactClassMethod = ReactClassInterface.hasOwnProperty(name);
	        var isFunction = typeof property === 'function';
	        var shouldAutoBind =
	          isFunction &&
	          !isReactClassMethod &&
	          !isAlreadyDefined &&
	          spec.autobind !== false;

	        if (shouldAutoBind) {
	          autoBindPairs.push(name, property);
	          proto[name] = property;
	        } else {
	          if (isAlreadyDefined) {
	            var specPolicy = ReactClassInterface[name];

	            // These cases should already be caught by validateMethodOverride.
	            _invariant(
	              isReactClassMethod &&
	                (specPolicy === 'DEFINE_MANY_MERGED' ||
	                  specPolicy === 'DEFINE_MANY'),
	              'ReactClass: Unexpected spec policy %s for key %s ' +
	                'when mixing in component specs.',
	              specPolicy,
	              name
	            );

	            // For methods which are defined more than once, call the existing
	            // methods before calling the new property, merging if appropriate.
	            if (specPolicy === 'DEFINE_MANY_MERGED') {
	              proto[name] = createMergedResultFunction(proto[name], property);
	            } else if (specPolicy === 'DEFINE_MANY') {
	              proto[name] = createChainedFunction(proto[name], property);
	            }
	          } else {
	            proto[name] = property;
	            if ((undefined) !== 'production') {
	              // Add verbose displayName to the function, which helps when looking
	              // at profiling tools.
	              if (typeof property === 'function' && spec.displayName) {
	                proto[name].displayName = spec.displayName + '_' + name;
	              }
	            }
	          }
	        }
	      }
	    }
	  }

	  function mixStaticSpecIntoComponent(Constructor, statics) {
	    if (!statics) {
	      return;
	    }

	    for (var name in statics) {
	      var property = statics[name];
	      if (!statics.hasOwnProperty(name)) {
	        continue;
	      }

	      var isReserved = name in RESERVED_SPEC_KEYS;
	      _invariant(
	        !isReserved,
	        'ReactClass: You are attempting to define a reserved ' +
	          'property, `%s`, that shouldn\'t be on the "statics" key. Define it ' +
	          'as an instance property instead; it will still be accessible on the ' +
	          'constructor.',
	        name
	      );

	      var isAlreadyDefined = name in Constructor;
	      if (isAlreadyDefined) {
	        var specPolicy = ReactClassStaticInterface.hasOwnProperty(name)
	          ? ReactClassStaticInterface[name]
	          : null;

	        _invariant(
	          specPolicy === 'DEFINE_MANY_MERGED',
	          'ReactClass: You are attempting to define ' +
	            '`%s` on your component more than once. This conflict may be ' +
	            'due to a mixin.',
	          name
	        );

	        Constructor[name] = createMergedResultFunction(Constructor[name], property);

	        return;
	      }

	      Constructor[name] = property;
	    }
	  }

	  /**
	   * Merge two objects, but throw if both contain the same key.
	   *
	   * @param {object} one The first object, which is mutated.
	   * @param {object} two The second object
	   * @return {object} one after it has been mutated to contain everything in two.
	   */
	  function mergeIntoWithNoDuplicateKeys(one, two) {
	    _invariant(
	      one && two && typeof one === 'object' && typeof two === 'object',
	      'mergeIntoWithNoDuplicateKeys(): Cannot merge non-objects.'
	    );

	    for (var key in two) {
	      if (two.hasOwnProperty(key)) {
	        _invariant(
	          one[key] === undefined,
	          'mergeIntoWithNoDuplicateKeys(): ' +
	            'Tried to merge two objects with the same key: `%s`. This conflict ' +
	            'may be due to a mixin; in particular, this may be caused by two ' +
	            'getInitialState() or getDefaultProps() methods returning objects ' +
	            'with clashing keys.',
	          key
	        );
	        one[key] = two[key];
	      }
	    }
	    return one;
	  }

	  /**
	   * Creates a function that invokes two functions and merges their return values.
	   *
	   * @param {function} one Function to invoke first.
	   * @param {function} two Function to invoke second.
	   * @return {function} Function that invokes the two argument functions.
	   * @private
	   */
	  function createMergedResultFunction(one, two) {
	    return function mergedResult() {
	      var a = one.apply(this, arguments);
	      var b = two.apply(this, arguments);
	      if (a == null) {
	        return b;
	      } else if (b == null) {
	        return a;
	      }
	      var c = {};
	      mergeIntoWithNoDuplicateKeys(c, a);
	      mergeIntoWithNoDuplicateKeys(c, b);
	      return c;
	    };
	  }

	  /**
	   * Creates a function that invokes two functions and ignores their return vales.
	   *
	   * @param {function} one Function to invoke first.
	   * @param {function} two Function to invoke second.
	   * @return {function} Function that invokes the two argument functions.
	   * @private
	   */
	  function createChainedFunction(one, two) {
	    return function chainedFunction() {
	      one.apply(this, arguments);
	      two.apply(this, arguments);
	    };
	  }

	  /**
	   * Binds a method to the component.
	   *
	   * @param {object} component Component whose method is going to be bound.
	   * @param {function} method Method to be bound.
	   * @return {function} The bound method.
	   */
	  function bindAutoBindMethod(component, method) {
	    var boundMethod = method.bind(component);
	    if ((undefined) !== 'production') {
	      boundMethod.__reactBoundContext = component;
	      boundMethod.__reactBoundMethod = method;
	      boundMethod.__reactBoundArguments = null;
	      var componentName = component.constructor.displayName;
	      var _bind = boundMethod.bind;
	      boundMethod.bind = function(newThis) {
	        for (
	          var _len = arguments.length,
	            args = Array(_len > 1 ? _len - 1 : 0),
	            _key = 1;
	          _key < _len;
	          _key++
	        ) {
	          args[_key - 1] = arguments[_key];
	        }

	        // User is trying to bind() an autobound method; we effectively will
	        // ignore the value of "this" that the user is trying to use, so
	        // let's warn.
	        if (newThis !== component && newThis !== null) {
	          if ((undefined) !== 'production') {
	            warning(
	              false,
	              'bind(): React component methods may only be bound to the ' +
	                'component instance. See %s',
	              componentName
	            );
	          }
	        } else if (!args.length) {
	          if ((undefined) !== 'production') {
	            warning(
	              false,
	              'bind(): You are binding a component method to the component. ' +
	                'React does this for you automatically in a high-performance ' +
	                'way, so you can safely remove this call. See %s',
	              componentName
	            );
	          }
	          return boundMethod;
	        }
	        var reboundMethod = _bind.apply(boundMethod, arguments);
	        reboundMethod.__reactBoundContext = component;
	        reboundMethod.__reactBoundMethod = method;
	        reboundMethod.__reactBoundArguments = args;
	        return reboundMethod;
	      };
	    }
	    return boundMethod;
	  }

	  /**
	   * Binds all auto-bound methods in a component.
	   *
	   * @param {object} component Component whose method is going to be bound.
	   */
	  function bindAutoBindMethods(component) {
	    var pairs = component.__reactAutoBindPairs;
	    for (var i = 0; i < pairs.length; i += 2) {
	      var autoBindKey = pairs[i];
	      var method = pairs[i + 1];
	      component[autoBindKey] = bindAutoBindMethod(component, method);
	    }
	  }

	  var IsMountedPreMixin = {
	    componentDidMount: function() {
	      this.__isMounted = true;
	    }
	  };

	  var IsMountedPostMixin = {
	    componentWillUnmount: function() {
	      this.__isMounted = false;
	    }
	  };

	  /**
	   * Add more to the ReactClass base class. These are all legacy features and
	   * therefore not already part of the modern ReactComponent.
	   */
	  var ReactClassMixin = {
	    /**
	     * TODO: This will be deprecated because state should always keep a consistent
	     * type signature and the only use case for this, is to avoid that.
	     */
	    replaceState: function(newState, callback) {
	      this.updater.enqueueReplaceState(this, newState, callback);
	    },

	    /**
	     * Checks whether or not this composite component is mounted.
	     * @return {boolean} True if mounted, false otherwise.
	     * @protected
	     * @final
	     */
	    isMounted: function() {
	      if ((undefined) !== 'production') {
	        warning(
	          this.__didWarnIsMounted,
	          '%s: isMounted is deprecated. Instead, make sure to clean up ' +
	            'subscriptions and pending requests in componentWillUnmount to ' +
	            'prevent memory leaks.',
	          (this.constructor && this.constructor.displayName) ||
	            this.name ||
	            'Component'
	        );
	        this.__didWarnIsMounted = true;
	      }
	      return !!this.__isMounted;
	    }
	  };

	  var ReactClassComponent = function() {};
	  _assign(
	    ReactClassComponent.prototype,
	    ReactComponent.prototype,
	    ReactClassMixin
	  );

	  /**
	   * Creates a composite component class given a class specification.
	   * See https://facebook.github.io/react/docs/top-level-api.html#react.createclass
	   *
	   * @param {object} spec Class specification (which must define `render`).
	   * @return {function} Component constructor function.
	   * @public
	   */
	  function createClass(spec) {
	    // To keep our warnings more understandable, we'll use a little hack here to
	    // ensure that Constructor.name !== 'Constructor'. This makes sure we don't
	    // unnecessarily identify a class without displayName as 'Constructor'.
	    var Constructor = identity(function(props, context, updater) {
	      // This constructor gets overridden by mocks. The argument is used
	      // by mocks to assert on what gets mounted.

	      if ((undefined) !== 'production') {
	        warning(
	          this instanceof Constructor,
	          'Something is calling a React component directly. Use a factory or ' +
	            'JSX instead. See: https://fb.me/react-legacyfactory'
	        );
	      }

	      // Wire up auto-binding
	      if (this.__reactAutoBindPairs.length) {
	        bindAutoBindMethods(this);
	      }

	      this.props = props;
	      this.context = context;
	      this.refs = emptyObject;
	      this.updater = updater || ReactNoopUpdateQueue;

	      this.state = null;

	      // ReactClasses doesn't have constructors. Instead, they use the
	      // getInitialState and componentWillMount methods for initialization.

	      var initialState = this.getInitialState ? this.getInitialState() : null;
	      if ((undefined) !== 'production') {
	        // We allow auto-mocks to proceed as if they're returning null.
	        if (
	          initialState === undefined &&
	          this.getInitialState._isMockFunction
	        ) {
	          // This is probably bad practice. Consider warning here and
	          // deprecating this convenience.
	          initialState = null;
	        }
	      }
	      _invariant(
	        typeof initialState === 'object' && !Array.isArray(initialState),
	        '%s.getInitialState(): must return an object or null',
	        Constructor.displayName || 'ReactCompositeComponent'
	      );

	      this.state = initialState;
	    });
	    Constructor.prototype = new ReactClassComponent();
	    Constructor.prototype.constructor = Constructor;
	    Constructor.prototype.__reactAutoBindPairs = [];

	    injectedMixins.forEach(mixSpecIntoComponent.bind(null, Constructor));

	    mixSpecIntoComponent(Constructor, IsMountedPreMixin);
	    mixSpecIntoComponent(Constructor, spec);
	    mixSpecIntoComponent(Constructor, IsMountedPostMixin);

	    // Initialize the defaultProps property after all mixins have been merged.
	    if (Constructor.getDefaultProps) {
	      Constructor.defaultProps = Constructor.getDefaultProps();
	    }

	    if ((undefined) !== 'production') {
	      // This is a tag to indicate that the use of these method names is ok,
	      // since it's used with createClass. If it's not, then it's likely a
	      // mistake so we'll warn you to use the static property, property
	      // initializer or constructor respectively.
	      if (Constructor.getDefaultProps) {
	        Constructor.getDefaultProps.isReactClassApproved = {};
	      }
	      if (Constructor.prototype.getInitialState) {
	        Constructor.prototype.getInitialState.isReactClassApproved = {};
	      }
	    }

	    _invariant(
	      Constructor.prototype.render,
	      'createClass(...): Class specification must implement a `render` method.'
	    );

	    if ((undefined) !== 'production') {
	      warning(
	        !Constructor.prototype.componentShouldUpdate,
	        '%s has a method called ' +
	          'componentShouldUpdate(). Did you mean shouldComponentUpdate()? ' +
	          'The name is phrased as a question because the function is ' +
	          'expected to return a value.',
	        spec.displayName || 'A component'
	      );
	      warning(
	        !Constructor.prototype.componentWillRecieveProps,
	        '%s has a method called ' +
	          'componentWillRecieveProps(). Did you mean componentWillReceiveProps()?',
	        spec.displayName || 'A component'
	      );
	      warning(
	        !Constructor.prototype.UNSAFE_componentWillRecieveProps,
	        '%s has a method called UNSAFE_componentWillRecieveProps(). ' +
	          'Did you mean UNSAFE_componentWillReceiveProps()?',
	        spec.displayName || 'A component'
	      );
	    }

	    // Reduce time spent doing lookups by setting these on the prototype.
	    for (var methodName in ReactClassInterface) {
	      if (!Constructor.prototype[methodName]) {
	        Constructor.prototype[methodName] = null;
	      }
	    }

	    return Constructor;
	  }

	  return createClass;
	}

	module.exports = factory;


/***/ }),
/* 768 */
/***/ (function(module, exports, __webpack_require__) {

	var objectKeys = __webpack_require__(335);
	var isArguments = __webpack_require__(792);
	var is = __webpack_require__(795);
	var isRegex = __webpack_require__(794);
	var flags = __webpack_require__(922);
	var isDate = __webpack_require__(793);

	var getTime = Date.prototype.getTime;

	function deepEqual(actual, expected, options) {
	  var opts = options || {};

	  // 7.1. All identical values are equivalent, as determined by ===.
	  if (opts.strict ? is(actual, expected) : actual === expected) {
	    return true;
	  }

	  // 7.3. Other pairs that do not both pass typeof value == 'object', equivalence is determined by ==.
	  if (!actual || !expected || (typeof actual !== 'object' && typeof expected !== 'object')) {
	    return opts.strict ? is(actual, expected) : actual == expected;
	  }

	  /*
	   * 7.4. For all other Object pairs, including Array objects, equivalence is
	   * determined by having the same number of owned properties (as verified
	   * with Object.prototype.hasOwnProperty.call), the same set of keys
	   * (although not necessarily the same order), equivalent values for every
	   * corresponding key, and an identical 'prototype' property. Note: this
	   * accounts for both named and indexed properties on Arrays.
	   */
	  // eslint-disable-next-line no-use-before-define
	  return objEquiv(actual, expected, opts);
	}

	function isUndefinedOrNull(value) {
	  return value === null || value === undefined;
	}

	function isBuffer(x) {
	  if (!x || typeof x !== 'object' || typeof x.length !== 'number') {
	    return false;
	  }
	  if (typeof x.copy !== 'function' || typeof x.slice !== 'function') {
	    return false;
	  }
	  if (x.length > 0 && typeof x[0] !== 'number') {
	    return false;
	  }
	  return true;
	}

	function objEquiv(a, b, opts) {
	  /* eslint max-statements: [2, 50] */
	  var i, key;
	  if (typeof a !== typeof b) { return false; }
	  if (isUndefinedOrNull(a) || isUndefinedOrNull(b)) { return false; }

	  // an identical 'prototype' property.
	  if (a.prototype !== b.prototype) { return false; }

	  if (isArguments(a) !== isArguments(b)) { return false; }

	  var aIsRegex = isRegex(a);
	  var bIsRegex = isRegex(b);
	  if (aIsRegex !== bIsRegex) { return false; }
	  if (aIsRegex || bIsRegex) {
	    return a.source === b.source && flags(a) === flags(b);
	  }

	  if (isDate(a) && isDate(b)) {
	    return getTime.call(a) === getTime.call(b);
	  }

	  var aIsBuffer = isBuffer(a);
	  var bIsBuffer = isBuffer(b);
	  if (aIsBuffer !== bIsBuffer) { return false; }
	  if (aIsBuffer || bIsBuffer) { // && would work too, because both are true or both false here
	    if (a.length !== b.length) { return false; }
	    for (i = 0; i < a.length; i++) {
	      if (a[i] !== b[i]) { return false; }
	    }
	    return true;
	  }

	  if (typeof a !== typeof b) { return false; }

	  try {
	    var ka = objectKeys(a);
	    var kb = objectKeys(b);
	  } catch (e) { // happens when one is a string literal and the other isn't
	    return false;
	  }
	  // having the same number of owned properties (keys incorporates hasOwnProperty)
	  if (ka.length !== kb.length) { return false; }

	  // the same set of keys (although not necessarily the same order),
	  ka.sort();
	  kb.sort();
	  // ~~~cheap key test
	  for (i = ka.length - 1; i >= 0; i--) {
	    if (ka[i] != kb[i]) { return false; }
	  }
	  // equivalent values for every corresponding key, and ~~~possibly expensive deep test
	  for (i = ka.length - 1; i >= 0; i--) {
	    key = ka[i];
	    if (!deepEqual(a[key], b[key], opts)) { return false; }
	  }

	  return true;
	}

	module.exports = deepEqual;


/***/ }),
/* 769 */
/***/ (function(module, exports) {

	// Copyright Joyent, Inc. and other Node contributors.
	//
	// Permission is hereby granted, free of charge, to any person obtaining a
	// copy of this software and associated documentation files (the
	// "Software"), to deal in the Software without restriction, including
	// without limitation the rights to use, copy, modify, merge, publish,
	// distribute, sublicense, and/or sell copies of the Software, and to permit
	// persons to whom the Software is furnished to do so, subject to the
	// following conditions:
	//
	// The above copyright notice and this permission notice shall be included
	// in all copies or substantial portions of the Software.
	//
	// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
	// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
	// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
	// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
	// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
	// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
	// USE OR OTHER DEALINGS IN THE SOFTWARE.

	function EventEmitter() {
	  this._events = this._events || {};
	  this._maxListeners = this._maxListeners || undefined;
	}
	module.exports = EventEmitter;

	// Backwards-compat with node 0.10.x
	EventEmitter.EventEmitter = EventEmitter;

	EventEmitter.prototype._events = undefined;
	EventEmitter.prototype._maxListeners = undefined;

	// By default EventEmitters will print a warning if more than 10 listeners are
	// added to it. This is a useful default which helps finding memory leaks.
	EventEmitter.defaultMaxListeners = 10;

	// Obviously not all Emitters should be limited to 10. This function allows
	// that to be increased. Set to zero for unlimited.
	EventEmitter.prototype.setMaxListeners = function(n) {
	  if (!isNumber(n) || n < 0 || isNaN(n))
	    throw TypeError('n must be a positive number');
	  this._maxListeners = n;
	  return this;
	};

	EventEmitter.prototype.emit = function(type) {
	  var er, handler, len, args, i, listeners;

	  if (!this._events)
	    this._events = {};

	  // If there is no 'error' event listener then throw.
	  if (type === 'error') {
	    if (!this._events.error ||
	        (isObject(this._events.error) && !this._events.error.length)) {
	      er = arguments[1];
	      if (er instanceof Error) {
	        throw er; // Unhandled 'error' event
	      } else {
	        // At least give some kind of context to the user
	        var err = new Error('Uncaught, unspecified "error" event. (' + er + ')');
	        err.context = er;
	        throw err;
	      }
	    }
	  }

	  handler = this._events[type];

	  if (isUndefined(handler))
	    return false;

	  if (isFunction(handler)) {
	    switch (arguments.length) {
	      // fast cases
	      case 1:
	        handler.call(this);
	        break;
	      case 2:
	        handler.call(this, arguments[1]);
	        break;
	      case 3:
	        handler.call(this, arguments[1], arguments[2]);
	        break;
	      // slower
	      default:
	        args = Array.prototype.slice.call(arguments, 1);
	        handler.apply(this, args);
	    }
	  } else if (isObject(handler)) {
	    args = Array.prototype.slice.call(arguments, 1);
	    listeners = handler.slice();
	    len = listeners.length;
	    for (i = 0; i < len; i++)
	      listeners[i].apply(this, args);
	  }

	  return true;
	};

	EventEmitter.prototype.addListener = function(type, listener) {
	  var m;

	  if (!isFunction(listener))
	    throw TypeError('listener must be a function');

	  if (!this._events)
	    this._events = {};

	  // To avoid recursion in the case that type === "newListener"! Before
	  // adding it to the listeners, first emit "newListener".
	  if (this._events.newListener)
	    this.emit('newListener', type,
	              isFunction(listener.listener) ?
	              listener.listener : listener);

	  if (!this._events[type])
	    // Optimize the case of one listener. Don't need the extra array object.
	    this._events[type] = listener;
	  else if (isObject(this._events[type]))
	    // If we've already got an array, just append.
	    this._events[type].push(listener);
	  else
	    // Adding the second element, need to change to array.
	    this._events[type] = [this._events[type], listener];

	  // Check for listener leak
	  if (isObject(this._events[type]) && !this._events[type].warned) {
	    if (!isUndefined(this._maxListeners)) {
	      m = this._maxListeners;
	    } else {
	      m = EventEmitter.defaultMaxListeners;
	    }

	    if (m && m > 0 && this._events[type].length > m) {
	      this._events[type].warned = true;
	      console.error('(node) warning: possible EventEmitter memory ' +
	                    'leak detected. %d listeners added. ' +
	                    'Use emitter.setMaxListeners() to increase limit.',
	                    this._events[type].length);
	      if (typeof console.trace === 'function') {
	        // not supported in IE 10
	        console.trace();
	      }
	    }
	  }

	  return this;
	};

	EventEmitter.prototype.on = EventEmitter.prototype.addListener;

	EventEmitter.prototype.once = function(type, listener) {
	  if (!isFunction(listener))
	    throw TypeError('listener must be a function');

	  var fired = false;

	  function g() {
	    this.removeListener(type, g);

	    if (!fired) {
	      fired = true;
	      listener.apply(this, arguments);
	    }
	  }

	  g.listener = listener;
	  this.on(type, g);

	  return this;
	};

	// emits a 'removeListener' event iff the listener was removed
	EventEmitter.prototype.removeListener = function(type, listener) {
	  var list, position, length, i;

	  if (!isFunction(listener))
	    throw TypeError('listener must be a function');

	  if (!this._events || !this._events[type])
	    return this;

	  list = this._events[type];
	  length = list.length;
	  position = -1;

	  if (list === listener ||
	      (isFunction(list.listener) && list.listener === listener)) {
	    delete this._events[type];
	    if (this._events.removeListener)
	      this.emit('removeListener', type, listener);

	  } else if (isObject(list)) {
	    for (i = length; i-- > 0;) {
	      if (list[i] === listener ||
	          (list[i].listener && list[i].listener === listener)) {
	        position = i;
	        break;
	      }
	    }

	    if (position < 0)
	      return this;

	    if (list.length === 1) {
	      list.length = 0;
	      delete this._events[type];
	    } else {
	      list.splice(position, 1);
	    }

	    if (this._events.removeListener)
	      this.emit('removeListener', type, listener);
	  }

	  return this;
	};

	EventEmitter.prototype.removeAllListeners = function(type) {
	  var key, listeners;

	  if (!this._events)
	    return this;

	  // not listening for removeListener, no need to emit
	  if (!this._events.removeListener) {
	    if (arguments.length === 0)
	      this._events = {};
	    else if (this._events[type])
	      delete this._events[type];
	    return this;
	  }

	  // emit removeListener for all listeners on all events
	  if (arguments.length === 0) {
	    for (key in this._events) {
	      if (key === 'removeListener') continue;
	      this.removeAllListeners(key);
	    }
	    this.removeAllListeners('removeListener');
	    this._events = {};
	    return this;
	  }

	  listeners = this._events[type];

	  if (isFunction(listeners)) {
	    this.removeListener(type, listeners);
	  } else if (listeners) {
	    // LIFO order
	    while (listeners.length)
	      this.removeListener(type, listeners[listeners.length - 1]);
	  }
	  delete this._events[type];

	  return this;
	};

	EventEmitter.prototype.listeners = function(type) {
	  var ret;
	  if (!this._events || !this._events[type])
	    ret = [];
	  else if (isFunction(this._events[type]))
	    ret = [this._events[type]];
	  else
	    ret = this._events[type].slice();
	  return ret;
	};

	EventEmitter.prototype.listenerCount = function(type) {
	  if (this._events) {
	    var evlistener = this._events[type];

	    if (isFunction(evlistener))
	      return 1;
	    else if (evlistener)
	      return evlistener.length;
	  }
	  return 0;
	};

	EventEmitter.listenerCount = function(emitter, type) {
	  return emitter.listenerCount(type);
	};

	function isFunction(arg) {
	  return typeof arg === 'function';
	}

	function isNumber(arg) {
	  return typeof arg === 'number';
	}

	function isObject(arg) {
	  return typeof arg === 'object' && arg !== null;
	}

	function isUndefined(arg) {
	  return arg === void 0;
	}


/***/ }),
/* 770 */
/***/ (function(module, exports) {

	"use strict";

	/**
	 * Copyright (c) 2013-present, Facebook, Inc.
	 *
	 * This source code is licensed under the MIT license found in the
	 * LICENSE file in the root directory of this source tree.
	 *
	 * @typechecks
	 */

	var _hyphenPattern = /-(.)/g;

	/**
	 * Camelcases a hyphenated string, for example:
	 *
	 *   > camelize('background-color')
	 *   < "backgroundColor"
	 *
	 * @param {string} string
	 * @return {string}
	 */
	function camelize(string) {
	  return string.replace(_hyphenPattern, function (_, character) {
	    return character.toUpperCase();
	  });
	}

	module.exports = camelize;

/***/ }),
/* 771 */
/***/ (function(module, exports, __webpack_require__) {

	/**
	 * Copyright (c) 2013-present, Facebook, Inc.
	 *
	 * This source code is licensed under the MIT license found in the
	 * LICENSE file in the root directory of this source tree.
	 *
	 * @typechecks
	 */

	'use strict';

	var camelize = __webpack_require__(770);

	var msPattern = /^-ms-/;

	/**
	 * Camelcases a hyphenated CSS property name, for example:
	 *
	 *   > camelizeStyleName('background-color')
	 *   < "backgroundColor"
	 *   > camelizeStyleName('-moz-transition')
	 *   < "MozTransition"
	 *   > camelizeStyleName('-ms-transition')
	 *   < "msTransition"
	 *
	 * As Andi Smith suggests
	 * (http://www.andismith.com/blog/2012/02/modernizr-prefixed/), an `-ms` prefix
	 * is converted to lowercase `ms`.
	 *
	 * @param {string} string
	 * @return {string}
	 */
	function camelizeStyleName(string) {
	  return camelize(string.replace(msPattern, 'ms-'));
	}

	module.exports = camelizeStyleName;

/***/ }),
/* 772 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';

	/**
	 * Copyright (c) 2013-present, Facebook, Inc.
	 *
	 * This source code is licensed under the MIT license found in the
	 * LICENSE file in the root directory of this source tree.
	 *
	 * 
	 */

	var isTextNode = __webpack_require__(780);

	/*eslint-disable no-bitwise */

	/**
	 * Checks if a given DOM node contains or is another DOM node.
	 */
	function containsNode(outerNode, innerNode) {
	  if (!outerNode || !innerNode) {
	    return false;
	  } else if (outerNode === innerNode) {
	    return true;
	  } else if (isTextNode(outerNode)) {
	    return false;
	  } else if (isTextNode(innerNode)) {
	    return containsNode(outerNode, innerNode.parentNode);
	  } else if ('contains' in outerNode) {
	    return outerNode.contains(innerNode);
	  } else if (outerNode.compareDocumentPosition) {
	    return !!(outerNode.compareDocumentPosition(innerNode) & 16);
	  } else {
	    return false;
	  }
	}

	module.exports = containsNode;

/***/ }),
/* 773 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';

	/**
	 * Copyright (c) 2013-present, Facebook, Inc.
	 *
	 * This source code is licensed under the MIT license found in the
	 * LICENSE file in the root directory of this source tree.
	 *
	 * @typechecks
	 */

	var invariant = __webpack_require__(7);

	/**
	 * Convert array-like objects to arrays.
	 *
	 * This API assumes the caller knows the contents of the data type. For less
	 * well defined inputs use createArrayFromMixed.
	 *
	 * @param {object|function|filelist} obj
	 * @return {array}
	 */
	function toArray(obj) {
	  var length = obj.length;

	  // Some browsers builtin objects can report typeof 'function' (e.g. NodeList
	  // in old versions of Safari).
	  !(!Array.isArray(obj) && (typeof obj === 'object' || typeof obj === 'function')) ? (undefined) !== 'production' ? invariant(false, 'toArray: Array-like object expected') : invariant(false) : void 0;

	  !(typeof length === 'number') ? (undefined) !== 'production' ? invariant(false, 'toArray: Object needs a length property') : invariant(false) : void 0;

	  !(length === 0 || length - 1 in obj) ? (undefined) !== 'production' ? invariant(false, 'toArray: Object should have keys for indices') : invariant(false) : void 0;

	  !(typeof obj.callee !== 'function') ? (undefined) !== 'production' ? invariant(false, 'toArray: Object can\'t be `arguments`. Use rest params ' + '(function(...args) {}) or Array.from() instead.') : invariant(false) : void 0;

	  // Old IE doesn't give collections access to hasOwnProperty. Assume inputs
	  // without method will throw during the slice call and skip straight to the
	  // fallback.
	  if (obj.hasOwnProperty) {
	    try {
	      return Array.prototype.slice.call(obj);
	    } catch (e) {
	      // IE < 9 does not support Array#slice on collections objects
	    }
	  }

	  // Fall back to copying key by key. This assumes all keys have a value,
	  // so will not preserve sparsely populated inputs.
	  var ret = Array(length);
	  for (var ii = 0; ii < length; ii++) {
	    ret[ii] = obj[ii];
	  }
	  return ret;
	}

	/**
	 * Perform a heuristic test to determine if an object is "array-like".
	 *
	 *   A monk asked Joshu, a Zen master, "Has a dog Buddha nature?"
	 *   Joshu replied: "Mu."
	 *
	 * This function determines if its argument has "array nature": it returns
	 * true if the argument is an actual array, an `arguments' object, or an
	 * HTMLCollection (e.g. node.childNodes or node.getElementsByTagName()).
	 *
	 * It will return false for other array-like objects like Filelist.
	 *
	 * @param {*} obj
	 * @return {boolean}
	 */
	function hasArrayNature(obj) {
	  return (
	    // not null/false
	    !!obj && (
	    // arrays are objects, NodeLists are functions in Safari
	    typeof obj == 'object' || typeof obj == 'function') &&
	    // quacks like an array
	    'length' in obj &&
	    // not window
	    !('setInterval' in obj) &&
	    // no DOM node should be considered an array-like
	    // a 'select' element has 'length' and 'item' properties on IE8
	    typeof obj.nodeType != 'number' && (
	    // a real array
	    Array.isArray(obj) ||
	    // arguments
	    'callee' in obj ||
	    // HTMLCollection/NodeList
	    'item' in obj)
	  );
	}

	/**
	 * Ensure that the argument is an array by wrapping it in an array if it is not.
	 * Creates a copy of the argument if it is already an array.
	 *
	 * This is mostly useful idiomatically:
	 *
	 *   var createArrayFromMixed = require('createArrayFromMixed');
	 *
	 *   function takesOneOrMoreThings(things) {
	 *     things = createArrayFromMixed(things);
	 *     ...
	 *   }
	 *
	 * This allows you to treat `things' as an array, but accept scalars in the API.
	 *
	 * If you need to convert an array-like object, like `arguments`, into an array
	 * use toArray instead.
	 *
	 * @param {*} obj
	 * @return {array}
	 */
	function createArrayFromMixed(obj) {
	  if (!hasArrayNature(obj)) {
	    return [obj];
	  } else if (Array.isArray(obj)) {
	    return obj.slice();
	  } else {
	    return toArray(obj);
	  }
	}

	module.exports = createArrayFromMixed;

/***/ }),
/* 774 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';

	/**
	 * Copyright (c) 2013-present, Facebook, Inc.
	 *
	 * This source code is licensed under the MIT license found in the
	 * LICENSE file in the root directory of this source tree.
	 *
	 * @typechecks
	 */

	/*eslint-disable fb-www/unsafe-html*/

	var ExecutionEnvironment = __webpack_require__(24);

	var createArrayFromMixed = __webpack_require__(773);
	var getMarkupWrap = __webpack_require__(775);
	var invariant = __webpack_require__(7);

	/**
	 * Dummy container used to render all markup.
	 */
	var dummyNode = ExecutionEnvironment.canUseDOM ? document.createElement('div') : null;

	/**
	 * Pattern used by `getNodeName`.
	 */
	var nodeNamePattern = /^\s*<(\w+)/;

	/**
	 * Extracts the `nodeName` of the first element in a string of markup.
	 *
	 * @param {string} markup String of markup.
	 * @return {?string} Node name of the supplied markup.
	 */
	function getNodeName(markup) {
	  var nodeNameMatch = markup.match(nodeNamePattern);
	  return nodeNameMatch && nodeNameMatch[1].toLowerCase();
	}

	/**
	 * Creates an array containing the nodes rendered from the supplied markup. The
	 * optionally supplied `handleScript` function will be invoked once for each
	 * <script> element that is rendered. If no `handleScript` function is supplied,
	 * an exception is thrown if any <script> elements are rendered.
	 *
	 * @param {string} markup A string of valid HTML markup.
	 * @param {?function} handleScript Invoked once for each rendered <script>.
	 * @return {array<DOMElement|DOMTextNode>} An array of rendered nodes.
	 */
	function createNodesFromMarkup(markup, handleScript) {
	  var node = dummyNode;
	  !!!dummyNode ? (undefined) !== 'production' ? invariant(false, 'createNodesFromMarkup dummy not initialized') : invariant(false) : void 0;
	  var nodeName = getNodeName(markup);

	  var wrap = nodeName && getMarkupWrap(nodeName);
	  if (wrap) {
	    node.innerHTML = wrap[1] + markup + wrap[2];

	    var wrapDepth = wrap[0];
	    while (wrapDepth--) {
	      node = node.lastChild;
	    }
	  } else {
	    node.innerHTML = markup;
	  }

	  var scripts = node.getElementsByTagName('script');
	  if (scripts.length) {
	    !handleScript ? (undefined) !== 'production' ? invariant(false, 'createNodesFromMarkup(...): Unexpected <script> element rendered.') : invariant(false) : void 0;
	    createArrayFromMixed(scripts).forEach(handleScript);
	  }

	  var nodes = Array.from(node.childNodes);
	  while (node.lastChild) {
	    node.removeChild(node.lastChild);
	  }
	  return nodes;
	}

	module.exports = createNodesFromMarkup;

/***/ }),
/* 775 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';

	/**
	 * Copyright (c) 2013-present, Facebook, Inc.
	 *
	 * This source code is licensed under the MIT license found in the
	 * LICENSE file in the root directory of this source tree.
	 *
	 */

	/*eslint-disable fb-www/unsafe-html */

	var ExecutionEnvironment = __webpack_require__(24);

	var invariant = __webpack_require__(7);

	/**
	 * Dummy container used to detect which wraps are necessary.
	 */
	var dummyNode = ExecutionEnvironment.canUseDOM ? document.createElement('div') : null;

	/**
	 * Some browsers cannot use `innerHTML` to render certain elements standalone,
	 * so we wrap them, render the wrapped nodes, then extract the desired node.
	 *
	 * In IE8, certain elements cannot render alone, so wrap all elements ('*').
	 */

	var shouldWrap = {};

	var selectWrap = [1, '<select multiple="true">', '</select>'];
	var tableWrap = [1, '<table>', '</table>'];
	var trWrap = [3, '<table><tbody><tr>', '</tr></tbody></table>'];

	var svgWrap = [1, '<svg xmlns="http://www.w3.org/2000/svg">', '</svg>'];

	var markupWrap = {
	  '*': [1, '?<div>', '</div>'],

	  'area': [1, '<map>', '</map>'],
	  'col': [2, '<table><tbody></tbody><colgroup>', '</colgroup></table>'],
	  'legend': [1, '<fieldset>', '</fieldset>'],
	  'param': [1, '<object>', '</object>'],
	  'tr': [2, '<table><tbody>', '</tbody></table>'],

	  'optgroup': selectWrap,
	  'option': selectWrap,

	  'caption': tableWrap,
	  'colgroup': tableWrap,
	  'tbody': tableWrap,
	  'tfoot': tableWrap,
	  'thead': tableWrap,

	  'td': trWrap,
	  'th': trWrap
	};

	// Initialize the SVG elements since we know they'll always need to be wrapped
	// consistently. If they are created inside a <div> they will be initialized in
	// the wrong namespace (and will not display).
	var svgElements = ['circle', 'clipPath', 'defs', 'ellipse', 'g', 'image', 'line', 'linearGradient', 'mask', 'path', 'pattern', 'polygon', 'polyline', 'radialGradient', 'rect', 'stop', 'text', 'tspan'];
	svgElements.forEach(function (nodeName) {
	  markupWrap[nodeName] = svgWrap;
	  shouldWrap[nodeName] = true;
	});

	/**
	 * Gets the markup wrap configuration for the supplied `nodeName`.
	 *
	 * NOTE: This lazily detects which wraps are necessary for the current browser.
	 *
	 * @param {string} nodeName Lowercase `nodeName`.
	 * @return {?array} Markup wrap configuration, if applicable.
	 */
	function getMarkupWrap(nodeName) {
	  !!!dummyNode ? (undefined) !== 'production' ? invariant(false, 'Markup wrapping node not initialized') : invariant(false) : void 0;
	  if (!markupWrap.hasOwnProperty(nodeName)) {
	    nodeName = '*';
	  }
	  if (!shouldWrap.hasOwnProperty(nodeName)) {
	    if (nodeName === '*') {
	      dummyNode.innerHTML = '<link />';
	    } else {
	      dummyNode.innerHTML = '<' + nodeName + '></' + nodeName + '>';
	    }
	    shouldWrap[nodeName] = !dummyNode.firstChild;
	  }
	  return shouldWrap[nodeName] ? markupWrap[nodeName] : null;
	}

	module.exports = getMarkupWrap;

/***/ }),
/* 776 */
/***/ (function(module, exports) {

	/**
	 * Copyright (c) 2013-present, Facebook, Inc.
	 *
	 * This source code is licensed under the MIT license found in the
	 * LICENSE file in the root directory of this source tree.
	 *
	 * @typechecks
	 */

	'use strict';

	/**
	 * Gets the scroll position of the supplied element or window.
	 *
	 * The return values are unbounded, unlike `getScrollPosition`. This means they
	 * may be negative or exceed the element boundaries (which is possible using
	 * inertial scrolling).
	 *
	 * @param {DOMWindow|DOMElement} scrollable
	 * @return {object} Map with `x` and `y` keys.
	 */

	function getUnboundedScrollPosition(scrollable) {
	  if (scrollable.Window && scrollable instanceof scrollable.Window) {
	    return {
	      x: scrollable.pageXOffset || scrollable.document.documentElement.scrollLeft,
	      y: scrollable.pageYOffset || scrollable.document.documentElement.scrollTop
	    };
	  }
	  return {
	    x: scrollable.scrollLeft,
	    y: scrollable.scrollTop
	  };
	}

	module.exports = getUnboundedScrollPosition;

/***/ }),
/* 777 */
/***/ (function(module, exports) {

	'use strict';

	/**
	 * Copyright (c) 2013-present, Facebook, Inc.
	 *
	 * This source code is licensed under the MIT license found in the
	 * LICENSE file in the root directory of this source tree.
	 *
	 * @typechecks
	 */

	var _uppercasePattern = /([A-Z])/g;

	/**
	 * Hyphenates a camelcased string, for example:
	 *
	 *   > hyphenate('backgroundColor')
	 *   < "background-color"
	 *
	 * For CSS style names, use `hyphenateStyleName` instead which works properly
	 * with all vendor prefixes, including `ms`.
	 *
	 * @param {string} string
	 * @return {string}
	 */
	function hyphenate(string) {
	  return string.replace(_uppercasePattern, '-$1').toLowerCase();
	}

	module.exports = hyphenate;

/***/ }),
/* 778 */
/***/ (function(module, exports, __webpack_require__) {

	/**
	 * Copyright (c) 2013-present, Facebook, Inc.
	 *
	 * This source code is licensed under the MIT license found in the
	 * LICENSE file in the root directory of this source tree.
	 *
	 * @typechecks
	 */

	'use strict';

	var hyphenate = __webpack_require__(777);

	var msPattern = /^ms-/;

	/**
	 * Hyphenates a camelcased CSS property name, for example:
	 *
	 *   > hyphenateStyleName('backgroundColor')
	 *   < "background-color"
	 *   > hyphenateStyleName('MozTransition')
	 *   < "-moz-transition"
	 *   > hyphenateStyleName('msTransition')
	 *   < "-ms-transition"
	 *
	 * As Modernizr suggests (http://modernizr.com/docs/#prefixed), an `ms` prefix
	 * is converted to `-ms-`.
	 *
	 * @param {string} string
	 * @return {string}
	 */
	function hyphenateStyleName(string) {
	  return hyphenate(string).replace(msPattern, '-ms-');
	}

	module.exports = hyphenateStyleName;

/***/ }),
/* 779 */
/***/ (function(module, exports) {

	'use strict';

	/**
	 * Copyright (c) 2013-present, Facebook, Inc.
	 *
	 * This source code is licensed under the MIT license found in the
	 * LICENSE file in the root directory of this source tree.
	 *
	 * @typechecks
	 */

	/**
	 * @param {*} object The object to check.
	 * @return {boolean} Whether or not the object is a DOM node.
	 */
	function isNode(object) {
	  var doc = object ? object.ownerDocument || object : document;
	  var defaultView = doc.defaultView || window;
	  return !!(object && (typeof defaultView.Node === 'function' ? object instanceof defaultView.Node : typeof object === 'object' && typeof object.nodeType === 'number' && typeof object.nodeName === 'string'));
	}

	module.exports = isNode;

/***/ }),
/* 780 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';

	/**
	 * Copyright (c) 2013-present, Facebook, Inc.
	 *
	 * This source code is licensed under the MIT license found in the
	 * LICENSE file in the root directory of this source tree.
	 *
	 * @typechecks
	 */

	var isNode = __webpack_require__(779);

	/**
	 * @param {*} object The object to check.
	 * @return {boolean} Whether or not the object is a DOM text node.
	 */
	function isTextNode(object) {
	  return isNode(object) && object.nodeType == 3;
	}

	module.exports = isTextNode;

/***/ }),
/* 781 */
/***/ (function(module, exports) {

	/**
	 * Copyright (c) 2013-present, Facebook, Inc.
	 *
	 * This source code is licensed under the MIT license found in the
	 * LICENSE file in the root directory of this source tree.
	 *
	 * 
	 * @typechecks static-only
	 */

	'use strict';

	/**
	 * Memoizes the return value of a function that accepts one string argument.
	 */

	function memoizeStringOnly(callback) {
	  var cache = {};
	  return function (string) {
	    if (!cache.hasOwnProperty(string)) {
	      cache[string] = callback.call(this, string);
	    }
	    return cache[string];
	  };
	}

	module.exports = memoizeStringOnly;

/***/ }),
/* 782 */
/***/ (function(module, exports, __webpack_require__) {

	/**
	 * Copyright (c) 2013-present, Facebook, Inc.
	 *
	 * This source code is licensed under the MIT license found in the
	 * LICENSE file in the root directory of this source tree.
	 *
	 * @typechecks
	 */

	'use strict';

	var ExecutionEnvironment = __webpack_require__(24);

	var performance;

	if (ExecutionEnvironment.canUseDOM) {
	  performance = window.performance || window.msPerformance || window.webkitPerformance;
	}

	module.exports = performance || {};

/***/ }),
/* 783 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';

	/**
	 * Copyright (c) 2013-present, Facebook, Inc.
	 *
	 * This source code is licensed under the MIT license found in the
	 * LICENSE file in the root directory of this source tree.
	 *
	 * @typechecks
	 */

	var performance = __webpack_require__(782);

	var performanceNow;

	/**
	 * Detect if we can use `window.performance.now()` and gracefully fallback to
	 * `Date.now()` if it doesn't exist. We need to support Firefox < 15 for now
	 * because of Facebook's testing infrastructure.
	 */
	if (performance.now) {
	  performanceNow = function performanceNow() {
	    return performance.now();
	  };
	} else {
	  performanceNow = function performanceNow() {
	    return Date.now();
	  };
	}

	module.exports = performanceNow;

/***/ }),
/* 784 */
/***/ (function(module, exports) {

	'use strict';

	/* eslint no-invalid-this: 1 */

	var ERROR_MESSAGE = 'Function.prototype.bind called on incompatible ';
	var slice = Array.prototype.slice;
	var toStr = Object.prototype.toString;
	var funcType = '[object Function]';

	module.exports = function bind(that) {
	    var target = this;
	    if (typeof target !== 'function' || toStr.call(target) !== funcType) {
	        throw new TypeError(ERROR_MESSAGE + target);
	    }
	    var args = slice.call(arguments, 1);

	    var bound;
	    var binder = function () {
	        if (this instanceof bound) {
	            var result = target.apply(
	                this,
	                args.concat(slice.call(arguments))
	            );
	            if (Object(result) === result) {
	                return result;
	            }
	            return this;
	        } else {
	            return target.apply(
	                that,
	                args.concat(slice.call(arguments))
	            );
	        }
	    };

	    var boundLength = Math.max(0, target.length - args.length);
	    var boundArgs = [];
	    for (var i = 0; i < boundLength; i++) {
	        boundArgs.push('$' + i);
	    }

	    bound = Function('binder', 'return function (' + boundArgs.join(',') + '){ return binder.apply(this,arguments); }')(binder);

	    if (target.prototype) {
	        var Empty = function Empty() {};
	        Empty.prototype = target.prototype;
	        bound.prototype = new Empty();
	        Empty.prototype = null;
	    }

	    return bound;
	};


/***/ }),
/* 785 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';

	var origSymbol = typeof Symbol !== 'undefined' && Symbol;
	var hasSymbolSham = __webpack_require__(327);

	module.exports = function hasNativeSymbols() {
		if (typeof origSymbol !== 'function') { return false; }
		if (typeof Symbol !== 'function') { return false; }
		if (typeof origSymbol('foo') !== 'symbol') { return false; }
		if (typeof Symbol('bar') !== 'symbol') { return false; }

		return hasSymbolSham();
	};


/***/ }),
/* 786 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';

	var bind = __webpack_require__(208);

	module.exports = bind.call(Function.call, Object.prototype.hasOwnProperty);


/***/ }),
/* 787 */
/***/ (function(module, exports) {

	"use strict";

	exports.__esModule = true;
	var _slice = Array.prototype.slice;
	exports.loopAsync = loopAsync;

	function loopAsync(turns, work, callback) {
	  var currentTurn = 0,
	      isDone = false;
	  var sync = false,
	      hasNext = false,
	      doneArgs = undefined;

	  function done() {
	    isDone = true;
	    if (sync) {
	      // Iterate instead of recursing if possible.
	      doneArgs = [].concat(_slice.call(arguments));
	      return;
	    }

	    callback.apply(this, arguments);
	  }

	  function next() {
	    if (isDone) {
	      return;
	    }

	    hasNext = true;
	    if (sync) {
	      // Iterate instead of recursing if possible.
	      return;
	    }

	    sync = true;

	    while (!isDone && currentTurn < turns && hasNext) {
	      hasNext = false;
	      work.call(this, currentTurn++, next, done);
	    }

	    sync = false;

	    if (isDone) {
	      // This means the loop finished synchronously.
	      callback.apply(this, doneArgs);
	      return;
	    }

	    if (currentTurn >= turns && hasNext) {
	      isDone = true;
	      callback();
	    }
	  }

	  next();
	}

/***/ }),
/* 788 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';

	exports.__esModule = true;

	var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }

	var _invariant = __webpack_require__(29);

	var _invariant2 = _interopRequireDefault(_invariant);

	var _Actions = __webpack_require__(94);

	var _PathUtils = __webpack_require__(82);

	var _ExecutionEnvironment = __webpack_require__(141);

	var _DOMUtils = __webpack_require__(209);

	var _DOMStateStorage = __webpack_require__(328);

	var _createDOMHistory = __webpack_require__(329);

	var _createDOMHistory2 = _interopRequireDefault(_createDOMHistory);

	/**
	 * Creates and returns a history object that uses HTML5's history API
	 * (pushState, replaceState, and the popstate event) to manage history.
	 * This is the recommended method of managing history in browsers because
	 * it provides the cleanest URLs.
	 *
	 * Note: In browsers that do not support the HTML5 history API full
	 * page reloads will be used to preserve URLs.
	 */
	function createBrowserHistory() {
	  var options = arguments.length <= 0 || arguments[0] === undefined ? {} : arguments[0];

	  !_ExecutionEnvironment.canUseDOM ? (undefined) !== 'production' ? _invariant2['default'](false, 'Browser history needs a DOM') : _invariant2['default'](false) : undefined;

	  var forceRefresh = options.forceRefresh;

	  var isSupported = _DOMUtils.supportsHistory();
	  var useRefresh = !isSupported || forceRefresh;

	  function getCurrentLocation(historyState) {
	    try {
	      historyState = historyState || window.history.state || {};
	    } catch (e) {
	      historyState = {};
	    }

	    var path = _DOMUtils.getWindowPath();
	    var _historyState = historyState;
	    var key = _historyState.key;

	    var state = undefined;
	    if (key) {
	      state = _DOMStateStorage.readState(key);
	    } else {
	      state = null;
	      key = history.createKey();

	      if (isSupported) window.history.replaceState(_extends({}, historyState, { key: key }), null);
	    }

	    var location = _PathUtils.parsePath(path);

	    return history.createLocation(_extends({}, location, { state: state }), undefined, key);
	  }

	  function startPopStateListener(_ref) {
	    var transitionTo = _ref.transitionTo;

	    function popStateListener(event) {
	      if (event.state === undefined) return; // Ignore extraneous popstate events in WebKit.

	      transitionTo(getCurrentLocation(event.state));
	    }

	    _DOMUtils.addEventListener(window, 'popstate', popStateListener);

	    return function () {
	      _DOMUtils.removeEventListener(window, 'popstate', popStateListener);
	    };
	  }

	  function finishTransition(location) {
	    var basename = location.basename;
	    var pathname = location.pathname;
	    var search = location.search;
	    var hash = location.hash;
	    var state = location.state;
	    var action = location.action;
	    var key = location.key;

	    if (action === _Actions.POP) return; // Nothing to do.

	    _DOMStateStorage.saveState(key, state);

	    var path = (basename || '') + pathname + search + hash;
	    var historyState = {
	      key: key
	    };

	    if (action === _Actions.PUSH) {
	      if (useRefresh) {
	        window.location.href = path;
	        return false; // Prevent location update.
	      } else {
	          window.history.pushState(historyState, null, path);
	        }
	    } else {
	      // REPLACE
	      if (useRefresh) {
	        window.location.replace(path);
	        return false; // Prevent location update.
	      } else {
	          window.history.replaceState(historyState, null, path);
	        }
	    }
	  }

	  var history = _createDOMHistory2['default'](_extends({}, options, {
	    getCurrentLocation: getCurrentLocation,
	    finishTransition: finishTransition,
	    saveState: _DOMStateStorage.saveState
	  }));

	  var listenerCount = 0,
	      stopPopStateListener = undefined;

	  function listenBefore(listener) {
	    if (++listenerCount === 1) stopPopStateListener = startPopStateListener(history);

	    var unlisten = history.listenBefore(listener);

	    return function () {
	      unlisten();

	      if (--listenerCount === 0) stopPopStateListener();
	    };
	  }

	  function listen(listener) {
	    if (++listenerCount === 1) stopPopStateListener = startPopStateListener(history);

	    var unlisten = history.listen(listener);

	    return function () {
	      unlisten();

	      if (--listenerCount === 0) stopPopStateListener();
	    };
	  }

	  // deprecated
	  function registerTransitionHook(hook) {
	    if (++listenerCount === 1) stopPopStateListener = startPopStateListener(history);

	    history.registerTransitionHook(hook);
	  }

	  // deprecated
	  function unregisterTransitionHook(hook) {
	    history.unregisterTransitionHook(hook);

	    if (--listenerCount === 0) stopPopStateListener();
	  }

	  return _extends({}, history, {
	    listenBefore: listenBefore,
	    listen: listen,
	    registerTransitionHook: registerTransitionHook,
	    unregisterTransitionHook: unregisterTransitionHook
	  });
	}

	exports['default'] = createBrowserHistory;
	module.exports = exports['default'];

/***/ }),
/* 789 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';

	exports.__esModule = true;

	var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }

	var _warning = __webpack_require__(54);

	var _warning2 = _interopRequireDefault(_warning);

	var _Actions = __webpack_require__(94);

	var _PathUtils = __webpack_require__(82);

	function createLocation() {
	  var location = arguments.length <= 0 || arguments[0] === undefined ? '/' : arguments[0];
	  var action = arguments.length <= 1 || arguments[1] === undefined ? _Actions.POP : arguments[1];
	  var key = arguments.length <= 2 || arguments[2] === undefined ? null : arguments[2];

	  var _fourthArg = arguments.length <= 3 || arguments[3] === undefined ? null : arguments[3];

	  if (typeof location === 'string') location = _PathUtils.parsePath(location);

	  if (typeof action === 'object') {
	    (undefined) !== 'production' ? _warning2['default'](false, 'The state (2nd) argument to createLocation is deprecated; use a ' + 'location descriptor instead') : undefined;

	    location = _extends({}, location, { state: action });

	    action = key || _Actions.POP;
	    key = _fourthArg;
	  }

	  var pathname = location.pathname || '/';
	  var search = location.search || '';
	  var hash = location.hash || '';
	  var state = location.state || null;

	  return {
	    pathname: pathname,
	    search: search,
	    hash: hash,
	    state: state,
	    action: action,
	    key: key
	  };
	}

	exports['default'] = createLocation;
	module.exports = exports['default'];

/***/ }),
/* 790 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';

	exports.__esModule = true;

	var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }

	var _warning = __webpack_require__(54);

	var _warning2 = _interopRequireDefault(_warning);

	var _invariant = __webpack_require__(29);

	var _invariant2 = _interopRequireDefault(_invariant);

	var _PathUtils = __webpack_require__(82);

	var _Actions = __webpack_require__(94);

	var _createHistory = __webpack_require__(331);

	var _createHistory2 = _interopRequireDefault(_createHistory);

	function createStateStorage(entries) {
	  return entries.filter(function (entry) {
	    return entry.state;
	  }).reduce(function (memo, entry) {
	    memo[entry.key] = entry.state;
	    return memo;
	  }, {});
	}

	function createMemoryHistory() {
	  var options = arguments.length <= 0 || arguments[0] === undefined ? {} : arguments[0];

	  if (Array.isArray(options)) {
	    options = { entries: options };
	  } else if (typeof options === 'string') {
	    options = { entries: [options] };
	  }

	  var history = _createHistory2['default'](_extends({}, options, {
	    getCurrentLocation: getCurrentLocation,
	    finishTransition: finishTransition,
	    saveState: saveState,
	    go: go
	  }));

	  var _options = options;
	  var entries = _options.entries;
	  var current = _options.current;

	  if (typeof entries === 'string') {
	    entries = [entries];
	  } else if (!Array.isArray(entries)) {
	    entries = ['/'];
	  }

	  entries = entries.map(function (entry) {
	    var key = history.createKey();

	    if (typeof entry === 'string') return { pathname: entry, key: key };

	    if (typeof entry === 'object' && entry) return _extends({}, entry, { key: key });

	     true ? (undefined) !== 'production' ? _invariant2['default'](false, 'Unable to create history entry from %s', entry) : _invariant2['default'](false) : undefined;
	  });

	  if (current == null) {
	    current = entries.length - 1;
	  } else {
	    !(current >= 0 && current < entries.length) ? (undefined) !== 'production' ? _invariant2['default'](false, 'Current index must be >= 0 and < %s, was %s', entries.length, current) : _invariant2['default'](false) : undefined;
	  }

	  var storage = createStateStorage(entries);

	  function saveState(key, state) {
	    storage[key] = state;
	  }

	  function readState(key) {
	    return storage[key];
	  }

	  function getCurrentLocation() {
	    var entry = entries[current];
	    var basename = entry.basename;
	    var pathname = entry.pathname;
	    var search = entry.search;

	    var path = (basename || '') + pathname + (search || '');

	    var key = undefined,
	        state = undefined;
	    if (entry.key) {
	      key = entry.key;
	      state = readState(key);
	    } else {
	      key = history.createKey();
	      state = null;
	      entry.key = key;
	    }

	    var location = _PathUtils.parsePath(path);

	    return history.createLocation(_extends({}, location, { state: state }), undefined, key);
	  }

	  function canGo(n) {
	    var index = current + n;
	    return index >= 0 && index < entries.length;
	  }

	  function go(n) {
	    if (n) {
	      if (!canGo(n)) {
	        (undefined) !== 'production' ? _warning2['default'](false, 'Cannot go(%s) there is not enough history', n) : undefined;
	        return;
	      }

	      current += n;

	      var currentLocation = getCurrentLocation();

	      // change action to POP
	      history.transitionTo(_extends({}, currentLocation, { action: _Actions.POP }));
	    }
	  }

	  function finishTransition(location) {
	    switch (location.action) {
	      case _Actions.PUSH:
	        current += 1;

	        // if we are not on the top of stack
	        // remove rest and push new
	        if (current < entries.length) entries.splice(current);

	        entries.push(location);
	        saveState(location.key, location.state);
	        break;
	      case _Actions.REPLACE:
	        entries[current] = location;
	        saveState(location.key, location.state);
	        break;
	    }
	  }

	  return history;
	}

	exports['default'] = createMemoryHistory;
	module.exports = exports['default'];

/***/ }),
/* 791 */
/***/ (function(module, exports) {

	/**
	 * Copyright 2015, Yahoo! Inc.
	 * Copyrights licensed under the New BSD License. See the accompanying LICENSE file for terms.
	 */
	'use strict';

	var REACT_STATICS = {
	    childContextTypes: true,
	    contextTypes: true,
	    defaultProps: true,
	    displayName: true,
	    getDefaultProps: true,
	    mixins: true,
	    propTypes: true,
	    type: true
	};

	var KNOWN_STATICS = {
	    name: true,
	    length: true,
	    prototype: true,
	    caller: true,
	    arguments: true,
	    arity: true
	};

	var isGetOwnPropertySymbolsAvailable = typeof Object.getOwnPropertySymbols === 'function';

	module.exports = function hoistNonReactStatics(targetComponent, sourceComponent, customStatics) {
	    if (typeof sourceComponent !== 'string') { // don't hoist over string (html) components
	        var keys = Object.getOwnPropertyNames(sourceComponent);

	        /* istanbul ignore else */
	        if (isGetOwnPropertySymbolsAvailable) {
	            keys = keys.concat(Object.getOwnPropertySymbols(sourceComponent));
	        }

	        for (var i = 0; i < keys.length; ++i) {
	            if (!REACT_STATICS[keys[i]] && !KNOWN_STATICS[keys[i]] && (!customStatics || !customStatics[keys[i]])) {
	                try {
	                    targetComponent[keys[i]] = sourceComponent[keys[i]];
	                } catch (error) {

	                }
	            }
	        }
	    }

	    return targetComponent;
	};


/***/ }),
/* 792 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';

	var hasToStringTag = typeof Symbol === 'function' && typeof Symbol.toStringTag === 'symbol';
	var callBound = __webpack_require__(286);

	var $toString = callBound('Object.prototype.toString');

	var isStandardArguments = function isArguments(value) {
		if (hasToStringTag && value && typeof value === 'object' && Symbol.toStringTag in value) {
			return false;
		}
		return $toString(value) === '[object Arguments]';
	};

	var isLegacyArguments = function isArguments(value) {
		if (isStandardArguments(value)) {
			return true;
		}
		return value !== null &&
			typeof value === 'object' &&
			typeof value.length === 'number' &&
			value.length >= 0 &&
			$toString(value) !== '[object Array]' &&
			$toString(value.callee) === '[object Function]';
	};

	var supportsStandardArguments = (function () {
		return isStandardArguments(arguments);
	}());

	isStandardArguments.isLegacyArguments = isLegacyArguments; // for tests

	module.exports = supportsStandardArguments ? isStandardArguments : isLegacyArguments;


/***/ }),
/* 793 */
/***/ (function(module, exports) {

	'use strict';

	var getDay = Date.prototype.getDay;
	var tryDateObject = function tryDateGetDayCall(value) {
		try {
			getDay.call(value);
			return true;
		} catch (e) {
			return false;
		}
	};

	var toStr = Object.prototype.toString;
	var dateClass = '[object Date]';
	var hasToStringTag = typeof Symbol === 'function' && !!Symbol.toStringTag;

	module.exports = function isDateObject(value) {
		if (typeof value !== 'object' || value === null) {
			return false;
		}
		return hasToStringTag ? tryDateObject(value) : toStr.call(value) === dateClass;
	};


/***/ }),
/* 794 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';

	var callBound = __webpack_require__(286);
	var hasSymbols = __webpack_require__(327)();
	var hasToStringTag = hasSymbols && !!Symbol.toStringTag;
	var has;
	var $exec;
	var isRegexMarker;
	var badStringifier;

	if (hasToStringTag) {
		has = callBound('Object.prototype.hasOwnProperty');
		$exec = callBound('RegExp.prototype.exec');
		isRegexMarker = {};

		var throwRegexMarker = function () {
			throw isRegexMarker;
		};
		badStringifier = {
			toString: throwRegexMarker,
			valueOf: throwRegexMarker
		};

		if (typeof Symbol.toPrimitive === 'symbol') {
			badStringifier[Symbol.toPrimitive] = throwRegexMarker;
		}
	}

	var $toString = callBound('Object.prototype.toString');
	var gOPD = Object.getOwnPropertyDescriptor;
	var regexClass = '[object RegExp]';

	module.exports = hasToStringTag
		// eslint-disable-next-line consistent-return
		? function isRegex(value) {
			if (!value || typeof value !== 'object') {
				return false;
			}

			var descriptor = gOPD(value, 'lastIndex');
			var hasLastIndexDataProperty = descriptor && has(descriptor, 'value');
			if (!hasLastIndexDataProperty) {
				return false;
			}

			try {
				$exec(value, badStringifier);
			} catch (e) {
				return e === isRegexMarker;
			}
		}
		: function isRegex(value) {
			// In older browsers, typeof regex incorrectly returns 'function'
			if (!value || (typeof value !== 'object' && typeof value !== 'function')) {
				return false;
			}

			return $toString(value) === regexClass;
		};


/***/ }),
/* 795 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';

	var define = __webpack_require__(111);
	var callBind = __webpack_require__(178);

	var implementation = __webpack_require__(333);
	var getPolyfill = __webpack_require__(334);
	var shim = __webpack_require__(796);

	var polyfill = callBind(getPolyfill(), Object);

	define(polyfill, {
		getPolyfill: getPolyfill,
		implementation: implementation,
		shim: shim
	});

	module.exports = polyfill;


/***/ }),
/* 796 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';

	var getPolyfill = __webpack_require__(334);
	var define = __webpack_require__(111);

	module.exports = function shimObjectIs() {
		var polyfill = getPolyfill();
		define(Object, { is: polyfill }, {
			is: function testObjectIs() {
				return Object.is !== polyfill;
			}
		});
		return polyfill;
	};


/***/ }),
/* 797 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';

	var keysShim;
	if (!Object.keys) {
		// modified from https://github.com/es-shims/es5-shim
		var has = Object.prototype.hasOwnProperty;
		var toStr = Object.prototype.toString;
		var isArgs = __webpack_require__(336); // eslint-disable-line global-require
		var isEnumerable = Object.prototype.propertyIsEnumerable;
		var hasDontEnumBug = !isEnumerable.call({ toString: null }, 'toString');
		var hasProtoEnumBug = isEnumerable.call(function () {}, 'prototype');
		var dontEnums = [
			'toString',
			'toLocaleString',
			'valueOf',
			'hasOwnProperty',
			'isPrototypeOf',
			'propertyIsEnumerable',
			'constructor'
		];
		var equalsConstructorPrototype = function (o) {
			var ctor = o.constructor;
			return ctor && ctor.prototype === o;
		};
		var excludedKeys = {
			$applicationCache: true,
			$console: true,
			$external: true,
			$frame: true,
			$frameElement: true,
			$frames: true,
			$innerHeight: true,
			$innerWidth: true,
			$onmozfullscreenchange: true,
			$onmozfullscreenerror: true,
			$outerHeight: true,
			$outerWidth: true,
			$pageXOffset: true,
			$pageYOffset: true,
			$parent: true,
			$scrollLeft: true,
			$scrollTop: true,
			$scrollX: true,
			$scrollY: true,
			$self: true,
			$webkitIndexedDB: true,
			$webkitStorageInfo: true,
			$window: true
		};
		var hasAutomationEqualityBug = (function () {
			/* global window */
			if (typeof window === 'undefined') { return false; }
			for (var k in window) {
				try {
					if (!excludedKeys['$' + k] && has.call(window, k) && window[k] !== null && typeof window[k] === 'object') {
						try {
							equalsConstructorPrototype(window[k]);
						} catch (e) {
							return true;
						}
					}
				} catch (e) {
					return true;
				}
			}
			return false;
		}());
		var equalsConstructorPrototypeIfNotBuggy = function (o) {
			/* global window */
			if (typeof window === 'undefined' || !hasAutomationEqualityBug) {
				return equalsConstructorPrototype(o);
			}
			try {
				return equalsConstructorPrototype(o);
			} catch (e) {
				return false;
			}
		};

		keysShim = function keys(object) {
			var isObject = object !== null && typeof object === 'object';
			var isFunction = toStr.call(object) === '[object Function]';
			var isArguments = isArgs(object);
			var isString = isObject && toStr.call(object) === '[object String]';
			var theKeys = [];

			if (!isObject && !isFunction && !isArguments) {
				throw new TypeError('Object.keys called on a non-object');
			}

			var skipProto = hasProtoEnumBug && isFunction;
			if (isString && object.length > 0 && !has.call(object, 0)) {
				for (var i = 0; i < object.length; ++i) {
					theKeys.push(String(i));
				}
			}

			if (isArguments && object.length > 0) {
				for (var j = 0; j < object.length; ++j) {
					theKeys.push(String(j));
				}
			} else {
				for (var name in object) {
					if (!(skipProto && name === 'prototype') && has.call(object, name)) {
						theKeys.push(String(name));
					}
				}
			}

			if (hasDontEnumBug) {
				var skipConstructor = equalsConstructorPrototypeIfNotBuggy(object);

				for (var k = 0; k < dontEnums.length; ++k) {
					if (!(skipConstructor && dontEnums[k] === 'constructor') && has.call(object, dontEnums[k])) {
						theKeys.push(dontEnums[k]);
					}
				}
			}
			return theKeys;
		};
	}
	module.exports = keysShim;


/***/ }),
/* 798 */
/***/ (function(module, exports, __webpack_require__) {

	/**
	 * Copyright (c) 2013-present, Facebook, Inc.
	 *
	 * This source code is licensed under the MIT license found in the
	 * LICENSE file in the root directory of this source tree.
	 */

	'use strict';

	var printWarning = function() {};

	if ((undefined) !== 'production') {
	  var ReactPropTypesSecret = __webpack_require__(213);
	  var loggedTypeFailures = {};
	  var has = Function.call.bind(Object.prototype.hasOwnProperty);

	  printWarning = function(text) {
	    var message = 'Warning: ' + text;
	    if (typeof console !== 'undefined') {
	      console.error(message);
	    }
	    try {
	      // --- Welcome to debugging React ---
	      // This error was thrown as a convenience so that you can use this stack
	      // to find the callsite that caused this warning to fire.
	      throw new Error(message);
	    } catch (x) {}
	  };
	}

	/**
	 * Assert that the values match with the type specs.
	 * Error messages are memorized and will only be shown once.
	 *
	 * @param {object} typeSpecs Map of name to a ReactPropType
	 * @param {object} values Runtime values that need to be type-checked
	 * @param {string} location e.g. "prop", "context", "child context"
	 * @param {string} componentName Name of the component for error messages.
	 * @param {?Function} getStack Returns the component stack.
	 * @private
	 */
	function checkPropTypes(typeSpecs, values, location, componentName, getStack) {
	  if ((undefined) !== 'production') {
	    for (var typeSpecName in typeSpecs) {
	      if (has(typeSpecs, typeSpecName)) {
	        var error;
	        // Prop type validation may throw. In case they do, we don't want to
	        // fail the render phase where it didn't fail before. So we log it.
	        // After these have been cleaned up, we'll let them throw.
	        try {
	          // This is intentionally an invariant that gets caught. It's the same
	          // behavior as without this statement except with a better message.
	          if (typeof typeSpecs[typeSpecName] !== 'function') {
	            var err = Error(
	              (componentName || 'React class') + ': ' + location + ' type `' + typeSpecName + '` is invalid; ' +
	              'it must be a function, usually from the `prop-types` package, but received `' + typeof typeSpecs[typeSpecName] + '`.'
	            );
	            err.name = 'Invariant Violation';
	            throw err;
	          }
	          error = typeSpecs[typeSpecName](values, typeSpecName, componentName, location, null, ReactPropTypesSecret);
	        } catch (ex) {
	          error = ex;
	        }
	        if (error && !(error instanceof Error)) {
	          printWarning(
	            (componentName || 'React class') + ': type specification of ' +
	            location + ' `' + typeSpecName + '` is invalid; the type checker ' +
	            'function must return `null` or an `Error` but returned a ' + typeof error + '. ' +
	            'You may have forgotten to pass an argument to the type checker ' +
	            'creator (arrayOf, instanceOf, objectOf, oneOf, oneOfType, and ' +
	            'shape all require an argument).'
	          );
	        }
	        if (error instanceof Error && !(error.message in loggedTypeFailures)) {
	          // Only monitor this failure once because there tends to be a lot of the
	          // same error.
	          loggedTypeFailures[error.message] = true;

	          var stack = getStack ? getStack() : '';

	          printWarning(
	            'Failed ' + location + ' type: ' + error.message + (stack != null ? stack : '')
	          );
	        }
	      }
	    }
	  }
	}

	/**
	 * Resets warning cache when testing.
	 *
	 * @private
	 */
	checkPropTypes.resetWarningCache = function() {
	  if ((undefined) !== 'production') {
	    loggedTypeFailures = {};
	  }
	}

	module.exports = checkPropTypes;


/***/ }),
/* 799 */
/***/ (function(module, exports, __webpack_require__) {

	/**
	 * Copyright (c) 2013-present, Facebook, Inc.
	 *
	 * This source code is licensed under the MIT license found in the
	 * LICENSE file in the root directory of this source tree.
	 */

	'use strict';

	var ReactPropTypesSecret = __webpack_require__(213);

	function emptyFunction() {}
	function emptyFunctionWithReset() {}
	emptyFunctionWithReset.resetWarningCache = emptyFunction;

	module.exports = function() {
	  function shim(props, propName, componentName, location, propFullName, secret) {
	    if (secret === ReactPropTypesSecret) {
	      // It is still safe when called from React.
	      return;
	    }
	    var err = new Error(
	      'Calling PropTypes validators directly is not supported by the `prop-types` package. ' +
	      'Use PropTypes.checkPropTypes() to call them. ' +
	      'Read more at http://fb.me/use-check-prop-types'
	    );
	    err.name = 'Invariant Violation';
	    throw err;
	  };
	  shim.isRequired = shim;
	  function getShim() {
	    return shim;
	  };
	  // Important!
	  // Keep this list in sync with production version in `./factoryWithTypeCheckers.js`.
	  var ReactPropTypes = {
	    array: shim,
	    bool: shim,
	    func: shim,
	    number: shim,
	    object: shim,
	    string: shim,
	    symbol: shim,

	    any: shim,
	    arrayOf: getShim,
	    element: shim,
	    elementType: shim,
	    instanceOf: getShim,
	    node: shim,
	    objectOf: getShim,
	    oneOf: getShim,
	    oneOfType: getShim,
	    shape: getShim,
	    exact: getShim,

	    checkPropTypes: emptyFunctionWithReset,
	    resetWarningCache: emptyFunction
	  };

	  ReactPropTypes.PropTypes = ReactPropTypes;

	  return ReactPropTypes;
	};


/***/ }),
/* 800 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';
	var strictUriEncode = __webpack_require__(1240);

	exports.extract = function (str) {
		return str.split('?')[1] || '';
	};

	exports.parse = function (str) {
		if (typeof str !== 'string') {
			return {};
		}

		str = str.trim().replace(/^(\?|#|&)/, '');

		if (!str) {
			return {};
		}

		return str.split('&').reduce(function (ret, param) {
			var parts = param.replace(/\+/g, ' ').split('=');
			// Firefox (pre 40) decodes `%3D` to `=`
			// https://github.com/sindresorhus/query-string/pull/37
			var key = parts.shift();
			var val = parts.length > 0 ? parts.join('=') : undefined;

			key = decodeURIComponent(key);

			// missing `=` should be `null`:
			// http://w3.org/TR/2012/WD-url-20120524/#collect-url-parameters
			val = val === undefined ? null : decodeURIComponent(val);

			if (!ret.hasOwnProperty(key)) {
				ret[key] = val;
			} else if (Array.isArray(ret[key])) {
				ret[key].push(val);
			} else {
				ret[key] = [ret[key], val];
			}

			return ret;
		}, {});
	};

	exports.stringify = function (obj) {
		return obj ? Object.keys(obj).sort().map(function (key) {
			var val = obj[key];

			if (val === undefined) {
				return '';
			}

			if (val === null) {
				return key;
			}

			if (Array.isArray(val)) {
				return val.slice().sort().map(function (val2) {
					return strictUriEncode(key) + '=' + strictUriEncode(val2);
				}).join('&');
			}

			return strictUriEncode(key) + '=' + strictUriEncode(val);
		}).filter(function (x) {
			return x.length > 0;
		}).join('&') : '';
	};


/***/ }),
/* 801 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';

	module.exports = __webpack_require__(815);


/***/ }),
/* 802 */
/***/ (function(module, exports) {

	/**
	 * Copyright (c) 2013-present, Facebook, Inc.
	 *
	 * This source code is licensed under the MIT license found in the
	 * LICENSE file in the root directory of this source tree.
	 *
	 */

	'use strict';

	var ARIADOMPropertyConfig = {
	  Properties: {
	    // Global States and Properties
	    'aria-current': 0, // state
	    'aria-details': 0,
	    'aria-disabled': 0, // state
	    'aria-hidden': 0, // state
	    'aria-invalid': 0, // state
	    'aria-keyshortcuts': 0,
	    'aria-label': 0,
	    'aria-roledescription': 0,
	    // Widget Attributes
	    'aria-autocomplete': 0,
	    'aria-checked': 0,
	    'aria-expanded': 0,
	    'aria-haspopup': 0,
	    'aria-level': 0,
	    'aria-modal': 0,
	    'aria-multiline': 0,
	    'aria-multiselectable': 0,
	    'aria-orientation': 0,
	    'aria-placeholder': 0,
	    'aria-pressed': 0,
	    'aria-readonly': 0,
	    'aria-required': 0,
	    'aria-selected': 0,
	    'aria-sort': 0,
	    'aria-valuemax': 0,
	    'aria-valuemin': 0,
	    'aria-valuenow': 0,
	    'aria-valuetext': 0,
	    // Live Region Attributes
	    'aria-atomic': 0,
	    'aria-busy': 0,
	    'aria-live': 0,
	    'aria-relevant': 0,
	    // Drag-and-Drop Attributes
	    'aria-dropeffect': 0,
	    'aria-grabbed': 0,
	    // Relationship Attributes
	    'aria-activedescendant': 0,
	    'aria-colcount': 0,
	    'aria-colindex': 0,
	    'aria-colspan': 0,
	    'aria-controls': 0,
	    'aria-describedby': 0,
	    'aria-errormessage': 0,
	    'aria-flowto': 0,
	    'aria-labelledby': 0,
	    'aria-owns': 0,
	    'aria-posinset': 0,
	    'aria-rowcount': 0,
	    'aria-rowindex': 0,
	    'aria-rowspan': 0,
	    'aria-setsize': 0
	  },
	  DOMAttributeNames: {},
	  DOMPropertyNames: {}
	};

	module.exports = ARIADOMPropertyConfig;

/***/ }),
/* 803 */
/***/ (function(module, exports, __webpack_require__) {

	/**
	 * Copyright (c) 2013-present, Facebook, Inc.
	 *
	 * This source code is licensed under the MIT license found in the
	 * LICENSE file in the root directory of this source tree.
	 *
	 */

	'use strict';

	var ReactDOMComponentTree = __webpack_require__(21);

	var focusNode = __webpack_require__(324);

	var AutoFocusUtils = {
	  focusDOMComponent: function () {
	    focusNode(ReactDOMComponentTree.getNodeFromInstance(this));
	  }
	};

	module.exports = AutoFocusUtils;

/***/ }),
/* 804 */
/***/ (function(module, exports, __webpack_require__) {

	/**
	 * Copyright (c) 2013-present, Facebook, Inc.
	 *
	 * This source code is licensed under the MIT license found in the
	 * LICENSE file in the root directory of this source tree.
	 *
	 */

	'use strict';

	var EventPropagators = __webpack_require__(113);
	var ExecutionEnvironment = __webpack_require__(24);
	var FallbackCompositionState = __webpack_require__(810);
	var SyntheticCompositionEvent = __webpack_require__(853);
	var SyntheticInputEvent = __webpack_require__(856);

	var END_KEYCODES = [9, 13, 27, 32]; // Tab, Return, Esc, Space
	var START_KEYCODE = 229;

	var canUseCompositionEvent = ExecutionEnvironment.canUseDOM && 'CompositionEvent' in window;

	var documentMode = null;
	if (ExecutionEnvironment.canUseDOM && 'documentMode' in document) {
	  documentMode = document.documentMode;
	}

	// Webkit offers a very useful `textInput` event that can be used to
	// directly represent `beforeInput`. The IE `textinput` event is not as
	// useful, so we don't use it.
	var canUseTextInputEvent = ExecutionEnvironment.canUseDOM && 'TextEvent' in window && !documentMode && !isPresto();

	// In IE9+, we have access to composition events, but the data supplied
	// by the native compositionend event may be incorrect. Japanese ideographic
	// spaces, for instance (\u3000) are not recorded correctly.
	var useFallbackCompositionData = ExecutionEnvironment.canUseDOM && (!canUseCompositionEvent || documentMode && documentMode > 8 && documentMode <= 11);

	/**
	 * Opera <= 12 includes TextEvent in window, but does not fire
	 * text input events. Rely on keypress instead.
	 */
	function isPresto() {
	  var opera = window.opera;
	  return typeof opera === 'object' && typeof opera.version === 'function' && parseInt(opera.version(), 10) <= 12;
	}

	var SPACEBAR_CODE = 32;
	var SPACEBAR_CHAR = String.fromCharCode(SPACEBAR_CODE);

	// Events and their corresponding property names.
	var eventTypes = {
	  beforeInput: {
	    phasedRegistrationNames: {
	      bubbled: 'onBeforeInput',
	      captured: 'onBeforeInputCapture'
	    },
	    dependencies: ['topCompositionEnd', 'topKeyPress', 'topTextInput', 'topPaste']
	  },
	  compositionEnd: {
	    phasedRegistrationNames: {
	      bubbled: 'onCompositionEnd',
	      captured: 'onCompositionEndCapture'
	    },
	    dependencies: ['topBlur', 'topCompositionEnd', 'topKeyDown', 'topKeyPress', 'topKeyUp', 'topMouseDown']
	  },
	  compositionStart: {
	    phasedRegistrationNames: {
	      bubbled: 'onCompositionStart',
	      captured: 'onCompositionStartCapture'
	    },
	    dependencies: ['topBlur', 'topCompositionStart', 'topKeyDown', 'topKeyPress', 'topKeyUp', 'topMouseDown']
	  },
	  compositionUpdate: {
	    phasedRegistrationNames: {
	      bubbled: 'onCompositionUpdate',
	      captured: 'onCompositionUpdateCapture'
	    },
	    dependencies: ['topBlur', 'topCompositionUpdate', 'topKeyDown', 'topKeyPress', 'topKeyUp', 'topMouseDown']
	  }
	};

	// Track whether we've ever handled a keypress on the space key.
	var hasSpaceKeypress = false;

	/**
	 * Return whether a native keypress event is assumed to be a command.
	 * This is required because Firefox fires `keypress` events for key commands
	 * (cut, copy, select-all, etc.) even though no character is inserted.
	 */
	function isKeypressCommand(nativeEvent) {
	  return (nativeEvent.ctrlKey || nativeEvent.altKey || nativeEvent.metaKey) &&
	  // ctrlKey && altKey is equivalent to AltGr, and is not a command.
	  !(nativeEvent.ctrlKey && nativeEvent.altKey);
	}

	/**
	 * Translate native top level events into event types.
	 *
	 * @param {string} topLevelType
	 * @return {object}
	 */
	function getCompositionEventType(topLevelType) {
	  switch (topLevelType) {
	    case 'topCompositionStart':
	      return eventTypes.compositionStart;
	    case 'topCompositionEnd':
	      return eventTypes.compositionEnd;
	    case 'topCompositionUpdate':
	      return eventTypes.compositionUpdate;
	  }
	}

	/**
	 * Does our fallback best-guess model think this event signifies that
	 * composition has begun?
	 *
	 * @param {string} topLevelType
	 * @param {object} nativeEvent
	 * @return {boolean}
	 */
	function isFallbackCompositionStart(topLevelType, nativeEvent) {
	  return topLevelType === 'topKeyDown' && nativeEvent.keyCode === START_KEYCODE;
	}

	/**
	 * Does our fallback mode think that this event is the end of composition?
	 *
	 * @param {string} topLevelType
	 * @param {object} nativeEvent
	 * @return {boolean}
	 */
	function isFallbackCompositionEnd(topLevelType, nativeEvent) {
	  switch (topLevelType) {
	    case 'topKeyUp':
	      // Command keys insert or clear IME input.
	      return END_KEYCODES.indexOf(nativeEvent.keyCode) !== -1;
	    case 'topKeyDown':
	      // Expect IME keyCode on each keydown. If we get any other
	      // code we must have exited earlier.
	      return nativeEvent.keyCode !== START_KEYCODE;
	    case 'topKeyPress':
	    case 'topMouseDown':
	    case 'topBlur':
	      // Events are not possible without cancelling IME.
	      return true;
	    default:
	      return false;
	  }
	}

	/**
	 * Google Input Tools provides composition data via a CustomEvent,
	 * with the `data` property populated in the `detail` object. If this
	 * is available on the event object, use it. If not, this is a plain
	 * composition event and we have nothing special to extract.
	 *
	 * @param {object} nativeEvent
	 * @return {?string}
	 */
	function getDataFromCustomEvent(nativeEvent) {
	  var detail = nativeEvent.detail;
	  if (typeof detail === 'object' && 'data' in detail) {
	    return detail.data;
	  }
	  return null;
	}

	// Track the current IME composition fallback object, if any.
	var currentComposition = null;

	/**
	 * @return {?object} A SyntheticCompositionEvent.
	 */
	function extractCompositionEvent(topLevelType, targetInst, nativeEvent, nativeEventTarget) {
	  var eventType;
	  var fallbackData;

	  if (canUseCompositionEvent) {
	    eventType = getCompositionEventType(topLevelType);
	  } else if (!currentComposition) {
	    if (isFallbackCompositionStart(topLevelType, nativeEvent)) {
	      eventType = eventTypes.compositionStart;
	    }
	  } else if (isFallbackCompositionEnd(topLevelType, nativeEvent)) {
	    eventType = eventTypes.compositionEnd;
	  }

	  if (!eventType) {
	    return null;
	  }

	  if (useFallbackCompositionData) {
	    // The current composition is stored statically and must not be
	    // overwritten while composition continues.
	    if (!currentComposition && eventType === eventTypes.compositionStart) {
	      currentComposition = FallbackCompositionState.getPooled(nativeEventTarget);
	    } else if (eventType === eventTypes.compositionEnd) {
	      if (currentComposition) {
	        fallbackData = currentComposition.getData();
	      }
	    }
	  }

	  var event = SyntheticCompositionEvent.getPooled(eventType, targetInst, nativeEvent, nativeEventTarget);

	  if (fallbackData) {
	    // Inject data generated from fallback path into the synthetic event.
	    // This matches the property of native CompositionEventInterface.
	    event.data = fallbackData;
	  } else {
	    var customData = getDataFromCustomEvent(nativeEvent);
	    if (customData !== null) {
	      event.data = customData;
	    }
	  }

	  EventPropagators.accumulateTwoPhaseDispatches(event);
	  return event;
	}

	/**
	 * @param {string} topLevelType Record from `EventConstants`.
	 * @param {object} nativeEvent Native browser event.
	 * @return {?string} The string corresponding to this `beforeInput` event.
	 */
	function getNativeBeforeInputChars(topLevelType, nativeEvent) {
	  switch (topLevelType) {
	    case 'topCompositionEnd':
	      return getDataFromCustomEvent(nativeEvent);
	    case 'topKeyPress':
	      /**
	       * If native `textInput` events are available, our goal is to make
	       * use of them. However, there is a special case: the spacebar key.
	       * In Webkit, preventing default on a spacebar `textInput` event
	       * cancels character insertion, but it *also* causes the browser
	       * to fall back to its default spacebar behavior of scrolling the
	       * page.
	       *
	       * Tracking at:
	       * https://code.google.com/p/chromium/issues/detail?id=355103
	       *
	       * To avoid this issue, use the keypress event as if no `textInput`
	       * event is available.
	       */
	      var which = nativeEvent.which;
	      if (which !== SPACEBAR_CODE) {
	        return null;
	      }

	      hasSpaceKeypress = true;
	      return SPACEBAR_CHAR;

	    case 'topTextInput':
	      // Record the characters to be added to the DOM.
	      var chars = nativeEvent.data;

	      // If it's a spacebar character, assume that we have already handled
	      // it at the keypress level and bail immediately. Android Chrome
	      // doesn't give us keycodes, so we need to blacklist it.
	      if (chars === SPACEBAR_CHAR && hasSpaceKeypress) {
	        return null;
	      }

	      return chars;

	    default:
	      // For other native event types, do nothing.
	      return null;
	  }
	}

	/**
	 * For browsers that do not provide the `textInput` event, extract the
	 * appropriate string to use for SyntheticInputEvent.
	 *
	 * @param {string} topLevelType Record from `EventConstants`.
	 * @param {object} nativeEvent Native browser event.
	 * @return {?string} The fallback string for this `beforeInput` event.
	 */
	function getFallbackBeforeInputChars(topLevelType, nativeEvent) {
	  // If we are currently composing (IME) and using a fallback to do so,
	  // try to extract the composed characters from the fallback object.
	  // If composition event is available, we extract a string only at
	  // compositionevent, otherwise extract it at fallback events.
	  if (currentComposition) {
	    if (topLevelType === 'topCompositionEnd' || !canUseCompositionEvent && isFallbackCompositionEnd(topLevelType, nativeEvent)) {
	      var chars = currentComposition.getData();
	      FallbackCompositionState.release(currentComposition);
	      currentComposition = null;
	      return chars;
	    }
	    return null;
	  }

	  switch (topLevelType) {
	    case 'topPaste':
	      // If a paste event occurs after a keypress, throw out the input
	      // chars. Paste events should not lead to BeforeInput events.
	      return null;
	    case 'topKeyPress':
	      /**
	       * As of v27, Firefox may fire keypress events even when no character
	       * will be inserted. A few possibilities:
	       *
	       * - `which` is `0`. Arrow keys, Esc key, etc.
	       *
	       * - `which` is the pressed key code, but no char is available.
	       *   Ex: 'AltGr + d` in Polish. There is no modified character for
	       *   this key combination and no character is inserted into the
	       *   document, but FF fires the keypress for char code `100` anyway.
	       *   No `input` event will occur.
	       *
	       * - `which` is the pressed key code, but a command combination is
	       *   being used. Ex: `Cmd+C`. No character is inserted, and no
	       *   `input` event will occur.
	       */
	      if (nativeEvent.which && !isKeypressCommand(nativeEvent)) {
	        return String.fromCharCode(nativeEvent.which);
	      }
	      return null;
	    case 'topCompositionEnd':
	      return useFallbackCompositionData ? null : nativeEvent.data;
	    default:
	      return null;
	  }
	}

	/**
	 * Extract a SyntheticInputEvent for `beforeInput`, based on either native
	 * `textInput` or fallback behavior.
	 *
	 * @return {?object} A SyntheticInputEvent.
	 */
	function extractBeforeInputEvent(topLevelType, targetInst, nativeEvent, nativeEventTarget) {
	  var chars;

	  if (canUseTextInputEvent) {
	    chars = getNativeBeforeInputChars(topLevelType, nativeEvent);
	  } else {
	    chars = getFallbackBeforeInputChars(topLevelType, nativeEvent);
	  }

	  // If no characters are being inserted, no BeforeInput event should
	  // be fired.
	  if (!chars) {
	    return null;
	  }

	  var event = SyntheticInputEvent.getPooled(eventTypes.beforeInput, targetInst, nativeEvent, nativeEventTarget);

	  event.data = chars;
	  EventPropagators.accumulateTwoPhaseDispatches(event);
	  return event;
	}

	/**
	 * Create an `onBeforeInput` event to match
	 * http://www.w3.org/TR/2013/WD-DOM-Level-3-Events-20131105/#events-inputevents.
	 *
	 * This event plugin is based on the native `textInput` event
	 * available in Chrome, Safari, Opera, and IE. This event fires after
	 * `onKeyPress` and `onCompositionEnd`, but before `onInput`.
	 *
	 * `beforeInput` is spec'd but not implemented in any browsers, and
	 * the `input` event does not provide any useful information about what has
	 * actually been added, contrary to the spec. Thus, `textInput` is the best
	 * available event to identify the characters that have actually been inserted
	 * into the target node.
	 *
	 * This plugin is also responsible for emitting `composition` events, thus
	 * allowing us to share composition fallback code for both `beforeInput` and
	 * `composition` event types.
	 */
	var BeforeInputEventPlugin = {
	  eventTypes: eventTypes,

	  extractEvents: function (topLevelType, targetInst, nativeEvent, nativeEventTarget) {
	    return [extractCompositionEvent(topLevelType, targetInst, nativeEvent, nativeEventTarget), extractBeforeInputEvent(topLevelType, targetInst, nativeEvent, nativeEventTarget)];
	  }
	};

	module.exports = BeforeInputEventPlugin;

/***/ }),
/* 805 */
/***/ (function(module, exports, __webpack_require__) {

	/**
	 * Copyright (c) 2013-present, Facebook, Inc.
	 *
	 * This source code is licensed under the MIT license found in the
	 * LICENSE file in the root directory of this source tree.
	 *
	 */

	'use strict';

	var CSSProperty = __webpack_require__(339);
	var ExecutionEnvironment = __webpack_require__(24);
	var ReactInstrumentation = __webpack_require__(40);

	var camelizeStyleName = __webpack_require__(771);
	var dangerousStyleValue = __webpack_require__(863);
	var hyphenateStyleName = __webpack_require__(778);
	var memoizeStringOnly = __webpack_require__(781);
	var warning = __webpack_require__(8);

	var processStyleName = memoizeStringOnly(function (styleName) {
	  return hyphenateStyleName(styleName);
	});

	var hasShorthandPropertyBug = false;
	var styleFloatAccessor = 'cssFloat';
	if (ExecutionEnvironment.canUseDOM) {
	  var tempStyle = document.createElement('div').style;
	  try {
	    // IE8 throws "Invalid argument." if resetting shorthand style properties.
	    tempStyle.font = '';
	  } catch (e) {
	    hasShorthandPropertyBug = true;
	  }
	  // IE8 only supports accessing cssFloat (standard) as styleFloat
	  if (document.documentElement.style.cssFloat === undefined) {
	    styleFloatAccessor = 'styleFloat';
	  }
	}

	if ((undefined) !== 'production') {
	  // 'msTransform' is correct, but the other prefixes should be capitalized
	  var badVendoredStyleNamePattern = /^(?:webkit|moz|o)[A-Z]/;

	  // style values shouldn't contain a semicolon
	  var badStyleValueWithSemicolonPattern = /;\s*$/;

	  var warnedStyleNames = {};
	  var warnedStyleValues = {};
	  var warnedForNaNValue = false;

	  var warnHyphenatedStyleName = function (name, owner) {
	    if (warnedStyleNames.hasOwnProperty(name) && warnedStyleNames[name]) {
	      return;
	    }

	    warnedStyleNames[name] = true;
	    (undefined) !== 'production' ? warning(false, 'Unsupported style property %s. Did you mean %s?%s', name, camelizeStyleName(name), checkRenderMessage(owner)) : void 0;
	  };

	  var warnBadVendoredStyleName = function (name, owner) {
	    if (warnedStyleNames.hasOwnProperty(name) && warnedStyleNames[name]) {
	      return;
	    }

	    warnedStyleNames[name] = true;
	    (undefined) !== 'production' ? warning(false, 'Unsupported vendor-prefixed style property %s. Did you mean %s?%s', name, name.charAt(0).toUpperCase() + name.slice(1), checkRenderMessage(owner)) : void 0;
	  };

	  var warnStyleValueWithSemicolon = function (name, value, owner) {
	    if (warnedStyleValues.hasOwnProperty(value) && warnedStyleValues[value]) {
	      return;
	    }

	    warnedStyleValues[value] = true;
	    (undefined) !== 'production' ? warning(false, "Style property values shouldn't contain a semicolon.%s " + 'Try "%s: %s" instead.', checkRenderMessage(owner), name, value.replace(badStyleValueWithSemicolonPattern, '')) : void 0;
	  };

	  var warnStyleValueIsNaN = function (name, value, owner) {
	    if (warnedForNaNValue) {
	      return;
	    }

	    warnedForNaNValue = true;
	    (undefined) !== 'production' ? warning(false, '`NaN` is an invalid value for the `%s` css style property.%s', name, checkRenderMessage(owner)) : void 0;
	  };

	  var checkRenderMessage = function (owner) {
	    if (owner) {
	      var name = owner.getName();
	      if (name) {
	        return ' Check the render method of `' + name + '`.';
	      }
	    }
	    return '';
	  };

	  /**
	   * @param {string} name
	   * @param {*} value
	   * @param {ReactDOMComponent} component
	   */
	  var warnValidStyle = function (name, value, component) {
	    var owner;
	    if (component) {
	      owner = component._currentElement._owner;
	    }
	    if (name.indexOf('-') > -1) {
	      warnHyphenatedStyleName(name, owner);
	    } else if (badVendoredStyleNamePattern.test(name)) {
	      warnBadVendoredStyleName(name, owner);
	    } else if (badStyleValueWithSemicolonPattern.test(value)) {
	      warnStyleValueWithSemicolon(name, value, owner);
	    }

	    if (typeof value === 'number' && isNaN(value)) {
	      warnStyleValueIsNaN(name, value, owner);
	    }
	  };
	}

	/**
	 * Operations for dealing with CSS properties.
	 */
	var CSSPropertyOperations = {
	  /**
	   * Serializes a mapping of style properties for use as inline styles:
	   *
	   *   > createMarkupForStyles({width: '200px', height: 0})
	   *   "width:200px;height:0;"
	   *
	   * Undefined values are ignored so that declarative programming is easier.
	   * The result should be HTML-escaped before insertion into the DOM.
	   *
	   * @param {object} styles
	   * @param {ReactDOMComponent} component
	   * @return {?string}
	   */
	  createMarkupForStyles: function (styles, component) {
	    var serialized = '';
	    for (var styleName in styles) {
	      if (!styles.hasOwnProperty(styleName)) {
	        continue;
	      }
	      var isCustomProperty = styleName.indexOf('--') === 0;
	      var styleValue = styles[styleName];
	      if ((undefined) !== 'production') {
	        if (!isCustomProperty) {
	          warnValidStyle(styleName, styleValue, component);
	        }
	      }
	      if (styleValue != null) {
	        serialized += processStyleName(styleName) + ':';
	        serialized += dangerousStyleValue(styleName, styleValue, component, isCustomProperty) + ';';
	      }
	    }
	    return serialized || null;
	  },

	  /**
	   * Sets the value for multiple styles on a node.  If a value is specified as
	   * '' (empty string), the corresponding style property will be unset.
	   *
	   * @param {DOMElement} node
	   * @param {object} styles
	   * @param {ReactDOMComponent} component
	   */
	  setValueForStyles: function (node, styles, component) {
	    if ((undefined) !== 'production') {
	      ReactInstrumentation.debugTool.onHostOperation({
	        instanceID: component._debugID,
	        type: 'update styles',
	        payload: styles
	      });
	    }

	    var style = node.style;
	    for (var styleName in styles) {
	      if (!styles.hasOwnProperty(styleName)) {
	        continue;
	      }
	      var isCustomProperty = styleName.indexOf('--') === 0;
	      if ((undefined) !== 'production') {
	        if (!isCustomProperty) {
	          warnValidStyle(styleName, styles[styleName], component);
	        }
	      }
	      var styleValue = dangerousStyleValue(styleName, styles[styleName], component, isCustomProperty);
	      if (styleName === 'float' || styleName === 'cssFloat') {
	        styleName = styleFloatAccessor;
	      }
	      if (isCustomProperty) {
	        style.setProperty(styleName, styleValue);
	      } else if (styleValue) {
	        style[styleName] = styleValue;
	      } else {
	        var expansion = hasShorthandPropertyBug && CSSProperty.shorthandPropertyExpansions[styleName];
	        if (expansion) {
	          // Shorthand property that IE8 won't like unsetting, so unset each
	          // component to placate it
	          for (var individualStyleName in expansion) {
	            style[individualStyleName] = '';
	          }
	        } else {
	          style[styleName] = '';
	        }
	      }
	    }
	  }
	};

	module.exports = CSSPropertyOperations;

/***/ }),
/* 806 */
/***/ (function(module, exports, __webpack_require__) {

	/**
	 * Copyright (c) 2013-present, Facebook, Inc.
	 *
	 * This source code is licensed under the MIT license found in the
	 * LICENSE file in the root directory of this source tree.
	 *
	 */

	'use strict';

	var EventPluginHub = __webpack_require__(112);
	var EventPropagators = __webpack_require__(113);
	var ExecutionEnvironment = __webpack_require__(24);
	var ReactDOMComponentTree = __webpack_require__(21);
	var ReactUpdates = __webpack_require__(55);
	var SyntheticEvent = __webpack_require__(60);

	var inputValueTracking = __webpack_require__(356);
	var getEventTarget = __webpack_require__(225);
	var isEventSupported = __webpack_require__(226);
	var isTextInputElement = __webpack_require__(358);

	var eventTypes = {
	  change: {
	    phasedRegistrationNames: {
	      bubbled: 'onChange',
	      captured: 'onChangeCapture'
	    },
	    dependencies: ['topBlur', 'topChange', 'topClick', 'topFocus', 'topInput', 'topKeyDown', 'topKeyUp', 'topSelectionChange']
	  }
	};

	function createAndAccumulateChangeEvent(inst, nativeEvent, target) {
	  var event = SyntheticEvent.getPooled(eventTypes.change, inst, nativeEvent, target);
	  event.type = 'change';
	  EventPropagators.accumulateTwoPhaseDispatches(event);
	  return event;
	}
	/**
	 * For IE shims
	 */
	var activeElement = null;
	var activeElementInst = null;

	/**
	 * SECTION: handle `change` event
	 */
	function shouldUseChangeEvent(elem) {
	  var nodeName = elem.nodeName && elem.nodeName.toLowerCase();
	  return nodeName === 'select' || nodeName === 'input' && elem.type === 'file';
	}

	var doesChangeEventBubble = false;
	if (ExecutionEnvironment.canUseDOM) {
	  // See `handleChange` comment below
	  doesChangeEventBubble = isEventSupported('change') && (!document.documentMode || document.documentMode > 8);
	}

	function manualDispatchChangeEvent(nativeEvent) {
	  var event = createAndAccumulateChangeEvent(activeElementInst, nativeEvent, getEventTarget(nativeEvent));

	  // If change and propertychange bubbled, we'd just bind to it like all the
	  // other events and have it go through ReactBrowserEventEmitter. Since it
	  // doesn't, we manually listen for the events and so we have to enqueue and
	  // process the abstract event manually.
	  //
	  // Batching is necessary here in order to ensure that all event handlers run
	  // before the next rerender (including event handlers attached to ancestor
	  // elements instead of directly on the input). Without this, controlled
	  // components don't work properly in conjunction with event bubbling because
	  // the component is rerendered and the value reverted before all the event
	  // handlers can run. See https://github.com/facebook/react/issues/708.
	  ReactUpdates.batchedUpdates(runEventInBatch, event);
	}

	function runEventInBatch(event) {
	  EventPluginHub.enqueueEvents(event);
	  EventPluginHub.processEventQueue(false);
	}

	function startWatchingForChangeEventIE8(target, targetInst) {
	  activeElement = target;
	  activeElementInst = targetInst;
	  activeElement.attachEvent('onchange', manualDispatchChangeEvent);
	}

	function stopWatchingForChangeEventIE8() {
	  if (!activeElement) {
	    return;
	  }
	  activeElement.detachEvent('onchange', manualDispatchChangeEvent);
	  activeElement = null;
	  activeElementInst = null;
	}

	function getInstIfValueChanged(targetInst, nativeEvent) {
	  var updated = inputValueTracking.updateValueIfChanged(targetInst);
	  var simulated = nativeEvent.simulated === true && ChangeEventPlugin._allowSimulatedPassThrough;

	  if (updated || simulated) {
	    return targetInst;
	  }
	}

	function getTargetInstForChangeEvent(topLevelType, targetInst) {
	  if (topLevelType === 'topChange') {
	    return targetInst;
	  }
	}

	function handleEventsForChangeEventIE8(topLevelType, target, targetInst) {
	  if (topLevelType === 'topFocus') {
	    // stopWatching() should be a noop here but we call it just in case we
	    // missed a blur event somehow.
	    stopWatchingForChangeEventIE8();
	    startWatchingForChangeEventIE8(target, targetInst);
	  } else if (topLevelType === 'topBlur') {
	    stopWatchingForChangeEventIE8();
	  }
	}

	/**
	 * SECTION: handle `input` event
	 */
	var isInputEventSupported = false;
	if (ExecutionEnvironment.canUseDOM) {
	  // IE9 claims to support the input event but fails to trigger it when
	  // deleting text, so we ignore its input events.

	  isInputEventSupported = isEventSupported('input') && (!document.documentMode || document.documentMode > 9);
	}

	/**
	 * (For IE <=9) Starts tracking propertychange events on the passed-in element
	 * and override the value property so that we can distinguish user events from
	 * value changes in JS.
	 */
	function startWatchingForValueChange(target, targetInst) {
	  activeElement = target;
	  activeElementInst = targetInst;
	  activeElement.attachEvent('onpropertychange', handlePropertyChange);
	}

	/**
	 * (For IE <=9) Removes the event listeners from the currently-tracked element,
	 * if any exists.
	 */
	function stopWatchingForValueChange() {
	  if (!activeElement) {
	    return;
	  }
	  activeElement.detachEvent('onpropertychange', handlePropertyChange);

	  activeElement = null;
	  activeElementInst = null;
	}

	/**
	 * (For IE <=9) Handles a propertychange event, sending a `change` event if
	 * the value of the active element has changed.
	 */
	function handlePropertyChange(nativeEvent) {
	  if (nativeEvent.propertyName !== 'value') {
	    return;
	  }
	  if (getInstIfValueChanged(activeElementInst, nativeEvent)) {
	    manualDispatchChangeEvent(nativeEvent);
	  }
	}

	function handleEventsForInputEventPolyfill(topLevelType, target, targetInst) {
	  if (topLevelType === 'topFocus') {
	    // In IE8, we can capture almost all .value changes by adding a
	    // propertychange handler and looking for events with propertyName
	    // equal to 'value'
	    // In IE9, propertychange fires for most input events but is buggy and
	    // doesn't fire when text is deleted, but conveniently, selectionchange
	    // appears to fire in all of the remaining cases so we catch those and
	    // forward the event if the value has changed
	    // In either case, we don't want to call the event handler if the value
	    // is changed from JS so we redefine a setter for `.value` that updates
	    // our activeElementValue variable, allowing us to ignore those changes
	    //
	    // stopWatching() should be a noop here but we call it just in case we
	    // missed a blur event somehow.
	    stopWatchingForValueChange();
	    startWatchingForValueChange(target, targetInst);
	  } else if (topLevelType === 'topBlur') {
	    stopWatchingForValueChange();
	  }
	}

	// For IE8 and IE9.
	function getTargetInstForInputEventPolyfill(topLevelType, targetInst, nativeEvent) {
	  if (topLevelType === 'topSelectionChange' || topLevelType === 'topKeyUp' || topLevelType === 'topKeyDown') {
	    // On the selectionchange event, the target is just document which isn't
	    // helpful for us so just check activeElement instead.
	    //
	    // 99% of the time, keydown and keyup aren't necessary. IE8 fails to fire
	    // propertychange on the first input event after setting `value` from a
	    // script and fires only keydown, keypress, keyup. Catching keyup usually
	    // gets it and catching keydown lets us fire an event for the first
	    // keystroke if user does a key repeat (it'll be a little delayed: right
	    // before the second keystroke). Other input methods (e.g., paste) seem to
	    // fire selectionchange normally.
	    return getInstIfValueChanged(activeElementInst, nativeEvent);
	  }
	}

	/**
	 * SECTION: handle `click` event
	 */
	function shouldUseClickEvent(elem) {
	  // Use the `click` event to detect changes to checkbox and radio inputs.
	  // This approach works across all browsers, whereas `change` does not fire
	  // until `blur` in IE8.
	  var nodeName = elem.nodeName;
	  return nodeName && nodeName.toLowerCase() === 'input' && (elem.type === 'checkbox' || elem.type === 'radio');
	}

	function getTargetInstForClickEvent(topLevelType, targetInst, nativeEvent) {
	  if (topLevelType === 'topClick') {
	    return getInstIfValueChanged(targetInst, nativeEvent);
	  }
	}

	function getTargetInstForInputOrChangeEvent(topLevelType, targetInst, nativeEvent) {
	  if (topLevelType === 'topInput' || topLevelType === 'topChange') {
	    return getInstIfValueChanged(targetInst, nativeEvent);
	  }
	}

	function handleControlledInputBlur(inst, node) {
	  // TODO: In IE, inst is occasionally null. Why?
	  if (inst == null) {
	    return;
	  }

	  // Fiber and ReactDOM keep wrapper state in separate places
	  var state = inst._wrapperState || node._wrapperState;

	  if (!state || !state.controlled || node.type !== 'number') {
	    return;
	  }

	  // If controlled, assign the value attribute to the current value on blur
	  var value = '' + node.value;
	  if (node.getAttribute('value') !== value) {
	    node.setAttribute('value', value);
	  }
	}

	/**
	 * This plugin creates an `onChange` event that normalizes change events
	 * across form elements. This event fires at a time when it's possible to
	 * change the element's value without seeing a flicker.
	 *
	 * Supported elements are:
	 * - input (see `isTextInputElement`)
	 * - textarea
	 * - select
	 */
	var ChangeEventPlugin = {
	  eventTypes: eventTypes,

	  _allowSimulatedPassThrough: true,
	  _isInputEventSupported: isInputEventSupported,

	  extractEvents: function (topLevelType, targetInst, nativeEvent, nativeEventTarget) {
	    var targetNode = targetInst ? ReactDOMComponentTree.getNodeFromInstance(targetInst) : window;

	    var getTargetInstFunc, handleEventFunc;
	    if (shouldUseChangeEvent(targetNode)) {
	      if (doesChangeEventBubble) {
	        getTargetInstFunc = getTargetInstForChangeEvent;
	      } else {
	        handleEventFunc = handleEventsForChangeEventIE8;
	      }
	    } else if (isTextInputElement(targetNode)) {
	      if (isInputEventSupported) {
	        getTargetInstFunc = getTargetInstForInputOrChangeEvent;
	      } else {
	        getTargetInstFunc = getTargetInstForInputEventPolyfill;
	        handleEventFunc = handleEventsForInputEventPolyfill;
	      }
	    } else if (shouldUseClickEvent(targetNode)) {
	      getTargetInstFunc = getTargetInstForClickEvent;
	    }

	    if (getTargetInstFunc) {
	      var inst = getTargetInstFunc(topLevelType, targetInst, nativeEvent);
	      if (inst) {
	        var event = createAndAccumulateChangeEvent(inst, nativeEvent, nativeEventTarget);
	        return event;
	      }
	    }

	    if (handleEventFunc) {
	      handleEventFunc(topLevelType, targetNode, targetInst);
	    }

	    // When blurring, set the value attribute for number inputs
	    if (topLevelType === 'topBlur') {
	      handleControlledInputBlur(targetInst, targetNode);
	    }
	  }
	};

	module.exports = ChangeEventPlugin;

/***/ }),
/* 807 */
/***/ (function(module, exports, __webpack_require__) {

	/**
	 * Copyright (c) 2013-present, Facebook, Inc.
	 *
	 * This source code is licensed under the MIT license found in the
	 * LICENSE file in the root directory of this source tree.
	 *
	 */

	'use strict';

	var _prodInvariant = __webpack_require__(13);

	var DOMLazyTree = __webpack_require__(95);
	var ExecutionEnvironment = __webpack_require__(24);

	var createNodesFromMarkup = __webpack_require__(774);
	var emptyFunction = __webpack_require__(53);
	var invariant = __webpack_require__(7);

	var Danger = {
	  /**
	   * Replaces a node with a string of markup at its current position within its
	   * parent. The markup must render into a single root node.
	   *
	   * @param {DOMElement} oldChild Child node to replace.
	   * @param {string} markup Markup to render in place of the child node.
	   * @internal
	   */
	  dangerouslyReplaceNodeWithMarkup: function (oldChild, markup) {
	    !ExecutionEnvironment.canUseDOM ? (undefined) !== 'production' ? invariant(false, 'dangerouslyReplaceNodeWithMarkup(...): Cannot render markup in a worker thread. Make sure `window` and `document` are available globally before requiring React when unit testing or use ReactDOMServer.renderToString() for server rendering.') : _prodInvariant('56') : void 0;
	    !markup ? (undefined) !== 'production' ? invariant(false, 'dangerouslyReplaceNodeWithMarkup(...): Missing markup.') : _prodInvariant('57') : void 0;
	    !(oldChild.nodeName !== 'HTML') ? (undefined) !== 'production' ? invariant(false, 'dangerouslyReplaceNodeWithMarkup(...): Cannot replace markup of the <html> node. This is because browser quirks make this unreliable and/or slow. If you want to render to the root you must use server rendering. See ReactDOMServer.renderToString().') : _prodInvariant('58') : void 0;

	    if (typeof markup === 'string') {
	      var newChild = createNodesFromMarkup(markup, emptyFunction)[0];
	      oldChild.parentNode.replaceChild(newChild, oldChild);
	    } else {
	      DOMLazyTree.replaceChildWithTree(oldChild, markup);
	    }
	  }
	};

	module.exports = Danger;

/***/ }),
/* 808 */
/***/ (function(module, exports) {

	/**
	 * Copyright (c) 2013-present, Facebook, Inc.
	 *
	 * This source code is licensed under the MIT license found in the
	 * LICENSE file in the root directory of this source tree.
	 *
	 */

	'use strict';

	/**
	 * Module that is injectable into `EventPluginHub`, that specifies a
	 * deterministic ordering of `EventPlugin`s. A convenient way to reason about
	 * plugins, without having to package every one of them. This is better than
	 * having plugins be ordered in the same order that they are injected because
	 * that ordering would be influenced by the packaging order.
	 * `ResponderEventPlugin` must occur before `SimpleEventPlugin` so that
	 * preventing default on events is convenient in `SimpleEventPlugin` handlers.
	 */

	var DefaultEventPluginOrder = ['ResponderEventPlugin', 'SimpleEventPlugin', 'TapEventPlugin', 'EnterLeaveEventPlugin', 'ChangeEventPlugin', 'SelectEventPlugin', 'BeforeInputEventPlugin'];

	module.exports = DefaultEventPluginOrder;

/***/ }),
/* 809 */
/***/ (function(module, exports, __webpack_require__) {

	/**
	 * Copyright (c) 2013-present, Facebook, Inc.
	 *
	 * This source code is licensed under the MIT license found in the
	 * LICENSE file in the root directory of this source tree.
	 *
	 */

	'use strict';

	var EventPropagators = __webpack_require__(113);
	var ReactDOMComponentTree = __webpack_require__(21);
	var SyntheticMouseEvent = __webpack_require__(146);

	var eventTypes = {
	  mouseEnter: {
	    registrationName: 'onMouseEnter',
	    dependencies: ['topMouseOut', 'topMouseOver']
	  },
	  mouseLeave: {
	    registrationName: 'onMouseLeave',
	    dependencies: ['topMouseOut', 'topMouseOver']
	  }
	};

	var EnterLeaveEventPlugin = {
	  eventTypes: eventTypes,

	  /**
	   * For almost every interaction we care about, there will be both a top-level
	   * `mouseover` and `mouseout` event that occurs. Only use `mouseout` so that
	   * we do not extract duplicate events. However, moving the mouse into the
	   * browser from outside will not fire a `mouseout` event. In this case, we use
	   * the `mouseover` top-level event.
	   */
	  extractEvents: function (topLevelType, targetInst, nativeEvent, nativeEventTarget) {
	    if (topLevelType === 'topMouseOver' && (nativeEvent.relatedTarget || nativeEvent.fromElement)) {
	      return null;
	    }
	    if (topLevelType !== 'topMouseOut' && topLevelType !== 'topMouseOver') {
	      // Must not be a mouse in or mouse out - ignoring.
	      return null;
	    }

	    var win;
	    if (nativeEventTarget.window === nativeEventTarget) {
	      // `nativeEventTarget` is probably a window object.
	      win = nativeEventTarget;
	    } else {
	      // TODO: Figure out why `ownerDocument` is sometimes undefined in IE8.
	      var doc = nativeEventTarget.ownerDocument;
	      if (doc) {
	        win = doc.defaultView || doc.parentWindow;
	      } else {
	        win = window;
	      }
	    }

	    var from;
	    var to;
	    if (topLevelType === 'topMouseOut') {
	      from = targetInst;
	      var related = nativeEvent.relatedTarget || nativeEvent.toElement;
	      to = related ? ReactDOMComponentTree.getClosestInstanceFromNode(related) : null;
	    } else {
	      // Moving to a node from outside the window.
	      from = null;
	      to = targetInst;
	    }

	    if (from === to) {
	      // Nothing pertains to our managed components.
	      return null;
	    }

	    var fromNode = from == null ? win : ReactDOMComponentTree.getNodeFromInstance(from);
	    var toNode = to == null ? win : ReactDOMComponentTree.getNodeFromInstance(to);

	    var leave = SyntheticMouseEvent.getPooled(eventTypes.mouseLeave, from, nativeEvent, nativeEventTarget);
	    leave.type = 'mouseleave';
	    leave.target = fromNode;
	    leave.relatedTarget = toNode;

	    var enter = SyntheticMouseEvent.getPooled(eventTypes.mouseEnter, to, nativeEvent, nativeEventTarget);
	    enter.type = 'mouseenter';
	    enter.target = toNode;
	    enter.relatedTarget = fromNode;

	    EventPropagators.accumulateEnterLeaveDispatches(leave, enter, from, to);

	    return [leave, enter];
	  }
	};

	module.exports = EnterLeaveEventPlugin;

/***/ }),
/* 810 */
/***/ (function(module, exports, __webpack_require__) {

	/**
	 * Copyright (c) 2013-present, Facebook, Inc.
	 *
	 * This source code is licensed under the MIT license found in the
	 * LICENSE file in the root directory of this source tree.
	 *
	 */

	'use strict';

	var _assign = __webpack_require__(19);

	var PooledClass = __webpack_require__(83);

	var getTextContentAccessor = __webpack_require__(355);

	/**
	 * This helper class stores information about text content of a target node,
	 * allowing comparison of content before and after a given event.
	 *
	 * Identify the node where selection currently begins, then observe
	 * both its text content and its current position in the DOM. Since the
	 * browser may natively replace the target node during composition, we can
	 * use its position to find its replacement.
	 *
	 * @param {DOMEventTarget} root
	 */
	function FallbackCompositionState(root) {
	  this._root = root;
	  this._startText = this.getText();
	  this._fallbackText = null;
	}

	_assign(FallbackCompositionState.prototype, {
	  destructor: function () {
	    this._root = null;
	    this._startText = null;
	    this._fallbackText = null;
	  },

	  /**
	   * Get current text of input.
	   *
	   * @return {string}
	   */
	  getText: function () {
	    if ('value' in this._root) {
	      return this._root.value;
	    }
	    return this._root[getTextContentAccessor()];
	  },

	  /**
	   * Determine the differing substring between the initially stored
	   * text content and the current content.
	   *
	   * @return {string}
	   */
	  getData: function () {
	    if (this._fallbackText) {
	      return this._fallbackText;
	    }

	    var start;
	    var startValue = this._startText;
	    var startLength = startValue.length;
	    var end;
	    var endValue = this.getText();
	    var endLength = endValue.length;

	    for (start = 0; start < startLength; start++) {
	      if (startValue[start] !== endValue[start]) {
	        break;
	      }
	    }

	    var minEnd = startLength - start;
	    for (end = 1; end <= minEnd; end++) {
	      if (startValue[startLength - end] !== endValue[endLength - end]) {
	        break;
	      }
	    }

	    var sliceTail = end > 1 ? 1 - end : undefined;
	    this._fallbackText = endValue.slice(start, sliceTail);
	    return this._fallbackText;
	  }
	});

	PooledClass.addPoolingTo(FallbackCompositionState);

	module.exports = FallbackCompositionState;

/***/ }),
/* 811 */
/***/ (function(module, exports, __webpack_require__) {

	/**
	 * Copyright (c) 2013-present, Facebook, Inc.
	 *
	 * This source code is licensed under the MIT license found in the
	 * LICENSE file in the root directory of this source tree.
	 *
	 */

	'use strict';

	var DOMProperty = __webpack_require__(65);

	var MUST_USE_PROPERTY = DOMProperty.injection.MUST_USE_PROPERTY;
	var HAS_BOOLEAN_VALUE = DOMProperty.injection.HAS_BOOLEAN_VALUE;
	var HAS_NUMERIC_VALUE = DOMProperty.injection.HAS_NUMERIC_VALUE;
	var HAS_POSITIVE_NUMERIC_VALUE = DOMProperty.injection.HAS_POSITIVE_NUMERIC_VALUE;
	var HAS_OVERLOADED_BOOLEAN_VALUE = DOMProperty.injection.HAS_OVERLOADED_BOOLEAN_VALUE;

	var HTMLDOMPropertyConfig = {
	  isCustomAttribute: RegExp.prototype.test.bind(new RegExp('^(data|aria)-[' + DOMProperty.ATTRIBUTE_NAME_CHAR + ']*$')),
	  Properties: {
	    /**
	     * Standard Properties
	     */
	    accept: 0,
	    acceptCharset: 0,
	    accessKey: 0,
	    action: 0,
	    allowFullScreen: HAS_BOOLEAN_VALUE,
	    allowTransparency: 0,
	    alt: 0,
	    // specifies target context for links with `preload` type
	    as: 0,
	    async: HAS_BOOLEAN_VALUE,
	    autoComplete: 0,
	    // autoFocus is polyfilled/normalized by AutoFocusUtils
	    // autoFocus: HAS_BOOLEAN_VALUE,
	    autoPlay: HAS_BOOLEAN_VALUE,
	    capture: HAS_BOOLEAN_VALUE,
	    cellPadding: 0,
	    cellSpacing: 0,
	    charSet: 0,
	    challenge: 0,
	    checked: MUST_USE_PROPERTY | HAS_BOOLEAN_VALUE,
	    cite: 0,
	    classID: 0,
	    className: 0,
	    cols: HAS_POSITIVE_NUMERIC_VALUE,
	    colSpan: 0,
	    content: 0,
	    contentEditable: 0,
	    contextMenu: 0,
	    controls: HAS_BOOLEAN_VALUE,
	    controlsList: 0,
	    coords: 0,
	    crossOrigin: 0,
	    data: 0, // For `<object />` acts as `src`.
	    dateTime: 0,
	    'default': HAS_BOOLEAN_VALUE,
	    defer: HAS_BOOLEAN_VALUE,
	    dir: 0,
	    disabled: HAS_BOOLEAN_VALUE,
	    download: HAS_OVERLOADED_BOOLEAN_VALUE,
	    draggable: 0,
	    encType: 0,
	    form: 0,
	    formAction: 0,
	    formEncType: 0,
	    formMethod: 0,
	    formNoValidate: HAS_BOOLEAN_VALUE,
	    formTarget: 0,
	    frameBorder: 0,
	    headers: 0,
	    height: 0,
	    hidden: HAS_BOOLEAN_VALUE,
	    high: 0,
	    href: 0,
	    hrefLang: 0,
	    htmlFor: 0,
	    httpEquiv: 0,
	    icon: 0,
	    id: 0,
	    inputMode: 0,
	    integrity: 0,
	    is: 0,
	    keyParams: 0,
	    keyType: 0,
	    kind: 0,
	    label: 0,
	    lang: 0,
	    list: 0,
	    loop: HAS_BOOLEAN_VALUE,
	    low: 0,
	    manifest: 0,
	    marginHeight: 0,
	    marginWidth: 0,
	    max: 0,
	    maxLength: 0,
	    media: 0,
	    mediaGroup: 0,
	    method: 0,
	    min: 0,
	    minLength: 0,
	    // Caution; `option.selected` is not updated if `select.multiple` is
	    // disabled with `removeAttribute`.
	    multiple: MUST_USE_PROPERTY | HAS_BOOLEAN_VALUE,
	    muted: MUST_USE_PROPERTY | HAS_BOOLEAN_VALUE,
	    name: 0,
	    nonce: 0,
	    noValidate: HAS_BOOLEAN_VALUE,
	    open: HAS_BOOLEAN_VALUE,
	    optimum: 0,
	    pattern: 0,
	    placeholder: 0,
	    playsInline: HAS_BOOLEAN_VALUE,
	    poster: 0,
	    preload: 0,
	    profile: 0,
	    radioGroup: 0,
	    readOnly: HAS_BOOLEAN_VALUE,
	    referrerPolicy: 0,
	    rel: 0,
	    required: HAS_BOOLEAN_VALUE,
	    reversed: HAS_BOOLEAN_VALUE,
	    role: 0,
	    rows: HAS_POSITIVE_NUMERIC_VALUE,
	    rowSpan: HAS_NUMERIC_VALUE,
	    sandbox: 0,
	    scope: 0,
	    scoped: HAS_BOOLEAN_VALUE,
	    scrolling: 0,
	    seamless: HAS_BOOLEAN_VALUE,
	    selected: MUST_USE_PROPERTY | HAS_BOOLEAN_VALUE,
	    shape: 0,
	    size: HAS_POSITIVE_NUMERIC_VALUE,
	    sizes: 0,
	    span: HAS_POSITIVE_NUMERIC_VALUE,
	    spellCheck: 0,
	    src: 0,
	    srcDoc: 0,
	    srcLang: 0,
	    srcSet: 0,
	    start: HAS_NUMERIC_VALUE,
	    step: 0,
	    style: 0,
	    summary: 0,
	    tabIndex: 0,
	    target: 0,
	    title: 0,
	    // Setting .type throws on non-<input> tags
	    type: 0,
	    useMap: 0,
	    value: 0,
	    width: 0,
	    wmode: 0,
	    wrap: 0,

	    /**
	     * RDFa Properties
	     */
	    about: 0,
	    datatype: 0,
	    inlist: 0,
	    prefix: 0,
	    // property is also supported for OpenGraph in meta tags.
	    property: 0,
	    resource: 0,
	    'typeof': 0,
	    vocab: 0,

	    /**
	     * Non-standard Properties
	     */
	    // autoCapitalize and autoCorrect are supported in Mobile Safari for
	    // keyboard hints.
	    autoCapitalize: 0,
	    autoCorrect: 0,
	    // autoSave allows WebKit/Blink to persist values of input fields on page reloads
	    autoSave: 0,
	    // color is for Safari mask-icon link
	    color: 0,
	    // itemProp, itemScope, itemType are for
	    // Microdata support. See http://schema.org/docs/gs.html
	    itemProp: 0,
	    itemScope: HAS_BOOLEAN_VALUE,
	    itemType: 0,
	    // itemID and itemRef are for Microdata support as well but
	    // only specified in the WHATWG spec document. See
	    // https://html.spec.whatwg.org/multipage/microdata.html#microdata-dom-api
	    itemID: 0,
	    itemRef: 0,
	    // results show looking glass icon and recent searches on input
	    // search fields in WebKit/Blink
	    results: 0,
	    // IE-only attribute that specifies security restrictions on an iframe
	    // as an alternative to the sandbox attribute on IE<10
	    security: 0,
	    // IE-only attribute that controls focus behavior
	    unselectable: 0
	  },
	  DOMAttributeNames: {
	    acceptCharset: 'accept-charset',
	    className: 'class',
	    htmlFor: 'for',
	    httpEquiv: 'http-equiv'
	  },
	  DOMPropertyNames: {},
	  DOMMutationMethods: {
	    value: function (node, value) {
	      if (value == null) {
	        return node.removeAttribute('value');
	      }

	      // Number inputs get special treatment due to some edge cases in
	      // Chrome. Let everything else assign the value attribute as normal.
	      // https://github.com/facebook/react/issues/7253#issuecomment-236074326
	      if (node.type !== 'number' || node.hasAttribute('value') === false) {
	        node.setAttribute('value', '' + value);
	      } else if (node.validity && !node.validity.badInput && node.ownerDocument.activeElement !== node) {
	        // Don't assign an attribute if validation reports bad
	        // input. Chrome will clear the value. Additionally, don't
	        // operate on inputs that have focus, otherwise Chrome might
	        // strip off trailing decimal places and cause the user's
	        // cursor position to jump to the beginning of the input.
	        //
	        // In ReactDOMInput, we have an onBlur event that will trigger
	        // this function again when focus is lost.
	        node.setAttribute('value', '' + value);
	      }
	    }
	  }
	};

	module.exports = HTMLDOMPropertyConfig;

/***/ }),
/* 812 */
/***/ (function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright (c) 2014-present, Facebook, Inc.
	 *
	 * This source code is licensed under the MIT license found in the
	 * LICENSE file in the root directory of this source tree.
	 *
	 */

	'use strict';

	var ReactReconciler = __webpack_require__(96);

	var instantiateReactComponent = __webpack_require__(357);
	var KeyEscapeUtils = __webpack_require__(217);
	var shouldUpdateReactComponent = __webpack_require__(227);
	var traverseAllChildren = __webpack_require__(360);
	var warning = __webpack_require__(8);

	var ReactComponentTreeHook;

	if (typeof process !== 'undefined' && process.env && (undefined) === 'test') {
	  // Temporary hack.
	  // Inline requires don't work well with Jest:
	  // https://github.com/facebook/react/issues/7240
	  // Remove the inline requires when we don't need them anymore:
	  // https://github.com/facebook/react/pull/7178
	  ReactComponentTreeHook = __webpack_require__(34);
	}

	function instantiateChild(childInstances, child, name, selfDebugID) {
	  // We found a component instance.
	  var keyUnique = childInstances[name] === undefined;
	  if ((undefined) !== 'production') {
	    if (!ReactComponentTreeHook) {
	      ReactComponentTreeHook = __webpack_require__(34);
	    }
	    if (!keyUnique) {
	      (undefined) !== 'production' ? warning(false, 'flattenChildren(...): Encountered two children with the same key, ' + '`%s`. Child keys must be unique; when two children share a key, only ' + 'the first child will be used.%s', KeyEscapeUtils.unescape(name), ReactComponentTreeHook.getStackAddendumByID(selfDebugID)) : void 0;
	    }
	  }
	  if (child != null && keyUnique) {
	    childInstances[name] = instantiateReactComponent(child, true);
	  }
	}

	/**
	 * ReactChildReconciler provides helpers for initializing or updating a set of
	 * children. Its output is suitable for passing it onto ReactMultiChild which
	 * does diffed reordering and insertion.
	 */
	var ReactChildReconciler = {
	  /**
	   * Generates a "mount image" for each of the supplied children. In the case
	   * of `ReactDOMComponent`, a mount image is a string of markup.
	   *
	   * @param {?object} nestedChildNodes Nested child maps.
	   * @return {?object} A set of child instances.
	   * @internal
	   */
	  instantiateChildren: function (nestedChildNodes, transaction, context, selfDebugID) // 0 in production and for roots
	  {
	    if (nestedChildNodes == null) {
	      return null;
	    }
	    var childInstances = {};

	    if ((undefined) !== 'production') {
	      traverseAllChildren(nestedChildNodes, function (childInsts, child, name) {
	        return instantiateChild(childInsts, child, name, selfDebugID);
	      }, childInstances);
	    } else {
	      traverseAllChildren(nestedChildNodes, instantiateChild, childInstances);
	    }
	    return childInstances;
	  },

	  /**
	   * Updates the rendered children and returns a new set of children.
	   *
	   * @param {?object} prevChildren Previously initialized set of children.
	   * @param {?object} nextChildren Flat child element maps.
	   * @param {ReactReconcileTransaction} transaction
	   * @param {object} context
	   * @return {?object} A new set of child instances.
	   * @internal
	   */
	  updateChildren: function (prevChildren, nextChildren, mountImages, removedNodes, transaction, hostParent, hostContainerInfo, context, selfDebugID) // 0 in production and for roots
	  {
	    // We currently don't have a way to track moves here but if we use iterators
	    // instead of for..in we can zip the iterators and check if an item has
	    // moved.
	    // TODO: If nothing has changed, return the prevChildren object so that we
	    // can quickly bailout if nothing has changed.
	    if (!nextChildren && !prevChildren) {
	      return;
	    }
	    var name;
	    var prevChild;
	    for (name in nextChildren) {
	      if (!nextChildren.hasOwnProperty(name)) {
	        continue;
	      }
	      prevChild = prevChildren && prevChildren[name];
	      var prevElement = prevChild && prevChild._currentElement;
	      var nextElement = nextChildren[name];
	      if (prevChild != null && shouldUpdateReactComponent(prevElement, nextElement)) {
	        ReactReconciler.receiveComponent(prevChild, nextElement, transaction, context);
	        nextChildren[name] = prevChild;
	      } else {
	        if (prevChild) {
	          removedNodes[name] = ReactReconciler.getHostNode(prevChild);
	          ReactReconciler.unmountComponent(prevChild, false);
	        }
	        // The child must be instantiated before it's mounted.
	        var nextChildInstance = instantiateReactComponent(nextElement, true);
	        nextChildren[name] = nextChildInstance;
	        // Creating mount image now ensures refs are resolved in right order
	        // (see https://github.com/facebook/react/pull/7101 for explanation).
	        var nextChildMountImage = ReactReconciler.mountComponent(nextChildInstance, transaction, hostParent, hostContainerInfo, context, selfDebugID);
	        mountImages.push(nextChildMountImage);
	      }
	    }
	    // Unmount children that are no longer present.
	    for (name in prevChildren) {
	      if (prevChildren.hasOwnProperty(name) && !(nextChildren && nextChildren.hasOwnProperty(name))) {
	        prevChild = prevChildren[name];
	        removedNodes[name] = ReactReconciler.getHostNode(prevChild);
	        ReactReconciler.unmountComponent(prevChild, false);
	      }
	    }
	  },

	  /**
	   * Unmounts all rendered children. This should be used to clean up children
	   * when this component is unmounted.
	   *
	   * @param {?object} renderedChildren Previously initialized set of children.
	   * @internal
	   */
	  unmountChildren: function (renderedChildren, safely) {
	    for (var name in renderedChildren) {
	      if (renderedChildren.hasOwnProperty(name)) {
	        var renderedChild = renderedChildren[name];
	        ReactReconciler.unmountComponent(renderedChild, safely);
	      }
	    }
	  }
	};

	module.exports = ReactChildReconciler;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(143)))

/***/ }),
/* 813 */
/***/ (function(module, exports, __webpack_require__) {

	/**
	 * Copyright (c) 2013-present, Facebook, Inc.
	 *
	 * This source code is licensed under the MIT license found in the
	 * LICENSE file in the root directory of this source tree.
	 *
	 */

	'use strict';

	var DOMChildrenOperations = __webpack_require__(214);
	var ReactDOMIDOperations = __webpack_require__(820);

	/**
	 * Abstracts away all functionality of the reconciler that requires knowledge of
	 * the browser context. TODO: These callers should be refactored to avoid the
	 * need for this injection.
	 */
	var ReactComponentBrowserEnvironment = {
	  processChildrenUpdates: ReactDOMIDOperations.dangerouslyProcessChildrenUpdates,

	  replaceNodeWithMarkup: DOMChildrenOperations.dangerouslyReplaceNodeWithMarkup
	};

	module.exports = ReactComponentBrowserEnvironment;

/***/ }),
/* 814 */
/***/ (function(module, exports, __webpack_require__) {

	/**
	 * Copyright (c) 2013-present, Facebook, Inc.
	 *
	 * This source code is licensed under the MIT license found in the
	 * LICENSE file in the root directory of this source tree.
	 *
	 */

	'use strict';

	var _prodInvariant = __webpack_require__(13),
	    _assign = __webpack_require__(19);

	var React = __webpack_require__(98);
	var ReactComponentEnvironment = __webpack_require__(219);
	var ReactCurrentOwner = __webpack_require__(56);
	var ReactErrorUtils = __webpack_require__(220);
	var ReactInstanceMap = __webpack_require__(114);
	var ReactInstrumentation = __webpack_require__(40);
	var ReactNodeTypes = __webpack_require__(349);
	var ReactReconciler = __webpack_require__(96);

	if ((undefined) !== 'production') {
	  var checkReactTypeSpec = __webpack_require__(862);
	}

	var emptyObject = __webpack_require__(206);
	var invariant = __webpack_require__(7);
	var shallowEqual = __webpack_require__(207);
	var shouldUpdateReactComponent = __webpack_require__(227);
	var warning = __webpack_require__(8);

	var CompositeTypes = {
	  ImpureClass: 0,
	  PureClass: 1,
	  StatelessFunctional: 2
	};

	function StatelessComponent(Component) {}
	StatelessComponent.prototype.render = function () {
	  var Component = ReactInstanceMap.get(this)._currentElement.type;
	  var element = Component(this.props, this.context, this.updater);
	  warnIfInvalidElement(Component, element);
	  return element;
	};

	function warnIfInvalidElement(Component, element) {
	  if ((undefined) !== 'production') {
	    (undefined) !== 'production' ? warning(element === null || element === false || React.isValidElement(element), '%s(...): A valid React element (or null) must be returned. You may have ' + 'returned undefined, an array or some other invalid object.', Component.displayName || Component.name || 'Component') : void 0;
	    (undefined) !== 'production' ? warning(!Component.childContextTypes, '%s(...): childContextTypes cannot be defined on a functional component.', Component.displayName || Component.name || 'Component') : void 0;
	  }
	}

	function shouldConstruct(Component) {
	  return !!(Component.prototype && Component.prototype.isReactComponent);
	}

	function isPureComponent(Component) {
	  return !!(Component.prototype && Component.prototype.isPureReactComponent);
	}

	// Separated into a function to contain deoptimizations caused by try/finally.
	function measureLifeCyclePerf(fn, debugID, timerType) {
	  if (debugID === 0) {
	    // Top-level wrappers (see ReactMount) and empty components (see
	    // ReactDOMEmptyComponent) are invisible to hooks and devtools.
	    // Both are implementation details that should go away in the future.
	    return fn();
	  }

	  ReactInstrumentation.debugTool.onBeginLifeCycleTimer(debugID, timerType);
	  try {
	    return fn();
	  } finally {
	    ReactInstrumentation.debugTool.onEndLifeCycleTimer(debugID, timerType);
	  }
	}

	/**
	 * ------------------ The Life-Cycle of a Composite Component ------------------
	 *
	 * - constructor: Initialization of state. The instance is now retained.
	 *   - componentWillMount
	 *   - render
	 *   - [children's constructors]
	 *     - [children's componentWillMount and render]
	 *     - [children's componentDidMount]
	 *     - componentDidMount
	 *
	 *       Update Phases:
	 *       - componentWillReceiveProps (only called if parent updated)
	 *       - shouldComponentUpdate
	 *         - componentWillUpdate
	 *           - render
	 *           - [children's constructors or receive props phases]
	 *         - componentDidUpdate
	 *
	 *     - componentWillUnmount
	 *     - [children's componentWillUnmount]
	 *   - [children destroyed]
	 * - (destroyed): The instance is now blank, released by React and ready for GC.
	 *
	 * -----------------------------------------------------------------------------
	 */

	/**
	 * An incrementing ID assigned to each component when it is mounted. This is
	 * used to enforce the order in which `ReactUpdates` updates dirty components.
	 *
	 * @private
	 */
	var nextMountID = 1;

	/**
	 * @lends {ReactCompositeComponent.prototype}
	 */
	var ReactCompositeComponent = {
	  /**
	   * Base constructor for all composite component.
	   *
	   * @param {ReactElement} element
	   * @final
	   * @internal
	   */
	  construct: function (element) {
	    this._currentElement = element;
	    this._rootNodeID = 0;
	    this._compositeType = null;
	    this._instance = null;
	    this._hostParent = null;
	    this._hostContainerInfo = null;

	    // See ReactUpdateQueue
	    this._updateBatchNumber = null;
	    this._pendingElement = null;
	    this._pendingStateQueue = null;
	    this._pendingReplaceState = false;
	    this._pendingForceUpdate = false;

	    this._renderedNodeType = null;
	    this._renderedComponent = null;
	    this._context = null;
	    this._mountOrder = 0;
	    this._topLevelWrapper = null;

	    // See ReactUpdates and ReactUpdateQueue.
	    this._pendingCallbacks = null;

	    // ComponentWillUnmount shall only be called once
	    this._calledComponentWillUnmount = false;

	    if ((undefined) !== 'production') {
	      this._warnedAboutRefsInRender = false;
	    }
	  },

	  /**
	   * Initializes the component, renders markup, and registers event listeners.
	   *
	   * @param {ReactReconcileTransaction|ReactServerRenderingTransaction} transaction
	   * @param {?object} hostParent
	   * @param {?object} hostContainerInfo
	   * @param {?object} context
	   * @return {?string} Rendered markup to be inserted into the DOM.
	   * @final
	   * @internal
	   */
	  mountComponent: function (transaction, hostParent, hostContainerInfo, context) {
	    var _this = this;

	    this._context = context;
	    this._mountOrder = nextMountID++;
	    this._hostParent = hostParent;
	    this._hostContainerInfo = hostContainerInfo;

	    var publicProps = this._currentElement.props;
	    var publicContext = this._processContext(context);

	    var Component = this._currentElement.type;

	    var updateQueue = transaction.getUpdateQueue();

	    // Initialize the public class
	    var doConstruct = shouldConstruct(Component);
	    var inst = this._constructComponent(doConstruct, publicProps, publicContext, updateQueue);
	    var renderedElement;

	    // Support functional components
	    if (!doConstruct && (inst == null || inst.render == null)) {
	      renderedElement = inst;
	      warnIfInvalidElement(Component, renderedElement);
	      !(inst === null || inst === false || React.isValidElement(inst)) ? (undefined) !== 'production' ? invariant(false, '%s(...): A valid React element (or null) must be returned. You may have returned undefined, an array or some other invalid object.', Component.displayName || Component.name || 'Component') : _prodInvariant('105', Component.displayName || Component.name || 'Component') : void 0;
	      inst = new StatelessComponent(Component);
	      this._compositeType = CompositeTypes.StatelessFunctional;
	    } else {
	      if (isPureComponent(Component)) {
	        this._compositeType = CompositeTypes.PureClass;
	      } else {
	        this._compositeType = CompositeTypes.ImpureClass;
	      }
	    }

	    if ((undefined) !== 'production') {
	      // This will throw later in _renderValidatedComponent, but add an early
	      // warning now to help debugging
	      if (inst.render == null) {
	        (undefined) !== 'production' ? warning(false, '%s(...): No `render` method found on the returned component ' + 'instance: you may have forgotten to define `render`.', Component.displayName || Component.name || 'Component') : void 0;
	      }

	      var propsMutated = inst.props !== publicProps;
	      var componentName = Component.displayName || Component.name || 'Component';

	      (undefined) !== 'production' ? warning(inst.props === undefined || !propsMutated, '%s(...): When calling super() in `%s`, make sure to pass ' + "up the same props that your component's constructor was passed.", componentName, componentName) : void 0;
	    }

	    // These should be set up in the constructor, but as a convenience for
	    // simpler class abstractions, we set them up after the fact.
	    inst.props = publicProps;
	    inst.context = publicContext;
	    inst.refs = emptyObject;
	    inst.updater = updateQueue;

	    this._instance = inst;

	    // Store a reference from the instance back to the internal representation
	    ReactInstanceMap.set(inst, this);

	    if ((undefined) !== 'production') {
	      // Since plain JS classes are defined without any special initialization
	      // logic, we can not catch common errors early. Therefore, we have to
	      // catch them here, at initialization time, instead.
	      (undefined) !== 'production' ? warning(!inst.getInitialState || inst.getInitialState.isReactClassApproved || inst.state, 'getInitialState was defined on %s, a plain JavaScript class. ' + 'This is only supported for classes created using React.createClass. ' + 'Did you mean to define a state property instead?', this.getName() || 'a component') : void 0;
	      (undefined) !== 'production' ? warning(!inst.getDefaultProps || inst.getDefaultProps.isReactClassApproved, 'getDefaultProps was defined on %s, a plain JavaScript class. ' + 'This is only supported for classes created using React.createClass. ' + 'Use a static property to define defaultProps instead.', this.getName() || 'a component') : void 0;
	      (undefined) !== 'production' ? warning(!inst.propTypes, 'propTypes was defined as an instance property on %s. Use a static ' + 'property to define propTypes instead.', this.getName() || 'a component') : void 0;
	      (undefined) !== 'production' ? warning(!inst.contextTypes, 'contextTypes was defined as an instance property on %s. Use a ' + 'static property to define contextTypes instead.', this.getName() || 'a component') : void 0;
	      (undefined) !== 'production' ? warning(typeof inst.componentShouldUpdate !== 'function', '%s has a method called ' + 'componentShouldUpdate(). Did you mean shouldComponentUpdate()? ' + 'The name is phrased as a question because the function is ' + 'expected to return a value.', this.getName() || 'A component') : void 0;
	      (undefined) !== 'production' ? warning(typeof inst.componentDidUnmount !== 'function', '%s has a method called ' + 'componentDidUnmount(). But there is no such lifecycle method. ' + 'Did you mean componentWillUnmount()?', this.getName() || 'A component') : void 0;
	      (undefined) !== 'production' ? warning(typeof inst.componentWillRecieveProps !== 'function', '%s has a method called ' + 'componentWillRecieveProps(). Did you mean componentWillReceiveProps()?', this.getName() || 'A component') : void 0;
	    }

	    var initialState = inst.state;
	    if (initialState === undefined) {
	      inst.state = initialState = null;
	    }
	    !(typeof initialState === 'object' && !Array.isArray(initialState)) ? (undefined) !== 'production' ? invariant(false, '%s.state: must be set to an object or null', this.getName() || 'ReactCompositeComponent') : _prodInvariant('106', this.getName() || 'ReactCompositeComponent') : void 0;

	    this._pendingStateQueue = null;
	    this._pendingReplaceState = false;
	    this._pendingForceUpdate = false;

	    var markup;
	    if (inst.unstable_handleError) {
	      markup = this.performInitialMountWithErrorHandling(renderedElement, hostParent, hostContainerInfo, transaction, context);
	    } else {
	      markup = this.performInitialMount(renderedElement, hostParent, hostContainerInfo, transaction, context);
	    }

	    if (inst.componentDidMount) {
	      if ((undefined) !== 'production') {
	        transaction.getReactMountReady().enqueue(function () {
	          measureLifeCyclePerf(function () {
	            return inst.componentDidMount();
	          }, _this._debugID, 'componentDidMount');
	        });
	      } else {
	        transaction.getReactMountReady().enqueue(inst.componentDidMount, inst);
	      }
	    }

	    return markup;
	  },

	  _constructComponent: function (doConstruct, publicProps, publicContext, updateQueue) {
	    if ((undefined) !== 'production' && !doConstruct) {
	      ReactCurrentOwner.current = this;
	      try {
	        return this._constructComponentWithoutOwner(doConstruct, publicProps, publicContext, updateQueue);
	      } finally {
	        ReactCurrentOwner.current = null;
	      }
	    } else {
	      return this._constructComponentWithoutOwner(doConstruct, publicProps, publicContext, updateQueue);
	    }
	  },

	  _constructComponentWithoutOwner: function (doConstruct, publicProps, publicContext, updateQueue) {
	    var Component = this._currentElement.type;

	    if (doConstruct) {
	      if ((undefined) !== 'production') {
	        return measureLifeCyclePerf(function () {
	          return new Component(publicProps, publicContext, updateQueue);
	        }, this._debugID, 'ctor');
	      } else {
	        return new Component(publicProps, publicContext, updateQueue);
	      }
	    }

	    // This can still be an instance in case of factory components
	    // but we'll count this as time spent rendering as the more common case.
	    if ((undefined) !== 'production') {
	      return measureLifeCyclePerf(function () {
	        return Component(publicProps, publicContext, updateQueue);
	      }, this._debugID, 'render');
	    } else {
	      return Component(publicProps, publicContext, updateQueue);
	    }
	  },

	  performInitialMountWithErrorHandling: function (renderedElement, hostParent, hostContainerInfo, transaction, context) {
	    var markup;
	    var checkpoint = transaction.checkpoint();
	    try {
	      markup = this.performInitialMount(renderedElement, hostParent, hostContainerInfo, transaction, context);
	    } catch (e) {
	      // Roll back to checkpoint, handle error (which may add items to the transaction), and take a new checkpoint
	      transaction.rollback(checkpoint);
	      this._instance.unstable_handleError(e);
	      if (this._pendingStateQueue) {
	        this._instance.state = this._processPendingState(this._instance.props, this._instance.context);
	      }
	      checkpoint = transaction.checkpoint();

	      this._renderedComponent.unmountComponent(true);
	      transaction.rollback(checkpoint);

	      // Try again - we've informed the component about the error, so they can render an error message this time.
	      // If this throws again, the error will bubble up (and can be caught by a higher error boundary).
	      markup = this.performInitialMount(renderedElement, hostParent, hostContainerInfo, transaction, context);
	    }
	    return markup;
	  },

	  performInitialMount: function (renderedElement, hostParent, hostContainerInfo, transaction, context) {
	    var inst = this._instance;

	    var debugID = 0;
	    if ((undefined) !== 'production') {
	      debugID = this._debugID;
	    }

	    if (inst.componentWillMount) {
	      if ((undefined) !== 'production') {
	        measureLifeCyclePerf(function () {
	          return inst.componentWillMount();
	        }, debugID, 'componentWillMount');
	      } else {
	        inst.componentWillMount();
	      }
	      // When mounting, calls to `setState` by `componentWillMount` will set
	      // `this._pendingStateQueue` without triggering a re-render.
	      if (this._pendingStateQueue) {
	        inst.state = this._processPendingState(inst.props, inst.context);
	      }
	    }

	    // If not a stateless component, we now render
	    if (renderedElement === undefined) {
	      renderedElement = this._renderValidatedComponent();
	    }

	    var nodeType = ReactNodeTypes.getType(renderedElement);
	    this._renderedNodeType = nodeType;
	    var child = this._instantiateReactComponent(renderedElement, nodeType !== ReactNodeTypes.EMPTY /* shouldHaveDebugID */
	    );
	    this._renderedComponent = child;

	    var markup = ReactReconciler.mountComponent(child, transaction, hostParent, hostContainerInfo, this._processChildContext(context), debugID);

	    if ((undefined) !== 'production') {
	      if (debugID !== 0) {
	        var childDebugIDs = child._debugID !== 0 ? [child._debugID] : [];
	        ReactInstrumentation.debugTool.onSetChildren(debugID, childDebugIDs);
	      }
	    }

	    return markup;
	  },

	  getHostNode: function () {
	    return ReactReconciler.getHostNode(this._renderedComponent);
	  },

	  /**
	   * Releases any resources allocated by `mountComponent`.
	   *
	   * @final
	   * @internal
	   */
	  unmountComponent: function (safely) {
	    if (!this._renderedComponent) {
	      return;
	    }

	    var inst = this._instance;

	    if (inst.componentWillUnmount && !inst._calledComponentWillUnmount) {
	      inst._calledComponentWillUnmount = true;

	      if (safely) {
	        var name = this.getName() + '.componentWillUnmount()';
	        ReactErrorUtils.invokeGuardedCallback(name, inst.componentWillUnmount.bind(inst));
	      } else {
	        if ((undefined) !== 'production') {
	          measureLifeCyclePerf(function () {
	            return inst.componentWillUnmount();
	          }, this._debugID, 'componentWillUnmount');
	        } else {
	          inst.componentWillUnmount();
	        }
	      }
	    }

	    if (this._renderedComponent) {
	      ReactReconciler.unmountComponent(this._renderedComponent, safely);
	      this._renderedNodeType = null;
	      this._renderedComponent = null;
	      this._instance = null;
	    }

	    // Reset pending fields
	    // Even if this component is scheduled for another update in ReactUpdates,
	    // it would still be ignored because these fields are reset.
	    this._pendingStateQueue = null;
	    this._pendingReplaceState = false;
	    this._pendingForceUpdate = false;
	    this._pendingCallbacks = null;
	    this._pendingElement = null;

	    // These fields do not really need to be reset since this object is no
	    // longer accessible.
	    this._context = null;
	    this._rootNodeID = 0;
	    this._topLevelWrapper = null;

	    // Delete the reference from the instance to this internal representation
	    // which allow the internals to be properly cleaned up even if the user
	    // leaks a reference to the public instance.
	    ReactInstanceMap.remove(inst);

	    // Some existing components rely on inst.props even after they've been
	    // destroyed (in event handlers).
	    // TODO: inst.props = null;
	    // TODO: inst.state = null;
	    // TODO: inst.context = null;
	  },

	  /**
	   * Filters the context object to only contain keys specified in
	   * `contextTypes`
	   *
	   * @param {object} context
	   * @return {?object}
	   * @private
	   */
	  _maskContext: function (context) {
	    var Component = this._currentElement.type;
	    var contextTypes = Component.contextTypes;
	    if (!contextTypes) {
	      return emptyObject;
	    }
	    var maskedContext = {};
	    for (var contextName in contextTypes) {
	      maskedContext[contextName] = context[contextName];
	    }
	    return maskedContext;
	  },

	  /**
	   * Filters the context object to only contain keys specified in
	   * `contextTypes`, and asserts that they are valid.
	   *
	   * @param {object} context
	   * @return {?object}
	   * @private
	   */
	  _processContext: function (context) {
	    var maskedContext = this._maskContext(context);
	    if ((undefined) !== 'production') {
	      var Component = this._currentElement.type;
	      if (Component.contextTypes) {
	        this._checkContextTypes(Component.contextTypes, maskedContext, 'context');
	      }
	    }
	    return maskedContext;
	  },

	  /**
	   * @param {object} currentContext
	   * @return {object}
	   * @private
	   */
	  _processChildContext: function (currentContext) {
	    var Component = this._currentElement.type;
	    var inst = this._instance;
	    var childContext;

	    if (inst.getChildContext) {
	      if ((undefined) !== 'production') {
	        ReactInstrumentation.debugTool.onBeginProcessingChildContext();
	        try {
	          childContext = inst.getChildContext();
	        } finally {
	          ReactInstrumentation.debugTool.onEndProcessingChildContext();
	        }
	      } else {
	        childContext = inst.getChildContext();
	      }
	    }

	    if (childContext) {
	      !(typeof Component.childContextTypes === 'object') ? (undefined) !== 'production' ? invariant(false, '%s.getChildContext(): childContextTypes must be defined in order to use getChildContext().', this.getName() || 'ReactCompositeComponent') : _prodInvariant('107', this.getName() || 'ReactCompositeComponent') : void 0;
	      if ((undefined) !== 'production') {
	        this._checkContextTypes(Component.childContextTypes, childContext, 'child context');
	      }
	      for (var name in childContext) {
	        !(name in Component.childContextTypes) ? (undefined) !== 'production' ? invariant(false, '%s.getChildContext(): key "%s" is not defined in childContextTypes.', this.getName() || 'ReactCompositeComponent', name) : _prodInvariant('108', this.getName() || 'ReactCompositeComponent', name) : void 0;
	      }
	      return _assign({}, currentContext, childContext);
	    }
	    return currentContext;
	  },

	  /**
	   * Assert that the context types are valid
	   *
	   * @param {object} typeSpecs Map of context field to a ReactPropType
	   * @param {object} values Runtime values that need to be type-checked
	   * @param {string} location e.g. "prop", "context", "child context"
	   * @private
	   */
	  _checkContextTypes: function (typeSpecs, values, location) {
	    if ((undefined) !== 'production') {
	      checkReactTypeSpec(typeSpecs, values, location, this.getName(), null, this._debugID);
	    }
	  },

	  receiveComponent: function (nextElement, transaction, nextContext) {
	    var prevElement = this._currentElement;
	    var prevContext = this._context;

	    this._pendingElement = null;

	    this.updateComponent(transaction, prevElement, nextElement, prevContext, nextContext);
	  },

	  /**
	   * If any of `_pendingElement`, `_pendingStateQueue`, or `_pendingForceUpdate`
	   * is set, update the component.
	   *
	   * @param {ReactReconcileTransaction} transaction
	   * @internal
	   */
	  performUpdateIfNecessary: function (transaction) {
	    if (this._pendingElement != null) {
	      ReactReconciler.receiveComponent(this, this._pendingElement, transaction, this._context);
	    } else if (this._pendingStateQueue !== null || this._pendingForceUpdate) {
	      this.updateComponent(transaction, this._currentElement, this._currentElement, this._context, this._context);
	    } else {
	      this._updateBatchNumber = null;
	    }
	  },

	  /**
	   * Perform an update to a mounted component. The componentWillReceiveProps and
	   * shouldComponentUpdate methods are called, then (assuming the update isn't
	   * skipped) the remaining update lifecycle methods are called and the DOM
	   * representation is updated.
	   *
	   * By default, this implements React's rendering and reconciliation algorithm.
	   * Sophisticated clients may wish to override this.
	   *
	   * @param {ReactReconcileTransaction} transaction
	   * @param {ReactElement} prevParentElement
	   * @param {ReactElement} nextParentElement
	   * @internal
	   * @overridable
	   */
	  updateComponent: function (transaction, prevParentElement, nextParentElement, prevUnmaskedContext, nextUnmaskedContext) {
	    var inst = this._instance;
	    !(inst != null) ? (undefined) !== 'production' ? invariant(false, 'Attempted to update component `%s` that has already been unmounted (or failed to mount).', this.getName() || 'ReactCompositeComponent') : _prodInvariant('136', this.getName() || 'ReactCompositeComponent') : void 0;

	    var willReceive = false;
	    var nextContext;

	    // Determine if the context has changed or not
	    if (this._context === nextUnmaskedContext) {
	      nextContext = inst.context;
	    } else {
	      nextContext = this._processContext(nextUnmaskedContext);
	      willReceive = true;
	    }

	    var prevProps = prevParentElement.props;
	    var nextProps = nextParentElement.props;

	    // Not a simple state update but a props update
	    if (prevParentElement !== nextParentElement) {
	      willReceive = true;
	    }

	    // An update here will schedule an update but immediately set
	    // _pendingStateQueue which will ensure that any state updates gets
	    // immediately reconciled instead of waiting for the next batch.
	    if (willReceive && inst.componentWillReceiveProps) {
	      if ((undefined) !== 'production') {
	        measureLifeCyclePerf(function () {
	          return inst.componentWillReceiveProps(nextProps, nextContext);
	        }, this._debugID, 'componentWillReceiveProps');
	      } else {
	        inst.componentWillReceiveProps(nextProps, nextContext);
	      }
	    }

	    var nextState = this._processPendingState(nextProps, nextContext);
	    var shouldUpdate = true;

	    if (!this._pendingForceUpdate) {
	      if (inst.shouldComponentUpdate) {
	        if ((undefined) !== 'production') {
	          shouldUpdate = measureLifeCyclePerf(function () {
	            return inst.shouldComponentUpdate(nextProps, nextState, nextContext);
	          }, this._debugID, 'shouldComponentUpdate');
	        } else {
	          shouldUpdate = inst.shouldComponentUpdate(nextProps, nextState, nextContext);
	        }
	      } else {
	        if (this._compositeType === CompositeTypes.PureClass) {
	          shouldUpdate = !shallowEqual(prevProps, nextProps) || !shallowEqual(inst.state, nextState);
	        }
	      }
	    }

	    if ((undefined) !== 'production') {
	      (undefined) !== 'production' ? warning(shouldUpdate !== undefined, '%s.shouldComponentUpdate(): Returned undefined instead of a ' + 'boolean value. Make sure to return true or false.', this.getName() || 'ReactCompositeComponent') : void 0;
	    }

	    this._updateBatchNumber = null;
	    if (shouldUpdate) {
	      this._pendingForceUpdate = false;
	      // Will set `this.props`, `this.state` and `this.context`.
	      this._performComponentUpdate(nextParentElement, nextProps, nextState, nextContext, transaction, nextUnmaskedContext);
	    } else {
	      // If it's determined that a component should not update, we still want
	      // to set props and state but we shortcut the rest of the update.
	      this._currentElement = nextParentElement;
	      this._context = nextUnmaskedContext;
	      inst.props = nextProps;
	      inst.state = nextState;
	      inst.context = nextContext;
	    }
	  },

	  _processPendingState: function (props, context) {
	    var inst = this._instance;
	    var queue = this._pendingStateQueue;
	    var replace = this._pendingReplaceState;
	    this._pendingReplaceState = false;
	    this._pendingStateQueue = null;

	    if (!queue) {
	      return inst.state;
	    }

	    if (replace && queue.length === 1) {
	      return queue[0];
	    }

	    var nextState = _assign({}, replace ? queue[0] : inst.state);
	    for (var i = replace ? 1 : 0; i < queue.length; i++) {
	      var partial = queue[i];
	      _assign(nextState, typeof partial === 'function' ? partial.call(inst, nextState, props, context) : partial);
	    }

	    return nextState;
	  },

	  /**
	   * Merges new props and state, notifies delegate methods of update and
	   * performs update.
	   *
	   * @param {ReactElement} nextElement Next element
	   * @param {object} nextProps Next public object to set as properties.
	   * @param {?object} nextState Next object to set as state.
	   * @param {?object} nextContext Next public object to set as context.
	   * @param {ReactReconcileTransaction} transaction
	   * @param {?object} unmaskedContext
	   * @private
	   */
	  _performComponentUpdate: function (nextElement, nextProps, nextState, nextContext, transaction, unmaskedContext) {
	    var _this2 = this;

	    var inst = this._instance;

	    var hasComponentDidUpdate = Boolean(inst.componentDidUpdate);
	    var prevProps;
	    var prevState;
	    var prevContext;
	    if (hasComponentDidUpdate) {
	      prevProps = inst.props;
	      prevState = inst.state;
	      prevContext = inst.context;
	    }

	    if (inst.componentWillUpdate) {
	      if ((undefined) !== 'production') {
	        measureLifeCyclePerf(function () {
	          return inst.componentWillUpdate(nextProps, nextState, nextContext);
	        }, this._debugID, 'componentWillUpdate');
	      } else {
	        inst.componentWillUpdate(nextProps, nextState, nextContext);
	      }
	    }

	    this._currentElement = nextElement;
	    this._context = unmaskedContext;
	    inst.props = nextProps;
	    inst.state = nextState;
	    inst.context = nextContext;

	    this._updateRenderedComponent(transaction, unmaskedContext);

	    if (hasComponentDidUpdate) {
	      if ((undefined) !== 'production') {
	        transaction.getReactMountReady().enqueue(function () {
	          measureLifeCyclePerf(inst.componentDidUpdate.bind(inst, prevProps, prevState, prevContext), _this2._debugID, 'componentDidUpdate');
	        });
	      } else {
	        transaction.getReactMountReady().enqueue(inst.componentDidUpdate.bind(inst, prevProps, prevState, prevContext), inst);
	      }
	    }
	  },

	  /**
	   * Call the component's `render` method and update the DOM accordingly.
	   *
	   * @param {ReactReconcileTransaction} transaction
	   * @internal
	   */
	  _updateRenderedComponent: function (transaction, context) {
	    var prevComponentInstance = this._renderedComponent;
	    var prevRenderedElement = prevComponentInstance._currentElement;
	    var nextRenderedElement = this._renderValidatedComponent();

	    var debugID = 0;
	    if ((undefined) !== 'production') {
	      debugID = this._debugID;
	    }

	    if (shouldUpdateReactComponent(prevRenderedElement, nextRenderedElement)) {
	      ReactReconciler.receiveComponent(prevComponentInstance, nextRenderedElement, transaction, this._processChildContext(context));
	    } else {
	      var oldHostNode = ReactReconciler.getHostNode(prevComponentInstance);
	      ReactReconciler.unmountComponent(prevComponentInstance, false);

	      var nodeType = ReactNodeTypes.getType(nextRenderedElement);
	      this._renderedNodeType = nodeType;
	      var child = this._instantiateReactComponent(nextRenderedElement, nodeType !== ReactNodeTypes.EMPTY /* shouldHaveDebugID */
	      );
	      this._renderedComponent = child;

	      var nextMarkup = ReactReconciler.mountComponent(child, transaction, this._hostParent, this._hostContainerInfo, this._processChildContext(context), debugID);

	      if ((undefined) !== 'production') {
	        if (debugID !== 0) {
	          var childDebugIDs = child._debugID !== 0 ? [child._debugID] : [];
	          ReactInstrumentation.debugTool.onSetChildren(debugID, childDebugIDs);
	        }
	      }

	      this._replaceNodeWithMarkup(oldHostNode, nextMarkup, prevComponentInstance);
	    }
	  },

	  /**
	   * Overridden in shallow rendering.
	   *
	   * @protected
	   */
	  _replaceNodeWithMarkup: function (oldHostNode, nextMarkup, prevInstance) {
	    ReactComponentEnvironment.replaceNodeWithMarkup(oldHostNode, nextMarkup, prevInstance);
	  },

	  /**
	   * @protected
	   */
	  _renderValidatedComponentWithoutOwnerOrContext: function () {
	    var inst = this._instance;
	    var renderedElement;

	    if ((undefined) !== 'production') {
	      renderedElement = measureLifeCyclePerf(function () {
	        return inst.render();
	      }, this._debugID, 'render');
	    } else {
	      renderedElement = inst.render();
	    }

	    if ((undefined) !== 'production') {
	      // We allow auto-mocks to proceed as if they're returning null.
	      if (renderedElement === undefined && inst.render._isMockFunction) {
	        // This is probably bad practice. Consider warning here and
	        // deprecating this convenience.
	        renderedElement = null;
	      }
	    }

	    return renderedElement;
	  },

	  /**
	   * @private
	   */
	  _renderValidatedComponent: function () {
	    var renderedElement;
	    if ((undefined) !== 'production' || this._compositeType !== CompositeTypes.StatelessFunctional) {
	      ReactCurrentOwner.current = this;
	      try {
	        renderedElement = this._renderValidatedComponentWithoutOwnerOrContext();
	      } finally {
	        ReactCurrentOwner.current = null;
	      }
	    } else {
	      renderedElement = this._renderValidatedComponentWithoutOwnerOrContext();
	    }
	    !(
	    // TODO: An `isValidNode` function would probably be more appropriate
	    renderedElement === null || renderedElement === false || React.isValidElement(renderedElement)) ? (undefined) !== 'production' ? invariant(false, '%s.render(): A valid React element (or null) must be returned. You may have returned undefined, an array or some other invalid object.', this.getName() || 'ReactCompositeComponent') : _prodInvariant('109', this.getName() || 'ReactCompositeComponent') : void 0;

	    return renderedElement;
	  },

	  /**
	   * Lazily allocates the refs object and stores `component` as `ref`.
	   *
	   * @param {string} ref Reference name.
	   * @param {component} component Component to store as `ref`.
	   * @final
	   * @private
	   */
	  attachRef: function (ref, component) {
	    var inst = this.getPublicInstance();
	    !(inst != null) ? (undefined) !== 'production' ? invariant(false, 'Stateless function components cannot have refs.') : _prodInvariant('110') : void 0;
	    var publicComponentInstance = component.getPublicInstance();
	    if ((undefined) !== 'production') {
	      var componentName = component && component.getName ? component.getName() : 'a component';
	      (undefined) !== 'production' ? warning(publicComponentInstance != null || component._compositeType !== CompositeTypes.StatelessFunctional, 'Stateless function components cannot be given refs ' + '(See ref "%s" in %s created by %s). ' + 'Attempts to access this ref will fail.', ref, componentName, this.getName()) : void 0;
	    }
	    var refs = inst.refs === emptyObject ? inst.refs = {} : inst.refs;
	    refs[ref] = publicComponentInstance;
	  },

	  /**
	   * Detaches a reference name.
	   *
	   * @param {string} ref Name to dereference.
	   * @final
	   * @private
	   */
	  detachRef: function (ref) {
	    var refs = this.getPublicInstance().refs;
	    delete refs[ref];
	  },

	  /**
	   * Get a text description of the component that can be used to identify it
	   * in error messages.
	   * @return {string} The name or null.
	   * @internal
	   */
	  getName: function () {
	    var type = this._currentElement.type;
	    var constructor = this._instance && this._instance.constructor;
	    return type.displayName || constructor && constructor.displayName || type.name || constructor && constructor.name || null;
	  },

	  /**
	   * Get the publicly accessible representation of this component - i.e. what
	   * is exposed by refs and returned by render. Can be null for stateless
	   * components.
	   *
	   * @return {ReactComponent} the public component instance.
	   * @internal
	   */
	  getPublicInstance: function () {
	    var inst = this._instance;
	    if (this._compositeType === CompositeTypes.StatelessFunctional) {
	      return null;
	    }
	    return inst;
	  },

	  // Stub
	  _instantiateReactComponent: null
	};

	module.exports = ReactCompositeComponent;

/***/ }),
/* 815 */
/***/ (function(module, exports, __webpack_require__) {

	/**
	 * Copyright (c) 2013-present, Facebook, Inc.
	 *
	 * This source code is licensed under the MIT license found in the
	 * LICENSE file in the root directory of this source tree.
	 *
	 */

	/* globals __REACT_DEVTOOLS_GLOBAL_HOOK__*/

	'use strict';

	var ReactDOMComponentTree = __webpack_require__(21);
	var ReactDefaultInjection = __webpack_require__(832);
	var ReactMount = __webpack_require__(348);
	var ReactReconciler = __webpack_require__(96);
	var ReactUpdates = __webpack_require__(55);
	var ReactVersion = __webpack_require__(847);

	var findDOMNode = __webpack_require__(864);
	var getHostComponentFromComposite = __webpack_require__(354);
	var renderSubtreeIntoContainer = __webpack_require__(871);
	var warning = __webpack_require__(8);

	ReactDefaultInjection.inject();

	var ReactDOM = {
	  findDOMNode: findDOMNode,
	  render: ReactMount.render,
	  unmountComponentAtNode: ReactMount.unmountComponentAtNode,
	  version: ReactVersion,

	  /* eslint-disable camelcase */
	  unstable_batchedUpdates: ReactUpdates.batchedUpdates,
	  unstable_renderSubtreeIntoContainer: renderSubtreeIntoContainer
	  /* eslint-enable camelcase */
	};

	// Inject the runtime into a devtools global hook regardless of browser.
	// Allows for debugging when the hook is injected on the page.
	if (typeof __REACT_DEVTOOLS_GLOBAL_HOOK__ !== 'undefined' && typeof __REACT_DEVTOOLS_GLOBAL_HOOK__.inject === 'function') {
	  __REACT_DEVTOOLS_GLOBAL_HOOK__.inject({
	    ComponentTree: {
	      getClosestInstanceFromNode: ReactDOMComponentTree.getClosestInstanceFromNode,
	      getNodeFromInstance: function (inst) {
	        // inst is an internal instance (but could be a composite)
	        if (inst._renderedComponent) {
	          inst = getHostComponentFromComposite(inst);
	        }
	        if (inst) {
	          return ReactDOMComponentTree.getNodeFromInstance(inst);
	        } else {
	          return null;
	        }
	      }
	    },
	    Mount: ReactMount,
	    Reconciler: ReactReconciler
	  });
	}

	if ((undefined) !== 'production') {
	  var ExecutionEnvironment = __webpack_require__(24);
	  if (ExecutionEnvironment.canUseDOM && window.top === window.self) {
	    // First check if devtools is not installed
	    if (typeof __REACT_DEVTOOLS_GLOBAL_HOOK__ === 'undefined') {
	      // If we're in Chrome or Firefox, provide a download link if not installed.
	      if (navigator.userAgent.indexOf('Chrome') > -1 && navigator.userAgent.indexOf('Edge') === -1 || navigator.userAgent.indexOf('Firefox') > -1) {
	        // Firefox does not have the issue with devtools loaded over file://
	        var showFileUrlMessage = window.location.protocol.indexOf('http') === -1 && navigator.userAgent.indexOf('Firefox') === -1;
	        console.debug('Download the React DevTools ' + (showFileUrlMessage ? 'and use an HTTP server (instead of a file: URL) ' : '') + 'for a better development experience: ' + 'https://fb.me/react-devtools');
	      }
	    }

	    var testFunc = function testFn() {};
	    (undefined) !== 'production' ? warning((testFunc.name || testFunc.toString()).indexOf('testFn') !== -1, "It looks like you're using a minified copy of the development build " + 'of React. When deploying React apps to production, make sure to use ' + 'the production build which skips development warnings and is faster. ' + 'See https://fb.me/react-minification for more details.') : void 0;

	    // If we're in IE8, check to see if we are in compatibility mode and provide
	    // information on preventing compatibility mode
	    var ieCompatibilityMode = document.documentMode && document.documentMode < 8;

	    (undefined) !== 'production' ? warning(!ieCompatibilityMode, 'Internet Explorer is running in compatibility mode; please add the ' + 'following tag to your HTML to prevent this from happening: ' + '<meta http-equiv="X-UA-Compatible" content="IE=edge" />') : void 0;

	    var expectedFeatures = [
	    // shims
	    Array.isArray, Array.prototype.every, Array.prototype.forEach, Array.prototype.indexOf, Array.prototype.map, Date.now, Function.prototype.bind, Object.keys, String.prototype.trim];

	    for (var i = 0; i < expectedFeatures.length; i++) {
	      if (!expectedFeatures[i]) {
	        (undefined) !== 'production' ? warning(false, 'One or more ES5 shims expected by React are not available: ' + 'https://fb.me/react-warning-polyfills') : void 0;
	        break;
	      }
	    }
	  }
	}

	if ((undefined) !== 'production') {
	  var ReactInstrumentation = __webpack_require__(40);
	  var ReactDOMUnknownPropertyHook = __webpack_require__(829);
	  var ReactDOMNullInputValuePropHook = __webpack_require__(823);
	  var ReactDOMInvalidARIAHook = __webpack_require__(822);

	  ReactInstrumentation.debugTool.addHook(ReactDOMUnknownPropertyHook);
	  ReactInstrumentation.debugTool.addHook(ReactDOMNullInputValuePropHook);
	  ReactInstrumentation.debugTool.addHook(ReactDOMInvalidARIAHook);
	}

	module.exports = ReactDOM;

/***/ }),
/* 816 */
/***/ (function(module, exports, __webpack_require__) {

	/**
	 * Copyright (c) 2013-present, Facebook, Inc.
	 *
	 * This source code is licensed under the MIT license found in the
	 * LICENSE file in the root directory of this source tree.
	 *
	 */

	/* global hasOwnProperty:true */

	'use strict';

	var _prodInvariant = __webpack_require__(13),
	    _assign = __webpack_require__(19);

	var AutoFocusUtils = __webpack_require__(803);
	var CSSPropertyOperations = __webpack_require__(805);
	var DOMLazyTree = __webpack_require__(95);
	var DOMNamespaces = __webpack_require__(215);
	var DOMProperty = __webpack_require__(65);
	var DOMPropertyOperations = __webpack_require__(341);
	var EventPluginHub = __webpack_require__(112);
	var EventPluginRegistry = __webpack_require__(144);
	var ReactBrowserEventEmitter = __webpack_require__(145);
	var ReactDOMComponentFlags = __webpack_require__(342);
	var ReactDOMComponentTree = __webpack_require__(21);
	var ReactDOMInput = __webpack_require__(821);
	var ReactDOMOption = __webpack_require__(824);
	var ReactDOMSelect = __webpack_require__(343);
	var ReactDOMTextarea = __webpack_require__(827);
	var ReactInstrumentation = __webpack_require__(40);
	var ReactMultiChild = __webpack_require__(840);
	var ReactServerRenderingTransaction = __webpack_require__(845);

	var emptyFunction = __webpack_require__(53);
	var escapeTextContentForBrowser = __webpack_require__(148);
	var invariant = __webpack_require__(7);
	var isEventSupported = __webpack_require__(226);
	var shallowEqual = __webpack_require__(207);
	var inputValueTracking = __webpack_require__(356);
	var validateDOMNesting = __webpack_require__(228);
	var warning = __webpack_require__(8);

	var Flags = ReactDOMComponentFlags;
	var deleteListener = EventPluginHub.deleteListener;
	var getNode = ReactDOMComponentTree.getNodeFromInstance;
	var listenTo = ReactBrowserEventEmitter.listenTo;
	var registrationNameModules = EventPluginRegistry.registrationNameModules;

	// For quickly matching children type, to test if can be treated as content.
	var CONTENT_TYPES = { string: true, number: true };

	var STYLE = 'style';
	var HTML = '__html';
	var RESERVED_PROPS = {
	  children: null,
	  dangerouslySetInnerHTML: null,
	  suppressContentEditableWarning: null
	};

	// Node type for document fragments (Node.DOCUMENT_FRAGMENT_NODE).
	var DOC_FRAGMENT_TYPE = 11;

	function getDeclarationErrorAddendum(internalInstance) {
	  if (internalInstance) {
	    var owner = internalInstance._currentElement._owner || null;
	    if (owner) {
	      var name = owner.getName();
	      if (name) {
	        return ' This DOM node was rendered by `' + name + '`.';
	      }
	    }
	  }
	  return '';
	}

	function friendlyStringify(obj) {
	  if (typeof obj === 'object') {
	    if (Array.isArray(obj)) {
	      return '[' + obj.map(friendlyStringify).join(', ') + ']';
	    } else {
	      var pairs = [];
	      for (var key in obj) {
	        if (Object.prototype.hasOwnProperty.call(obj, key)) {
	          var keyEscaped = /^[a-z$_][\w$_]*$/i.test(key) ? key : JSON.stringify(key);
	          pairs.push(keyEscaped + ': ' + friendlyStringify(obj[key]));
	        }
	      }
	      return '{' + pairs.join(', ') + '}';
	    }
	  } else if (typeof obj === 'string') {
	    return JSON.stringify(obj);
	  } else if (typeof obj === 'function') {
	    return '[function object]';
	  }
	  // Differs from JSON.stringify in that undefined because undefined and that
	  // inf and nan don't become null
	  return String(obj);
	}

	var styleMutationWarning = {};

	function checkAndWarnForMutatedStyle(style1, style2, component) {
	  if (style1 == null || style2 == null) {
	    return;
	  }
	  if (shallowEqual(style1, style2)) {
	    return;
	  }

	  var componentName = component._tag;
	  var owner = component._currentElement._owner;
	  var ownerName;
	  if (owner) {
	    ownerName = owner.getName();
	  }

	  var hash = ownerName + '|' + componentName;

	  if (styleMutationWarning.hasOwnProperty(hash)) {
	    return;
	  }

	  styleMutationWarning[hash] = true;

	  (undefined) !== 'production' ? warning(false, '`%s` was passed a style object that has previously been mutated. ' + 'Mutating `style` is deprecated. Consider cloning it beforehand. Check ' + 'the `render` %s. Previous style: %s. Mutated style: %s.', componentName, owner ? 'of `' + ownerName + '`' : 'using <' + componentName + '>', friendlyStringify(style1), friendlyStringify(style2)) : void 0;
	}

	/**
	 * @param {object} component
	 * @param {?object} props
	 */
	function assertValidProps(component, props) {
	  if (!props) {
	    return;
	  }
	  // Note the use of `==` which checks for null or undefined.
	  if (voidElementTags[component._tag]) {
	    !(props.children == null && props.dangerouslySetInnerHTML == null) ? (undefined) !== 'production' ? invariant(false, '%s is a void element tag and must neither have `children` nor use `dangerouslySetInnerHTML`.%s', component._tag, component._currentElement._owner ? ' Check the render method of ' + component._currentElement._owner.getName() + '.' : '') : _prodInvariant('137', component._tag, component._currentElement._owner ? ' Check the render method of ' + component._currentElement._owner.getName() + '.' : '') : void 0;
	  }
	  if (props.dangerouslySetInnerHTML != null) {
	    !(props.children == null) ? (undefined) !== 'production' ? invariant(false, 'Can only set one of `children` or `props.dangerouslySetInnerHTML`.') : _prodInvariant('60') : void 0;
	    !(typeof props.dangerouslySetInnerHTML === 'object' && HTML in props.dangerouslySetInnerHTML) ? (undefined) !== 'production' ? invariant(false, '`props.dangerouslySetInnerHTML` must be in the form `{__html: ...}`. Please visit https://fb.me/react-invariant-dangerously-set-inner-html for more information.') : _prodInvariant('61') : void 0;
	  }
	  if ((undefined) !== 'production') {
	    (undefined) !== 'production' ? warning(props.innerHTML == null, 'Directly setting property `innerHTML` is not permitted. ' + 'For more information, lookup documentation on `dangerouslySetInnerHTML`.') : void 0;
	    (undefined) !== 'production' ? warning(props.suppressContentEditableWarning || !props.contentEditable || props.children == null, 'A component is `contentEditable` and contains `children` managed by ' + 'React. It is now your responsibility to guarantee that none of ' + 'those nodes are unexpectedly modified or duplicated. This is ' + 'probably not intentional.') : void 0;
	    (undefined) !== 'production' ? warning(props.onFocusIn == null && props.onFocusOut == null, 'React uses onFocus and onBlur instead of onFocusIn and onFocusOut. ' + 'All React events are normalized to bubble, so onFocusIn and onFocusOut ' + 'are not needed/supported by React.') : void 0;
	  }
	  !(props.style == null || typeof props.style === 'object') ? (undefined) !== 'production' ? invariant(false, 'The `style` prop expects a mapping from style properties to values, not a string. For example, style={{marginRight: spacing + \'em\'}} when using JSX.%s', getDeclarationErrorAddendum(component)) : _prodInvariant('62', getDeclarationErrorAddendum(component)) : void 0;
	}

	function enqueuePutListener(inst, registrationName, listener, transaction) {
	  if (transaction instanceof ReactServerRenderingTransaction) {
	    return;
	  }
	  if ((undefined) !== 'production') {
	    // IE8 has no API for event capturing and the `onScroll` event doesn't
	    // bubble.
	    (undefined) !== 'production' ? warning(registrationName !== 'onScroll' || isEventSupported('scroll', true), "This browser doesn't support the `onScroll` event") : void 0;
	  }
	  var containerInfo = inst._hostContainerInfo;
	  var isDocumentFragment = containerInfo._node && containerInfo._node.nodeType === DOC_FRAGMENT_TYPE;
	  var doc = isDocumentFragment ? containerInfo._node : containerInfo._ownerDocument;
	  listenTo(registrationName, doc);
	  transaction.getReactMountReady().enqueue(putListener, {
	    inst: inst,
	    registrationName: registrationName,
	    listener: listener
	  });
	}

	function putListener() {
	  var listenerToPut = this;
	  EventPluginHub.putListener(listenerToPut.inst, listenerToPut.registrationName, listenerToPut.listener);
	}

	function inputPostMount() {
	  var inst = this;
	  ReactDOMInput.postMountWrapper(inst);
	}

	function textareaPostMount() {
	  var inst = this;
	  ReactDOMTextarea.postMountWrapper(inst);
	}

	function optionPostMount() {
	  var inst = this;
	  ReactDOMOption.postMountWrapper(inst);
	}

	var setAndValidateContentChildDev = emptyFunction;
	if ((undefined) !== 'production') {
	  setAndValidateContentChildDev = function (content) {
	    var hasExistingContent = this._contentDebugID != null;
	    var debugID = this._debugID;
	    // This ID represents the inlined child that has no backing instance:
	    var contentDebugID = -debugID;

	    if (content == null) {
	      if (hasExistingContent) {
	        ReactInstrumentation.debugTool.onUnmountComponent(this._contentDebugID);
	      }
	      this._contentDebugID = null;
	      return;
	    }

	    validateDOMNesting(null, String(content), this, this._ancestorInfo);
	    this._contentDebugID = contentDebugID;
	    if (hasExistingContent) {
	      ReactInstrumentation.debugTool.onBeforeUpdateComponent(contentDebugID, content);
	      ReactInstrumentation.debugTool.onUpdateComponent(contentDebugID);
	    } else {
	      ReactInstrumentation.debugTool.onBeforeMountComponent(contentDebugID, content, debugID);
	      ReactInstrumentation.debugTool.onMountComponent(contentDebugID);
	      ReactInstrumentation.debugTool.onSetChildren(debugID, [contentDebugID]);
	    }
	  };
	}

	// There are so many media events, it makes sense to just
	// maintain a list rather than create a `trapBubbledEvent` for each
	var mediaEvents = {
	  topAbort: 'abort',
	  topCanPlay: 'canplay',
	  topCanPlayThrough: 'canplaythrough',
	  topDurationChange: 'durationchange',
	  topEmptied: 'emptied',
	  topEncrypted: 'encrypted',
	  topEnded: 'ended',
	  topError: 'error',
	  topLoadedData: 'loadeddata',
	  topLoadedMetadata: 'loadedmetadata',
	  topLoadStart: 'loadstart',
	  topPause: 'pause',
	  topPlay: 'play',
	  topPlaying: 'playing',
	  topProgress: 'progress',
	  topRateChange: 'ratechange',
	  topSeeked: 'seeked',
	  topSeeking: 'seeking',
	  topStalled: 'stalled',
	  topSuspend: 'suspend',
	  topTimeUpdate: 'timeupdate',
	  topVolumeChange: 'volumechange',
	  topWaiting: 'waiting'
	};

	function trackInputValue() {
	  inputValueTracking.track(this);
	}

	function trapBubbledEventsLocal() {
	  var inst = this;
	  // If a component renders to null or if another component fatals and causes
	  // the state of the tree to be corrupted, `node` here can be null.
	  !inst._rootNodeID ? (undefined) !== 'production' ? invariant(false, 'Must be mounted to trap events') : _prodInvariant('63') : void 0;
	  var node = getNode(inst);
	  !node ? (undefined) !== 'production' ? invariant(false, 'trapBubbledEvent(...): Requires node to be rendered.') : _prodInvariant('64') : void 0;

	  switch (inst._tag) {
	    case 'iframe':
	    case 'object':
	      inst._wrapperState.listeners = [ReactBrowserEventEmitter.trapBubbledEvent('topLoad', 'load', node)];
	      break;
	    case 'video':
	    case 'audio':
	      inst._wrapperState.listeners = [];
	      // Create listener for each media event
	      for (var event in mediaEvents) {
	        if (mediaEvents.hasOwnProperty(event)) {
	          inst._wrapperState.listeners.push(ReactBrowserEventEmitter.trapBubbledEvent(event, mediaEvents[event], node));
	        }
	      }
	      break;
	    case 'source':
	      inst._wrapperState.listeners = [ReactBrowserEventEmitter.trapBubbledEvent('topError', 'error', node)];
	      break;
	    case 'img':
	      inst._wrapperState.listeners = [ReactBrowserEventEmitter.trapBubbledEvent('topError', 'error', node), ReactBrowserEventEmitter.trapBubbledEvent('topLoad', 'load', node)];
	      break;
	    case 'form':
	      inst._wrapperState.listeners = [ReactBrowserEventEmitter.trapBubbledEvent('topReset', 'reset', node), ReactBrowserEventEmitter.trapBubbledEvent('topSubmit', 'submit', node)];
	      break;
	    case 'input':
	    case 'select':
	    case 'textarea':
	      inst._wrapperState.listeners = [ReactBrowserEventEmitter.trapBubbledEvent('topInvalid', 'invalid', node)];
	      break;
	  }
	}

	function postUpdateSelectWrapper() {
	  ReactDOMSelect.postUpdateWrapper(this);
	}

	// For HTML, certain tags should omit their close tag. We keep a whitelist for
	// those special-case tags.

	var omittedCloseTags = {
	  area: true,
	  base: true,
	  br: true,
	  col: true,
	  embed: true,
	  hr: true,
	  img: true,
	  input: true,
	  keygen: true,
	  link: true,
	  meta: true,
	  param: true,
	  source: true,
	  track: true,
	  wbr: true
	  // NOTE: menuitem's close tag should be omitted, but that causes problems.
	};

	var newlineEatingTags = {
	  listing: true,
	  pre: true,
	  textarea: true
	};

	// For HTML, certain tags cannot have children. This has the same purpose as
	// `omittedCloseTags` except that `menuitem` should still have its closing tag.

	var voidElementTags = _assign({
	  menuitem: true
	}, omittedCloseTags);

	// We accept any tag to be rendered but since this gets injected into arbitrary
	// HTML, we want to make sure that it's a safe tag.
	// http://www.w3.org/TR/REC-xml/#NT-Name

	var VALID_TAG_REGEX = /^[a-zA-Z][a-zA-Z:_\.\-\d]*$/; // Simplified subset
	var validatedTagCache = {};
	var hasOwnProperty = {}.hasOwnProperty;

	function validateDangerousTag(tag) {
	  if (!hasOwnProperty.call(validatedTagCache, tag)) {
	    !VALID_TAG_REGEX.test(tag) ? (undefined) !== 'production' ? invariant(false, 'Invalid tag: %s', tag) : _prodInvariant('65', tag) : void 0;
	    validatedTagCache[tag] = true;
	  }
	}

	function isCustomComponent(tagName, props) {
	  return tagName.indexOf('-') >= 0 || props.is != null;
	}

	var globalIdCounter = 1;

	/**
	 * Creates a new React class that is idempotent and capable of containing other
	 * React components. It accepts event listeners and DOM properties that are
	 * valid according to `DOMProperty`.
	 *
	 *  - Event listeners: `onClick`, `onMouseDown`, etc.
	 *  - DOM properties: `className`, `name`, `title`, etc.
	 *
	 * The `style` property functions differently from the DOM API. It accepts an
	 * object mapping of style properties to values.
	 *
	 * @constructor ReactDOMComponent
	 * @extends ReactMultiChild
	 */
	function ReactDOMComponent(element) {
	  var tag = element.type;
	  validateDangerousTag(tag);
	  this._currentElement = element;
	  this._tag = tag.toLowerCase();
	  this._namespaceURI = null;
	  this._renderedChildren = null;
	  this._previousStyle = null;
	  this._previousStyleCopy = null;
	  this._hostNode = null;
	  this._hostParent = null;
	  this._rootNodeID = 0;
	  this._domID = 0;
	  this._hostContainerInfo = null;
	  this._wrapperState = null;
	  this._topLevelWrapper = null;
	  this._flags = 0;
	  if ((undefined) !== 'production') {
	    this._ancestorInfo = null;
	    setAndValidateContentChildDev.call(this, null);
	  }
	}

	ReactDOMComponent.displayName = 'ReactDOMComponent';

	ReactDOMComponent.Mixin = {
	  /**
	   * Generates root tag markup then recurses. This method has side effects and
	   * is not idempotent.
	   *
	   * @internal
	   * @param {ReactReconcileTransaction|ReactServerRenderingTransaction} transaction
	   * @param {?ReactDOMComponent} the parent component instance
	   * @param {?object} info about the host container
	   * @param {object} context
	   * @return {string} The computed markup.
	   */
	  mountComponent: function (transaction, hostParent, hostContainerInfo, context) {
	    this._rootNodeID = globalIdCounter++;
	    this._domID = hostContainerInfo._idCounter++;
	    this._hostParent = hostParent;
	    this._hostContainerInfo = hostContainerInfo;

	    var props = this._currentElement.props;

	    switch (this._tag) {
	      case 'audio':
	      case 'form':
	      case 'iframe':
	      case 'img':
	      case 'link':
	      case 'object':
	      case 'source':
	      case 'video':
	        this._wrapperState = {
	          listeners: null
	        };
	        transaction.getReactMountReady().enqueue(trapBubbledEventsLocal, this);
	        break;
	      case 'input':
	        ReactDOMInput.mountWrapper(this, props, hostParent);
	        props = ReactDOMInput.getHostProps(this, props);
	        transaction.getReactMountReady().enqueue(trackInputValue, this);
	        transaction.getReactMountReady().enqueue(trapBubbledEventsLocal, this);
	        break;
	      case 'option':
	        ReactDOMOption.mountWrapper(this, props, hostParent);
	        props = ReactDOMOption.getHostProps(this, props);
	        break;
	      case 'select':
	        ReactDOMSelect.mountWrapper(this, props, hostParent);
	        props = ReactDOMSelect.getHostProps(this, props);
	        transaction.getReactMountReady().enqueue(trapBubbledEventsLocal, this);
	        break;
	      case 'textarea':
	        ReactDOMTextarea.mountWrapper(this, props, hostParent);
	        props = ReactDOMTextarea.getHostProps(this, props);
	        transaction.getReactMountReady().enqueue(trackInputValue, this);
	        transaction.getReactMountReady().enqueue(trapBubbledEventsLocal, this);
	        break;
	    }

	    assertValidProps(this, props);

	    // We create tags in the namespace of their parent container, except HTML
	    // tags get no namespace.
	    var namespaceURI;
	    var parentTag;
	    if (hostParent != null) {
	      namespaceURI = hostParent._namespaceURI;
	      parentTag = hostParent._tag;
	    } else if (hostContainerInfo._tag) {
	      namespaceURI = hostContainerInfo._namespaceURI;
	      parentTag = hostContainerInfo._tag;
	    }
	    if (namespaceURI == null || namespaceURI === DOMNamespaces.svg && parentTag === 'foreignobject') {
	      namespaceURI = DOMNamespaces.html;
	    }
	    if (namespaceURI === DOMNamespaces.html) {
	      if (this._tag === 'svg') {
	        namespaceURI = DOMNamespaces.svg;
	      } else if (this._tag === 'math') {
	        namespaceURI = DOMNamespaces.mathml;
	      }
	    }
	    this._namespaceURI = namespaceURI;

	    if ((undefined) !== 'production') {
	      var parentInfo;
	      if (hostParent != null) {
	        parentInfo = hostParent._ancestorInfo;
	      } else if (hostContainerInfo._tag) {
	        parentInfo = hostContainerInfo._ancestorInfo;
	      }
	      if (parentInfo) {
	        // parentInfo should always be present except for the top-level
	        // component when server rendering
	        validateDOMNesting(this._tag, null, this, parentInfo);
	      }
	      this._ancestorInfo = validateDOMNesting.updatedAncestorInfo(parentInfo, this._tag, this);
	    }

	    var mountImage;
	    if (transaction.useCreateElement) {
	      var ownerDocument = hostContainerInfo._ownerDocument;
	      var el;
	      if (namespaceURI === DOMNamespaces.html) {
	        if (this._tag === 'script') {
	          // Create the script via .innerHTML so its "parser-inserted" flag is
	          // set to true and it does not execute
	          var div = ownerDocument.createElement('div');
	          var type = this._currentElement.type;
	          div.innerHTML = '<' + type + '></' + type + '>';
	          el = div.removeChild(div.firstChild);
	        } else if (props.is) {
	          el = ownerDocument.createElement(this._currentElement.type, props.is);
	        } else {
	          // Separate else branch instead of using `props.is || undefined` above becuase of a Firefox bug.
	          // See discussion in https://github.com/facebook/react/pull/6896
	          // and discussion in https://bugzilla.mozilla.org/show_bug.cgi?id=1276240
	          el = ownerDocument.createElement(this._currentElement.type);
	        }
	      } else {
	        el = ownerDocument.createElementNS(namespaceURI, this._currentElement.type);
	      }
	      ReactDOMComponentTree.precacheNode(this, el);
	      this._flags |= Flags.hasCachedChildNodes;
	      if (!this._hostParent) {
	        DOMPropertyOperations.setAttributeForRoot(el);
	      }
	      this._updateDOMProperties(null, props, transaction);
	      var lazyTree = DOMLazyTree(el);
	      this._createInitialChildren(transaction, props, context, lazyTree);
	      mountImage = lazyTree;
	    } else {
	      var tagOpen = this._createOpenTagMarkupAndPutListeners(transaction, props);
	      var tagContent = this._createContentMarkup(transaction, props, context);
	      if (!tagContent && omittedCloseTags[this._tag]) {
	        mountImage = tagOpen + '/>';
	      } else {
	        mountImage = tagOpen + '>' + tagContent + '</' + this._currentElement.type + '>';
	      }
	    }

	    switch (this._tag) {
	      case 'input':
	        transaction.getReactMountReady().enqueue(inputPostMount, this);
	        if (props.autoFocus) {
	          transaction.getReactMountReady().enqueue(AutoFocusUtils.focusDOMComponent, this);
	        }
	        break;
	      case 'textarea':
	        transaction.getReactMountReady().enqueue(textareaPostMount, this);
	        if (props.autoFocus) {
	          transaction.getReactMountReady().enqueue(AutoFocusUtils.focusDOMComponent, this);
	        }
	        break;
	      case 'select':
	        if (props.autoFocus) {
	          transaction.getReactMountReady().enqueue(AutoFocusUtils.focusDOMComponent, this);
	        }
	        break;
	      case 'button':
	        if (props.autoFocus) {
	          transaction.getReactMountReady().enqueue(AutoFocusUtils.focusDOMComponent, this);
	        }
	        break;
	      case 'option':
	        transaction.getReactMountReady().enqueue(optionPostMount, this);
	        break;
	    }

	    return mountImage;
	  },

	  /**
	   * Creates markup for the open tag and all attributes.
	   *
	   * This method has side effects because events get registered.
	   *
	   * Iterating over object properties is faster than iterating over arrays.
	   * @see http://jsperf.com/obj-vs-arr-iteration
	   *
	   * @private
	   * @param {ReactReconcileTransaction|ReactServerRenderingTransaction} transaction
	   * @param {object} props
	   * @return {string} Markup of opening tag.
	   */
	  _createOpenTagMarkupAndPutListeners: function (transaction, props) {
	    var ret = '<' + this._currentElement.type;

	    for (var propKey in props) {
	      if (!props.hasOwnProperty(propKey)) {
	        continue;
	      }
	      var propValue = props[propKey];
	      if (propValue == null) {
	        continue;
	      }
	      if (registrationNameModules.hasOwnProperty(propKey)) {
	        if (propValue) {
	          enqueuePutListener(this, propKey, propValue, transaction);
	        }
	      } else {
	        if (propKey === STYLE) {
	          if (propValue) {
	            if ((undefined) !== 'production') {
	              // See `_updateDOMProperties`. style block
	              this._previousStyle = propValue;
	            }
	            propValue = this._previousStyleCopy = _assign({}, props.style);
	          }
	          propValue = CSSPropertyOperations.createMarkupForStyles(propValue, this);
	        }
	        var markup = null;
	        if (this._tag != null && isCustomComponent(this._tag, props)) {
	          if (!RESERVED_PROPS.hasOwnProperty(propKey)) {
	            markup = DOMPropertyOperations.createMarkupForCustomAttribute(propKey, propValue);
	          }
	        } else {
	          markup = DOMPropertyOperations.createMarkupForProperty(propKey, propValue);
	        }
	        if (markup) {
	          ret += ' ' + markup;
	        }
	      }
	    }

	    // For static pages, no need to put React ID and checksum. Saves lots of
	    // bytes.
	    if (transaction.renderToStaticMarkup) {
	      return ret;
	    }

	    if (!this._hostParent) {
	      ret += ' ' + DOMPropertyOperations.createMarkupForRoot();
	    }
	    ret += ' ' + DOMPropertyOperations.createMarkupForID(this._domID);
	    return ret;
	  },

	  /**
	   * Creates markup for the content between the tags.
	   *
	   * @private
	   * @param {ReactReconcileTransaction|ReactServerRenderingTransaction} transaction
	   * @param {object} props
	   * @param {object} context
	   * @return {string} Content markup.
	   */
	  _createContentMarkup: function (transaction, props, context) {
	    var ret = '';

	    // Intentional use of != to avoid catching zero/false.
	    var innerHTML = props.dangerouslySetInnerHTML;
	    if (innerHTML != null) {
	      if (innerHTML.__html != null) {
	        ret = innerHTML.__html;
	      }
	    } else {
	      var contentToUse = CONTENT_TYPES[typeof props.children] ? props.children : null;
	      var childrenToUse = contentToUse != null ? null : props.children;
	      if (contentToUse != null) {
	        // TODO: Validate that text is allowed as a child of this node
	        ret = escapeTextContentForBrowser(contentToUse);
	        if ((undefined) !== 'production') {
	          setAndValidateContentChildDev.call(this, contentToUse);
	        }
	      } else if (childrenToUse != null) {
	        var mountImages = this.mountChildren(childrenToUse, transaction, context);
	        ret = mountImages.join('');
	      }
	    }
	    if (newlineEatingTags[this._tag] && ret.charAt(0) === '\n') {
	      // text/html ignores the first character in these tags if it's a newline
	      // Prefer to break application/xml over text/html (for now) by adding
	      // a newline specifically to get eaten by the parser. (Alternately for
	      // textareas, replacing "^\n" with "\r\n" doesn't get eaten, and the first
	      // \r is normalized out by HTMLTextAreaElement#value.)
	      // See: <http://www.w3.org/TR/html-polyglot/#newlines-in-textarea-and-pre>
	      // See: <http://www.w3.org/TR/html5/syntax.html#element-restrictions>
	      // See: <http://www.w3.org/TR/html5/syntax.html#newlines>
	      // See: Parsing of "textarea" "listing" and "pre" elements
	      //  from <http://www.w3.org/TR/html5/syntax.html#parsing-main-inbody>
	      return '\n' + ret;
	    } else {
	      return ret;
	    }
	  },

	  _createInitialChildren: function (transaction, props, context, lazyTree) {
	    // Intentional use of != to avoid catching zero/false.
	    var innerHTML = props.dangerouslySetInnerHTML;
	    if (innerHTML != null) {
	      if (innerHTML.__html != null) {
	        DOMLazyTree.queueHTML(lazyTree, innerHTML.__html);
	      }
	    } else {
	      var contentToUse = CONTENT_TYPES[typeof props.children] ? props.children : null;
	      var childrenToUse = contentToUse != null ? null : props.children;
	      // TODO: Validate that text is allowed as a child of this node
	      if (contentToUse != null) {
	        // Avoid setting textContent when the text is empty. In IE11 setting
	        // textContent on a text area will cause the placeholder to not
	        // show within the textarea until it has been focused and blurred again.
	        // https://github.com/facebook/react/issues/6731#issuecomment-254874553
	        if (contentToUse !== '') {
	          if ((undefined) !== 'production') {
	            setAndValidateContentChildDev.call(this, contentToUse);
	          }
	          DOMLazyTree.queueText(lazyTree, contentToUse);
	        }
	      } else if (childrenToUse != null) {
	        var mountImages = this.mountChildren(childrenToUse, transaction, context);
	        for (var i = 0; i < mountImages.length; i++) {
	          DOMLazyTree.queueChild(lazyTree, mountImages[i]);
	        }
	      }
	    }
	  },

	  /**
	   * Receives a next element and updates the component.
	   *
	   * @internal
	   * @param {ReactElement} nextElement
	   * @param {ReactReconcileTransaction|ReactServerRenderingTransaction} transaction
	   * @param {object} context
	   */
	  receiveComponent: function (nextElement, transaction, context) {
	    var prevElement = this._currentElement;
	    this._currentElement = nextElement;
	    this.updateComponent(transaction, prevElement, nextElement, context);
	  },

	  /**
	   * Updates a DOM component after it has already been allocated and
	   * attached to the DOM. Reconciles the root DOM node, then recurses.
	   *
	   * @param {ReactReconcileTransaction} transaction
	   * @param {ReactElement} prevElement
	   * @param {ReactElement} nextElement
	   * @internal
	   * @overridable
	   */
	  updateComponent: function (transaction, prevElement, nextElement, context) {
	    var lastProps = prevElement.props;
	    var nextProps = this._currentElement.props;

	    switch (this._tag) {
	      case 'input':
	        lastProps = ReactDOMInput.getHostProps(this, lastProps);
	        nextProps = ReactDOMInput.getHostProps(this, nextProps);
	        break;
	      case 'option':
	        lastProps = ReactDOMOption.getHostProps(this, lastProps);
	        nextProps = ReactDOMOption.getHostProps(this, nextProps);
	        break;
	      case 'select':
	        lastProps = ReactDOMSelect.getHostProps(this, lastProps);
	        nextProps = ReactDOMSelect.getHostProps(this, nextProps);
	        break;
	      case 'textarea':
	        lastProps = ReactDOMTextarea.getHostProps(this, lastProps);
	        nextProps = ReactDOMTextarea.getHostProps(this, nextProps);
	        break;
	    }

	    assertValidProps(this, nextProps);
	    this._updateDOMProperties(lastProps, nextProps, transaction);
	    this._updateDOMChildren(lastProps, nextProps, transaction, context);

	    switch (this._tag) {
	      case 'input':
	        // Update the wrapper around inputs *after* updating props. This has to
	        // happen after `_updateDOMProperties`. Otherwise HTML5 input validations
	        // raise warnings and prevent the new value from being assigned.
	        ReactDOMInput.updateWrapper(this);

	        // We also check that we haven't missed a value update, such as a
	        // Radio group shifting the checked value to another named radio input.
	        inputValueTracking.updateValueIfChanged(this);
	        break;
	      case 'textarea':
	        ReactDOMTextarea.updateWrapper(this);
	        break;
	      case 'select':
	        // <select> value update needs to occur after <option> children
	        // reconciliation
	        transaction.getReactMountReady().enqueue(postUpdateSelectWrapper, this);
	        break;
	    }
	  },

	  /**
	   * Reconciles the properties by detecting differences in property values and
	   * updating the DOM as necessary. This function is probably the single most
	   * critical path for performance optimization.
	   *
	   * TODO: Benchmark whether checking for changed values in memory actually
	   *       improves performance (especially statically positioned elements).
	   * TODO: Benchmark the effects of putting this at the top since 99% of props
	   *       do not change for a given reconciliation.
	   * TODO: Benchmark areas that can be improved with caching.
	   *
	   * @private
	   * @param {object} lastProps
	   * @param {object} nextProps
	   * @param {?DOMElement} node
	   */
	  _updateDOMProperties: function (lastProps, nextProps, transaction) {
	    var propKey;
	    var styleName;
	    var styleUpdates;
	    for (propKey in lastProps) {
	      if (nextProps.hasOwnProperty(propKey) || !lastProps.hasOwnProperty(propKey) || lastProps[propKey] == null) {
	        continue;
	      }
	      if (propKey === STYLE) {
	        var lastStyle = this._previousStyleCopy;
	        for (styleName in lastStyle) {
	          if (lastStyle.hasOwnProperty(styleName)) {
	            styleUpdates = styleUpdates || {};
	            styleUpdates[styleName] = '';
	          }
	        }
	        this._previousStyleCopy = null;
	      } else if (registrationNameModules.hasOwnProperty(propKey)) {
	        if (lastProps[propKey]) {
	          // Only call deleteListener if there was a listener previously or
	          // else willDeleteListener gets called when there wasn't actually a
	          // listener (e.g., onClick={null})
	          deleteListener(this, propKey);
	        }
	      } else if (isCustomComponent(this._tag, lastProps)) {
	        if (!RESERVED_PROPS.hasOwnProperty(propKey)) {
	          DOMPropertyOperations.deleteValueForAttribute(getNode(this), propKey);
	        }
	      } else if (DOMProperty.properties[propKey] || DOMProperty.isCustomAttribute(propKey)) {
	        DOMPropertyOperations.deleteValueForProperty(getNode(this), propKey);
	      }
	    }
	    for (propKey in nextProps) {
	      var nextProp = nextProps[propKey];
	      var lastProp = propKey === STYLE ? this._previousStyleCopy : lastProps != null ? lastProps[propKey] : undefined;
	      if (!nextProps.hasOwnProperty(propKey) || nextProp === lastProp || nextProp == null && lastProp == null) {
	        continue;
	      }
	      if (propKey === STYLE) {
	        if (nextProp) {
	          if ((undefined) !== 'production') {
	            checkAndWarnForMutatedStyle(this._previousStyleCopy, this._previousStyle, this);
	            this._previousStyle = nextProp;
	          }
	          nextProp = this._previousStyleCopy = _assign({}, nextProp);
	        } else {
	          this._previousStyleCopy = null;
	        }
	        if (lastProp) {
	          // Unset styles on `lastProp` but not on `nextProp`.
	          for (styleName in lastProp) {
	            if (lastProp.hasOwnProperty(styleName) && (!nextProp || !nextProp.hasOwnProperty(styleName))) {
	              styleUpdates = styleUpdates || {};
	              styleUpdates[styleName] = '';
	            }
	          }
	          // Update styles that changed since `lastProp`.
	          for (styleName in nextProp) {
	            if (nextProp.hasOwnProperty(styleName) && lastProp[styleName] !== nextProp[styleName]) {
	              styleUpdates = styleUpdates || {};
	              styleUpdates[styleName] = nextProp[styleName];
	            }
	          }
	        } else {
	          // Relies on `updateStylesByID` not mutating `styleUpdates`.
	          styleUpdates = nextProp;
	        }
	      } else if (registrationNameModules.hasOwnProperty(propKey)) {
	        if (nextProp) {
	          enqueuePutListener(this, propKey, nextProp, transaction);
	        } else if (lastProp) {
	          deleteListener(this, propKey);
	        }
	      } else if (isCustomComponent(this._tag, nextProps)) {
	        if (!RESERVED_PROPS.hasOwnProperty(propKey)) {
	          DOMPropertyOperations.setValueForAttribute(getNode(this), propKey, nextProp);
	        }
	      } else if (DOMProperty.properties[propKey] || DOMProperty.isCustomAttribute(propKey)) {
	        var node = getNode(this);
	        // If we're updating to null or undefined, we should remove the property
	        // from the DOM node instead of inadvertently setting to a string. This
	        // brings us in line with the same behavior we have on initial render.
	        if (nextProp != null) {
	          DOMPropertyOperations.setValueForProperty(node, propKey, nextProp);
	        } else {
	          DOMPropertyOperations.deleteValueForProperty(node, propKey);
	        }
	      }
	    }
	    if (styleUpdates) {
	      CSSPropertyOperations.setValueForStyles(getNode(this), styleUpdates, this);
	    }
	  },

	  /**
	   * Reconciles the children with the various properties that affect the
	   * children content.
	   *
	   * @param {object} lastProps
	   * @param {object} nextProps
	   * @param {ReactReconcileTransaction} transaction
	   * @param {object} context
	   */
	  _updateDOMChildren: function (lastProps, nextProps, transaction, context) {
	    var lastContent = CONTENT_TYPES[typeof lastProps.children] ? lastProps.children : null;
	    var nextContent = CONTENT_TYPES[typeof nextProps.children] ? nextProps.children : null;

	    var lastHtml = lastProps.dangerouslySetInnerHTML && lastProps.dangerouslySetInnerHTML.__html;
	    var nextHtml = nextProps.dangerouslySetInnerHTML && nextProps.dangerouslySetInnerHTML.__html;

	    // Note the use of `!=` which checks for null or undefined.
	    var lastChildren = lastContent != null ? null : lastProps.children;
	    var nextChildren = nextContent != null ? null : nextProps.children;

	    // If we're switching from children to content/html or vice versa, remove
	    // the old content
	    var lastHasContentOrHtml = lastContent != null || lastHtml != null;
	    var nextHasContentOrHtml = nextContent != null || nextHtml != null;
	    if (lastChildren != null && nextChildren == null) {
	      this.updateChildren(null, transaction, context);
	    } else if (lastHasContentOrHtml && !nextHasContentOrHtml) {
	      this.updateTextContent('');
	      if ((undefined) !== 'production') {
	        ReactInstrumentation.debugTool.onSetChildren(this._debugID, []);
	      }
	    }

	    if (nextContent != null) {
	      if (lastContent !== nextContent) {
	        this.updateTextContent('' + nextContent);
	        if ((undefined) !== 'production') {
	          setAndValidateContentChildDev.call(this, nextContent);
	        }
	      }
	    } else if (nextHtml != null) {
	      if (lastHtml !== nextHtml) {
	        this.updateMarkup('' + nextHtml);
	      }
	      if ((undefined) !== 'production') {
	        ReactInstrumentation.debugTool.onSetChildren(this._debugID, []);
	      }
	    } else if (nextChildren != null) {
	      if ((undefined) !== 'production') {
	        setAndValidateContentChildDev.call(this, null);
	      }

	      this.updateChildren(nextChildren, transaction, context);
	    }
	  },

	  getHostNode: function () {
	    return getNode(this);
	  },

	  /**
	   * Destroys all event registrations for this instance. Does not remove from
	   * the DOM. That must be done by the parent.
	   *
	   * @internal
	   */
	  unmountComponent: function (safely) {
	    switch (this._tag) {
	      case 'audio':
	      case 'form':
	      case 'iframe':
	      case 'img':
	      case 'link':
	      case 'object':
	      case 'source':
	      case 'video':
	        var listeners = this._wrapperState.listeners;
	        if (listeners) {
	          for (var i = 0; i < listeners.length; i++) {
	            listeners[i].remove();
	          }
	        }
	        break;
	      case 'input':
	      case 'textarea':
	        inputValueTracking.stopTracking(this);
	        break;
	      case 'html':
	      case 'head':
	      case 'body':
	        /**
	         * Components like <html> <head> and <body> can't be removed or added
	         * easily in a cross-browser way, however it's valuable to be able to
	         * take advantage of React's reconciliation for styling and <title>
	         * management. So we just document it and throw in dangerous cases.
	         */
	         true ? (undefined) !== 'production' ? invariant(false, '<%s> tried to unmount. Because of cross-browser quirks it is impossible to unmount some top-level components (eg <html>, <head>, and <body>) reliably and efficiently. To fix this, have a single top-level component that never unmounts render these elements.', this._tag) : _prodInvariant('66', this._tag) : void 0;
	        break;
	    }

	    this.unmountChildren(safely);
	    ReactDOMComponentTree.uncacheNode(this);
	    EventPluginHub.deleteAllListeners(this);
	    this._rootNodeID = 0;
	    this._domID = 0;
	    this._wrapperState = null;

	    if ((undefined) !== 'production') {
	      setAndValidateContentChildDev.call(this, null);
	    }
	  },

	  getPublicInstance: function () {
	    return getNode(this);
	  }
	};

	_assign(ReactDOMComponent.prototype, ReactDOMComponent.Mixin, ReactMultiChild.Mixin);

	module.exports = ReactDOMComponent;

/***/ }),
/* 817 */
/***/ (function(module, exports, __webpack_require__) {

	/**
	 * Copyright (c) 2013-present, Facebook, Inc.
	 *
	 * This source code is licensed under the MIT license found in the
	 * LICENSE file in the root directory of this source tree.
	 *
	 */

	'use strict';

	var validateDOMNesting = __webpack_require__(228);

	var DOC_NODE_TYPE = 9;

	function ReactDOMContainerInfo(topLevelWrapper, node) {
	  var info = {
	    _topLevelWrapper: topLevelWrapper,
	    _idCounter: 1,
	    _ownerDocument: node ? node.nodeType === DOC_NODE_TYPE ? node : node.ownerDocument : null,
	    _node: node,
	    _tag: node ? node.nodeName.toLowerCase() : null,
	    _namespaceURI: node ? node.namespaceURI : null
	  };
	  if ((undefined) !== 'production') {
	    info._ancestorInfo = node ? validateDOMNesting.updatedAncestorInfo(null, info._tag, null) : null;
	  }
	  return info;
	}

	module.exports = ReactDOMContainerInfo;

/***/ }),
/* 818 */
/***/ (function(module, exports, __webpack_require__) {

	/**
	 * Copyright (c) 2014-present, Facebook, Inc.
	 *
	 * This source code is licensed under the MIT license found in the
	 * LICENSE file in the root directory of this source tree.
	 *
	 */

	'use strict';

	var _assign = __webpack_require__(19);

	var DOMLazyTree = __webpack_require__(95);
	var ReactDOMComponentTree = __webpack_require__(21);

	var ReactDOMEmptyComponent = function (instantiate) {
	  // ReactCompositeComponent uses this:
	  this._currentElement = null;
	  // ReactDOMComponentTree uses these:
	  this._hostNode = null;
	  this._hostParent = null;
	  this._hostContainerInfo = null;
	  this._domID = 0;
	};
	_assign(ReactDOMEmptyComponent.prototype, {
	  mountComponent: function (transaction, hostParent, hostContainerInfo, context) {
	    var domID = hostContainerInfo._idCounter++;
	    this._domID = domID;
	    this._hostParent = hostParent;
	    this._hostContainerInfo = hostContainerInfo;

	    var nodeValue = ' react-empty: ' + this._domID + ' ';
	    if (transaction.useCreateElement) {
	      var ownerDocument = hostContainerInfo._ownerDocument;
	      var node = ownerDocument.createComment(nodeValue);
	      ReactDOMComponentTree.precacheNode(this, node);
	      return DOMLazyTree(node);
	    } else {
	      if (transaction.renderToStaticMarkup) {
	        // Normally we'd insert a comment node, but since this is a situation
	        // where React won't take over (static pages), we can simply return
	        // nothing.
	        return '';
	      }
	      return '<!--' + nodeValue + '-->';
	    }
	  },
	  receiveComponent: function () {},
	  getHostNode: function () {
	    return ReactDOMComponentTree.getNodeFromInstance(this);
	  },
	  unmountComponent: function () {
	    ReactDOMComponentTree.uncacheNode(this);
	  }
	});

	module.exports = ReactDOMEmptyComponent;

/***/ }),
/* 819 */
/***/ (function(module, exports) {

	/**
	 * Copyright (c) 2013-present, Facebook, Inc.
	 *
	 * This source code is licensed under the MIT license found in the
	 * LICENSE file in the root directory of this source tree.
	 *
	 */

	'use strict';

	var ReactDOMFeatureFlags = {
	  useCreateElement: true,
	  useFiber: false
	};

	module.exports = ReactDOMFeatureFlags;

/***/ }),
/* 820 */
/***/ (function(module, exports, __webpack_require__) {

	/**
	 * Copyright (c) 2013-present, Facebook, Inc.
	 *
	 * This source code is licensed under the MIT license found in the
	 * LICENSE file in the root directory of this source tree.
	 *
	 */

	'use strict';

	var DOMChildrenOperations = __webpack_require__(214);
	var ReactDOMComponentTree = __webpack_require__(21);

	/**
	 * Operations used to process updates to DOM nodes.
	 */
	var ReactDOMIDOperations = {
	  /**
	   * Updates a component's children by processing a series of updates.
	   *
	   * @param {array<object>} updates List of update configurations.
	   * @internal
	   */
	  dangerouslyProcessChildrenUpdates: function (parentInst, updates) {
	    var node = ReactDOMComponentTree.getNodeFromInstance(parentInst);
	    DOMChildrenOperations.processUpdates(node, updates);
	  }
	};

	module.exports = ReactDOMIDOperations;

/***/ }),
/* 821 */
/***/ (function(module, exports, __webpack_require__) {

	/**
	 * Copyright (c) 2013-present, Facebook, Inc.
	 *
	 * This source code is licensed under the MIT license found in the
	 * LICENSE file in the root directory of this source tree.
	 *
	 */

	'use strict';

	var _prodInvariant = __webpack_require__(13),
	    _assign = __webpack_require__(19);

	var DOMPropertyOperations = __webpack_require__(341);
	var LinkedValueUtils = __webpack_require__(218);
	var ReactDOMComponentTree = __webpack_require__(21);
	var ReactUpdates = __webpack_require__(55);

	var invariant = __webpack_require__(7);
	var warning = __webpack_require__(8);

	var didWarnValueLink = false;
	var didWarnCheckedLink = false;
	var didWarnValueDefaultValue = false;
	var didWarnCheckedDefaultChecked = false;
	var didWarnControlledToUncontrolled = false;
	var didWarnUncontrolledToControlled = false;

	function forceUpdateIfMounted() {
	  if (this._rootNodeID) {
	    // DOM component is still mounted; update
	    ReactDOMInput.updateWrapper(this);
	  }
	}

	function isControlled(props) {
	  var usesChecked = props.type === 'checkbox' || props.type === 'radio';
	  return usesChecked ? props.checked != null : props.value != null;
	}

	/**
	 * Implements an <input> host component that allows setting these optional
	 * props: `checked`, `value`, `defaultChecked`, and `defaultValue`.
	 *
	 * If `checked` or `value` are not supplied (or null/undefined), user actions
	 * that affect the checked state or value will trigger updates to the element.
	 *
	 * If they are supplied (and not null/undefined), the rendered element will not
	 * trigger updates to the element. Instead, the props must change in order for
	 * the rendered element to be updated.
	 *
	 * The rendered element will be initialized as unchecked (or `defaultChecked`)
	 * with an empty value (or `defaultValue`).
	 *
	 * @see http://www.w3.org/TR/2012/WD-html5-20121025/the-input-element.html
	 */
	var ReactDOMInput = {
	  getHostProps: function (inst, props) {
	    var value = LinkedValueUtils.getValue(props);
	    var checked = LinkedValueUtils.getChecked(props);

	    var hostProps = _assign({
	      // Make sure we set .type before any other properties (setting .value
	      // before .type means .value is lost in IE11 and below)
	      type: undefined,
	      // Make sure we set .step before .value (setting .value before .step
	      // means .value is rounded on mount, based upon step precision)
	      step: undefined,
	      // Make sure we set .min & .max before .value (to ensure proper order
	      // in corner cases such as min or max deriving from value, e.g. Issue #7170)
	      min: undefined,
	      max: undefined
	    }, props, {
	      defaultChecked: undefined,
	      defaultValue: undefined,
	      value: value != null ? value : inst._wrapperState.initialValue,
	      checked: checked != null ? checked : inst._wrapperState.initialChecked,
	      onChange: inst._wrapperState.onChange
	    });

	    return hostProps;
	  },

	  mountWrapper: function (inst, props) {
	    if ((undefined) !== 'production') {
	      LinkedValueUtils.checkPropTypes('input', props, inst._currentElement._owner);

	      var owner = inst._currentElement._owner;

	      if (props.valueLink !== undefined && !didWarnValueLink) {
	        (undefined) !== 'production' ? warning(false, '`valueLink` prop on `input` is deprecated; set `value` and `onChange` instead.') : void 0;
	        didWarnValueLink = true;
	      }
	      if (props.checkedLink !== undefined && !didWarnCheckedLink) {
	        (undefined) !== 'production' ? warning(false, '`checkedLink` prop on `input` is deprecated; set `value` and `onChange` instead.') : void 0;
	        didWarnCheckedLink = true;
	      }
	      if (props.checked !== undefined && props.defaultChecked !== undefined && !didWarnCheckedDefaultChecked) {
	        (undefined) !== 'production' ? warning(false, '%s contains an input of type %s with both checked and defaultChecked props. ' + 'Input elements must be either controlled or uncontrolled ' + '(specify either the checked prop, or the defaultChecked prop, but not ' + 'both). Decide between using a controlled or uncontrolled input ' + 'element and remove one of these props. More info: ' + 'https://fb.me/react-controlled-components', owner && owner.getName() || 'A component', props.type) : void 0;
	        didWarnCheckedDefaultChecked = true;
	      }
	      if (props.value !== undefined && props.defaultValue !== undefined && !didWarnValueDefaultValue) {
	        (undefined) !== 'production' ? warning(false, '%s contains an input of type %s with both value and defaultValue props. ' + 'Input elements must be either controlled or uncontrolled ' + '(specify either the value prop, or the defaultValue prop, but not ' + 'both). Decide between using a controlled or uncontrolled input ' + 'element and remove one of these props. More info: ' + 'https://fb.me/react-controlled-components', owner && owner.getName() || 'A component', props.type) : void 0;
	        didWarnValueDefaultValue = true;
	      }
	    }

	    var defaultValue = props.defaultValue;
	    inst._wrapperState = {
	      initialChecked: props.checked != null ? props.checked : props.defaultChecked,
	      initialValue: props.value != null ? props.value : defaultValue,
	      listeners: null,
	      onChange: _handleChange.bind(inst),
	      controlled: isControlled(props)
	    };
	  },

	  updateWrapper: function (inst) {
	    var props = inst._currentElement.props;

	    if ((undefined) !== 'production') {
	      var controlled = isControlled(props);
	      var owner = inst._currentElement._owner;

	      if (!inst._wrapperState.controlled && controlled && !didWarnUncontrolledToControlled) {
	        (undefined) !== 'production' ? warning(false, '%s is changing an uncontrolled input of type %s to be controlled. ' + 'Input elements should not switch from uncontrolled to controlled (or vice versa). ' + 'Decide between using a controlled or uncontrolled input ' + 'element for the lifetime of the component. More info: https://fb.me/react-controlled-components', owner && owner.getName() || 'A component', props.type) : void 0;
	        didWarnUncontrolledToControlled = true;
	      }
	      if (inst._wrapperState.controlled && !controlled && !didWarnControlledToUncontrolled) {
	        (undefined) !== 'production' ? warning(false, '%s is changing a controlled input of type %s to be uncontrolled. ' + 'Input elements should not switch from controlled to uncontrolled (or vice versa). ' + 'Decide between using a controlled or uncontrolled input ' + 'element for the lifetime of the component. More info: https://fb.me/react-controlled-components', owner && owner.getName() || 'A component', props.type) : void 0;
	        didWarnControlledToUncontrolled = true;
	      }
	    }

	    // TODO: Shouldn't this be getChecked(props)?
	    var checked = props.checked;
	    if (checked != null) {
	      DOMPropertyOperations.setValueForProperty(ReactDOMComponentTree.getNodeFromInstance(inst), 'checked', checked || false);
	    }

	    var node = ReactDOMComponentTree.getNodeFromInstance(inst);
	    var value = LinkedValueUtils.getValue(props);
	    if (value != null) {
	      if (value === 0 && node.value === '') {
	        node.value = '0';
	        // Note: IE9 reports a number inputs as 'text', so check props instead.
	      } else if (props.type === 'number') {
	        // Simulate `input.valueAsNumber`. IE9 does not support it
	        var valueAsNumber = parseFloat(node.value, 10) || 0;

	        if (
	        // eslint-disable-next-line
	        value != valueAsNumber ||
	        // eslint-disable-next-line
	        value == valueAsNumber && node.value != value) {
	          // Cast `value` to a string to ensure the value is set correctly. While
	          // browsers typically do this as necessary, jsdom doesn't.
	          node.value = '' + value;
	        }
	      } else if (node.value !== '' + value) {
	        // Cast `value` to a string to ensure the value is set correctly. While
	        // browsers typically do this as necessary, jsdom doesn't.
	        node.value = '' + value;
	      }
	    } else {
	      if (props.value == null && props.defaultValue != null) {
	        // In Chrome, assigning defaultValue to certain input types triggers input validation.
	        // For number inputs, the display value loses trailing decimal points. For email inputs,
	        // Chrome raises "The specified value <x> is not a valid email address".
	        //
	        // Here we check to see if the defaultValue has actually changed, avoiding these problems
	        // when the user is inputting text
	        //
	        // https://github.com/facebook/react/issues/7253
	        if (node.defaultValue !== '' + props.defaultValue) {
	          node.defaultValue = '' + props.defaultValue;
	        }
	      }
	      if (props.checked == null && props.defaultChecked != null) {
	        node.defaultChecked = !!props.defaultChecked;
	      }
	    }
	  },

	  postMountWrapper: function (inst) {
	    var props = inst._currentElement.props;

	    // This is in postMount because we need access to the DOM node, which is not
	    // available until after the component has mounted.
	    var node = ReactDOMComponentTree.getNodeFromInstance(inst);

	    // Detach value from defaultValue. We won't do anything if we're working on
	    // submit or reset inputs as those values & defaultValues are linked. They
	    // are not resetable nodes so this operation doesn't matter and actually
	    // removes browser-default values (eg "Submit Query") when no value is
	    // provided.

	    switch (props.type) {
	      case 'submit':
	      case 'reset':
	        break;
	      case 'color':
	      case 'date':
	      case 'datetime':
	      case 'datetime-local':
	      case 'month':
	      case 'time':
	      case 'week':
	        // This fixes the no-show issue on iOS Safari and Android Chrome:
	        // https://github.com/facebook/react/issues/7233
	        node.value = '';
	        node.value = node.defaultValue;
	        break;
	      default:
	        node.value = node.value;
	        break;
	    }

	    // Normally, we'd just do `node.checked = node.checked` upon initial mount, less this bug
	    // this is needed to work around a chrome bug where setting defaultChecked
	    // will sometimes influence the value of checked (even after detachment).
	    // Reference: https://bugs.chromium.org/p/chromium/issues/detail?id=608416
	    // We need to temporarily unset name to avoid disrupting radio button groups.
	    var name = node.name;
	    if (name !== '') {
	      node.name = '';
	    }
	    node.defaultChecked = !node.defaultChecked;
	    node.defaultChecked = !node.defaultChecked;
	    if (name !== '') {
	      node.name = name;
	    }
	  }
	};

	function _handleChange(event) {
	  var props = this._currentElement.props;

	  var returnValue = LinkedValueUtils.executeOnChange(props, event);

	  // Here we use asap to wait until all updates have propagated, which
	  // is important when using controlled components within layers:
	  // https://github.com/facebook/react/issues/1698
	  ReactUpdates.asap(forceUpdateIfMounted, this);

	  var name = props.name;
	  if (props.type === 'radio' && name != null) {
	    var rootNode = ReactDOMComponentTree.getNodeFromInstance(this);
	    var queryRoot = rootNode;

	    while (queryRoot.parentNode) {
	      queryRoot = queryRoot.parentNode;
	    }

	    // If `rootNode.form` was non-null, then we could try `form.elements`,
	    // but that sometimes behaves strangely in IE8. We could also try using
	    // `form.getElementsByName`, but that will only return direct children
	    // and won't include inputs that use the HTML5 `form=` attribute. Since
	    // the input might not even be in a form, let's just use the global
	    // `querySelectorAll` to ensure we don't miss anything.
	    var group = queryRoot.querySelectorAll('input[name=' + JSON.stringify('' + name) + '][type="radio"]');

	    for (var i = 0; i < group.length; i++) {
	      var otherNode = group[i];
	      if (otherNode === rootNode || otherNode.form !== rootNode.form) {
	        continue;
	      }
	      // This will throw if radio buttons rendered by different copies of React
	      // and the same name are rendered into the same form (same as #1939).
	      // That's probably okay; we don't support it just as we don't support
	      // mixing React radio buttons with non-React ones.
	      var otherInstance = ReactDOMComponentTree.getInstanceFromNode(otherNode);
	      !otherInstance ? (undefined) !== 'production' ? invariant(false, 'ReactDOMInput: Mixing React and non-React radio inputs with the same `name` is not supported.') : _prodInvariant('90') : void 0;
	      // If this is a controlled radio button group, forcing the input that
	      // was previously checked to update will cause it to be come re-checked
	      // as appropriate.
	      ReactUpdates.asap(forceUpdateIfMounted, otherInstance);
	    }
	  }

	  return returnValue;
	}

	module.exports = ReactDOMInput;

/***/ }),
/* 822 */
/***/ (function(module, exports, __webpack_require__) {

	/**
	 * Copyright (c) 2013-present, Facebook, Inc.
	 *
	 * This source code is licensed under the MIT license found in the
	 * LICENSE file in the root directory of this source tree.
	 *
	 */

	'use strict';

	var DOMProperty = __webpack_require__(65);
	var ReactComponentTreeHook = __webpack_require__(34);

	var warning = __webpack_require__(8);

	var warnedProperties = {};
	var rARIA = new RegExp('^(aria)-[' + DOMProperty.ATTRIBUTE_NAME_CHAR + ']*$');

	function validateProperty(tagName, name, debugID) {
	  if (warnedProperties.hasOwnProperty(name) && warnedProperties[name]) {
	    return true;
	  }

	  if (rARIA.test(name)) {
	    var lowerCasedName = name.toLowerCase();
	    var standardName = DOMProperty.getPossibleStandardName.hasOwnProperty(lowerCasedName) ? DOMProperty.getPossibleStandardName[lowerCasedName] : null;

	    // If this is an aria-* attribute, but is not listed in the known DOM
	    // DOM properties, then it is an invalid aria-* attribute.
	    if (standardName == null) {
	      warnedProperties[name] = true;
	      return false;
	    }
	    // aria-* attributes should be lowercase; suggest the lowercase version.
	    if (name !== standardName) {
	      (undefined) !== 'production' ? warning(false, 'Unknown ARIA attribute %s. Did you mean %s?%s', name, standardName, ReactComponentTreeHook.getStackAddendumByID(debugID)) : void 0;
	      warnedProperties[name] = true;
	      return true;
	    }
	  }

	  return true;
	}

	function warnInvalidARIAProps(debugID, element) {
	  var invalidProps = [];

	  for (var key in element.props) {
	    var isValid = validateProperty(element.type, key, debugID);
	    if (!isValid) {
	      invalidProps.push(key);
	    }
	  }

	  var unknownPropString = invalidProps.map(function (prop) {
	    return '`' + prop + '`';
	  }).join(', ');

	  if (invalidProps.length === 1) {
	    (undefined) !== 'production' ? warning(false, 'Invalid aria prop %s on <%s> tag. ' + 'For details, see https://fb.me/invalid-aria-prop%s', unknownPropString, element.type, ReactComponentTreeHook.getStackAddendumByID(debugID)) : void 0;
	  } else if (invalidProps.length > 1) {
	    (undefined) !== 'production' ? warning(false, 'Invalid aria props %s on <%s> tag. ' + 'For details, see https://fb.me/invalid-aria-prop%s', unknownPropString, element.type, ReactComponentTreeHook.getStackAddendumByID(debugID)) : void 0;
	  }
	}

	function handleElement(debugID, element) {
	  if (element == null || typeof element.type !== 'string') {
	    return;
	  }
	  if (element.type.indexOf('-') >= 0 || element.props.is) {
	    return;
	  }

	  warnInvalidARIAProps(debugID, element);
	}

	var ReactDOMInvalidARIAHook = {
	  onBeforeMountComponent: function (debugID, element) {
	    if ((undefined) !== 'production') {
	      handleElement(debugID, element);
	    }
	  },
	  onBeforeUpdateComponent: function (debugID, element) {
	    if ((undefined) !== 'production') {
	      handleElement(debugID, element);
	    }
	  }
	};

	module.exports = ReactDOMInvalidARIAHook;

/***/ }),
/* 823 */
/***/ (function(module, exports, __webpack_require__) {

	/**
	 * Copyright (c) 2013-present, Facebook, Inc.
	 *
	 * This source code is licensed under the MIT license found in the
	 * LICENSE file in the root directory of this source tree.
	 *
	 */

	'use strict';

	var ReactComponentTreeHook = __webpack_require__(34);

	var warning = __webpack_require__(8);

	var didWarnValueNull = false;

	function handleElement(debugID, element) {
	  if (element == null) {
	    return;
	  }
	  if (element.type !== 'input' && element.type !== 'textarea' && element.type !== 'select') {
	    return;
	  }
	  if (element.props != null && element.props.value === null && !didWarnValueNull) {
	    (undefined) !== 'production' ? warning(false, '`value` prop on `%s` should not be null. ' + 'Consider using the empty string to clear the component or `undefined` ' + 'for uncontrolled components.%s', element.type, ReactComponentTreeHook.getStackAddendumByID(debugID)) : void 0;

	    didWarnValueNull = true;
	  }
	}

	var ReactDOMNullInputValuePropHook = {
	  onBeforeMountComponent: function (debugID, element) {
	    handleElement(debugID, element);
	  },
	  onBeforeUpdateComponent: function (debugID, element) {
	    handleElement(debugID, element);
	  }
	};

	module.exports = ReactDOMNullInputValuePropHook;

/***/ }),
/* 824 */
/***/ (function(module, exports, __webpack_require__) {

	/**
	 * Copyright (c) 2013-present, Facebook, Inc.
	 *
	 * This source code is licensed under the MIT license found in the
	 * LICENSE file in the root directory of this source tree.
	 *
	 */

	'use strict';

	var _assign = __webpack_require__(19);

	var React = __webpack_require__(98);
	var ReactDOMComponentTree = __webpack_require__(21);
	var ReactDOMSelect = __webpack_require__(343);

	var warning = __webpack_require__(8);
	var didWarnInvalidOptionChildren = false;

	function flattenChildren(children) {
	  var content = '';

	  // Flatten children and warn if they aren't strings or numbers;
	  // invalid types are ignored.
	  React.Children.forEach(children, function (child) {
	    if (child == null) {
	      return;
	    }
	    if (typeof child === 'string' || typeof child === 'number') {
	      content += child;
	    } else if (!didWarnInvalidOptionChildren) {
	      didWarnInvalidOptionChildren = true;
	      (undefined) !== 'production' ? warning(false, 'Only strings and numbers are supported as <option> children.') : void 0;
	    }
	  });

	  return content;
	}

	/**
	 * Implements an <option> host component that warns when `selected` is set.
	 */
	var ReactDOMOption = {
	  mountWrapper: function (inst, props, hostParent) {
	    // TODO (yungsters): Remove support for `selected` in <option>.
	    if ((undefined) !== 'production') {
	      (undefined) !== 'production' ? warning(props.selected == null, 'Use the `defaultValue` or `value` props on <select> instead of ' + 'setting `selected` on <option>.') : void 0;
	    }

	    // Look up whether this option is 'selected'
	    var selectValue = null;
	    if (hostParent != null) {
	      var selectParent = hostParent;

	      if (selectParent._tag === 'optgroup') {
	        selectParent = selectParent._hostParent;
	      }

	      if (selectParent != null && selectParent._tag === 'select') {
	        selectValue = ReactDOMSelect.getSelectValueContext(selectParent);
	      }
	    }

	    // If the value is null (e.g., no specified value or after initial mount)
	    // or missing (e.g., for <datalist>), we don't change props.selected
	    var selected = null;
	    if (selectValue != null) {
	      var value;
	      if (props.value != null) {
	        value = props.value + '';
	      } else {
	        value = flattenChildren(props.children);
	      }
	      selected = false;
	      if (Array.isArray(selectValue)) {
	        // multiple
	        for (var i = 0; i < selectValue.length; i++) {
	          if ('' + selectValue[i] === value) {
	            selected = true;
	            break;
	          }
	        }
	      } else {
	        selected = '' + selectValue === value;
	      }
	    }

	    inst._wrapperState = { selected: selected };
	  },

	  postMountWrapper: function (inst) {
	    // value="" should make a value attribute (#6219)
	    var props = inst._currentElement.props;
	    if (props.value != null) {
	      var node = ReactDOMComponentTree.getNodeFromInstance(inst);
	      node.setAttribute('value', props.value);
	    }
	  },

	  getHostProps: function (inst, props) {
	    var hostProps = _assign({ selected: undefined, children: undefined }, props);

	    // Read state only from initial mount because <select> updates value
	    // manually; we need the initial state only for server rendering
	    if (inst._wrapperState.selected != null) {
	      hostProps.selected = inst._wrapperState.selected;
	    }

	    var content = flattenChildren(props.children);

	    if (content) {
	      hostProps.children = content;
	    }

	    return hostProps;
	  }
	};

	module.exports = ReactDOMOption;

/***/ }),
/* 825 */
/***/ (function(module, exports, __webpack_require__) {

	/**
	 * Copyright (c) 2013-present, Facebook, Inc.
	 *
	 * This source code is licensed under the MIT license found in the
	 * LICENSE file in the root directory of this source tree.
	 *
	 */

	'use strict';

	var ExecutionEnvironment = __webpack_require__(24);

	var getNodeForCharacterOffset = __webpack_require__(868);
	var getTextContentAccessor = __webpack_require__(355);

	/**
	 * While `isCollapsed` is available on the Selection object and `collapsed`
	 * is available on the Range object, IE11 sometimes gets them wrong.
	 * If the anchor/focus nodes and offsets are the same, the range is collapsed.
	 */
	function isCollapsed(anchorNode, anchorOffset, focusNode, focusOffset) {
	  return anchorNode === focusNode && anchorOffset === focusOffset;
	}

	/**
	 * Get the appropriate anchor and focus node/offset pairs for IE.
	 *
	 * The catch here is that IE's selection API doesn't provide information
	 * about whether the selection is forward or backward, so we have to
	 * behave as though it's always forward.
	 *
	 * IE text differs from modern selection in that it behaves as though
	 * block elements end with a new line. This means character offsets will
	 * differ between the two APIs.
	 *
	 * @param {DOMElement} node
	 * @return {object}
	 */
	function getIEOffsets(node) {
	  var selection = document.selection;
	  var selectedRange = selection.createRange();
	  var selectedLength = selectedRange.text.length;

	  // Duplicate selection so we can move range without breaking user selection.
	  var fromStart = selectedRange.duplicate();
	  fromStart.moveToElementText(node);
	  fromStart.setEndPoint('EndToStart', selectedRange);

	  var startOffset = fromStart.text.length;
	  var endOffset = startOffset + selectedLength;

	  return {
	    start: startOffset,
	    end: endOffset
	  };
	}

	/**
	 * @param {DOMElement} node
	 * @return {?object}
	 */
	function getModernOffsets(node) {
	  var selection = window.getSelection && window.getSelection();

	  if (!selection || selection.rangeCount === 0) {
	    return null;
	  }

	  var anchorNode = selection.anchorNode;
	  var anchorOffset = selection.anchorOffset;
	  var focusNode = selection.focusNode;
	  var focusOffset = selection.focusOffset;

	  var currentRange = selection.getRangeAt(0);

	  // In Firefox, range.startContainer and range.endContainer can be "anonymous
	  // divs", e.g. the up/down buttons on an <input type="number">. Anonymous
	  // divs do not seem to expose properties, triggering a "Permission denied
	  // error" if any of its properties are accessed. The only seemingly possible
	  // way to avoid erroring is to access a property that typically works for
	  // non-anonymous divs and catch any error that may otherwise arise. See
	  // https://bugzilla.mozilla.org/show_bug.cgi?id=208427
	  try {
	    /* eslint-disable no-unused-expressions */
	    currentRange.startContainer.nodeType;
	    currentRange.endContainer.nodeType;
	    /* eslint-enable no-unused-expressions */
	  } catch (e) {
	    return null;
	  }

	  // If the node and offset values are the same, the selection is collapsed.
	  // `Selection.isCollapsed` is available natively, but IE sometimes gets
	  // this value wrong.
	  var isSelectionCollapsed = isCollapsed(selection.anchorNode, selection.anchorOffset, selection.focusNode, selection.focusOffset);

	  var rangeLength = isSelectionCollapsed ? 0 : currentRange.toString().length;

	  var tempRange = currentRange.cloneRange();
	  tempRange.selectNodeContents(node);
	  tempRange.setEnd(currentRange.startContainer, currentRange.startOffset);

	  var isTempRangeCollapsed = isCollapsed(tempRange.startContainer, tempRange.startOffset, tempRange.endContainer, tempRange.endOffset);

	  var start = isTempRangeCollapsed ? 0 : tempRange.toString().length;
	  var end = start + rangeLength;

	  // Detect whether the selection is backward.
	  var detectionRange = document.createRange();
	  detectionRange.setStart(anchorNode, anchorOffset);
	  detectionRange.setEnd(focusNode, focusOffset);
	  var isBackward = detectionRange.collapsed;

	  return {
	    start: isBackward ? end : start,
	    end: isBackward ? start : end
	  };
	}

	/**
	 * @param {DOMElement|DOMTextNode} node
	 * @param {object} offsets
	 */
	function setIEOffsets(node, offsets) {
	  var range = document.selection.createRange().duplicate();
	  var start, end;

	  if (offsets.end === undefined) {
	    start = offsets.start;
	    end = start;
	  } else if (offsets.start > offsets.end) {
	    start = offsets.end;
	    end = offsets.start;
	  } else {
	    start = offsets.start;
	    end = offsets.end;
	  }

	  range.moveToElementText(node);
	  range.moveStart('character', start);
	  range.setEndPoint('EndToStart', range);
	  range.moveEnd('character', end - start);
	  range.select();
	}

	/**
	 * In modern non-IE browsers, we can support both forward and backward
	 * selections.
	 *
	 * Note: IE10+ supports the Selection object, but it does not support
	 * the `extend` method, which means that even in modern IE, it's not possible
	 * to programmatically create a backward selection. Thus, for all IE
	 * versions, we use the old IE API to create our selections.
	 *
	 * @param {DOMElement|DOMTextNode} node
	 * @param {object} offsets
	 */
	function setModernOffsets(node, offsets) {
	  if (!window.getSelection) {
	    return;
	  }

	  var selection = window.getSelection();
	  var length = node[getTextContentAccessor()].length;
	  var start = Math.min(offsets.start, length);
	  var end = offsets.end === undefined ? start : Math.min(offsets.end, length);

	  // IE 11 uses modern selection, but doesn't support the extend method.
	  // Flip backward selections, so we can set with a single range.
	  if (!selection.extend && start > end) {
	    var temp = end;
	    end = start;
	    start = temp;
	  }

	  var startMarker = getNodeForCharacterOffset(node, start);
	  var endMarker = getNodeForCharacterOffset(node, end);

	  if (startMarker && endMarker) {
	    var range = document.createRange();
	    range.setStart(startMarker.node, startMarker.offset);
	    selection.removeAllRanges();

	    if (start > end) {
	      selection.addRange(range);
	      selection.extend(endMarker.node, endMarker.offset);
	    } else {
	      range.setEnd(endMarker.node, endMarker.offset);
	      selection.addRange(range);
	    }
	  }
	}

	var useIEOffsets = ExecutionEnvironment.canUseDOM && 'selection' in document && !('getSelection' in window);

	var ReactDOMSelection = {
	  /**
	   * @param {DOMElement} node
	   */
	  getOffsets: useIEOffsets ? getIEOffsets : getModernOffsets,

	  /**
	   * @param {DOMElement|DOMTextNode} node
	   * @param {object} offsets
	   */
	  setOffsets: useIEOffsets ? setIEOffsets : setModernOffsets
	};

	module.exports = ReactDOMSelection;

/***/ }),
/* 826 */
/***/ (function(module, exports, __webpack_require__) {

	/**
	 * Copyright (c) 2013-present, Facebook, Inc.
	 *
	 * This source code is licensed under the MIT license found in the
	 * LICENSE file in the root directory of this source tree.
	 *
	 */

	'use strict';

	var _prodInvariant = __webpack_require__(13),
	    _assign = __webpack_require__(19);

	var DOMChildrenOperations = __webpack_require__(214);
	var DOMLazyTree = __webpack_require__(95);
	var ReactDOMComponentTree = __webpack_require__(21);

	var escapeTextContentForBrowser = __webpack_require__(148);
	var invariant = __webpack_require__(7);
	var validateDOMNesting = __webpack_require__(228);

	/**
	 * Text nodes violate a couple assumptions that React makes about components:
	 *
	 *  - When mounting text into the DOM, adjacent text nodes are merged.
	 *  - Text nodes cannot be assigned a React root ID.
	 *
	 * This component is used to wrap strings between comment nodes so that they
	 * can undergo the same reconciliation that is applied to elements.
	 *
	 * TODO: Investigate representing React components in the DOM with text nodes.
	 *
	 * @class ReactDOMTextComponent
	 * @extends ReactComponent
	 * @internal
	 */
	var ReactDOMTextComponent = function (text) {
	  // TODO: This is really a ReactText (ReactNode), not a ReactElement
	  this._currentElement = text;
	  this._stringText = '' + text;
	  // ReactDOMComponentTree uses these:
	  this._hostNode = null;
	  this._hostParent = null;

	  // Properties
	  this._domID = 0;
	  this._mountIndex = 0;
	  this._closingComment = null;
	  this._commentNodes = null;
	};

	_assign(ReactDOMTextComponent.prototype, {
	  /**
	   * Creates the markup for this text node. This node is not intended to have
	   * any features besides containing text content.
	   *
	   * @param {ReactReconcileTransaction|ReactServerRenderingTransaction} transaction
	   * @return {string} Markup for this text node.
	   * @internal
	   */
	  mountComponent: function (transaction, hostParent, hostContainerInfo, context) {
	    if ((undefined) !== 'production') {
	      var parentInfo;
	      if (hostParent != null) {
	        parentInfo = hostParent._ancestorInfo;
	      } else if (hostContainerInfo != null) {
	        parentInfo = hostContainerInfo._ancestorInfo;
	      }
	      if (parentInfo) {
	        // parentInfo should always be present except for the top-level
	        // component when server rendering
	        validateDOMNesting(null, this._stringText, this, parentInfo);
	      }
	    }

	    var domID = hostContainerInfo._idCounter++;
	    var openingValue = ' react-text: ' + domID + ' ';
	    var closingValue = ' /react-text ';
	    this._domID = domID;
	    this._hostParent = hostParent;
	    if (transaction.useCreateElement) {
	      var ownerDocument = hostContainerInfo._ownerDocument;
	      var openingComment = ownerDocument.createComment(openingValue);
	      var closingComment = ownerDocument.createComment(closingValue);
	      var lazyTree = DOMLazyTree(ownerDocument.createDocumentFragment());
	      DOMLazyTree.queueChild(lazyTree, DOMLazyTree(openingComment));
	      if (this._stringText) {
	        DOMLazyTree.queueChild(lazyTree, DOMLazyTree(ownerDocument.createTextNode(this._stringText)));
	      }
	      DOMLazyTree.queueChild(lazyTree, DOMLazyTree(closingComment));
	      ReactDOMComponentTree.precacheNode(this, openingComment);
	      this._closingComment = closingComment;
	      return lazyTree;
	    } else {
	      var escapedText = escapeTextContentForBrowser(this._stringText);

	      if (transaction.renderToStaticMarkup) {
	        // Normally we'd wrap this between comment nodes for the reasons stated
	        // above, but since this is a situation where React won't take over
	        // (static pages), we can simply return the text as it is.
	        return escapedText;
	      }

	      return '<!--' + openingValue + '-->' + escapedText + '<!--' + closingValue + '-->';
	    }
	  },

	  /**
	   * Updates this component by updating the text content.
	   *
	   * @param {ReactText} nextText The next text content
	   * @param {ReactReconcileTransaction} transaction
	   * @internal
	   */
	  receiveComponent: function (nextText, transaction) {
	    if (nextText !== this._currentElement) {
	      this._currentElement = nextText;
	      var nextStringText = '' + nextText;
	      if (nextStringText !== this._stringText) {
	        // TODO: Save this as pending props and use performUpdateIfNecessary
	        // and/or updateComponent to do the actual update for consistency with
	        // other component types?
	        this._stringText = nextStringText;
	        var commentNodes = this.getHostNode();
	        DOMChildrenOperations.replaceDelimitedText(commentNodes[0], commentNodes[1], nextStringText);
	      }
	    }
	  },

	  getHostNode: function () {
	    var hostNode = this._commentNodes;
	    if (hostNode) {
	      return hostNode;
	    }
	    if (!this._closingComment) {
	      var openingComment = ReactDOMComponentTree.getNodeFromInstance(this);
	      var node = openingComment.nextSibling;
	      while (true) {
	        !(node != null) ? (undefined) !== 'production' ? invariant(false, 'Missing closing comment for text component %s', this._domID) : _prodInvariant('67', this._domID) : void 0;
	        if (node.nodeType === 8 && node.nodeValue === ' /react-text ') {
	          this._closingComment = node;
	          break;
	        }
	        node = node.nextSibling;
	      }
	    }
	    hostNode = [this._hostNode, this._closingComment];
	    this._commentNodes = hostNode;
	    return hostNode;
	  },

	  unmountComponent: function () {
	    this._closingComment = null;
	    this._commentNodes = null;
	    ReactDOMComponentTree.uncacheNode(this);
	  }
	});

	module.exports = ReactDOMTextComponent;

/***/ }),
/* 827 */
/***/ (function(module, exports, __webpack_require__) {

	/**
	 * Copyright (c) 2013-present, Facebook, Inc.
	 *
	 * This source code is licensed under the MIT license found in the
	 * LICENSE file in the root directory of this source tree.
	 *
	 */

	'use strict';

	var _prodInvariant = __webpack_require__(13),
	    _assign = __webpack_require__(19);

	var LinkedValueUtils = __webpack_require__(218);
	var ReactDOMComponentTree = __webpack_require__(21);
	var ReactUpdates = __webpack_require__(55);

	var invariant = __webpack_require__(7);
	var warning = __webpack_require__(8);

	var didWarnValueLink = false;
	var didWarnValDefaultVal = false;

	function forceUpdateIfMounted() {
	  if (this._rootNodeID) {
	    // DOM component is still mounted; update
	    ReactDOMTextarea.updateWrapper(this);
	  }
	}

	/**
	 * Implements a <textarea> host component that allows setting `value`, and
	 * `defaultValue`. This differs from the traditional DOM API because value is
	 * usually set as PCDATA children.
	 *
	 * If `value` is not supplied (or null/undefined), user actions that affect the
	 * value will trigger updates to the element.
	 *
	 * If `value` is supplied (and not null/undefined), the rendered element will
	 * not trigger updates to the element. Instead, the `value` prop must change in
	 * order for the rendered element to be updated.
	 *
	 * The rendered element will be initialized with an empty value, the prop
	 * `defaultValue` if specified, or the children content (deprecated).
	 */
	var ReactDOMTextarea = {
	  getHostProps: function (inst, props) {
	    !(props.dangerouslySetInnerHTML == null) ? (undefined) !== 'production' ? invariant(false, '`dangerouslySetInnerHTML` does not make sense on <textarea>.') : _prodInvariant('91') : void 0;

	    // Always set children to the same thing. In IE9, the selection range will
	    // get reset if `textContent` is mutated.  We could add a check in setTextContent
	    // to only set the value if/when the value differs from the node value (which would
	    // completely solve this IE9 bug), but Sebastian+Ben seemed to like this solution.
	    // The value can be a boolean or object so that's why it's forced to be a string.
	    var hostProps = _assign({}, props, {
	      value: undefined,
	      defaultValue: undefined,
	      children: '' + inst._wrapperState.initialValue,
	      onChange: inst._wrapperState.onChange
	    });

	    return hostProps;
	  },

	  mountWrapper: function (inst, props) {
	    if ((undefined) !== 'production') {
	      LinkedValueUtils.checkPropTypes('textarea', props, inst._currentElement._owner);
	      if (props.valueLink !== undefined && !didWarnValueLink) {
	        (undefined) !== 'production' ? warning(false, '`valueLink` prop on `textarea` is deprecated; set `value` and `onChange` instead.') : void 0;
	        didWarnValueLink = true;
	      }
	      if (props.value !== undefined && props.defaultValue !== undefined && !didWarnValDefaultVal) {
	        (undefined) !== 'production' ? warning(false, 'Textarea elements must be either controlled or uncontrolled ' + '(specify either the value prop, or the defaultValue prop, but not ' + 'both). Decide between using a controlled or uncontrolled textarea ' + 'and remove one of these props. More info: ' + 'https://fb.me/react-controlled-components') : void 0;
	        didWarnValDefaultVal = true;
	      }
	    }

	    var value = LinkedValueUtils.getValue(props);
	    var initialValue = value;

	    // Only bother fetching default value if we're going to use it
	    if (value == null) {
	      var defaultValue = props.defaultValue;
	      // TODO (yungsters): Remove support for children content in <textarea>.
	      var children = props.children;
	      if (children != null) {
	        if ((undefined) !== 'production') {
	          (undefined) !== 'production' ? warning(false, 'Use the `defaultValue` or `value` props instead of setting ' + 'children on <textarea>.') : void 0;
	        }
	        !(defaultValue == null) ? (undefined) !== 'production' ? invariant(false, 'If you supply `defaultValue` on a <textarea>, do not pass children.') : _prodInvariant('92') : void 0;
	        if (Array.isArray(children)) {
	          !(children.length <= 1) ? (undefined) !== 'production' ? invariant(false, '<textarea> can only have at most one child.') : _prodInvariant('93') : void 0;
	          children = children[0];
	        }

	        defaultValue = '' + children;
	      }
	      if (defaultValue == null) {
	        defaultValue = '';
	      }
	      initialValue = defaultValue;
	    }

	    inst._wrapperState = {
	      initialValue: '' + initialValue,
	      listeners: null,
	      onChange: _handleChange.bind(inst)
	    };
	  },

	  updateWrapper: function (inst) {
	    var props = inst._currentElement.props;

	    var node = ReactDOMComponentTree.getNodeFromInstance(inst);
	    var value = LinkedValueUtils.getValue(props);
	    if (value != null) {
	      // Cast `value` to a string to ensure the value is set correctly. While
	      // browsers typically do this as necessary, jsdom doesn't.
	      var newValue = '' + value;

	      // To avoid side effects (such as losing text selection), only set value if changed
	      if (newValue !== node.value) {
	        node.value = newValue;
	      }
	      if (props.defaultValue == null) {
	        node.defaultValue = newValue;
	      }
	    }
	    if (props.defaultValue != null) {
	      node.defaultValue = props.defaultValue;
	    }
	  },

	  postMountWrapper: function (inst) {
	    // This is in postMount because we need access to the DOM node, which is not
	    // available until after the component has mounted.
	    var node = ReactDOMComponentTree.getNodeFromInstance(inst);
	    var textContent = node.textContent;

	    // Only set node.value if textContent is equal to the expected
	    // initial value. In IE10/IE11 there is a bug where the placeholder attribute
	    // will populate textContent as well.
	    // https://developer.microsoft.com/microsoft-edge/platform/issues/101525/
	    if (textContent === inst._wrapperState.initialValue) {
	      node.value = textContent;
	    }
	  }
	};

	function _handleChange(event) {
	  var props = this._currentElement.props;
	  var returnValue = LinkedValueUtils.executeOnChange(props, event);
	  ReactUpdates.asap(forceUpdateIfMounted, this);
	  return returnValue;
	}

	module.exports = ReactDOMTextarea;

/***/ }),
/* 828 */
/***/ (function(module, exports, __webpack_require__) {

	/**
	 * Copyright (c) 2015-present, Facebook, Inc.
	 *
	 * This source code is licensed under the MIT license found in the
	 * LICENSE file in the root directory of this source tree.
	 *
	 */

	'use strict';

	var _prodInvariant = __webpack_require__(13);

	var invariant = __webpack_require__(7);

	/**
	 * Return the lowest common ancestor of A and B, or null if they are in
	 * different trees.
	 */
	function getLowestCommonAncestor(instA, instB) {
	  !('_hostNode' in instA) ? (undefined) !== 'production' ? invariant(false, 'getNodeFromInstance: Invalid argument.') : _prodInvariant('33') : void 0;
	  !('_hostNode' in instB) ? (undefined) !== 'production' ? invariant(false, 'getNodeFromInstance: Invalid argument.') : _prodInvariant('33') : void 0;

	  var depthA = 0;
	  for (var tempA = instA; tempA; tempA = tempA._hostParent) {
	    depthA++;
	  }
	  var depthB = 0;
	  for (var tempB = instB; tempB; tempB = tempB._hostParent) {
	    depthB++;
	  }

	  // If A is deeper, crawl up.
	  while (depthA - depthB > 0) {
	    instA = instA._hostParent;
	    depthA--;
	  }

	  // If B is deeper, crawl up.
	  while (depthB - depthA > 0) {
	    instB = instB._hostParent;
	    depthB--;
	  }

	  // Walk in lockstep until we find a match.
	  var depth = depthA;
	  while (depth--) {
	    if (instA === instB) {
	      return instA;
	    }
	    instA = instA._hostParent;
	    instB = instB._hostParent;
	  }
	  return null;
	}

	/**
	 * Return if A is an ancestor of B.
	 */
	function isAncestor(instA, instB) {
	  !('_hostNode' in instA) ? (undefined) !== 'production' ? invariant(false, 'isAncestor: Invalid argument.') : _prodInvariant('35') : void 0;
	  !('_hostNode' in instB) ? (undefined) !== 'production' ? invariant(false, 'isAncestor: Invalid argument.') : _prodInvariant('35') : void 0;

	  while (instB) {
	    if (instB === instA) {
	      return true;
	    }
	    instB = instB._hostParent;
	  }
	  return false;
	}

	/**
	 * Return the parent instance of the passed-in instance.
	 */
	function getParentInstance(inst) {
	  !('_hostNode' in inst) ? (undefined) !== 'production' ? invariant(false, 'getParentInstance: Invalid argument.') : _prodInvariant('36') : void 0;

	  return inst._hostParent;
	}

	/**
	 * Simulates the traversal of a two-phase, capture/bubble event dispatch.
	 */
	function traverseTwoPhase(inst, fn, arg) {
	  var path = [];
	  while (inst) {
	    path.push(inst);
	    inst = inst._hostParent;
	  }
	  var i;
	  for (i = path.length; i-- > 0;) {
	    fn(path[i], 'captured', arg);
	  }
	  for (i = 0; i < path.length; i++) {
	    fn(path[i], 'bubbled', arg);
	  }
	}

	/**
	 * Traverses the ID hierarchy and invokes the supplied `cb` on any IDs that
	 * should would receive a `mouseEnter` or `mouseLeave` event.
	 *
	 * Does not invoke the callback on the nearest common ancestor because nothing
	 * "entered" or "left" that element.
	 */
	function traverseEnterLeave(from, to, fn, argFrom, argTo) {
	  var common = from && to ? getLowestCommonAncestor(from, to) : null;
	  var pathFrom = [];
	  while (from && from !== common) {
	    pathFrom.push(from);
	    from = from._hostParent;
	  }
	  var pathTo = [];
	  while (to && to !== common) {
	    pathTo.push(to);
	    to = to._hostParent;
	  }
	  var i;
	  for (i = 0; i < pathFrom.length; i++) {
	    fn(pathFrom[i], 'bubbled', argFrom);
	  }
	  for (i = pathTo.length; i-- > 0;) {
	    fn(pathTo[i], 'captured', argTo);
	  }
	}

	module.exports = {
	  isAncestor: isAncestor,
	  getLowestCommonAncestor: getLowestCommonAncestor,
	  getParentInstance: getParentInstance,
	  traverseTwoPhase: traverseTwoPhase,
	  traverseEnterLeave: traverseEnterLeave
	};

/***/ }),
/* 829 */
/***/ (function(module, exports, __webpack_require__) {

	/**
	 * Copyright (c) 2013-present, Facebook, Inc.
	 *
	 * This source code is licensed under the MIT license found in the
	 * LICENSE file in the root directory of this source tree.
	 *
	 */

	'use strict';

	var DOMProperty = __webpack_require__(65);
	var EventPluginRegistry = __webpack_require__(144);
	var ReactComponentTreeHook = __webpack_require__(34);

	var warning = __webpack_require__(8);

	if ((undefined) !== 'production') {
	  var reactProps = {
	    children: true,
	    dangerouslySetInnerHTML: true,
	    key: true,
	    ref: true,

	    autoFocus: true,
	    defaultValue: true,
	    valueLink: true,
	    defaultChecked: true,
	    checkedLink: true,
	    innerHTML: true,
	    suppressContentEditableWarning: true,
	    onFocusIn: true,
	    onFocusOut: true
	  };
	  var warnedProperties = {};

	  var validateProperty = function (tagName, name, debugID) {
	    if (DOMProperty.properties.hasOwnProperty(name) || DOMProperty.isCustomAttribute(name)) {
	      return true;
	    }
	    if (reactProps.hasOwnProperty(name) && reactProps[name] || warnedProperties.hasOwnProperty(name) && warnedProperties[name]) {
	      return true;
	    }
	    if (EventPluginRegistry.registrationNameModules.hasOwnProperty(name)) {
	      return true;
	    }
	    warnedProperties[name] = true;
	    var lowerCasedName = name.toLowerCase();

	    // data-* attributes should be lowercase; suggest the lowercase version
	    var standardName = DOMProperty.isCustomAttribute(lowerCasedName) ? lowerCasedName : DOMProperty.getPossibleStandardName.hasOwnProperty(lowerCasedName) ? DOMProperty.getPossibleStandardName[lowerCasedName] : null;

	    var registrationName = EventPluginRegistry.possibleRegistrationNames.hasOwnProperty(lowerCasedName) ? EventPluginRegistry.possibleRegistrationNames[lowerCasedName] : null;

	    if (standardName != null) {
	      (undefined) !== 'production' ? warning(false, 'Unknown DOM property %s. Did you mean %s?%s', name, standardName, ReactComponentTreeHook.getStackAddendumByID(debugID)) : void 0;
	      return true;
	    } else if (registrationName != null) {
	      (undefined) !== 'production' ? warning(false, 'Unknown event handler property %s. Did you mean `%s`?%s', name, registrationName, ReactComponentTreeHook.getStackAddendumByID(debugID)) : void 0;
	      return true;
	    } else {
	      // We were unable to guess which prop the user intended.
	      // It is likely that the user was just blindly spreading/forwarding props
	      // Components should be careful to only render valid props/attributes.
	      // Warning will be invoked in warnUnknownProperties to allow grouping.
	      return false;
	    }
	  };
	}

	var warnUnknownProperties = function (debugID, element) {
	  var unknownProps = [];
	  for (var key in element.props) {
	    var isValid = validateProperty(element.type, key, debugID);
	    if (!isValid) {
	      unknownProps.push(key);
	    }
	  }

	  var unknownPropString = unknownProps.map(function (prop) {
	    return '`' + prop + '`';
	  }).join(', ');

	  if (unknownProps.length === 1) {
	    (undefined) !== 'production' ? warning(false, 'Unknown prop %s on <%s> tag. Remove this prop from the element. ' + 'For details, see https://fb.me/react-unknown-prop%s', unknownPropString, element.type, ReactComponentTreeHook.getStackAddendumByID(debugID)) : void 0;
	  } else if (unknownProps.length > 1) {
	    (undefined) !== 'production' ? warning(false, 'Unknown props %s on <%s> tag. Remove these props from the element. ' + 'For details, see https://fb.me/react-unknown-prop%s', unknownPropString, element.type, ReactComponentTreeHook.getStackAddendumByID(debugID)) : void 0;
	  }
	};

	function handleElement(debugID, element) {
	  if (element == null || typeof element.type !== 'string') {
	    return;
	  }
	  if (element.type.indexOf('-') >= 0 || element.props.is) {
	    return;
	  }
	  warnUnknownProperties(debugID, element);
	}

	var ReactDOMUnknownPropertyHook = {
	  onBeforeMountComponent: function (debugID, element) {
	    handleElement(debugID, element);
	  },
	  onBeforeUpdateComponent: function (debugID, element) {
	    handleElement(debugID, element);
	  }
	};

	module.exports = ReactDOMUnknownPropertyHook;

/***/ }),
/* 830 */
/***/ (function(module, exports, __webpack_require__) {

	/**
	 * Copyright (c) 2016-present, Facebook, Inc.
	 *
	 * This source code is licensed under the MIT license found in the
	 * LICENSE file in the root directory of this source tree.
	 *
	 * 
	 */

	'use strict';

	var ReactInvalidSetStateWarningHook = __webpack_require__(838);
	var ReactHostOperationHistoryHook = __webpack_require__(836);
	var ReactComponentTreeHook = __webpack_require__(34);
	var ExecutionEnvironment = __webpack_require__(24);

	var performanceNow = __webpack_require__(783);
	var warning = __webpack_require__(8);

	var hooks = [];
	var didHookThrowForEvent = {};

	function callHook(event, fn, context, arg1, arg2, arg3, arg4, arg5) {
	  try {
	    fn.call(context, arg1, arg2, arg3, arg4, arg5);
	  } catch (e) {
	    (undefined) !== 'production' ? warning(didHookThrowForEvent[event], 'Exception thrown by hook while handling %s: %s', event, e + '\n' + e.stack) : void 0;
	    didHookThrowForEvent[event] = true;
	  }
	}

	function emitEvent(event, arg1, arg2, arg3, arg4, arg5) {
	  for (var i = 0; i < hooks.length; i++) {
	    var hook = hooks[i];
	    var fn = hook[event];
	    if (fn) {
	      callHook(event, fn, hook, arg1, arg2, arg3, arg4, arg5);
	    }
	  }
	}

	var isProfiling = false;
	var flushHistory = [];
	var lifeCycleTimerStack = [];
	var currentFlushNesting = 0;
	var currentFlushMeasurements = [];
	var currentFlushStartTime = 0;
	var currentTimerDebugID = null;
	var currentTimerStartTime = 0;
	var currentTimerNestedFlushDuration = 0;
	var currentTimerType = null;

	var lifeCycleTimerHasWarned = false;

	function clearHistory() {
	  ReactComponentTreeHook.purgeUnmountedComponents();
	  ReactHostOperationHistoryHook.clearHistory();
	}

	function getTreeSnapshot(registeredIDs) {
	  return registeredIDs.reduce(function (tree, id) {
	    var ownerID = ReactComponentTreeHook.getOwnerID(id);
	    var parentID = ReactComponentTreeHook.getParentID(id);
	    tree[id] = {
	      displayName: ReactComponentTreeHook.getDisplayName(id),
	      text: ReactComponentTreeHook.getText(id),
	      updateCount: ReactComponentTreeHook.getUpdateCount(id),
	      childIDs: ReactComponentTreeHook.getChildIDs(id),
	      // Text nodes don't have owners but this is close enough.
	      ownerID: ownerID || parentID && ReactComponentTreeHook.getOwnerID(parentID) || 0,
	      parentID: parentID
	    };
	    return tree;
	  }, {});
	}

	function resetMeasurements() {
	  var previousStartTime = currentFlushStartTime;
	  var previousMeasurements = currentFlushMeasurements;
	  var previousOperations = ReactHostOperationHistoryHook.getHistory();

	  if (currentFlushNesting === 0) {
	    currentFlushStartTime = 0;
	    currentFlushMeasurements = [];
	    clearHistory();
	    return;
	  }

	  if (previousMeasurements.length || previousOperations.length) {
	    var registeredIDs = ReactComponentTreeHook.getRegisteredIDs();
	    flushHistory.push({
	      duration: performanceNow() - previousStartTime,
	      measurements: previousMeasurements || [],
	      operations: previousOperations || [],
	      treeSnapshot: getTreeSnapshot(registeredIDs)
	    });
	  }

	  clearHistory();
	  currentFlushStartTime = performanceNow();
	  currentFlushMeasurements = [];
	}

	function checkDebugID(debugID) {
	  var allowRoot = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;

	  if (allowRoot && debugID === 0) {
	    return;
	  }
	  if (!debugID) {
	    (undefined) !== 'production' ? warning(false, 'ReactDebugTool: debugID may not be empty.') : void 0;
	  }
	}

	function beginLifeCycleTimer(debugID, timerType) {
	  if (currentFlushNesting === 0) {
	    return;
	  }
	  if (currentTimerType && !lifeCycleTimerHasWarned) {
	    (undefined) !== 'production' ? warning(false, 'There is an internal error in the React performance measurement code. ' + 'Did not expect %s timer to start while %s timer is still in ' + 'progress for %s instance.', timerType, currentTimerType || 'no', debugID === currentTimerDebugID ? 'the same' : 'another') : void 0;
	    lifeCycleTimerHasWarned = true;
	  }
	  currentTimerStartTime = performanceNow();
	  currentTimerNestedFlushDuration = 0;
	  currentTimerDebugID = debugID;
	  currentTimerType = timerType;
	}

	function endLifeCycleTimer(debugID, timerType) {
	  if (currentFlushNesting === 0) {
	    return;
	  }
	  if (currentTimerType !== timerType && !lifeCycleTimerHasWarned) {
	    (undefined) !== 'production' ? warning(false, 'There is an internal error in the React performance measurement code. ' + 'We did not expect %s timer to stop while %s timer is still in ' + 'progress for %s instance. Please report this as a bug in React.', timerType, currentTimerType || 'no', debugID === currentTimerDebugID ? 'the same' : 'another') : void 0;
	    lifeCycleTimerHasWarned = true;
	  }
	  if (isProfiling) {
	    currentFlushMeasurements.push({
	      timerType: timerType,
	      instanceID: debugID,
	      duration: performanceNow() - currentTimerStartTime - currentTimerNestedFlushDuration
	    });
	  }
	  currentTimerStartTime = 0;
	  currentTimerNestedFlushDuration = 0;
	  currentTimerDebugID = null;
	  currentTimerType = null;
	}

	function pauseCurrentLifeCycleTimer() {
	  var currentTimer = {
	    startTime: currentTimerStartTime,
	    nestedFlushStartTime: performanceNow(),
	    debugID: currentTimerDebugID,
	    timerType: currentTimerType
	  };
	  lifeCycleTimerStack.push(currentTimer);
	  currentTimerStartTime = 0;
	  currentTimerNestedFlushDuration = 0;
	  currentTimerDebugID = null;
	  currentTimerType = null;
	}

	function resumeCurrentLifeCycleTimer() {
	  var _lifeCycleTimerStack$ = lifeCycleTimerStack.pop(),
	      startTime = _lifeCycleTimerStack$.startTime,
	      nestedFlushStartTime = _lifeCycleTimerStack$.nestedFlushStartTime,
	      debugID = _lifeCycleTimerStack$.debugID,
	      timerType = _lifeCycleTimerStack$.timerType;

	  var nestedFlushDuration = performanceNow() - nestedFlushStartTime;
	  currentTimerStartTime = startTime;
	  currentTimerNestedFlushDuration += nestedFlushDuration;
	  currentTimerDebugID = debugID;
	  currentTimerType = timerType;
	}

	var lastMarkTimeStamp = 0;
	var canUsePerformanceMeasure = typeof performance !== 'undefined' && typeof performance.mark === 'function' && typeof performance.clearMarks === 'function' && typeof performance.measure === 'function' && typeof performance.clearMeasures === 'function';

	function shouldMark(debugID) {
	  if (!isProfiling || !canUsePerformanceMeasure) {
	    return false;
	  }
	  var element = ReactComponentTreeHook.getElement(debugID);
	  if (element == null || typeof element !== 'object') {
	    return false;
	  }
	  var isHostElement = typeof element.type === 'string';
	  if (isHostElement) {
	    return false;
	  }
	  return true;
	}

	function markBegin(debugID, markType) {
	  if (!shouldMark(debugID)) {
	    return;
	  }

	  var markName = debugID + '::' + markType;
	  lastMarkTimeStamp = performanceNow();
	  performance.mark(markName);
	}

	function markEnd(debugID, markType) {
	  if (!shouldMark(debugID)) {
	    return;
	  }

	  var markName = debugID + '::' + markType;
	  var displayName = ReactComponentTreeHook.getDisplayName(debugID) || 'Unknown';

	  // Chrome has an issue of dropping markers recorded too fast:
	  // https://bugs.chromium.org/p/chromium/issues/detail?id=640652
	  // To work around this, we will not report very small measurements.
	  // I determined the magic number by tweaking it back and forth.
	  // 0.05ms was enough to prevent the issue, but I set it to 0.1ms to be safe.
	  // When the bug is fixed, we can `measure()` unconditionally if we want to.
	  var timeStamp = performanceNow();
	  if (timeStamp - lastMarkTimeStamp > 0.1) {
	    var measurementName = displayName + ' [' + markType + ']';
	    performance.measure(measurementName, markName);
	  }

	  performance.clearMarks(markName);
	  if (measurementName) {
	    performance.clearMeasures(measurementName);
	  }
	}

	var ReactDebugTool = {
	  addHook: function (hook) {
	    hooks.push(hook);
	  },
	  removeHook: function (hook) {
	    for (var i = 0; i < hooks.length; i++) {
	      if (hooks[i] === hook) {
	        hooks.splice(i, 1);
	        i--;
	      }
	    }
	  },
	  isProfiling: function () {
	    return isProfiling;
	  },
	  beginProfiling: function () {
	    if (isProfiling) {
	      return;
	    }

	    isProfiling = true;
	    flushHistory.length = 0;
	    resetMeasurements();
	    ReactDebugTool.addHook(ReactHostOperationHistoryHook);
	  },
	  endProfiling: function () {
	    if (!isProfiling) {
	      return;
	    }

	    isProfiling = false;
	    resetMeasurements();
	    ReactDebugTool.removeHook(ReactHostOperationHistoryHook);
	  },
	  getFlushHistory: function () {
	    return flushHistory;
	  },
	  onBeginFlush: function () {
	    currentFlushNesting++;
	    resetMeasurements();
	    pauseCurrentLifeCycleTimer();
	    emitEvent('onBeginFlush');
	  },
	  onEndFlush: function () {
	    resetMeasurements();
	    currentFlushNesting--;
	    resumeCurrentLifeCycleTimer();
	    emitEvent('onEndFlush');
	  },
	  onBeginLifeCycleTimer: function (debugID, timerType) {
	    checkDebugID(debugID);
	    emitEvent('onBeginLifeCycleTimer', debugID, timerType);
	    markBegin(debugID, timerType);
	    beginLifeCycleTimer(debugID, timerType);
	  },
	  onEndLifeCycleTimer: function (debugID, timerType) {
	    checkDebugID(debugID);
	    endLifeCycleTimer(debugID, timerType);
	    markEnd(debugID, timerType);
	    emitEvent('onEndLifeCycleTimer', debugID, timerType);
	  },
	  onBeginProcessingChildContext: function () {
	    emitEvent('onBeginProcessingChildContext');
	  },
	  onEndProcessingChildContext: function () {
	    emitEvent('onEndProcessingChildContext');
	  },
	  onHostOperation: function (operation) {
	    checkDebugID(operation.instanceID);
	    emitEvent('onHostOperation', operation);
	  },
	  onSetState: function () {
	    emitEvent('onSetState');
	  },
	  onSetChildren: function (debugID, childDebugIDs) {
	    checkDebugID(debugID);
	    childDebugIDs.forEach(checkDebugID);
	    emitEvent('onSetChildren', debugID, childDebugIDs);
	  },
	  onBeforeMountComponent: function (debugID, element, parentDebugID) {
	    checkDebugID(debugID);
	    checkDebugID(parentDebugID, true);
	    emitEvent('onBeforeMountComponent', debugID, element, parentDebugID);
	    markBegin(debugID, 'mount');
	  },
	  onMountComponent: function (debugID) {
	    checkDebugID(debugID);
	    markEnd(debugID, 'mount');
	    emitEvent('onMountComponent', debugID);
	  },
	  onBeforeUpdateComponent: function (debugID, element) {
	    checkDebugID(debugID);
	    emitEvent('onBeforeUpdateComponent', debugID, element);
	    markBegin(debugID, 'update');
	  },
	  onUpdateComponent: function (debugID) {
	    checkDebugID(debugID);
	    markEnd(debugID, 'update');
	    emitEvent('onUpdateComponent', debugID);
	  },
	  onBeforeUnmountComponent: function (debugID) {
	    checkDebugID(debugID);
	    emitEvent('onBeforeUnmountComponent', debugID);
	    markBegin(debugID, 'unmount');
	  },
	  onUnmountComponent: function (debugID) {
	    checkDebugID(debugID);
	    markEnd(debugID, 'unmount');
	    emitEvent('onUnmountComponent', debugID);
	  },
	  onTestEvent: function () {
	    emitEvent('onTestEvent');
	  }
	};

	// TODO remove these when RN/www gets updated
	ReactDebugTool.addDevtool = ReactDebugTool.addHook;
	ReactDebugTool.removeDevtool = ReactDebugTool.removeHook;

	ReactDebugTool.addHook(ReactInvalidSetStateWarningHook);
	ReactDebugTool.addHook(ReactComponentTreeHook);
	var url = ExecutionEnvironment.canUseDOM && window.location.href || '';
	if (/[?&]react_perf\b/.test(url)) {
	  ReactDebugTool.beginProfiling();
	}

	module.exports = ReactDebugTool;

/***/ }),
/* 831 */
/***/ (function(module, exports, __webpack_require__) {

	/**
	 * Copyright (c) 2013-present, Facebook, Inc.
	 *
	 * This source code is licensed under the MIT license found in the
	 * LICENSE file in the root directory of this source tree.
	 *
	 */

	'use strict';

	var _assign = __webpack_require__(19);

	var ReactUpdates = __webpack_require__(55);
	var Transaction = __webpack_require__(147);

	var emptyFunction = __webpack_require__(53);

	var RESET_BATCHED_UPDATES = {
	  initialize: emptyFunction,
	  close: function () {
	    ReactDefaultBatchingStrategy.isBatchingUpdates = false;
	  }
	};

	var FLUSH_BATCHED_UPDATES = {
	  initialize: emptyFunction,
	  close: ReactUpdates.flushBatchedUpdates.bind(ReactUpdates)
	};

	var TRANSACTION_WRAPPERS = [FLUSH_BATCHED_UPDATES, RESET_BATCHED_UPDATES];

	function ReactDefaultBatchingStrategyTransaction() {
	  this.reinitializeTransaction();
	}

	_assign(ReactDefaultBatchingStrategyTransaction.prototype, Transaction, {
	  getTransactionWrappers: function () {
	    return TRANSACTION_WRAPPERS;
	  }
	});

	var transaction = new ReactDefaultBatchingStrategyTransaction();

	var ReactDefaultBatchingStrategy = {
	  isBatchingUpdates: false,

	  /**
	   * Call the provided function in a context within which calls to `setState`
	   * and friends are batched such that components aren't updated unnecessarily.
	   */
	  batchedUpdates: function (callback, a, b, c, d, e) {
	    var alreadyBatchingUpdates = ReactDefaultBatchingStrategy.isBatchingUpdates;

	    ReactDefaultBatchingStrategy.isBatchingUpdates = true;

	    // The code is written this way to avoid extra allocations
	    if (alreadyBatchingUpdates) {
	      return callback(a, b, c, d, e);
	    } else {
	      return transaction.perform(callback, null, a, b, c, d, e);
	    }
	  }
	};

	module.exports = ReactDefaultBatchingStrategy;

/***/ }),
/* 832 */
/***/ (function(module, exports, __webpack_require__) {

	/**
	 * Copyright (c) 2013-present, Facebook, Inc.
	 *
	 * This source code is licensed under the MIT license found in the
	 * LICENSE file in the root directory of this source tree.
	 *
	 */

	'use strict';

	var ARIADOMPropertyConfig = __webpack_require__(802);
	var BeforeInputEventPlugin = __webpack_require__(804);
	var ChangeEventPlugin = __webpack_require__(806);
	var DefaultEventPluginOrder = __webpack_require__(808);
	var EnterLeaveEventPlugin = __webpack_require__(809);
	var HTMLDOMPropertyConfig = __webpack_require__(811);
	var ReactComponentBrowserEnvironment = __webpack_require__(813);
	var ReactDOMComponent = __webpack_require__(816);
	var ReactDOMComponentTree = __webpack_require__(21);
	var ReactDOMEmptyComponent = __webpack_require__(818);
	var ReactDOMTreeTraversal = __webpack_require__(828);
	var ReactDOMTextComponent = __webpack_require__(826);
	var ReactDefaultBatchingStrategy = __webpack_require__(831);
	var ReactEventListener = __webpack_require__(835);
	var ReactInjection = __webpack_require__(837);
	var ReactReconcileTransaction = __webpack_require__(843);
	var SVGDOMPropertyConfig = __webpack_require__(848);
	var SelectEventPlugin = __webpack_require__(849);
	var SimpleEventPlugin = __webpack_require__(850);

	var alreadyInjected = false;

	function inject() {
	  if (alreadyInjected) {
	    // TODO: This is currently true because these injections are shared between
	    // the client and the server package. They should be built independently
	    // and not share any injection state. Then this problem will be solved.
	    return;
	  }
	  alreadyInjected = true;

	  ReactInjection.EventEmitter.injectReactEventListener(ReactEventListener);

	  /**
	   * Inject modules for resolving DOM hierarchy and plugin ordering.
	   */
	  ReactInjection.EventPluginHub.injectEventPluginOrder(DefaultEventPluginOrder);
	  ReactInjection.EventPluginUtils.injectComponentTree(ReactDOMComponentTree);
	  ReactInjection.EventPluginUtils.injectTreeTraversal(ReactDOMTreeTraversal);

	  /**
	   * Some important event plugins included by default (without having to require
	   * them).
	   */
	  ReactInjection.EventPluginHub.injectEventPluginsByName({
	    SimpleEventPlugin: SimpleEventPlugin,
	    EnterLeaveEventPlugin: EnterLeaveEventPlugin,
	    ChangeEventPlugin: ChangeEventPlugin,
	    SelectEventPlugin: SelectEventPlugin,
	    BeforeInputEventPlugin: BeforeInputEventPlugin
	  });

	  ReactInjection.HostComponent.injectGenericComponentClass(ReactDOMComponent);

	  ReactInjection.HostComponent.injectTextComponentClass(ReactDOMTextComponent);

	  ReactInjection.DOMProperty.injectDOMPropertyConfig(ARIADOMPropertyConfig);
	  ReactInjection.DOMProperty.injectDOMPropertyConfig(HTMLDOMPropertyConfig);
	  ReactInjection.DOMProperty.injectDOMPropertyConfig(SVGDOMPropertyConfig);

	  ReactInjection.EmptyComponent.injectEmptyComponentFactory(function (instantiate) {
	    return new ReactDOMEmptyComponent(instantiate);
	  });

	  ReactInjection.Updates.injectReconcileTransaction(ReactReconcileTransaction);
	  ReactInjection.Updates.injectBatchingStrategy(ReactDefaultBatchingStrategy);

	  ReactInjection.Component.injectEnvironment(ReactComponentBrowserEnvironment);
	}

	module.exports = {
	  inject: inject
	};

/***/ }),
/* 833 */
370,
/* 834 */
/***/ (function(module, exports, __webpack_require__) {

	/**
	 * Copyright (c) 2013-present, Facebook, Inc.
	 *
	 * This source code is licensed under the MIT license found in the
	 * LICENSE file in the root directory of this source tree.
	 *
	 */

	'use strict';

	var EventPluginHub = __webpack_require__(112);

	function runEventQueueInBatch(events) {
	  EventPluginHub.enqueueEvents(events);
	  EventPluginHub.processEventQueue(false);
	}

	var ReactEventEmitterMixin = {
	  /**
	   * Streams a fired top-level event to `EventPluginHub` where plugins have the
	   * opportunity to create `ReactEvent`s to be dispatched.
	   */
	  handleTopLevel: function (topLevelType, targetInst, nativeEvent, nativeEventTarget) {
	    var events = EventPluginHub.extractEvents(topLevelType, targetInst, nativeEvent, nativeEventTarget);
	    runEventQueueInBatch(events);
	  }
	};

	module.exports = ReactEventEmitterMixin;

/***/ }),
/* 835 */
/***/ (function(module, exports, __webpack_require__) {

	/**
	 * Copyright (c) 2013-present, Facebook, Inc.
	 *
	 * This source code is licensed under the MIT license found in the
	 * LICENSE file in the root directory of this source tree.
	 *
	 */

	'use strict';

	var _assign = __webpack_require__(19);

	var EventListener = __webpack_require__(323);
	var ExecutionEnvironment = __webpack_require__(24);
	var PooledClass = __webpack_require__(83);
	var ReactDOMComponentTree = __webpack_require__(21);
	var ReactUpdates = __webpack_require__(55);

	var getEventTarget = __webpack_require__(225);
	var getUnboundedScrollPosition = __webpack_require__(776);

	/**
	 * Find the deepest React component completely containing the root of the
	 * passed-in instance (for use when entire React trees are nested within each
	 * other). If React trees are not nested, returns null.
	 */
	function findParent(inst) {
	  // TODO: It may be a good idea to cache this to prevent unnecessary DOM
	  // traversal, but caching is difficult to do correctly without using a
	  // mutation observer to listen for all DOM changes.
	  while (inst._hostParent) {
	    inst = inst._hostParent;
	  }
	  var rootNode = ReactDOMComponentTree.getNodeFromInstance(inst);
	  var container = rootNode.parentNode;
	  return ReactDOMComponentTree.getClosestInstanceFromNode(container);
	}

	// Used to store ancestor hierarchy in top level callback
	function TopLevelCallbackBookKeeping(topLevelType, nativeEvent) {
	  this.topLevelType = topLevelType;
	  this.nativeEvent = nativeEvent;
	  this.ancestors = [];
	}
	_assign(TopLevelCallbackBookKeeping.prototype, {
	  destructor: function () {
	    this.topLevelType = null;
	    this.nativeEvent = null;
	    this.ancestors.length = 0;
	  }
	});
	PooledClass.addPoolingTo(TopLevelCallbackBookKeeping, PooledClass.twoArgumentPooler);

	function handleTopLevelImpl(bookKeeping) {
	  var nativeEventTarget = getEventTarget(bookKeeping.nativeEvent);
	  var targetInst = ReactDOMComponentTree.getClosestInstanceFromNode(nativeEventTarget);

	  // Loop through the hierarchy, in case there's any nested components.
	  // It's important that we build the array of ancestors before calling any
	  // event handlers, because event handlers can modify the DOM, leading to
	  // inconsistencies with ReactMount's node cache. See #1105.
	  var ancestor = targetInst;
	  do {
	    bookKeeping.ancestors.push(ancestor);
	    ancestor = ancestor && findParent(ancestor);
	  } while (ancestor);

	  for (var i = 0; i < bookKeeping.ancestors.length; i++) {
	    targetInst = bookKeeping.ancestors[i];
	    ReactEventListener._handleTopLevel(bookKeeping.topLevelType, targetInst, bookKeeping.nativeEvent, getEventTarget(bookKeeping.nativeEvent));
	  }
	}

	function scrollValueMonitor(cb) {
	  var scrollPosition = getUnboundedScrollPosition(window);
	  cb(scrollPosition);
	}

	var ReactEventListener = {
	  _enabled: true,
	  _handleTopLevel: null,

	  WINDOW_HANDLE: ExecutionEnvironment.canUseDOM ? window : null,

	  setHandleTopLevel: function (handleTopLevel) {
	    ReactEventListener._handleTopLevel = handleTopLevel;
	  },

	  setEnabled: function (enabled) {
	    ReactEventListener._enabled = !!enabled;
	  },

	  isEnabled: function () {
	    return ReactEventListener._enabled;
	  },

	  /**
	   * Traps top-level events by using event bubbling.
	   *
	   * @param {string} topLevelType Record from `EventConstants`.
	   * @param {string} handlerBaseName Event name (e.g. "click").
	   * @param {object} element Element on which to attach listener.
	   * @return {?object} An object with a remove function which will forcefully
	   *                  remove the listener.
	   * @internal
	   */
	  trapBubbledEvent: function (topLevelType, handlerBaseName, element) {
	    if (!element) {
	      return null;
	    }
	    return EventListener.listen(element, handlerBaseName, ReactEventListener.dispatchEvent.bind(null, topLevelType));
	  },

	  /**
	   * Traps a top-level event by using event capturing.
	   *
	   * @param {string} topLevelType Record from `EventConstants`.
	   * @param {string} handlerBaseName Event name (e.g. "click").
	   * @param {object} element Element on which to attach listener.
	   * @return {?object} An object with a remove function which will forcefully
	   *                  remove the listener.
	   * @internal
	   */
	  trapCapturedEvent: function (topLevelType, handlerBaseName, element) {
	    if (!element) {
	      return null;
	    }
	    return EventListener.capture(element, handlerBaseName, ReactEventListener.dispatchEvent.bind(null, topLevelType));
	  },

	  monitorScrollValue: function (refresh) {
	    var callback = scrollValueMonitor.bind(null, refresh);
	    EventListener.listen(window, 'scroll', callback);
	  },

	  dispatchEvent: function (topLevelType, nativeEvent) {
	    if (!ReactEventListener._enabled) {
	      return;
	    }

	    var bookKeeping = TopLevelCallbackBookKeeping.getPooled(topLevelType, nativeEvent);
	    try {
	      // Event queue being processed in the same cycle allows
	      // `preventDefault`.
	      ReactUpdates.batchedUpdates(handleTopLevelImpl, bookKeeping);
	    } finally {
	      TopLevelCallbackBookKeeping.release(bookKeeping);
	    }
	  }
	};

	module.exports = ReactEventListener;

/***/ }),
/* 836 */
/***/ (function(module, exports) {

	/**
	 * Copyright (c) 2016-present, Facebook, Inc.
	 *
	 * This source code is licensed under the MIT license found in the
	 * LICENSE file in the root directory of this source tree.
	 *
	 * 
	 */

	'use strict';

	var history = [];

	var ReactHostOperationHistoryHook = {
	  onHostOperation: function (operation) {
	    history.push(operation);
	  },
	  clearHistory: function () {
	    if (ReactHostOperationHistoryHook._preventClearing) {
	      // Should only be used for tests.
	      return;
	    }

	    history = [];
	  },
	  getHistory: function () {
	    return history;
	  }
	};

	module.exports = ReactHostOperationHistoryHook;

/***/ }),
/* 837 */
/***/ (function(module, exports, __webpack_require__) {

	/**
	 * Copyright (c) 2013-present, Facebook, Inc.
	 *
	 * This source code is licensed under the MIT license found in the
	 * LICENSE file in the root directory of this source tree.
	 *
	 */

	'use strict';

	var DOMProperty = __webpack_require__(65);
	var EventPluginHub = __webpack_require__(112);
	var EventPluginUtils = __webpack_require__(216);
	var ReactComponentEnvironment = __webpack_require__(219);
	var ReactEmptyComponent = __webpack_require__(344);
	var ReactBrowserEventEmitter = __webpack_require__(145);
	var ReactHostComponent = __webpack_require__(346);
	var ReactUpdates = __webpack_require__(55);

	var ReactInjection = {
	  Component: ReactComponentEnvironment.injection,
	  DOMProperty: DOMProperty.injection,
	  EmptyComponent: ReactEmptyComponent.injection,
	  EventPluginHub: EventPluginHub.injection,
	  EventPluginUtils: EventPluginUtils.injection,
	  EventEmitter: ReactBrowserEventEmitter.injection,
	  HostComponent: ReactHostComponent.injection,
	  Updates: ReactUpdates.injection
	};

	module.exports = ReactInjection;

/***/ }),
/* 838 */
/***/ (function(module, exports, __webpack_require__) {

	/**
	 * Copyright (c) 2016-present, Facebook, Inc.
	 *
	 * This source code is licensed under the MIT license found in the
	 * LICENSE file in the root directory of this source tree.
	 *
	 * 
	 */

	'use strict';

	var warning = __webpack_require__(8);

	if ((undefined) !== 'production') {
	  var processingChildContext = false;

	  var warnInvalidSetState = function () {
	    (undefined) !== 'production' ? warning(!processingChildContext, 'setState(...): Cannot call setState() inside getChildContext()') : void 0;
	  };
	}

	var ReactInvalidSetStateWarningHook = {
	  onBeginProcessingChildContext: function () {
	    processingChildContext = true;
	  },
	  onEndProcessingChildContext: function () {
	    processingChildContext = false;
	  },
	  onSetState: function () {
	    warnInvalidSetState();
	  }
	};

	module.exports = ReactInvalidSetStateWarningHook;

/***/ }),
/* 839 */
/***/ (function(module, exports, __webpack_require__) {

	/**
	 * Copyright (c) 2013-present, Facebook, Inc.
	 *
	 * This source code is licensed under the MIT license found in the
	 * LICENSE file in the root directory of this source tree.
	 *
	 */

	'use strict';

	var adler32 = __webpack_require__(861);

	var TAG_END = /\/?>/;
	var COMMENT_START = /^<\!\-\-/;

	var ReactMarkupChecksum = {
	  CHECKSUM_ATTR_NAME: 'data-react-checksum',

	  /**
	   * @param {string} markup Markup string
	   * @return {string} Markup string with checksum attribute attached
	   */
	  addChecksumToMarkup: function (markup) {
	    var checksum = adler32(markup);

	    // Add checksum (handle both parent tags, comments and self-closing tags)
	    if (COMMENT_START.test(markup)) {
	      return markup;
	    } else {
	      return markup.replace(TAG_END, ' ' + ReactMarkupChecksum.CHECKSUM_ATTR_NAME + '="' + checksum + '"$&');
	    }
	  },

	  /**
	   * @param {string} markup to use
	   * @param {DOMElement} element root React element
	   * @returns {boolean} whether or not the markup is the same
	   */
	  canReuseMarkup: function (markup, element) {
	    var existingChecksum = element.getAttribute(ReactMarkupChecksum.CHECKSUM_ATTR_NAME);
	    existingChecksum = existingChecksum && parseInt(existingChecksum, 10);
	    var markupChecksum = adler32(markup);
	    return markupChecksum === existingChecksum;
	  }
	};

	module.exports = ReactMarkupChecksum;

/***/ }),
/* 840 */
/***/ (function(module, exports, __webpack_require__) {

	/**
	 * Copyright (c) 2013-present, Facebook, Inc.
	 *
	 * This source code is licensed under the MIT license found in the
	 * LICENSE file in the root directory of this source tree.
	 *
	 */

	'use strict';

	var _prodInvariant = __webpack_require__(13);

	var ReactComponentEnvironment = __webpack_require__(219);
	var ReactInstanceMap = __webpack_require__(114);
	var ReactInstrumentation = __webpack_require__(40);

	var ReactCurrentOwner = __webpack_require__(56);
	var ReactReconciler = __webpack_require__(96);
	var ReactChildReconciler = __webpack_require__(812);

	var emptyFunction = __webpack_require__(53);
	var flattenChildren = __webpack_require__(865);
	var invariant = __webpack_require__(7);

	/**
	 * Make an update for markup to be rendered and inserted at a supplied index.
	 *
	 * @param {string} markup Markup that renders into an element.
	 * @param {number} toIndex Destination index.
	 * @private
	 */
	function makeInsertMarkup(markup, afterNode, toIndex) {
	  // NOTE: Null values reduce hidden classes.
	  return {
	    type: 'INSERT_MARKUP',
	    content: markup,
	    fromIndex: null,
	    fromNode: null,
	    toIndex: toIndex,
	    afterNode: afterNode
	  };
	}

	/**
	 * Make an update for moving an existing element to another index.
	 *
	 * @param {number} fromIndex Source index of the existing element.
	 * @param {number} toIndex Destination index of the element.
	 * @private
	 */
	function makeMove(child, afterNode, toIndex) {
	  // NOTE: Null values reduce hidden classes.
	  return {
	    type: 'MOVE_EXISTING',
	    content: null,
	    fromIndex: child._mountIndex,
	    fromNode: ReactReconciler.getHostNode(child),
	    toIndex: toIndex,
	    afterNode: afterNode
	  };
	}

	/**
	 * Make an update for removing an element at an index.
	 *
	 * @param {number} fromIndex Index of the element to remove.
	 * @private
	 */
	function makeRemove(child, node) {
	  // NOTE: Null values reduce hidden classes.
	  return {
	    type: 'REMOVE_NODE',
	    content: null,
	    fromIndex: child._mountIndex,
	    fromNode: node,
	    toIndex: null,
	    afterNode: null
	  };
	}

	/**
	 * Make an update for setting the markup of a node.
	 *
	 * @param {string} markup Markup that renders into an element.
	 * @private
	 */
	function makeSetMarkup(markup) {
	  // NOTE: Null values reduce hidden classes.
	  return {
	    type: 'SET_MARKUP',
	    content: markup,
	    fromIndex: null,
	    fromNode: null,
	    toIndex: null,
	    afterNode: null
	  };
	}

	/**
	 * Make an update for setting the text content.
	 *
	 * @param {string} textContent Text content to set.
	 * @private
	 */
	function makeTextContent(textContent) {
	  // NOTE: Null values reduce hidden classes.
	  return {
	    type: 'TEXT_CONTENT',
	    content: textContent,
	    fromIndex: null,
	    fromNode: null,
	    toIndex: null,
	    afterNode: null
	  };
	}

	/**
	 * Push an update, if any, onto the queue. Creates a new queue if none is
	 * passed and always returns the queue. Mutative.
	 */
	function enqueue(queue, update) {
	  if (update) {
	    queue = queue || [];
	    queue.push(update);
	  }
	  return queue;
	}

	/**
	 * Processes any enqueued updates.
	 *
	 * @private
	 */
	function processQueue(inst, updateQueue) {
	  ReactComponentEnvironment.processChildrenUpdates(inst, updateQueue);
	}

	var setChildrenForInstrumentation = emptyFunction;
	if ((undefined) !== 'production') {
	  var getDebugID = function (inst) {
	    if (!inst._debugID) {
	      // Check for ART-like instances. TODO: This is silly/gross.
	      var internal;
	      if (internal = ReactInstanceMap.get(inst)) {
	        inst = internal;
	      }
	    }
	    return inst._debugID;
	  };
	  setChildrenForInstrumentation = function (children) {
	    var debugID = getDebugID(this);
	    // TODO: React Native empty components are also multichild.
	    // This means they still get into this method but don't have _debugID.
	    if (debugID !== 0) {
	      ReactInstrumentation.debugTool.onSetChildren(debugID, children ? Object.keys(children).map(function (key) {
	        return children[key]._debugID;
	      }) : []);
	    }
	  };
	}

	/**
	 * ReactMultiChild are capable of reconciling multiple children.
	 *
	 * @class ReactMultiChild
	 * @internal
	 */
	var ReactMultiChild = {
	  /**
	   * Provides common functionality for components that must reconcile multiple
	   * children. This is used by `ReactDOMComponent` to mount, update, and
	   * unmount child components.
	   *
	   * @lends {ReactMultiChild.prototype}
	   */
	  Mixin: {
	    _reconcilerInstantiateChildren: function (nestedChildren, transaction, context) {
	      if ((undefined) !== 'production') {
	        var selfDebugID = getDebugID(this);
	        if (this._currentElement) {
	          try {
	            ReactCurrentOwner.current = this._currentElement._owner;
	            return ReactChildReconciler.instantiateChildren(nestedChildren, transaction, context, selfDebugID);
	          } finally {
	            ReactCurrentOwner.current = null;
	          }
	        }
	      }
	      return ReactChildReconciler.instantiateChildren(nestedChildren, transaction, context);
	    },

	    _reconcilerUpdateChildren: function (prevChildren, nextNestedChildrenElements, mountImages, removedNodes, transaction, context) {
	      var nextChildren;
	      var selfDebugID = 0;
	      if ((undefined) !== 'production') {
	        selfDebugID = getDebugID(this);
	        if (this._currentElement) {
	          try {
	            ReactCurrentOwner.current = this._currentElement._owner;
	            nextChildren = flattenChildren(nextNestedChildrenElements, selfDebugID);
	          } finally {
	            ReactCurrentOwner.current = null;
	          }
	          ReactChildReconciler.updateChildren(prevChildren, nextChildren, mountImages, removedNodes, transaction, this, this._hostContainerInfo, context, selfDebugID);
	          return nextChildren;
	        }
	      }
	      nextChildren = flattenChildren(nextNestedChildrenElements, selfDebugID);
	      ReactChildReconciler.updateChildren(prevChildren, nextChildren, mountImages, removedNodes, transaction, this, this._hostContainerInfo, context, selfDebugID);
	      return nextChildren;
	    },

	    /**
	     * Generates a "mount image" for each of the supplied children. In the case
	     * of `ReactDOMComponent`, a mount image is a string of markup.
	     *
	     * @param {?object} nestedChildren Nested child maps.
	     * @return {array} An array of mounted representations.
	     * @internal
	     */
	    mountChildren: function (nestedChildren, transaction, context) {
	      var children = this._reconcilerInstantiateChildren(nestedChildren, transaction, context);
	      this._renderedChildren = children;

	      var mountImages = [];
	      var index = 0;
	      for (var name in children) {
	        if (children.hasOwnProperty(name)) {
	          var child = children[name];
	          var selfDebugID = 0;
	          if ((undefined) !== 'production') {
	            selfDebugID = getDebugID(this);
	          }
	          var mountImage = ReactReconciler.mountComponent(child, transaction, this, this._hostContainerInfo, context, selfDebugID);
	          child._mountIndex = index++;
	          mountImages.push(mountImage);
	        }
	      }

	      if ((undefined) !== 'production') {
	        setChildrenForInstrumentation.call(this, children);
	      }

	      return mountImages;
	    },

	    /**
	     * Replaces any rendered children with a text content string.
	     *
	     * @param {string} nextContent String of content.
	     * @internal
	     */
	    updateTextContent: function (nextContent) {
	      var prevChildren = this._renderedChildren;
	      // Remove any rendered children.
	      ReactChildReconciler.unmountChildren(prevChildren, false);
	      for (var name in prevChildren) {
	        if (prevChildren.hasOwnProperty(name)) {
	           true ? (undefined) !== 'production' ? invariant(false, 'updateTextContent called on non-empty component.') : _prodInvariant('118') : void 0;
	        }
	      }
	      // Set new text content.
	      var updates = [makeTextContent(nextContent)];
	      processQueue(this, updates);
	    },

	    /**
	     * Replaces any rendered children with a markup string.
	     *
	     * @param {string} nextMarkup String of markup.
	     * @internal
	     */
	    updateMarkup: function (nextMarkup) {
	      var prevChildren = this._renderedChildren;
	      // Remove any rendered children.
	      ReactChildReconciler.unmountChildren(prevChildren, false);
	      for (var name in prevChildren) {
	        if (prevChildren.hasOwnProperty(name)) {
	           true ? (undefined) !== 'production' ? invariant(false, 'updateTextContent called on non-empty component.') : _prodInvariant('118') : void 0;
	        }
	      }
	      var updates = [makeSetMarkup(nextMarkup)];
	      processQueue(this, updates);
	    },

	    /**
	     * Updates the rendered children with new children.
	     *
	     * @param {?object} nextNestedChildrenElements Nested child element maps.
	     * @param {ReactReconcileTransaction} transaction
	     * @internal
	     */
	    updateChildren: function (nextNestedChildrenElements, transaction, context) {
	      // Hook used by React ART
	      this._updateChildren(nextNestedChildrenElements, transaction, context);
	    },

	    /**
	     * @param {?object} nextNestedChildrenElements Nested child element maps.
	     * @param {ReactReconcileTransaction} transaction
	     * @final
	     * @protected
	     */
	    _updateChildren: function (nextNestedChildrenElements, transaction, context) {
	      var prevChildren = this._renderedChildren;
	      var removedNodes = {};
	      var mountImages = [];
	      var nextChildren = this._reconcilerUpdateChildren(prevChildren, nextNestedChildrenElements, mountImages, removedNodes, transaction, context);
	      if (!nextChildren && !prevChildren) {
	        return;
	      }
	      var updates = null;
	      var name;
	      // `nextIndex` will increment for each child in `nextChildren`, but
	      // `lastIndex` will be the last index visited in `prevChildren`.
	      var nextIndex = 0;
	      var lastIndex = 0;
	      // `nextMountIndex` will increment for each newly mounted child.
	      var nextMountIndex = 0;
	      var lastPlacedNode = null;
	      for (name in nextChildren) {
	        if (!nextChildren.hasOwnProperty(name)) {
	          continue;
	        }
	        var prevChild = prevChildren && prevChildren[name];
	        var nextChild = nextChildren[name];
	        if (prevChild === nextChild) {
	          updates = enqueue(updates, this.moveChild(prevChild, lastPlacedNode, nextIndex, lastIndex));
	          lastIndex = Math.max(prevChild._mountIndex, lastIndex);
	          prevChild._mountIndex = nextIndex;
	        } else {
	          if (prevChild) {
	            // Update `lastIndex` before `_mountIndex` gets unset by unmounting.
	            lastIndex = Math.max(prevChild._mountIndex, lastIndex);
	            // The `removedNodes` loop below will actually remove the child.
	          }
	          // The child must be instantiated before it's mounted.
	          updates = enqueue(updates, this._mountChildAtIndex(nextChild, mountImages[nextMountIndex], lastPlacedNode, nextIndex, transaction, context));
	          nextMountIndex++;
	        }
	        nextIndex++;
	        lastPlacedNode = ReactReconciler.getHostNode(nextChild);
	      }
	      // Remove children that are no longer present.
	      for (name in removedNodes) {
	        if (removedNodes.hasOwnProperty(name)) {
	          updates = enqueue(updates, this._unmountChild(prevChildren[name], removedNodes[name]));
	        }
	      }
	      if (updates) {
	        processQueue(this, updates);
	      }
	      this._renderedChildren = nextChildren;

	      if ((undefined) !== 'production') {
	        setChildrenForInstrumentation.call(this, nextChildren);
	      }
	    },

	    /**
	     * Unmounts all rendered children. This should be used to clean up children
	     * when this component is unmounted. It does not actually perform any
	     * backend operations.
	     *
	     * @internal
	     */
	    unmountChildren: function (safely) {
	      var renderedChildren = this._renderedChildren;
	      ReactChildReconciler.unmountChildren(renderedChildren, safely);
	      this._renderedChildren = null;
	    },

	    /**
	     * Moves a child component to the supplied index.
	     *
	     * @param {ReactComponent} child Component to move.
	     * @param {number} toIndex Destination index of the element.
	     * @param {number} lastIndex Last index visited of the siblings of `child`.
	     * @protected
	     */
	    moveChild: function (child, afterNode, toIndex, lastIndex) {
	      // If the index of `child` is less than `lastIndex`, then it needs to
	      // be moved. Otherwise, we do not need to move it because a child will be
	      // inserted or moved before `child`.
	      if (child._mountIndex < lastIndex) {
	        return makeMove(child, afterNode, toIndex);
	      }
	    },

	    /**
	     * Creates a child component.
	     *
	     * @param {ReactComponent} child Component to create.
	     * @param {string} mountImage Markup to insert.
	     * @protected
	     */
	    createChild: function (child, afterNode, mountImage) {
	      return makeInsertMarkup(mountImage, afterNode, child._mountIndex);
	    },

	    /**
	     * Removes a child component.
	     *
	     * @param {ReactComponent} child Child to remove.
	     * @protected
	     */
	    removeChild: function (child, node) {
	      return makeRemove(child, node);
	    },

	    /**
	     * Mounts a child with the supplied name.
	     *
	     * NOTE: This is part of `updateChildren` and is here for readability.
	     *
	     * @param {ReactComponent} child Component to mount.
	     * @param {string} name Name of the child.
	     * @param {number} index Index at which to insert the child.
	     * @param {ReactReconcileTransaction} transaction
	     * @private
	     */
	    _mountChildAtIndex: function (child, mountImage, afterNode, index, transaction, context) {
	      child._mountIndex = index;
	      return this.createChild(child, afterNode, mountImage);
	    },

	    /**
	     * Unmounts a rendered child.
	     *
	     * NOTE: This is part of `updateChildren` and is here for readability.
	     *
	     * @param {ReactComponent} child Component to unmount.
	     * @private
	     */
	    _unmountChild: function (child, node) {
	      var update = this.removeChild(child, node);
	      child._mountIndex = null;
	      return update;
	    }
	  }
	};

	module.exports = ReactMultiChild;

/***/ }),
/* 841 */
/***/ (function(module, exports, __webpack_require__) {

	/**
	 * Copyright (c) 2013-present, Facebook, Inc.
	 *
	 * This source code is licensed under the MIT license found in the
	 * LICENSE file in the root directory of this source tree.
	 *
	 * 
	 */

	'use strict';

	var _prodInvariant = __webpack_require__(13);

	var invariant = __webpack_require__(7);

	/**
	 * @param {?object} object
	 * @return {boolean} True if `object` is a valid owner.
	 * @final
	 */
	function isValidOwner(object) {
	  return !!(object && typeof object.attachRef === 'function' && typeof object.detachRef === 'function');
	}

	/**
	 * ReactOwners are capable of storing references to owned components.
	 *
	 * All components are capable of //being// referenced by owner components, but
	 * only ReactOwner components are capable of //referencing// owned components.
	 * The named reference is known as a "ref".
	 *
	 * Refs are available when mounted and updated during reconciliation.
	 *
	 *   var MyComponent = React.createClass({
	 *     render: function() {
	 *       return (
	 *         <div onClick={this.handleClick}>
	 *           <CustomComponent ref="custom" />
	 *         </div>
	 *       );
	 *     },
	 *     handleClick: function() {
	 *       this.refs.custom.handleClick();
	 *     },
	 *     componentDidMount: function() {
	 *       this.refs.custom.initialize();
	 *     }
	 *   });
	 *
	 * Refs should rarely be used. When refs are used, they should only be done to
	 * control data that is not handled by React's data flow.
	 *
	 * @class ReactOwner
	 */
	var ReactOwner = {
	  /**
	   * Adds a component by ref to an owner component.
	   *
	   * @param {ReactComponent} component Component to reference.
	   * @param {string} ref Name by which to refer to the component.
	   * @param {ReactOwner} owner Component on which to record the ref.
	   * @final
	   * @internal
	   */
	  addComponentAsRefTo: function (component, ref, owner) {
	    !isValidOwner(owner) ? (undefined) !== 'production' ? invariant(false, 'addComponentAsRefTo(...): Only a ReactOwner can have refs. You might be adding a ref to a component that was not created inside a component\'s `render` method, or you have multiple copies of React loaded (details: https://fb.me/react-refs-must-have-owner).') : _prodInvariant('119') : void 0;
	    owner.attachRef(ref, component);
	  },

	  /**
	   * Removes a component by ref from an owner component.
	   *
	   * @param {ReactComponent} component Component to dereference.
	   * @param {string} ref Name of the ref to remove.
	   * @param {ReactOwner} owner Component on which the ref is recorded.
	   * @final
	   * @internal
	   */
	  removeComponentAsRefFrom: function (component, ref, owner) {
	    !isValidOwner(owner) ? (undefined) !== 'production' ? invariant(false, 'removeComponentAsRefFrom(...): Only a ReactOwner can have refs. You might be removing a ref to a component that was not created inside a component\'s `render` method, or you have multiple copies of React loaded (details: https://fb.me/react-refs-must-have-owner).') : _prodInvariant('120') : void 0;
	    var ownerPublicInstance = owner.getPublicInstance();
	    // Check that `component`'s owner is still alive and that `component` is still the current ref
	    // because we do not want to detach the ref if another component stole it.
	    if (ownerPublicInstance && ownerPublicInstance.refs[ref] === component.getPublicInstance()) {
	      owner.detachRef(ref);
	    }
	  }
	};

	module.exports = ReactOwner;

/***/ }),
/* 842 */
/***/ (function(module, exports, __webpack_require__) {

	/**
	 * Copyright (c) 2013-present, Facebook, Inc.
	 *
	 * This source code is licensed under the MIT license found in the
	 * LICENSE file in the root directory of this source tree.
	 *
	 * 
	 */

	'use strict';

	var ReactPropTypeLocationNames = {};

	if ((undefined) !== 'production') {
	  ReactPropTypeLocationNames = {
	    prop: 'prop',
	    context: 'context',
	    childContext: 'child context'
	  };
	}

	module.exports = ReactPropTypeLocationNames;

/***/ }),
/* 843 */
/***/ (function(module, exports, __webpack_require__) {

	/**
	 * Copyright (c) 2013-present, Facebook, Inc.
	 *
	 * This source code is licensed under the MIT license found in the
	 * LICENSE file in the root directory of this source tree.
	 *
	 */

	'use strict';

	var _assign = __webpack_require__(19);

	var CallbackQueue = __webpack_require__(340);
	var PooledClass = __webpack_require__(83);
	var ReactBrowserEventEmitter = __webpack_require__(145);
	var ReactInputSelection = __webpack_require__(347);
	var ReactInstrumentation = __webpack_require__(40);
	var Transaction = __webpack_require__(147);
	var ReactUpdateQueue = __webpack_require__(221);

	/**
	 * Ensures that, when possible, the selection range (currently selected text
	 * input) is not disturbed by performing the transaction.
	 */
	var SELECTION_RESTORATION = {
	  /**
	   * @return {Selection} Selection information.
	   */
	  initialize: ReactInputSelection.getSelectionInformation,
	  /**
	   * @param {Selection} sel Selection information returned from `initialize`.
	   */
	  close: ReactInputSelection.restoreSelection
	};

	/**
	 * Suppresses events (blur/focus) that could be inadvertently dispatched due to
	 * high level DOM manipulations (like temporarily removing a text input from the
	 * DOM).
	 */
	var EVENT_SUPPRESSION = {
	  /**
	   * @return {boolean} The enabled status of `ReactBrowserEventEmitter` before
	   * the reconciliation.
	   */
	  initialize: function () {
	    var currentlyEnabled = ReactBrowserEventEmitter.isEnabled();
	    ReactBrowserEventEmitter.setEnabled(false);
	    return currentlyEnabled;
	  },

	  /**
	   * @param {boolean} previouslyEnabled Enabled status of
	   *   `ReactBrowserEventEmitter` before the reconciliation occurred. `close`
	   *   restores the previous value.
	   */
	  close: function (previouslyEnabled) {
	    ReactBrowserEventEmitter.setEnabled(previouslyEnabled);
	  }
	};

	/**
	 * Provides a queue for collecting `componentDidMount` and
	 * `componentDidUpdate` callbacks during the transaction.
	 */
	var ON_DOM_READY_QUEUEING = {
	  /**
	   * Initializes the internal `onDOMReady` queue.
	   */
	  initialize: function () {
	    this.reactMountReady.reset();
	  },

	  /**
	   * After DOM is flushed, invoke all registered `onDOMReady` callbacks.
	   */
	  close: function () {
	    this.reactMountReady.notifyAll();
	  }
	};

	/**
	 * Executed within the scope of the `Transaction` instance. Consider these as
	 * being member methods, but with an implied ordering while being isolated from
	 * each other.
	 */
	var TRANSACTION_WRAPPERS = [SELECTION_RESTORATION, EVENT_SUPPRESSION, ON_DOM_READY_QUEUEING];

	if ((undefined) !== 'production') {
	  TRANSACTION_WRAPPERS.push({
	    initialize: ReactInstrumentation.debugTool.onBeginFlush,
	    close: ReactInstrumentation.debugTool.onEndFlush
	  });
	}

	/**
	 * Currently:
	 * - The order that these are listed in the transaction is critical:
	 * - Suppresses events.
	 * - Restores selection range.
	 *
	 * Future:
	 * - Restore document/overflow scroll positions that were unintentionally
	 *   modified via DOM insertions above the top viewport boundary.
	 * - Implement/integrate with customized constraint based layout system and keep
	 *   track of which dimensions must be remeasured.
	 *
	 * @class ReactReconcileTransaction
	 */
	function ReactReconcileTransaction(useCreateElement) {
	  this.reinitializeTransaction();
	  // Only server-side rendering really needs this option (see
	  // `ReactServerRendering`), but server-side uses
	  // `ReactServerRenderingTransaction` instead. This option is here so that it's
	  // accessible and defaults to false when `ReactDOMComponent` and
	  // `ReactDOMTextComponent` checks it in `mountComponent`.`
	  this.renderToStaticMarkup = false;
	  this.reactMountReady = CallbackQueue.getPooled(null);
	  this.useCreateElement = useCreateElement;
	}

	var Mixin = {
	  /**
	   * @see Transaction
	   * @abstract
	   * @final
	   * @return {array<object>} List of operation wrap procedures.
	   *   TODO: convert to array<TransactionWrapper>
	   */
	  getTransactionWrappers: function () {
	    return TRANSACTION_WRAPPERS;
	  },

	  /**
	   * @return {object} The queue to collect `onDOMReady` callbacks with.
	   */
	  getReactMountReady: function () {
	    return this.reactMountReady;
	  },

	  /**
	   * @return {object} The queue to collect React async events.
	   */
	  getUpdateQueue: function () {
	    return ReactUpdateQueue;
	  },

	  /**
	   * Save current transaction state -- if the return value from this method is
	   * passed to `rollback`, the transaction will be reset to that state.
	   */
	  checkpoint: function () {
	    // reactMountReady is the our only stateful wrapper
	    return this.reactMountReady.checkpoint();
	  },

	  rollback: function (checkpoint) {
	    this.reactMountReady.rollback(checkpoint);
	  },

	  /**
	   * `PooledClass` looks for this, and will invoke this before allowing this
	   * instance to be reused.
	   */
	  destructor: function () {
	    CallbackQueue.release(this.reactMountReady);
	    this.reactMountReady = null;
	  }
	};

	_assign(ReactReconcileTransaction.prototype, Transaction, Mixin);

	PooledClass.addPoolingTo(ReactReconcileTransaction);

	module.exports = ReactReconcileTransaction;

/***/ }),
/* 844 */
/***/ (function(module, exports, __webpack_require__) {

	/**
	 * Copyright (c) 2013-present, Facebook, Inc.
	 *
	 * This source code is licensed under the MIT license found in the
	 * LICENSE file in the root directory of this source tree.
	 *
	 * 
	 */

	'use strict';

	var ReactOwner = __webpack_require__(841);

	var ReactRef = {};

	function attachRef(ref, component, owner) {
	  if (typeof ref === 'function') {
	    ref(component.getPublicInstance());
	  } else {
	    // Legacy ref
	    ReactOwner.addComponentAsRefTo(component, ref, owner);
	  }
	}

	function detachRef(ref, component, owner) {
	  if (typeof ref === 'function') {
	    ref(null);
	  } else {
	    // Legacy ref
	    ReactOwner.removeComponentAsRefFrom(component, ref, owner);
	  }
	}

	ReactRef.attachRefs = function (instance, element) {
	  if (element === null || typeof element !== 'object') {
	    return;
	  }
	  var ref = element.ref;
	  if (ref != null) {
	    attachRef(ref, instance, element._owner);
	  }
	};

	ReactRef.shouldUpdateRefs = function (prevElement, nextElement) {
	  // If either the owner or a `ref` has changed, make sure the newest owner
	  // has stored a reference to `this`, and the previous owner (if different)
	  // has forgotten the reference to `this`. We use the element instead
	  // of the public this.props because the post processing cannot determine
	  // a ref. The ref conceptually lives on the element.

	  // TODO: Should this even be possible? The owner cannot change because
	  // it's forbidden by shouldUpdateReactComponent. The ref can change
	  // if you swap the keys of but not the refs. Reconsider where this check
	  // is made. It probably belongs where the key checking and
	  // instantiateReactComponent is done.

	  var prevRef = null;
	  var prevOwner = null;
	  if (prevElement !== null && typeof prevElement === 'object') {
	    prevRef = prevElement.ref;
	    prevOwner = prevElement._owner;
	  }

	  var nextRef = null;
	  var nextOwner = null;
	  if (nextElement !== null && typeof nextElement === 'object') {
	    nextRef = nextElement.ref;
	    nextOwner = nextElement._owner;
	  }

	  return prevRef !== nextRef ||
	  // If owner changes but we have an unchanged function ref, don't update refs
	  typeof nextRef === 'string' && nextOwner !== prevOwner;
	};

	ReactRef.detachRefs = function (instance, element) {
	  if (element === null || typeof element !== 'object') {
	    return;
	  }
	  var ref = element.ref;
	  if (ref != null) {
	    detachRef(ref, instance, element._owner);
	  }
	};

	module.exports = ReactRef;

/***/ }),
/* 845 */
/***/ (function(module, exports, __webpack_require__) {

	/**
	 * Copyright (c) 2014-present, Facebook, Inc.
	 *
	 * This source code is licensed under the MIT license found in the
	 * LICENSE file in the root directory of this source tree.
	 *
	 */

	'use strict';

	var _assign = __webpack_require__(19);

	var PooledClass = __webpack_require__(83);
	var Transaction = __webpack_require__(147);
	var ReactInstrumentation = __webpack_require__(40);
	var ReactServerUpdateQueue = __webpack_require__(846);

	/**
	 * Executed within the scope of the `Transaction` instance. Consider these as
	 * being member methods, but with an implied ordering while being isolated from
	 * each other.
	 */
	var TRANSACTION_WRAPPERS = [];

	if ((undefined) !== 'production') {
	  TRANSACTION_WRAPPERS.push({
	    initialize: ReactInstrumentation.debugTool.onBeginFlush,
	    close: ReactInstrumentation.debugTool.onEndFlush
	  });
	}

	var noopCallbackQueue = {
	  enqueue: function () {}
	};

	/**
	 * @class ReactServerRenderingTransaction
	 * @param {boolean} renderToStaticMarkup
	 */
	function ReactServerRenderingTransaction(renderToStaticMarkup) {
	  this.reinitializeTransaction();
	  this.renderToStaticMarkup = renderToStaticMarkup;
	  this.useCreateElement = false;
	  this.updateQueue = new ReactServerUpdateQueue(this);
	}

	var Mixin = {
	  /**
	   * @see Transaction
	   * @abstract
	   * @final
	   * @return {array} Empty list of operation wrap procedures.
	   */
	  getTransactionWrappers: function () {
	    return TRANSACTION_WRAPPERS;
	  },

	  /**
	   * @return {object} The queue to collect `onDOMReady` callbacks with.
	   */
	  getReactMountReady: function () {
	    return noopCallbackQueue;
	  },

	  /**
	   * @return {object} The queue to collect React async events.
	   */
	  getUpdateQueue: function () {
	    return this.updateQueue;
	  },

	  /**
	   * `PooledClass` looks for this, and will invoke this before allowing this
	   * instance to be reused.
	   */
	  destructor: function () {},

	  checkpoint: function () {},

	  rollback: function () {}
	};

	_assign(ReactServerRenderingTransaction.prototype, Transaction, Mixin);

	PooledClass.addPoolingTo(ReactServerRenderingTransaction);

	module.exports = ReactServerRenderingTransaction;

/***/ }),
/* 846 */
/***/ (function(module, exports, __webpack_require__) {

	/**
	 * Copyright (c) 2015-present, Facebook, Inc.
	 *
	 * This source code is licensed under the MIT license found in the
	 * LICENSE file in the root directory of this source tree.
	 *
	 * 
	 */

	'use strict';

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

	var ReactUpdateQueue = __webpack_require__(221);

	var warning = __webpack_require__(8);

	function warnNoop(publicInstance, callerName) {
	  if ((undefined) !== 'production') {
	    var constructor = publicInstance.constructor;
	    (undefined) !== 'production' ? warning(false, '%s(...): Can only update a mounting component. ' + 'This usually means you called %s() outside componentWillMount() on the server. ' + 'This is a no-op. Please check the code for the %s component.', callerName, callerName, constructor && (constructor.displayName || constructor.name) || 'ReactClass') : void 0;
	  }
	}

	/**
	 * This is the update queue used for server rendering.
	 * It delegates to ReactUpdateQueue while server rendering is in progress and
	 * switches to ReactNoopUpdateQueue after the transaction has completed.
	 * @class ReactServerUpdateQueue
	 * @param {Transaction} transaction
	 */

	var ReactServerUpdateQueue = function () {
	  function ReactServerUpdateQueue(transaction) {
	    _classCallCheck(this, ReactServerUpdateQueue);

	    this.transaction = transaction;
	  }

	  /**
	   * Checks whether or not this composite component is mounted.
	   * @param {ReactClass} publicInstance The instance we want to test.
	   * @return {boolean} True if mounted, false otherwise.
	   * @protected
	   * @final
	   */


	  ReactServerUpdateQueue.prototype.isMounted = function isMounted(publicInstance) {
	    return false;
	  };

	  /**
	   * Enqueue a callback that will be executed after all the pending updates
	   * have processed.
	   *
	   * @param {ReactClass} publicInstance The instance to use as `this` context.
	   * @param {?function} callback Called after state is updated.
	   * @internal
	   */


	  ReactServerUpdateQueue.prototype.enqueueCallback = function enqueueCallback(publicInstance, callback, callerName) {
	    if (this.transaction.isInTransaction()) {
	      ReactUpdateQueue.enqueueCallback(publicInstance, callback, callerName);
	    }
	  };

	  /**
	   * Forces an update. This should only be invoked when it is known with
	   * certainty that we are **not** in a DOM transaction.
	   *
	   * You may want to call this when you know that some deeper aspect of the
	   * component's state has changed but `setState` was not called.
	   *
	   * This will not invoke `shouldComponentUpdate`, but it will invoke
	   * `componentWillUpdate` and `componentDidUpdate`.
	   *
	   * @param {ReactClass} publicInstance The instance that should rerender.
	   * @internal
	   */


	  ReactServerUpdateQueue.prototype.enqueueForceUpdate = function enqueueForceUpdate(publicInstance) {
	    if (this.transaction.isInTransaction()) {
	      ReactUpdateQueue.enqueueForceUpdate(publicInstance);
	    } else {
	      warnNoop(publicInstance, 'forceUpdate');
	    }
	  };

	  /**
	   * Replaces all of the state. Always use this or `setState` to mutate state.
	   * You should treat `this.state` as immutable.
	   *
	   * There is no guarantee that `this.state` will be immediately updated, so
	   * accessing `this.state` after calling this method may return the old value.
	   *
	   * @param {ReactClass} publicInstance The instance that should rerender.
	   * @param {object|function} completeState Next state.
	   * @internal
	   */


	  ReactServerUpdateQueue.prototype.enqueueReplaceState = function enqueueReplaceState(publicInstance, completeState) {
	    if (this.transaction.isInTransaction()) {
	      ReactUpdateQueue.enqueueReplaceState(publicInstance, completeState);
	    } else {
	      warnNoop(publicInstance, 'replaceState');
	    }
	  };

	  /**
	   * Sets a subset of the state. This only exists because _pendingState is
	   * internal. This provides a merging strategy that is not available to deep
	   * properties which is confusing. TODO: Expose pendingState or don't use it
	   * during the merge.
	   *
	   * @param {ReactClass} publicInstance The instance that should rerender.
	   * @param {object|function} partialState Next partial state to be merged with state.
	   * @internal
	   */


	  ReactServerUpdateQueue.prototype.enqueueSetState = function enqueueSetState(publicInstance, partialState) {
	    if (this.transaction.isInTransaction()) {
	      ReactUpdateQueue.enqueueSetState(publicInstance, partialState);
	    } else {
	      warnNoop(publicInstance, 'setState');
	    }
	  };

	  return ReactServerUpdateQueue;
	}();

	module.exports = ReactServerUpdateQueue;

/***/ }),
/* 847 */
/***/ (function(module, exports) {

	/**
	 * Copyright (c) 2013-present, Facebook, Inc.
	 *
	 * This source code is licensed under the MIT license found in the
	 * LICENSE file in the root directory of this source tree.
	 *
	 */

	'use strict';

	module.exports = '15.6.2';

/***/ }),
/* 848 */
/***/ (function(module, exports) {

	/**
	 * Copyright (c) 2013-present, Facebook, Inc.
	 *
	 * This source code is licensed under the MIT license found in the
	 * LICENSE file in the root directory of this source tree.
	 *
	 */

	'use strict';

	var NS = {
	  xlink: 'http://www.w3.org/1999/xlink',
	  xml: 'http://www.w3.org/XML/1998/namespace'
	};

	// We use attributes for everything SVG so let's avoid some duplication and run
	// code instead.
	// The following are all specified in the HTML config already so we exclude here.
	// - class (as className)
	// - color
	// - height
	// - id
	// - lang
	// - max
	// - media
	// - method
	// - min
	// - name
	// - style
	// - target
	// - type
	// - width
	var ATTRS = {
	  accentHeight: 'accent-height',
	  accumulate: 0,
	  additive: 0,
	  alignmentBaseline: 'alignment-baseline',
	  allowReorder: 'allowReorder',
	  alphabetic: 0,
	  amplitude: 0,
	  arabicForm: 'arabic-form',
	  ascent: 0,
	  attributeName: 'attributeName',
	  attributeType: 'attributeType',
	  autoReverse: 'autoReverse',
	  azimuth: 0,
	  baseFrequency: 'baseFrequency',
	  baseProfile: 'baseProfile',
	  baselineShift: 'baseline-shift',
	  bbox: 0,
	  begin: 0,
	  bias: 0,
	  by: 0,
	  calcMode: 'calcMode',
	  capHeight: 'cap-height',
	  clip: 0,
	  clipPath: 'clip-path',
	  clipRule: 'clip-rule',
	  clipPathUnits: 'clipPathUnits',
	  colorInterpolation: 'color-interpolation',
	  colorInterpolationFilters: 'color-interpolation-filters',
	  colorProfile: 'color-profile',
	  colorRendering: 'color-rendering',
	  contentScriptType: 'contentScriptType',
	  contentStyleType: 'contentStyleType',
	  cursor: 0,
	  cx: 0,
	  cy: 0,
	  d: 0,
	  decelerate: 0,
	  descent: 0,
	  diffuseConstant: 'diffuseConstant',
	  direction: 0,
	  display: 0,
	  divisor: 0,
	  dominantBaseline: 'dominant-baseline',
	  dur: 0,
	  dx: 0,
	  dy: 0,
	  edgeMode: 'edgeMode',
	  elevation: 0,
	  enableBackground: 'enable-background',
	  end: 0,
	  exponent: 0,
	  externalResourcesRequired: 'externalResourcesRequired',
	  fill: 0,
	  fillOpacity: 'fill-opacity',
	  fillRule: 'fill-rule',
	  filter: 0,
	  filterRes: 'filterRes',
	  filterUnits: 'filterUnits',
	  floodColor: 'flood-color',
	  floodOpacity: 'flood-opacity',
	  focusable: 0,
	  fontFamily: 'font-family',
	  fontSize: 'font-size',
	  fontSizeAdjust: 'font-size-adjust',
	  fontStretch: 'font-stretch',
	  fontStyle: 'font-style',
	  fontVariant: 'font-variant',
	  fontWeight: 'font-weight',
	  format: 0,
	  from: 0,
	  fx: 0,
	  fy: 0,
	  g1: 0,
	  g2: 0,
	  glyphName: 'glyph-name',
	  glyphOrientationHorizontal: 'glyph-orientation-horizontal',
	  glyphOrientationVertical: 'glyph-orientation-vertical',
	  glyphRef: 'glyphRef',
	  gradientTransform: 'gradientTransform',
	  gradientUnits: 'gradientUnits',
	  hanging: 0,
	  horizAdvX: 'horiz-adv-x',
	  horizOriginX: 'horiz-origin-x',
	  ideographic: 0,
	  imageRendering: 'image-rendering',
	  'in': 0,
	  in2: 0,
	  intercept: 0,
	  k: 0,
	  k1: 0,
	  k2: 0,
	  k3: 0,
	  k4: 0,
	  kernelMatrix: 'kernelMatrix',
	  kernelUnitLength: 'kernelUnitLength',
	  kerning: 0,
	  keyPoints: 'keyPoints',
	  keySplines: 'keySplines',
	  keyTimes: 'keyTimes',
	  lengthAdjust: 'lengthAdjust',
	  letterSpacing: 'letter-spacing',
	  lightingColor: 'lighting-color',
	  limitingConeAngle: 'limitingConeAngle',
	  local: 0,
	  markerEnd: 'marker-end',
	  markerMid: 'marker-mid',
	  markerStart: 'marker-start',
	  markerHeight: 'markerHeight',
	  markerUnits: 'markerUnits',
	  markerWidth: 'markerWidth',
	  mask: 0,
	  maskContentUnits: 'maskContentUnits',
	  maskUnits: 'maskUnits',
	  mathematical: 0,
	  mode: 0,
	  numOctaves: 'numOctaves',
	  offset: 0,
	  opacity: 0,
	  operator: 0,
	  order: 0,
	  orient: 0,
	  orientation: 0,
	  origin: 0,
	  overflow: 0,
	  overlinePosition: 'overline-position',
	  overlineThickness: 'overline-thickness',
	  paintOrder: 'paint-order',
	  panose1: 'panose-1',
	  pathLength: 'pathLength',
	  patternContentUnits: 'patternContentUnits',
	  patternTransform: 'patternTransform',
	  patternUnits: 'patternUnits',
	  pointerEvents: 'pointer-events',
	  points: 0,
	  pointsAtX: 'pointsAtX',
	  pointsAtY: 'pointsAtY',
	  pointsAtZ: 'pointsAtZ',
	  preserveAlpha: 'preserveAlpha',
	  preserveAspectRatio: 'preserveAspectRatio',
	  primitiveUnits: 'primitiveUnits',
	  r: 0,
	  radius: 0,
	  refX: 'refX',
	  refY: 'refY',
	  renderingIntent: 'rendering-intent',
	  repeatCount: 'repeatCount',
	  repeatDur: 'repeatDur',
	  requiredExtensions: 'requiredExtensions',
	  requiredFeatures: 'requiredFeatures',
	  restart: 0,
	  result: 0,
	  rotate: 0,
	  rx: 0,
	  ry: 0,
	  scale: 0,
	  seed: 0,
	  shapeRendering: 'shape-rendering',
	  slope: 0,
	  spacing: 0,
	  specularConstant: 'specularConstant',
	  specularExponent: 'specularExponent',
	  speed: 0,
	  spreadMethod: 'spreadMethod',
	  startOffset: 'startOffset',
	  stdDeviation: 'stdDeviation',
	  stemh: 0,
	  stemv: 0,
	  stitchTiles: 'stitchTiles',
	  stopColor: 'stop-color',
	  stopOpacity: 'stop-opacity',
	  strikethroughPosition: 'strikethrough-position',
	  strikethroughThickness: 'strikethrough-thickness',
	  string: 0,
	  stroke: 0,
	  strokeDasharray: 'stroke-dasharray',
	  strokeDashoffset: 'stroke-dashoffset',
	  strokeLinecap: 'stroke-linecap',
	  strokeLinejoin: 'stroke-linejoin',
	  strokeMiterlimit: 'stroke-miterlimit',
	  strokeOpacity: 'stroke-opacity',
	  strokeWidth: 'stroke-width',
	  surfaceScale: 'surfaceScale',
	  systemLanguage: 'systemLanguage',
	  tableValues: 'tableValues',
	  targetX: 'targetX',
	  targetY: 'targetY',
	  textAnchor: 'text-anchor',
	  textDecoration: 'text-decoration',
	  textRendering: 'text-rendering',
	  textLength: 'textLength',
	  to: 0,
	  transform: 0,
	  u1: 0,
	  u2: 0,
	  underlinePosition: 'underline-position',
	  underlineThickness: 'underline-thickness',
	  unicode: 0,
	  unicodeBidi: 'unicode-bidi',
	  unicodeRange: 'unicode-range',
	  unitsPerEm: 'units-per-em',
	  vAlphabetic: 'v-alphabetic',
	  vHanging: 'v-hanging',
	  vIdeographic: 'v-ideographic',
	  vMathematical: 'v-mathematical',
	  values: 0,
	  vectorEffect: 'vector-effect',
	  version: 0,
	  vertAdvY: 'vert-adv-y',
	  vertOriginX: 'vert-origin-x',
	  vertOriginY: 'vert-origin-y',
	  viewBox: 'viewBox',
	  viewTarget: 'viewTarget',
	  visibility: 0,
	  widths: 0,
	  wordSpacing: 'word-spacing',
	  writingMode: 'writing-mode',
	  x: 0,
	  xHeight: 'x-height',
	  x1: 0,
	  x2: 0,
	  xChannelSelector: 'xChannelSelector',
	  xlinkActuate: 'xlink:actuate',
	  xlinkArcrole: 'xlink:arcrole',
	  xlinkHref: 'xlink:href',
	  xlinkRole: 'xlink:role',
	  xlinkShow: 'xlink:show',
	  xlinkTitle: 'xlink:title',
	  xlinkType: 'xlink:type',
	  xmlBase: 'xml:base',
	  xmlns: 0,
	  xmlnsXlink: 'xmlns:xlink',
	  xmlLang: 'xml:lang',
	  xmlSpace: 'xml:space',
	  y: 0,
	  y1: 0,
	  y2: 0,
	  yChannelSelector: 'yChannelSelector',
	  z: 0,
	  zoomAndPan: 'zoomAndPan'
	};

	var SVGDOMPropertyConfig = {
	  Properties: {},
	  DOMAttributeNamespaces: {
	    xlinkActuate: NS.xlink,
	    xlinkArcrole: NS.xlink,
	    xlinkHref: NS.xlink,
	    xlinkRole: NS.xlink,
	    xlinkShow: NS.xlink,
	    xlinkTitle: NS.xlink,
	    xlinkType: NS.xlink,
	    xmlBase: NS.xml,
	    xmlLang: NS.xml,
	    xmlSpace: NS.xml
	  },
	  DOMAttributeNames: {}
	};

	Object.keys(ATTRS).forEach(function (key) {
	  SVGDOMPropertyConfig.Properties[key] = 0;
	  if (ATTRS[key]) {
	    SVGDOMPropertyConfig.DOMAttributeNames[key] = ATTRS[key];
	  }
	});

	module.exports = SVGDOMPropertyConfig;

/***/ }),
/* 849 */
/***/ (function(module, exports, __webpack_require__) {

	/**
	 * Copyright (c) 2013-present, Facebook, Inc.
	 *
	 * This source code is licensed under the MIT license found in the
	 * LICENSE file in the root directory of this source tree.
	 *
	 */

	'use strict';

	var EventPropagators = __webpack_require__(113);
	var ExecutionEnvironment = __webpack_require__(24);
	var ReactDOMComponentTree = __webpack_require__(21);
	var ReactInputSelection = __webpack_require__(347);
	var SyntheticEvent = __webpack_require__(60);

	var getActiveElement = __webpack_require__(325);
	var isTextInputElement = __webpack_require__(358);
	var shallowEqual = __webpack_require__(207);

	var skipSelectionChangeEvent = ExecutionEnvironment.canUseDOM && 'documentMode' in document && document.documentMode <= 11;

	var eventTypes = {
	  select: {
	    phasedRegistrationNames: {
	      bubbled: 'onSelect',
	      captured: 'onSelectCapture'
	    },
	    dependencies: ['topBlur', 'topContextMenu', 'topFocus', 'topKeyDown', 'topKeyUp', 'topMouseDown', 'topMouseUp', 'topSelectionChange']
	  }
	};

	var activeElement = null;
	var activeElementInst = null;
	var lastSelection = null;
	var mouseDown = false;

	// Track whether a listener exists for this plugin. If none exist, we do
	// not extract events. See #3639.
	var hasListener = false;

	/**
	 * Get an object which is a unique representation of the current selection.
	 *
	 * The return value will not be consistent across nodes or browsers, but
	 * two identical selections on the same node will return identical objects.
	 *
	 * @param {DOMElement} node
	 * @return {object}
	 */
	function getSelection(node) {
	  if ('selectionStart' in node && ReactInputSelection.hasSelectionCapabilities(node)) {
	    return {
	      start: node.selectionStart,
	      end: node.selectionEnd
	    };
	  } else if (window.getSelection) {
	    var selection = window.getSelection();
	    return {
	      anchorNode: selection.anchorNode,
	      anchorOffset: selection.anchorOffset,
	      focusNode: selection.focusNode,
	      focusOffset: selection.focusOffset
	    };
	  } else if (document.selection) {
	    var range = document.selection.createRange();
	    return {
	      parentElement: range.parentElement(),
	      text: range.text,
	      top: range.boundingTop,
	      left: range.boundingLeft
	    };
	  }
	}

	/**
	 * Poll selection to see whether it's changed.
	 *
	 * @param {object} nativeEvent
	 * @return {?SyntheticEvent}
	 */
	function constructSelectEvent(nativeEvent, nativeEventTarget) {
	  // Ensure we have the right element, and that the user is not dragging a
	  // selection (this matches native `select` event behavior). In HTML5, select
	  // fires only on input and textarea thus if there's no focused element we
	  // won't dispatch.
	  if (mouseDown || activeElement == null || activeElement !== getActiveElement()) {
	    return null;
	  }

	  // Only fire when selection has actually changed.
	  var currentSelection = getSelection(activeElement);
	  if (!lastSelection || !shallowEqual(lastSelection, currentSelection)) {
	    lastSelection = currentSelection;

	    var syntheticEvent = SyntheticEvent.getPooled(eventTypes.select, activeElementInst, nativeEvent, nativeEventTarget);

	    syntheticEvent.type = 'select';
	    syntheticEvent.target = activeElement;

	    EventPropagators.accumulateTwoPhaseDispatches(syntheticEvent);

	    return syntheticEvent;
	  }

	  return null;
	}

	/**
	 * This plugin creates an `onSelect` event that normalizes select events
	 * across form elements.
	 *
	 * Supported elements are:
	 * - input (see `isTextInputElement`)
	 * - textarea
	 * - contentEditable
	 *
	 * This differs from native browser implementations in the following ways:
	 * - Fires on contentEditable fields as well as inputs.
	 * - Fires for collapsed selection.
	 * - Fires after user input.
	 */
	var SelectEventPlugin = {
	  eventTypes: eventTypes,

	  extractEvents: function (topLevelType, targetInst, nativeEvent, nativeEventTarget) {
	    if (!hasListener) {
	      return null;
	    }

	    var targetNode = targetInst ? ReactDOMComponentTree.getNodeFromInstance(targetInst) : window;

	    switch (topLevelType) {
	      // Track the input node that has focus.
	      case 'topFocus':
	        if (isTextInputElement(targetNode) || targetNode.contentEditable === 'true') {
	          activeElement = targetNode;
	          activeElementInst = targetInst;
	          lastSelection = null;
	        }
	        break;
	      case 'topBlur':
	        activeElement = null;
	        activeElementInst = null;
	        lastSelection = null;
	        break;
	      // Don't fire the event while the user is dragging. This matches the
	      // semantics of the native select event.
	      case 'topMouseDown':
	        mouseDown = true;
	        break;
	      case 'topContextMenu':
	      case 'topMouseUp':
	        mouseDown = false;
	        return constructSelectEvent(nativeEvent, nativeEventTarget);
	      // Chrome and IE fire non-standard event when selection is changed (and
	      // sometimes when it hasn't). IE's event fires out of order with respect
	      // to key and input events on deletion, so we discard it.
	      //
	      // Firefox doesn't support selectionchange, so check selection status
	      // after each key entry. The selection changes after keydown and before
	      // keyup, but we check on keydown as well in the case of holding down a
	      // key, when multiple keydown events are fired but only one keyup is.
	      // This is also our approach for IE handling, for the reason above.
	      case 'topSelectionChange':
	        if (skipSelectionChangeEvent) {
	          break;
	        }
	      // falls through
	      case 'topKeyDown':
	      case 'topKeyUp':
	        return constructSelectEvent(nativeEvent, nativeEventTarget);
	    }

	    return null;
	  },

	  didPutListener: function (inst, registrationName, listener) {
	    if (registrationName === 'onSelect') {
	      hasListener = true;
	    }
	  }
	};

	module.exports = SelectEventPlugin;

/***/ }),
/* 850 */
/***/ (function(module, exports, __webpack_require__) {

	/**
	 * Copyright (c) 2013-present, Facebook, Inc.
	 *
	 * This source code is licensed under the MIT license found in the
	 * LICENSE file in the root directory of this source tree.
	 *
	 * 
	 */

	'use strict';

	var _prodInvariant = __webpack_require__(13);

	var EventListener = __webpack_require__(323);
	var EventPropagators = __webpack_require__(113);
	var ReactDOMComponentTree = __webpack_require__(21);
	var SyntheticAnimationEvent = __webpack_require__(851);
	var SyntheticClipboardEvent = __webpack_require__(852);
	var SyntheticEvent = __webpack_require__(60);
	var SyntheticFocusEvent = __webpack_require__(855);
	var SyntheticKeyboardEvent = __webpack_require__(857);
	var SyntheticMouseEvent = __webpack_require__(146);
	var SyntheticDragEvent = __webpack_require__(854);
	var SyntheticTouchEvent = __webpack_require__(858);
	var SyntheticTransitionEvent = __webpack_require__(859);
	var SyntheticUIEvent = __webpack_require__(115);
	var SyntheticWheelEvent = __webpack_require__(860);

	var emptyFunction = __webpack_require__(53);
	var getEventCharCode = __webpack_require__(223);
	var invariant = __webpack_require__(7);

	/**
	 * Turns
	 * ['abort', ...]
	 * into
	 * eventTypes = {
	 *   'abort': {
	 *     phasedRegistrationNames: {
	 *       bubbled: 'onAbort',
	 *       captured: 'onAbortCapture',
	 *     },
	 *     dependencies: ['topAbort'],
	 *   },
	 *   ...
	 * };
	 * topLevelEventsToDispatchConfig = {
	 *   'topAbort': { sameConfig }
	 * };
	 */
	var eventTypes = {};
	var topLevelEventsToDispatchConfig = {};
	['abort', 'animationEnd', 'animationIteration', 'animationStart', 'blur', 'canPlay', 'canPlayThrough', 'click', 'contextMenu', 'copy', 'cut', 'doubleClick', 'drag', 'dragEnd', 'dragEnter', 'dragExit', 'dragLeave', 'dragOver', 'dragStart', 'drop', 'durationChange', 'emptied', 'encrypted', 'ended', 'error', 'focus', 'input', 'invalid', 'keyDown', 'keyPress', 'keyUp', 'load', 'loadedData', 'loadedMetadata', 'loadStart', 'mouseDown', 'mouseMove', 'mouseOut', 'mouseOver', 'mouseUp', 'paste', 'pause', 'play', 'playing', 'progress', 'rateChange', 'reset', 'scroll', 'seeked', 'seeking', 'stalled', 'submit', 'suspend', 'timeUpdate', 'touchCancel', 'touchEnd', 'touchMove', 'touchStart', 'transitionEnd', 'volumeChange', 'waiting', 'wheel'].forEach(function (event) {
	  var capitalizedEvent = event[0].toUpperCase() + event.slice(1);
	  var onEvent = 'on' + capitalizedEvent;
	  var topEvent = 'top' + capitalizedEvent;

	  var type = {
	    phasedRegistrationNames: {
	      bubbled: onEvent,
	      captured: onEvent + 'Capture'
	    },
	    dependencies: [topEvent]
	  };
	  eventTypes[event] = type;
	  topLevelEventsToDispatchConfig[topEvent] = type;
	});

	var onClickListeners = {};

	function getDictionaryKey(inst) {
	  // Prevents V8 performance issue:
	  // https://github.com/facebook/react/pull/7232
	  return '.' + inst._rootNodeID;
	}

	function isInteractive(tag) {
	  return tag === 'button' || tag === 'input' || tag === 'select' || tag === 'textarea';
	}

	var SimpleEventPlugin = {
	  eventTypes: eventTypes,

	  extractEvents: function (topLevelType, targetInst, nativeEvent, nativeEventTarget) {
	    var dispatchConfig = topLevelEventsToDispatchConfig[topLevelType];
	    if (!dispatchConfig) {
	      return null;
	    }
	    var EventConstructor;
	    switch (topLevelType) {
	      case 'topAbort':
	      case 'topCanPlay':
	      case 'topCanPlayThrough':
	      case 'topDurationChange':
	      case 'topEmptied':
	      case 'topEncrypted':
	      case 'topEnded':
	      case 'topError':
	      case 'topInput':
	      case 'topInvalid':
	      case 'topLoad':
	      case 'topLoadedData':
	      case 'topLoadedMetadata':
	      case 'topLoadStart':
	      case 'topPause':
	      case 'topPlay':
	      case 'topPlaying':
	      case 'topProgress':
	      case 'topRateChange':
	      case 'topReset':
	      case 'topSeeked':
	      case 'topSeeking':
	      case 'topStalled':
	      case 'topSubmit':
	      case 'topSuspend':
	      case 'topTimeUpdate':
	      case 'topVolumeChange':
	      case 'topWaiting':
	        // HTML Events
	        // @see http://www.w3.org/TR/html5/index.html#events-0
	        EventConstructor = SyntheticEvent;
	        break;
	      case 'topKeyPress':
	        // Firefox creates a keypress event for function keys too. This removes
	        // the unwanted keypress events. Enter is however both printable and
	        // non-printable. One would expect Tab to be as well (but it isn't).
	        if (getEventCharCode(nativeEvent) === 0) {
	          return null;
	        }
	      /* falls through */
	      case 'topKeyDown':
	      case 'topKeyUp':
	        EventConstructor = SyntheticKeyboardEvent;
	        break;
	      case 'topBlur':
	      case 'topFocus':
	        EventConstructor = SyntheticFocusEvent;
	        break;
	      case 'topClick':
	        // Firefox creates a click event on right mouse clicks. This removes the
	        // unwanted click events.
	        if (nativeEvent.button === 2) {
	          return null;
	        }
	      /* falls through */
	      case 'topDoubleClick':
	      case 'topMouseDown':
	      case 'topMouseMove':
	      case 'topMouseUp':
	      // TODO: Disabled elements should not respond to mouse events
	      /* falls through */
	      case 'topMouseOut':
	      case 'topMouseOver':
	      case 'topContextMenu':
	        EventConstructor = SyntheticMouseEvent;
	        break;
	      case 'topDrag':
	      case 'topDragEnd':
	      case 'topDragEnter':
	      case 'topDragExit':
	      case 'topDragLeave':
	      case 'topDragOver':
	      case 'topDragStart':
	      case 'topDrop':
	        EventConstructor = SyntheticDragEvent;
	        break;
	      case 'topTouchCancel':
	      case 'topTouchEnd':
	      case 'topTouchMove':
	      case 'topTouchStart':
	        EventConstructor = SyntheticTouchEvent;
	        break;
	      case 'topAnimationEnd':
	      case 'topAnimationIteration':
	      case 'topAnimationStart':
	        EventConstructor = SyntheticAnimationEvent;
	        break;
	      case 'topTransitionEnd':
	        EventConstructor = SyntheticTransitionEvent;
	        break;
	      case 'topScroll':
	        EventConstructor = SyntheticUIEvent;
	        break;
	      case 'topWheel':
	        EventConstructor = SyntheticWheelEvent;
	        break;
	      case 'topCopy':
	      case 'topCut':
	      case 'topPaste':
	        EventConstructor = SyntheticClipboardEvent;
	        break;
	    }
	    !EventConstructor ? (undefined) !== 'production' ? invariant(false, 'SimpleEventPlugin: Unhandled event type, `%s`.', topLevelType) : _prodInvariant('86', topLevelType) : void 0;
	    var event = EventConstructor.getPooled(dispatchConfig, targetInst, nativeEvent, nativeEventTarget);
	    EventPropagators.accumulateTwoPhaseDispatches(event);
	    return event;
	  },

	  didPutListener: function (inst, registrationName, listener) {
	    // Mobile Safari does not fire properly bubble click events on
	    // non-interactive elements, which means delegated click listeners do not
	    // fire. The workaround for this bug involves attaching an empty click
	    // listener on the target node.
	    // http://www.quirksmode.org/blog/archives/2010/09/click_event_del.html
	    if (registrationName === 'onClick' && !isInteractive(inst._tag)) {
	      var key = getDictionaryKey(inst);
	      var node = ReactDOMComponentTree.getNodeFromInstance(inst);
	      if (!onClickListeners[key]) {
	        onClickListeners[key] = EventListener.listen(node, 'click', emptyFunction);
	      }
	    }
	  },

	  willDeleteListener: function (inst, registrationName) {
	    if (registrationName === 'onClick' && !isInteractive(inst._tag)) {
	      var key = getDictionaryKey(inst);
	      onClickListeners[key].remove();
	      delete onClickListeners[key];
	    }
	  }
	};

	module.exports = SimpleEventPlugin;

/***/ }),
/* 851 */
/***/ (function(module, exports, __webpack_require__) {

	/**
	 * Copyright (c) 2013-present, Facebook, Inc.
	 *
	 * This source code is licensed under the MIT license found in the
	 * LICENSE file in the root directory of this source tree.
	 *
	 */

	'use strict';

	var SyntheticEvent = __webpack_require__(60);

	/**
	 * @interface Event
	 * @see http://www.w3.org/TR/css3-animations/#AnimationEvent-interface
	 * @see https://developer.mozilla.org/en-US/docs/Web/API/AnimationEvent
	 */
	var AnimationEventInterface = {
	  animationName: null,
	  elapsedTime: null,
	  pseudoElement: null
	};

	/**
	 * @param {object} dispatchConfig Configuration used to dispatch this event.
	 * @param {string} dispatchMarker Marker identifying the event target.
	 * @param {object} nativeEvent Native browser event.
	 * @extends {SyntheticEvent}
	 */
	function SyntheticAnimationEvent(dispatchConfig, dispatchMarker, nativeEvent, nativeEventTarget) {
	  return SyntheticEvent.call(this, dispatchConfig, dispatchMarker, nativeEvent, nativeEventTarget);
	}

	SyntheticEvent.augmentClass(SyntheticAnimationEvent, AnimationEventInterface);

	module.exports = SyntheticAnimationEvent;

/***/ }),
/* 852 */
/***/ (function(module, exports, __webpack_require__) {

	/**
	 * Copyright (c) 2013-present, Facebook, Inc.
	 *
	 * This source code is licensed under the MIT license found in the
	 * LICENSE file in the root directory of this source tree.
	 *
	 */

	'use strict';

	var SyntheticEvent = __webpack_require__(60);

	/**
	 * @interface Event
	 * @see http://www.w3.org/TR/clipboard-apis/
	 */
	var ClipboardEventInterface = {
	  clipboardData: function (event) {
	    return 'clipboardData' in event ? event.clipboardData : window.clipboardData;
	  }
	};

	/**
	 * @param {object} dispatchConfig Configuration used to dispatch this event.
	 * @param {string} dispatchMarker Marker identifying the event target.
	 * @param {object} nativeEvent Native browser event.
	 * @extends {SyntheticUIEvent}
	 */
	function SyntheticClipboardEvent(dispatchConfig, dispatchMarker, nativeEvent, nativeEventTarget) {
	  return SyntheticEvent.call(this, dispatchConfig, dispatchMarker, nativeEvent, nativeEventTarget);
	}

	SyntheticEvent.augmentClass(SyntheticClipboardEvent, ClipboardEventInterface);

	module.exports = SyntheticClipboardEvent;

/***/ }),
/* 853 */
/***/ (function(module, exports, __webpack_require__) {

	/**
	 * Copyright (c) 2013-present, Facebook, Inc.
	 *
	 * This source code is licensed under the MIT license found in the
	 * LICENSE file in the root directory of this source tree.
	 *
	 */

	'use strict';

	var SyntheticEvent = __webpack_require__(60);

	/**
	 * @interface Event
	 * @see http://www.w3.org/TR/DOM-Level-3-Events/#events-compositionevents
	 */
	var CompositionEventInterface = {
	  data: null
	};

	/**
	 * @param {object} dispatchConfig Configuration used to dispatch this event.
	 * @param {string} dispatchMarker Marker identifying the event target.
	 * @param {object} nativeEvent Native browser event.
	 * @extends {SyntheticUIEvent}
	 */
	function SyntheticCompositionEvent(dispatchConfig, dispatchMarker, nativeEvent, nativeEventTarget) {
	  return SyntheticEvent.call(this, dispatchConfig, dispatchMarker, nativeEvent, nativeEventTarget);
	}

	SyntheticEvent.augmentClass(SyntheticCompositionEvent, CompositionEventInterface);

	module.exports = SyntheticCompositionEvent;

/***/ }),
/* 854 */
/***/ (function(module, exports, __webpack_require__) {

	/**
	 * Copyright (c) 2013-present, Facebook, Inc.
	 *
	 * This source code is licensed under the MIT license found in the
	 * LICENSE file in the root directory of this source tree.
	 *
	 */

	'use strict';

	var SyntheticMouseEvent = __webpack_require__(146);

	/**
	 * @interface DragEvent
	 * @see http://www.w3.org/TR/DOM-Level-3-Events/
	 */
	var DragEventInterface = {
	  dataTransfer: null
	};

	/**
	 * @param {object} dispatchConfig Configuration used to dispatch this event.
	 * @param {string} dispatchMarker Marker identifying the event target.
	 * @param {object} nativeEvent Native browser event.
	 * @extends {SyntheticUIEvent}
	 */
	function SyntheticDragEvent(dispatchConfig, dispatchMarker, nativeEvent, nativeEventTarget) {
	  return SyntheticMouseEvent.call(this, dispatchConfig, dispatchMarker, nativeEvent, nativeEventTarget);
	}

	SyntheticMouseEvent.augmentClass(SyntheticDragEvent, DragEventInterface);

	module.exports = SyntheticDragEvent;

/***/ }),
/* 855 */
/***/ (function(module, exports, __webpack_require__) {

	/**
	 * Copyright (c) 2013-present, Facebook, Inc.
	 *
	 * This source code is licensed under the MIT license found in the
	 * LICENSE file in the root directory of this source tree.
	 *
	 */

	'use strict';

	var SyntheticUIEvent = __webpack_require__(115);

	/**
	 * @interface FocusEvent
	 * @see http://www.w3.org/TR/DOM-Level-3-Events/
	 */
	var FocusEventInterface = {
	  relatedTarget: null
	};

	/**
	 * @param {object} dispatchConfig Configuration used to dispatch this event.
	 * @param {string} dispatchMarker Marker identifying the event target.
	 * @param {object} nativeEvent Native browser event.
	 * @extends {SyntheticUIEvent}
	 */
	function SyntheticFocusEvent(dispatchConfig, dispatchMarker, nativeEvent, nativeEventTarget) {
	  return SyntheticUIEvent.call(this, dispatchConfig, dispatchMarker, nativeEvent, nativeEventTarget);
	}

	SyntheticUIEvent.augmentClass(SyntheticFocusEvent, FocusEventInterface);

	module.exports = SyntheticFocusEvent;

/***/ }),
/* 856 */
/***/ (function(module, exports, __webpack_require__) {

	/**
	 * Copyright (c) 2013-present, Facebook, Inc.
	 *
	 * This source code is licensed under the MIT license found in the
	 * LICENSE file in the root directory of this source tree.
	 *
	 */

	'use strict';

	var SyntheticEvent = __webpack_require__(60);

	/**
	 * @interface Event
	 * @see http://www.w3.org/TR/2013/WD-DOM-Level-3-Events-20131105
	 *      /#events-inputevents
	 */
	var InputEventInterface = {
	  data: null
	};

	/**
	 * @param {object} dispatchConfig Configuration used to dispatch this event.
	 * @param {string} dispatchMarker Marker identifying the event target.
	 * @param {object} nativeEvent Native browser event.
	 * @extends {SyntheticUIEvent}
	 */
	function SyntheticInputEvent(dispatchConfig, dispatchMarker, nativeEvent, nativeEventTarget) {
	  return SyntheticEvent.call(this, dispatchConfig, dispatchMarker, nativeEvent, nativeEventTarget);
	}

	SyntheticEvent.augmentClass(SyntheticInputEvent, InputEventInterface);

	module.exports = SyntheticInputEvent;

/***/ }),
/* 857 */
/***/ (function(module, exports, __webpack_require__) {

	/**
	 * Copyright (c) 2013-present, Facebook, Inc.
	 *
	 * This source code is licensed under the MIT license found in the
	 * LICENSE file in the root directory of this source tree.
	 *
	 */

	'use strict';

	var SyntheticUIEvent = __webpack_require__(115);

	var getEventCharCode = __webpack_require__(223);
	var getEventKey = __webpack_require__(866);
	var getEventModifierState = __webpack_require__(224);

	/**
	 * @interface KeyboardEvent
	 * @see http://www.w3.org/TR/DOM-Level-3-Events/
	 */
	var KeyboardEventInterface = {
	  key: getEventKey,
	  location: null,
	  ctrlKey: null,
	  shiftKey: null,
	  altKey: null,
	  metaKey: null,
	  repeat: null,
	  locale: null,
	  getModifierState: getEventModifierState,
	  // Legacy Interface
	  charCode: function (event) {
	    // `charCode` is the result of a KeyPress event and represents the value of
	    // the actual printable character.

	    // KeyPress is deprecated, but its replacement is not yet final and not
	    // implemented in any major browser. Only KeyPress has charCode.
	    if (event.type === 'keypress') {
	      return getEventCharCode(event);
	    }
	    return 0;
	  },
	  keyCode: function (event) {
	    // `keyCode` is the result of a KeyDown/Up event and represents the value of
	    // physical keyboard key.

	    // The actual meaning of the value depends on the users' keyboard layout
	    // which cannot be detected. Assuming that it is a US keyboard layout
	    // provides a surprisingly accurate mapping for US and European users.
	    // Due to this, it is left to the user to implement at this time.
	    if (event.type === 'keydown' || event.type === 'keyup') {
	      return event.keyCode;
	    }
	    return 0;
	  },
	  which: function (event) {
	    // `which` is an alias for either `keyCode` or `charCode` depending on the
	    // type of the event.
	    if (event.type === 'keypress') {
	      return getEventCharCode(event);
	    }
	    if (event.type === 'keydown' || event.type === 'keyup') {
	      return event.keyCode;
	    }
	    return 0;
	  }
	};

	/**
	 * @param {object} dispatchConfig Configuration used to dispatch this event.
	 * @param {string} dispatchMarker Marker identifying the event target.
	 * @param {object} nativeEvent Native browser event.
	 * @extends {SyntheticUIEvent}
	 */
	function SyntheticKeyboardEvent(dispatchConfig, dispatchMarker, nativeEvent, nativeEventTarget) {
	  return SyntheticUIEvent.call(this, dispatchConfig, dispatchMarker, nativeEvent, nativeEventTarget);
	}

	SyntheticUIEvent.augmentClass(SyntheticKeyboardEvent, KeyboardEventInterface);

	module.exports = SyntheticKeyboardEvent;

/***/ }),
/* 858 */
/***/ (function(module, exports, __webpack_require__) {

	/**
	 * Copyright (c) 2013-present, Facebook, Inc.
	 *
	 * This source code is licensed under the MIT license found in the
	 * LICENSE file in the root directory of this source tree.
	 *
	 */

	'use strict';

	var SyntheticUIEvent = __webpack_require__(115);

	var getEventModifierState = __webpack_require__(224);

	/**
	 * @interface TouchEvent
	 * @see http://www.w3.org/TR/touch-events/
	 */
	var TouchEventInterface = {
	  touches: null,
	  targetTouches: null,
	  changedTouches: null,
	  altKey: null,
	  metaKey: null,
	  ctrlKey: null,
	  shiftKey: null,
	  getModifierState: getEventModifierState
	};

	/**
	 * @param {object} dispatchConfig Configuration used to dispatch this event.
	 * @param {string} dispatchMarker Marker identifying the event target.
	 * @param {object} nativeEvent Native browser event.
	 * @extends {SyntheticUIEvent}
	 */
	function SyntheticTouchEvent(dispatchConfig, dispatchMarker, nativeEvent, nativeEventTarget) {
	  return SyntheticUIEvent.call(this, dispatchConfig, dispatchMarker, nativeEvent, nativeEventTarget);
	}

	SyntheticUIEvent.augmentClass(SyntheticTouchEvent, TouchEventInterface);

	module.exports = SyntheticTouchEvent;

/***/ }),
/* 859 */
/***/ (function(module, exports, __webpack_require__) {

	/**
	 * Copyright (c) 2013-present, Facebook, Inc.
	 *
	 * This source code is licensed under the MIT license found in the
	 * LICENSE file in the root directory of this source tree.
	 *
	 */

	'use strict';

	var SyntheticEvent = __webpack_require__(60);

	/**
	 * @interface Event
	 * @see http://www.w3.org/TR/2009/WD-css3-transitions-20090320/#transition-events-
	 * @see https://developer.mozilla.org/en-US/docs/Web/API/TransitionEvent
	 */
	var TransitionEventInterface = {
	  propertyName: null,
	  elapsedTime: null,
	  pseudoElement: null
	};

	/**
	 * @param {object} dispatchConfig Configuration used to dispatch this event.
	 * @param {string} dispatchMarker Marker identifying the event target.
	 * @param {object} nativeEvent Native browser event.
	 * @extends {SyntheticEvent}
	 */
	function SyntheticTransitionEvent(dispatchConfig, dispatchMarker, nativeEvent, nativeEventTarget) {
	  return SyntheticEvent.call(this, dispatchConfig, dispatchMarker, nativeEvent, nativeEventTarget);
	}

	SyntheticEvent.augmentClass(SyntheticTransitionEvent, TransitionEventInterface);

	module.exports = SyntheticTransitionEvent;

/***/ }),
/* 860 */
/***/ (function(module, exports, __webpack_require__) {

	/**
	 * Copyright (c) 2013-present, Facebook, Inc.
	 *
	 * This source code is licensed under the MIT license found in the
	 * LICENSE file in the root directory of this source tree.
	 *
	 */

	'use strict';

	var SyntheticMouseEvent = __webpack_require__(146);

	/**
	 * @interface WheelEvent
	 * @see http://www.w3.org/TR/DOM-Level-3-Events/
	 */
	var WheelEventInterface = {
	  deltaX: function (event) {
	    return 'deltaX' in event ? event.deltaX : // Fallback to `wheelDeltaX` for Webkit and normalize (right is positive).
	    'wheelDeltaX' in event ? -event.wheelDeltaX : 0;
	  },
	  deltaY: function (event) {
	    return 'deltaY' in event ? event.deltaY : // Fallback to `wheelDeltaY` for Webkit and normalize (down is positive).
	    'wheelDeltaY' in event ? -event.wheelDeltaY : // Fallback to `wheelDelta` for IE<9 and normalize (down is positive).
	    'wheelDelta' in event ? -event.wheelDelta : 0;
	  },
	  deltaZ: null,

	  // Browsers without "deltaMode" is reporting in raw wheel delta where one
	  // notch on the scroll is always +/- 120, roughly equivalent to pixels.
	  // A good approximation of DOM_DELTA_LINE (1) is 5% of viewport size or
	  // ~40 pixels, for DOM_DELTA_SCREEN (2) it is 87.5% of viewport size.
	  deltaMode: null
	};

	/**
	 * @param {object} dispatchConfig Configuration used to dispatch this event.
	 * @param {string} dispatchMarker Marker identifying the event target.
	 * @param {object} nativeEvent Native browser event.
	 * @extends {SyntheticMouseEvent}
	 */
	function SyntheticWheelEvent(dispatchConfig, dispatchMarker, nativeEvent, nativeEventTarget) {
	  return SyntheticMouseEvent.call(this, dispatchConfig, dispatchMarker, nativeEvent, nativeEventTarget);
	}

	SyntheticMouseEvent.augmentClass(SyntheticWheelEvent, WheelEventInterface);

	module.exports = SyntheticWheelEvent;

/***/ }),
/* 861 */
/***/ (function(module, exports) {

	/**
	 * Copyright (c) 2013-present, Facebook, Inc.
	 *
	 * This source code is licensed under the MIT license found in the
	 * LICENSE file in the root directory of this source tree.
	 *
	 * 
	 */

	'use strict';

	var MOD = 65521;

	// adler32 is not cryptographically strong, and is only used to sanity check that
	// markup generated on the server matches the markup generated on the client.
	// This implementation (a modified version of the SheetJS version) has been optimized
	// for our use case, at the expense of conforming to the adler32 specification
	// for non-ascii inputs.
	function adler32(data) {
	  var a = 1;
	  var b = 0;
	  var i = 0;
	  var l = data.length;
	  var m = l & ~0x3;
	  while (i < m) {
	    var n = Math.min(i + 4096, m);
	    for (; i < n; i += 4) {
	      b += (a += data.charCodeAt(i)) + (a += data.charCodeAt(i + 1)) + (a += data.charCodeAt(i + 2)) + (a += data.charCodeAt(i + 3));
	    }
	    a %= MOD;
	    b %= MOD;
	  }
	  for (; i < l; i++) {
	    b += a += data.charCodeAt(i);
	  }
	  a %= MOD;
	  b %= MOD;
	  return a | b << 16;
	}

	module.exports = adler32;

/***/ }),
/* 862 */
/***/ (function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright (c) 2013-present, Facebook, Inc.
	 *
	 * This source code is licensed under the MIT license found in the
	 * LICENSE file in the root directory of this source tree.
	 *
	 */

	'use strict';

	var _prodInvariant = __webpack_require__(13);

	var ReactPropTypeLocationNames = __webpack_require__(842);
	var ReactPropTypesSecret = __webpack_require__(350);

	var invariant = __webpack_require__(7);
	var warning = __webpack_require__(8);

	var ReactComponentTreeHook;

	if (typeof process !== 'undefined' && process.env && (undefined) === 'test') {
	  // Temporary hack.
	  // Inline requires don't work well with Jest:
	  // https://github.com/facebook/react/issues/7240
	  // Remove the inline requires when we don't need them anymore:
	  // https://github.com/facebook/react/pull/7178
	  ReactComponentTreeHook = __webpack_require__(34);
	}

	var loggedTypeFailures = {};

	/**
	 * Assert that the values match with the type specs.
	 * Error messages are memorized and will only be shown once.
	 *
	 * @param {object} typeSpecs Map of name to a ReactPropType
	 * @param {object} values Runtime values that need to be type-checked
	 * @param {string} location e.g. "prop", "context", "child context"
	 * @param {string} componentName Name of the component for error messages.
	 * @param {?object} element The React element that is being type-checked
	 * @param {?number} debugID The React component instance that is being type-checked
	 * @private
	 */
	function checkReactTypeSpec(typeSpecs, values, location, componentName, element, debugID) {
	  for (var typeSpecName in typeSpecs) {
	    if (typeSpecs.hasOwnProperty(typeSpecName)) {
	      var error;
	      // Prop type validation may throw. In case they do, we don't want to
	      // fail the render phase where it didn't fail before. So we log it.
	      // After these have been cleaned up, we'll let them throw.
	      try {
	        // This is intentionally an invariant that gets caught. It's the same
	        // behavior as without this statement except with a better message.
	        !(typeof typeSpecs[typeSpecName] === 'function') ? (undefined) !== 'production' ? invariant(false, '%s: %s type `%s` is invalid; it must be a function, usually from React.PropTypes.', componentName || 'React class', ReactPropTypeLocationNames[location], typeSpecName) : _prodInvariant('84', componentName || 'React class', ReactPropTypeLocationNames[location], typeSpecName) : void 0;
	        error = typeSpecs[typeSpecName](values, typeSpecName, componentName, location, null, ReactPropTypesSecret);
	      } catch (ex) {
	        error = ex;
	      }
	      (undefined) !== 'production' ? warning(!error || error instanceof Error, '%s: type specification of %s `%s` is invalid; the type checker ' + 'function must return `null` or an `Error` but returned a %s. ' + 'You may have forgotten to pass an argument to the type checker ' + 'creator (arrayOf, instanceOf, objectOf, oneOf, oneOfType, and ' + 'shape all require an argument).', componentName || 'React class', ReactPropTypeLocationNames[location], typeSpecName, typeof error) : void 0;
	      if (error instanceof Error && !(error.message in loggedTypeFailures)) {
	        // Only monitor this failure once because there tends to be a lot of the
	        // same error.
	        loggedTypeFailures[error.message] = true;

	        var componentStackInfo = '';

	        if ((undefined) !== 'production') {
	          if (!ReactComponentTreeHook) {
	            ReactComponentTreeHook = __webpack_require__(34);
	          }
	          if (debugID !== null) {
	            componentStackInfo = ReactComponentTreeHook.getStackAddendumByID(debugID);
	          } else if (element !== null) {
	            componentStackInfo = ReactComponentTreeHook.getCurrentStackAddendum(element);
	          }
	        }

	        (undefined) !== 'production' ? warning(false, 'Failed %s type: %s%s', location, error.message, componentStackInfo) : void 0;
	      }
	    }
	  }
	}

	module.exports = checkReactTypeSpec;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(143)))

/***/ }),
/* 863 */
/***/ (function(module, exports, __webpack_require__) {

	/**
	 * Copyright (c) 2013-present, Facebook, Inc.
	 *
	 * This source code is licensed under the MIT license found in the
	 * LICENSE file in the root directory of this source tree.
	 *
	 */

	'use strict';

	var CSSProperty = __webpack_require__(339);
	var warning = __webpack_require__(8);

	var isUnitlessNumber = CSSProperty.isUnitlessNumber;
	var styleWarnings = {};

	/**
	 * Convert a value into the proper css writable value. The style name `name`
	 * should be logical (no hyphens), as specified
	 * in `CSSProperty.isUnitlessNumber`.
	 *
	 * @param {string} name CSS property name such as `topMargin`.
	 * @param {*} value CSS property value such as `10px`.
	 * @param {ReactDOMComponent} component
	 * @return {string} Normalized style value with dimensions applied.
	 */
	function dangerousStyleValue(name, value, component, isCustomProperty) {
	  // Note that we've removed escapeTextForBrowser() calls here since the
	  // whole string will be escaped when the attribute is injected into
	  // the markup. If you provide unsafe user data here they can inject
	  // arbitrary CSS which may be problematic (I couldn't repro this):
	  // https://www.owasp.org/index.php/XSS_Filter_Evasion_Cheat_Sheet
	  // http://www.thespanner.co.uk/2007/11/26/ultimate-xss-css-injection/
	  // This is not an XSS hole but instead a potential CSS injection issue
	  // which has lead to a greater discussion about how we're going to
	  // trust URLs moving forward. See #2115901

	  var isEmpty = value == null || typeof value === 'boolean' || value === '';
	  if (isEmpty) {
	    return '';
	  }

	  var isNonNumeric = isNaN(value);
	  if (isCustomProperty || isNonNumeric || value === 0 || isUnitlessNumber.hasOwnProperty(name) && isUnitlessNumber[name]) {
	    return '' + value; // cast to string
	  }

	  if (typeof value === 'string') {
	    if ((undefined) !== 'production') {
	      // Allow '0' to pass through without warning. 0 is already special and
	      // doesn't require units, so we don't need to warn about it.
	      if (component && value !== '0') {
	        var owner = component._currentElement._owner;
	        var ownerName = owner ? owner.getName() : null;
	        if (ownerName && !styleWarnings[ownerName]) {
	          styleWarnings[ownerName] = {};
	        }
	        var warned = false;
	        if (ownerName) {
	          var warnings = styleWarnings[ownerName];
	          warned = warnings[name];
	          if (!warned) {
	            warnings[name] = true;
	          }
	        }
	        if (!warned) {
	          (undefined) !== 'production' ? warning(false, 'a `%s` tag (owner: `%s`) was passed a numeric string value ' + 'for CSS property `%s` (value: `%s`) which will be treated ' + 'as a unitless number in a future version of React.', component._currentElement.type, ownerName || 'unknown', name, value) : void 0;
	        }
	      }
	    }
	    value = value.trim();
	  }
	  return value + 'px';
	}

	module.exports = dangerousStyleValue;

/***/ }),
/* 864 */
/***/ (function(module, exports, __webpack_require__) {

	/**
	 * Copyright (c) 2013-present, Facebook, Inc.
	 *
	 * This source code is licensed under the MIT license found in the
	 * LICENSE file in the root directory of this source tree.
	 *
	 */

	'use strict';

	var _prodInvariant = __webpack_require__(13);

	var ReactCurrentOwner = __webpack_require__(56);
	var ReactDOMComponentTree = __webpack_require__(21);
	var ReactInstanceMap = __webpack_require__(114);

	var getHostComponentFromComposite = __webpack_require__(354);
	var invariant = __webpack_require__(7);
	var warning = __webpack_require__(8);

	/**
	 * Returns the DOM node rendered by this element.
	 *
	 * See https://facebook.github.io/react/docs/top-level-api.html#reactdom.finddomnode
	 *
	 * @param {ReactComponent|DOMElement} componentOrElement
	 * @return {?DOMElement} The root node of this element.
	 */
	function findDOMNode(componentOrElement) {
	  if ((undefined) !== 'production') {
	    var owner = ReactCurrentOwner.current;
	    if (owner !== null) {
	      (undefined) !== 'production' ? warning(owner._warnedAboutRefsInRender, '%s is accessing findDOMNode inside its render(). ' + 'render() should be a pure function of props and state. It should ' + 'never access something that requires stale data from the previous ' + 'render, such as refs. Move this logic to componentDidMount and ' + 'componentDidUpdate instead.', owner.getName() || 'A component') : void 0;
	      owner._warnedAboutRefsInRender = true;
	    }
	  }
	  if (componentOrElement == null) {
	    return null;
	  }
	  if (componentOrElement.nodeType === 1) {
	    return componentOrElement;
	  }

	  var inst = ReactInstanceMap.get(componentOrElement);
	  if (inst) {
	    inst = getHostComponentFromComposite(inst);
	    return inst ? ReactDOMComponentTree.getNodeFromInstance(inst) : null;
	  }

	  if (typeof componentOrElement.render === 'function') {
	     true ? (undefined) !== 'production' ? invariant(false, 'findDOMNode was called on an unmounted component.') : _prodInvariant('44') : void 0;
	  } else {
	     true ? (undefined) !== 'production' ? invariant(false, 'Element appears to be neither ReactComponent nor DOMNode (keys: %s)', Object.keys(componentOrElement)) : _prodInvariant('45', Object.keys(componentOrElement)) : void 0;
	  }
	}

	module.exports = findDOMNode;

/***/ }),
/* 865 */
/***/ (function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright (c) 2013-present, Facebook, Inc.
	 *
	 * This source code is licensed under the MIT license found in the
	 * LICENSE file in the root directory of this source tree.
	 *
	 * 
	 */

	'use strict';

	var KeyEscapeUtils = __webpack_require__(217);
	var traverseAllChildren = __webpack_require__(360);
	var warning = __webpack_require__(8);

	var ReactComponentTreeHook;

	if (typeof process !== 'undefined' && process.env && (undefined) === 'test') {
	  // Temporary hack.
	  // Inline requires don't work well with Jest:
	  // https://github.com/facebook/react/issues/7240
	  // Remove the inline requires when we don't need them anymore:
	  // https://github.com/facebook/react/pull/7178
	  ReactComponentTreeHook = __webpack_require__(34);
	}

	/**
	 * @param {function} traverseContext Context passed through traversal.
	 * @param {?ReactComponent} child React child component.
	 * @param {!string} name String name of key path to child.
	 * @param {number=} selfDebugID Optional debugID of the current internal instance.
	 */
	function flattenSingleChildIntoContext(traverseContext, child, name, selfDebugID) {
	  // We found a component instance.
	  if (traverseContext && typeof traverseContext === 'object') {
	    var result = traverseContext;
	    var keyUnique = result[name] === undefined;
	    if ((undefined) !== 'production') {
	      if (!ReactComponentTreeHook) {
	        ReactComponentTreeHook = __webpack_require__(34);
	      }
	      if (!keyUnique) {
	        (undefined) !== 'production' ? warning(false, 'flattenChildren(...): Encountered two children with the same key, ' + '`%s`. Child keys must be unique; when two children share a key, only ' + 'the first child will be used.%s', KeyEscapeUtils.unescape(name), ReactComponentTreeHook.getStackAddendumByID(selfDebugID)) : void 0;
	      }
	    }
	    if (keyUnique && child != null) {
	      result[name] = child;
	    }
	  }
	}

	/**
	 * Flattens children that are typically specified as `props.children`. Any null
	 * children will not be included in the resulting object.
	 * @return {!object} flattened children keyed by name.
	 */
	function flattenChildren(children, selfDebugID) {
	  if (children == null) {
	    return children;
	  }
	  var result = {};

	  if ((undefined) !== 'production') {
	    traverseAllChildren(children, function (traverseContext, child, name) {
	      return flattenSingleChildIntoContext(traverseContext, child, name, selfDebugID);
	    }, result);
	  } else {
	    traverseAllChildren(children, flattenSingleChildIntoContext, result);
	  }
	  return result;
	}

	module.exports = flattenChildren;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(143)))

/***/ }),
/* 866 */
/***/ (function(module, exports, __webpack_require__) {

	/**
	 * Copyright (c) 2013-present, Facebook, Inc.
	 *
	 * This source code is licensed under the MIT license found in the
	 * LICENSE file in the root directory of this source tree.
	 *
	 */

	'use strict';

	var getEventCharCode = __webpack_require__(223);

	/**
	 * Normalization of deprecated HTML5 `key` values
	 * @see https://developer.mozilla.org/en-US/docs/Web/API/KeyboardEvent#Key_names
	 */
	var normalizeKey = {
	  Esc: 'Escape',
	  Spacebar: ' ',
	  Left: 'ArrowLeft',
	  Up: 'ArrowUp',
	  Right: 'ArrowRight',
	  Down: 'ArrowDown',
	  Del: 'Delete',
	  Win: 'OS',
	  Menu: 'ContextMenu',
	  Apps: 'ContextMenu',
	  Scroll: 'ScrollLock',
	  MozPrintableKey: 'Unidentified'
	};

	/**
	 * Translation from legacy `keyCode` to HTML5 `key`
	 * Only special keys supported, all others depend on keyboard layout or browser
	 * @see https://developer.mozilla.org/en-US/docs/Web/API/KeyboardEvent#Key_names
	 */
	var translateToKey = {
	  8: 'Backspace',
	  9: 'Tab',
	  12: 'Clear',
	  13: 'Enter',
	  16: 'Shift',
	  17: 'Control',
	  18: 'Alt',
	  19: 'Pause',
	  20: 'CapsLock',
	  27: 'Escape',
	  32: ' ',
	  33: 'PageUp',
	  34: 'PageDown',
	  35: 'End',
	  36: 'Home',
	  37: 'ArrowLeft',
	  38: 'ArrowUp',
	  39: 'ArrowRight',
	  40: 'ArrowDown',
	  45: 'Insert',
	  46: 'Delete',
	  112: 'F1',
	  113: 'F2',
	  114: 'F3',
	  115: 'F4',
	  116: 'F5',
	  117: 'F6',
	  118: 'F7',
	  119: 'F8',
	  120: 'F9',
	  121: 'F10',
	  122: 'F11',
	  123: 'F12',
	  144: 'NumLock',
	  145: 'ScrollLock',
	  224: 'Meta'
	};

	/**
	 * @param {object} nativeEvent Native browser event.
	 * @return {string} Normalized `key` property.
	 */
	function getEventKey(nativeEvent) {
	  if (nativeEvent.key) {
	    // Normalize inconsistent values reported by browsers due to
	    // implementations of a working draft specification.

	    // FireFox implements `key` but returns `MozPrintableKey` for all
	    // printable characters (normalized to `Unidentified`), ignore it.
	    var key = normalizeKey[nativeEvent.key] || nativeEvent.key;
	    if (key !== 'Unidentified') {
	      return key;
	    }
	  }

	  // Browser does not implement `key`, polyfill as much of it as we can.
	  if (nativeEvent.type === 'keypress') {
	    var charCode = getEventCharCode(nativeEvent);

	    // The enter-key is technically both printable and non-printable and can
	    // thus be captured by `keypress`, no other non-printable key should.
	    return charCode === 13 ? 'Enter' : String.fromCharCode(charCode);
	  }
	  if (nativeEvent.type === 'keydown' || nativeEvent.type === 'keyup') {
	    // While user keyboard layout determines the actual meaning of each
	    // `keyCode` value, almost all function keys have a universal value.
	    return translateToKey[nativeEvent.keyCode] || 'Unidentified';
	  }
	  return '';
	}

	module.exports = getEventKey;

/***/ }),
/* 867 */
373,
/* 868 */
/***/ (function(module, exports) {

	/**
	 * Copyright (c) 2013-present, Facebook, Inc.
	 *
	 * This source code is licensed under the MIT license found in the
	 * LICENSE file in the root directory of this source tree.
	 *
	 */

	'use strict';

	/**
	 * Given any node return the first leaf node without children.
	 *
	 * @param {DOMElement|DOMTextNode} node
	 * @return {DOMElement|DOMTextNode}
	 */

	function getLeafNode(node) {
	  while (node && node.firstChild) {
	    node = node.firstChild;
	  }
	  return node;
	}

	/**
	 * Get the next sibling within a container. This will walk up the
	 * DOM if a node's siblings have been exhausted.
	 *
	 * @param {DOMElement|DOMTextNode} node
	 * @return {?DOMElement|DOMTextNode}
	 */
	function getSiblingNode(node) {
	  while (node) {
	    if (node.nextSibling) {
	      return node.nextSibling;
	    }
	    node = node.parentNode;
	  }
	}

	/**
	 * Get object describing the nodes which contain characters at offset.
	 *
	 * @param {DOMElement|DOMTextNode} root
	 * @param {number} offset
	 * @return {?object}
	 */
	function getNodeForCharacterOffset(root, offset) {
	  var node = getLeafNode(root);
	  var nodeStart = 0;
	  var nodeEnd = 0;

	  while (node) {
	    if (node.nodeType === 3) {
	      nodeEnd = nodeStart + node.textContent.length;

	      if (nodeStart <= offset && nodeEnd >= offset) {
	        return {
	          node: node,
	          offset: offset - nodeStart
	        };
	      }

	      nodeStart = nodeEnd;
	    }

	    node = getLeafNode(getSiblingNode(node));
	  }
	}

	module.exports = getNodeForCharacterOffset;

/***/ }),
/* 869 */
/***/ (function(module, exports, __webpack_require__) {

	/**
	 * Copyright (c) 2013-present, Facebook, Inc.
	 *
	 * This source code is licensed under the MIT license found in the
	 * LICENSE file in the root directory of this source tree.
	 *
	 */

	'use strict';

	var ExecutionEnvironment = __webpack_require__(24);

	/**
	 * Generate a mapping of standard vendor prefixes using the defined style property and event name.
	 *
	 * @param {string} styleProp
	 * @param {string} eventName
	 * @returns {object}
	 */
	function makePrefixMap(styleProp, eventName) {
	  var prefixes = {};

	  prefixes[styleProp.toLowerCase()] = eventName.toLowerCase();
	  prefixes['Webkit' + styleProp] = 'webkit' + eventName;
	  prefixes['Moz' + styleProp] = 'moz' + eventName;
	  prefixes['ms' + styleProp] = 'MS' + eventName;
	  prefixes['O' + styleProp] = 'o' + eventName.toLowerCase();

	  return prefixes;
	}

	/**
	 * A list of event names to a configurable list of vendor prefixes.
	 */
	var vendorPrefixes = {
	  animationend: makePrefixMap('Animation', 'AnimationEnd'),
	  animationiteration: makePrefixMap('Animation', 'AnimationIteration'),
	  animationstart: makePrefixMap('Animation', 'AnimationStart'),
	  transitionend: makePrefixMap('Transition', 'TransitionEnd')
	};

	/**
	 * Event names that have already been detected and prefixed (if applicable).
	 */
	var prefixedEventNames = {};

	/**
	 * Element to check for prefixes on.
	 */
	var style = {};

	/**
	 * Bootstrap if a DOM exists.
	 */
	if (ExecutionEnvironment.canUseDOM) {
	  style = document.createElement('div').style;

	  // On some platforms, in particular some releases of Android 4.x,
	  // the un-prefixed "animation" and "transition" properties are defined on the
	  // style object but the events that fire will still be prefixed, so we need
	  // to check if the un-prefixed events are usable, and if not remove them from the map.
	  if (!('AnimationEvent' in window)) {
	    delete vendorPrefixes.animationend.animation;
	    delete vendorPrefixes.animationiteration.animation;
	    delete vendorPrefixes.animationstart.animation;
	  }

	  // Same as above
	  if (!('TransitionEvent' in window)) {
	    delete vendorPrefixes.transitionend.transition;
	  }
	}

	/**
	 * Attempts to determine the correct vendor prefixed event name.
	 *
	 * @param {string} eventName
	 * @returns {string}
	 */
	function getVendorPrefixedEventName(eventName) {
	  if (prefixedEventNames[eventName]) {
	    return prefixedEventNames[eventName];
	  } else if (!vendorPrefixes[eventName]) {
	    return eventName;
	  }

	  var prefixMap = vendorPrefixes[eventName];

	  for (var styleProp in prefixMap) {
	    if (prefixMap.hasOwnProperty(styleProp) && styleProp in style) {
	      return prefixedEventNames[eventName] = prefixMap[styleProp];
	    }
	  }

	  return '';
	}

	module.exports = getVendorPrefixedEventName;

/***/ }),
/* 870 */
/***/ (function(module, exports, __webpack_require__) {

	/**
	 * Copyright (c) 2013-present, Facebook, Inc.
	 *
	 * This source code is licensed under the MIT license found in the
	 * LICENSE file in the root directory of this source tree.
	 *
	 */

	'use strict';

	var escapeTextContentForBrowser = __webpack_require__(148);

	/**
	 * Escapes attribute value to prevent scripting attacks.
	 *
	 * @param {*} value Value to escape.
	 * @return {string} An escaped string.
	 */
	function quoteAttributeValueForBrowser(value) {
	  return '"' + escapeTextContentForBrowser(value) + '"';
	}

	module.exports = quoteAttributeValueForBrowser;

/***/ }),
/* 871 */
/***/ (function(module, exports, __webpack_require__) {

	/**
	 * Copyright (c) 2013-present, Facebook, Inc.
	 *
	 * This source code is licensed under the MIT license found in the
	 * LICENSE file in the root directory of this source tree.
	 *
	 */

	'use strict';

	var ReactMount = __webpack_require__(348);

	module.exports = ReactMount.renderSubtreeIntoContainer;

/***/ }),
/* 872 */
/***/ (function(module, exports, __webpack_require__) {

	/** @license React v16.13.1
	 * react-is.development.js
	 *
	 * Copyright (c) Facebook, Inc. and its affiliates.
	 *
	 * This source code is licensed under the MIT license found in the
	 * LICENSE file in the root directory of this source tree.
	 */

	'use strict';



	if ((undefined) !== "production") {
	  (function() {
	'use strict';

	// The Symbol used to tag the ReactElement-like types. If there is no native Symbol
	// nor polyfill, then a plain number is used for performance.
	var hasSymbol = typeof Symbol === 'function' && Symbol.for;
	var REACT_ELEMENT_TYPE = hasSymbol ? Symbol.for('react.element') : 0xeac7;
	var REACT_PORTAL_TYPE = hasSymbol ? Symbol.for('react.portal') : 0xeaca;
	var REACT_FRAGMENT_TYPE = hasSymbol ? Symbol.for('react.fragment') : 0xeacb;
	var REACT_STRICT_MODE_TYPE = hasSymbol ? Symbol.for('react.strict_mode') : 0xeacc;
	var REACT_PROFILER_TYPE = hasSymbol ? Symbol.for('react.profiler') : 0xead2;
	var REACT_PROVIDER_TYPE = hasSymbol ? Symbol.for('react.provider') : 0xeacd;
	var REACT_CONTEXT_TYPE = hasSymbol ? Symbol.for('react.context') : 0xeace; // TODO: We don't use AsyncMode or ConcurrentMode anymore. They were temporary
	// (unstable) APIs that have been removed. Can we remove the symbols?

	var REACT_ASYNC_MODE_TYPE = hasSymbol ? Symbol.for('react.async_mode') : 0xeacf;
	var REACT_CONCURRENT_MODE_TYPE = hasSymbol ? Symbol.for('react.concurrent_mode') : 0xeacf;
	var REACT_FORWARD_REF_TYPE = hasSymbol ? Symbol.for('react.forward_ref') : 0xead0;
	var REACT_SUSPENSE_TYPE = hasSymbol ? Symbol.for('react.suspense') : 0xead1;
	var REACT_SUSPENSE_LIST_TYPE = hasSymbol ? Symbol.for('react.suspense_list') : 0xead8;
	var REACT_MEMO_TYPE = hasSymbol ? Symbol.for('react.memo') : 0xead3;
	var REACT_LAZY_TYPE = hasSymbol ? Symbol.for('react.lazy') : 0xead4;
	var REACT_BLOCK_TYPE = hasSymbol ? Symbol.for('react.block') : 0xead9;
	var REACT_FUNDAMENTAL_TYPE = hasSymbol ? Symbol.for('react.fundamental') : 0xead5;
	var REACT_RESPONDER_TYPE = hasSymbol ? Symbol.for('react.responder') : 0xead6;
	var REACT_SCOPE_TYPE = hasSymbol ? Symbol.for('react.scope') : 0xead7;

	function isValidElementType(type) {
	  return typeof type === 'string' || typeof type === 'function' || // Note: its typeof might be other than 'symbol' or 'number' if it's a polyfill.
	  type === REACT_FRAGMENT_TYPE || type === REACT_CONCURRENT_MODE_TYPE || type === REACT_PROFILER_TYPE || type === REACT_STRICT_MODE_TYPE || type === REACT_SUSPENSE_TYPE || type === REACT_SUSPENSE_LIST_TYPE || typeof type === 'object' && type !== null && (type.$$typeof === REACT_LAZY_TYPE || type.$$typeof === REACT_MEMO_TYPE || type.$$typeof === REACT_PROVIDER_TYPE || type.$$typeof === REACT_CONTEXT_TYPE || type.$$typeof === REACT_FORWARD_REF_TYPE || type.$$typeof === REACT_FUNDAMENTAL_TYPE || type.$$typeof === REACT_RESPONDER_TYPE || type.$$typeof === REACT_SCOPE_TYPE || type.$$typeof === REACT_BLOCK_TYPE);
	}

	function typeOf(object) {
	  if (typeof object === 'object' && object !== null) {
	    var $$typeof = object.$$typeof;

	    switch ($$typeof) {
	      case REACT_ELEMENT_TYPE:
	        var type = object.type;

	        switch (type) {
	          case REACT_ASYNC_MODE_TYPE:
	          case REACT_CONCURRENT_MODE_TYPE:
	          case REACT_FRAGMENT_TYPE:
	          case REACT_PROFILER_TYPE:
	          case REACT_STRICT_MODE_TYPE:
	          case REACT_SUSPENSE_TYPE:
	            return type;

	          default:
	            var $$typeofType = type && type.$$typeof;

	            switch ($$typeofType) {
	              case REACT_CONTEXT_TYPE:
	              case REACT_FORWARD_REF_TYPE:
	              case REACT_LAZY_TYPE:
	              case REACT_MEMO_TYPE:
	              case REACT_PROVIDER_TYPE:
	                return $$typeofType;

	              default:
	                return $$typeof;
	            }

	        }

	      case REACT_PORTAL_TYPE:
	        return $$typeof;
	    }
	  }

	  return undefined;
	} // AsyncMode is deprecated along with isAsyncMode

	var AsyncMode = REACT_ASYNC_MODE_TYPE;
	var ConcurrentMode = REACT_CONCURRENT_MODE_TYPE;
	var ContextConsumer = REACT_CONTEXT_TYPE;
	var ContextProvider = REACT_PROVIDER_TYPE;
	var Element = REACT_ELEMENT_TYPE;
	var ForwardRef = REACT_FORWARD_REF_TYPE;
	var Fragment = REACT_FRAGMENT_TYPE;
	var Lazy = REACT_LAZY_TYPE;
	var Memo = REACT_MEMO_TYPE;
	var Portal = REACT_PORTAL_TYPE;
	var Profiler = REACT_PROFILER_TYPE;
	var StrictMode = REACT_STRICT_MODE_TYPE;
	var Suspense = REACT_SUSPENSE_TYPE;
	var hasWarnedAboutDeprecatedIsAsyncMode = false; // AsyncMode should be deprecated

	function isAsyncMode(object) {
	  {
	    if (!hasWarnedAboutDeprecatedIsAsyncMode) {
	      hasWarnedAboutDeprecatedIsAsyncMode = true; // Using console['warn'] to evade Babel and ESLint

	      console['warn']('The ReactIs.isAsyncMode() alias has been deprecated, ' + 'and will be removed in React 17+. Update your code to use ' + 'ReactIs.isConcurrentMode() instead. It has the exact same API.');
	    }
	  }

	  return isConcurrentMode(object) || typeOf(object) === REACT_ASYNC_MODE_TYPE;
	}
	function isConcurrentMode(object) {
	  return typeOf(object) === REACT_CONCURRENT_MODE_TYPE;
	}
	function isContextConsumer(object) {
	  return typeOf(object) === REACT_CONTEXT_TYPE;
	}
	function isContextProvider(object) {
	  return typeOf(object) === REACT_PROVIDER_TYPE;
	}
	function isElement(object) {
	  return typeof object === 'object' && object !== null && object.$$typeof === REACT_ELEMENT_TYPE;
	}
	function isForwardRef(object) {
	  return typeOf(object) === REACT_FORWARD_REF_TYPE;
	}
	function isFragment(object) {
	  return typeOf(object) === REACT_FRAGMENT_TYPE;
	}
	function isLazy(object) {
	  return typeOf(object) === REACT_LAZY_TYPE;
	}
	function isMemo(object) {
	  return typeOf(object) === REACT_MEMO_TYPE;
	}
	function isPortal(object) {
	  return typeOf(object) === REACT_PORTAL_TYPE;
	}
	function isProfiler(object) {
	  return typeOf(object) === REACT_PROFILER_TYPE;
	}
	function isStrictMode(object) {
	  return typeOf(object) === REACT_STRICT_MODE_TYPE;
	}
	function isSuspense(object) {
	  return typeOf(object) === REACT_SUSPENSE_TYPE;
	}

	exports.AsyncMode = AsyncMode;
	exports.ConcurrentMode = ConcurrentMode;
	exports.ContextConsumer = ContextConsumer;
	exports.ContextProvider = ContextProvider;
	exports.Element = Element;
	exports.ForwardRef = ForwardRef;
	exports.Fragment = Fragment;
	exports.Lazy = Lazy;
	exports.Memo = Memo;
	exports.Portal = Portal;
	exports.Profiler = Profiler;
	exports.StrictMode = StrictMode;
	exports.Suspense = Suspense;
	exports.isAsyncMode = isAsyncMode;
	exports.isConcurrentMode = isConcurrentMode;
	exports.isContextConsumer = isContextConsumer;
	exports.isContextProvider = isContextProvider;
	exports.isElement = isElement;
	exports.isForwardRef = isForwardRef;
	exports.isFragment = isFragment;
	exports.isLazy = isLazy;
	exports.isMemo = isMemo;
	exports.isPortal = isPortal;
	exports.isProfiler = isProfiler;
	exports.isStrictMode = isStrictMode;
	exports.isSuspense = isSuspense;
	exports.isValidElementType = isValidElementType;
	exports.typeOf = typeOf;
	  })();
	}


/***/ }),
/* 873 */
/***/ (function(module, exports) {

	/** @license React v16.13.1
	 * react-is.production.min.js
	 *
	 * Copyright (c) Facebook, Inc. and its affiliates.
	 *
	 * This source code is licensed under the MIT license found in the
	 * LICENSE file in the root directory of this source tree.
	 */

	'use strict';var b="function"===typeof Symbol&&Symbol.for,c=b?Symbol.for("react.element"):60103,d=b?Symbol.for("react.portal"):60106,e=b?Symbol.for("react.fragment"):60107,f=b?Symbol.for("react.strict_mode"):60108,g=b?Symbol.for("react.profiler"):60114,h=b?Symbol.for("react.provider"):60109,k=b?Symbol.for("react.context"):60110,l=b?Symbol.for("react.async_mode"):60111,m=b?Symbol.for("react.concurrent_mode"):60111,n=b?Symbol.for("react.forward_ref"):60112,p=b?Symbol.for("react.suspense"):60113,q=b?
	Symbol.for("react.suspense_list"):60120,r=b?Symbol.for("react.memo"):60115,t=b?Symbol.for("react.lazy"):60116,v=b?Symbol.for("react.block"):60121,w=b?Symbol.for("react.fundamental"):60117,x=b?Symbol.for("react.responder"):60118,y=b?Symbol.for("react.scope"):60119;
	function z(a){if("object"===typeof a&&null!==a){var u=a.$$typeof;switch(u){case c:switch(a=a.type,a){case l:case m:case e:case g:case f:case p:return a;default:switch(a=a&&a.$$typeof,a){case k:case n:case t:case r:case h:return a;default:return u}}case d:return u}}}function A(a){return z(a)===m}exports.AsyncMode=l;exports.ConcurrentMode=m;exports.ContextConsumer=k;exports.ContextProvider=h;exports.Element=c;exports.ForwardRef=n;exports.Fragment=e;exports.Lazy=t;exports.Memo=r;exports.Portal=d;
	exports.Profiler=g;exports.StrictMode=f;exports.Suspense=p;exports.isAsyncMode=function(a){return A(a)||z(a)===l};exports.isConcurrentMode=A;exports.isContextConsumer=function(a){return z(a)===k};exports.isContextProvider=function(a){return z(a)===h};exports.isElement=function(a){return"object"===typeof a&&null!==a&&a.$$typeof===c};exports.isForwardRef=function(a){return z(a)===n};exports.isFragment=function(a){return z(a)===e};exports.isLazy=function(a){return z(a)===t};
	exports.isMemo=function(a){return z(a)===r};exports.isPortal=function(a){return z(a)===d};exports.isProfiler=function(a){return z(a)===g};exports.isStrictMode=function(a){return z(a)===f};exports.isSuspense=function(a){return z(a)===p};
	exports.isValidElementType=function(a){return"string"===typeof a||"function"===typeof a||a===e||a===m||a===g||a===f||a===p||a===q||"object"===typeof a&&null!==a&&(a.$$typeof===t||a.$$typeof===r||a.$$typeof===h||a.$$typeof===k||a.$$typeof===n||a.$$typeof===w||a.$$typeof===x||a.$$typeof===y||a.$$typeof===v)};exports.typeOf=z;


/***/ }),
/* 874 */
/***/ (function(module, exports) {

	'use strict';

	function NoVideoInputDevicesError() {
	  this.name = 'NoVideoInputDevicesError';
	  this.message = 'No video input devices found';
	}
	NoVideoInputDevicesError.prototype = new Error();

	module.exports = {
	  NoVideoInputDevicesError: NoVideoInputDevicesError
	};

/***/ }),
/* 875 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';

	var _require = __webpack_require__(874),
	    NoVideoInputDevicesError = _require.NoVideoInputDevicesError;

	function defaultDeviceIdChooser(filteredDevices, videoDevices, facingMode) {
	  if (filteredDevices.length > 0) {
	    return filteredDevices[0].deviceId;
	  }
	  if (videoDevices.length == 0 || facingMode == 'front') {
	    return videoDevices[0].deviceId;
	  }
	  return videoDevices[1].deviceId;
	}

	module.exports = function getDeviceId(facingMode) {
	  var chooseDeviceId = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : defaultDeviceIdChooser;

	  // Get manual deviceId from available devices.
	  return new Promise(function (resolve, reject) {
	    var enumerateDevices = void 0;
	    try {
	      enumerateDevices = navigator.mediaDevices.enumerateDevices();
	    } catch (err) {
	      reject(new NoVideoInputDevicesError());
	    }
	    enumerateDevices.then(function (devices) {
	      // Filter out non-videoinputs
	      var videoDevices = devices.filter(function (device) {
	        return device.kind == 'videoinput';
	      });

	      if (videoDevices.length < 1) {
	        reject(new NoVideoInputDevicesError());
	        return;
	      } else if (videoDevices.length == 1) {
	        // Only 1 video device available thus stop here
	        resolve(devices[0].deviceId);
	        return;
	      }

	      var pattern = facingMode == 'rear' ? /rear|back|environment/ig : /front|user|face/ig;

	      // Filter out video devices without the pattern
	      var filteredDevices = videoDevices.filter(function (_ref) {
	        var label = _ref.label;
	        return pattern.test(label);
	      });

	      resolve(chooseDeviceId(filteredDevices, videoDevices, facingMode));
	    });
	  });
	};

/***/ }),
/* 876 */
/***/ (function(module, exports) {

	"use strict";

	module.exports = function havePropsChanged(prevProps, nextProps, keys) {
	  var changedProps = [];
	  keys.forEach(function (key) {
	    if (prevProps[key] != nextProps[key]) {
	      changedProps.push(key);
	    }
	  });
	  return changedProps;
	};

/***/ }),
/* 877 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';

	var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

	var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

	var _class, _temp;

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

	function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

	function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

	var React = __webpack_require__(4);
	var Component = React.Component;

	var PropTypes = __webpack_require__(212);
	var getDeviceId = __webpack_require__(875);
	var havePropsChanged = __webpack_require__(876

	// Require adapter to support older browser implementations
	);__webpack_require__(879

	// Inline worker.js as a string value of workerBlob.
	);var workerBlob = new Blob(["!function(e,n){\"object\"==typeof exports&&\"object\"==typeof module?module.exports=n():\"function\"==typeof define&&define.amd?define([],n):\"object\"==typeof exports?exports.jsQR=n():e.jsQR=n()}(this,function(){return function(e){function n(r){if(t[r])return t[r].exports;var i=t[r]={exports:{},id:r,loaded:!1};return e[r].call(i.exports,i,i.exports,n),i.loaded=!0,i.exports}var t={};return n.m=e,n.c=t,n.p=\"\",n(0)}([function(e,n,t){\"use strict\";function r(e){return i(l.decode(e))}function i(e){var n=\"\";if(null!=e&&void 0!=e)for(var t=0;t<e.length;t++)n+=String.fromCharCode(e[t]);return n}function a(e,n){for(var t=new Uint8Array(e.length),r=0;r<e.length;r++)t[r]=e[r]?1:0;return new h.BitMatrix(t,n)}function o(e,n,t){return i(f(e,n,t))}function f(e,n,t){var r=c(e,n,t),i=w.locate(r);if(!i)return null;var a=s.extract(r,i);return a?l.decode(a):null}var u=t(1),w=t(3),s=t(4),l=t(9),h=t(2),c=u.binarize;n.binarizeImage=c;var v=w.locate;n.locateQRInBinaryImage=v;var d=s.extract;n.extractQRFromBinaryImage=d,n.decodeQR=r,n.createBitMatrix=a,n.decodeQRFromImage=o,n.decodeQRFromImageAsByteArray=f},function(e,n,t){\"use strict\";function r(e,n,t,r,i){for(var a=new Array(t),o=0;o<t;o++)a[o]=new Uint8ClampedArray(n);for(var w=0;w<t;w++){var l=w<<f,h=i-u;l>h&&(l=h);for(var c=0;c<n;c++){var v=c<<f,d=r-u;v>d&&(v=d);for(var g=0,p=255,y=0,m=0,b=l*r+v;m<u;m++,b+=r){for(var M=0;M<u;M++){var B=255&e[b+M];g+=B,B<p&&(p=B),B>y&&(y=B)}if(y-p>s)for(m++,b+=r;m<u;m++,b+=r)for(var M=0;M<u;M++)g+=255&e[b+M]}var x=g>>2*f;if(y-p<=s&&(x=p>>1,w>0&&c>0)){var C=a[w-1][c]+2*a[w][c-1]+a[w-1][c-1]>>2;p<C&&(x=C)}a[w][c]=x}}return a}function i(e,n,t,r,i,a){function w(e,n,t){return e<n?n:e>t?t:e}for(var s=o.BitMatrix.createEmpty(r,i),l=0;l<t;l++){var h=l<<f,c=i-u;h>c&&(h=c);for(var v=0;v<n;v++){var d=v<<f,g=r-u;d>g&&(d=g);for(var p=w(v,2,n-3),y=w(l,2,t-3),m=0,b=-2;b<=2;b++){var M=a[y+b];m+=M[p-2],m+=M[p-1],m+=M[p],m+=M[p+1],m+=M[p+2]}var B=m/25;!function(e,n,t,r,i){for(var a=t*i+n,o=0;o<u;o++,a+=i)for(var f=0;f<u;f++){var w=255&e[a+f];s.set(n+f,t+o,w<=r)}}(e,d,h,B,r)}}return s}function a(e,n,t){if(e.length!==n*t*4)throw new Error(\"Binarizer data.length != width * height * 4\");for(var a=new Uint8ClampedArray(n*t),o=0;o<n;o++)for(var u=0;u<t;u++){var s=4*(u*n+o),l=e[s],h=e[s+1],c=e[s+2],v=.2126*l+.7152*h+.0722*c;a[u*n+o]=v}var d=n>>f;0!=(n&w)&&d++;var g=t>>f;return 0!=(t&w)&&g++,i(a,d,g,n,t,r(a,d,g,n,t))}var o=t(2),f=3,u=1<<f,w=u-1,s=24;n.binarize=a},function(e,n){\"use strict\";var t=function(){function e(e,n){this.width=n,this.height=e.length/n,this.data=e}return e.createEmpty=function(n,t){return new e(new Uint8Array(n*t),n)},e.prototype.get=function(e,n){return!!this.data[n*this.width+e]},e.prototype.set=function(e,n,t){this.data[n*this.width+e]=t?1:0},e.prototype.copyBit=function(e,n,t){return this.get(e,n)?t<<1|1:t<<1},e.prototype.setRegion=function(e,n,t,r){for(var i=e+t,a=n+r,o=n;o<a;o++)for(var f=e;f<i;f++)this.set(f,o,!0)},e.prototype.mirror=function(){for(var e=0;e<this.width;e++)for(var n=e+1;n<this.height;n++)this.get(e,n)!=this.get(n,e)&&(this.set(e,n,!this.get(e,n)),this.set(n,e,!this.get(n,e)))},e}();n.BitMatrix=t},function(e,n){\"use strict\";function t(e){for(var n=0,t=0;t<5;t++){var r=e[t];if(0===r)return!1;n+=r}if(n<7)return!1;var i=(n<<l)/7,a=i/2;return Math.abs(i-(e[0]<<l))<a&&Math.abs(i-(e[1]<<l))<a&&Math.abs(3*i-(e[2]<<l))<3*a&&Math.abs(i-(e[3]<<l))<a&&Math.abs(i-(e[4]<<l))<a}function r(e,n){var t=n-e[4]-e[3]-e[2]/2;return t!==t?null:t}function i(e,n){var t=e.x-n.x,r=e.y-n.y;return Math.sqrt(t*t+r*r)}function a(e,n,t){var r=n.x,i=n.y;return(t.x-r)*(e.y-i)-(t.y-i)*(e.x-r)}function o(e){var n,t,r,o=i(e[0],e[1]),f=i(e[1],e[2]),u=i(e[0],e[2]);if(f>=o&&f>=u?(t=e[0],n=e[1],r=e[2]):u>=f&&u>=o?(t=e[1],n=e[0],r=e[2]):(t=e[2],n=e[0],r=e[1]),a(n,t,r)<0){var w=n;n=r,r=w}return{bottomLeft:{x:n.x,y:n.y},topLeft:{x:t.x,y:t.y},topRight:{x:r.x,y:r.y}}}function f(e){function n(n,t){return n=Math.floor(n),t=Math.floor(t),e.get(n,t)}function i(r,i,a,o){for(var f=e.height,u=e.width,w=[0,0,0,0,0],s=0;r-s>=0&&n(i-s,r-s);)w[2]++,s++;if(r-s<0||i-s<0)return!1;for(;r-s>=0&&i-s>=0&&!n(i-s,r-s)&&w[1]<=a;)w[1]++,s++;if(r-s<0||i-s<0||w[1]>a)return!1;for(;r-s>=0&&i-s>=0&&n(i-s,r-s)&&w[0]<=a;)w[0]++,s++;if(w[0]>a)return!1;for(s=1;r+s<f&&i+s<u&&n(i+s,r+s);)w[2]++,s++;if(r+s>=f||i+s>=u)return!1;for(;r+s<f&&i+s<u&&!n(i+s,r+s)&&w[3]<a;)w[3]++,s++;if(r+s>=f||i+s>=u||w[3]>=a)return!1;for(;r+s<f&&i+s<u&&n(i+s,r+s)&&w[4]<a;)w[4]++,s++;if(w[4]>=a)return!1;var l=w[0]+w[1]+w[2]+w[3]+w[4];return Math.abs(l-o)<2*o&&t(w)}function a(i,a,o,f){for(var u=e.height,w=[0,0,0,0,0],s=i;s>=0&&n(a,s);)w[2]++,s--;if(s<0)return null;for(;s>=0&&!n(a,s)&&w[1]<=o;)w[1]++,s--;if(s<0||w[1]>o)return null;for(;s>=0&&n(a,s)&&w[0]<=o;)w[0]++,s--;if(w[0]>o)return null;for(s=i+1;s<u&&n(a,s);)w[2]++,s++;if(s==u)return null;for(;s<u&&!n(a,s)&&w[3]<o;)w[3]++,s++;if(s==u||w[3]>=o)return null;for(;s<u&&n(a,s)&&w[4]<o;)w[4]++,s++;if(w[4]>=o)return null;var l=w[0]+w[1]+w[2]+w[3]+w[4];return 5*Math.abs(l-f)>=2*f?null:t(w)?r(w,s):null}function f(){var e=0,n=0,t=v.length;if(v.forEach(function(t){t.count>=u&&(e++,n+=t.estimatedModuleSize)}),e<3)return!1;for(var r=n/t,i=0,a=0;a<t;a++){var o=v[a];i+=Math.abs(o.estimatedModuleSize-r)}return i<=.05*n}function l(i,a,o,f){for(var u=e.width,w=[0,0,0,0,0],s=i;s>=0&&n(s,a);)w[2]++,s--;if(s<0)return null;for(;s>=0&&!n(s,a)&&w[1]<=o;)w[1]++,s--;if(s<0||w[1]>o)return null;for(;s>=0&&n(s,a)&&w[0]<=o;)w[0]++,s--;if(w[0]>o)return null;for(s=i+1;s<u&&n(s,a);)w[2]++,s++;if(s==u)return null;for(;s<u&&!n(s,a)&&w[3]<o;)w[3]++,s++;if(s==u||w[3]>=o)return null;for(;s<u&&n(s,a)&&w[4]<o;)w[4]++,s++;if(w[4]>=o)return null;var l=w[0]+w[1]+w[2]+w[3]+w[4];return 5*Math.abs(l-f)>=f?null:t(w)?r(w,s):null}function c(e,n,t,o){var f=e[0]+e[1]+e[2]+e[3]+e[4],u=r(e,t);if(null==u)return!1;var w=a(n,Math.floor(u),e[2],f);if(null!=w&&null!=(u=l(Math.floor(u),Math.floor(w),e[2],f))&&(!o||i(Math.floor(w),Math.floor(u),e[2],f))){for(var s=f/7,c=!1,d=0;d<v.length;d++){var g=v[d];if(g.aboutEquals(s,w,u)){v.splice(d,1,g.combineEstimate(w,u,s)),c=!0;break}}if(!c){var p=new h(u,w,s);v.push(p)}return!0}return!1}var v=[],d=!1,g=e.height,p=e.width,y=Math.floor(3*g/(4*s));y<w&&(y=w);for(var m=!1,b=[0,0,0,0,0],M=y-1;M<g&&!m;M+=y){b=[0,0,0,0,0];for(var B=0,x=0;x<p;x++)if(n(x,M))1==(1&B)&&B++,b[B]++;else if(0==(1&B))if(4===B)if(t(b)){var C=c(b,M,x,!1);if(!C){b=[b[2],b[3],b[4],1,0],B=3;continue}if(y=2,d)m=f();else{var z=function(){if(v.length<=1)return 0;var e=null;return v.forEach(function(n){if(n.count>=u){if(null!=e)return d=!0,Math.floor(Math.abs(e.x-n.x)-Math.abs(e.y-n.y))/2;e=n}}),0}();z>b[2]&&(M+=z-b[2]-y,x=p-1)}b=[0,0,0,0,0],B=0}else b=[b[2],b[3],b[4],1,0],B=3;else b[++B]++;else b[B]++;if(t(b)){var C=c(b,M,p,!1);C&&(y=b[0],d&&(m=f()))}}var E=function(){var e=v.length;if(e<3)return null;if(e>3){var n=0,t=0;v.forEach(function(e){var r=e.estimatedModuleSize;n+=r,t+=r*r});var r=n/e,i=Math.sqrt(t/e-r*r);v.sort(function(e,n){var t=Math.abs(n.estimatedModuleSize-r),i=Math.abs(e.estimatedModuleSize-r);return t<i?-1:t==i?0:1});for(var a=Math.max(.2*r,i),o=0;o<v.length&&v.length>3;o++){var f=v[o];Math.abs(f.estimatedModuleSize-r)>a&&(v.splice(o,1),o--)}}if(v.length>3){var n=0;v.forEach(function(e){n+=e.estimatedModuleSize});var r=n/v.length;v.sort(function(e,n){if(n.count===e.count){var t=Math.abs(n.estimatedModuleSize-r),i=Math.abs(e.estimatedModuleSize-r);return t<i?1:t==i?0:-1}return n.count-e.count}),v=v.slice(0,3)}return[v[0],v[1],v[2]]}();return E?o(E):null}var u=2,w=3,s=57,l=8,h=function(){function e(e,n,t,r){this.x=e,this.y=n,this.estimatedModuleSize=t,this.count=null==r?1:r}return e.prototype.aboutEquals=function(e,n,t){if(Math.abs(n-this.y)<=e&&Math.abs(t-this.x)<=e){var r=Math.abs(e-this.estimatedModuleSize);return r<=1||r<=this.estimatedModuleSize}return!1},e.prototype.combineEstimate=function(n,t,r){var i=this.count+1;return new e((this.count*this.x+t)/i,(this.count*this.y+n)/i,(this.count*this.estimatedModuleSize+r)/i,i)},e}();n.locate=f},function(e,n,t){\"use strict\";function r(e,n,t){for(var r=!0,i=0;i<t.length&&r;i+=2){var a=Math.floor(t[i]),o=Math.floor(t[i+1]);if(a<-1||a>e||o<-1||o>n)throw new Error;r=!1,-1==a?(t[i]=0,r=!0):a==e&&(t[i]=e-1,r=!0),-1==o?(t[i+1]=0,r=!0):o==n&&(t[i+1]=n-1,r=!0)}r=!0;for(var i=t.length-2;i>=0&&r;i-=2){var a=Math.floor(t[i]),o=Math.floor(t[i+1]);if(a<-1||a>e||o<-1||o>n)throw new Error;r=!1,-1==a?(t[i]=0,r=!0):a==e&&(t[i]=e-1,r=!0),-1==o?(t[i+1]=0,r=!0):o==n&&(t[i+1]=n-1,r=!0)}return t}function i(e,n,t){if(n<=0)return null;for(var i=y.BitMatrix.createEmpty(n,n),a=new Float32Array(n<<1),o=0;o<n;o++){for(var f=a.length,u=o+.5,w=0;w<f;w+=2)a[w]=.5+(w>>1),a[w+1]=u;a=g.transformPoints(t,a);try{var s=r(e.width,e.height,a)}catch(e){return null}for(var w=0;w<f;w+=2)i.set(w>>1,o,e.get(Math.floor(s[w]),Math.floor(s[w+1])))}return i}function a(e,n,t,r,i){var a,o,f,u,w=i-3.5;return null!=r?(a=r.x,o=r.y,f=u=w-3):(a=n.x-e.x+t.x,o=n.y-e.y+t.y,f=u=w),g.quadrilateralToQuadrilateral(3.5,3.5,w,3.5,f,u,3.5,w,e.x,e.y,n.x,n.y,a,o,t.x,t.y)}function o(e,n,t,r){return Math.sqrt((t-e)*(t-e)+(r-n)*(r-n))}function f(e,n,t,r,i){n=Math.floor(n),t=Math.floor(t);var a=Math.floor(r*e),o=Math.max(0,n-a),f=Math.min(i.width,n+a);if(f-o<3*e)return null;var u=Math.max(0,t-a),w=Math.min(i.height-1,t+a);return d.findAlignment(o,u,f-o,w-u,e,i)}function u(e,n,t,r){var i=Math.round(o(e.x,e.y,n.x,n.y)/r),a=Math.round(o(e.x,e.y,t.x,t.y)/r),f=7+(i+a>>1);switch(3&f){case 0:f++;break;case 2:f--}return f}function w(e){if(e%4!=1)return null;var n=e-17>>2;return n<1||n>40?null:p.getVersionForNumber(n)}function s(e,n,t,r,i){e=Math.floor(e),n=Math.floor(n),t=Math.floor(t),r=Math.floor(r);var a=Math.abs(r-n)>Math.abs(t-e);if(a){var f=e;e=n,n=f,f=t,t=r,r=f}for(var u=Math.abs(t-e),w=Math.abs(r-n),s=-u>>1,l=e<t?1:-1,h=n<r?1:-1,c=0,v=t+l,d=e,g=n;d!=v;d+=l){var p=a?g:d,y=a?d:g;if(1==c===i.get(p,y)){if(2==c)return o(d,g,e,n);c++}if((s+=w)>0){if(g==r)break;g+=h,s-=u}}return 2==c?o(t+l,r,e,n):NaN}function l(e,n,t,r,i){var a=s(e,n,t,r,i),o=1,f=e-(t-e);f<0?(o=e/(e-f),f=0):f>=i.width&&(o=(i.width-1-e)/(f-e),f=i.width-1);var u=n-(r-n)*o;return o=1,u<0?(o=n/(n-u),u=0):u>=i.height&&(o=(i.height-1-n)/(u-n),u=i.height-1),f=e+(f-e)*o,(a+=s(e,n,f,u,i))-1}function h(e,n,t){var r=l(e.x,e.y,n.x,n.y,t),i=l(n.x,n.y,e.x,e.y,t);return m.isNaN(r)?i/7:m.isNaN(i)?r/7:(r+i)/14}function c(e,n,t,r){return(h(e,n,r)+h(e,t,r))/2}function v(e,n){var t=c(n.topLeft,n.topRight,n.bottomLeft,e);if(t<1)return null;var r=u(n.topLeft,n.topRight,n.bottomLeft,t);if(!r)return null;var o=w(r);if(null==o)return null;var s=o.getDimensionForVersion()-7,l=null;if(o.alignmentPatternCenters.length>0)for(var h=n.topRight.x-n.topLeft.x+n.bottomLeft.x,v=n.topRight.y-n.topLeft.y+n.bottomLeft.y,d=1-3/s,g=n.topLeft.x+d*(h-n.topLeft.x),p=n.topLeft.y+d*(v-n.topLeft.y),y=4;y<=16&&!(l=f(t,g,p,y,e));y<<=1);return i(e,r,a(n.topLeft,n.topRight,n.bottomLeft,l,r))}var d=t(5),g=t(7),p=t(8),y=t(2),m=t(6);n.extract=v},function(e,n,t){\"use strict\";function r(e,n,t,r){if(Math.abs(t-e.y)<=n&&Math.abs(r-e.x)<=n){var i=Math.abs(n-e.estimatedModuleSize);return i<=1||i<=e.estimatedModuleSize}return!1}function i(e,n,t,r){return{x:(e.x+t)/2,y:(e.y+n)/2,estimatedModuleSize:(e.estimatedModuleSize+r)/2}}function a(e,n){for(var t=n/2,r=0;r<3;r++)if(Math.abs(n-e[r])>=t)return!1;return!0}function o(e,n){var t=n-e[2]-e[1]/2;return w.isNaN(t)?null:t}function f(e,n,t,r,i,f){for(var u=f.height,w=[0,0,0],s=e;s>=0&&f.get(n,s)&&w[1]<=t;)w[1]++,s--;if(s<0||w[1]>t)return null;for(;s>=0&&!f.get(n,s)&&w[0]<=t;)w[0]++,s--;if(w[0]>t)return null;for(s=e+1;s<u&&f.get(n,s)&&w[1]<=t;)w[1]++,s++;if(s==u||w[1]>t)return null;for(;s<u&&!f.get(n,s)&&w[2]<=t;)w[2]++,s++;if(w[2]>t)return null;var l=w[0]+w[1]+w[2];return 5*Math.abs(l-r)>=2*r?null:a(w,i)?o(w,s):null}function u(e,n,t,u,w,s){function l(e,n,t,a){var u=e[0]+e[1]+e[2],w=o(e,t);if(null==w)return null;var l=f(n,Math.floor(w),2*e[1],u,a,s);if(null!=l){var c=(e[0]+e[1]+e[2])/3;for(var v in h){var d=h[v];if(r(d,c,l,w))return i(d,l,w,c)}var g={x:w,y:l,estimatedModuleSize:c};h.push(g)}return null}for(var h=[],c=e+t,v=n+(u>>1),d=[0,0,0],g=0;g<u;g++){var p=v+(0==(1&g)?g+1>>1:-(g+1>>1));d[0]=0,d[1]=0,d[2]=0;for(var y=e;y<c&&!s.get(y,p);)y++;for(var m=0;y<c;){if(s.get(y,p))if(1==m)d[m]++;else if(2==m){if(a(d,w)&&null!=(b=l(d,p,y,w)))return b;d[0]=d[2],d[1]=1,d[2]=0,m=1}else d[++m]++;else 1==m&&m++,d[m]++;y++}if(a(d,w)){var b=l(d,p,w,c);if(null!=b)return b}}return 0!=h.length?h[0]:null}var w=t(6);n.findAlignment=u},function(e,n){\"use strict\";function t(e,n){return e^=n,i[15&e]+i[e>>4&15]+i[e>>8&15]+i[e>>12&15]+i[e>>16&15]+i[e>>20&15]+i[e>>24&15]+i[e>>28&15]}function r(e){return\"[object Number]\"===Object.prototype.toString.call(e)&&e!==+e}var i=[0,1,1,2,1,2,2,3,1,2,2,3,2,3,3,4];n.numBitsDiffering=t,n.isNaN=r},function(e,n){\"use strict\";function t(e,n,t,r,i,a,o,f){var u=e-t+i-o,w=n-r+a-f;if(0==u&&0==w)return{a11:t-e,a21:i-t,a31:e,a12:r-n,a22:a-r,a32:n,a13:0,a23:0,a33:1};var s=t-i,l=o-i,h=r-a,c=f-a,v=s*c-l*h,d=(u*c-l*w)/v,g=(s*w-u*h)/v;return{a11:t-e+d*t,a21:o-e+g*o,a31:e,a12:r-n+d*r,a22:f-n+g*f,a32:n,a13:d,a23:g,a33:1}}function r(e){return{a11:e.a22*e.a33-e.a23*e.a32,a21:e.a23*e.a31-e.a21*e.a33,a31:e.a21*e.a32-e.a22*e.a31,a12:e.a13*e.a32-e.a12*e.a33,a22:e.a11*e.a33-e.a13*e.a31,a32:e.a12*e.a31-e.a11*e.a32,a13:e.a12*e.a23-e.a13*e.a22,a23:e.a13*e.a21-e.a11*e.a23,a33:e.a11*e.a22-e.a12*e.a21}}function i(e,n){return{a11:e.a11*n.a11+e.a21*n.a12+e.a31*n.a13,a21:e.a11*n.a21+e.a21*n.a22+e.a31*n.a23,a31:e.a11*n.a31+e.a21*n.a32+e.a31*n.a33,a12:e.a12*n.a11+e.a22*n.a12+e.a32*n.a13,a22:e.a12*n.a21+e.a22*n.a22+e.a32*n.a23,a32:e.a12*n.a31+e.a22*n.a32+e.a32*n.a33,a13:e.a13*n.a11+e.a23*n.a12+e.a33*n.a13,a23:e.a13*n.a21+e.a23*n.a22+e.a33*n.a23,a33:e.a13*n.a31+e.a23*n.a32+e.a33*n.a33}}function a(e,n,i,a,o,f,u,w){return r(t(e,n,i,a,o,f,u,w))}function o(e,n){for(var t=n.length,r=e.a11,i=e.a12,a=e.a13,o=e.a21,f=e.a22,u=e.a23,w=e.a31,s=e.a32,l=e.a33,h=0;h<t;h+=2){var c=n[h],v=n[h+1],d=a*c+u*v+l;n[h]=(r*c+o*v+w)/d,n[h+1]=(i*c+f*v+s)/d}return n}function f(e,n,r,o,f,u,w,s,l,h,c,v,d,g,p,y){var m=a(e,n,r,o,f,u,w,s);return i(t(l,h,c,v,d,g,p,y),m)}n.transformPoints=o,n.quadrilateralToQuadrilateral=f},function(e,n,t){\"use strict\";function r(e){if(e<1||e>40)throw new Error(\"Invalid version number \"+e);return w[e-1]}var i=t(6),a=[31892,34236,39577,42195,48118,51042,55367,58893,63784,68472,70749,76311,79154,84390,87683,92361,96236,102084,102881,110507,110734,117786,119615,126325,127568,133589,136944,141498,145311,150283,152622,158308,161089,167017],o=function(){function e(e,n){this.count=e,this.dataCodewords=n}return e}(),f=function(){function e(e){for(var n=[],t=1;t<arguments.length;t++)n[t-1]=arguments[t];this.ecCodewordsPerBlock=e,this.ecBlocks=n}return e.prototype.getNumBlocks=function(){return this.ecBlocks.reduce(function(e,n){return e+n.count},0)},e.prototype.getTotalECCodewords=function(){return this.ecCodewordsPerBlock*this.getNumBlocks()},e}(),u=function(){function e(e,n){for(var t=[],r=2;r<arguments.length;r++)t[r-2]=arguments[r];this.versionNumber=e,this.alignmentPatternCenters=n,this.ecBlocks=t;var i=0,a=this.ecBlocks[0].ecCodewordsPerBlock;this.ecBlocks[0].ecBlocks.forEach(function(e){i+=e.count*(e.dataCodewords+a)}),this.totalCodewords=i}return e.prototype.getDimensionForVersion=function(){return 17+4*this.versionNumber},e.prototype.getECBlocksForLevel=function(e){return this.ecBlocks[e.ordinal]},e.decodeVersionInformation=function(e){for(var n=1/0,t=0,o=0;o<a.length;o++){var f=a[o];if(f==e)return r(o+7);var u=i.numBitsDiffering(e,f);u<n&&(t=o+7,n=u)}return n<=3?r(t):null},e}();n.Version=u;var w=[new u(1,[],new f(7,new o(1,19)),new f(10,new o(1,16)),new f(13,new o(1,13)),new f(17,new o(1,9))),new u(2,[6,18],new f(10,new o(1,34)),new f(16,new o(1,28)),new f(22,new o(1,22)),new f(28,new o(1,16))),new u(3,[6,22],new f(15,new o(1,55)),new f(26,new o(1,44)),new f(18,new o(2,17)),new f(22,new o(2,13))),new u(4,[6,26],new f(20,new o(1,80)),new f(18,new o(2,32)),new f(26,new o(2,24)),new f(16,new o(4,9))),new u(5,[6,30],new f(26,new o(1,108)),new f(24,new o(2,43)),new f(18,new o(2,15),new o(2,16)),new f(22,new o(2,11),new o(2,12))),new u(6,[6,34],new f(18,new o(2,68)),new f(16,new o(4,27)),new f(24,new o(4,19)),new f(28,new o(4,15))),new u(7,[6,22,38],new f(20,new o(2,78)),new f(18,new o(4,31)),new f(18,new o(2,14),new o(4,15)),new f(26,new o(4,13),new o(1,14))),new u(8,[6,24,42],new f(24,new o(2,97)),new f(22,new o(2,38),new o(2,39)),new f(22,new o(4,18),new o(2,19)),new f(26,new o(4,14),new o(2,15))),new u(9,[6,26,46],new f(30,new o(2,116)),new f(22,new o(3,36),new o(2,37)),new f(20,new o(4,16),new o(4,17)),new f(24,new o(4,12),new o(4,13))),new u(10,[6,28,50],new f(18,new o(2,68),new o(2,69)),new f(26,new o(4,43),new o(1,44)),new f(24,new o(6,19),new o(2,20)),new f(28,new o(6,15),new o(2,16))),new u(11,[6,30,54],new f(20,new o(4,81)),new f(30,new o(1,50),new o(4,51)),new f(28,new o(4,22),new o(4,23)),new f(24,new o(3,12),new o(8,13))),new u(12,[6,32,58],new f(24,new o(2,92),new o(2,93)),new f(22,new o(6,36),new o(2,37)),new f(26,new o(4,20),new o(6,21)),new f(28,new o(7,14),new o(4,15))),new u(13,[6,34,62],new f(26,new o(4,107)),new f(22,new o(8,37),new o(1,38)),new f(24,new o(8,20),new o(4,21)),new f(22,new o(12,11),new o(4,12))),new u(14,[6,26,46,66],new f(30,new o(3,115),new o(1,116)),new f(24,new o(4,40),new o(5,41)),new f(20,new o(11,16),new o(5,17)),new f(24,new o(11,12),new o(5,13))),new u(15,[6,26,48,70],new f(22,new o(5,87),new o(1,88)),new f(24,new o(5,41),new o(5,42)),new f(30,new o(5,24),new o(7,25)),new f(24,new o(11,12),new o(7,13))),new u(16,[6,26,50,74],new f(24,new o(5,98),new o(1,99)),new f(28,new o(7,45),new o(3,46)),new f(24,new o(15,19),new o(2,20)),new f(30,new o(3,15),new o(13,16))),new u(17,[6,30,54,78],new f(28,new o(1,107),new o(5,108)),new f(28,new o(10,46),new o(1,47)),new f(28,new o(1,22),new o(15,23)),new f(28,new o(2,14),new o(17,15))),new u(18,[6,30,56,82],new f(30,new o(5,120),new o(1,121)),new f(26,new o(9,43),new o(4,44)),new f(28,new o(17,22),new o(1,23)),new f(28,new o(2,14),new o(19,15))),new u(19,[6,30,58,86],new f(28,new o(3,113),new o(4,114)),new f(26,new o(3,44),new o(11,45)),new f(26,new o(17,21),new o(4,22)),new f(26,new o(9,13),new o(16,14))),new u(20,[6,34,62,90],new f(28,new o(3,107),new o(5,108)),new f(26,new o(3,41),new o(13,42)),new f(30,new o(15,24),new o(5,25)),new f(28,new o(15,15),new o(10,16))),new u(21,[6,28,50,72,94],new f(28,new o(4,116),new o(4,117)),new f(26,new o(17,42)),new f(28,new o(17,22),new o(6,23)),new f(30,new o(19,16),new o(6,17))),new u(22,[6,26,50,74,98],new f(28,new o(2,111),new o(7,112)),new f(28,new o(17,46)),new f(30,new o(7,24),new o(16,25)),new f(24,new o(34,13))),new u(23,[6,30,54,74,102],new f(30,new o(4,121),new o(5,122)),new f(28,new o(4,47),new o(14,48)),new f(30,new o(11,24),new o(14,25)),new f(30,new o(16,15),new o(14,16))),new u(24,[6,28,54,80,106],new f(30,new o(6,117),new o(4,118)),new f(28,new o(6,45),new o(14,46)),new f(30,new o(11,24),new o(16,25)),new f(30,new o(30,16),new o(2,17))),new u(25,[6,32,58,84,110],new f(26,new o(8,106),new o(4,107)),new f(28,new o(8,47),new o(13,48)),new f(30,new o(7,24),new o(22,25)),new f(30,new o(22,15),new o(13,16))),new u(26,[6,30,58,86,114],new f(28,new o(10,114),new o(2,115)),new f(28,new o(19,46),new o(4,47)),new f(28,new o(28,22),new o(6,23)),new f(30,new o(33,16),new o(4,17))),new u(27,[6,34,62,90,118],new f(30,new o(8,122),new o(4,123)),new f(28,new o(22,45),new o(3,46)),new f(30,new o(8,23),new o(26,24)),new f(30,new o(12,15),new o(28,16))),new u(28,[6,26,50,74,98,122],new f(30,new o(3,117),new o(10,118)),new f(28,new o(3,45),new o(23,46)),new f(30,new o(4,24),new o(31,25)),new f(30,new o(11,15),new o(31,16))),new u(29,[6,30,54,78,102,126],new f(30,new o(7,116),new o(7,117)),new f(28,new o(21,45),new o(7,46)),new f(30,new o(1,23),new o(37,24)),new f(30,new o(19,15),new o(26,16))),new u(30,[6,26,52,78,104,130],new f(30,new o(5,115),new o(10,116)),new f(28,new o(19,47),new o(10,48)),new f(30,new o(15,24),new o(25,25)),new f(30,new o(23,15),new o(25,16))),new u(31,[6,30,56,82,108,134],new f(30,new o(13,115),new o(3,116)),new f(28,new o(2,46),new o(29,47)),new f(30,new o(42,24),new o(1,25)),new f(30,new o(23,15),new o(28,16))),new u(32,[6,34,60,86,112,138],new f(30,new o(17,115)),new f(28,new o(10,46),new o(23,47)),new f(30,new o(10,24),new o(35,25)),new f(30,new o(19,15),new o(35,16))),new u(33,[6,30,58,86,114,142],new f(30,new o(17,115),new o(1,116)),new f(28,new o(14,46),new o(21,47)),new f(30,new o(29,24),new o(19,25)),new f(30,new o(11,15),new o(46,16))),new u(34,[6,34,62,90,118,146],new f(30,new o(13,115),new o(6,116)),new f(28,new o(14,46),new o(23,47)),new f(30,new o(44,24),new o(7,25)),new f(30,new o(59,16),new o(1,17))),new u(35,[6,30,54,78,102,126,150],new f(30,new o(12,121),new o(7,122)),new f(28,new o(12,47),new o(26,48)),new f(30,new o(39,24),new o(14,25)),new f(30,new o(22,15),new o(41,16))),new u(36,[6,24,50,76,102,128,154],new f(30,new o(6,121),new o(14,122)),new f(28,new o(6,47),new o(34,48)),new f(30,new o(46,24),new o(10,25)),new f(30,new o(2,15),new o(64,16))),new u(37,[6,28,54,80,106,132,158],new f(30,new o(17,122),new o(4,123)),new f(28,new o(29,46),new o(14,47)),new f(30,new o(49,24),new o(10,25)),new f(30,new o(24,15),new o(46,16))),new u(38,[6,32,58,84,110,136,162],new f(30,new o(4,122),new o(18,123)),new f(28,new o(13,46),new o(32,47)),new f(30,new o(48,24),new o(14,25)),new f(30,new o(42,15),new o(32,16))),new u(39,[6,26,54,82,110,138,166],new f(30,new o(20,117),new o(4,118)),new f(28,new o(40,47),new o(7,48)),new f(30,new o(43,24),new o(22,25)),new f(30,new o(10,15),new o(67,16))),new u(40,[6,30,58,86,114,142,170],new f(30,new o(19,118),new o(6,119)),new f(28,new o(18,47),new o(31,48)),new f(30,new o(34,24),new o(34,25)),new f(30,new o(20,15),new o(61,16)))];n.getVersionForNumber=r},function(e,n,t){\"use strict\";function r(e){var n=e.getDimensionForVersion(),t=new Uint8Array(n*n),r=new v.BitMatrix(t,n);r.setRegion(0,0,9,9),r.setRegion(n-8,0,8,9),r.setRegion(0,n-8,9,8);for(var i=e.alignmentPatternCenters.length,a=0;a<i;a++)for(var o=e.alignmentPatternCenters[a]-2,f=0;f<i;f++)0==a&&(0==f||f==i-1)||a==i-1&&0==f||r.setRegion(e.alignmentPatternCenters[f]-2,o,5,5);return r.setRegion(6,9,1,n-17),r.setRegion(9,6,n-17,1),e.versionNumber>6&&(r.setRegion(n-11,0,3,6),r.setRegion(0,n-11,6,3)),r}function i(e,n,t){for(var i=M[t.dataMask],a=e.height,o=r(n),f=!0,u=[],w=0,s=0,l=0,h=a-1;h>0;h-=2){6==h&&h--;for(var c=0;c<a;c++)for(var v=f?a-1-c:c,d=0;d<2;d++)o.get(h-d,v)||(l++,s<<=1,e.get(h-d,v)!==i(v,h-d)&&(s|=1),8==l&&(u[w++]=255&s,l=0,s=0));f=!f}return w!=n.totalCodewords?null:u}function a(e){var n=e.height,t=n-17>>2;if(t<=6)return y.getVersionForNumber(t);for(var r=0,i=n-11,a=5;a>=0;a--)for(var o=n-9;o>=i;o--)r=e.copyBit(o,a,r);var f=y.Version.decodeVersionInformation(r);if(null!=f&&f.getDimensionForVersion()==n)return f;r=0;for(var o=5;o>=0;o--)for(var a=n-9;a>=i;a--)r=e.copyBit(o,a,r);return f=y.Version.decodeVersionInformation(r),null!=f&&f.getDimensionForVersion()==n?f:null}function o(e){return{errorCorrectionLevel:B[e>>3&3],dataMask:7&e}}function f(e,n){for(var t=1/0,r=0,i=0;i<b.length;i++){var a=b[i],f=a[0];if(f==e||f==n)return o(a[1]);var u=g.numBitsDiffering(e,f);u<t&&(r=a[1],t=u),e!=n&&(u=g.numBitsDiffering(n,f))<t&&(r=a[1],t=u)}return t<=3?o(r):null}function u(e,n){var t=f(e,n);return t||f(e^m,n^m)}function w(e){for(var n=0,t=0;t<6;t++)n=e.copyBit(t,8,n);n=e.copyBit(7,8,n),n=e.copyBit(8,8,n),n=e.copyBit(8,7,n);for(var r=5;r>=0;r--)n=e.copyBit(8,r,n);for(var i=e.height,a=0,o=i-7,r=i-1;r>=o;r--)a=e.copyBit(8,r,a);for(var t=i-8;t<i;t++)a=e.copyBit(t,8,a);var f=u(n,a);return null!=f?f:null}function s(e,n,t){if(e.length!=n.totalCodewords)throw new Error(\"Invalid number of codewords for version; got \"+e.length+\" expected \"+n.totalCodewords);var r=n.getECBlocksForLevel(t),i=0,a=r.ecBlocks;a.forEach(function(e){i+=e.count});var o=new Array(i),f=0;a.forEach(function(e){for(var n=0;n<e.count;n++){var t=e.dataCodewords,i=r.ecCodewordsPerBlock+t;o[f++]={numDataCodewords:t,codewords:new Array(i)}}});for(var u=o[0].codewords.length,w=o.length-1;w>=0;){if(o[w].codewords.length==u)break;w--}w++;for(var s=u-r.ecCodewordsPerBlock,l=0,h=0;h<s;h++)for(var c=0;c<f;c++)o[c].codewords[h]=e[l++];for(var c=w;c<f;c++)o[c].codewords[s]=e[l++];for(var v=o[0].codewords.length,h=s;h<v;h++)for(var c=0;c<f;c++){var d=c<w?h:h+1;o[c].codewords[d]=e[l++]}return o}function l(e,n){for(var t=new p.ReedSolomonDecoder,r=e.length,i=new Array(r),a=0;a<r;a++)i[a]=255&e[a];var o=e.length-n;if(!t.decode(i,o))return!1;for(var a=0;a<n;a++)e[a]=i[a];return!0}function h(e){var n=a(e);if(!n)return null;var t=w(e);if(!t)return null;var r=t.errorCorrectionLevel,o=i(e,n,t);if(!o)return null;var f=s(o,n,r),u=0;f.forEach(function(e){u+=e.numDataCodewords});for(var h=new Uint8ClampedArray(u),c=0,v=0,g=f;v<g.length;v++){var p=g[v],y=p.codewords,m=p.numDataCodewords;if(!l(y,m))return null;for(var b=0;b<m;b++)h[c++]=y[b]}return d.decodeQRdata(h,n.versionNumber,r.name)}function c(e){if(null==e)return null;var n=h(e);return n||(e.mirror(),h(e))}var v=t(2),d=t(10),g=t(6),p=t(12),y=t(8),m=21522,b=[[21522,0],[20773,1],[24188,2],[23371,3],[17913,4],[16590,5],[20375,6],[19104,7],[30660,8],[29427,9],[32170,10],[30877,11],[26159,12],[25368,13],[27713,14],[26998,15],[5769,16],[5054,17],[7399,18],[6608,19],[1890,20],[597,21],[3340,22],[2107,23],[13663,24],[12392,25],[16177,26],[14854,27],[9396,28],[8579,29],[11994,30],[11245,31]],M=[function(e,n){return 0==(e+n&1)},function(e,n){return 0==(1&e)},function(e,n){return n%3==0},function(e,n){return(e+n)%3==0},function(e,n){return 0==((e>>1)+n/3&1)},function(e,n){return(e*n&1)+e*n%3==0},function(e,n){return 0==((e*n&1)+e*n%3&1)},function(e,n){return 0==((e+n&1)+e*n%3&1)}],B=[{ordinal:1,bits:0,name:\"M\"},{ordinal:0,bits:1,name:\"L\"},{ordinal:3,bits:2,name:\"H\"},{ordinal:2,bits:3,name:\"Q\"}];n.decode=c},function(e,n,t){\"use strict\";function r(e){var n=[\"0\",\"1\",\"2\",\"3\",\"4\",\"5\",\"6\",\"7\",\"8\",\"9\",\"A\",\"B\",\"C\",\"D\",\"E\",\"F\",\"G\",\"H\",\"I\",\"J\",\"K\",\"L\",\"M\",\"N\",\"O\",\"P\",\"Q\",\"R\",\"S\",\"T\",\"U\",\"V\",\"W\",\"X\",\"Y\",\"Z\",\" \",\"$\",\"%\",\"*\",\"+\",\"-\",\".\",\"/\",\":\"];if(e>=n.length)throw new Error(\"Could not decode alphanumeric char\");return n[e].charCodeAt(0)}function i(e){switch(e){case 0:return c;case 1:return v;case 2:return d;case 3:return g;case 4:return p;case 5:return b;case 7:return y;case 8:return m;case 9:return M;case 13:return B;default:throw new Error(\"Couldn't decode mode from byte array\")}}function a(e){var n=e.readBits(8);if(0==(128&n))return 127&n;if(128==(192&n)){return(63&n)<<8|e.readBits(8)}if(192==(224&n)){return(31&n)<<16|e.readBits(16)}throw new Error(\"Bad ECI bits starting with byte \"+n)}function o(e,n,t){if(13*t>e.available())return!1;for(var r=new Array(2*t),i=0;t>0;){var a=e.readBits(13),o=Math.floor(a/96)<<8|a%96;o+=o<959?41377:42657,r[i]=o>>8&255,r[i+1]=255&o,i+=2,t--}return n.val=r,!0}function f(e,n,t){for(;t>=3;){if(e.available()<10)return!1;var i=e.readBits(10);if(i>=1e3)return!1;n.val.push(r(Math.floor(i/100))),n.val.push(r(Math.floor(i/10)%10)),n.val.push(r(i%10)),t-=3}if(2==t){if(e.available()<7)return!1;var a=e.readBits(7);if(a>=100)return!1;n.val.push(r(Math.floor(a/10))),n.val.push(r(a%10))}else if(1==t){if(e.available()<4)return!1;var o=e.readBits(4);if(o>=10)return!1;n.val.push(r(o))}return!0}function u(e,n,t,i){for(var a=n.val.length;t>1;){if(e.available()<11)return!1;var o=e.readBits(11);n.val.push(r(Math.floor(o/45))),n.val.push(r(o%45)),t-=2}if(1==t){if(e.available()<6)return!1;n.val.push(r(e.readBits(6)))}if(i)for(var f=a;f<n.val.length;f++)n.val[f]==\"%\".charCodeAt(0)&&(f<n.val.length-1&&n.val[f+1]==\"%\".charCodeAt(0)?n.val=n.val.slice(0,f+1).concat(n.val.slice(f+2)):n.val[f]=29);return!0}function w(e,n,t){if(t<<3>e.available())return!1;for(var r=new Uint32Array(t),i=0;i<t;i++)r[i]=e.readBits(8);return Array.prototype.push.apply(n.val,r),!0}function s(e,n,t){for(var r,s=new l.BitStream(e),h={val:[]},C=!1;r!=c;)if((r=s.available()<4?c:i(s.readBits(4)))!=c)if(r==b||r==M)C=!0;else if(r==g){if(s.available()<16)return null;s.readBits(8),s.readBits(8)}else if(r==y){var z=a(s);if(z<0||z>30)return null}else if(r==B){var E=s.readBits(4),A=s.readBits(r.getCharacterCountBits(n));if(E==x&&!o(s,h,A))return null}else{var S=s.readBits(r.getCharacterCountBits(n));if(r==v){if(!f(s,h,S))return null}else if(r==d){if(!u(s,h,S,C))return null}else if(r==p){if(!w(s,h,S))return null}else if(r!=m)return null}return h.val}var l=t(11),h=function(){function e(e,n){this.characterCountBitsForVersions=e,this.bits=n}return e.prototype.getCharacterCountBits=function(e){if(null==this.characterCountBitsForVersions)throw new Error(\"Character count doesn't apply to this mode\");var n;return n=e<=9?0:e<=26?1:2,this.characterCountBitsForVersions[n]},e}(),c=new h([0,0,0],0),v=new h([10,12,14],1),d=new h([9,11,13],2),g=new h([0,0,0],3),p=new h([8,16,16],4),y=new h(null,7),m=new h([8,10,12],8),b=new h(null,5),M=new h(null,9),B=new h([8,10,12],13),x=1;n.decodeQRdata=s},function(e,n){\"use strict\";var t=function(){function e(e){this.byteOffset=0,this.bitOffset=0,this.bytes=e}return e.prototype.readBits=function(e){if(e<1||e>32||e>this.available())throw new Error(\"Cannot read \"+e.toString()+\" bits\");var n=0;if(this.bitOffset>0){var t=8-this.bitOffset,r=e<t?e:t,i=t-r,a=255>>8-r<<i;n=(this.bytes[this.byteOffset]&a)>>i,e-=r,this.bitOffset+=r,8==this.bitOffset&&(this.bitOffset=0,this.byteOffset++)}if(e>0){for(;e>=8;)n=n<<8|255&this.bytes[this.byteOffset],this.byteOffset++,e-=8;if(e>0){var i=8-e,a=255>>i<<i;n=n<<e|(this.bytes[this.byteOffset]&a)>>i,this.bitOffset+=e}}return n},e.prototype.available=function(){return 8*(this.bytes.length-this.byteOffset)-this.bitOffset},e}();n.BitStream=t},function(e,n){\"use strict\";var t=function(){function e(){this.field=new i(285,256,0)}return e.prototype.decode=function(e,n){for(var t=new r(this.field,e),a=new Array(n),o=!0,f=0;f<n;f++){var u=t.evaluateAt(this.field.exp(f+this.field.generatorBase));a[a.length-1-f]=u,0!=u&&(o=!1)}if(o)return!0;var w=new r(this.field,a),s=this.runEuclideanAlgorithm(this.field.buildMonomial(n,1),w,n);if(null==s)return!1;var l=s[0],h=this.findErrorLocations(l);if(null==h)return!1;for(var c=s[1],v=this.findErrorMagnitudes(c,h),f=0;f<h.length;f++){var d=e.length-1-this.field.log(h[f]);if(d<0)return!1;e[d]=i.addOrSubtract(e[d],v[f])}return!0},e.prototype.runEuclideanAlgorithm=function(e,n,t){if(e.degree()<n.degree()){var r=e;e=n,n=r}for(var i=e,a=n,o=this.field.zero,f=this.field.one;a.degree()>=t/2;){var u=i,w=o;if(i=a,o=f,i.isZero())return null;a=u;for(var s=this.field.zero,l=i.getCoefficient(i.degree()),h=this.field.inverse(l);a.degree()>=i.degree()&&!a.isZero();){var c=a.degree()-i.degree(),v=this.field.multiply(a.getCoefficient(a.degree()),h);s=s.addOrSubtract(this.field.buildMonomial(c,v)),a=a.addOrSubtract(i.multiplyByMonomial(c,v))}if(f=s.multiplyPoly(o).addOrSubtract(w),a.degree()>=i.degree())return null}var d=f.getCoefficient(0);if(0==d)return null;var g=this.field.inverse(d);return[f.multiply(g),a.multiply(g)]},e.prototype.findErrorLocations=function(e){var n=e.degree();if(1==n)return[e.getCoefficient(1)];for(var t=new Array(n),r=0,i=1;i<this.field.size&&r<n;i++)0==e.evaluateAt(i)&&(t[r]=this.field.inverse(i),r++);return r!=n?null:t},e.prototype.findErrorMagnitudes=function(e,n){for(var t=n.length,r=new Array(t),i=0;i<t;i++){for(var a=this.field.inverse(n[i]),o=1,f=0;f<t;f++)if(i!=f){var u=this.field.multiply(n[f],a),w=0==(1&u)?1|u:-2&u;o=this.field.multiply(o,w)}r[i]=this.field.multiply(e.evaluateAt(a),this.field.inverse(o)),0!=this.field.generatorBase&&(r[i]=this.field.multiply(r[i],a))}return r},e}();n.ReedSolomonDecoder=t;var r=function(){function e(e,n){if(0==n.length)throw new Error(\"No coefficients.\");this.field=e;var t=n.length;if(t>1&&0==n[0]){for(var r=1;r<t&&0==n[r];)r++;if(r==t)this.coefficients=e.zero.coefficients;else{this.coefficients=new Array(t-r);for(var i=0;i<this.coefficients.length;i++)this.coefficients[i]=n[r+i]}\n}else this.coefficients=n}return e.prototype.evaluateAt=function(e){var n=0;if(0==e)return this.getCoefficient(0);var t=this.coefficients.length;if(1==e)return this.coefficients.forEach(function(e){n=i.addOrSubtract(n,e)}),n;n=this.coefficients[0];for(var r=1;r<t;r++)n=i.addOrSubtract(this.field.multiply(e,n),this.coefficients[r]);return n},e.prototype.getCoefficient=function(e){return this.coefficients[this.coefficients.length-1-e]},e.prototype.degree=function(){return this.coefficients.length-1},e.prototype.isZero=function(){return 0==this.coefficients[0]},e.prototype.addOrSubtract=function(n){if(this.isZero())return n;if(n.isZero())return this;var t=this.coefficients,r=n.coefficients;if(t.length>r.length){var a=t;t=r,r=a}for(var o=new Array(r.length),f=r.length-t.length,u=0;u<f;u++)o[u]=r[u];for(var u=f;u<r.length;u++)o[u]=i.addOrSubtract(t[u-f],r[u]);return new e(this.field,o)},e.prototype.multiply=function(n){if(0==n)return this.field.zero;if(1==n)return this;for(var t=this.coefficients.length,r=new Array(t),i=0;i<t;i++)r[i]=this.field.multiply(this.coefficients[i],n);return new e(this.field,r)},e.prototype.multiplyPoly=function(n){if(this.isZero()||n.isZero())return this.field.zero;for(var t=this.coefficients,r=t.length,a=n.coefficients,o=a.length,f=new Array(r+o-1),u=0;u<r;u++)for(var w=t[u],s=0;s<o;s++)f[u+s]=i.addOrSubtract(f[u+s],this.field.multiply(w,a[s]));return new e(this.field,f)},e.prototype.multiplyByMonomial=function(n,t){if(n<0)throw new Error(\"Invalid degree less than 0\");if(0==t)return this.field.zero;for(var r=this.coefficients.length,i=new Array(r+n),a=0;a<r;a++)i[a]=this.field.multiply(this.coefficients[a],t);return new e(this.field,i)},e}(),i=function(){function e(e,n,t){this.INITIALIZATION_THRESHOLD=0,this.initialized=!1,this.primitive=e,this.size=n,this.generatorBase=t,n<=this.INITIALIZATION_THRESHOLD&&this.initialize()}return e.prototype.initialize=function(){this.expTable=new Array(this.size),this.logTable=new Array(this.size);for(var e=1,n=0;n<this.size;n++)this.expTable[n]=e,(e<<=1)>=this.size&&(e^=this.primitive,e&=this.size-1);for(var n=0;n<this.size-1;n++)this.logTable[this.expTable[n]]=n;this.zero=new r(this,[0]),this.one=new r(this,[1]),this.initialized=!0},e.addOrSubtract=function(e,n){return e^n},e.prototype.checkInit=function(){this.initialized||this.initialize()},e.prototype.multiply=function(e,n){return this.checkInit(),0==e||0==n?0:this.expTable[(this.logTable[e]+this.logTable[n])%(this.size-1)]},e.prototype.exp=function(e){return this.checkInit(),this.expTable[e]},e.prototype.log=function(e){if(this.checkInit(),0==e)throw new Error(\"Can't take log(0)\");return this.logTable[e]},e.prototype.inverse=function(e){if(this.checkInit(),0==e)throw new Error(\"Can't invert 0\");return this.expTable[this.size-this.logTable[e]-1]},e.prototype.buildMonomial=function(e,n){if(this.checkInit(),e<0)throw new Error(\"Invalid monomial degree less than 0\");if(0==n)return this.zero;var t=new Array(e+1);return t[0]=n,new r(this,t)},e}()}])}),self.addEventListener(\"message\",function(e){var n=jsQR.decodeQRFromImage(e.data.data,e.data.width,e.data.height);postMessage(n)});"], {
	  type: 'application/javascript'
	});

	// Props that are allowed to change dynamicly
	var propsKeys = ['delay', 'legacyMode', 'facingMode'];

	module.exports = (_temp = _class = function (_Component) {
	  _inherits(Reader, _Component);

	  function Reader(props) {
	    _classCallCheck(this, Reader);

	    // Bind function to the class
	    var _this = _possibleConstructorReturn(this, (Reader.__proto__ || Object.getPrototypeOf(Reader)).call(this, props));

	    _this.els = {};
	    _this.initiate = _this.initiate.bind(_this);
	    _this.initiateLegacyMode = _this.initiateLegacyMode.bind(_this);
	    _this.check = _this.check.bind(_this);
	    _this.handleVideo = _this.handleVideo.bind(_this);
	    _this.handleLoadStart = _this.handleLoadStart.bind(_this);
	    _this.handleInputChange = _this.handleInputChange.bind(_this);
	    _this.clearComponent = _this.clearComponent.bind(_this);
	    _this.handleReaderLoad = _this.handleReaderLoad.bind(_this);
	    _this.openImageDialog = _this.openImageDialog.bind(_this);
	    _this.handleWorkerMessage = _this.handleWorkerMessage.bind(_this);
	    _this.setRefFactory = _this.setRefFactory.bind(_this);
	    return _this;
	  }

	  _createClass(Reader, [{
	    key: 'componentDidMount',
	    value: function componentDidMount() {
	      // Initiate web worker execute handler according to mode.
	      this.worker = new Worker(URL.createObjectURL(workerBlob));
	      this.worker.onmessage = this.handleWorkerMessage;

	      if (!this.props.legacyMode) {
	        this.initiate();
	      } else {
	        this.initiateLegacyMode();
	      }
	    }
	  }, {
	    key: 'componentWillReceiveProps',
	    value: function componentWillReceiveProps(nextProps) {
	      // React according to change in props
	      var changedProps = havePropsChanged(this.props, nextProps, propsKeys);

	      var _iteratorNormalCompletion = true;
	      var _didIteratorError = false;
	      var _iteratorError = undefined;

	      try {
	        for (var _iterator = changedProps[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {
	          var prop = _step.value;

	          if (prop == 'facingMode') {
	            this.clearComponent();
	            this.initiate(nextProps);
	            break;
	          } else if (prop == 'delay') {
	            if (this.props.delay == false && !nextProps.legacyMode) {
	              this.timeout = setTimeout(this.check, nextProps.delay);
	            }
	            if (nextProps.delay == false) {
	              clearTimeout(this.timeout);
	            }
	          } else if (prop == 'legacyMode') {
	            if (this.props.legacyMode && !nextProps.legacyMode) {
	              this.clearComponent();
	              this.initiate(nextProps);
	            } else {
	              this.clearComponent();
	              this.componentDidUpdate = this.initiateLegacyMode;
	            }
	            break;
	          }
	        }
	      } catch (err) {
	        _didIteratorError = true;
	        _iteratorError = err;
	      } finally {
	        try {
	          if (!_iteratorNormalCompletion && _iterator.return) {
	            _iterator.return();
	          }
	        } finally {
	          if (_didIteratorError) {
	            throw _iteratorError;
	          }
	        }
	      }
	    }
	  }, {
	    key: 'shouldComponentUpdate',
	    value: function shouldComponentUpdate(nextProps) {
	      // Only render when the `propsKeys` have changed.
	      var changedProps = havePropsChanged(this.props, nextProps, propsKeys);
	      return changedProps.length > 0;
	    }
	  }, {
	    key: 'componentWillUnmount',
	    value: function componentWillUnmount() {
	      // Stop web-worker and clear the component
	      if (this.worker) {
	        this.worker.terminate();
	        this.worker = undefined;
	      }
	      this.clearComponent();
	    }
	  }, {
	    key: 'clearComponent',
	    value: function clearComponent() {
	      // Remove all event listeners and variables
	      if (this.timeout) {
	        clearTimeout(this.timeout);
	        this.timeout = undefined;
	      }
	      if (this.stopCamera) {
	        this.stopCamera();
	      }
	      if (this.reader) {
	        this.reader.removeEventListener('load', this.handleReaderLoad);
	      }
	      if (this.els.img) {
	        this.els.img.removeEventListener('load', this.check);
	      }
	    }
	  }, {
	    key: 'initiate',
	    value: function initiate() {
	      var props = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : this.props;
	      var onError = props.onError,
	          facingMode = props.facingMode,
	          chooseDeviceId = props.chooseDeviceId;


	      getDeviceId(facingMode, chooseDeviceId).then(function (deviceId) {
	        return navigator.mediaDevices.getUserMedia({
	          video: {
	            deviceId: deviceId,
	            width: { min: 360, ideal: 1280, max: 1920 },
	            height: { min: 240, ideal: 720, max: 1080 }
	          }
	        });
	      }).then(this.handleVideo).catch(onError);
	    }
	  }, {
	    key: 'handleVideo',
	    value: function handleVideo(stream) {
	      var preview = this.els.preview;

	      // Handle different browser implementations of MediaStreams as src

	      if (preview.srcObject !== undefined) {
	        preview.srcObject = stream;
	      } else if (preview.mozSrcObject !== undefined) {
	        preview.mozSrcObject = stream;
	      } else if (window.URL.createObjectURL) {
	        preview.src = window.URL.createObjectURL(stream);
	      } else if (window.webkitURL) {
	        preview.src = window.webkitURL.createObjectURL(stream);
	      } else {
	        preview.src = stream;
	      }

	      // IOS play in fullscreen
	      preview.playsInline = true;

	      var streamTrack = stream.getTracks()[0];
	      // Assign `stopCamera` so the track can be stopped once component is cleared
	      this.stopCamera = streamTrack.stop.bind(streamTrack);

	      preview.addEventListener('loadstart', this.handleLoadStart);
	    }
	  }, {
	    key: 'handleLoadStart',
	    value: function handleLoadStart() {
	      var _props = this.props,
	          delay = _props.delay,
	          onLoad = _props.onLoad;

	      var preview = this.els.preview;
	      preview.play();

	      if (typeof onLoad == 'function') {
	        onLoad();
	      }

	      if (typeof delay == 'number') {
	        this.timeout = setTimeout(this.check, delay);
	      }

	      // Some browsers call loadstart continuously
	      preview.removeEventListener('loadstart', this.handleLoadStart);
	    }
	  }, {
	    key: 'check',
	    value: function check() {
	      var _props2 = this.props,
	          legacyMode = _props2.legacyMode,
	          maxImageSize = _props2.maxImageSize,
	          delay = _props2.delay;
	      var _els = this.els,
	          preview = _els.preview,
	          canvas = _els.canvas,
	          img = _els.img;

	      // Get image/video dimensions

	      var width = Math.floor(legacyMode ? img.naturalWidth : preview.videoWidth);
	      var height = Math.floor(legacyMode ? img.naturalHeight : preview.videoHeight);

	      if (legacyMode) {
	        // Downscale image to `maxImageSize`
	        var greatestSize = width > height ? width : height;
	        if (greatestSize > maxImageSize) {
	          var ratio = maxImageSize / greatestSize;
	          height = ratio * height;
	          width = ratio * width;
	        }
	      }

	      canvas.width = width;
	      canvas.height = height;

	      var previewIsPlaying = preview && preview.readyState === preview.HAVE_ENOUGH_DATA;

	      if (legacyMode || previewIsPlaying) {
	        var ctx = canvas.getContext('2d');
	        ctx.drawImage(legacyMode ? img : preview, 0, 0, width, height);

	        var imageData = ctx.getImageData(0, 0, width, height
	        // Send data to web-worker
	        );this.worker.postMessage(imageData);
	      } else {
	        // Preview not ready -> check later
	        this.timeout = setTimeout(this.check, delay);
	      }
	    }
	  }, {
	    key: 'handleWorkerMessage',
	    value: function handleWorkerMessage(e) {
	      var _props3 = this.props,
	          onScan = _props3.onScan,
	          legacyMode = _props3.legacyMode,
	          delay = _props3.delay;

	      var decoded = e.data;

	      onScan(decoded || null);

	      if (!legacyMode && typeof delay == 'number' && this.worker) {
	        this.timeout = setTimeout(this.check, delay);
	      }
	    }
	  }, {
	    key: 'initiateLegacyMode',
	    value: function initiateLegacyMode() {
	      this.reader = new FileReader();
	      this.reader.addEventListener('load', this.handleReaderLoad);
	      this.els.img.addEventListener('load', this.check, false

	      // Reset componentDidUpdate
	      );this.componentDidUpdate = undefined;

	      if (typeof this.props.onLoad == 'function') {
	        this.props.onLoad();
	      }
	    }
	  }, {
	    key: 'handleInputChange',
	    value: function handleInputChange(e) {
	      var selectedImg = e.target.files[0];
	      this.reader.readAsDataURL(selectedImg);
	    }
	  }, {
	    key: 'handleReaderLoad',
	    value: function handleReaderLoad(e) {
	      // Set selected image blob as img source
	      this.els.img.src = e.target.result;
	    }
	  }, {
	    key: 'openImageDialog',
	    value: function openImageDialog() {
	      // Function to be executed by parent in user action context to trigger img file uploader
	      this.els.input.click();
	    }
	  }, {
	    key: 'setRefFactory',
	    value: function setRefFactory(key) {
	      var _this2 = this;

	      return function (element) {
	        _this2.els[key] = element;
	      };
	    }
	  }, {
	    key: 'render',
	    value: function render() {
	      var _props4 = this.props,
	          style = _props4.style,
	          className = _props4.className,
	          onImageLoad = _props4.onImageLoad,
	          legacyMode = _props4.legacyMode;


	      var hiddenStyle = { display: 'none' };
	      var previewStyle = _extends({
	        display: 'block',
	        objectFit: 'contain'
	      }, style);

	      return React.createElement(
	        'section',
	        { className: className },
	        legacyMode ? React.createElement(
	          'div',
	          null,
	          React.createElement('input', {
	            style: hiddenStyle,
	            type: 'file',
	            accept: 'image/*',
	            ref: this.setRefFactory('input'),
	            onChange: this.handleInputChange
	          }),
	          React.createElement('img', { style: previewStyle, ref: this.setRefFactory('img'), onLoad: onImageLoad })
	        ) : React.createElement('video', { style: previewStyle, ref: this.setRefFactory('preview') }),
	        React.createElement('canvas', { style: hiddenStyle, ref: this.setRefFactory('canvas') })
	      );
	    }
	  }]);

	  return Reader;
	}(Component), _class.propTypes = {
	  onScan: PropTypes.func.isRequired,
	  onError: PropTypes.func.isRequired,
	  onLoad: PropTypes.func,
	  onImageLoad: PropTypes.func,
	  delay: PropTypes.oneOfType([PropTypes.number, PropTypes.bool]),
	  facingMode: PropTypes.oneOf(['rear', 'front']),
	  legacyMode: PropTypes.bool,
	  maxImageSize: PropTypes.number,
	  style: PropTypes.any,
	  className: PropTypes.string,
	  chooseDeviceId: PropTypes.func
	}, _class.defaultProps = {
	  delay: 500,
	  maxImageSize: 1000,
	  facingMode: 'rear'
	}, _temp);

/***/ }),
/* 878 */
/***/ (function(module, exports) {

	 /* eslint-env node */
	'use strict';

	// SDP helpers.
	var SDPUtils = {};

	// Generate an alphanumeric identifier for cname or mids.
	// TODO: use UUIDs instead? https://gist.github.com/jed/982883
	SDPUtils.generateIdentifier = function() {
	  return Math.random().toString(36).substr(2, 10);
	};

	// The RTCP CNAME used by all peerconnections from the same JS.
	SDPUtils.localCName = SDPUtils.generateIdentifier();

	// Splits SDP into lines, dealing with both CRLF and LF.
	SDPUtils.splitLines = function(blob) {
	  return blob.trim().split('\n').map(function(line) {
	    return line.trim();
	  });
	};
	// Splits SDP into sessionpart and mediasections. Ensures CRLF.
	SDPUtils.splitSections = function(blob) {
	  var parts = blob.split('\nm=');
	  return parts.map(function(part, index) {
	    return (index > 0 ? 'm=' + part : part).trim() + '\r\n';
	  });
	};

	// Returns lines that start with a certain prefix.
	SDPUtils.matchPrefix = function(blob, prefix) {
	  return SDPUtils.splitLines(blob).filter(function(line) {
	    return line.indexOf(prefix) === 0;
	  });
	};

	// Parses an ICE candidate line. Sample input:
	// candidate:702786350 2 udp 41819902 8.8.8.8 60769 typ relay raddr 8.8.8.8
	// rport 55996"
	SDPUtils.parseCandidate = function(line) {
	  var parts;
	  // Parse both variants.
	  if (line.indexOf('a=candidate:') === 0) {
	    parts = line.substring(12).split(' ');
	  } else {
	    parts = line.substring(10).split(' ');
	  }

	  var candidate = {
	    foundation: parts[0],
	    component: parts[1],
	    protocol: parts[2].toLowerCase(),
	    priority: parseInt(parts[3], 10),
	    ip: parts[4],
	    port: parseInt(parts[5], 10),
	    // skip parts[6] == 'typ'
	    type: parts[7]
	  };

	  for (var i = 8; i < parts.length; i += 2) {
	    switch (parts[i]) {
	      case 'raddr':
	        candidate.relatedAddress = parts[i + 1];
	        break;
	      case 'rport':
	        candidate.relatedPort = parseInt(parts[i + 1], 10);
	        break;
	      case 'tcptype':
	        candidate.tcpType = parts[i + 1];
	        break;
	      default: // extension handling, in particular ufrag
	        candidate[parts[i]] = parts[i + 1];
	        break;
	    }
	  }
	  return candidate;
	};

	// Translates a candidate object into SDP candidate attribute.
	SDPUtils.writeCandidate = function(candidate) {
	  var sdp = [];
	  sdp.push(candidate.foundation);
	  sdp.push(candidate.component);
	  sdp.push(candidate.protocol.toUpperCase());
	  sdp.push(candidate.priority);
	  sdp.push(candidate.ip);
	  sdp.push(candidate.port);

	  var type = candidate.type;
	  sdp.push('typ');
	  sdp.push(type);
	  if (type !== 'host' && candidate.relatedAddress &&
	      candidate.relatedPort) {
	    sdp.push('raddr');
	    sdp.push(candidate.relatedAddress); // was: relAddr
	    sdp.push('rport');
	    sdp.push(candidate.relatedPort); // was: relPort
	  }
	  if (candidate.tcpType && candidate.protocol.toLowerCase() === 'tcp') {
	    sdp.push('tcptype');
	    sdp.push(candidate.tcpType);
	  }
	  return 'candidate:' + sdp.join(' ');
	};

	// Parses an ice-options line, returns an array of option tags.
	// a=ice-options:foo bar
	SDPUtils.parseIceOptions = function(line) {
	  return line.substr(14).split(' ');
	}

	// Parses an rtpmap line, returns RTCRtpCoddecParameters. Sample input:
	// a=rtpmap:111 opus/48000/2
	SDPUtils.parseRtpMap = function(line) {
	  var parts = line.substr(9).split(' ');
	  var parsed = {
	    payloadType: parseInt(parts.shift(), 10) // was: id
	  };

	  parts = parts[0].split('/');

	  parsed.name = parts[0];
	  parsed.clockRate = parseInt(parts[1], 10); // was: clockrate
	  // was: channels
	  parsed.numChannels = parts.length === 3 ? parseInt(parts[2], 10) : 1;
	  return parsed;
	};

	// Generate an a=rtpmap line from RTCRtpCodecCapability or
	// RTCRtpCodecParameters.
	SDPUtils.writeRtpMap = function(codec) {
	  var pt = codec.payloadType;
	  if (codec.preferredPayloadType !== undefined) {
	    pt = codec.preferredPayloadType;
	  }
	  return 'a=rtpmap:' + pt + ' ' + codec.name + '/' + codec.clockRate +
	      (codec.numChannels !== 1 ? '/' + codec.numChannels : '') + '\r\n';
	};

	// Parses an a=extmap line (headerextension from RFC 5285). Sample input:
	// a=extmap:2 urn:ietf:params:rtp-hdrext:toffset
	// a=extmap:2/sendonly urn:ietf:params:rtp-hdrext:toffset
	SDPUtils.parseExtmap = function(line) {
	  var parts = line.substr(9).split(' ');
	  return {
	    id: parseInt(parts[0], 10),
	    direction: parts[0].indexOf('/') > 0 ? parts[0].split('/')[1] : 'sendrecv',
	    uri: parts[1]
	  };
	};

	// Generates a=extmap line from RTCRtpHeaderExtensionParameters or
	// RTCRtpHeaderExtension.
	SDPUtils.writeExtmap = function(headerExtension) {
	  return 'a=extmap:' + (headerExtension.id || headerExtension.preferredId) +
	      (headerExtension.direction && headerExtension.direction !== 'sendrecv'
	          ? '/' + headerExtension.direction
	          : '') +
	      ' ' + headerExtension.uri + '\r\n';
	};

	// Parses an ftmp line, returns dictionary. Sample input:
	// a=fmtp:96 vbr=on;cng=on
	// Also deals with vbr=on; cng=on
	SDPUtils.parseFmtp = function(line) {
	  var parsed = {};
	  var kv;
	  var parts = line.substr(line.indexOf(' ') + 1).split(';');
	  for (var j = 0; j < parts.length; j++) {
	    kv = parts[j].trim().split('=');
	    parsed[kv[0].trim()] = kv[1];
	  }
	  return parsed;
	};

	// Generates an a=ftmp line from RTCRtpCodecCapability or RTCRtpCodecParameters.
	SDPUtils.writeFmtp = function(codec) {
	  var line = '';
	  var pt = codec.payloadType;
	  if (codec.preferredPayloadType !== undefined) {
	    pt = codec.preferredPayloadType;
	  }
	  if (codec.parameters && Object.keys(codec.parameters).length) {
	    var params = [];
	    Object.keys(codec.parameters).forEach(function(param) {
	      params.push(param + '=' + codec.parameters[param]);
	    });
	    line += 'a=fmtp:' + pt + ' ' + params.join(';') + '\r\n';
	  }
	  return line;
	};

	// Parses an rtcp-fb line, returns RTCPRtcpFeedback object. Sample input:
	// a=rtcp-fb:98 nack rpsi
	SDPUtils.parseRtcpFb = function(line) {
	  var parts = line.substr(line.indexOf(' ') + 1).split(' ');
	  return {
	    type: parts.shift(),
	    parameter: parts.join(' ')
	  };
	};
	// Generate a=rtcp-fb lines from RTCRtpCodecCapability or RTCRtpCodecParameters.
	SDPUtils.writeRtcpFb = function(codec) {
	  var lines = '';
	  var pt = codec.payloadType;
	  if (codec.preferredPayloadType !== undefined) {
	    pt = codec.preferredPayloadType;
	  }
	  if (codec.rtcpFeedback && codec.rtcpFeedback.length) {
	    // FIXME: special handling for trr-int?
	    codec.rtcpFeedback.forEach(function(fb) {
	      lines += 'a=rtcp-fb:' + pt + ' ' + fb.type +
	      (fb.parameter && fb.parameter.length ? ' ' + fb.parameter : '') +
	          '\r\n';
	    });
	  }
	  return lines;
	};

	// Parses an RFC 5576 ssrc media attribute. Sample input:
	// a=ssrc:3735928559 cname:something
	SDPUtils.parseSsrcMedia = function(line) {
	  var sp = line.indexOf(' ');
	  var parts = {
	    ssrc: parseInt(line.substr(7, sp - 7), 10)
	  };
	  var colon = line.indexOf(':', sp);
	  if (colon > -1) {
	    parts.attribute = line.substr(sp + 1, colon - sp - 1);
	    parts.value = line.substr(colon + 1);
	  } else {
	    parts.attribute = line.substr(sp + 1);
	  }
	  return parts;
	};

	// Extracts the MID (RFC 5888) from a media section.
	// returns the MID or undefined if no mid line was found.
	SDPUtils.getMid = function(mediaSection) {
	  var mid = SDPUtils.matchPrefix(mediaSection, 'a=mid:')[0];
	  if (mid) {
	    return mid.substr(6);
	  }
	}

	SDPUtils.parseFingerprint = function(line) {
	  var parts = line.substr(14).split(' ');
	  return {
	    algorithm: parts[0].toLowerCase(), // algorithm is case-sensitive in Edge.
	    value: parts[1]
	  };
	};

	// Extracts DTLS parameters from SDP media section or sessionpart.
	// FIXME: for consistency with other functions this should only
	//   get the fingerprint line as input. See also getIceParameters.
	SDPUtils.getDtlsParameters = function(mediaSection, sessionpart) {
	  var lines = SDPUtils.matchPrefix(mediaSection + sessionpart,
	      'a=fingerprint:');
	  // Note: a=setup line is ignored since we use the 'auto' role.
	  // Note2: 'algorithm' is not case sensitive except in Edge.
	  return {
	    role: 'auto',
	    fingerprints: lines.map(SDPUtils.parseFingerprint)
	  };
	};

	// Serializes DTLS parameters to SDP.
	SDPUtils.writeDtlsParameters = function(params, setupType) {
	  var sdp = 'a=setup:' + setupType + '\r\n';
	  params.fingerprints.forEach(function(fp) {
	    sdp += 'a=fingerprint:' + fp.algorithm + ' ' + fp.value + '\r\n';
	  });
	  return sdp;
	};
	// Parses ICE information from SDP media section or sessionpart.
	// FIXME: for consistency with other functions this should only
	//   get the ice-ufrag and ice-pwd lines as input.
	SDPUtils.getIceParameters = function(mediaSection, sessionpart) {
	  var lines = SDPUtils.splitLines(mediaSection);
	  // Search in session part, too.
	  lines = lines.concat(SDPUtils.splitLines(sessionpart));
	  var iceParameters = {
	    usernameFragment: lines.filter(function(line) {
	      return line.indexOf('a=ice-ufrag:') === 0;
	    })[0].substr(12),
	    password: lines.filter(function(line) {
	      return line.indexOf('a=ice-pwd:') === 0;
	    })[0].substr(10)
	  };
	  return iceParameters;
	};

	// Serializes ICE parameters to SDP.
	SDPUtils.writeIceParameters = function(params) {
	  return 'a=ice-ufrag:' + params.usernameFragment + '\r\n' +
	      'a=ice-pwd:' + params.password + '\r\n';
	};

	// Parses the SDP media section and returns RTCRtpParameters.
	SDPUtils.parseRtpParameters = function(mediaSection) {
	  var description = {
	    codecs: [],
	    headerExtensions: [],
	    fecMechanisms: [],
	    rtcp: []
	  };
	  var lines = SDPUtils.splitLines(mediaSection);
	  var mline = lines[0].split(' ');
	  for (var i = 3; i < mline.length; i++) { // find all codecs from mline[3..]
	    var pt = mline[i];
	    var rtpmapline = SDPUtils.matchPrefix(
	        mediaSection, 'a=rtpmap:' + pt + ' ')[0];
	    if (rtpmapline) {
	      var codec = SDPUtils.parseRtpMap(rtpmapline);
	      var fmtps = SDPUtils.matchPrefix(
	          mediaSection, 'a=fmtp:' + pt + ' ');
	      // Only the first a=fmtp:<pt> is considered.
	      codec.parameters = fmtps.length ? SDPUtils.parseFmtp(fmtps[0]) : {};
	      codec.rtcpFeedback = SDPUtils.matchPrefix(
	          mediaSection, 'a=rtcp-fb:' + pt + ' ')
	        .map(SDPUtils.parseRtcpFb);
	      description.codecs.push(codec);
	      // parse FEC mechanisms from rtpmap lines.
	      switch (codec.name.toUpperCase()) {
	        case 'RED':
	        case 'ULPFEC':
	          description.fecMechanisms.push(codec.name.toUpperCase());
	          break;
	        default: // only RED and ULPFEC are recognized as FEC mechanisms.
	          break;
	      }
	    }
	  }
	  SDPUtils.matchPrefix(mediaSection, 'a=extmap:').forEach(function(line) {
	    description.headerExtensions.push(SDPUtils.parseExtmap(line));
	  });
	  // FIXME: parse rtcp.
	  return description;
	};

	// Generates parts of the SDP media section describing the capabilities /
	// parameters.
	SDPUtils.writeRtpDescription = function(kind, caps) {
	  var sdp = '';

	  // Build the mline.
	  sdp += 'm=' + kind + ' ';
	  sdp += caps.codecs.length > 0 ? '9' : '0'; // reject if no codecs.
	  sdp += ' UDP/TLS/RTP/SAVPF ';
	  sdp += caps.codecs.map(function(codec) {
	    if (codec.preferredPayloadType !== undefined) {
	      return codec.preferredPayloadType;
	    }
	    return codec.payloadType;
	  }).join(' ') + '\r\n';

	  sdp += 'c=IN IP4 0.0.0.0\r\n';
	  sdp += 'a=rtcp:9 IN IP4 0.0.0.0\r\n';

	  // Add a=rtpmap lines for each codec. Also fmtp and rtcp-fb.
	  caps.codecs.forEach(function(codec) {
	    sdp += SDPUtils.writeRtpMap(codec);
	    sdp += SDPUtils.writeFmtp(codec);
	    sdp += SDPUtils.writeRtcpFb(codec);
	  });
	  var maxptime = 0;
	  caps.codecs.forEach(function(codec) {
	    if (codec.maxptime > maxptime) {
	      maxptime = codec.maxptime;
	    }
	  });
	  if (maxptime > 0) {
	    sdp += 'a=maxptime:' + maxptime + '\r\n';
	  }
	  sdp += 'a=rtcp-mux\r\n';

	  caps.headerExtensions.forEach(function(extension) {
	    sdp += SDPUtils.writeExtmap(extension);
	  });
	  // FIXME: write fecMechanisms.
	  return sdp;
	};

	// Parses the SDP media section and returns an array of
	// RTCRtpEncodingParameters.
	SDPUtils.parseRtpEncodingParameters = function(mediaSection) {
	  var encodingParameters = [];
	  var description = SDPUtils.parseRtpParameters(mediaSection);
	  var hasRed = description.fecMechanisms.indexOf('RED') !== -1;
	  var hasUlpfec = description.fecMechanisms.indexOf('ULPFEC') !== -1;

	  // filter a=ssrc:... cname:, ignore PlanB-msid
	  var ssrcs = SDPUtils.matchPrefix(mediaSection, 'a=ssrc:')
	  .map(function(line) {
	    return SDPUtils.parseSsrcMedia(line);
	  })
	  .filter(function(parts) {
	    return parts.attribute === 'cname';
	  });
	  var primarySsrc = ssrcs.length > 0 && ssrcs[0].ssrc;
	  var secondarySsrc;

	  var flows = SDPUtils.matchPrefix(mediaSection, 'a=ssrc-group:FID')
	  .map(function(line) {
	    var parts = line.split(' ');
	    parts.shift();
	    return parts.map(function(part) {
	      return parseInt(part, 10);
	    });
	  });
	  if (flows.length > 0 && flows[0].length > 1 && flows[0][0] === primarySsrc) {
	    secondarySsrc = flows[0][1];
	  }

	  description.codecs.forEach(function(codec) {
	    if (codec.name.toUpperCase() === 'RTX' && codec.parameters.apt) {
	      var encParam = {
	        ssrc: primarySsrc,
	        codecPayloadType: parseInt(codec.parameters.apt, 10),
	        rtx: {
	          ssrc: secondarySsrc
	        }
	      };
	      encodingParameters.push(encParam);
	      if (hasRed) {
	        encParam = JSON.parse(JSON.stringify(encParam));
	        encParam.fec = {
	          ssrc: secondarySsrc,
	          mechanism: hasUlpfec ? 'red+ulpfec' : 'red'
	        };
	        encodingParameters.push(encParam);
	      }
	    }
	  });
	  if (encodingParameters.length === 0 && primarySsrc) {
	    encodingParameters.push({
	      ssrc: primarySsrc
	    });
	  }

	  // we support both b=AS and b=TIAS but interpret AS as TIAS.
	  var bandwidth = SDPUtils.matchPrefix(mediaSection, 'b=');
	  if (bandwidth.length) {
	    if (bandwidth[0].indexOf('b=TIAS:') === 0) {
	      bandwidth = parseInt(bandwidth[0].substr(7), 10);
	    } else if (bandwidth[0].indexOf('b=AS:') === 0) {
	      bandwidth = parseInt(bandwidth[0].substr(5), 10);
	    }
	    encodingParameters.forEach(function(params) {
	      params.maxBitrate = bandwidth;
	    });
	  }
	  return encodingParameters;
	};

	// parses http://draft.ortc.org/#rtcrtcpparameters*
	SDPUtils.parseRtcpParameters = function(mediaSection) {
	  var rtcpParameters = {};

	  var cname;
	  // Gets the first SSRC. Note that with RTX there might be multiple
	  // SSRCs.
	  var remoteSsrc = SDPUtils.matchPrefix(mediaSection, 'a=ssrc:')
	      .map(function(line) {
	        return SDPUtils.parseSsrcMedia(line);
	      })
	      .filter(function(obj) {
	        return obj.attribute === 'cname';
	      })[0];
	  if (remoteSsrc) {
	    rtcpParameters.cname = remoteSsrc.value;
	    rtcpParameters.ssrc = remoteSsrc.ssrc;
	  }

	  // Edge uses the compound attribute instead of reducedSize
	  // compound is !reducedSize
	  var rsize = SDPUtils.matchPrefix(mediaSection, 'a=rtcp-rsize');
	  rtcpParameters.reducedSize = rsize.length > 0;
	  rtcpParameters.compound = rsize.length === 0;

	  // parses the rtcp-mux attrіbute.
	  // Note that Edge does not support unmuxed RTCP.
	  var mux = SDPUtils.matchPrefix(mediaSection, 'a=rtcp-mux');
	  rtcpParameters.mux = mux.length > 0;

	  return rtcpParameters;
	};

	// parses either a=msid: or a=ssrc:... msid lines and returns
	// the id of the MediaStream and MediaStreamTrack.
	SDPUtils.parseMsid = function(mediaSection) {
	  var parts;
	  var spec = SDPUtils.matchPrefix(mediaSection, 'a=msid:');
	  if (spec.length === 1) {
	    parts = spec[0].substr(7).split(' ');
	    return {stream: parts[0], track: parts[1]};
	  }
	  var planB = SDPUtils.matchPrefix(mediaSection, 'a=ssrc:')
	  .map(function(line) {
	    return SDPUtils.parseSsrcMedia(line);
	  })
	  .filter(function(parts) {
	    return parts.attribute === 'msid';
	  });
	  if (planB.length > 0) {
	    parts = planB[0].value.split(' ');
	    return {stream: parts[0], track: parts[1]};
	  }
	};

	SDPUtils.writeSessionBoilerplate = function() {
	  // FIXME: sess-id should be an NTP timestamp.
	  return 'v=0\r\n' +
	      'o=thisisadapterortc 8169639915646943137 2 IN IP4 127.0.0.1\r\n' +
	      's=-\r\n' +
	      't=0 0\r\n';
	};

	SDPUtils.writeMediaSection = function(transceiver, caps, type, stream) {
	  var sdp = SDPUtils.writeRtpDescription(transceiver.kind, caps);

	  // Map ICE parameters (ufrag, pwd) to SDP.
	  sdp += SDPUtils.writeIceParameters(
	      transceiver.iceGatherer.getLocalParameters());

	  // Map DTLS parameters to SDP.
	  sdp += SDPUtils.writeDtlsParameters(
	      transceiver.dtlsTransport.getLocalParameters(),
	      type === 'offer' ? 'actpass' : 'active');

	  sdp += 'a=mid:' + transceiver.mid + '\r\n';

	  if (transceiver.direction) {
	    sdp += 'a=' + transceiver.direction + '\r\n';
	  } else if (transceiver.rtpSender && transceiver.rtpReceiver) {
	    sdp += 'a=sendrecv\r\n';
	  } else if (transceiver.rtpSender) {
	    sdp += 'a=sendonly\r\n';
	  } else if (transceiver.rtpReceiver) {
	    sdp += 'a=recvonly\r\n';
	  } else {
	    sdp += 'a=inactive\r\n';
	  }

	  if (transceiver.rtpSender) {
	    // spec.
	    var msid = 'msid:' + stream.id + ' ' +
	        transceiver.rtpSender.track.id + '\r\n';
	    sdp += 'a=' + msid;

	    // for Chrome.
	    sdp += 'a=ssrc:' + transceiver.sendEncodingParameters[0].ssrc +
	        ' ' + msid;
	    if (transceiver.sendEncodingParameters[0].rtx) {
	      sdp += 'a=ssrc:' + transceiver.sendEncodingParameters[0].rtx.ssrc +
	          ' ' + msid;
	      sdp += 'a=ssrc-group:FID ' +
	          transceiver.sendEncodingParameters[0].ssrc + ' ' +
	          transceiver.sendEncodingParameters[0].rtx.ssrc +
	          '\r\n';
	    }
	  }
	  // FIXME: this should be written by writeRtpDescription.
	  sdp += 'a=ssrc:' + transceiver.sendEncodingParameters[0].ssrc +
	      ' cname:' + SDPUtils.localCName + '\r\n';
	  if (transceiver.rtpSender && transceiver.sendEncodingParameters[0].rtx) {
	    sdp += 'a=ssrc:' + transceiver.sendEncodingParameters[0].rtx.ssrc +
	        ' cname:' + SDPUtils.localCName + '\r\n';
	  }
	  return sdp;
	};

	// Gets the direction from the mediaSection or the sessionpart.
	SDPUtils.getDirection = function(mediaSection, sessionpart) {
	  // Look for sendrecv, sendonly, recvonly, inactive, default to sendrecv.
	  var lines = SDPUtils.splitLines(mediaSection);
	  for (var i = 0; i < lines.length; i++) {
	    switch (lines[i]) {
	      case 'a=sendrecv':
	      case 'a=sendonly':
	      case 'a=recvonly':
	      case 'a=inactive':
	        return lines[i].substr(2);
	      default:
	        // FIXME: What should happen here?
	    }
	  }
	  if (sessionpart) {
	    return SDPUtils.getDirection(sessionpart);
	  }
	  return 'sendrecv';
	};

	SDPUtils.getKind = function(mediaSection) {
	  var lines = SDPUtils.splitLines(mediaSection);
	  var mline = lines[0].split(' ');
	  return mline[0].substr(2);
	};

	SDPUtils.isRejected = function(mediaSection) {
	  return mediaSection.split(' ', 2)[1] === '0';
	};

	// Expose public methods.
	module.exports = SDPUtils;


/***/ }),
/* 879 */
/***/ (function(module, exports, __webpack_require__) {

	/*
	 *  Copyright (c) 2016 The WebRTC project authors. All Rights Reserved.
	 *
	 *  Use of this source code is governed by a BSD-style license
	 *  that can be found in the LICENSE file in the root of the source
	 *  tree.
	 */
	 /* eslint-env node */

	'use strict';

	// Shimming starts here.
	(function() {
	  // Utils.
	  var logging = __webpack_require__(47).log;
	  var browserDetails = __webpack_require__(47).browserDetails;
	  // Export to the adapter global object visible in the browser.
	  module.exports.browserDetails = browserDetails;
	  module.exports.extractVersion = __webpack_require__(47).extractVersion;
	  module.exports.disableLog = __webpack_require__(47).disableLog;

	  // Uncomment the line below if you want logging to occur, including logging
	  // for the switch statement below. Can also be turned on in the browser via
	  // adapter.disableLog(false), but then logging from the switch statement below
	  // will not appear.
	  // require('./utils').disableLog(false);

	  // Browser shims.
	  var chromeShim = __webpack_require__(880) || null;
	  var edgeShim = __webpack_require__(882) || null;
	  var firefoxShim = __webpack_require__(884) || null;
	  var safariShim = __webpack_require__(886) || null;

	  // Shim browser if found.
	  switch (browserDetails.browser) {
	    case 'opera': // fallthrough as it uses chrome shims
	    case 'chrome':
	      if (!chromeShim || !chromeShim.shimPeerConnection) {
	        logging('Chrome shim is not included in this adapter release.');
	        return;
	      }
	      logging('adapter.js shimming chrome.');
	      // Export to the adapter global object visible in the browser.
	      module.exports.browserShim = chromeShim;

	      chromeShim.shimGetUserMedia();
	      chromeShim.shimMediaStream();
	      chromeShim.shimSourceObject();
	      chromeShim.shimPeerConnection();
	      chromeShim.shimOnTrack();
	      break;
	    case 'firefox':
	      if (!firefoxShim || !firefoxShim.shimPeerConnection) {
	        logging('Firefox shim is not included in this adapter release.');
	        return;
	      }
	      logging('adapter.js shimming firefox.');
	      // Export to the adapter global object visible in the browser.
	      module.exports.browserShim = firefoxShim;

	      firefoxShim.shimGetUserMedia();
	      firefoxShim.shimSourceObject();
	      firefoxShim.shimPeerConnection();
	      firefoxShim.shimOnTrack();
	      break;
	    case 'edge':
	      if (!edgeShim || !edgeShim.shimPeerConnection) {
	        logging('MS edge shim is not included in this adapter release.');
	        return;
	      }
	      logging('adapter.js shimming edge.');
	      // Export to the adapter global object visible in the browser.
	      module.exports.browserShim = edgeShim;

	      edgeShim.shimGetUserMedia();
	      edgeShim.shimPeerConnection();
	      break;
	    case 'safari':
	      if (!safariShim) {
	        logging('Safari shim is not included in this adapter release.');
	        return;
	      }
	      logging('adapter.js shimming safari.');
	      // Export to the adapter global object visible in the browser.
	      module.exports.browserShim = safariShim;

	      safariShim.shimGetUserMedia();
	      break;
	    default:
	      logging('Unsupported browser!');
	  }
	})();


/***/ }),
/* 880 */
/***/ (function(module, exports, __webpack_require__) {

	
	/*
	 *  Copyright (c) 2016 The WebRTC project authors. All Rights Reserved.
	 *
	 *  Use of this source code is governed by a BSD-style license
	 *  that can be found in the LICENSE file in the root of the source
	 *  tree.
	 */
	 /* eslint-env node */
	'use strict';
	var logging = __webpack_require__(47).log;
	var browserDetails = __webpack_require__(47).browserDetails;

	var chromeShim = {
	  shimMediaStream: function() {
	    window.MediaStream = window.MediaStream || window.webkitMediaStream;
	  },

	  shimOnTrack: function() {
	    if (typeof window === 'object' && window.RTCPeerConnection && !('ontrack' in
	        window.RTCPeerConnection.prototype)) {
	      Object.defineProperty(window.RTCPeerConnection.prototype, 'ontrack', {
	        get: function() {
	          return this._ontrack;
	        },
	        set: function(f) {
	          var self = this;
	          if (this._ontrack) {
	            this.removeEventListener('track', this._ontrack);
	            this.removeEventListener('addstream', this._ontrackpoly);
	          }
	          this.addEventListener('track', this._ontrack = f);
	          this.addEventListener('addstream', this._ontrackpoly = function(e) {
	            // onaddstream does not fire when a track is added to an existing
	            // stream. But stream.onaddtrack is implemented so we use that.
	            e.stream.addEventListener('addtrack', function(te) {
	              var event = new Event('track');
	              event.track = te.track;
	              event.receiver = {track: te.track};
	              event.streams = [e.stream];
	              self.dispatchEvent(event);
	            });
	            e.stream.getTracks().forEach(function(track) {
	              var event = new Event('track');
	              event.track = track;
	              event.receiver = {track: track};
	              event.streams = [e.stream];
	              this.dispatchEvent(event);
	            }.bind(this));
	          }.bind(this));
	        }
	      });
	    }
	  },

	  shimSourceObject: function() {
	    if (typeof window === 'object') {
	      if (window.HTMLMediaElement &&
	        !('srcObject' in window.HTMLMediaElement.prototype)) {
	        // Shim the srcObject property, once, when HTMLMediaElement is found.
	        Object.defineProperty(window.HTMLMediaElement.prototype, 'srcObject', {
	          get: function() {
	            return this._srcObject;
	          },
	          set: function(stream) {
	            var self = this;
	            // Use _srcObject as a private property for this shim
	            this._srcObject = stream;
	            if (this.src) {
	              URL.revokeObjectURL(this.src);
	            }

	            if (!stream) {
	              this.src = '';
	              return;
	            }
	            this.src = URL.createObjectURL(stream);
	            // We need to recreate the blob url when a track is added or
	            // removed. Doing it manually since we want to avoid a recursion.
	            stream.addEventListener('addtrack', function() {
	              if (self.src) {
	                URL.revokeObjectURL(self.src);
	              }
	              self.src = URL.createObjectURL(stream);
	            });
	            stream.addEventListener('removetrack', function() {
	              if (self.src) {
	                URL.revokeObjectURL(self.src);
	              }
	              self.src = URL.createObjectURL(stream);
	            });
	          }
	        });
	      }
	    }
	  },

	  shimPeerConnection: function() {
	    // The RTCPeerConnection object.
	    window.RTCPeerConnection = function(pcConfig, pcConstraints) {
	      // Translate iceTransportPolicy to iceTransports,
	      // see https://code.google.com/p/webrtc/issues/detail?id=4869
	      logging('PeerConnection');
	      if (pcConfig && pcConfig.iceTransportPolicy) {
	        pcConfig.iceTransports = pcConfig.iceTransportPolicy;
	      }

	      var pc = new webkitRTCPeerConnection(pcConfig, pcConstraints);
	      var origGetStats = pc.getStats.bind(pc);
	      pc.getStats = function(selector, successCallback, errorCallback) {
	        var self = this;
	        var args = arguments;

	        // If selector is a function then we are in the old style stats so just
	        // pass back the original getStats format to avoid breaking old users.
	        if (arguments.length > 0 && typeof selector === 'function') {
	          return origGetStats(selector, successCallback);
	        }

	        var fixChromeStats_ = function(response) {
	          var standardReport = {};
	          var reports = response.result();
	          reports.forEach(function(report) {
	            var standardStats = {
	              id: report.id,
	              timestamp: report.timestamp,
	              type: report.type
	            };
	            report.names().forEach(function(name) {
	              standardStats[name] = report.stat(name);
	            });
	            standardReport[standardStats.id] = standardStats;
	          });

	          return standardReport;
	        };

	        // shim getStats with maplike support
	        var makeMapStats = function(stats, legacyStats) {
	          var map = new Map(Object.keys(stats).map(function(key) {
	            return[key, stats[key]];
	          }));
	          legacyStats = legacyStats || stats;
	          Object.keys(legacyStats).forEach(function(key) {
	            map[key] = legacyStats[key];
	          });
	          return map;
	        };

	        if (arguments.length >= 2) {
	          var successCallbackWrapper_ = function(response) {
	            args[1](makeMapStats(fixChromeStats_(response)));
	          };

	          return origGetStats.apply(this, [successCallbackWrapper_,
	              arguments[0]]);
	        }

	        // promise-support
	        return new Promise(function(resolve, reject) {
	          if (args.length === 1 && typeof selector === 'object') {
	            origGetStats.apply(self, [
	              function(response) {
	                resolve(makeMapStats(fixChromeStats_(response)));
	              }, reject]);
	          } else {
	            // Preserve legacy chrome stats only on legacy access of stats obj
	            origGetStats.apply(self, [
	              function(response) {
	                resolve(makeMapStats(fixChromeStats_(response),
	                    response.result()));
	              }, reject]);
	          }
	        }).then(successCallback, errorCallback);
	      };

	      return pc;
	    };
	    window.RTCPeerConnection.prototype = webkitRTCPeerConnection.prototype;

	    // wrap static methods. Currently just generateCertificate.
	    if (webkitRTCPeerConnection.generateCertificate) {
	      Object.defineProperty(window.RTCPeerConnection, 'generateCertificate', {
	        get: function() {
	          return webkitRTCPeerConnection.generateCertificate;
	        }
	      });
	    }

	    ['createOffer', 'createAnswer'].forEach(function(method) {
	      var nativeMethod = webkitRTCPeerConnection.prototype[method];
	      webkitRTCPeerConnection.prototype[method] = function() {
	        var self = this;
	        if (arguments.length < 1 || (arguments.length === 1 &&
	            typeof arguments[0] === 'object')) {
	          var opts = arguments.length === 1 ? arguments[0] : undefined;
	          return new Promise(function(resolve, reject) {
	            nativeMethod.apply(self, [resolve, reject, opts]);
	          });
	        }
	        return nativeMethod.apply(this, arguments);
	      };
	    });

	    // add promise support -- natively available in Chrome 51
	    if (browserDetails.version < 51) {
	      ['setLocalDescription', 'setRemoteDescription', 'addIceCandidate']
	          .forEach(function(method) {
	            var nativeMethod = webkitRTCPeerConnection.prototype[method];
	            webkitRTCPeerConnection.prototype[method] = function() {
	              var args = arguments;
	              var self = this;
	              var promise = new Promise(function(resolve, reject) {
	                nativeMethod.apply(self, [args[0], resolve, reject]);
	              });
	              if (args.length < 2) {
	                return promise;
	              }
	              return promise.then(function() {
	                args[1].apply(null, []);
	              },
	              function(err) {
	                if (args.length >= 3) {
	                  args[2].apply(null, [err]);
	                }
	              });
	            };
	          });
	    }

	    // shim implicit creation of RTCSessionDescription/RTCIceCandidate
	    ['setLocalDescription', 'setRemoteDescription', 'addIceCandidate']
	        .forEach(function(method) {
	          var nativeMethod = webkitRTCPeerConnection.prototype[method];
	          webkitRTCPeerConnection.prototype[method] = function() {
	            arguments[0] = new ((method === 'addIceCandidate') ?
	                RTCIceCandidate : RTCSessionDescription)(arguments[0]);
	            return nativeMethod.apply(this, arguments);
	          };
	        });

	    // support for addIceCandidate(null or undefined)
	    var nativeAddIceCandidate =
	        RTCPeerConnection.prototype.addIceCandidate;
	    RTCPeerConnection.prototype.addIceCandidate = function() {
	      if (!arguments[0]) {
	        if (arguments[1]) {
	          arguments[1].apply(null);
	        }
	        return Promise.resolve();
	      }
	      return nativeAddIceCandidate.apply(this, arguments);
	    };
	  }
	};


	// Expose public methods.
	module.exports = {
	  shimMediaStream: chromeShim.shimMediaStream,
	  shimOnTrack: chromeShim.shimOnTrack,
	  shimSourceObject: chromeShim.shimSourceObject,
	  shimPeerConnection: chromeShim.shimPeerConnection,
	  shimGetUserMedia: __webpack_require__(881)
	};


/***/ }),
/* 881 */
/***/ (function(module, exports, __webpack_require__) {

	/*
	 *  Copyright (c) 2016 The WebRTC project authors. All Rights Reserved.
	 *
	 *  Use of this source code is governed by a BSD-style license
	 *  that can be found in the LICENSE file in the root of the source
	 *  tree.
	 */
	 /* eslint-env node */
	'use strict';
	var logging = __webpack_require__(47).log;

	// Expose public methods.
	module.exports = function() {
	  var constraintsToChrome_ = function(c) {
	    if (typeof c !== 'object' || c.mandatory || c.optional) {
	      return c;
	    }
	    var cc = {};
	    Object.keys(c).forEach(function(key) {
	      if (key === 'require' || key === 'advanced' || key === 'mediaSource') {
	        return;
	      }
	      var r = (typeof c[key] === 'object') ? c[key] : {ideal: c[key]};
	      if (r.exact !== undefined && typeof r.exact === 'number') {
	        r.min = r.max = r.exact;
	      }
	      var oldname_ = function(prefix, name) {
	        if (prefix) {
	          return prefix + name.charAt(0).toUpperCase() + name.slice(1);
	        }
	        return (name === 'deviceId') ? 'sourceId' : name;
	      };
	      if (r.ideal !== undefined) {
	        cc.optional = cc.optional || [];
	        var oc = {};
	        if (typeof r.ideal === 'number') {
	          oc[oldname_('min', key)] = r.ideal;
	          cc.optional.push(oc);
	          oc = {};
	          oc[oldname_('max', key)] = r.ideal;
	          cc.optional.push(oc);
	        } else {
	          oc[oldname_('', key)] = r.ideal;
	          cc.optional.push(oc);
	        }
	      }
	      if (r.exact !== undefined && typeof r.exact !== 'number') {
	        cc.mandatory = cc.mandatory || {};
	        cc.mandatory[oldname_('', key)] = r.exact;
	      } else {
	        ['min', 'max'].forEach(function(mix) {
	          if (r[mix] !== undefined) {
	            cc.mandatory = cc.mandatory || {};
	            cc.mandatory[oldname_(mix, key)] = r[mix];
	          }
	        });
	      }
	    });
	    if (c.advanced) {
	      cc.optional = (cc.optional || []).concat(c.advanced);
	    }
	    return cc;
	  };

	  var shimConstraints_ = function(constraints, func) {
	    constraints = JSON.parse(JSON.stringify(constraints));
	    if (constraints && constraints.audio) {
	      constraints.audio = constraintsToChrome_(constraints.audio);
	    }
	    if (constraints && typeof constraints.video === 'object') {
	      // Shim facingMode for mobile, where it defaults to "user".
	      var face = constraints.video.facingMode;
	      face = face && ((typeof face === 'object') ? face : {ideal: face});

	      if ((face && (face.exact === 'user' || face.exact === 'environment' ||
	                    face.ideal === 'user' || face.ideal === 'environment')) &&
	          !(navigator.mediaDevices.getSupportedConstraints &&
	            navigator.mediaDevices.getSupportedConstraints().facingMode)) {
	        delete constraints.video.facingMode;
	        if (face.exact === 'environment' || face.ideal === 'environment') {
	          // Look for "back" in label, or use last cam (typically back cam).
	          return navigator.mediaDevices.enumerateDevices()
	          .then(function(devices) {
	            devices = devices.filter(function(d) {
	              return d.kind === 'videoinput';
	            });
	            var back = devices.find(function(d) {
	              return d.label.toLowerCase().indexOf('back') !== -1;
	            }) || (devices.length && devices[devices.length - 1]);
	            if (back) {
	              constraints.video.deviceId = face.exact ? {exact: back.deviceId} :
	                                                        {ideal: back.deviceId};
	            }
	            constraints.video = constraintsToChrome_(constraints.video);
	            logging('chrome: ' + JSON.stringify(constraints));
	            return func(constraints);
	          });
	        }
	      }
	      constraints.video = constraintsToChrome_(constraints.video);
	    }
	    logging('chrome: ' + JSON.stringify(constraints));
	    return func(constraints);
	  };

	  var shimError_ = function(e) {
	    return {
	      name: {
	        PermissionDeniedError: 'NotAllowedError',
	        ConstraintNotSatisfiedError: 'OverconstrainedError'
	      }[e.name] || e.name,
	      message: e.message,
	      constraint: e.constraintName,
	      toString: function() {
	        return this.name + (this.message && ': ') + this.message;
	      }
	    };
	  };

	  var getUserMedia_ = function(constraints, onSuccess, onError) {
	    shimConstraints_(constraints, function(c) {
	      navigator.webkitGetUserMedia(c, onSuccess, function(e) {
	        onError(shimError_(e));
	      });
	    });
	  };

	  navigator.getUserMedia = getUserMedia_;

	  // Returns the result of getUserMedia as a Promise.
	  var getUserMediaPromise_ = function(constraints) {
	    return new Promise(function(resolve, reject) {
	      navigator.getUserMedia(constraints, resolve, reject);
	    });
	  };

	  if (!navigator.mediaDevices) {
	    navigator.mediaDevices = {
	      getUserMedia: getUserMediaPromise_,
	      enumerateDevices: function() {
	        return new Promise(function(resolve) {
	          var kinds = {audio: 'audioinput', video: 'videoinput'};
	          return MediaStreamTrack.getSources(function(devices) {
	            resolve(devices.map(function(device) {
	              return {label: device.label,
	                      kind: kinds[device.kind],
	                      deviceId: device.id,
	                      groupId: ''};
	            }));
	          });
	        });
	      }
	    };
	  }

	  // A shim for getUserMedia method on the mediaDevices object.
	  // TODO(KaptenJansson) remove once implemented in Chrome stable.
	  if (!navigator.mediaDevices.getUserMedia) {
	    navigator.mediaDevices.getUserMedia = function(constraints) {
	      return getUserMediaPromise_(constraints);
	    };
	  } else {
	    // Even though Chrome 45 has navigator.mediaDevices and a getUserMedia
	    // function which returns a Promise, it does not accept spec-style
	    // constraints.
	    var origGetUserMedia = navigator.mediaDevices.getUserMedia.
	        bind(navigator.mediaDevices);
	    navigator.mediaDevices.getUserMedia = function(cs) {
	      return shimConstraints_(cs, function(c) {
	        return origGetUserMedia(c).then(function(stream) {
	          if (c.audio && !stream.getAudioTracks().length ||
	              c.video && !stream.getVideoTracks().length) {
	            stream.getTracks().forEach(function(track) {
	              track.stop();
	            });
	            throw new DOMException('', 'NotFoundError');
	          }
	          return stream;
	        }, function(e) {
	          return Promise.reject(shimError_(e));
	        });
	      });
	    };
	  }

	  // Dummy devicechange event methods.
	  // TODO(KaptenJansson) remove once implemented in Chrome stable.
	  if (typeof navigator.mediaDevices.addEventListener === 'undefined') {
	    navigator.mediaDevices.addEventListener = function() {
	      logging('Dummy mediaDevices.addEventListener called.');
	    };
	  }
	  if (typeof navigator.mediaDevices.removeEventListener === 'undefined') {
	    navigator.mediaDevices.removeEventListener = function() {
	      logging('Dummy mediaDevices.removeEventListener called.');
	    };
	  }
	};


/***/ }),
/* 882 */
/***/ (function(module, exports, __webpack_require__) {

	/*
	 *  Copyright (c) 2016 The WebRTC project authors. All Rights Reserved.
	 *
	 *  Use of this source code is governed by a BSD-style license
	 *  that can be found in the LICENSE file in the root of the source
	 *  tree.
	 */
	 /* eslint-env node */
	'use strict';

	var SDPUtils = __webpack_require__(878);
	var browserDetails = __webpack_require__(47).browserDetails;

	var edgeShim = {
	  shimPeerConnection: function() {
	    if (window.RTCIceGatherer) {
	      // ORTC defines an RTCIceCandidate object but no constructor.
	      // Not implemented in Edge.
	      if (!window.RTCIceCandidate) {
	        window.RTCIceCandidate = function(args) {
	          return args;
	        };
	      }
	      // ORTC does not have a session description object but
	      // other browsers (i.e. Chrome) that will support both PC and ORTC
	      // in the future might have this defined already.
	      if (!window.RTCSessionDescription) {
	        window.RTCSessionDescription = function(args) {
	          return args;
	        };
	      }
	      // this adds an additional event listener to MediaStrackTrack that signals
	      // when a tracks enabled property was changed.
	      var origMSTEnabled = Object.getOwnPropertyDescriptor(
	          MediaStreamTrack.prototype, 'enabled');
	      Object.defineProperty(MediaStreamTrack.prototype, 'enabled', {
	        set: function(value) {
	          origMSTEnabled.set.call(this, value);
	          var ev = new Event('enabled');
	          ev.enabled = value;
	          this.dispatchEvent(ev);
	        }
	      });
	    }

	    window.RTCPeerConnection = function(config) {
	      var self = this;

	      var _eventTarget = document.createDocumentFragment();
	      ['addEventListener', 'removeEventListener', 'dispatchEvent']
	          .forEach(function(method) {
	            self[method] = _eventTarget[method].bind(_eventTarget);
	          });

	      this.onicecandidate = null;
	      this.onaddstream = null;
	      this.ontrack = null;
	      this.onremovestream = null;
	      this.onsignalingstatechange = null;
	      this.oniceconnectionstatechange = null;
	      this.onnegotiationneeded = null;
	      this.ondatachannel = null;

	      this.localStreams = [];
	      this.remoteStreams = [];
	      this.getLocalStreams = function() {
	        return self.localStreams;
	      };
	      this.getRemoteStreams = function() {
	        return self.remoteStreams;
	      };

	      this.localDescription = new RTCSessionDescription({
	        type: '',
	        sdp: ''
	      });
	      this.remoteDescription = new RTCSessionDescription({
	        type: '',
	        sdp: ''
	      });
	      this.signalingState = 'stable';
	      this.iceConnectionState = 'new';
	      this.iceGatheringState = 'new';

	      this.iceOptions = {
	        gatherPolicy: 'all',
	        iceServers: []
	      };
	      if (config && config.iceTransportPolicy) {
	        switch (config.iceTransportPolicy) {
	          case 'all':
	          case 'relay':
	            this.iceOptions.gatherPolicy = config.iceTransportPolicy;
	            break;
	          case 'none':
	            // FIXME: remove once implementation and spec have added this.
	            throw new TypeError('iceTransportPolicy "none" not supported');
	          default:
	            // don't set iceTransportPolicy.
	            break;
	        }
	      }
	      this.usingBundle = config && config.bundlePolicy === 'max-bundle';

	      if (config && config.iceServers) {
	        // Edge does not like
	        // 1) stun:
	        // 2) turn: that does not have all of turn:host:port?transport=udp
	        // 3) turn: with ipv6 addresses
	        var iceServers = JSON.parse(JSON.stringify(config.iceServers));
	        this.iceOptions.iceServers = iceServers.filter(function(server) {
	          if (server && server.urls) {
	            var urls = server.urls;
	            if (typeof urls === 'string') {
	              urls = [urls];
	            }
	            urls = urls.filter(function(url) {
	              return (url.indexOf('turn:') === 0 &&
	                  url.indexOf('transport=udp') !== -1 &&
	                  url.indexOf('turn:[') === -1) ||
	                  (url.indexOf('stun:') === 0 &&
	                    browserDetails.version >= 14393);
	            })[0];
	            return !!urls;
	          }
	          return false;
	        });
	      }
	      this._config = config;

	      // per-track iceGathers, iceTransports, dtlsTransports, rtpSenders, ...
	      // everything that is needed to describe a SDP m-line.
	      this.transceivers = [];

	      // since the iceGatherer is currently created in createOffer but we
	      // must not emit candidates until after setLocalDescription we buffer
	      // them in this array.
	      this._localIceCandidatesBuffer = [];
	    };

	    window.RTCPeerConnection.prototype._emitBufferedCandidates = function() {
	      var self = this;
	      var sections = SDPUtils.splitSections(self.localDescription.sdp);
	      // FIXME: need to apply ice candidates in a way which is async but
	      // in-order
	      this._localIceCandidatesBuffer.forEach(function(event) {
	        var end = !event.candidate || Object.keys(event.candidate).length === 0;
	        if (end) {
	          for (var j = 1; j < sections.length; j++) {
	            if (sections[j].indexOf('\r\na=end-of-candidates\r\n') === -1) {
	              sections[j] += 'a=end-of-candidates\r\n';
	            }
	          }
	        } else if (event.candidate.candidate.indexOf('typ endOfCandidates')
	            === -1) {
	          sections[event.candidate.sdpMLineIndex + 1] +=
	              'a=' + event.candidate.candidate + '\r\n';
	        }
	        self.localDescription.sdp = sections.join('');
	        self.dispatchEvent(event);
	        if (self.onicecandidate !== null) {
	          self.onicecandidate(event);
	        }
	        if (!event.candidate && self.iceGatheringState !== 'complete') {
	          var complete = self.transceivers.every(function(transceiver) {
	            return transceiver.iceGatherer &&
	                transceiver.iceGatherer.state === 'completed';
	          });
	          if (complete) {
	            self.iceGatheringState = 'complete';
	          }
	        }
	      });
	      this._localIceCandidatesBuffer = [];
	    };

	    window.RTCPeerConnection.prototype.getConfiguration = function() {
	      return this._config;
	    };

	    window.RTCPeerConnection.prototype.addStream = function(stream) {
	      // Clone is necessary for local demos mostly, attaching directly
	      // to two different senders does not work (build 10547).
	      var clonedStream = stream.clone();
	      stream.getTracks().forEach(function(track, idx) {
	        var clonedTrack = clonedStream.getTracks()[idx];
	        track.addEventListener('enabled', function(event) {
	          clonedTrack.enabled = event.enabled;
	        });
	      });
	      this.localStreams.push(clonedStream);
	      this._maybeFireNegotiationNeeded();
	    };

	    window.RTCPeerConnection.prototype.removeStream = function(stream) {
	      var idx = this.localStreams.indexOf(stream);
	      if (idx > -1) {
	        this.localStreams.splice(idx, 1);
	        this._maybeFireNegotiationNeeded();
	      }
	    };

	    window.RTCPeerConnection.prototype.getSenders = function() {
	      return this.transceivers.filter(function(transceiver) {
	        return !!transceiver.rtpSender;
	      })
	      .map(function(transceiver) {
	        return transceiver.rtpSender;
	      });
	    };

	    window.RTCPeerConnection.prototype.getReceivers = function() {
	      return this.transceivers.filter(function(transceiver) {
	        return !!transceiver.rtpReceiver;
	      })
	      .map(function(transceiver) {
	        return transceiver.rtpReceiver;
	      });
	    };

	    // Determines the intersection of local and remote capabilities.
	    window.RTCPeerConnection.prototype._getCommonCapabilities =
	        function(localCapabilities, remoteCapabilities) {
	          var commonCapabilities = {
	            codecs: [],
	            headerExtensions: [],
	            fecMechanisms: []
	          };
	          localCapabilities.codecs.forEach(function(lCodec) {
	            for (var i = 0; i < remoteCapabilities.codecs.length; i++) {
	              var rCodec = remoteCapabilities.codecs[i];
	              if (lCodec.name.toLowerCase() === rCodec.name.toLowerCase() &&
	                  lCodec.clockRate === rCodec.clockRate) {
	                // number of channels is the highest common number of channels
	                rCodec.numChannels = Math.min(lCodec.numChannels,
	                    rCodec.numChannels);
	                // push rCodec so we reply with offerer payload type
	                commonCapabilities.codecs.push(rCodec);

	                // determine common feedback mechanisms
	                rCodec.rtcpFeedback = rCodec.rtcpFeedback.filter(function(fb) {
	                  for (var j = 0; j < lCodec.rtcpFeedback.length; j++) {
	                    if (lCodec.rtcpFeedback[j].type === fb.type &&
	                        lCodec.rtcpFeedback[j].parameter === fb.parameter) {
	                      return true;
	                    }
	                  }
	                  return false;
	                });
	                // FIXME: also need to determine .parameters
	                //  see https://github.com/openpeer/ortc/issues/569
	                break;
	              }
	            }
	          });

	          localCapabilities.headerExtensions
	              .forEach(function(lHeaderExtension) {
	                for (var i = 0; i < remoteCapabilities.headerExtensions.length;
	                     i++) {
	                  var rHeaderExtension = remoteCapabilities.headerExtensions[i];
	                  if (lHeaderExtension.uri === rHeaderExtension.uri) {
	                    commonCapabilities.headerExtensions.push(rHeaderExtension);
	                    break;
	                  }
	                }
	              });

	          // FIXME: fecMechanisms
	          return commonCapabilities;
	        };

	    // Create ICE gatherer, ICE transport and DTLS transport.
	    window.RTCPeerConnection.prototype._createIceAndDtlsTransports =
	        function(mid, sdpMLineIndex) {
	          var self = this;
	          var iceGatherer = new RTCIceGatherer(self.iceOptions);
	          var iceTransport = new RTCIceTransport(iceGatherer);
	          iceGatherer.onlocalcandidate = function(evt) {
	            var event = new Event('icecandidate');
	            event.candidate = {sdpMid: mid, sdpMLineIndex: sdpMLineIndex};

	            var cand = evt.candidate;
	            var end = !cand || Object.keys(cand).length === 0;
	            // Edge emits an empty object for RTCIceCandidateComplete‥
	            if (end) {
	              // polyfill since RTCIceGatherer.state is not implemented in
	              // Edge 10547 yet.
	              if (iceGatherer.state === undefined) {
	                iceGatherer.state = 'completed';
	              }

	              // Emit a candidate with type endOfCandidates to make the samples
	              // work. Edge requires addIceCandidate with this empty candidate
	              // to start checking. The real solution is to signal
	              // end-of-candidates to the other side when getting the null
	              // candidate but some apps (like the samples) don't do that.
	              event.candidate.candidate =
	                  'candidate:1 1 udp 1 0.0.0.0 9 typ endOfCandidates';
	            } else {
	              // RTCIceCandidate doesn't have a component, needs to be added
	              cand.component = iceTransport.component === 'RTCP' ? 2 : 1;
	              event.candidate.candidate = SDPUtils.writeCandidate(cand);
	            }

	            // update local description.
	            var sections = SDPUtils.splitSections(self.localDescription.sdp);
	            if (event.candidate.candidate.indexOf('typ endOfCandidates')
	                === -1) {
	              sections[event.candidate.sdpMLineIndex + 1] +=
	                  'a=' + event.candidate.candidate + '\r\n';
	            } else {
	              sections[event.candidate.sdpMLineIndex + 1] +=
	                  'a=end-of-candidates\r\n';
	            }
	            self.localDescription.sdp = sections.join('');

	            var complete = self.transceivers.every(function(transceiver) {
	              return transceiver.iceGatherer &&
	                  transceiver.iceGatherer.state === 'completed';
	            });

	            // Emit candidate if localDescription is set.
	            // Also emits null candidate when all gatherers are complete.
	            switch (self.iceGatheringState) {
	              case 'new':
	                self._localIceCandidatesBuffer.push(event);
	                if (end && complete) {
	                  self._localIceCandidatesBuffer.push(
	                      new Event('icecandidate'));
	                }
	                break;
	              case 'gathering':
	                self._emitBufferedCandidates();
	                self.dispatchEvent(event);
	                if (self.onicecandidate !== null) {
	                  self.onicecandidate(event);
	                }
	                if (complete) {
	                  self.dispatchEvent(new Event('icecandidate'));
	                  if (self.onicecandidate !== null) {
	                    self.onicecandidate(new Event('icecandidate'));
	                  }
	                  self.iceGatheringState = 'complete';
	                }
	                break;
	              case 'complete':
	                // should not happen... currently!
	                break;
	              default: // no-op.
	                break;
	            }
	          };
	          iceTransport.onicestatechange = function() {
	            self._updateConnectionState();
	          };

	          var dtlsTransport = new RTCDtlsTransport(iceTransport);
	          dtlsTransport.ondtlsstatechange = function() {
	            self._updateConnectionState();
	          };
	          dtlsTransport.onerror = function() {
	            // onerror does not set state to failed by itself.
	            dtlsTransport.state = 'failed';
	            self._updateConnectionState();
	          };

	          return {
	            iceGatherer: iceGatherer,
	            iceTransport: iceTransport,
	            dtlsTransport: dtlsTransport
	          };
	        };

	    // Start the RTP Sender and Receiver for a transceiver.
	    window.RTCPeerConnection.prototype._transceive = function(transceiver,
	        send, recv) {
	      var params = this._getCommonCapabilities(transceiver.localCapabilities,
	          transceiver.remoteCapabilities);
	      if (send && transceiver.rtpSender) {
	        params.encodings = transceiver.sendEncodingParameters;
	        params.rtcp = {
	          cname: SDPUtils.localCName
	        };
	        if (transceiver.recvEncodingParameters.length) {
	          params.rtcp.ssrc = transceiver.recvEncodingParameters[0].ssrc;
	        }
	        transceiver.rtpSender.send(params);
	      }
	      if (recv && transceiver.rtpReceiver) {
	        // remove RTX field in Edge 14942
	        if (transceiver.kind === 'video'
	            && transceiver.recvEncodingParameters) {
	          transceiver.recvEncodingParameters.forEach(function(p) {
	            delete p.rtx;
	          });
	        }
	        params.encodings = transceiver.recvEncodingParameters;
	        params.rtcp = {
	          cname: transceiver.cname
	        };
	        if (transceiver.sendEncodingParameters.length) {
	          params.rtcp.ssrc = transceiver.sendEncodingParameters[0].ssrc;
	        }
	        transceiver.rtpReceiver.receive(params);
	      }
	    };

	    window.RTCPeerConnection.prototype.setLocalDescription =
	        function(description) {
	          var self = this;
	          var sections;
	          var sessionpart;
	          if (description.type === 'offer') {
	            // FIXME: What was the purpose of this empty if statement?
	            // if (!this._pendingOffer) {
	            // } else {
	            if (this._pendingOffer) {
	              // VERY limited support for SDP munging. Limited to:
	              // * changing the order of codecs
	              sections = SDPUtils.splitSections(description.sdp);
	              sessionpart = sections.shift();
	              sections.forEach(function(mediaSection, sdpMLineIndex) {
	                var caps = SDPUtils.parseRtpParameters(mediaSection);
	                self._pendingOffer[sdpMLineIndex].localCapabilities = caps;
	              });
	              this.transceivers = this._pendingOffer;
	              delete this._pendingOffer;
	            }
	          } else if (description.type === 'answer') {
	            sections = SDPUtils.splitSections(self.remoteDescription.sdp);
	            sessionpart = sections.shift();
	            var isIceLite = SDPUtils.matchPrefix(sessionpart,
	                'a=ice-lite').length > 0;
	            sections.forEach(function(mediaSection, sdpMLineIndex) {
	              var transceiver = self.transceivers[sdpMLineIndex];
	              var iceGatherer = transceiver.iceGatherer;
	              var iceTransport = transceiver.iceTransport;
	              var dtlsTransport = transceiver.dtlsTransport;
	              var localCapabilities = transceiver.localCapabilities;
	              var remoteCapabilities = transceiver.remoteCapabilities;

	              var rejected = mediaSection.split('\n', 1)[0]
	                  .split(' ', 2)[1] === '0';

	              if (!rejected && !transceiver.isDatachannel) {
	                var remoteIceParameters = SDPUtils.getIceParameters(
	                    mediaSection, sessionpart);
	                if (isIceLite) {
	                  var cands = SDPUtils.matchPrefix(mediaSection, 'a=candidate:')
	                  .map(function(cand) {
	                    return SDPUtils.parseCandidate(cand);
	                  })
	                  .filter(function(cand) {
	                    return cand.component === '1';
	                  });
	                  // ice-lite only includes host candidates in the SDP so we can
	                  // use setRemoteCandidates (which implies an
	                  // RTCIceCandidateComplete)
	                  if (cands.length) {
	                    iceTransport.setRemoteCandidates(cands);
	                  }
	                }
	                var remoteDtlsParameters = SDPUtils.getDtlsParameters(
	                    mediaSection, sessionpart);
	                if (isIceLite) {
	                  remoteDtlsParameters.role = 'server';
	                }

	                if (!self.usingBundle || sdpMLineIndex === 0) {
	                  iceTransport.start(iceGatherer, remoteIceParameters,
	                      isIceLite ? 'controlling' : 'controlled');
	                  dtlsTransport.start(remoteDtlsParameters);
	                }

	                // Calculate intersection of capabilities.
	                var params = self._getCommonCapabilities(localCapabilities,
	                    remoteCapabilities);

	                // Start the RTCRtpSender. The RTCRtpReceiver for this
	                // transceiver has already been started in setRemoteDescription.
	                self._transceive(transceiver,
	                    params.codecs.length > 0,
	                    false);
	              }
	            });
	          }

	          this.localDescription = {
	            type: description.type,
	            sdp: description.sdp
	          };
	          switch (description.type) {
	            case 'offer':
	              this._updateSignalingState('have-local-offer');
	              break;
	            case 'answer':
	              this._updateSignalingState('stable');
	              break;
	            default:
	              throw new TypeError('unsupported type "' + description.type +
	                  '"');
	          }

	          // If a success callback was provided, emit ICE candidates after it
	          // has been executed. Otherwise, emit callback after the Promise is
	          // resolved.
	          var hasCallback = arguments.length > 1 &&
	            typeof arguments[1] === 'function';
	          if (hasCallback) {
	            var cb = arguments[1];
	            window.setTimeout(function() {
	              cb();
	              if (self.iceGatheringState === 'new') {
	                self.iceGatheringState = 'gathering';
	              }
	              self._emitBufferedCandidates();
	            }, 0);
	          }
	          var p = Promise.resolve();
	          p.then(function() {
	            if (!hasCallback) {
	              if (self.iceGatheringState === 'new') {
	                self.iceGatheringState = 'gathering';
	              }
	              // Usually candidates will be emitted earlier.
	              window.setTimeout(self._emitBufferedCandidates.bind(self), 500);
	            }
	          });
	          return p;
	        };

	    window.RTCPeerConnection.prototype.setRemoteDescription =
	        function(description) {
	          var self = this;
	          var stream = new MediaStream();
	          var receiverList = [];
	          var sections = SDPUtils.splitSections(description.sdp);
	          var sessionpart = sections.shift();
	          var isIceLite = SDPUtils.matchPrefix(sessionpart,
	              'a=ice-lite').length > 0;
	          this.usingBundle = SDPUtils.matchPrefix(sessionpart,
	              'a=group:BUNDLE ').length > 0;
	          sections.forEach(function(mediaSection, sdpMLineIndex) {
	            var lines = SDPUtils.splitLines(mediaSection);
	            var mline = lines[0].substr(2).split(' ');
	            var kind = mline[0];
	            var rejected = mline[1] === '0';
	            var direction = SDPUtils.getDirection(mediaSection, sessionpart);

	            var mid = SDPUtils.matchPrefix(mediaSection, 'a=mid:');
	            if (mid.length) {
	              mid = mid[0].substr(6);
	            } else {
	              mid = SDPUtils.generateIdentifier();
	            }

	            // Reject datachannels which are not implemented yet.
	            if (kind === 'application' && mline[2] === 'DTLS/SCTP') {
	              self.transceivers[sdpMLineIndex] = {
	                mid: mid,
	                isDatachannel: true
	              };
	              return;
	            }

	            var transceiver;
	            var iceGatherer;
	            var iceTransport;
	            var dtlsTransport;
	            var rtpSender;
	            var rtpReceiver;
	            var sendEncodingParameters;
	            var recvEncodingParameters;
	            var localCapabilities;

	            var track;
	            // FIXME: ensure the mediaSection has rtcp-mux set.
	            var remoteCapabilities = SDPUtils.parseRtpParameters(mediaSection);
	            var remoteIceParameters;
	            var remoteDtlsParameters;
	            if (!rejected) {
	              remoteIceParameters = SDPUtils.getIceParameters(mediaSection,
	                  sessionpart);
	              remoteDtlsParameters = SDPUtils.getDtlsParameters(mediaSection,
	                  sessionpart);
	              remoteDtlsParameters.role = 'client';
	            }
	            recvEncodingParameters =
	                SDPUtils.parseRtpEncodingParameters(mediaSection);

	            var cname;
	            // Gets the first SSRC. Note that with RTX there might be multiple
	            // SSRCs.
	            var remoteSsrc = SDPUtils.matchPrefix(mediaSection, 'a=ssrc:')
	                .map(function(line) {
	                  return SDPUtils.parseSsrcMedia(line);
	                })
	                .filter(function(obj) {
	                  return obj.attribute === 'cname';
	                })[0];
	            if (remoteSsrc) {
	              cname = remoteSsrc.value;
	            }

	            var isComplete = SDPUtils.matchPrefix(mediaSection,
	                'a=end-of-candidates', sessionpart).length > 0;
	            var cands = SDPUtils.matchPrefix(mediaSection, 'a=candidate:')
	                .map(function(cand) {
	                  return SDPUtils.parseCandidate(cand);
	                })
	                .filter(function(cand) {
	                  return cand.component === '1';
	                });
	            if (description.type === 'offer' && !rejected) {
	              var transports = self.usingBundle && sdpMLineIndex > 0 ? {
	                iceGatherer: self.transceivers[0].iceGatherer,
	                iceTransport: self.transceivers[0].iceTransport,
	                dtlsTransport: self.transceivers[0].dtlsTransport
	              } : self._createIceAndDtlsTransports(mid, sdpMLineIndex);

	              if (isComplete) {
	                transports.iceTransport.setRemoteCandidates(cands);
	              }

	              localCapabilities = RTCRtpReceiver.getCapabilities(kind);

	              // filter RTX until additional stuff needed for RTX is implemented
	              // in adapter.js
	              localCapabilities.codecs = localCapabilities.codecs.filter(
	                  function(codec) {
	                    return codec.name !== 'rtx';
	                  });

	              sendEncodingParameters = [{
	                ssrc: (2 * sdpMLineIndex + 2) * 1001
	              }];

	              rtpReceiver = new RTCRtpReceiver(transports.dtlsTransport, kind);

	              track = rtpReceiver.track;
	              receiverList.push([track, rtpReceiver]);
	              // FIXME: not correct when there are multiple streams but that is
	              // not currently supported in this shim.
	              stream.addTrack(track);

	              // FIXME: look at direction.
	              if (self.localStreams.length > 0 &&
	                  self.localStreams[0].getTracks().length >= sdpMLineIndex) {
	                var localTrack;
	                if (kind === 'audio') {
	                  localTrack = self.localStreams[0].getAudioTracks()[0];
	                } else if (kind === 'video') {
	                  localTrack = self.localStreams[0].getVideoTracks()[0];
	                }
	                if (localTrack) {
	                  rtpSender = new RTCRtpSender(localTrack,
	                      transports.dtlsTransport);
	                }
	              }

	              self.transceivers[sdpMLineIndex] = {
	                iceGatherer: transports.iceGatherer,
	                iceTransport: transports.iceTransport,
	                dtlsTransport: transports.dtlsTransport,
	                localCapabilities: localCapabilities,
	                remoteCapabilities: remoteCapabilities,
	                rtpSender: rtpSender,
	                rtpReceiver: rtpReceiver,
	                kind: kind,
	                mid: mid,
	                cname: cname,
	                sendEncodingParameters: sendEncodingParameters,
	                recvEncodingParameters: recvEncodingParameters
	              };
	              // Start the RTCRtpReceiver now. The RTPSender is started in
	              // setLocalDescription.
	              self._transceive(self.transceivers[sdpMLineIndex],
	                  false,
	                  direction === 'sendrecv' || direction === 'sendonly');
	            } else if (description.type === 'answer' && !rejected) {
	              transceiver = self.transceivers[sdpMLineIndex];
	              iceGatherer = transceiver.iceGatherer;
	              iceTransport = transceiver.iceTransport;
	              dtlsTransport = transceiver.dtlsTransport;
	              rtpSender = transceiver.rtpSender;
	              rtpReceiver = transceiver.rtpReceiver;
	              sendEncodingParameters = transceiver.sendEncodingParameters;
	              localCapabilities = transceiver.localCapabilities;

	              self.transceivers[sdpMLineIndex].recvEncodingParameters =
	                  recvEncodingParameters;
	              self.transceivers[sdpMLineIndex].remoteCapabilities =
	                  remoteCapabilities;
	              self.transceivers[sdpMLineIndex].cname = cname;

	              if ((isIceLite || isComplete) && cands.length) {
	                iceTransport.setRemoteCandidates(cands);
	              }
	              if (!self.usingBundle || sdpMLineIndex === 0) {
	                iceTransport.start(iceGatherer, remoteIceParameters,
	                    'controlling');
	                dtlsTransport.start(remoteDtlsParameters);
	              }

	              self._transceive(transceiver,
	                  direction === 'sendrecv' || direction === 'recvonly',
	                  direction === 'sendrecv' || direction === 'sendonly');

	              if (rtpReceiver &&
	                  (direction === 'sendrecv' || direction === 'sendonly')) {
	                track = rtpReceiver.track;
	                receiverList.push([track, rtpReceiver]);
	                stream.addTrack(track);
	              } else {
	                // FIXME: actually the receiver should be created later.
	                delete transceiver.rtpReceiver;
	              }
	            }
	          });

	          this.remoteDescription = {
	            type: description.type,
	            sdp: description.sdp
	          };
	          switch (description.type) {
	            case 'offer':
	              this._updateSignalingState('have-remote-offer');
	              break;
	            case 'answer':
	              this._updateSignalingState('stable');
	              break;
	            default:
	              throw new TypeError('unsupported type "' + description.type +
	                  '"');
	          }
	          if (stream.getTracks().length) {
	            self.remoteStreams.push(stream);
	            window.setTimeout(function() {
	              var event = new Event('addstream');
	              event.stream = stream;
	              self.dispatchEvent(event);
	              if (self.onaddstream !== null) {
	                window.setTimeout(function() {
	                  self.onaddstream(event);
	                }, 0);
	              }

	              receiverList.forEach(function(item) {
	                var track = item[0];
	                var receiver = item[1];
	                var trackEvent = new Event('track');
	                trackEvent.track = track;
	                trackEvent.receiver = receiver;
	                trackEvent.streams = [stream];
	                self.dispatchEvent(event);
	                if (self.ontrack !== null) {
	                  window.setTimeout(function() {
	                    self.ontrack(trackEvent);
	                  }, 0);
	                }
	              });
	            }, 0);
	          }
	          if (arguments.length > 1 && typeof arguments[1] === 'function') {
	            window.setTimeout(arguments[1], 0);
	          }
	          return Promise.resolve();
	        };

	    window.RTCPeerConnection.prototype.close = function() {
	      this.transceivers.forEach(function(transceiver) {
	        /* not yet
	        if (transceiver.iceGatherer) {
	          transceiver.iceGatherer.close();
	        }
	        */
	        if (transceiver.iceTransport) {
	          transceiver.iceTransport.stop();
	        }
	        if (transceiver.dtlsTransport) {
	          transceiver.dtlsTransport.stop();
	        }
	        if (transceiver.rtpSender) {
	          transceiver.rtpSender.stop();
	        }
	        if (transceiver.rtpReceiver) {
	          transceiver.rtpReceiver.stop();
	        }
	      });
	      // FIXME: clean up tracks, local streams, remote streams, etc
	      this._updateSignalingState('closed');
	    };

	    // Update the signaling state.
	    window.RTCPeerConnection.prototype._updateSignalingState =
	        function(newState) {
	          this.signalingState = newState;
	          var event = new Event('signalingstatechange');
	          this.dispatchEvent(event);
	          if (this.onsignalingstatechange !== null) {
	            this.onsignalingstatechange(event);
	          }
	        };

	    // Determine whether to fire the negotiationneeded event.
	    window.RTCPeerConnection.prototype._maybeFireNegotiationNeeded =
	        function() {
	          // Fire away (for now).
	          var event = new Event('negotiationneeded');
	          this.dispatchEvent(event);
	          if (this.onnegotiationneeded !== null) {
	            this.onnegotiationneeded(event);
	          }
	        };

	    // Update the connection state.
	    window.RTCPeerConnection.prototype._updateConnectionState = function() {
	      var self = this;
	      var newState;
	      var states = {
	        'new': 0,
	        closed: 0,
	        connecting: 0,
	        checking: 0,
	        connected: 0,
	        completed: 0,
	        failed: 0
	      };
	      this.transceivers.forEach(function(transceiver) {
	        states[transceiver.iceTransport.state]++;
	        states[transceiver.dtlsTransport.state]++;
	      });
	      // ICETransport.completed and connected are the same for this purpose.
	      states.connected += states.completed;

	      newState = 'new';
	      if (states.failed > 0) {
	        newState = 'failed';
	      } else if (states.connecting > 0 || states.checking > 0) {
	        newState = 'connecting';
	      } else if (states.disconnected > 0) {
	        newState = 'disconnected';
	      } else if (states.new > 0) {
	        newState = 'new';
	      } else if (states.connected > 0 || states.completed > 0) {
	        newState = 'connected';
	      }

	      if (newState !== self.iceConnectionState) {
	        self.iceConnectionState = newState;
	        var event = new Event('iceconnectionstatechange');
	        this.dispatchEvent(event);
	        if (this.oniceconnectionstatechange !== null) {
	          this.oniceconnectionstatechange(event);
	        }
	      }
	    };

	    window.RTCPeerConnection.prototype.createOffer = function() {
	      var self = this;
	      if (this._pendingOffer) {
	        throw new Error('createOffer called while there is a pending offer.');
	      }
	      var offerOptions;
	      if (arguments.length === 1 && typeof arguments[0] !== 'function') {
	        offerOptions = arguments[0];
	      } else if (arguments.length === 3) {
	        offerOptions = arguments[2];
	      }

	      var tracks = [];
	      var numAudioTracks = 0;
	      var numVideoTracks = 0;
	      // Default to sendrecv.
	      if (this.localStreams.length) {
	        numAudioTracks = this.localStreams[0].getAudioTracks().length;
	        numVideoTracks = this.localStreams[0].getVideoTracks().length;
	      }
	      // Determine number of audio and video tracks we need to send/recv.
	      if (offerOptions) {
	        // Reject Chrome legacy constraints.
	        if (offerOptions.mandatory || offerOptions.optional) {
	          throw new TypeError(
	              'Legacy mandatory/optional constraints not supported.');
	        }
	        if (offerOptions.offerToReceiveAudio !== undefined) {
	          numAudioTracks = offerOptions.offerToReceiveAudio;
	        }
	        if (offerOptions.offerToReceiveVideo !== undefined) {
	          numVideoTracks = offerOptions.offerToReceiveVideo;
	        }
	      }
	      if (this.localStreams.length) {
	        // Push local streams.
	        this.localStreams[0].getTracks().forEach(function(track) {
	          tracks.push({
	            kind: track.kind,
	            track: track,
	            wantReceive: track.kind === 'audio' ?
	                numAudioTracks > 0 : numVideoTracks > 0
	          });
	          if (track.kind === 'audio') {
	            numAudioTracks--;
	          } else if (track.kind === 'video') {
	            numVideoTracks--;
	          }
	        });
	      }
	      // Create M-lines for recvonly streams.
	      while (numAudioTracks > 0 || numVideoTracks > 0) {
	        if (numAudioTracks > 0) {
	          tracks.push({
	            kind: 'audio',
	            wantReceive: true
	          });
	          numAudioTracks--;
	        }
	        if (numVideoTracks > 0) {
	          tracks.push({
	            kind: 'video',
	            wantReceive: true
	          });
	          numVideoTracks--;
	        }
	      }

	      var sdp = SDPUtils.writeSessionBoilerplate();
	      var transceivers = [];
	      tracks.forEach(function(mline, sdpMLineIndex) {
	        // For each track, create an ice gatherer, ice transport,
	        // dtls transport, potentially rtpsender and rtpreceiver.
	        var track = mline.track;
	        var kind = mline.kind;
	        var mid = SDPUtils.generateIdentifier();

	        var transports = self.usingBundle && sdpMLineIndex > 0 ? {
	          iceGatherer: transceivers[0].iceGatherer,
	          iceTransport: transceivers[0].iceTransport,
	          dtlsTransport: transceivers[0].dtlsTransport
	        } : self._createIceAndDtlsTransports(mid, sdpMLineIndex);

	        var localCapabilities = RTCRtpSender.getCapabilities(kind);
	        // filter RTX until additional stuff needed for RTX is implemented
	        // in adapter.js
	        localCapabilities.codecs = localCapabilities.codecs.filter(
	            function(codec) {
	              return codec.name !== 'rtx';
	            });
	        localCapabilities.codecs.forEach(function(codec) {
	          // work around https://bugs.chromium.org/p/webrtc/issues/detail?id=6552
	          // by adding level-asymmetry-allowed=1
	          if (codec.name === 'H264' &&
	              codec.parameters['level-asymmetry-allowed'] === undefined) {
	            codec.parameters['level-asymmetry-allowed'] = '1';
	          }
	        });

	        var rtpSender;
	        var rtpReceiver;

	        // generate an ssrc now, to be used later in rtpSender.send
	        var sendEncodingParameters = [{
	          ssrc: (2 * sdpMLineIndex + 1) * 1001
	        }];
	        if (track) {
	          rtpSender = new RTCRtpSender(track, transports.dtlsTransport);
	        }

	        if (mline.wantReceive) {
	          rtpReceiver = new RTCRtpReceiver(transports.dtlsTransport, kind);
	        }

	        transceivers[sdpMLineIndex] = {
	          iceGatherer: transports.iceGatherer,
	          iceTransport: transports.iceTransport,
	          dtlsTransport: transports.dtlsTransport,
	          localCapabilities: localCapabilities,
	          remoteCapabilities: null,
	          rtpSender: rtpSender,
	          rtpReceiver: rtpReceiver,
	          kind: kind,
	          mid: mid,
	          sendEncodingParameters: sendEncodingParameters,
	          recvEncodingParameters: null
	        };
	      });
	      if (this.usingBundle) {
	        sdp += 'a=group:BUNDLE ' + transceivers.map(function(t) {
	          return t.mid;
	        }).join(' ') + '\r\n';
	      }
	      tracks.forEach(function(mline, sdpMLineIndex) {
	        var transceiver = transceivers[sdpMLineIndex];
	        sdp += SDPUtils.writeMediaSection(transceiver,
	            transceiver.localCapabilities, 'offer', self.localStreams[0]);
	      });

	      this._pendingOffer = transceivers;
	      var desc = new RTCSessionDescription({
	        type: 'offer',
	        sdp: sdp
	      });
	      if (arguments.length && typeof arguments[0] === 'function') {
	        window.setTimeout(arguments[0], 0, desc);
	      }
	      return Promise.resolve(desc);
	    };

	    window.RTCPeerConnection.prototype.createAnswer = function() {
	      var self = this;

	      var sdp = SDPUtils.writeSessionBoilerplate();
	      if (this.usingBundle) {
	        sdp += 'a=group:BUNDLE ' + this.transceivers.map(function(t) {
	          return t.mid;
	        }).join(' ') + '\r\n';
	      }
	      this.transceivers.forEach(function(transceiver) {
	        if (transceiver.isDatachannel) {
	          sdp += 'm=application 0 DTLS/SCTP 5000\r\n' +
	              'c=IN IP4 0.0.0.0\r\n' +
	              'a=mid:' + transceiver.mid + '\r\n';
	          return;
	        }
	        // Calculate intersection of capabilities.
	        var commonCapabilities = self._getCommonCapabilities(
	            transceiver.localCapabilities,
	            transceiver.remoteCapabilities);

	        sdp += SDPUtils.writeMediaSection(transceiver, commonCapabilities,
	            'answer', self.localStreams[0]);
	      });

	      var desc = new RTCSessionDescription({
	        type: 'answer',
	        sdp: sdp
	      });
	      if (arguments.length && typeof arguments[0] === 'function') {
	        window.setTimeout(arguments[0], 0, desc);
	      }
	      return Promise.resolve(desc);
	    };

	    window.RTCPeerConnection.prototype.addIceCandidate = function(candidate) {
	      if (!candidate) {
	        this.transceivers.forEach(function(transceiver) {
	          transceiver.iceTransport.addRemoteCandidate({});
	        });
	      } else {
	        var mLineIndex = candidate.sdpMLineIndex;
	        if (candidate.sdpMid) {
	          for (var i = 0; i < this.transceivers.length; i++) {
	            if (this.transceivers[i].mid === candidate.sdpMid) {
	              mLineIndex = i;
	              break;
	            }
	          }
	        }
	        var transceiver = this.transceivers[mLineIndex];
	        if (transceiver) {
	          var cand = Object.keys(candidate.candidate).length > 0 ?
	              SDPUtils.parseCandidate(candidate.candidate) : {};
	          // Ignore Chrome's invalid candidates since Edge does not like them.
	          if (cand.protocol === 'tcp' && (cand.port === 0 || cand.port === 9)) {
	            return;
	          }
	          // Ignore RTCP candidates, we assume RTCP-MUX.
	          if (cand.component !== '1') {
	            return;
	          }
	          // A dirty hack to make samples work.
	          if (cand.type === 'endOfCandidates') {
	            cand = {};
	          }
	          transceiver.iceTransport.addRemoteCandidate(cand);

	          // update the remoteDescription.
	          var sections = SDPUtils.splitSections(this.remoteDescription.sdp);
	          sections[mLineIndex + 1] += (cand.type ? candidate.candidate.trim()
	              : 'a=end-of-candidates') + '\r\n';
	          this.remoteDescription.sdp = sections.join('');
	        }
	      }
	      if (arguments.length > 1 && typeof arguments[1] === 'function') {
	        window.setTimeout(arguments[1], 0);
	      }
	      return Promise.resolve();
	    };

	    window.RTCPeerConnection.prototype.getStats = function() {
	      var promises = [];
	      this.transceivers.forEach(function(transceiver) {
	        ['rtpSender', 'rtpReceiver', 'iceGatherer', 'iceTransport',
	            'dtlsTransport'].forEach(function(method) {
	              if (transceiver[method]) {
	                promises.push(transceiver[method].getStats());
	              }
	            });
	      });
	      var cb = arguments.length > 1 && typeof arguments[1] === 'function' &&
	          arguments[1];
	      return new Promise(function(resolve) {
	        // shim getStats with maplike support
	        var results = new Map();
	        Promise.all(promises).then(function(res) {
	          res.forEach(function(result) {
	            Object.keys(result).forEach(function(id) {
	              results.set(id, result[id]);
	              results[id] = result[id];
	            });
	          });
	          if (cb) {
	            window.setTimeout(cb, 0, results);
	          }
	          resolve(results);
	        });
	      });
	    };
	  }
	};

	// Expose public methods.
	module.exports = {
	  shimPeerConnection: edgeShim.shimPeerConnection,
	  shimGetUserMedia: __webpack_require__(883)
	};


/***/ }),
/* 883 */
/***/ (function(module, exports) {

	/*
	 *  Copyright (c) 2016 The WebRTC project authors. All Rights Reserved.
	 *
	 *  Use of this source code is governed by a BSD-style license
	 *  that can be found in the LICENSE file in the root of the source
	 *  tree.
	 */
	 /* eslint-env node */
	'use strict';

	// Expose public methods.
	module.exports = function() {
	  var shimError_ = function(e) {
	    return {
	      name: {PermissionDeniedError: 'NotAllowedError'}[e.name] || e.name,
	      message: e.message,
	      constraint: e.constraint,
	      toString: function() {
	        return this.name;
	      }
	    };
	  };

	  // getUserMedia error shim.
	  var origGetUserMedia = navigator.mediaDevices.getUserMedia.
	      bind(navigator.mediaDevices);
	  navigator.mediaDevices.getUserMedia = function(c) {
	    return origGetUserMedia(c).catch(function(e) {
	      return Promise.reject(shimError_(e));
	    });
	  };
	};


/***/ }),
/* 884 */
/***/ (function(module, exports, __webpack_require__) {

	/*
	 *  Copyright (c) 2016 The WebRTC project authors. All Rights Reserved.
	 *
	 *  Use of this source code is governed by a BSD-style license
	 *  that can be found in the LICENSE file in the root of the source
	 *  tree.
	 */
	 /* eslint-env node */
	'use strict';

	var browserDetails = __webpack_require__(47).browserDetails;

	var firefoxShim = {
	  shimOnTrack: function() {
	    if (typeof window === 'object' && window.RTCPeerConnection && !('ontrack' in
	        window.RTCPeerConnection.prototype)) {
	      Object.defineProperty(window.RTCPeerConnection.prototype, 'ontrack', {
	        get: function() {
	          return this._ontrack;
	        },
	        set: function(f) {
	          if (this._ontrack) {
	            this.removeEventListener('track', this._ontrack);
	            this.removeEventListener('addstream', this._ontrackpoly);
	          }
	          this.addEventListener('track', this._ontrack = f);
	          this.addEventListener('addstream', this._ontrackpoly = function(e) {
	            e.stream.getTracks().forEach(function(track) {
	              var event = new Event('track');
	              event.track = track;
	              event.receiver = {track: track};
	              event.streams = [e.stream];
	              this.dispatchEvent(event);
	            }.bind(this));
	          }.bind(this));
	        }
	      });
	    }
	  },

	  shimSourceObject: function() {
	    // Firefox has supported mozSrcObject since FF22, unprefixed in 42.
	    if (typeof window === 'object') {
	      if (window.HTMLMediaElement &&
	        !('srcObject' in window.HTMLMediaElement.prototype)) {
	        // Shim the srcObject property, once, when HTMLMediaElement is found.
	        Object.defineProperty(window.HTMLMediaElement.prototype, 'srcObject', {
	          get: function() {
	            return this.mozSrcObject;
	          },
	          set: function(stream) {
	            this.mozSrcObject = stream;
	          }
	        });
	      }
	    }
	  },

	  shimPeerConnection: function() {
	    if (typeof window !== 'object' || !(window.RTCPeerConnection ||
	        window.mozRTCPeerConnection)) {
	      return; // probably media.peerconnection.enabled=false in about:config
	    }
	    // The RTCPeerConnection object.
	    if (!window.RTCPeerConnection) {
	      window.RTCPeerConnection = function(pcConfig, pcConstraints) {
	        if (browserDetails.version < 38) {
	          // .urls is not supported in FF < 38.
	          // create RTCIceServers with a single url.
	          if (pcConfig && pcConfig.iceServers) {
	            var newIceServers = [];
	            for (var i = 0; i < pcConfig.iceServers.length; i++) {
	              var server = pcConfig.iceServers[i];
	              if (server.hasOwnProperty('urls')) {
	                for (var j = 0; j < server.urls.length; j++) {
	                  var newServer = {
	                    url: server.urls[j]
	                  };
	                  if (server.urls[j].indexOf('turn') === 0) {
	                    newServer.username = server.username;
	                    newServer.credential = server.credential;
	                  }
	                  newIceServers.push(newServer);
	                }
	              } else {
	                newIceServers.push(pcConfig.iceServers[i]);
	              }
	            }
	            pcConfig.iceServers = newIceServers;
	          }
	        }
	        return new mozRTCPeerConnection(pcConfig, pcConstraints);
	      };
	      window.RTCPeerConnection.prototype = mozRTCPeerConnection.prototype;

	      // wrap static methods. Currently just generateCertificate.
	      if (mozRTCPeerConnection.generateCertificate) {
	        Object.defineProperty(window.RTCPeerConnection, 'generateCertificate', {
	          get: function() {
	            return mozRTCPeerConnection.generateCertificate;
	          }
	        });
	      }

	      window.RTCSessionDescription = mozRTCSessionDescription;
	      window.RTCIceCandidate = mozRTCIceCandidate;
	    }

	    // shim away need for obsolete RTCIceCandidate/RTCSessionDescription.
	    ['setLocalDescription', 'setRemoteDescription', 'addIceCandidate']
	        .forEach(function(method) {
	          var nativeMethod = RTCPeerConnection.prototype[method];
	          RTCPeerConnection.prototype[method] = function() {
	            arguments[0] = new ((method === 'addIceCandidate') ?
	                RTCIceCandidate : RTCSessionDescription)(arguments[0]);
	            return nativeMethod.apply(this, arguments);
	          };
	        });

	    // support for addIceCandidate(null or undefined)
	    var nativeAddIceCandidate =
	        RTCPeerConnection.prototype.addIceCandidate;
	    RTCPeerConnection.prototype.addIceCandidate = function() {
	      if (!arguments[0]) {
	        if (arguments[1]) {
	          arguments[1].apply(null);
	        }
	        return Promise.resolve();
	      }
	      return nativeAddIceCandidate.apply(this, arguments);
	    };

	    if (browserDetails.version < 48) {
	      // shim getStats with maplike support
	      var makeMapStats = function(stats) {
	        var map = new Map();
	        Object.keys(stats).forEach(function(key) {
	          map.set(key, stats[key]);
	          map[key] = stats[key];
	        });
	        return map;
	      };

	      var nativeGetStats = RTCPeerConnection.prototype.getStats;
	      RTCPeerConnection.prototype.getStats = function(selector, onSucc, onErr) {
	        return nativeGetStats.apply(this, [selector || null])
	          .then(function(stats) {
	            return makeMapStats(stats);
	          })
	          .then(onSucc, onErr);
	      };
	    }
	  }
	};

	// Expose public methods.
	module.exports = {
	  shimOnTrack: firefoxShim.shimOnTrack,
	  shimSourceObject: firefoxShim.shimSourceObject,
	  shimPeerConnection: firefoxShim.shimPeerConnection,
	  shimGetUserMedia: __webpack_require__(885)
	};


/***/ }),
/* 885 */
/***/ (function(module, exports, __webpack_require__) {

	/*
	 *  Copyright (c) 2016 The WebRTC project authors. All Rights Reserved.
	 *
	 *  Use of this source code is governed by a BSD-style license
	 *  that can be found in the LICENSE file in the root of the source
	 *  tree.
	 */
	 /* eslint-env node */
	'use strict';

	var logging = __webpack_require__(47).log;
	var browserDetails = __webpack_require__(47).browserDetails;

	// Expose public methods.
	module.exports = function() {
	  var shimError_ = function(e) {
	    return {
	      name: {
	        SecurityError: 'NotAllowedError',
	        PermissionDeniedError: 'NotAllowedError'
	      }[e.name] || e.name,
	      message: {
	        'The operation is insecure.': 'The request is not allowed by the ' +
	        'user agent or the platform in the current context.'
	      }[e.message] || e.message,
	      constraint: e.constraint,
	      toString: function() {
	        return this.name + (this.message && ': ') + this.message;
	      }
	    };
	  };

	  // getUserMedia constraints shim.
	  var getUserMedia_ = function(constraints, onSuccess, onError) {
	    var constraintsToFF37_ = function(c) {
	      if (typeof c !== 'object' || c.require) {
	        return c;
	      }
	      var require = [];
	      Object.keys(c).forEach(function(key) {
	        if (key === 'require' || key === 'advanced' || key === 'mediaSource') {
	          return;
	        }
	        var r = c[key] = (typeof c[key] === 'object') ?
	            c[key] : {ideal: c[key]};
	        if (r.min !== undefined ||
	            r.max !== undefined || r.exact !== undefined) {
	          require.push(key);
	        }
	        if (r.exact !== undefined) {
	          if (typeof r.exact === 'number') {
	            r. min = r.max = r.exact;
	          } else {
	            c[key] = r.exact;
	          }
	          delete r.exact;
	        }
	        if (r.ideal !== undefined) {
	          c.advanced = c.advanced || [];
	          var oc = {};
	          if (typeof r.ideal === 'number') {
	            oc[key] = {min: r.ideal, max: r.ideal};
	          } else {
	            oc[key] = r.ideal;
	          }
	          c.advanced.push(oc);
	          delete r.ideal;
	          if (!Object.keys(r).length) {
	            delete c[key];
	          }
	        }
	      });
	      if (require.length) {
	        c.require = require;
	      }
	      return c;
	    };
	    constraints = JSON.parse(JSON.stringify(constraints));
	    if (browserDetails.version < 38) {
	      logging('spec: ' + JSON.stringify(constraints));
	      if (constraints.audio) {
	        constraints.audio = constraintsToFF37_(constraints.audio);
	      }
	      if (constraints.video) {
	        constraints.video = constraintsToFF37_(constraints.video);
	      }
	      logging('ff37: ' + JSON.stringify(constraints));
	    }
	    return navigator.mozGetUserMedia(constraints, onSuccess, function(e) {
	      onError(shimError_(e));
	    });
	  };

	  // Returns the result of getUserMedia as a Promise.
	  var getUserMediaPromise_ = function(constraints) {
	    return new Promise(function(resolve, reject) {
	      getUserMedia_(constraints, resolve, reject);
	    });
	  };

	  // Shim for mediaDevices on older versions.
	  if (!navigator.mediaDevices) {
	    navigator.mediaDevices = {getUserMedia: getUserMediaPromise_,
	      addEventListener: function() { },
	      removeEventListener: function() { }
	    };
	  }
	  navigator.mediaDevices.enumerateDevices =
	      navigator.mediaDevices.enumerateDevices || function() {
	        return new Promise(function(resolve) {
	          var infos = [
	            {kind: 'audioinput', deviceId: 'default', label: '', groupId: ''},
	            {kind: 'videoinput', deviceId: 'default', label: '', groupId: ''}
	          ];
	          resolve(infos);
	        });
	      };

	  if (browserDetails.version < 41) {
	    // Work around http://bugzil.la/1169665
	    var orgEnumerateDevices =
	        navigator.mediaDevices.enumerateDevices.bind(navigator.mediaDevices);
	    navigator.mediaDevices.enumerateDevices = function() {
	      return orgEnumerateDevices().then(undefined, function(e) {
	        if (e.name === 'NotFoundError') {
	          return [];
	        }
	        throw e;
	      });
	    };
	  }
	  if (browserDetails.version < 49) {
	    var origGetUserMedia = navigator.mediaDevices.getUserMedia.
	        bind(navigator.mediaDevices);
	    navigator.mediaDevices.getUserMedia = function(c) {
	      return origGetUserMedia(c).then(function(stream) {
	        // Work around https://bugzil.la/802326
	        if (c.audio && !stream.getAudioTracks().length ||
	            c.video && !stream.getVideoTracks().length) {
	          stream.getTracks().forEach(function(track) {
	            track.stop();
	          });
	          throw new DOMException('The object can not be found here.',
	                                 'NotFoundError');
	        }
	        return stream;
	      }, function(e) {
	        return Promise.reject(shimError_(e));
	      });
	    };
	  }
	  navigator.getUserMedia = function(constraints, onSuccess, onError) {
	    if (browserDetails.version < 44) {
	      return getUserMedia_(constraints, onSuccess, onError);
	    }
	    // Replace Firefox 44+'s deprecation warning with unprefixed version.
	    console.warn('navigator.getUserMedia has been replaced by ' +
	                 'navigator.mediaDevices.getUserMedia');
	    navigator.mediaDevices.getUserMedia(constraints).then(onSuccess, onError);
	  };
	};


/***/ }),
/* 886 */
/***/ (function(module, exports) {

	/*
	 *  Copyright (c) 2016 The WebRTC project authors. All Rights Reserved.
	 *
	 *  Use of this source code is governed by a BSD-style license
	 *  that can be found in the LICENSE file in the root of the source
	 *  tree.
	 */
	'use strict';
	var safariShim = {
	  // TODO: DrAlex, should be here, double check against LayoutTests
	  // shimOnTrack: function() { },

	  // TODO: once the back-end for the mac port is done, add.
	  // TODO: check for webkitGTK+
	  // shimPeerConnection: function() { },

	  shimGetUserMedia: function() {
	    navigator.getUserMedia = navigator.webkitGetUserMedia;
	  }
	};

	// Expose public methods.
	module.exports = {
	  shimGetUserMedia: safariShim.shimGetUserMedia
	  // TODO
	  // shimOnTrack: safariShim.shimOnTrack,
	  // shimPeerConnection: safariShim.shimPeerConnection
	};


/***/ }),
/* 887 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';

	exports.__esModule = true;

	var _routerWarning = __webpack_require__(25);

	var _routerWarning2 = _interopRequireDefault(_routerWarning);

	var _InternalPropTypes = __webpack_require__(84);

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

	/**
	 * A mixin that adds the "history" instance variable to components.
	 */
	var History = {

	  contextTypes: {
	    history: _InternalPropTypes.history
	  },

	  componentWillMount: function componentWillMount() {
	    (undefined) !== 'production' ? (0, _routerWarning2.default)(false, 'the `History` mixin is deprecated, please access `context.router` with your own `contextTypes`. http://tiny.cc/router-historymixin') : void 0;
	    this.history = this.context.history;
	  }
	};

	exports.default = History;
	module.exports = exports['default'];

/***/ }),
/* 888 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';

	exports.__esModule = true;

	var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

	var _react = __webpack_require__(4);

	var _react2 = _interopRequireDefault(_react);

	var _Link = __webpack_require__(362);

	var _Link2 = _interopRequireDefault(_Link);

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

	/**
	 * An <IndexLink> is used to link to an <IndexRoute>.
	 */
	var IndexLink = _react2.default.createClass({
	  displayName: 'IndexLink',
	  render: function render() {
	    return _react2.default.createElement(_Link2.default, _extends({}, this.props, { onlyActiveOnIndex: true }));
	  }
	});

	exports.default = IndexLink;
	module.exports = exports['default'];

/***/ }),
/* 889 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';

	exports.__esModule = true;

	var _react = __webpack_require__(4);

	var _react2 = _interopRequireDefault(_react);

	var _routerWarning = __webpack_require__(25);

	var _routerWarning2 = _interopRequireDefault(_routerWarning);

	var _invariant = __webpack_require__(29);

	var _invariant2 = _interopRequireDefault(_invariant);

	var _Redirect = __webpack_require__(363);

	var _Redirect2 = _interopRequireDefault(_Redirect);

	var _InternalPropTypes = __webpack_require__(84);

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

	var _React$PropTypes = _react2.default.PropTypes;
	var string = _React$PropTypes.string;
	var object = _React$PropTypes.object;

	/**
	 * An <IndexRedirect> is used to redirect from an indexRoute.
	 */

	var IndexRedirect = _react2.default.createClass({
	  displayName: 'IndexRedirect',


	  statics: {
	    createRouteFromReactElement: function createRouteFromReactElement(element, parentRoute) {
	      /* istanbul ignore else: sanity check */
	      if (parentRoute) {
	        parentRoute.indexRoute = _Redirect2.default.createRouteFromReactElement(element);
	      } else {
	        (undefined) !== 'production' ? (0, _routerWarning2.default)(false, 'An <IndexRedirect> does not make sense at the root of your route config') : void 0;
	      }
	    }
	  },

	  propTypes: {
	    to: string.isRequired,
	    query: object,
	    state: object,
	    onEnter: _InternalPropTypes.falsy,
	    children: _InternalPropTypes.falsy
	  },

	  /* istanbul ignore next: sanity check */
	  render: function render() {
	     true ? (undefined) !== 'production' ? (0, _invariant2.default)(false, '<IndexRedirect> elements are for router configuration only and should not be rendered') : (0, _invariant2.default)(false) : void 0;
	  }
	});

	exports.default = IndexRedirect;
	module.exports = exports['default'];

/***/ }),
/* 890 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';

	exports.__esModule = true;

	var _react = __webpack_require__(4);

	var _react2 = _interopRequireDefault(_react);

	var _routerWarning = __webpack_require__(25);

	var _routerWarning2 = _interopRequireDefault(_routerWarning);

	var _invariant = __webpack_require__(29);

	var _invariant2 = _interopRequireDefault(_invariant);

	var _RouteUtils = __webpack_require__(66);

	var _InternalPropTypes = __webpack_require__(84);

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

	var func = _react2.default.PropTypes.func;

	/**
	 * An <IndexRoute> is used to specify its parent's <Route indexRoute> in
	 * a JSX route config.
	 */

	var IndexRoute = _react2.default.createClass({
	  displayName: 'IndexRoute',


	  statics: {
	    createRouteFromReactElement: function createRouteFromReactElement(element, parentRoute) {
	      /* istanbul ignore else: sanity check */
	      if (parentRoute) {
	        parentRoute.indexRoute = (0, _RouteUtils.createRouteFromReactElement)(element);
	      } else {
	        (undefined) !== 'production' ? (0, _routerWarning2.default)(false, 'An <IndexRoute> does not make sense at the root of your route config') : void 0;
	      }
	    }
	  },

	  propTypes: {
	    path: _InternalPropTypes.falsy,
	    component: _InternalPropTypes.component,
	    components: _InternalPropTypes.components,
	    getComponent: func,
	    getComponents: func
	  },

	  /* istanbul ignore next: sanity check */
	  render: function render() {
	     true ? (undefined) !== 'production' ? (0, _invariant2.default)(false, '<IndexRoute> elements are for router configuration only and should not be rendered') : (0, _invariant2.default)(false) : void 0;
	  }
	});

	exports.default = IndexRoute;
	module.exports = exports['default'];

/***/ }),
/* 891 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';

	exports.__esModule = true;

	var _routerWarning = __webpack_require__(25);

	var _routerWarning2 = _interopRequireDefault(_routerWarning);

	var _react = __webpack_require__(4);

	var _react2 = _interopRequireDefault(_react);

	var _invariant = __webpack_require__(29);

	var _invariant2 = _interopRequireDefault(_invariant);

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

	var object = _react2.default.PropTypes.object;

	/**
	 * The Lifecycle mixin adds the routerWillLeave lifecycle method to a
	 * component that may be used to cancel a transition or prompt the user
	 * for confirmation.
	 *
	 * On standard transitions, routerWillLeave receives a single argument: the
	 * location we're transitioning to. To cancel the transition, return false.
	 * To prompt the user for confirmation, return a prompt message (string).
	 *
	 * During the beforeunload event (assuming you're using the useBeforeUnload
	 * history enhancer), routerWillLeave does not receive a location object
	 * because it isn't possible for us to know the location we're transitioning
	 * to. In this case routerWillLeave must return a prompt message to prevent
	 * the user from closing the window/tab.
	 */

	var Lifecycle = {

	  contextTypes: {
	    history: object.isRequired,
	    // Nested children receive the route as context, either
	    // set by the route component using the RouteContext mixin
	    // or by some other ancestor.
	    route: object
	  },

	  propTypes: {
	    // Route components receive the route object as a prop.
	    route: object
	  },

	  componentDidMount: function componentDidMount() {
	    (undefined) !== 'production' ? (0, _routerWarning2.default)(false, 'the `Lifecycle` mixin is deprecated, please use `context.router.setRouteLeaveHook(route, hook)`. http://tiny.cc/router-lifecyclemixin') : void 0;
	    !this.routerWillLeave ? (undefined) !== 'production' ? (0, _invariant2.default)(false, 'The Lifecycle mixin requires you to define a routerWillLeave method') : (0, _invariant2.default)(false) : void 0;

	    var route = this.props.route || this.context.route;

	    !route ? (undefined) !== 'production' ? (0, _invariant2.default)(false, 'The Lifecycle mixin must be used on either a) a <Route component> or ' + 'b) a descendant of a <Route component> that uses the RouteContext mixin') : (0, _invariant2.default)(false) : void 0;

	    this._unlistenBeforeLeavingRoute = this.context.history.listenBeforeLeavingRoute(route, this.routerWillLeave);
	  },
	  componentWillUnmount: function componentWillUnmount() {
	    if (this._unlistenBeforeLeavingRoute) this._unlistenBeforeLeavingRoute();
	  }
	};

	exports.default = Lifecycle;
	module.exports = exports['default'];

/***/ }),
/* 892 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';

	exports.__esModule = true;

	var _react = __webpack_require__(4);

	var _react2 = _interopRequireDefault(_react);

	var _invariant = __webpack_require__(29);

	var _invariant2 = _interopRequireDefault(_invariant);

	var _RouteUtils = __webpack_require__(66);

	var _InternalPropTypes = __webpack_require__(84);

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

	var _React$PropTypes = _react2.default.PropTypes;
	var string = _React$PropTypes.string;
	var func = _React$PropTypes.func;

	/**
	 * A <Route> is used to declare which components are rendered to the
	 * page when the URL matches a given pattern.
	 *
	 * Routes are arranged in a nested tree structure. When a new URL is
	 * requested, the tree is searched depth-first to find a route whose
	 * path matches the URL.  When one is found, all routes in the tree
	 * that lead to it are considered "active" and their components are
	 * rendered into the DOM, nested in the same order as in the tree.
	 */

	var Route = _react2.default.createClass({
	  displayName: 'Route',


	  statics: {
	    createRouteFromReactElement: _RouteUtils.createRouteFromReactElement
	  },

	  propTypes: {
	    path: string,
	    component: _InternalPropTypes.component,
	    components: _InternalPropTypes.components,
	    getComponent: func,
	    getComponents: func
	  },

	  /* istanbul ignore next: sanity check */
	  render: function render() {
	     true ? (undefined) !== 'production' ? (0, _invariant2.default)(false, '<Route> elements are for router configuration only and should not be rendered') : (0, _invariant2.default)(false) : void 0;
	  }
	});

	exports.default = Route;
	module.exports = exports['default'];

/***/ }),
/* 893 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';

	exports.__esModule = true;

	var _routerWarning = __webpack_require__(25);

	var _routerWarning2 = _interopRequireDefault(_routerWarning);

	var _react = __webpack_require__(4);

	var _react2 = _interopRequireDefault(_react);

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

	var object = _react2.default.PropTypes.object;

	/**
	 * The RouteContext mixin provides a convenient way for route
	 * components to set the route in context. This is needed for
	 * routes that render elements that want to use the Lifecycle
	 * mixin to prevent transitions.
	 */

	var RouteContext = {

	  propTypes: {
	    route: object.isRequired
	  },

	  childContextTypes: {
	    route: object.isRequired
	  },

	  getChildContext: function getChildContext() {
	    return {
	      route: this.props.route
	    };
	  },
	  componentWillMount: function componentWillMount() {
	    (undefined) !== 'production' ? (0, _routerWarning2.default)(false, 'The `RouteContext` mixin is deprecated. You can provide `this.props.route` on context with your own `contextTypes`. http://tiny.cc/router-routecontextmixin') : void 0;
	  }
	};

	exports.default = RouteContext;
	module.exports = exports['default'];

/***/ }),
/* 894 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';

	exports.__esModule = true;

	var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

	var _createHashHistory = __webpack_require__(330);

	var _createHashHistory2 = _interopRequireDefault(_createHashHistory);

	var _useQueries = __webpack_require__(142);

	var _useQueries2 = _interopRequireDefault(_useQueries);

	var _invariant = __webpack_require__(29);

	var _invariant2 = _interopRequireDefault(_invariant);

	var _react = __webpack_require__(4);

	var _react2 = _interopRequireDefault(_react);

	var _createTransitionManager = __webpack_require__(231);

	var _createTransitionManager2 = _interopRequireDefault(_createTransitionManager);

	var _InternalPropTypes = __webpack_require__(84);

	var _RouterContext = __webpack_require__(150);

	var _RouterContext2 = _interopRequireDefault(_RouterContext);

	var _RouteUtils = __webpack_require__(66);

	var _RouterUtils = __webpack_require__(364);

	var _routerWarning = __webpack_require__(25);

	var _routerWarning2 = _interopRequireDefault(_routerWarning);

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

	function _objectWithoutProperties(obj, keys) { var target = {}; for (var i in obj) { if (keys.indexOf(i) >= 0) continue; if (!Object.prototype.hasOwnProperty.call(obj, i)) continue; target[i] = obj[i]; } return target; }

	function isDeprecatedHistory(history) {
	  return !history || !history.__v2_compatible__;
	}

	/* istanbul ignore next: sanity check */
	function isUnsupportedHistory(history) {
	  // v3 histories expose getCurrentLocation, but aren't currently supported.
	  return history && history.getCurrentLocation;
	}

	var _React$PropTypes = _react2.default.PropTypes;
	var func = _React$PropTypes.func;
	var object = _React$PropTypes.object;

	/**
	 * A <Router> is a high-level API for automatically setting up
	 * a router that renders a <RouterContext> with all the props
	 * it needs each time the URL changes.
	 */

	var Router = _react2.default.createClass({
	  displayName: 'Router',


	  propTypes: {
	    history: object,
	    children: _InternalPropTypes.routes,
	    routes: _InternalPropTypes.routes, // alias for children
	    render: func,
	    createElement: func,
	    onError: func,
	    onUpdate: func,

	    // Deprecated:
	    parseQueryString: func,
	    stringifyQuery: func,

	    // PRIVATE: For client-side rehydration of server match.
	    matchContext: object
	  },

	  getDefaultProps: function getDefaultProps() {
	    return {
	      render: function render(props) {
	        return _react2.default.createElement(_RouterContext2.default, props);
	      }
	    };
	  },
	  getInitialState: function getInitialState() {
	    return {
	      location: null,
	      routes: null,
	      params: null,
	      components: null
	    };
	  },
	  handleError: function handleError(error) {
	    if (this.props.onError) {
	      this.props.onError.call(this, error);
	    } else {
	      // Throw errors by default so we don't silently swallow them!
	      throw error; // This error probably occurred in getChildRoutes or getComponents.
	    }
	  },
	  componentWillMount: function componentWillMount() {
	    var _this = this;

	    var _props = this.props;
	    var parseQueryString = _props.parseQueryString;
	    var stringifyQuery = _props.stringifyQuery;

	    (undefined) !== 'production' ? (0, _routerWarning2.default)(!(parseQueryString || stringifyQuery), '`parseQueryString` and `stringifyQuery` are deprecated. Please create a custom history. http://tiny.cc/router-customquerystring') : void 0;

	    var _createRouterObjects = this.createRouterObjects();

	    var history = _createRouterObjects.history;
	    var transitionManager = _createRouterObjects.transitionManager;
	    var router = _createRouterObjects.router;


	    this._unlisten = transitionManager.listen(function (error, state) {
	      if (error) {
	        _this.handleError(error);
	      } else {
	        _this.setState(state, _this.props.onUpdate);
	      }
	    });

	    this.history = history;
	    this.router = router;
	  },
	  createRouterObjects: function createRouterObjects() {
	    var matchContext = this.props.matchContext;

	    if (matchContext) {
	      return matchContext;
	    }

	    var history = this.props.history;
	    var _props2 = this.props;
	    var routes = _props2.routes;
	    var children = _props2.children;


	    !!isUnsupportedHistory(history) ? (undefined) !== 'production' ? (0, _invariant2.default)(false, 'You have provided a history object created with history v3.x. ' + 'This version of React Router is not compatible with v3 history ' + 'objects. Please use history v2.x instead.') : (0, _invariant2.default)(false) : void 0;

	    if (isDeprecatedHistory(history)) {
	      history = this.wrapDeprecatedHistory(history);
	    }

	    var transitionManager = (0, _createTransitionManager2.default)(history, (0, _RouteUtils.createRoutes)(routes || children));
	    var router = (0, _RouterUtils.createRouterObject)(history, transitionManager);
	    var routingHistory = (0, _RouterUtils.createRoutingHistory)(history, transitionManager);

	    return { history: routingHistory, transitionManager: transitionManager, router: router };
	  },
	  wrapDeprecatedHistory: function wrapDeprecatedHistory(history) {
	    var _props3 = this.props;
	    var parseQueryString = _props3.parseQueryString;
	    var stringifyQuery = _props3.stringifyQuery;


	    var createHistory = void 0;
	    if (history) {
	      (undefined) !== 'production' ? (0, _routerWarning2.default)(false, 'It appears you have provided a deprecated history object to `<Router/>`, please use a history provided by ' + 'React Router with `import { browserHistory } from \'react-router\'` or `import { hashHistory } from \'react-router\'`. ' + 'If you are using a custom history please create it with `useRouterHistory`, see http://tiny.cc/router-usinghistory for details.') : void 0;
	      createHistory = function createHistory() {
	        return history;
	      };
	    } else {
	      (undefined) !== 'production' ? (0, _routerWarning2.default)(false, '`Router` no longer defaults the history prop to hash history. Please use the `hashHistory` singleton instead. http://tiny.cc/router-defaulthistory') : void 0;
	      createHistory = _createHashHistory2.default;
	    }

	    return (0, _useQueries2.default)(createHistory)({ parseQueryString: parseQueryString, stringifyQuery: stringifyQuery });
	  },


	  /* istanbul ignore next: sanity check */
	  componentWillReceiveProps: function componentWillReceiveProps(nextProps) {
	    (undefined) !== 'production' ? (0, _routerWarning2.default)(nextProps.history === this.props.history, 'You cannot change <Router history>; it will be ignored') : void 0;

	    (undefined) !== 'production' ? (0, _routerWarning2.default)((nextProps.routes || nextProps.children) === (this.props.routes || this.props.children), 'You cannot change <Router routes>; it will be ignored') : void 0;
	  },
	  componentWillUnmount: function componentWillUnmount() {
	    if (this._unlisten) this._unlisten();
	  },
	  render: function render() {
	    var _state = this.state;
	    var location = _state.location;
	    var routes = _state.routes;
	    var params = _state.params;
	    var components = _state.components;
	    var _props4 = this.props;
	    var createElement = _props4.createElement;
	    var render = _props4.render;

	    var props = _objectWithoutProperties(_props4, ['createElement', 'render']);

	    if (location == null) return null; // Async match

	    // Only forward non-Router-specific props to routing context, as those are
	    // the only ones that might be custom routing context props.
	    Object.keys(Router.propTypes).forEach(function (propType) {
	      return delete props[propType];
	    });

	    return render(_extends({}, props, {
	      history: this.history,
	      router: this.router,
	      location: location,
	      routes: routes,
	      params: params,
	      components: components,
	      createElement: createElement
	    }));
	  }
	});

	exports.default = Router;
	module.exports = exports['default'];

/***/ }),
/* 895 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';

	exports.__esModule = true;

	var _react = __webpack_require__(4);

	var _react2 = _interopRequireDefault(_react);

	var _RouterContext = __webpack_require__(150);

	var _RouterContext2 = _interopRequireDefault(_RouterContext);

	var _routerWarning = __webpack_require__(25);

	var _routerWarning2 = _interopRequireDefault(_routerWarning);

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

	var RoutingContext = _react2.default.createClass({
	  displayName: 'RoutingContext',
	  componentWillMount: function componentWillMount() {
	    (undefined) !== 'production' ? (0, _routerWarning2.default)(false, '`RoutingContext` has been renamed to `RouterContext`. Please use `import { RouterContext } from \'react-router\'`. http://tiny.cc/router-routercontext') : void 0;
	  },
	  render: function render() {
	    return _react2.default.createElement(_RouterContext2.default, this.props);
	  }
	});

	exports.default = RoutingContext;
	module.exports = exports['default'];

/***/ }),
/* 896 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';

	exports.__esModule = true;
	exports.runEnterHooks = runEnterHooks;
	exports.runChangeHooks = runChangeHooks;
	exports.runLeaveHooks = runLeaveHooks;

	var _AsyncUtils = __webpack_require__(229);

	var _routerWarning = __webpack_require__(25);

	var _routerWarning2 = _interopRequireDefault(_routerWarning);

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

	function createTransitionHook(hook, route, asyncArity) {
	  return function () {
	    for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
	      args[_key] = arguments[_key];
	    }

	    hook.apply(route, args);

	    if (hook.length < asyncArity) {
	      var callback = args[args.length - 1];
	      // Assume hook executes synchronously and
	      // automatically call the callback.
	      callback();
	    }
	  };
	}

	function getEnterHooks(routes) {
	  return routes.reduce(function (hooks, route) {
	    if (route.onEnter) hooks.push(createTransitionHook(route.onEnter, route, 3));

	    return hooks;
	  }, []);
	}

	function getChangeHooks(routes) {
	  return routes.reduce(function (hooks, route) {
	    if (route.onChange) hooks.push(createTransitionHook(route.onChange, route, 4));
	    return hooks;
	  }, []);
	}

	function runTransitionHooks(length, iter, callback) {
	  if (!length) {
	    callback();
	    return;
	  }

	  var redirectInfo = void 0;
	  function replace(location, deprecatedPathname, deprecatedQuery) {
	    if (deprecatedPathname) {
	      (undefined) !== 'production' ? (0, _routerWarning2.default)(false, '`replaceState(state, pathname, query) is deprecated; use `replace(location)` with a location descriptor instead. http://tiny.cc/router-isActivedeprecated') : void 0;
	      redirectInfo = {
	        pathname: deprecatedPathname,
	        query: deprecatedQuery,
	        state: location
	      };

	      return;
	    }

	    redirectInfo = location;
	  }

	  (0, _AsyncUtils.loopAsync)(length, function (index, next, done) {
	    iter(index, replace, function (error) {
	      if (error || redirectInfo) {
	        done(error, redirectInfo); // No need to continue.
	      } else {
	        next();
	      }
	    });
	  }, callback);
	}

	/**
	 * Runs all onEnter hooks in the given array of routes in order
	 * with onEnter(nextState, replace, callback) and calls
	 * callback(error, redirectInfo) when finished. The first hook
	 * to use replace short-circuits the loop.
	 *
	 * If a hook needs to run asynchronously, it may use the callback
	 * function. However, doing so will cause the transition to pause,
	 * which could lead to a non-responsive UI if the hook is slow.
	 */
	function runEnterHooks(routes, nextState, callback) {
	  var hooks = getEnterHooks(routes);
	  return runTransitionHooks(hooks.length, function (index, replace, next) {
	    hooks[index](nextState, replace, next);
	  }, callback);
	}

	/**
	 * Runs all onChange hooks in the given array of routes in order
	 * with onChange(prevState, nextState, replace, callback) and calls
	 * callback(error, redirectInfo) when finished. The first hook
	 * to use replace short-circuits the loop.
	 *
	 * If a hook needs to run asynchronously, it may use the callback
	 * function. However, doing so will cause the transition to pause,
	 * which could lead to a non-responsive UI if the hook is slow.
	 */
	function runChangeHooks(routes, state, nextState, callback) {
	  var hooks = getChangeHooks(routes);
	  return runTransitionHooks(hooks.length, function (index, replace, next) {
	    hooks[index](state, nextState, replace, next);
	  }, callback);
	}

	/**
	 * Runs all onLeave hooks in the given array of routes in order.
	 */
	function runLeaveHooks(routes, prevState) {
	  for (var i = 0, len = routes.length; i < len; ++i) {
	    if (routes[i].onLeave) routes[i].onLeave.call(routes[i], prevState);
	  }
	}

/***/ }),
/* 897 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';

	exports.__esModule = true;

	var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

	var _react = __webpack_require__(4);

	var _react2 = _interopRequireDefault(_react);

	var _RouterContext = __webpack_require__(150);

	var _RouterContext2 = _interopRequireDefault(_RouterContext);

	var _routerWarning = __webpack_require__(25);

	var _routerWarning2 = _interopRequireDefault(_routerWarning);

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

	exports.default = function () {
	  for (var _len = arguments.length, middlewares = Array(_len), _key = 0; _key < _len; _key++) {
	    middlewares[_key] = arguments[_key];
	  }

	  if ((undefined) !== 'production') {
	    middlewares.forEach(function (middleware, index) {
	      (undefined) !== 'production' ? (0, _routerWarning2.default)(middleware.renderRouterContext || middleware.renderRouteComponent, 'The middleware specified at index ' + index + ' does not appear to be ' + 'a valid React Router middleware.') : void 0;
	    });
	  }

	  var withContext = middlewares.map(function (middleware) {
	    return middleware.renderRouterContext;
	  }).filter(Boolean);
	  var withComponent = middlewares.map(function (middleware) {
	    return middleware.renderRouteComponent;
	  }).filter(Boolean);

	  var makeCreateElement = function makeCreateElement() {
	    var baseCreateElement = arguments.length <= 0 || arguments[0] === undefined ? _react.createElement : arguments[0];
	    return function (Component, props) {
	      return withComponent.reduceRight(function (previous, renderRouteComponent) {
	        return renderRouteComponent(previous, props);
	      }, baseCreateElement(Component, props));
	    };
	  };

	  return function (renderProps) {
	    return withContext.reduceRight(function (previous, renderRouterContext) {
	      return renderRouterContext(previous, renderProps);
	    }, _react2.default.createElement(_RouterContext2.default, _extends({}, renderProps, {
	      createElement: makeCreateElement(renderProps.createElement)
	    })));
	  };
	};

	module.exports = exports['default'];

/***/ }),
/* 898 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';

	exports.__esModule = true;

	var _createBrowserHistory = __webpack_require__(788);

	var _createBrowserHistory2 = _interopRequireDefault(_createBrowserHistory);

	var _createRouterHistory = __webpack_require__(366);

	var _createRouterHistory2 = _interopRequireDefault(_createRouterHistory);

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

	exports.default = (0, _createRouterHistory2.default)(_createBrowserHistory2.default);
	module.exports = exports['default'];

/***/ }),
/* 899 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';

	exports.__esModule = true;

	var _PatternUtils = __webpack_require__(97);

	function routeParamsChanged(route, prevState, nextState) {
	  if (!route.path) return false;

	  var paramNames = (0, _PatternUtils.getParamNames)(route.path);

	  return paramNames.some(function (paramName) {
	    return prevState.params[paramName] !== nextState.params[paramName];
	  });
	}

	/**
	 * Returns an object of { leaveRoutes, changeRoutes, enterRoutes } determined by
	 * the change from prevState to nextState. We leave routes if either
	 * 1) they are not in the next state or 2) they are in the next state
	 * but their params have changed (i.e. /users/123 => /users/456).
	 *
	 * leaveRoutes are ordered starting at the leaf route of the tree
	 * we're leaving up to the common parent route. enterRoutes are ordered
	 * from the top of the tree we're entering down to the leaf route.
	 *
	 * changeRoutes are any routes that didn't leave or enter during
	 * the transition.
	 */
	function computeChangedRoutes(prevState, nextState) {
	  var prevRoutes = prevState && prevState.routes;
	  var nextRoutes = nextState.routes;

	  var leaveRoutes = void 0,
	      changeRoutes = void 0,
	      enterRoutes = void 0;
	  if (prevRoutes) {
	    (function () {
	      var parentIsLeaving = false;
	      leaveRoutes = prevRoutes.filter(function (route) {
	        if (parentIsLeaving) {
	          return true;
	        } else {
	          var isLeaving = nextRoutes.indexOf(route) === -1 || routeParamsChanged(route, prevState, nextState);
	          if (isLeaving) parentIsLeaving = true;
	          return isLeaving;
	        }
	      });

	      // onLeave hooks start at the leaf route.
	      leaveRoutes.reverse();

	      enterRoutes = [];
	      changeRoutes = [];

	      nextRoutes.forEach(function (route) {
	        var isNew = prevRoutes.indexOf(route) === -1;
	        var paramsChanged = leaveRoutes.indexOf(route) !== -1;

	        if (isNew || paramsChanged) enterRoutes.push(route);else changeRoutes.push(route);
	      });
	    })();
	  } else {
	    leaveRoutes = [];
	    changeRoutes = [];
	    enterRoutes = nextRoutes;
	  }

	  return {
	    leaveRoutes: leaveRoutes,
	    changeRoutes: changeRoutes,
	    enterRoutes: enterRoutes
	  };
	}

	exports.default = computeChangedRoutes;
	module.exports = exports['default'];

/***/ }),
/* 900 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';

	exports.__esModule = true;

	var _AsyncUtils = __webpack_require__(229);

	var _makeStateWithLocation = __webpack_require__(367);

	var _makeStateWithLocation2 = _interopRequireDefault(_makeStateWithLocation);

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

	function getComponentsForRoute(nextState, route, callback) {
	  if (route.component || route.components) {
	    callback(null, route.component || route.components);
	    return;
	  }

	  var getComponent = route.getComponent || route.getComponents;
	  if (!getComponent) {
	    callback();
	    return;
	  }

	  var location = nextState.location;

	  var nextStateWithLocation = (0, _makeStateWithLocation2.default)(nextState, location);

	  getComponent.call(route, nextStateWithLocation, callback);
	}

	/**
	 * Asynchronously fetches all components needed for the given router
	 * state and calls callback(error, components) when finished.
	 *
	 * Note: This operation may finish synchronously if no routes have an
	 * asynchronous getComponents method.
	 */
	function getComponents(nextState, callback) {
	  (0, _AsyncUtils.mapAsync)(nextState.routes, function (route, index, callback) {
	    getComponentsForRoute(nextState, route, callback);
	  }, callback);
	}

	exports.default = getComponents;
	module.exports = exports['default'];

/***/ }),
/* 901 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';

	exports.__esModule = true;

	var _PatternUtils = __webpack_require__(97);

	/**
	 * Extracts an object of params the given route cares about from
	 * the given params object.
	 */
	function getRouteParams(route, params) {
	  var routeParams = {};

	  if (!route.path) return routeParams;

	  (0, _PatternUtils.getParamNames)(route.path).forEach(function (p) {
	    if (Object.prototype.hasOwnProperty.call(params, p)) {
	      routeParams[p] = params[p];
	    }
	  });

	  return routeParams;
	}

	exports.default = getRouteParams;
	module.exports = exports['default'];

/***/ }),
/* 902 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';

	exports.__esModule = true;

	var _createHashHistory = __webpack_require__(330);

	var _createHashHistory2 = _interopRequireDefault(_createHashHistory);

	var _createRouterHistory = __webpack_require__(366);

	var _createRouterHistory2 = _interopRequireDefault(_createRouterHistory);

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

	exports.default = (0, _createRouterHistory2.default)(_createHashHistory2.default);
	module.exports = exports['default'];

/***/ }),
/* 903 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';

	exports.__esModule = true;

	var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol ? "symbol" : typeof obj; };

	exports.default = isActive;

	var _PatternUtils = __webpack_require__(97);

	function deepEqual(a, b) {
	  if (a == b) return true;

	  if (a == null || b == null) return false;

	  if (Array.isArray(a)) {
	    return Array.isArray(b) && a.length === b.length && a.every(function (item, index) {
	      return deepEqual(item, b[index]);
	    });
	  }

	  if ((typeof a === 'undefined' ? 'undefined' : _typeof(a)) === 'object') {
	    for (var p in a) {
	      if (!Object.prototype.hasOwnProperty.call(a, p)) {
	        continue;
	      }

	      if (a[p] === undefined) {
	        if (b[p] !== undefined) {
	          return false;
	        }
	      } else if (!Object.prototype.hasOwnProperty.call(b, p)) {
	        return false;
	      } else if (!deepEqual(a[p], b[p])) {
	        return false;
	      }
	    }

	    return true;
	  }

	  return String(a) === String(b);
	}

	/**
	 * Returns true if the current pathname matches the supplied one, net of
	 * leading and trailing slash normalization. This is sufficient for an
	 * indexOnly route match.
	 */
	function pathIsActive(pathname, currentPathname) {
	  // Normalize leading slash for consistency. Leading slash on pathname has
	  // already been normalized in isActive. See caveat there.
	  if (currentPathname.charAt(0) !== '/') {
	    currentPathname = '/' + currentPathname;
	  }

	  // Normalize the end of both path names too. Maybe `/foo/` shouldn't show
	  // `/foo` as active, but in this case, we would already have failed the
	  // match.
	  if (pathname.charAt(pathname.length - 1) !== '/') {
	    pathname += '/';
	  }
	  if (currentPathname.charAt(currentPathname.length - 1) !== '/') {
	    currentPathname += '/';
	  }

	  return currentPathname === pathname;
	}

	/**
	 * Returns true if the given pathname matches the active routes and params.
	 */
	function routeIsActive(pathname, routes, params) {
	  var remainingPathname = pathname,
	      paramNames = [],
	      paramValues = [];

	  // for...of would work here but it's probably slower post-transpilation.
	  for (var i = 0, len = routes.length; i < len; ++i) {
	    var route = routes[i];
	    var pattern = route.path || '';

	    if (pattern.charAt(0) === '/') {
	      remainingPathname = pathname;
	      paramNames = [];
	      paramValues = [];
	    }

	    if (remainingPathname !== null && pattern) {
	      var matched = (0, _PatternUtils.matchPattern)(pattern, remainingPathname);
	      if (matched) {
	        remainingPathname = matched.remainingPathname;
	        paramNames = [].concat(paramNames, matched.paramNames);
	        paramValues = [].concat(paramValues, matched.paramValues);
	      } else {
	        remainingPathname = null;
	      }

	      if (remainingPathname === '') {
	        // We have an exact match on the route. Just check that all the params
	        // match.
	        // FIXME: This doesn't work on repeated params.
	        return paramNames.every(function (paramName, index) {
	          return String(paramValues[index]) === String(params[paramName]);
	        });
	      }
	    }
	  }

	  return false;
	}

	/**
	 * Returns true if all key/value pairs in the given query are
	 * currently active.
	 */
	function queryIsActive(query, activeQuery) {
	  if (activeQuery == null) return query == null;

	  if (query == null) return true;

	  return deepEqual(query, activeQuery);
	}

	/**
	 * Returns true if a <Link> to the given pathname/query combination is
	 * currently active.
	 */
	function isActive(_ref, indexOnly, currentLocation, routes, params) {
	  var pathname = _ref.pathname;
	  var query = _ref.query;

	  if (currentLocation == null) return false;

	  // TODO: This is a bit ugly. It keeps around support for treating pathnames
	  // without preceding slashes as absolute paths, but possibly also works
	  // around the same quirks with basenames as in matchRoutes.
	  if (pathname.charAt(0) !== '/') {
	    pathname = '/' + pathname;
	  }

	  if (!pathIsActive(pathname, currentLocation.pathname)) {
	    // The path check is necessary and sufficient for indexOnly, but otherwise
	    // we still need to check the routes.
	    if (indexOnly || !routeIsActive(pathname, routes, params)) {
	      return false;
	    }
	  }

	  return queryIsActive(query, currentLocation.query);
	}
	module.exports = exports['default'];

/***/ }),
/* 904 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';

	exports.__esModule = true;

	var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

	var _Actions = __webpack_require__(94);

	var _invariant = __webpack_require__(29);

	var _invariant2 = _interopRequireDefault(_invariant);

	var _createMemoryHistory = __webpack_require__(365);

	var _createMemoryHistory2 = _interopRequireDefault(_createMemoryHistory);

	var _createTransitionManager = __webpack_require__(231);

	var _createTransitionManager2 = _interopRequireDefault(_createTransitionManager);

	var _RouteUtils = __webpack_require__(66);

	var _RouterUtils = __webpack_require__(364);

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

	function _objectWithoutProperties(obj, keys) { var target = {}; for (var i in obj) { if (keys.indexOf(i) >= 0) continue; if (!Object.prototype.hasOwnProperty.call(obj, i)) continue; target[i] = obj[i]; } return target; }

	/**
	 * A high-level API to be used for server-side rendering.
	 *
	 * This function matches a location to a set of routes and calls
	 * callback(error, redirectLocation, renderProps) when finished.
	 *
	 * Note: You probably don't want to use this in a browser unless you're using
	 * server-side rendering with async routes.
	 */
	function match(_ref, callback) {
	  var history = _ref.history;
	  var routes = _ref.routes;
	  var location = _ref.location;

	  var options = _objectWithoutProperties(_ref, ['history', 'routes', 'location']);

	  !(history || location) ? (undefined) !== 'production' ? (0, _invariant2.default)(false, 'match needs a history or a location') : (0, _invariant2.default)(false) : void 0;

	  history = history ? history : (0, _createMemoryHistory2.default)(options);
	  var transitionManager = (0, _createTransitionManager2.default)(history, (0, _RouteUtils.createRoutes)(routes));

	  var unlisten = void 0;

	  if (location) {
	    // Allow match({ location: '/the/path', ... })
	    location = history.createLocation(location);
	  } else {
	    // Pick up the location from the history via synchronous history.listen
	    // call if needed.
	    unlisten = history.listen(function (historyLocation) {
	      location = historyLocation;
	    });
	  }

	  var router = (0, _RouterUtils.createRouterObject)(history, transitionManager);
	  history = (0, _RouterUtils.createRoutingHistory)(history, transitionManager);

	  transitionManager.match(location, function (error, redirectLocation, nextState) {
	    callback(error, redirectLocation && router.createLocation(redirectLocation, _Actions.REPLACE), nextState && _extends({}, nextState, {
	      history: history,
	      router: router,
	      matchContext: { history: history, transitionManager: transitionManager, router: router }
	    }));

	    // Defer removing the listener to here to prevent DOM histories from having
	    // to unwind DOM event listeners unnecessarily, in case callback renders a
	    // <Router> and attaches another history listener.
	    if (unlisten) {
	      unlisten();
	    }
	  });
	}

	exports.default = match;
	module.exports = exports['default'];

/***/ }),
/* 905 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';

	exports.__esModule = true;

	var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

	var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol ? "symbol" : typeof obj; };

	exports.default = matchRoutes;

	var _AsyncUtils = __webpack_require__(229);

	var _makeStateWithLocation = __webpack_require__(367);

	var _makeStateWithLocation2 = _interopRequireDefault(_makeStateWithLocation);

	var _PatternUtils = __webpack_require__(97);

	var _routerWarning = __webpack_require__(25);

	var _routerWarning2 = _interopRequireDefault(_routerWarning);

	var _RouteUtils = __webpack_require__(66);

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

	function getChildRoutes(route, location, paramNames, paramValues, callback) {
	  if (route.childRoutes) {
	    return [null, route.childRoutes];
	  }
	  if (!route.getChildRoutes) {
	    return [];
	  }

	  var sync = true,
	      result = void 0;

	  var partialNextState = {
	    location: location,
	    params: createParams(paramNames, paramValues)
	  };

	  var partialNextStateWithLocation = (0, _makeStateWithLocation2.default)(partialNextState, location);

	  route.getChildRoutes(partialNextStateWithLocation, function (error, childRoutes) {
	    childRoutes = !error && (0, _RouteUtils.createRoutes)(childRoutes);
	    if (sync) {
	      result = [error, childRoutes];
	      return;
	    }

	    callback(error, childRoutes);
	  });

	  sync = false;
	  return result; // Might be undefined.
	}

	function getIndexRoute(route, location, paramNames, paramValues, callback) {
	  if (route.indexRoute) {
	    callback(null, route.indexRoute);
	  } else if (route.getIndexRoute) {
	    var partialNextState = {
	      location: location,
	      params: createParams(paramNames, paramValues)
	    };

	    var partialNextStateWithLocation = (0, _makeStateWithLocation2.default)(partialNextState, location);

	    route.getIndexRoute(partialNextStateWithLocation, function (error, indexRoute) {
	      callback(error, !error && (0, _RouteUtils.createRoutes)(indexRoute)[0]);
	    });
	  } else if (route.childRoutes) {
	    (function () {
	      var pathless = route.childRoutes.filter(function (childRoute) {
	        return !childRoute.path;
	      });

	      (0, _AsyncUtils.loopAsync)(pathless.length, function (index, next, done) {
	        getIndexRoute(pathless[index], location, paramNames, paramValues, function (error, indexRoute) {
	          if (error || indexRoute) {
	            var routes = [pathless[index]].concat(Array.isArray(indexRoute) ? indexRoute : [indexRoute]);
	            done(error, routes);
	          } else {
	            next();
	          }
	        });
	      }, function (err, routes) {
	        callback(null, routes);
	      });
	    })();
	  } else {
	    callback();
	  }
	}

	function assignParams(params, paramNames, paramValues) {
	  return paramNames.reduce(function (params, paramName, index) {
	    var paramValue = paramValues && paramValues[index];

	    if (Array.isArray(params[paramName])) {
	      params[paramName].push(paramValue);
	    } else if (paramName in params) {
	      params[paramName] = [params[paramName], paramValue];
	    } else {
	      params[paramName] = paramValue;
	    }

	    return params;
	  }, params);
	}

	function createParams(paramNames, paramValues) {
	  return assignParams({}, paramNames, paramValues);
	}

	function matchRouteDeep(route, location, remainingPathname, paramNames, paramValues, callback) {
	  var pattern = route.path || '';

	  if (pattern.charAt(0) === '/') {
	    remainingPathname = location.pathname;
	    paramNames = [];
	    paramValues = [];
	  }

	  // Only try to match the path if the route actually has a pattern, and if
	  // we're not just searching for potential nested absolute paths.
	  if (remainingPathname !== null && pattern) {
	    try {
	      var matched = (0, _PatternUtils.matchPattern)(pattern, remainingPathname);
	      if (matched) {
	        remainingPathname = matched.remainingPathname;
	        paramNames = [].concat(paramNames, matched.paramNames);
	        paramValues = [].concat(paramValues, matched.paramValues);
	      } else {
	        remainingPathname = null;
	      }
	    } catch (error) {
	      callback(error);
	    }

	    // By assumption, pattern is non-empty here, which is the prerequisite for
	    // actually terminating a match.
	    if (remainingPathname === '') {
	      var _ret2 = function () {
	        var match = {
	          routes: [route],
	          params: createParams(paramNames, paramValues)
	        };

	        getIndexRoute(route, location, paramNames, paramValues, function (error, indexRoute) {
	          if (error) {
	            callback(error);
	          } else {
	            if (Array.isArray(indexRoute)) {
	              var _match$routes;

	              (undefined) !== 'production' ? (0, _routerWarning2.default)(indexRoute.every(function (route) {
	                return !route.path;
	              }), 'Index routes should not have paths') : void 0;
	              (_match$routes = match.routes).push.apply(_match$routes, indexRoute);
	            } else if (indexRoute) {
	              (undefined) !== 'production' ? (0, _routerWarning2.default)(!indexRoute.path, 'Index routes should not have paths') : void 0;
	              match.routes.push(indexRoute);
	            }

	            callback(null, match);
	          }
	        });

	        return {
	          v: void 0
	        };
	      }();

	      if ((typeof _ret2 === 'undefined' ? 'undefined' : _typeof(_ret2)) === "object") return _ret2.v;
	    }
	  }

	  if (remainingPathname != null || route.childRoutes) {
	    // Either a) this route matched at least some of the path or b)
	    // we don't have to load this route's children asynchronously. In
	    // either case continue checking for matches in the subtree.
	    var onChildRoutes = function onChildRoutes(error, childRoutes) {
	      if (error) {
	        callback(error);
	      } else if (childRoutes) {
	        // Check the child routes to see if any of them match.
	        matchRoutes(childRoutes, location, function (error, match) {
	          if (error) {
	            callback(error);
	          } else if (match) {
	            // A child route matched! Augment the match and pass it up the stack.
	            match.routes.unshift(route);
	            callback(null, match);
	          } else {
	            callback();
	          }
	        }, remainingPathname, paramNames, paramValues);
	      } else {
	        callback();
	      }
	    };

	    var result = getChildRoutes(route, location, paramNames, paramValues, onChildRoutes);
	    if (result) {
	      onChildRoutes.apply(undefined, result);
	    }
	  } else {
	    callback();
	  }
	}

	/**
	 * Asynchronously matches the given location to a set of routes and calls
	 * callback(error, state) when finished. The state object will have the
	 * following properties:
	 *
	 * - routes       An array of routes that matched, in hierarchical order
	 * - params       An object of URL parameters
	 *
	 * Note: This operation may finish synchronously if no routes have an
	 * asynchronous getChildRoutes method.
	 */
	function matchRoutes(routes, location, callback, remainingPathname) {
	  var paramNames = arguments.length <= 4 || arguments[4] === undefined ? [] : arguments[4];
	  var paramValues = arguments.length <= 5 || arguments[5] === undefined ? [] : arguments[5];

	  if (remainingPathname === undefined) {
	    // TODO: This is a little bit ugly, but it works around a quirk in history
	    // that strips the leading slash from pathnames when using basenames with
	    // trailing slashes.
	    if (location.pathname.charAt(0) !== '/') {
	      location = _extends({}, location, {
	        pathname: '/' + location.pathname
	      });
	    }
	    remainingPathname = location.pathname;
	  }

	  (0, _AsyncUtils.loopAsync)(routes.length, function (index, next, done) {
	    matchRouteDeep(routes[index], location, remainingPathname, paramNames, paramValues, function (error, match) {
	      if (error || match) {
	        done(error, match);
	      } else {
	        next();
	      }
	    });
	  }, callback);
	}
	module.exports = exports['default'];

/***/ }),
/* 906 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';

	exports.__esModule = true;

	var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

	var _useQueries = __webpack_require__(142);

	var _useQueries2 = _interopRequireDefault(_useQueries);

	var _createTransitionManager = __webpack_require__(231);

	var _createTransitionManager2 = _interopRequireDefault(_createTransitionManager);

	var _routerWarning = __webpack_require__(25);

	var _routerWarning2 = _interopRequireDefault(_routerWarning);

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

	function _objectWithoutProperties(obj, keys) { var target = {}; for (var i in obj) { if (keys.indexOf(i) >= 0) continue; if (!Object.prototype.hasOwnProperty.call(obj, i)) continue; target[i] = obj[i]; } return target; }

	/**
	 * Returns a new createHistory function that may be used to create
	 * history objects that know about routing.
	 *
	 * Enhances history objects with the following methods:
	 *
	 * - listen((error, nextState) => {})
	 * - listenBeforeLeavingRoute(route, (nextLocation) => {})
	 * - match(location, (error, redirectLocation, nextState) => {})
	 * - isActive(pathname, query, indexOnly=false)
	 */
	function useRoutes(createHistory) {
	  (undefined) !== 'production' ? (0, _routerWarning2.default)(false, '`useRoutes` is deprecated. Please use `createTransitionManager` instead.') : void 0;

	  return function () {
	    var _ref = arguments.length <= 0 || arguments[0] === undefined ? {} : arguments[0];

	    var routes = _ref.routes;

	    var options = _objectWithoutProperties(_ref, ['routes']);

	    var history = (0, _useQueries2.default)(createHistory)(options);
	    var transitionManager = (0, _createTransitionManager2.default)(history, routes);
	    return _extends({}, history, transitionManager);
	  };
	}

	exports.default = useRoutes;
	module.exports = exports['default'];

/***/ }),
/* 907 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';

	exports.__esModule = true;

	var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

	exports.default = withRouter;

	var _invariant = __webpack_require__(29);

	var _invariant2 = _interopRequireDefault(_invariant);

	var _react = __webpack_require__(4);

	var _react2 = _interopRequireDefault(_react);

	var _hoistNonReactStatics = __webpack_require__(791);

	var _hoistNonReactStatics2 = _interopRequireDefault(_hoistNonReactStatics);

	var _PropTypes = __webpack_require__(230);

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

	function getDisplayName(WrappedComponent) {
	  return WrappedComponent.displayName || WrappedComponent.name || 'Component';
	}

	function withRouter(WrappedComponent, options) {
	  var withRef = options && options.withRef;

	  var WithRouter = _react2.default.createClass({
	    displayName: 'WithRouter',

	    contextTypes: { router: _PropTypes.routerShape },
	    propTypes: { router: _PropTypes.routerShape },

	    getWrappedInstance: function getWrappedInstance() {
	      !withRef ? (undefined) !== 'production' ? (0, _invariant2.default)(false, 'To access the wrapped instance, you need to specify ' + '`{ withRef: true }` as the second argument of the withRouter() call.') : (0, _invariant2.default)(false) : void 0;

	      return this.wrappedInstance;
	    },
	    render: function render() {
	      var _this = this;

	      var router = this.props.router || this.context.router;
	      var props = _extends({}, this.props, { router: router });

	      if (withRef) {
	        props.ref = function (c) {
	          _this.wrappedInstance = c;
	        };
	      }

	      return _react2.default.createElement(WrappedComponent, props);
	    }
	  });

	  WithRouter.displayName = 'withRouter(' + getDisplayName(WrappedComponent) + ')';
	  WithRouter.WrappedComponent = WrappedComponent;

	  return (0, _hoistNonReactStatics2.default)(WithRouter, WrappedComponent);
	}
	module.exports = exports['default'];

/***/ }),
/* 908 */
217,
/* 909 */
[1242, 99],
/* 910 */
/***/ (function(module, exports, __webpack_require__) {

	/**
	 * Copyright (c) 2013-present, Facebook, Inc.
	 *
	 * This source code is licensed under the MIT license found in the
	 * LICENSE file in the root directory of this source tree.
	 *
	 */

	'use strict';

	var PooledClass = __webpack_require__(909);
	var ReactElement = __webpack_require__(85);

	var emptyFunction = __webpack_require__(53);
	var traverseAllChildren = __webpack_require__(920);

	var twoArgumentPooler = PooledClass.twoArgumentPooler;
	var fourArgumentPooler = PooledClass.fourArgumentPooler;

	var userProvidedKeyEscapeRegex = /\/+/g;
	function escapeUserProvidedKey(text) {
	  return ('' + text).replace(userProvidedKeyEscapeRegex, '$&/');
	}

	/**
	 * PooledClass representing the bookkeeping associated with performing a child
	 * traversal. Allows avoiding binding callbacks.
	 *
	 * @constructor ForEachBookKeeping
	 * @param {!function} forEachFunction Function to perform traversal with.
	 * @param {?*} forEachContext Context to perform context with.
	 */
	function ForEachBookKeeping(forEachFunction, forEachContext) {
	  this.func = forEachFunction;
	  this.context = forEachContext;
	  this.count = 0;
	}
	ForEachBookKeeping.prototype.destructor = function () {
	  this.func = null;
	  this.context = null;
	  this.count = 0;
	};
	PooledClass.addPoolingTo(ForEachBookKeeping, twoArgumentPooler);

	function forEachSingleChild(bookKeeping, child, name) {
	  var func = bookKeeping.func,
	      context = bookKeeping.context;

	  func.call(context, child, bookKeeping.count++);
	}

	/**
	 * Iterates through children that are typically specified as `props.children`.
	 *
	 * See https://facebook.github.io/react/docs/top-level-api.html#react.children.foreach
	 *
	 * The provided forEachFunc(child, index) will be called for each
	 * leaf child.
	 *
	 * @param {?*} children Children tree container.
	 * @param {function(*, int)} forEachFunc
	 * @param {*} forEachContext Context for forEachContext.
	 */
	function forEachChildren(children, forEachFunc, forEachContext) {
	  if (children == null) {
	    return children;
	  }
	  var traverseContext = ForEachBookKeeping.getPooled(forEachFunc, forEachContext);
	  traverseAllChildren(children, forEachSingleChild, traverseContext);
	  ForEachBookKeeping.release(traverseContext);
	}

	/**
	 * PooledClass representing the bookkeeping associated with performing a child
	 * mapping. Allows avoiding binding callbacks.
	 *
	 * @constructor MapBookKeeping
	 * @param {!*} mapResult Object containing the ordered map of results.
	 * @param {!function} mapFunction Function to perform mapping with.
	 * @param {?*} mapContext Context to perform mapping with.
	 */
	function MapBookKeeping(mapResult, keyPrefix, mapFunction, mapContext) {
	  this.result = mapResult;
	  this.keyPrefix = keyPrefix;
	  this.func = mapFunction;
	  this.context = mapContext;
	  this.count = 0;
	}
	MapBookKeeping.prototype.destructor = function () {
	  this.result = null;
	  this.keyPrefix = null;
	  this.func = null;
	  this.context = null;
	  this.count = 0;
	};
	PooledClass.addPoolingTo(MapBookKeeping, fourArgumentPooler);

	function mapSingleChildIntoContext(bookKeeping, child, childKey) {
	  var result = bookKeeping.result,
	      keyPrefix = bookKeeping.keyPrefix,
	      func = bookKeeping.func,
	      context = bookKeeping.context;


	  var mappedChild = func.call(context, child, bookKeeping.count++);
	  if (Array.isArray(mappedChild)) {
	    mapIntoWithKeyPrefixInternal(mappedChild, result, childKey, emptyFunction.thatReturnsArgument);
	  } else if (mappedChild != null) {
	    if (ReactElement.isValidElement(mappedChild)) {
	      mappedChild = ReactElement.cloneAndReplaceKey(mappedChild,
	      // Keep both the (mapped) and old keys if they differ, just as
	      // traverseAllChildren used to do for objects as children
	      keyPrefix + (mappedChild.key && (!child || child.key !== mappedChild.key) ? escapeUserProvidedKey(mappedChild.key) + '/' : '') + childKey);
	    }
	    result.push(mappedChild);
	  }
	}

	function mapIntoWithKeyPrefixInternal(children, array, prefix, func, context) {
	  var escapedPrefix = '';
	  if (prefix != null) {
	    escapedPrefix = escapeUserProvidedKey(prefix) + '/';
	  }
	  var traverseContext = MapBookKeeping.getPooled(array, escapedPrefix, func, context);
	  traverseAllChildren(children, mapSingleChildIntoContext, traverseContext);
	  MapBookKeeping.release(traverseContext);
	}

	/**
	 * Maps children that are typically specified as `props.children`.
	 *
	 * See https://facebook.github.io/react/docs/top-level-api.html#react.children.map
	 *
	 * The provided mapFunction(child, key, index) will be called for each
	 * leaf child.
	 *
	 * @param {?*} children Children tree container.
	 * @param {function(*, int)} func The map function.
	 * @param {*} context Context for mapFunction.
	 * @return {object} Object containing the ordered map of results.
	 */
	function mapChildren(children, func, context) {
	  if (children == null) {
	    return children;
	  }
	  var result = [];
	  mapIntoWithKeyPrefixInternal(children, result, null, func, context);
	  return result;
	}

	function forEachSingleChildDummy(traverseContext, child, name) {
	  return null;
	}

	/**
	 * Count the number of children that are typically specified as
	 * `props.children`.
	 *
	 * See https://facebook.github.io/react/docs/top-level-api.html#react.children.count
	 *
	 * @param {?*} children Children tree container.
	 * @return {number} The number of children.
	 */
	function countChildren(children, context) {
	  return traverseAllChildren(children, forEachSingleChildDummy, null);
	}

	/**
	 * Flatten a children object (typically specified as `props.children`) and
	 * return an array with appropriately re-keyed children.
	 *
	 * See https://facebook.github.io/react/docs/top-level-api.html#react.children.toarray
	 */
	function toArray(children) {
	  var result = [];
	  mapIntoWithKeyPrefixInternal(children, result, null, emptyFunction.thatReturnsArgument);
	  return result;
	}

	var ReactChildren = {
	  forEach: forEachChildren,
	  map: mapChildren,
	  mapIntoWithKeyPrefixInternal: mapIntoWithKeyPrefixInternal,
	  count: countChildren,
	  toArray: toArray
	};

	module.exports = ReactChildren;

/***/ }),
/* 911 */
/***/ (function(module, exports, __webpack_require__) {

	/**
	 * Copyright (c) 2013-present, Facebook, Inc.
	 *
	 * This source code is licensed under the MIT license found in the
	 * LICENSE file in the root directory of this source tree.
	 *
	 */

	'use strict';

	var ReactElement = __webpack_require__(85);

	/**
	 * Create a factory that creates HTML tag elements.
	 *
	 * @private
	 */
	var createDOMFactory = ReactElement.createFactory;
	if ((undefined) !== 'production') {
	  var ReactElementValidator = __webpack_require__(371);
	  createDOMFactory = ReactElementValidator.createFactory;
	}

	/**
	 * Creates a mapping from supported HTML tags to `ReactDOMComponent` classes.
	 *
	 * @public
	 */
	var ReactDOMFactories = {
	  a: createDOMFactory('a'),
	  abbr: createDOMFactory('abbr'),
	  address: createDOMFactory('address'),
	  area: createDOMFactory('area'),
	  article: createDOMFactory('article'),
	  aside: createDOMFactory('aside'),
	  audio: createDOMFactory('audio'),
	  b: createDOMFactory('b'),
	  base: createDOMFactory('base'),
	  bdi: createDOMFactory('bdi'),
	  bdo: createDOMFactory('bdo'),
	  big: createDOMFactory('big'),
	  blockquote: createDOMFactory('blockquote'),
	  body: createDOMFactory('body'),
	  br: createDOMFactory('br'),
	  button: createDOMFactory('button'),
	  canvas: createDOMFactory('canvas'),
	  caption: createDOMFactory('caption'),
	  cite: createDOMFactory('cite'),
	  code: createDOMFactory('code'),
	  col: createDOMFactory('col'),
	  colgroup: createDOMFactory('colgroup'),
	  data: createDOMFactory('data'),
	  datalist: createDOMFactory('datalist'),
	  dd: createDOMFactory('dd'),
	  del: createDOMFactory('del'),
	  details: createDOMFactory('details'),
	  dfn: createDOMFactory('dfn'),
	  dialog: createDOMFactory('dialog'),
	  div: createDOMFactory('div'),
	  dl: createDOMFactory('dl'),
	  dt: createDOMFactory('dt'),
	  em: createDOMFactory('em'),
	  embed: createDOMFactory('embed'),
	  fieldset: createDOMFactory('fieldset'),
	  figcaption: createDOMFactory('figcaption'),
	  figure: createDOMFactory('figure'),
	  footer: createDOMFactory('footer'),
	  form: createDOMFactory('form'),
	  h1: createDOMFactory('h1'),
	  h2: createDOMFactory('h2'),
	  h3: createDOMFactory('h3'),
	  h4: createDOMFactory('h4'),
	  h5: createDOMFactory('h5'),
	  h6: createDOMFactory('h6'),
	  head: createDOMFactory('head'),
	  header: createDOMFactory('header'),
	  hgroup: createDOMFactory('hgroup'),
	  hr: createDOMFactory('hr'),
	  html: createDOMFactory('html'),
	  i: createDOMFactory('i'),
	  iframe: createDOMFactory('iframe'),
	  img: createDOMFactory('img'),
	  input: createDOMFactory('input'),
	  ins: createDOMFactory('ins'),
	  kbd: createDOMFactory('kbd'),
	  keygen: createDOMFactory('keygen'),
	  label: createDOMFactory('label'),
	  legend: createDOMFactory('legend'),
	  li: createDOMFactory('li'),
	  link: createDOMFactory('link'),
	  main: createDOMFactory('main'),
	  map: createDOMFactory('map'),
	  mark: createDOMFactory('mark'),
	  menu: createDOMFactory('menu'),
	  menuitem: createDOMFactory('menuitem'),
	  meta: createDOMFactory('meta'),
	  meter: createDOMFactory('meter'),
	  nav: createDOMFactory('nav'),
	  noscript: createDOMFactory('noscript'),
	  object: createDOMFactory('object'),
	  ol: createDOMFactory('ol'),
	  optgroup: createDOMFactory('optgroup'),
	  option: createDOMFactory('option'),
	  output: createDOMFactory('output'),
	  p: createDOMFactory('p'),
	  param: createDOMFactory('param'),
	  picture: createDOMFactory('picture'),
	  pre: createDOMFactory('pre'),
	  progress: createDOMFactory('progress'),
	  q: createDOMFactory('q'),
	  rp: createDOMFactory('rp'),
	  rt: createDOMFactory('rt'),
	  ruby: createDOMFactory('ruby'),
	  s: createDOMFactory('s'),
	  samp: createDOMFactory('samp'),
	  script: createDOMFactory('script'),
	  section: createDOMFactory('section'),
	  select: createDOMFactory('select'),
	  small: createDOMFactory('small'),
	  source: createDOMFactory('source'),
	  span: createDOMFactory('span'),
	  strong: createDOMFactory('strong'),
	  style: createDOMFactory('style'),
	  sub: createDOMFactory('sub'),
	  summary: createDOMFactory('summary'),
	  sup: createDOMFactory('sup'),
	  table: createDOMFactory('table'),
	  tbody: createDOMFactory('tbody'),
	  td: createDOMFactory('td'),
	  textarea: createDOMFactory('textarea'),
	  tfoot: createDOMFactory('tfoot'),
	  th: createDOMFactory('th'),
	  thead: createDOMFactory('thead'),
	  time: createDOMFactory('time'),
	  title: createDOMFactory('title'),
	  tr: createDOMFactory('tr'),
	  track: createDOMFactory('track'),
	  u: createDOMFactory('u'),
	  ul: createDOMFactory('ul'),
	  'var': createDOMFactory('var'),
	  video: createDOMFactory('video'),
	  wbr: createDOMFactory('wbr'),

	  // SVG
	  circle: createDOMFactory('circle'),
	  clipPath: createDOMFactory('clipPath'),
	  defs: createDOMFactory('defs'),
	  ellipse: createDOMFactory('ellipse'),
	  g: createDOMFactory('g'),
	  image: createDOMFactory('image'),
	  line: createDOMFactory('line'),
	  linearGradient: createDOMFactory('linearGradient'),
	  mask: createDOMFactory('mask'),
	  path: createDOMFactory('path'),
	  pattern: createDOMFactory('pattern'),
	  polygon: createDOMFactory('polygon'),
	  polyline: createDOMFactory('polyline'),
	  radialGradient: createDOMFactory('radialGradient'),
	  rect: createDOMFactory('rect'),
	  stop: createDOMFactory('stop'),
	  svg: createDOMFactory('svg'),
	  text: createDOMFactory('text'),
	  tspan: createDOMFactory('tspan')
	};

	module.exports = ReactDOMFactories;

/***/ }),
/* 912 */
842,
/* 913 */
/***/ (function(module, exports, __webpack_require__) {

	/**
	 * Copyright (c) 2013-present, Facebook, Inc.
	 *
	 * This source code is licensed under the MIT license found in the
	 * LICENSE file in the root directory of this source tree.
	 *
	 */

	'use strict';

	var _require = __webpack_require__(85),
	    isValidElement = _require.isValidElement;

	var factory = __webpack_require__(337);

	module.exports = factory(isValidElement);

/***/ }),
/* 914 */
350,
/* 915 */
/***/ (function(module, exports) {

	/**
	 * Copyright (c) 2013-present, Facebook, Inc.
	 *
	 * This source code is licensed under the MIT license found in the
	 * LICENSE file in the root directory of this source tree.
	 *
	 */

	'use strict';

	module.exports = '15.7.0';


/***/ }),
/* 916 */
/***/ (function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright (c) 2013-present, Facebook, Inc.
	 *
	 * This source code is licensed under the MIT license found in the
	 * LICENSE file in the root directory of this source tree.
	 *
	 */

	'use strict';

	var _prodInvariant = __webpack_require__(99);

	var ReactPropTypeLocationNames = __webpack_require__(912);
	var ReactPropTypesSecret = __webpack_require__(914);

	var invariant = __webpack_require__(7);
	var warning = __webpack_require__(8);

	var ReactComponentTreeHook;

	if (typeof process !== 'undefined' && process.env && (undefined) === 'test') {
	  // Temporary hack.
	  // Inline requires don't work well with Jest:
	  // https://github.com/facebook/react/issues/7240
	  // Remove the inline requires when we don't need them anymore:
	  // https://github.com/facebook/react/pull/7178
	  ReactComponentTreeHook = __webpack_require__(34);
	}

	var loggedTypeFailures = {};

	/**
	 * Assert that the values match with the type specs.
	 * Error messages are memorized and will only be shown once.
	 *
	 * @param {object} typeSpecs Map of name to a ReactPropType
	 * @param {object} values Runtime values that need to be type-checked
	 * @param {string} location e.g. "prop", "context", "child context"
	 * @param {string} componentName Name of the component for error messages.
	 * @param {?object} element The React element that is being type-checked
	 * @param {?number} debugID The React component instance that is being type-checked
	 * @private
	 */
	function checkReactTypeSpec(typeSpecs, values, location, componentName, element, debugID) {
	  for (var typeSpecName in typeSpecs) {
	    if (typeSpecs.hasOwnProperty(typeSpecName)) {
	      var error;
	      // Prop type validation may throw. In case they do, we don't want to
	      // fail the render phase where it didn't fail before. So we log it.
	      // After these have been cleaned up, we'll let them throw.
	      try {
	        // This is intentionally an invariant that gets caught. It's the same
	        // behavior as without this statement except with a better message.
	        !(typeof typeSpecs[typeSpecName] === 'function') ? (undefined) !== 'production' ? invariant(false, '%s: %s type `%s` is invalid; it must be a function, usually from React.PropTypes.', componentName || 'React class', ReactPropTypeLocationNames[location], typeSpecName) : _prodInvariant('84', componentName || 'React class', ReactPropTypeLocationNames[location], typeSpecName) : void 0;
	        error = typeSpecs[typeSpecName](values, typeSpecName, componentName, location, null, ReactPropTypesSecret);
	      } catch (ex) {
	        error = ex;
	      }
	      (undefined) !== 'production' ? warning(!error || error instanceof Error, '%s: type specification of %s `%s` is invalid; the type checker ' + 'function must return `null` or an `Error` but returned a %s. ' + 'You may have forgotten to pass an argument to the type checker ' + 'creator (arrayOf, instanceOf, objectOf, oneOf, oneOfType, and ' + 'shape all require an argument).', componentName || 'React class', ReactPropTypeLocationNames[location], typeSpecName, typeof error) : void 0;
	      if (error instanceof Error && !(error.message in loggedTypeFailures)) {
	        // Only monitor this failure once because there tends to be a lot of the
	        // same error.
	        loggedTypeFailures[error.message] = true;

	        var componentStackInfo = '';

	        if ((undefined) !== 'production') {
	          if (!ReactComponentTreeHook) {
	            ReactComponentTreeHook = __webpack_require__(34);
	          }
	          if (debugID !== null) {
	            componentStackInfo = ReactComponentTreeHook.getStackAddendumByID(debugID);
	          } else if (element !== null) {
	            componentStackInfo = ReactComponentTreeHook.getCurrentStackAddendum(element);
	          }
	        }

	        (undefined) !== 'production' ? warning(false, 'Failed %s type: %s%s', location, error.message, componentStackInfo) : void 0;
	      }
	    }
	  }
	}

	module.exports = checkReactTypeSpec;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(143)))

/***/ }),
/* 917 */
/***/ (function(module, exports, __webpack_require__) {

	/**
	 * Copyright (c) 2013-present, Facebook, Inc.
	 *
	 * This source code is licensed under the MIT license found in the
	 * LICENSE file in the root directory of this source tree.
	 *
	 */

	'use strict';

	var _require = __webpack_require__(369),
	    Component = _require.Component;

	var _require2 = __webpack_require__(85),
	    isValidElement = _require2.isValidElement;

	var ReactNoopUpdateQueue = __webpack_require__(372);
	var factory = __webpack_require__(767);

	module.exports = factory(Component, isValidElement, ReactNoopUpdateQueue);

/***/ }),
/* 918 */
/***/ (function(module, exports) {

	/**
	 * Copyright (c) 2013-present, Facebook, Inc.
	 *
	 * This source code is licensed under the MIT license found in the
	 * LICENSE file in the root directory of this source tree.
	 *
	 * 
	 */

	'use strict';

	var nextDebugID = 1;

	function getNextDebugID() {
	  return nextDebugID++;
	}

	module.exports = getNextDebugID;

/***/ }),
/* 919 */
/***/ (function(module, exports, __webpack_require__) {

	/**
	 * Copyright (c) 2013-present, Facebook, Inc.
	 *
	 * This source code is licensed under the MIT license found in the
	 * LICENSE file in the root directory of this source tree.
	 *
	 */
	'use strict';

	var _prodInvariant = __webpack_require__(99);

	var ReactElement = __webpack_require__(85);

	var invariant = __webpack_require__(7);

	/**
	 * Returns the first child in a collection of children and verifies that there
	 * is only one child in the collection.
	 *
	 * See https://facebook.github.io/react/docs/top-level-api.html#react.children.only
	 *
	 * The current implementation of this function assumes that a single child gets
	 * passed without a wrapper, but the purpose of this helper function is to
	 * abstract away the particular structure of children.
	 *
	 * @param {?object} children Child collection structure.
	 * @return {ReactElement} The first and only `ReactElement` contained in the
	 * structure.
	 */
	function onlyChild(children) {
	  !ReactElement.isValidElement(children) ? (undefined) !== 'production' ? invariant(false, 'React.Children.only expected to receive a single React element child.') : _prodInvariant('143') : void 0;
	  return children;
	}

	module.exports = onlyChild;

/***/ }),
/* 920 */
/***/ (function(module, exports, __webpack_require__) {

	/**
	 * Copyright (c) 2013-present, Facebook, Inc.
	 *
	 * This source code is licensed under the MIT license found in the
	 * LICENSE file in the root directory of this source tree.
	 *
	 */

	'use strict';

	var _prodInvariant = __webpack_require__(99);

	var ReactCurrentOwner = __webpack_require__(56);
	var REACT_ELEMENT_TYPE = __webpack_require__(370);

	var getIteratorFn = __webpack_require__(373);
	var invariant = __webpack_require__(7);
	var KeyEscapeUtils = __webpack_require__(908);
	var warning = __webpack_require__(8);

	var SEPARATOR = '.';
	var SUBSEPARATOR = ':';

	/**
	 * This is inlined from ReactElement since this file is shared between
	 * isomorphic and renderers. We could extract this to a
	 *
	 */

	/**
	 * TODO: Test that a single child and an array with one item have the same key
	 * pattern.
	 */

	var didWarnAboutMaps = false;

	/**
	 * Generate a key string that identifies a component within a set.
	 *
	 * @param {*} component A component that could contain a manual key.
	 * @param {number} index Index that is used if a manual key is not provided.
	 * @return {string}
	 */
	function getComponentKey(component, index) {
	  // Do some typechecking here since we call this blindly. We want to ensure
	  // that we don't block potential future ES APIs.
	  if (component && typeof component === 'object' && component.key != null) {
	    // Explicit key
	    return KeyEscapeUtils.escape(component.key);
	  }
	  // Implicit key determined by the index in the set
	  return index.toString(36);
	}

	/**
	 * @param {?*} children Children tree container.
	 * @param {!string} nameSoFar Name of the key path so far.
	 * @param {!function} callback Callback to invoke with each child found.
	 * @param {?*} traverseContext Used to pass information throughout the traversal
	 * process.
	 * @return {!number} The number of children in this subtree.
	 */
	function traverseAllChildrenImpl(children, nameSoFar, callback, traverseContext) {
	  var type = typeof children;

	  if (type === 'undefined' || type === 'boolean') {
	    // All of the above are perceived as null.
	    children = null;
	  }

	  if (children === null || type === 'string' || type === 'number' ||
	  // The following is inlined from ReactElement. This means we can optimize
	  // some checks. React Fiber also inlines this logic for similar purposes.
	  type === 'object' && children.$$typeof === REACT_ELEMENT_TYPE) {
	    callback(traverseContext, children,
	    // If it's the only child, treat the name as if it was wrapped in an array
	    // so that it's consistent if the number of children grows.
	    nameSoFar === '' ? SEPARATOR + getComponentKey(children, 0) : nameSoFar);
	    return 1;
	  }

	  var child;
	  var nextName;
	  var subtreeCount = 0; // Count of children found in the current subtree.
	  var nextNamePrefix = nameSoFar === '' ? SEPARATOR : nameSoFar + SUBSEPARATOR;

	  if (Array.isArray(children)) {
	    for (var i = 0; i < children.length; i++) {
	      child = children[i];
	      nextName = nextNamePrefix + getComponentKey(child, i);
	      subtreeCount += traverseAllChildrenImpl(child, nextName, callback, traverseContext);
	    }
	  } else {
	    var iteratorFn = getIteratorFn(children);
	    if (iteratorFn) {
	      var iterator = iteratorFn.call(children);
	      var step;
	      if (iteratorFn !== children.entries) {
	        var ii = 0;
	        while (!(step = iterator.next()).done) {
	          child = step.value;
	          nextName = nextNamePrefix + getComponentKey(child, ii++);
	          subtreeCount += traverseAllChildrenImpl(child, nextName, callback, traverseContext);
	        }
	      } else {
	        if ((undefined) !== 'production') {
	          var mapsAsChildrenAddendum = '';
	          if (ReactCurrentOwner.current) {
	            var mapsAsChildrenOwnerName = ReactCurrentOwner.current.getName();
	            if (mapsAsChildrenOwnerName) {
	              mapsAsChildrenAddendum = ' Check the render method of `' + mapsAsChildrenOwnerName + '`.';
	            }
	          }
	          (undefined) !== 'production' ? warning(didWarnAboutMaps, 'Using Maps as children is not yet fully supported. It is an ' + 'experimental feature that might be removed. Convert it to a ' + 'sequence / iterable of keyed ReactElements instead.%s', mapsAsChildrenAddendum) : void 0;
	          didWarnAboutMaps = true;
	        }
	        // Iterator will provide entry [k,v] tuples rather than values.
	        while (!(step = iterator.next()).done) {
	          var entry = step.value;
	          if (entry) {
	            child = entry[1];
	            nextName = nextNamePrefix + KeyEscapeUtils.escape(entry[0]) + SUBSEPARATOR + getComponentKey(child, 0);
	            subtreeCount += traverseAllChildrenImpl(child, nextName, callback, traverseContext);
	          }
	        }
	      }
	    } else if (type === 'object') {
	      var addendum = '';
	      if ((undefined) !== 'production') {
	        addendum = ' If you meant to render a collection of children, use an array ' + 'instead or wrap the object using createFragment(object) from the ' + 'React add-ons.';
	        if (children._isReactElement) {
	          addendum = " It looks like you're using an element created by a different " + 'version of React. Make sure to use only one copy of React.';
	        }
	        if (ReactCurrentOwner.current) {
	          var name = ReactCurrentOwner.current.getName();
	          if (name) {
	            addendum += ' Check the render method of `' + name + '`.';
	          }
	        }
	      }
	      var childrenString = String(children);
	       true ? (undefined) !== 'production' ? invariant(false, 'Objects are not valid as a React child (found: %s).%s', childrenString === '[object Object]' ? 'object with keys {' + Object.keys(children).join(', ') + '}' : childrenString, addendum) : _prodInvariant('31', childrenString === '[object Object]' ? 'object with keys {' + Object.keys(children).join(', ') + '}' : childrenString, addendum) : void 0;
	    }
	  }

	  return subtreeCount;
	}

	/**
	 * Traverses children that are typically specified as `props.children`, but
	 * might also be specified through attributes:
	 *
	 * - `traverseAllChildren(this.props.children, ...)`
	 * - `traverseAllChildren(this.props.leftPanelChildren, ...)`
	 *
	 * The `traverseContext` is an optional argument that is passed through the
	 * entire traversal. It can be used to store accumulations or anything else that
	 * the callback might find relevant.
	 *
	 * @param {?*} children Children tree object.
	 * @param {!function} callback To invoke upon traversing each child.
	 * @param {?*} traverseContext Context for traversal.
	 * @return {!number} The number of children in this subtree.
	 */
	function traverseAllChildren(children, callback, traverseContext) {
	  if (children == null) {
	    return 0;
	  }

	  return traverseAllChildrenImpl(children, '', callback, traverseContext);
	}

	module.exports = traverseAllChildren;

/***/ }),
/* 921 */
/***/ (function(module, exports) {

	/* WEBPACK VAR INJECTION */(function(global) {/**
	 * Copyright (c) 2014, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * https://raw.github.com/facebook/regenerator/master/LICENSE file. An
	 * additional grant of patent rights can be found in the PATENTS file in
	 * the same directory.
	 */

	!(function(global) {
	  "use strict";

	  var Op = Object.prototype;
	  var hasOwn = Op.hasOwnProperty;
	  var undefined; // More compressible than void 0.
	  var $Symbol = typeof Symbol === "function" ? Symbol : {};
	  var iteratorSymbol = $Symbol.iterator || "@@iterator";
	  var asyncIteratorSymbol = $Symbol.asyncIterator || "@@asyncIterator";
	  var toStringTagSymbol = $Symbol.toStringTag || "@@toStringTag";

	  var inModule = typeof module === "object";
	  var runtime = global.regeneratorRuntime;
	  if (runtime) {
	    if (inModule) {
	      // If regeneratorRuntime is defined globally and we're in a module,
	      // make the exports object identical to regeneratorRuntime.
	      module.exports = runtime;
	    }
	    // Don't bother evaluating the rest of this file if the runtime was
	    // already defined globally.
	    return;
	  }

	  // Define the runtime globally (as expected by generated code) as either
	  // module.exports (if we're in a module) or a new, empty object.
	  runtime = global.regeneratorRuntime = inModule ? module.exports : {};

	  function wrap(innerFn, outerFn, self, tryLocsList) {
	    // If outerFn provided and outerFn.prototype is a Generator, then outerFn.prototype instanceof Generator.
	    var protoGenerator = outerFn && outerFn.prototype instanceof Generator ? outerFn : Generator;
	    var generator = Object.create(protoGenerator.prototype);
	    var context = new Context(tryLocsList || []);

	    // The ._invoke method unifies the implementations of the .next,
	    // .throw, and .return methods.
	    generator._invoke = makeInvokeMethod(innerFn, self, context);

	    return generator;
	  }
	  runtime.wrap = wrap;

	  // Try/catch helper to minimize deoptimizations. Returns a completion
	  // record like context.tryEntries[i].completion. This interface could
	  // have been (and was previously) designed to take a closure to be
	  // invoked without arguments, but in all the cases we care about we
	  // already have an existing method we want to call, so there's no need
	  // to create a new function object. We can even get away with assuming
	  // the method takes exactly one argument, since that happens to be true
	  // in every case, so we don't have to touch the arguments object. The
	  // only additional allocation required is the completion record, which
	  // has a stable shape and so hopefully should be cheap to allocate.
	  function tryCatch(fn, obj, arg) {
	    try {
	      return { type: "normal", arg: fn.call(obj, arg) };
	    } catch (err) {
	      return { type: "throw", arg: err };
	    }
	  }

	  var GenStateSuspendedStart = "suspendedStart";
	  var GenStateSuspendedYield = "suspendedYield";
	  var GenStateExecuting = "executing";
	  var GenStateCompleted = "completed";

	  // Returning this object from the innerFn has the same effect as
	  // breaking out of the dispatch switch statement.
	  var ContinueSentinel = {};

	  // Dummy constructor functions that we use as the .constructor and
	  // .constructor.prototype properties for functions that return Generator
	  // objects. For full spec compliance, you may wish to configure your
	  // minifier not to mangle the names of these two functions.
	  function Generator() {}
	  function GeneratorFunction() {}
	  function GeneratorFunctionPrototype() {}

	  // This is a polyfill for %IteratorPrototype% for environments that
	  // don't natively support it.
	  var IteratorPrototype = {};
	  IteratorPrototype[iteratorSymbol] = function () {
	    return this;
	  };

	  var getProto = Object.getPrototypeOf;
	  var NativeIteratorPrototype = getProto && getProto(getProto(values([])));
	  if (NativeIteratorPrototype &&
	      NativeIteratorPrototype !== Op &&
	      hasOwn.call(NativeIteratorPrototype, iteratorSymbol)) {
	    // This environment has a native %IteratorPrototype%; use it instead
	    // of the polyfill.
	    IteratorPrototype = NativeIteratorPrototype;
	  }

	  var Gp = GeneratorFunctionPrototype.prototype =
	    Generator.prototype = Object.create(IteratorPrototype);
	  GeneratorFunction.prototype = Gp.constructor = GeneratorFunctionPrototype;
	  GeneratorFunctionPrototype.constructor = GeneratorFunction;
	  GeneratorFunctionPrototype[toStringTagSymbol] =
	    GeneratorFunction.displayName = "GeneratorFunction";

	  // Helper for defining the .next, .throw, and .return methods of the
	  // Iterator interface in terms of a single ._invoke method.
	  function defineIteratorMethods(prototype) {
	    ["next", "throw", "return"].forEach(function(method) {
	      prototype[method] = function(arg) {
	        return this._invoke(method, arg);
	      };
	    });
	  }

	  runtime.isGeneratorFunction = function(genFun) {
	    var ctor = typeof genFun === "function" && genFun.constructor;
	    return ctor
	      ? ctor === GeneratorFunction ||
	        // For the native GeneratorFunction constructor, the best we can
	        // do is to check its .name property.
	        (ctor.displayName || ctor.name) === "GeneratorFunction"
	      : false;
	  };

	  runtime.mark = function(genFun) {
	    if (Object.setPrototypeOf) {
	      Object.setPrototypeOf(genFun, GeneratorFunctionPrototype);
	    } else {
	      genFun.__proto__ = GeneratorFunctionPrototype;
	      if (!(toStringTagSymbol in genFun)) {
	        genFun[toStringTagSymbol] = "GeneratorFunction";
	      }
	    }
	    genFun.prototype = Object.create(Gp);
	    return genFun;
	  };

	  // Within the body of any async function, `await x` is transformed to
	  // `yield regeneratorRuntime.awrap(x)`, so that the runtime can test
	  // `hasOwn.call(value, "__await")` to determine if the yielded value is
	  // meant to be awaited.
	  runtime.awrap = function(arg) {
	    return { __await: arg };
	  };

	  function AsyncIterator(generator) {
	    function invoke(method, arg, resolve, reject) {
	      var record = tryCatch(generator[method], generator, arg);
	      if (record.type === "throw") {
	        reject(record.arg);
	      } else {
	        var result = record.arg;
	        var value = result.value;
	        if (value &&
	            typeof value === "object" &&
	            hasOwn.call(value, "__await")) {
	          return Promise.resolve(value.__await).then(function(value) {
	            invoke("next", value, resolve, reject);
	          }, function(err) {
	            invoke("throw", err, resolve, reject);
	          });
	        }

	        return Promise.resolve(value).then(function(unwrapped) {
	          // When a yielded Promise is resolved, its final value becomes
	          // the .value of the Promise<{value,done}> result for the
	          // current iteration. If the Promise is rejected, however, the
	          // result for this iteration will be rejected with the same
	          // reason. Note that rejections of yielded Promises are not
	          // thrown back into the generator function, as is the case
	          // when an awaited Promise is rejected. This difference in
	          // behavior between yield and await is important, because it
	          // allows the consumer to decide what to do with the yielded
	          // rejection (swallow it and continue, manually .throw it back
	          // into the generator, abandon iteration, whatever). With
	          // await, by contrast, there is no opportunity to examine the
	          // rejection reason outside the generator function, so the
	          // only option is to throw it from the await expression, and
	          // let the generator function handle the exception.
	          result.value = unwrapped;
	          resolve(result);
	        }, reject);
	      }
	    }

	    if (typeof global.process === "object" && global.process.domain) {
	      invoke = global.process.domain.bind(invoke);
	    }

	    var previousPromise;

	    function enqueue(method, arg) {
	      function callInvokeWithMethodAndArg() {
	        return new Promise(function(resolve, reject) {
	          invoke(method, arg, resolve, reject);
	        });
	      }

	      return previousPromise =
	        // If enqueue has been called before, then we want to wait until
	        // all previous Promises have been resolved before calling invoke,
	        // so that results are always delivered in the correct order. If
	        // enqueue has not been called before, then it is important to
	        // call invoke immediately, without waiting on a callback to fire,
	        // so that the async generator function has the opportunity to do
	        // any necessary setup in a predictable way. This predictability
	        // is why the Promise constructor synchronously invokes its
	        // executor callback, and why async functions synchronously
	        // execute code before the first await. Since we implement simple
	        // async functions in terms of async generators, it is especially
	        // important to get this right, even though it requires care.
	        previousPromise ? previousPromise.then(
	          callInvokeWithMethodAndArg,
	          // Avoid propagating failures to Promises returned by later
	          // invocations of the iterator.
	          callInvokeWithMethodAndArg
	        ) : callInvokeWithMethodAndArg();
	    }

	    // Define the unified helper method that is used to implement .next,
	    // .throw, and .return (see defineIteratorMethods).
	    this._invoke = enqueue;
	  }

	  defineIteratorMethods(AsyncIterator.prototype);
	  AsyncIterator.prototype[asyncIteratorSymbol] = function () {
	    return this;
	  };
	  runtime.AsyncIterator = AsyncIterator;

	  // Note that simple async functions are implemented on top of
	  // AsyncIterator objects; they just return a Promise for the value of
	  // the final result produced by the iterator.
	  runtime.async = function(innerFn, outerFn, self, tryLocsList) {
	    var iter = new AsyncIterator(
	      wrap(innerFn, outerFn, self, tryLocsList)
	    );

	    return runtime.isGeneratorFunction(outerFn)
	      ? iter // If outerFn is a generator, return the full iterator.
	      : iter.next().then(function(result) {
	          return result.done ? result.value : iter.next();
	        });
	  };

	  function makeInvokeMethod(innerFn, self, context) {
	    var state = GenStateSuspendedStart;

	    return function invoke(method, arg) {
	      if (state === GenStateExecuting) {
	        throw new Error("Generator is already running");
	      }

	      if (state === GenStateCompleted) {
	        if (method === "throw") {
	          throw arg;
	        }

	        // Be forgiving, per 25.3.3.3.3 of the spec:
	        // https://people.mozilla.org/~jorendorff/es6-draft.html#sec-generatorresume
	        return doneResult();
	      }

	      context.method = method;
	      context.arg = arg;

	      while (true) {
	        var delegate = context.delegate;
	        if (delegate) {
	          var delegateResult = maybeInvokeDelegate(delegate, context);
	          if (delegateResult) {
	            if (delegateResult === ContinueSentinel) continue;
	            return delegateResult;
	          }
	        }

	        if (context.method === "next") {
	          // Setting context._sent for legacy support of Babel's
	          // function.sent implementation.
	          context.sent = context._sent = context.arg;

	        } else if (context.method === "throw") {
	          if (state === GenStateSuspendedStart) {
	            state = GenStateCompleted;
	            throw context.arg;
	          }

	          context.dispatchException(context.arg);

	        } else if (context.method === "return") {
	          context.abrupt("return", context.arg);
	        }

	        state = GenStateExecuting;

	        var record = tryCatch(innerFn, self, context);
	        if (record.type === "normal") {
	          // If an exception is thrown from innerFn, we leave state ===
	          // GenStateExecuting and loop back for another invocation.
	          state = context.done
	            ? GenStateCompleted
	            : GenStateSuspendedYield;

	          if (record.arg === ContinueSentinel) {
	            continue;
	          }

	          return {
	            value: record.arg,
	            done: context.done
	          };

	        } else if (record.type === "throw") {
	          state = GenStateCompleted;
	          // Dispatch the exception by looping back around to the
	          // context.dispatchException(context.arg) call above.
	          context.method = "throw";
	          context.arg = record.arg;
	        }
	      }
	    };
	  }

	  // Call delegate.iterator[context.method](context.arg) and handle the
	  // result, either by returning a { value, done } result from the
	  // delegate iterator, or by modifying context.method and context.arg,
	  // setting context.delegate to null, and returning the ContinueSentinel.
	  function maybeInvokeDelegate(delegate, context) {
	    var method = delegate.iterator[context.method];
	    if (method === undefined) {
	      // A .throw or .return when the delegate iterator has no .throw
	      // method always terminates the yield* loop.
	      context.delegate = null;

	      if (context.method === "throw") {
	        if (delegate.iterator.return) {
	          // If the delegate iterator has a return method, give it a
	          // chance to clean up.
	          context.method = "return";
	          context.arg = undefined;
	          maybeInvokeDelegate(delegate, context);

	          if (context.method === "throw") {
	            // If maybeInvokeDelegate(context) changed context.method from
	            // "return" to "throw", let that override the TypeError below.
	            return ContinueSentinel;
	          }
	        }

	        context.method = "throw";
	        context.arg = new TypeError(
	          "The iterator does not provide a 'throw' method");
	      }

	      return ContinueSentinel;
	    }

	    var record = tryCatch(method, delegate.iterator, context.arg);

	    if (record.type === "throw") {
	      context.method = "throw";
	      context.arg = record.arg;
	      context.delegate = null;
	      return ContinueSentinel;
	    }

	    var info = record.arg;

	    if (! info) {
	      context.method = "throw";
	      context.arg = new TypeError("iterator result is not an object");
	      context.delegate = null;
	      return ContinueSentinel;
	    }

	    if (info.done) {
	      // Assign the result of the finished delegate to the temporary
	      // variable specified by delegate.resultName (see delegateYield).
	      context[delegate.resultName] = info.value;

	      // Resume execution at the desired location (see delegateYield).
	      context.next = delegate.nextLoc;

	      // If context.method was "throw" but the delegate handled the
	      // exception, let the outer generator proceed normally. If
	      // context.method was "next", forget context.arg since it has been
	      // "consumed" by the delegate iterator. If context.method was
	      // "return", allow the original .return call to continue in the
	      // outer generator.
	      if (context.method !== "return") {
	        context.method = "next";
	        context.arg = undefined;
	      }

	    } else {
	      // Re-yield the result returned by the delegate method.
	      return info;
	    }

	    // The delegate iterator is finished, so forget it and continue with
	    // the outer generator.
	    context.delegate = null;
	    return ContinueSentinel;
	  }

	  // Define Generator.prototype.{next,throw,return} in terms of the
	  // unified ._invoke helper method.
	  defineIteratorMethods(Gp);

	  Gp[toStringTagSymbol] = "Generator";

	  // A Generator should always return itself as the iterator object when the
	  // @@iterator function is called on it. Some browsers' implementations of the
	  // iterator prototype chain incorrectly implement this, causing the Generator
	  // object to not be returned from this call. This ensures that doesn't happen.
	  // See https://github.com/facebook/regenerator/issues/274 for more details.
	  Gp[iteratorSymbol] = function() {
	    return this;
	  };

	  Gp.toString = function() {
	    return "[object Generator]";
	  };

	  function pushTryEntry(locs) {
	    var entry = { tryLoc: locs[0] };

	    if (1 in locs) {
	      entry.catchLoc = locs[1];
	    }

	    if (2 in locs) {
	      entry.finallyLoc = locs[2];
	      entry.afterLoc = locs[3];
	    }

	    this.tryEntries.push(entry);
	  }

	  function resetTryEntry(entry) {
	    var record = entry.completion || {};
	    record.type = "normal";
	    delete record.arg;
	    entry.completion = record;
	  }

	  function Context(tryLocsList) {
	    // The root entry object (effectively a try statement without a catch
	    // or a finally block) gives us a place to store values thrown from
	    // locations where there is no enclosing try statement.
	    this.tryEntries = [{ tryLoc: "root" }];
	    tryLocsList.forEach(pushTryEntry, this);
	    this.reset(true);
	  }

	  runtime.keys = function(object) {
	    var keys = [];
	    for (var key in object) {
	      keys.push(key);
	    }
	    keys.reverse();

	    // Rather than returning an object with a next method, we keep
	    // things simple and return the next function itself.
	    return function next() {
	      while (keys.length) {
	        var key = keys.pop();
	        if (key in object) {
	          next.value = key;
	          next.done = false;
	          return next;
	        }
	      }

	      // To avoid creating an additional object, we just hang the .value
	      // and .done properties off the next function object itself. This
	      // also ensures that the minifier will not anonymize the function.
	      next.done = true;
	      return next;
	    };
	  };

	  function values(iterable) {
	    if (iterable) {
	      var iteratorMethod = iterable[iteratorSymbol];
	      if (iteratorMethod) {
	        return iteratorMethod.call(iterable);
	      }

	      if (typeof iterable.next === "function") {
	        return iterable;
	      }

	      if (!isNaN(iterable.length)) {
	        var i = -1, next = function next() {
	          while (++i < iterable.length) {
	            if (hasOwn.call(iterable, i)) {
	              next.value = iterable[i];
	              next.done = false;
	              return next;
	            }
	          }

	          next.value = undefined;
	          next.done = true;

	          return next;
	        };

	        return next.next = next;
	      }
	    }

	    // Return an iterator with no values.
	    return { next: doneResult };
	  }
	  runtime.values = values;

	  function doneResult() {
	    return { value: undefined, done: true };
	  }

	  Context.prototype = {
	    constructor: Context,

	    reset: function(skipTempReset) {
	      this.prev = 0;
	      this.next = 0;
	      // Resetting context._sent for legacy support of Babel's
	      // function.sent implementation.
	      this.sent = this._sent = undefined;
	      this.done = false;
	      this.delegate = null;

	      this.method = "next";
	      this.arg = undefined;

	      this.tryEntries.forEach(resetTryEntry);

	      if (!skipTempReset) {
	        for (var name in this) {
	          // Not sure about the optimal order of these conditions:
	          if (name.charAt(0) === "t" &&
	              hasOwn.call(this, name) &&
	              !isNaN(+name.slice(1))) {
	            this[name] = undefined;
	          }
	        }
	      }
	    },

	    stop: function() {
	      this.done = true;

	      var rootEntry = this.tryEntries[0];
	      var rootRecord = rootEntry.completion;
	      if (rootRecord.type === "throw") {
	        throw rootRecord.arg;
	      }

	      return this.rval;
	    },

	    dispatchException: function(exception) {
	      if (this.done) {
	        throw exception;
	      }

	      var context = this;
	      function handle(loc, caught) {
	        record.type = "throw";
	        record.arg = exception;
	        context.next = loc;

	        if (caught) {
	          // If the dispatched exception was caught by a catch block,
	          // then let that catch block handle the exception normally.
	          context.method = "next";
	          context.arg = undefined;
	        }

	        return !! caught;
	      }

	      for (var i = this.tryEntries.length - 1; i >= 0; --i) {
	        var entry = this.tryEntries[i];
	        var record = entry.completion;

	        if (entry.tryLoc === "root") {
	          // Exception thrown outside of any try block that could handle
	          // it, so set the completion value of the entire function to
	          // throw the exception.
	          return handle("end");
	        }

	        if (entry.tryLoc <= this.prev) {
	          var hasCatch = hasOwn.call(entry, "catchLoc");
	          var hasFinally = hasOwn.call(entry, "finallyLoc");

	          if (hasCatch && hasFinally) {
	            if (this.prev < entry.catchLoc) {
	              return handle(entry.catchLoc, true);
	            } else if (this.prev < entry.finallyLoc) {
	              return handle(entry.finallyLoc);
	            }

	          } else if (hasCatch) {
	            if (this.prev < entry.catchLoc) {
	              return handle(entry.catchLoc, true);
	            }

	          } else if (hasFinally) {
	            if (this.prev < entry.finallyLoc) {
	              return handle(entry.finallyLoc);
	            }

	          } else {
	            throw new Error("try statement without catch or finally");
	          }
	        }
	      }
	    },

	    abrupt: function(type, arg) {
	      for (var i = this.tryEntries.length - 1; i >= 0; --i) {
	        var entry = this.tryEntries[i];
	        if (entry.tryLoc <= this.prev &&
	            hasOwn.call(entry, "finallyLoc") &&
	            this.prev < entry.finallyLoc) {
	          var finallyEntry = entry;
	          break;
	        }
	      }

	      if (finallyEntry &&
	          (type === "break" ||
	           type === "continue") &&
	          finallyEntry.tryLoc <= arg &&
	          arg <= finallyEntry.finallyLoc) {
	        // Ignore the finally entry if control is not jumping to a
	        // location outside the try/catch block.
	        finallyEntry = null;
	      }

	      var record = finallyEntry ? finallyEntry.completion : {};
	      record.type = type;
	      record.arg = arg;

	      if (finallyEntry) {
	        this.method = "next";
	        this.next = finallyEntry.finallyLoc;
	        return ContinueSentinel;
	      }

	      return this.complete(record);
	    },

	    complete: function(record, afterLoc) {
	      if (record.type === "throw") {
	        throw record.arg;
	      }

	      if (record.type === "break" ||
	          record.type === "continue") {
	        this.next = record.arg;
	      } else if (record.type === "return") {
	        this.rval = this.arg = record.arg;
	        this.method = "return";
	        this.next = "end";
	      } else if (record.type === "normal" && afterLoc) {
	        this.next = afterLoc;
	      }

	      return ContinueSentinel;
	    },

	    finish: function(finallyLoc) {
	      for (var i = this.tryEntries.length - 1; i >= 0; --i) {
	        var entry = this.tryEntries[i];
	        if (entry.finallyLoc === finallyLoc) {
	          this.complete(entry.completion, entry.afterLoc);
	          resetTryEntry(entry);
	          return ContinueSentinel;
	        }
	      }
	    },

	    "catch": function(tryLoc) {
	      for (var i = this.tryEntries.length - 1; i >= 0; --i) {
	        var entry = this.tryEntries[i];
	        if (entry.tryLoc === tryLoc) {
	          var record = entry.completion;
	          if (record.type === "throw") {
	            var thrown = record.arg;
	            resetTryEntry(entry);
	          }
	          return thrown;
	        }
	      }

	      // The context.catch method must only be called with a location
	      // argument that corresponds to a known catch block.
	      throw new Error("illegal catch attempt");
	    },

	    delegateYield: function(iterable, resultName, nextLoc) {
	      this.delegate = {
	        iterator: values(iterable),
	        resultName: resultName,
	        nextLoc: nextLoc
	      };

	      if (this.method === "next") {
	        // Deliberately forget the last sent value so that we don't
	        // accidentally pass it on to the delegate.
	        this.arg = undefined;
	      }

	      return ContinueSentinel;
	    }
	  };
	})(
	  // Among the various tricks for obtaining a reference to the global
	  // object, this seems to be the most reliable technique that does not
	  // use indirect eval (which violates Content Security Policy).
	  typeof global === "object" ? global :
	  typeof window === "object" ? window :
	  typeof self === "object" ? self : this
	);

	/* WEBPACK VAR INJECTION */}.call(exports, (function() { return this; }())))

/***/ }),
/* 922 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';

	var define = __webpack_require__(111);
	var callBind = __webpack_require__(178);

	var implementation = __webpack_require__(374);
	var getPolyfill = __webpack_require__(375);
	var shim = __webpack_require__(923);

	var flagsBound = callBind(implementation);

	define(flagsBound, {
		getPolyfill: getPolyfill,
		implementation: implementation,
		shim: shim
	});

	module.exports = flagsBound;


/***/ }),
/* 923 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';

	var supportsDescriptors = __webpack_require__(111).supportsDescriptors;
	var getPolyfill = __webpack_require__(375);
	var gOPD = Object.getOwnPropertyDescriptor;
	var defineProperty = Object.defineProperty;
	var TypeErr = TypeError;
	var getProto = Object.getPrototypeOf;
	var regex = /a/;

	module.exports = function shimFlags() {
		if (!supportsDescriptors || !getProto) {
			throw new TypeErr('RegExp.prototype.flags requires a true ES5 environment that supports property descriptors');
		}
		var polyfill = getPolyfill();
		var proto = getProto(regex);
		var descriptor = gOPD(proto, 'flags');
		if (!descriptor || descriptor.get !== polyfill) {
			defineProperty(proto, 'flags', {
				configurable: true,
				enumerable: false,
				get: polyfill
			});
		}
		return polyfill;
	};


/***/ }),
/* 924 */
/***/ (function(module, exports, __webpack_require__) {

	module.exports.apps = apps;
	/**
	* @namespace apps
	*/
	function apps() {}


	apps.AppTracking = __webpack_require__(100);

	//
	// Expose the module.
	//
	if (true) {
	  module.exports = apps;
	}
	    

/***/ }),
/* 925 */
/***/ (function(module, exports, __webpack_require__) {

	/**
	 * Autogenerated by Avro
	 * 
	 * DO NOT EDIT DIRECTLY
	 */


	/**
	* @constructor
	* @memberof base
	*/
	var Address = function() {
	  this._class_ = Address;
	  this.address1 = undefined;
	  this.address2 = undefined;
	  this.address3 = undefined;
	  this.city = undefined;
	  this.country = undefined;
	  this.phoneNumber = undefined;
	  this.state = undefined;
	  this.zip = undefined;
	};


	/**
	* Set the field value
	* @memberof base.Address
	* @param {Null|String} address1 
	*/
	Address.prototype.setAddress1 = function(address1) {
	  this.address1 = address1;
	};

	/**
	* Get the field value
	* @memberof base.Address
	* @return {Null|String} 
	*/
	Address.prototype.getAddress1 = function() {
	  return this.address1;
	};

	/**
	* Set the field value
	* @memberof base.Address
	* @param {Null|String} address2 
	*/
	Address.prototype.setAddress2 = function(address2) {
	  this.address2 = address2;
	};

	/**
	* Get the field value
	* @memberof base.Address
	* @return {Null|String} 
	*/
	Address.prototype.getAddress2 = function() {
	  return this.address2;
	};

	/**
	* Set the field value
	* @memberof base.Address
	* @param {Null|String} address3 
	*/
	Address.prototype.setAddress3 = function(address3) {
	  this.address3 = address3;
	};

	/**
	* Get the field value
	* @memberof base.Address
	* @return {Null|String} 
	*/
	Address.prototype.getAddress3 = function() {
	  return this.address3;
	};

	/**
	* Set the field value
	* @memberof base.Address
	* @param {Null|String} city 
	*/
	Address.prototype.setCity = function(city) {
	  this.city = city;
	};

	/**
	* Get the field value
	* @memberof base.Address
	* @return {Null|String} 
	*/
	Address.prototype.getCity = function() {
	  return this.city;
	};

	/**
	* Set the field value
	* @memberof base.Address
	* @param {Null|String} country 
	*/
	Address.prototype.setCountry = function(country) {
	  this.country = country;
	};

	/**
	* Get the field value
	* @memberof base.Address
	* @return {Null|String} 
	*/
	Address.prototype.getCountry = function() {
	  return this.country;
	};

	/**
	* Set the field value
	* @memberof base.Address
	* @param {Null|String} phoneNumber 
	*/
	Address.prototype.setPhoneNumber = function(phoneNumber) {
	  this.phoneNumber = phoneNumber;
	};

	/**
	* Get the field value
	* @memberof base.Address
	* @return {Null|String} 
	*/
	Address.prototype.getPhoneNumber = function() {
	  return this.phoneNumber;
	};

	/**
	* Set the field value
	* @memberof base.Address
	* @param {Null|String} state 
	*/
	Address.prototype.setState = function(state) {
	  this.state = state;
	};

	/**
	* Get the field value
	* @memberof base.Address
	* @return {Null|String} 
	*/
	Address.prototype.getState = function() {
	  return this.state;
	};

	/**
	* Set the field value
	* @memberof base.Address
	* @param {Null|String} zip 
	*/
	Address.prototype.setZip = function(zip) {
	  this.zip = zip;
	};

	/**
	* Get the field value
	* @memberof base.Address
	* @return {Null|String} 
	*/
	Address.prototype.getZip = function() {
	  return this.zip;
	};

	/**
	* @memberof base.Address
	* @private
	*/
	Address.prototype.getMetaInfo = function(fieldName) {
	  var curclass = this._class_;
	  do {
	    var fieldMetaInfo = curclass._meta_.fields[fieldName];
	    if(fieldMetaInfo) {
	      return fieldMetaInfo;
	    }
	    if(curclass._meta_._superMeta_) {
	      curclass = curclass._meta_._superMeta_._class_;
	    } else {
	      curclass = null;
	    }
	  } while(curclass);
	  return null;
	};

	Address.prototype.toString = function() {
	  return JSON.stringify(this);
	};

	Address._meta_ =  {fields:  {}};
	Address._meta_._class_ =  Address;
	Address._meta_.fields["address1"] = {};
	Address._meta_.fields["address1"].type = String;
	Address._meta_.fields["address2"] = {};
	Address._meta_.fields["address2"].type = String;
	Address._meta_.fields["address3"] = {};
	Address._meta_.fields["address3"].type = String;
	Address._meta_.fields["city"] = {};
	Address._meta_.fields["city"].type = String;
	Address._meta_.fields["country"] = {};
	Address._meta_.fields["country"].type = String;
	Address._meta_.fields["phoneNumber"] = {};
	Address._meta_.fields["phoneNumber"].type = String;
	Address._meta_.fields["state"] = {};
	Address._meta_.fields["state"].type = String;
	Address._meta_.fields["zip"] = {};
	Address._meta_.fields["zip"].type = String;

	//
	// Expose the module.
	//
	if (true) {
	module.exports = Address;
	}



/***/ }),
/* 926 */
/***/ (function(module, exports, __webpack_require__) {

	/**
	 * Autogenerated by Avro
	 * 
	 * DO NOT EDIT DIRECTLY
	 */


	/**
	* @memberof base
	* @enum {string}
	*/
	var AppExclusionType = {
	  ALL : "ALL",
	  MARKET : "MARKET",
	  SEARCH : "SEARCH",
	  INSTALL : "INSTALL"
	};


	//
	// Expose the module.
	//
	if (true) {
	module.exports = AppExclusionType;
	}



/***/ }),
/* 927 */
/***/ (function(module, exports, __webpack_require__) {

	/**
	 * Autogenerated by Avro
	 * 
	 * DO NOT EDIT DIRECTLY
	 */


	/**
	* @memberof base
	* @enum {string}
	*/
	var ApprovalStatus = {
	  NEW : "NEW",
	  PENDING : "PENDING",
	  APPROVED_PENDING_SIGNING : "APPROVED_PENDING_SIGNING",
	  APPROVED : "APPROVED",
	  DENIED : "DENIED",
	  PUBLISHED : "PUBLISHED"
	};


	//
	// Expose the module.
	//
	if (true) {
	module.exports = ApprovalStatus;
	}



/***/ }),
/* 928 */
/***/ (function(module, exports, __webpack_require__) {

	/**
	 * Autogenerated by Avro
	 * 
	 * DO NOT EDIT DIRECTLY
	 */


	/**
	* @memberof base
	* @enum {string}
	*/
	var BusinessTypeCode = {
	  FULL_SERVICE_RESTAURANT : "FULL_SERVICE_RESTAURANT",
	  QUICK_SERVICE_RESTAURANT : "QUICK_SERVICE_RESTAURANT",
	  COFFEE_SHOP : "COFFEE_SHOP",
	  BAKERY : "BAKERY",
	  BAR : "BAR",
	  FOOD_TRUCK : "FOOD_TRUCK",
	  FROZEN_YOGURT : "FROZEN_YOGURT",
	  PIZZA : "PIZZA",
	  DELI : "DELI",
	  OTHER_RESTAURANT : "OTHER_RESTAURANT",
	  BOUTIQUE : "BOUTIQUE",
	  CONVENIENCE_STORE : "CONVENIENCE_STORE",
	  GROCERY : "GROCERY",
	  LIQUOR_STORE : "LIQUOR_STORE",
	  VAPE_SHOP : "VAPE_SHOP",
	  JEWELRY : "JEWELRY",
	  FLORIST : "FLORIST",
	  OTHER_RETAIL : "OTHER_RETAIL",
	  FITNESS : "FITNESS",
	  SPA : "SPA",
	  HAIR_SALON : "HAIR_SALON",
	  HOME_AND_REPAIR : "HOME_AND_REPAIR",
	  PROFESSIONAL_SERVICES : "PROFESSIONAL_SERVICES",
	  CATERING : "CATERING",
	  OTHER_SERVICE : "OTHER_SERVICE"
	};


	//
	// Expose the module.
	//
	if (true) {
	module.exports = BusinessTypeCode;
	}



/***/ }),
/* 929 */
/***/ (function(module, exports, __webpack_require__) {

	/**
	 * Autogenerated by Avro
	 * 
	 * DO NOT EDIT DIRECTLY
	 */

	var base_ChallengeType = __webpack_require__(235);

	/**
	* @constructor
	* @memberof base
	*/
	var ChallengeTypeEnum = function() {
	  this._class_ = ChallengeTypeEnum;
	  this.challengeType = undefined;
	};


	/**
	* Set the field value
	* @memberof base.ChallengeTypeEnum
	* @param {base.ChallengeType} challengeType 
	*/
	ChallengeTypeEnum.prototype.setChallengeType = function(challengeType) {
	  this.challengeType = challengeType;
	};

	/**
	* Get the field value
	* @memberof base.ChallengeTypeEnum
	* @return {base.ChallengeType} 
	*/
	ChallengeTypeEnum.prototype.getChallengeType = function() {
	  return this.challengeType;
	};

	/**
	* @memberof base.ChallengeTypeEnum
	* @private
	*/
	ChallengeTypeEnum.prototype.getMetaInfo = function(fieldName) {
	  var curclass = this._class_;
	  do {
	    var fieldMetaInfo = curclass._meta_.fields[fieldName];
	    if(fieldMetaInfo) {
	      return fieldMetaInfo;
	    }
	    if(curclass._meta_._superMeta_) {
	      curclass = curclass._meta_._superMeta_._class_;
	    } else {
	      curclass = null;
	    }
	  } while(curclass);
	  return null;
	};

	ChallengeTypeEnum.prototype.toString = function() {
	  return JSON.stringify(this);
	};

	ChallengeTypeEnum._meta_ =  {fields:  {}};
	ChallengeTypeEnum._meta_._class_ =  ChallengeTypeEnum;
	ChallengeTypeEnum._meta_.fields["challengeType"] = {};
	ChallengeTypeEnum._meta_.fields["challengeType"].type = base_ChallengeType;

	//
	// Expose the module.
	//
	if (true) {
	module.exports = ChallengeTypeEnum;
	}



/***/ }),
/* 930 */
/***/ (function(module, exports, __webpack_require__) {

	/**
	 * Autogenerated by Avro
	 * 
	 * DO NOT EDIT DIRECTLY
	 */


	/**
	* @constructor
	* @memberof base
	*/
	var CountryInfo = function() {
	  this._class_ = CountryInfo;
	  this.countryCode = undefined;
	  this.displayName = undefined;
	  this.localDisplayName = undefined;
	  this.defaultCurrency = undefined;
	  this.defaultTimezone = undefined;
	  this.stateProvinceRequired = undefined;
	  this.zipPostalRequired = undefined;
	  this.countyRequired = undefined;
	  this.defaultLocale = undefined;
	  this.appMarketBillingEnabled = undefined;
	};


	/**
	* Set the field value
	* ISO 3166-1-alpha-2 code
	*
	* @memberof base.CountryInfo
	* @param {String} countryCode 
	*/
	CountryInfo.prototype.setCountryCode = function(countryCode) {
	  this.countryCode = countryCode;
	};

	/**
	* Get the field value
	* ISO 3166-1-alpha-2 code
	* @memberof base.CountryInfo
	* @return {String} 
	*/
	CountryInfo.prototype.getCountryCode = function() {
	  return this.countryCode;
	};

	/**
	* Set the field value
	* @memberof base.CountryInfo
	* @param {String} displayName 
	*/
	CountryInfo.prototype.setDisplayName = function(displayName) {
	  this.displayName = displayName;
	};

	/**
	* Get the field value
	* @memberof base.CountryInfo
	* @return {String} 
	*/
	CountryInfo.prototype.getDisplayName = function() {
	  return this.displayName;
	};

	/**
	* Set the field value
	* @memberof base.CountryInfo
	* @param {Null|String} localDisplayName 
	*/
	CountryInfo.prototype.setLocalDisplayName = function(localDisplayName) {
	  this.localDisplayName = localDisplayName;
	};

	/**
	* Get the field value
	* @memberof base.CountryInfo
	* @return {Null|String} 
	*/
	CountryInfo.prototype.getLocalDisplayName = function() {
	  return this.localDisplayName;
	};

	/**
	* Set the field value
	* @memberof base.CountryInfo
	* @param {String} defaultCurrency 
	*/
	CountryInfo.prototype.setDefaultCurrency = function(defaultCurrency) {
	  this.defaultCurrency = defaultCurrency;
	};

	/**
	* Get the field value
	* @memberof base.CountryInfo
	* @return {String} 
	*/
	CountryInfo.prototype.getDefaultCurrency = function() {
	  return this.defaultCurrency;
	};

	/**
	* Set the field value
	* @memberof base.CountryInfo
	* @param {String} defaultTimezone 
	*/
	CountryInfo.prototype.setDefaultTimezone = function(defaultTimezone) {
	  this.defaultTimezone = defaultTimezone;
	};

	/**
	* Get the field value
	* @memberof base.CountryInfo
	* @return {String} 
	*/
	CountryInfo.prototype.getDefaultTimezone = function() {
	  return this.defaultTimezone;
	};

	/**
	* Set the field value
	* Indicates whether the state/province field is required when creating the address
	*
	* @memberof base.CountryInfo
	* @param {Boolean} stateProvinceRequired 
	*/
	CountryInfo.prototype.setStateProvinceRequired = function(stateProvinceRequired) {
	  this.stateProvinceRequired = stateProvinceRequired;
	};

	/**
	* Get the field value
	* Indicates whether the state/province field is required when creating the address
	* @memberof base.CountryInfo
	* @return {Boolean} 
	*/
	CountryInfo.prototype.getStateProvinceRequired = function() {
	  return this.stateProvinceRequired;
	};

	/**
	* Set the field value
	* Indicates whether the ZIP/Postal code field is required when creating the address
	*
	* @memberof base.CountryInfo
	* @param {Boolean} zipPostalRequired 
	*/
	CountryInfo.prototype.setZipPostalRequired = function(zipPostalRequired) {
	  this.zipPostalRequired = zipPostalRequired;
	};

	/**
	* Get the field value
	* Indicates whether the ZIP/Postal code field is required when creating the address
	* @memberof base.CountryInfo
	* @return {Boolean} 
	*/
	CountryInfo.prototype.getZipPostalRequired = function() {
	  return this.zipPostalRequired;
	};

	/**
	* Set the field value
	* Indicates whether the county field is required when creating the address
	*
	* @memberof base.CountryInfo
	* @param {Boolean} countyRequired 
	*/
	CountryInfo.prototype.setCountyRequired = function(countyRequired) {
	  this.countyRequired = countyRequired;
	};

	/**
	* Get the field value
	* Indicates whether the county field is required when creating the address
	* @memberof base.CountryInfo
	* @return {Boolean} 
	*/
	CountryInfo.prototype.getCountyRequired = function() {
	  return this.countyRequired;
	};

	/**
	* Set the field value
	* @memberof base.CountryInfo
	* @param {String} defaultLocale 
	*/
	CountryInfo.prototype.setDefaultLocale = function(defaultLocale) {
	  this.defaultLocale = defaultLocale;
	};

	/**
	* Get the field value
	* @memberof base.CountryInfo
	* @return {String} 
	*/
	CountryInfo.prototype.getDefaultLocale = function() {
	  return this.defaultLocale;
	};

	/**
	* Set the field value
	* Indicates whether the country is enabled for app market billing
	*
	* @memberof base.CountryInfo
	* @param {Boolean} appMarketBillingEnabled 
	*/
	CountryInfo.prototype.setAppMarketBillingEnabled = function(appMarketBillingEnabled) {
	  this.appMarketBillingEnabled = appMarketBillingEnabled;
	};

	/**
	* Get the field value
	* Indicates whether the country is enabled for app market billing
	* @memberof base.CountryInfo
	* @return {Boolean} 
	*/
	CountryInfo.prototype.getAppMarketBillingEnabled = function() {
	  return this.appMarketBillingEnabled;
	};

	/**
	* @memberof base.CountryInfo
	* @private
	*/
	CountryInfo.prototype.getMetaInfo = function(fieldName) {
	  var curclass = this._class_;
	  do {
	    var fieldMetaInfo = curclass._meta_.fields[fieldName];
	    if(fieldMetaInfo) {
	      return fieldMetaInfo;
	    }
	    if(curclass._meta_._superMeta_) {
	      curclass = curclass._meta_._superMeta_._class_;
	    } else {
	      curclass = null;
	    }
	  } while(curclass);
	  return null;
	};

	CountryInfo.prototype.toString = function() {
	  return JSON.stringify(this);
	};

	CountryInfo._meta_ =  {fields:  {}};
	CountryInfo._meta_._class_ =  CountryInfo;
	CountryInfo._meta_.fields["countryCode"] = {};
	CountryInfo._meta_.fields["countryCode"].type = String;
	CountryInfo._meta_.fields["displayName"] = {};
	CountryInfo._meta_.fields["displayName"].type = String;
	CountryInfo._meta_.fields["localDisplayName"] = {};
	CountryInfo._meta_.fields["localDisplayName"].type = String;
	CountryInfo._meta_.fields["defaultCurrency"] = {};
	CountryInfo._meta_.fields["defaultCurrency"].type = String;
	CountryInfo._meta_.fields["defaultTimezone"] = {};
	CountryInfo._meta_.fields["defaultTimezone"].type = String;
	CountryInfo._meta_.fields["stateProvinceRequired"] = {};
	CountryInfo._meta_.fields["stateProvinceRequired"].type = Boolean;
	CountryInfo._meta_.fields["zipPostalRequired"] = {};
	CountryInfo._meta_.fields["zipPostalRequired"].type = Boolean;
	CountryInfo._meta_.fields["countyRequired"] = {};
	CountryInfo._meta_.fields["countyRequired"].type = Boolean;
	CountryInfo._meta_.fields["defaultLocale"] = {};
	CountryInfo._meta_.fields["defaultLocale"].type = String;
	CountryInfo._meta_.fields["appMarketBillingEnabled"] = {};
	CountryInfo._meta_.fields["appMarketBillingEnabled"].type = Boolean;

	//
	// Expose the module.
	//
	if (true) {
	module.exports = CountryInfo;
	}



/***/ }),
/* 931 */
/***/ (function(module, exports, __webpack_require__) {

	
	module.exports.base = base;
	/**
	* @namespace base
	*/
	function base() {}


	base.Address = __webpack_require__(925);
	base.AppExclusionType = __webpack_require__(926);
	base.ApprovalStatus = __webpack_require__(927);
	base.BusinessTypeCode = __webpack_require__(928);
	base.CardData = __webpack_require__(233);
	base.Challenge = __webpack_require__(234);
	base.ChallengeType = __webpack_require__(235);
	base.ChallengeTypeEnum = __webpack_require__(929);
	base.CountryInfo = __webpack_require__(930);
	base.PendingPaymentEntry = __webpack_require__(236);
	base.Point = __webpack_require__(376);
	base.Points = __webpack_require__(377);
	base.Reference = __webpack_require__(5);
	base.ServiceCharge = __webpack_require__(378);
	base.Signature = __webpack_require__(86);
	base.Tender = __webpack_require__(116);

	//
	// Expose the module.
	//
	if (true) {
	  module.exports = base;
	}
	    

/***/ }),
/* 932 */
/***/ (function(module, exports, __webpack_require__) {

	/**
	 * Autogenerated by Avro
	 * 
	 * DO NOT EDIT DIRECTLY
	 */


	/**
	* @constructor
	* @memberof custom
	*/
	var CustomActivity = function() {
	  this._class_ = CustomActivity;
	  this.action = undefined;
	  this.categories = undefined;
	};


	/**
	* Set the field value
	* Action for the custom activity
	*
	* @memberof custom.CustomActivity
	* @param {String} action 
	*/
	CustomActivity.prototype.setAction = function(action) {
	  this.action = action;
	};

	/**
	* Get the field value
	* Action for the custom activity
	* @memberof custom.CustomActivity
	* @return {String} 
	*/
	CustomActivity.prototype.getAction = function() {
	  return this.action;
	};

	/**
	* Set the field value
	* List of categories for the specified action.
	*
	* @memberof custom.CustomActivity
	* @param {Array.<String>} categories An array of 
	*/
	CustomActivity.prototype.setCategories = function(categories) {
	  this.categories = categories;
	};

	/**
	* Get the field value
	* List of categories for the specified action.
	* @memberof custom.CustomActivity
	* @return {Array.<String>} An array of 
	*/
	CustomActivity.prototype.getCategories = function() {
	  return this.categories;
	};

	/**
	* @memberof custom.CustomActivity
	* @private
	*/
	CustomActivity.prototype.getMetaInfo = function(fieldName) {
	  var curclass = this._class_;
	  do {
	    var fieldMetaInfo = curclass._meta_.fields[fieldName];
	    if(fieldMetaInfo) {
	      return fieldMetaInfo;
	    }
	    if(curclass._meta_._superMeta_) {
	      curclass = curclass._meta_._superMeta_._class_;
	    } else {
	      curclass = null;
	    }
	  } while(curclass);
	  return null;
	};

	CustomActivity.prototype.toString = function() {
	  return JSON.stringify(this);
	};

	CustomActivity._meta_ =  {fields:  {}};
	CustomActivity._meta_._class_ =  CustomActivity;
	CustomActivity._meta_.fields["action"] = {};
	CustomActivity._meta_.fields["action"].type = String;
	CustomActivity._meta_.fields["categories"] = {};
	CustomActivity._meta_.fields["categories"].type = Array;

	//
	// Expose the module.
	//
	if (true) {
	module.exports = CustomActivity;
	}



/***/ }),
/* 933 */
/***/ (function(module, exports, __webpack_require__) {

	/**
	 * Autogenerated by Avro
	 * 
	 * DO NOT EDIT DIRECTLY
	 */

	var base_Reference = __webpack_require__(5);

	/**
	* @constructor
	* @memberof customers
	*/
	var Confirmation = function() {
	  this._class_ = Confirmation;
	  this.order = undefined;
	  this.customer = undefined;
	  this.card = undefined;
	  this.emailAddress = undefined;
	};


	/**
	* Set the field value
	* Order UUID could be passed in if confirmation is related to a transaction
	*
	* @memberof customers.Confirmation
	* @param {Null|base.Reference} order 
	*/
	Confirmation.prototype.setOrder = function(order) {
	  this.order = order;
	};

	/**
	* Get the field value
	* Order UUID could be passed in if confirmation is related to a transaction
	* @memberof customers.Confirmation
	* @return {Null|base.Reference} 
	*/
	Confirmation.prototype.getOrder = function() {
	  return this.order;
	};

	/**
	* Set the field value
	* Customer associated with the confirmation
	*
	* @memberof customers.Confirmation
	* @param {Null|base.Reference} customer 
	*/
	Confirmation.prototype.setCustomer = function(customer) {
	  this.customer = customer;
	};

	/**
	* Get the field value
	* Customer associated with the confirmation
	* @memberof customers.Confirmation
	* @return {Null|base.Reference} 
	*/
	Confirmation.prototype.getCustomer = function() {
	  return this.customer;
	};

	/**
	* Set the field value
	* New Card that is being confirmed
	*
	* @memberof customers.Confirmation
	* @param {Null|base.Reference} card 
	*/
	Confirmation.prototype.setCard = function(card) {
	  this.card = card;
	};

	/**
	* Get the field value
	* New Card that is being confirmed
	* @memberof customers.Confirmation
	* @return {Null|base.Reference} 
	*/
	Confirmation.prototype.getCard = function() {
	  return this.card;
	};

	/**
	* Set the field value
	* Email address to send confirmation to
	*
	* @memberof customers.Confirmation
	* @param {Null|String} emailAddress 
	*/
	Confirmation.prototype.setEmailAddress = function(emailAddress) {
	  this.emailAddress = emailAddress;
	};

	/**
	* Get the field value
	* Email address to send confirmation to
	* @memberof customers.Confirmation
	* @return {Null|String} 
	*/
	Confirmation.prototype.getEmailAddress = function() {
	  return this.emailAddress;
	};

	/**
	* @memberof customers.Confirmation
	* @private
	*/
	Confirmation.prototype.getMetaInfo = function(fieldName) {
	  var curclass = this._class_;
	  do {
	    var fieldMetaInfo = curclass._meta_.fields[fieldName];
	    if(fieldMetaInfo) {
	      return fieldMetaInfo;
	    }
	    if(curclass._meta_._superMeta_) {
	      curclass = curclass._meta_._superMeta_._class_;
	    } else {
	      curclass = null;
	    }
	  } while(curclass);
	  return null;
	};

	Confirmation.prototype.toString = function() {
	  return JSON.stringify(this);
	};

	Confirmation._meta_ =  {fields:  {}};
	Confirmation._meta_._class_ =  Confirmation;
	Confirmation._meta_.fields["order"] = {};
	Confirmation._meta_.fields["order"].type = base_Reference;
	Confirmation._meta_.fields["customer"] = {};
	Confirmation._meta_.fields["customer"].type = base_Reference;
	Confirmation._meta_.fields["card"] = {};
	Confirmation._meta_.fields["card"].type = base_Reference;
	Confirmation._meta_.fields["emailAddress"] = {};
	Confirmation._meta_.fields["emailAddress"].type = String;

	//
	// Expose the module.
	//
	if (true) {
	module.exports = Confirmation;
	}



/***/ }),
/* 934 */
/***/ (function(module, exports, __webpack_require__) {

	/**
	 * Autogenerated by Avro
	 * 
	 * DO NOT EDIT DIRECTLY
	 */

	var customers_Customer = __webpack_require__(67);
	var base_Reference = __webpack_require__(5);

	/** CustomerAssociationRequest will be used in case of creating the customer and associating customer with order when paymentRef is passed or create the customer when the tokenRef is passed. */
	/**
	* @constructor
	* @memberof customers
	*/
	var CustomerAssociationRequest = function() {
	  this._class_ = CustomerAssociationRequest;
	  this.paymentRef = undefined;
	  this.tokenRequestRef = undefined;
	  this.customer = undefined;
	};


	/**
	* Set the field value
	* Payment UUID needs to be passed to create the customer if card transaction is performed and will be used to fetch the payment details.
	*
	* @memberof customers.CustomerAssociationRequest
	* @param {base.Reference} paymentRef 
	*/
	CustomerAssociationRequest.prototype.setPaymentRef = function(paymentRef) {
	  this.paymentRef = paymentRef;
	};

	/**
	* Get the field value
	* Payment UUID needs to be passed to create the customer if card transaction is performed and will be used to fetch the payment details.
	* @memberof customers.CustomerAssociationRequest
	* @return {base.Reference} 
	*/
	CustomerAssociationRequest.prototype.getPaymentRef = function() {
	  return this.paymentRef;
	};

	/**
	* Set the field value
	* Token UUID needs to be passed if Customer is getting created after the token request or card verification request.
	*
	* @memberof customers.CustomerAssociationRequest
	* @param {base.Reference} tokenRequestRef 
	*/
	CustomerAssociationRequest.prototype.setTokenRequestRef = function(tokenRequestRef) {
	  this.tokenRequestRef = tokenRequestRef;
	};

	/**
	* Get the field value
	* Token UUID needs to be passed if Customer is getting created after the token request or card verification request.
	* @memberof customers.CustomerAssociationRequest
	* @return {base.Reference} 
	*/
	CustomerAssociationRequest.prototype.getTokenRequestRef = function() {
	  return this.tokenRequestRef;
	};

	/**
	* Set the field value
	* Customer Object which will contain the First Name and the Last Name of the Customer.
	*
	* @memberof customers.CustomerAssociationRequest
	* @param {customers.Customer} customer 
	*/
	CustomerAssociationRequest.prototype.setCustomer = function(customer) {
	  this.customer = customer;
	};

	/**
	* Get the field value
	* Customer Object which will contain the First Name and the Last Name of the Customer.
	* @memberof customers.CustomerAssociationRequest
	* @return {customers.Customer} 
	*/
	CustomerAssociationRequest.prototype.getCustomer = function() {
	  return this.customer;
	};

	/**
	* @memberof customers.CustomerAssociationRequest
	* @private
	*/
	CustomerAssociationRequest.prototype.getMetaInfo = function(fieldName) {
	  var curclass = this._class_;
	  do {
	    var fieldMetaInfo = curclass._meta_.fields[fieldName];
	    if(fieldMetaInfo) {
	      return fieldMetaInfo;
	    }
	    if(curclass._meta_._superMeta_) {
	      curclass = curclass._meta_._superMeta_._class_;
	    } else {
	      curclass = null;
	    }
	  } while(curclass);
	  return null;
	};

	CustomerAssociationRequest.prototype.toString = function() {
	  return JSON.stringify(this);
	};

	CustomerAssociationRequest._meta_ =  {fields:  {}};
	CustomerAssociationRequest._meta_._class_ =  CustomerAssociationRequest;
	CustomerAssociationRequest._meta_.fields["paymentRef"] = {};
	CustomerAssociationRequest._meta_.fields["paymentRef"].type = base_Reference;
	CustomerAssociationRequest._meta_.fields["tokenRequestRef"] = {};
	CustomerAssociationRequest._meta_.fields["tokenRequestRef"].type = base_Reference;
	CustomerAssociationRequest._meta_.fields["customer"] = {};
	CustomerAssociationRequest._meta_.fields["customer"].type = customers_Customer;

	//
	// Expose the module.
	//
	if (true) {
	module.exports = CustomerAssociationRequest;
	}



/***/ }),
/* 935 */
/***/ (function(module, exports, __webpack_require__) {

	/**
	 * Autogenerated by Avro
	 * 
	 * DO NOT EDIT DIRECTLY
	 */

	var customers_Customer = __webpack_require__(67);

	/** Deprecated, use CustomerInfo instead. Represents a customer that is linked to an external system. This customer may be persisted in Clover, or it may not. */
	/**
	* @constructor
	* @memberof customers
	*/
	var RemoteCustomer = function() {
	  this._class_ = RemoteCustomer;
	  this.customer = undefined;
	  this.displayString = undefined;
	  this.externalId = undefined;
	  this.externalSystemName = undefined;
	  this.extras = undefined;
	};


	/**
	* Set the field value
	* The customer object that Clover uses.  This is the base model for a Clover customer, any additional information external systems need should exist in other fields
	*
	* @memberof customers.RemoteCustomer
	* @param {customers.Customer} customer 
	*/
	RemoteCustomer.prototype.setCustomer = function(customer) {
	  this.customer = customer;
	};

	/**
	* Get the field value
	* The customer object that Clover uses.  This is the base model for a Clover customer, any additional information external systems need should exist in other fields
	* @memberof customers.RemoteCustomer
	* @return {customers.Customer} 
	*/
	RemoteCustomer.prototype.getCustomer = function() {
	  return this.customer;
	};

	/**
	* Set the field value
	* A custom way to display this customer for an external system
	*
	* @memberof customers.RemoteCustomer
	* @param {String} displayString 
	*/
	RemoteCustomer.prototype.setDisplayString = function(displayString) {
	  this.displayString = displayString;
	};

	/**
	* Get the field value
	* A custom way to display this customer for an external system
	* @memberof customers.RemoteCustomer
	* @return {String} 
	*/
	RemoteCustomer.prototype.getDisplayString = function() {
	  return this.displayString;
	};

	/**
	* Set the field value
	* an id for an external system to use to reference this Customer.
	*
	* @memberof customers.RemoteCustomer
	* @param {String} externalId 
	*/
	RemoteCustomer.prototype.setExternalId = function(externalId) {
	  this.externalId = externalId;
	};

	/**
	* Get the field value
	* an id for an external system to use to reference this Customer.
	* @memberof customers.RemoteCustomer
	* @return {String} 
	*/
	RemoteCustomer.prototype.getExternalId = function() {
	  return this.externalId;
	};

	/**
	* Set the field value
	* The name of the external system that 'owns' this.  It is the system that understands the link from the externalId to the Customer.
	*
	* @memberof customers.RemoteCustomer
	* @param {String} externalSystemName 
	*/
	RemoteCustomer.prototype.setExternalSystemName = function(externalSystemName) {
	  this.externalSystemName = externalSystemName;
	};

	/**
	* Get the field value
	* The name of the external system that 'owns' this.  It is the system that understands the link from the externalId to the Customer.
	* @memberof customers.RemoteCustomer
	* @return {String} 
	*/
	RemoteCustomer.prototype.getExternalSystemName = function() {
	  return this.externalSystemName;
	};

	/**
	* Set the field value
	* Extra data used by external systems.
	*
	* @memberof customers.RemoteCustomer
	* @param {Object.<String,String>} extras A map of <String> to <>
	*/
	RemoteCustomer.prototype.setExtras = function(extras) {
	  this.extras = extras;
	};

	/**
	* Get the field value
	* Extra data used by external systems.
	* @memberof customers.RemoteCustomer
	* @return {Object.<String,String>} A map of <String> to <>
	*/
	RemoteCustomer.prototype.getExtras = function() {
	  return this.extras;
	};

	/**
	* @memberof customers.RemoteCustomer
	* @private
	*/
	RemoteCustomer.prototype.getMetaInfo = function(fieldName) {
	  var curclass = this._class_;
	  do {
	    var fieldMetaInfo = curclass._meta_.fields[fieldName];
	    if(fieldMetaInfo) {
	      return fieldMetaInfo;
	    }
	    if(curclass._meta_._superMeta_) {
	      curclass = curclass._meta_._superMeta_._class_;
	    } else {
	      curclass = null;
	    }
	  } while(curclass);
	  return null;
	};

	RemoteCustomer.prototype.toString = function() {
	  return JSON.stringify(this);
	};

	RemoteCustomer._meta_ =  {fields:  {}};
	RemoteCustomer._meta_._class_ =  RemoteCustomer;
	RemoteCustomer._meta_.fields["customer"] = {};
	RemoteCustomer._meta_.fields["customer"].type = customers_Customer;
	RemoteCustomer._meta_.fields["displayString"] = {};
	RemoteCustomer._meta_.fields["displayString"].type = String;
	RemoteCustomer._meta_.fields["externalId"] = {};
	RemoteCustomer._meta_.fields["externalId"].type = String;
	RemoteCustomer._meta_.fields["externalSystemName"] = {};
	RemoteCustomer._meta_.fields["externalSystemName"].type = String;
	RemoteCustomer._meta_.fields["extras"] = {};
	RemoteCustomer._meta_.fields["extras"].type = Object;

	//
	// Expose the module.
	//
	if (true) {
	module.exports = RemoteCustomer;
	}



/***/ }),
/* 936 */
/***/ (function(module, exports, __webpack_require__) {

	/**
	 * Autogenerated by Avro
	 * 
	 * DO NOT EDIT DIRECTLY
	 */


	/**
	* @memberof customers
	* @enum {string}
	*/
	var TokenType = {
	  MULTIPAY : "MULTIPAY",
	  FINANCIAL : "FINANCIAL",
	  CTOKEN : "CTOKEN"
	};


	//
	// Expose the module.
	//
	if (true) {
	module.exports = TokenType;
	}



/***/ }),
/* 937 */
/***/ (function(module, exports, __webpack_require__) {

	
	module.exports.customers = customers;
	/**
	* @namespace customers
	*/
	function customers() {}


	customers.Address = __webpack_require__(379);
	customers.Card = __webpack_require__(380);
	customers.Confirmation = __webpack_require__(933);
	customers.Customer = __webpack_require__(67);
	customers.CustomerAssociationRequest = __webpack_require__(934);
	customers.CustomerInfo = __webpack_require__(381);
	customers.CustomerMetadata = __webpack_require__(382);
	customers.EmailAddress = __webpack_require__(383);
	customers.IdentityDocument = __webpack_require__(384);
	customers.PhoneNumber = __webpack_require__(385);
	customers.RemoteCustomer = __webpack_require__(935);
	customers.TokenType = __webpack_require__(936);

	//
	// Expose the module.
	//
	if (true) {
	  module.exports = customers;
	}
	    

/***/ }),
/* 938 */
/***/ (function(module, exports, __webpack_require__) {

	/**
	 * Autogenerated by Avro
	 * 
	 * DO NOT EDIT DIRECTLY
	 */


	/** Request to update the ROM metadata for a device accessory. */
	/**
	* @constructor
	* @memberof device
	*/
	var AccessoryRomMetadataUpdateRequest = function() {
	  this._class_ = AccessoryRomMetadataUpdateRequest;
	  this.cpuId = undefined;
	  this.version = undefined;
	  this.buildType = undefined;
	};


	/**
	* Set the field value
	* @memberof device.AccessoryRomMetadataUpdateRequest
	* @param {String} cpuId 
	*/
	AccessoryRomMetadataUpdateRequest.prototype.setCpuId = function(cpuId) {
	  this.cpuId = cpuId;
	};

	/**
	* Get the field value
	* @memberof device.AccessoryRomMetadataUpdateRequest
	* @return {String} 
	*/
	AccessoryRomMetadataUpdateRequest.prototype.getCpuId = function() {
	  return this.cpuId;
	};

	/**
	* Set the field value
	* @memberof device.AccessoryRomMetadataUpdateRequest
	* @param {Number} version must be an integer
	*/
	AccessoryRomMetadataUpdateRequest.prototype.setVersion = function(version) {
	  this.version = version;
	};

	/**
	* Get the field value
	* @memberof device.AccessoryRomMetadataUpdateRequest
	* @return {Number} must be an integer
	*/
	AccessoryRomMetadataUpdateRequest.prototype.getVersion = function() {
	  return this.version;
	};

	/**
	* Set the field value
	* @memberof device.AccessoryRomMetadataUpdateRequest
	* @param {String} buildType 
	*/
	AccessoryRomMetadataUpdateRequest.prototype.setBuildType = function(buildType) {
	  this.buildType = buildType;
	};

	/**
	* Get the field value
	* @memberof device.AccessoryRomMetadataUpdateRequest
	* @return {String} 
	*/
	AccessoryRomMetadataUpdateRequest.prototype.getBuildType = function() {
	  return this.buildType;
	};

	/**
	* @memberof device.AccessoryRomMetadataUpdateRequest
	* @private
	*/
	AccessoryRomMetadataUpdateRequest.prototype.getMetaInfo = function(fieldName) {
	  var curclass = this._class_;
	  do {
	    var fieldMetaInfo = curclass._meta_.fields[fieldName];
	    if(fieldMetaInfo) {
	      return fieldMetaInfo;
	    }
	    if(curclass._meta_._superMeta_) {
	      curclass = curclass._meta_._superMeta_._class_;
	    } else {
	      curclass = null;
	    }
	  } while(curclass);
	  return null;
	};

	AccessoryRomMetadataUpdateRequest.prototype.toString = function() {
	  return JSON.stringify(this);
	};

	AccessoryRomMetadataUpdateRequest._meta_ =  {fields:  {}};
	AccessoryRomMetadataUpdateRequest._meta_._class_ =  AccessoryRomMetadataUpdateRequest;
	AccessoryRomMetadataUpdateRequest._meta_.fields["cpuId"] = {};
	AccessoryRomMetadataUpdateRequest._meta_.fields["cpuId"].type = String;
	AccessoryRomMetadataUpdateRequest._meta_.fields["version"] = {};
	AccessoryRomMetadataUpdateRequest._meta_.fields["version"].type = Number;
	AccessoryRomMetadataUpdateRequest._meta_.fields["buildType"] = {};
	AccessoryRomMetadataUpdateRequest._meta_.fields["buildType"].type = String;

	//
	// Expose the module.
	//
	if (true) {
	module.exports = AccessoryRomMetadataUpdateRequest;
	}



/***/ }),
/* 939 */
/***/ (function(module, exports, __webpack_require__) {

	/**
	 * Autogenerated by Avro
	 * 
	 * DO NOT EDIT DIRECTLY
	 */


	/**
	* @constructor
	* @memberof device
	*/
	var AssociatedDeviceBundle = function() {
	  this._class_ = AssociatedDeviceBundle;
	  this.id = undefined;
	  this.bundleIndicator = undefined;
	  this.createdTime = undefined;
	  this.deletedTime = undefined;
	  this.associatedTime = undefined;
	  this.disassociatedTime = undefined;
	};


	/**
	* Set the field value
	* Unique identifier
	*
	* @memberof device.AssociatedDeviceBundle
	* @param {String} id 
	*/
	AssociatedDeviceBundle.prototype.setId = function(id) {
	  this.id = id;
	};

	/**
	* Get the field value
	* Unique identifier
	* @memberof device.AssociatedDeviceBundle
	* @return {String} 
	*/
	AssociatedDeviceBundle.prototype.getId = function() {
	  return this.id;
	};

	/**
	* Set the field value
	* @memberof device.AssociatedDeviceBundle
	* @param {String} bundleIndicator 
	*/
	AssociatedDeviceBundle.prototype.setBundleIndicator = function(bundleIndicator) {
	  this.bundleIndicator = bundleIndicator;
	};

	/**
	* Get the field value
	* @memberof device.AssociatedDeviceBundle
	* @return {String} 
	*/
	AssociatedDeviceBundle.prototype.getBundleIndicator = function() {
	  return this.bundleIndicator;
	};

	/**
	* Set the field value
	* The time that the device bundle was created
	*
	* @memberof device.AssociatedDeviceBundle
	* @param {Number} createdTime must be a long integer
	*/
	AssociatedDeviceBundle.prototype.setCreatedTime = function(createdTime) {
	  this.createdTime = createdTime;
	};

	/**
	* Get the field value
	* The time that the device bundle was created
	* @memberof device.AssociatedDeviceBundle
	* @return {Number} must be a long integer
	*/
	AssociatedDeviceBundle.prototype.getCreatedTime = function() {
	  return this.createdTime;
	};

	/**
	* Set the field value
	* The time that the device bundle was deleted
	*
	* @memberof device.AssociatedDeviceBundle
	* @param {Number} deletedTime must be a long integer
	*/
	AssociatedDeviceBundle.prototype.setDeletedTime = function(deletedTime) {
	  this.deletedTime = deletedTime;
	};

	/**
	* Get the field value
	* The time that the device bundle was deleted
	* @memberof device.AssociatedDeviceBundle
	* @return {Number} must be a long integer
	*/
	AssociatedDeviceBundle.prototype.getDeletedTime = function() {
	  return this.deletedTime;
	};

	/**
	* Set the field value
	* The time that the device bundle was associated to a device
	*
	* @memberof device.AssociatedDeviceBundle
	* @param {Number} associatedTime must be a long integer
	*/
	AssociatedDeviceBundle.prototype.setAssociatedTime = function(associatedTime) {
	  this.associatedTime = associatedTime;
	};

	/**
	* Get the field value
	* The time that the device bundle was associated to a device
	* @memberof device.AssociatedDeviceBundle
	* @return {Number} must be a long integer
	*/
	AssociatedDeviceBundle.prototype.getAssociatedTime = function() {
	  return this.associatedTime;
	};

	/**
	* Set the field value
	* The time that the device bundle was disassociated from a device
	*
	* @memberof device.AssociatedDeviceBundle
	* @param {Number} disassociatedTime must be a long integer
	*/
	AssociatedDeviceBundle.prototype.setDisassociatedTime = function(disassociatedTime) {
	  this.disassociatedTime = disassociatedTime;
	};

	/**
	* Get the field value
	* The time that the device bundle was disassociated from a device
	* @memberof device.AssociatedDeviceBundle
	* @return {Number} must be a long integer
	*/
	AssociatedDeviceBundle.prototype.getDisassociatedTime = function() {
	  return this.disassociatedTime;
	};

	/**
	* @memberof device.AssociatedDeviceBundle
	* @private
	*/
	AssociatedDeviceBundle.prototype.getMetaInfo = function(fieldName) {
	  var curclass = this._class_;
	  do {
	    var fieldMetaInfo = curclass._meta_.fields[fieldName];
	    if(fieldMetaInfo) {
	      return fieldMetaInfo;
	    }
	    if(curclass._meta_._superMeta_) {
	      curclass = curclass._meta_._superMeta_._class_;
	    } else {
	      curclass = null;
	    }
	  } while(curclass);
	  return null;
	};

	AssociatedDeviceBundle.prototype.toString = function() {
	  return JSON.stringify(this);
	};

	AssociatedDeviceBundle._meta_ =  {fields:  {}};
	AssociatedDeviceBundle._meta_._class_ =  AssociatedDeviceBundle;
	AssociatedDeviceBundle._meta_.fields["id"] = {};
	AssociatedDeviceBundle._meta_.fields["id"].type = String;
	AssociatedDeviceBundle._meta_.fields["bundleIndicator"] = {};
	AssociatedDeviceBundle._meta_.fields["bundleIndicator"].type = String;
	AssociatedDeviceBundle._meta_.fields["createdTime"] = {};
	AssociatedDeviceBundle._meta_.fields["createdTime"].type = Number;
	AssociatedDeviceBundle._meta_.fields["deletedTime"] = {};
	AssociatedDeviceBundle._meta_.fields["deletedTime"].type = Number;
	AssociatedDeviceBundle._meta_.fields["associatedTime"] = {};
	AssociatedDeviceBundle._meta_.fields["associatedTime"].type = Number;
	AssociatedDeviceBundle._meta_.fields["disassociatedTime"] = {};
	AssociatedDeviceBundle._meta_.fields["disassociatedTime"].type = Number;

	//
	// Expose the module.
	//
	if (true) {
	module.exports = AssociatedDeviceBundle;
	}



/***/ }),
/* 940 */
/***/ (function(module, exports, __webpack_require__) {

	/**
	 * Autogenerated by Avro
	 * 
	 * DO NOT EDIT DIRECTLY
	 */


	/**
	* @memberof device
	* @enum {string}
	*/
	var BuildType = {
	  ENG : "ENG",
	  USER : "USER",
	  USERDEBUG : "USERDEBUG"
	};


	//
	// Expose the module.
	//
	if (true) {
	module.exports = BuildType;
	}



/***/ }),
/* 941 */
/***/ (function(module, exports, __webpack_require__) {

	/**
	 * Autogenerated by Avro
	 * 
	 * DO NOT EDIT DIRECTLY
	 */

	var base_Reference = __webpack_require__(5);

	/**
	* @constructor
	* @memberof device
	*/
	var Device = function() {
	  this._class_ = Device;
	  this.id = undefined;
	  this.name = undefined;
	  this.model = undefined;
	  this.merchant = undefined;
	  this.orderPrefix = undefined;
	  this.terminalId = undefined;
	  this.terminalPrefix = undefined;
	  this.serial = undefined;
	  this.imei = undefined;
	  this.imsi = undefined;
	  this.simIccid = undefined;
	  this.deviceCertificate = undefined;
	  this.pedCertificate = undefined;
	  this.deviceTypeName = undefined;
	  this.productName = undefined;
	  this.pinDisabled = false;
	  this.offlinePayments = false;
	  this.offlinePaymentsAll = false;
	  this.offlinePaymentsLimit = undefined;
	  this.offlinePaymentsPromptThreshold = undefined;
	  this.offlinePaymentsTotalPaymentsLimit = undefined;
	  this.offlinePaymentsLimitDefault = undefined;
	  this.offlinePaymentsPromptThresholdDefault = undefined;
	  this.offlinePaymentsTotalPaymentsLimitDefault = undefined;
	  this.offlinePaymentsMaxLimit = undefined;
	  this.offlinePaymentsMaxTotalPaymentsLimit = undefined;
	  this.showOfflinePayments = undefined;
	  this.maxOfflineDays = undefined;
	  this.allowStoreAndForward = undefined;
	  this.secureReports = undefined;
	  this.bundleIndicator = undefined;
	};


	/**
	* Set the field value
	* Unique identifier
	*
	* @memberof device.Device
	* @param {String} id 
	*/
	Device.prototype.setId = function(id) {
	  this.id = id;
	};

	/**
	* Get the field value
	* Unique identifier
	* @memberof device.Device
	* @return {String} 
	*/
	Device.prototype.getId = function() {
	  return this.id;
	};

	/**
	* Set the field value
	* Name of the device (if entered)
	*
	* @memberof device.Device
	* @param {String} name 
	*/
	Device.prototype.setName = function(name) {
	  this.name = name;
	};

	/**
	* Get the field value
	* Name of the device (if entered)
	* @memberof device.Device
	* @return {String} 
	*/
	Device.prototype.getName = function() {
	  return this.name;
	};

	/**
	* Set the field value
	* @memberof device.Device
	* @param {String} model 
	*/
	Device.prototype.setModel = function(model) {
	  this.model = model;
	};

	/**
	* Get the field value
	* @memberof device.Device
	* @return {String} 
	*/
	Device.prototype.getModel = function() {
	  return this.model;
	};

	/**
	* Set the field value
	* @memberof device.Device
	* @param {base.Reference} merchant 
	*/
	Device.prototype.setMerchant = function(merchant) {
	  this.merchant = merchant;
	};

	/**
	* Get the field value
	* @memberof device.Device
	* @return {base.Reference} 
	*/
	Device.prototype.getMerchant = function() {
	  return this.merchant;
	};

	/**
	* Set the field value
	* A prefix that will be applied to order numbers. This is useful if the merchant and/or customer needs to track which device an order came from.
	*
	* @memberof device.Device
	* @param {String} orderPrefix 
	*/
	Device.prototype.setOrderPrefix = function(orderPrefix) {
	  this.orderPrefix = orderPrefix;
	};

	/**
	* Get the field value
	* A prefix that will be applied to order numbers. This is useful if the merchant and/or customer needs to track which device an order came from.
	* @memberof device.Device
	* @return {String} 
	*/
	Device.prototype.getOrderPrefix = function() {
	  return this.orderPrefix;
	};

	/**
	* Set the field value
	* The merchant device's terminal Id. FD-IPG sets the merchant_device terminal Id for LATAM devices
	*
	* @memberof device.Device
	* @param {String} terminalId 
	*/
	Device.prototype.setTerminalId = function(terminalId) {
	  this.terminalId = terminalId;
	};

	/**
	* Get the field value
	* The merchant device's terminal Id. FD-IPG sets the merchant_device terminal Id for LATAM devices
	* @memberof device.Device
	* @return {String} 
	*/
	Device.prototype.getTerminalId = function() {
	  return this.terminalId;
	};

	/**
	* Set the field value
	* @memberof device.Device
	* @param {Null|Number} terminalPrefix must be an integer
	*/
	Device.prototype.setTerminalPrefix = function(terminalPrefix) {
	  this.terminalPrefix = terminalPrefix;
	};

	/**
	* Get the field value
	* @memberof device.Device
	* @return {Null|Number} must be an integer
	*/
	Device.prototype.getTerminalPrefix = function() {
	  return this.terminalPrefix;
	};

	/**
	* Set the field value
	* The device's serial number.
	*
	* @memberof device.Device
	* @param {String} serial 
	*/
	Device.prototype.setSerial = function(serial) {
	  this.serial = serial;
	};

	/**
	* Get the field value
	* The device's serial number.
	* @memberof device.Device
	* @return {String} 
	*/
	Device.prototype.getSerial = function() {
	  return this.serial;
	};

	/**
	* Set the field value
	* The IMEI of the device
	*
	* @memberof device.Device
	* @param {String} imei 
	*/
	Device.prototype.setImei = function(imei) {
	  this.imei = imei;
	};

	/**
	* Get the field value
	* The IMEI of the device
	* @memberof device.Device
	* @return {String} 
	*/
	Device.prototype.getImei = function() {
	  return this.imei;
	};

	/**
	* Set the field value
	* The IMSI of the SIM in the device (if present)
	*
	* @memberof device.Device
	* @param {String} imsi 
	*/
	Device.prototype.setImsi = function(imsi) {
	  this.imsi = imsi;
	};

	/**
	* Get the field value
	* The IMSI of the SIM in the device (if present)
	* @memberof device.Device
	* @return {String} 
	*/
	Device.prototype.getImsi = function() {
	  return this.imsi;
	};

	/**
	* Set the field value
	* The ICCID of the SIM in the device (if present)
	*
	* @memberof device.Device
	* @param {String} simIccid 
	*/
	Device.prototype.setSimIccid = function(simIccid) {
	  this.simIccid = simIccid;
	};

	/**
	* Get the field value
	* The ICCID of the SIM in the device (if present)
	* @memberof device.Device
	* @return {String} 
	*/
	Device.prototype.getSimIccid = function() {
	  return this.simIccid;
	};

	/**
	* Set the field value
	* @memberof device.Device
	* @param {String} deviceCertificate 
	*/
	Device.prototype.setDeviceCertificate = function(deviceCertificate) {
	  this.deviceCertificate = deviceCertificate;
	};

	/**
	* Get the field value
	* @memberof device.Device
	* @return {String} 
	*/
	Device.prototype.getDeviceCertificate = function() {
	  return this.deviceCertificate;
	};

	/**
	* Set the field value
	* @memberof device.Device
	* @param {String} pedCertificate 
	*/
	Device.prototype.setPedCertificate = function(pedCertificate) {
	  this.pedCertificate = pedCertificate;
	};

	/**
	* Get the field value
	* @memberof device.Device
	* @return {String} 
	*/
	Device.prototype.getPedCertificate = function() {
	  return this.pedCertificate;
	};

	/**
	* Set the field value
	* @memberof device.Device
	* @param {String} deviceTypeName 
	*/
	Device.prototype.setDeviceTypeName = function(deviceTypeName) {
	  this.deviceTypeName = deviceTypeName;
	};

	/**
	* Get the field value
	* @memberof device.Device
	* @return {String} 
	*/
	Device.prototype.getDeviceTypeName = function() {
	  return this.deviceTypeName;
	};

	/**
	* Set the field value
	* @memberof device.Device
	* @param {String} productName 
	*/
	Device.prototype.setProductName = function(productName) {
	  this.productName = productName;
	};

	/**
	* Get the field value
	* @memberof device.Device
	* @return {String} 
	*/
	Device.prototype.getProductName = function() {
	  return this.productName;
	};

	/**
	* Set the field value
	* Whether this device has PIN prompt disabled.
	*
	* @memberof device.Device
	* @param {Boolean} pinDisabled 
	*/
	Device.prototype.setPinDisabled = function(pinDisabled) {
	  this.pinDisabled = pinDisabled;
	};

	/**
	* Get the field value
	* Whether this device has PIN prompt disabled.
	* @memberof device.Device
	* @return {Boolean} 
	*/
	Device.prototype.getPinDisabled = function() {
	  return this.pinDisabled;
	};

	/**
	* Set the field value
	* @memberof device.Device
	* @param {Boolean} offlinePayments 
	*/
	Device.prototype.setOfflinePayments = function(offlinePayments) {
	  this.offlinePayments = offlinePayments;
	};

	/**
	* Get the field value
	* @memberof device.Device
	* @return {Boolean} 
	*/
	Device.prototype.getOfflinePayments = function() {
	  return this.offlinePayments;
	};

	/**
	* Set the field value
	* @memberof device.Device
	* @param {Boolean} offlinePaymentsAll 
	*/
	Device.prototype.setOfflinePaymentsAll = function(offlinePaymentsAll) {
	  this.offlinePaymentsAll = offlinePaymentsAll;
	};

	/**
	* Get the field value
	* @memberof device.Device
	* @return {Boolean} 
	*/
	Device.prototype.getOfflinePaymentsAll = function() {
	  return this.offlinePaymentsAll;
	};

	/**
	* Set the field value
	* @memberof device.Device
	* @param {Number} offlinePaymentsLimit must be a long integer
	*/
	Device.prototype.setOfflinePaymentsLimit = function(offlinePaymentsLimit) {
	  this.offlinePaymentsLimit = offlinePaymentsLimit;
	};

	/**
	* Get the field value
	* @memberof device.Device
	* @return {Number} must be a long integer
	*/
	Device.prototype.getOfflinePaymentsLimit = function() {
	  return this.offlinePaymentsLimit;
	};

	/**
	* Set the field value
	* @memberof device.Device
	* @param {Number} offlinePaymentsPromptThreshold must be a long integer
	*/
	Device.prototype.setOfflinePaymentsPromptThreshold = function(offlinePaymentsPromptThreshold) {
	  this.offlinePaymentsPromptThreshold = offlinePaymentsPromptThreshold;
	};

	/**
	* Get the field value
	* @memberof device.Device
	* @return {Number} must be a long integer
	*/
	Device.prototype.getOfflinePaymentsPromptThreshold = function() {
	  return this.offlinePaymentsPromptThreshold;
	};

	/**
	* Set the field value
	* @memberof device.Device
	* @param {Number} offlinePaymentsTotalPaymentsLimit must be a long integer
	*/
	Device.prototype.setOfflinePaymentsTotalPaymentsLimit = function(offlinePaymentsTotalPaymentsLimit) {
	  this.offlinePaymentsTotalPaymentsLimit = offlinePaymentsTotalPaymentsLimit;
	};

	/**
	* Get the field value
	* @memberof device.Device
	* @return {Number} must be a long integer
	*/
	Device.prototype.getOfflinePaymentsTotalPaymentsLimit = function() {
	  return this.offlinePaymentsTotalPaymentsLimit;
	};

	/**
	* Set the field value
	* @memberof device.Device
	* @param {Number} offlinePaymentsLimitDefault must be a long integer
	*/
	Device.prototype.setOfflinePaymentsLimitDefault = function(offlinePaymentsLimitDefault) {
	  this.offlinePaymentsLimitDefault = offlinePaymentsLimitDefault;
	};

	/**
	* Get the field value
	* @memberof device.Device
	* @return {Number} must be a long integer
	*/
	Device.prototype.getOfflinePaymentsLimitDefault = function() {
	  return this.offlinePaymentsLimitDefault;
	};

	/**
	* Set the field value
	* @memberof device.Device
	* @param {Number} offlinePaymentsPromptThresholdDefault must be a long integer
	*/
	Device.prototype.setOfflinePaymentsPromptThresholdDefault = function(offlinePaymentsPromptThresholdDefault) {
	  this.offlinePaymentsPromptThresholdDefault = offlinePaymentsPromptThresholdDefault;
	};

	/**
	* Get the field value
	* @memberof device.Device
	* @return {Number} must be a long integer
	*/
	Device.prototype.getOfflinePaymentsPromptThresholdDefault = function() {
	  return this.offlinePaymentsPromptThresholdDefault;
	};

	/**
	* Set the field value
	* @memberof device.Device
	* @param {Number} offlinePaymentsTotalPaymentsLimitDefault must be a long integer
	*/
	Device.prototype.setOfflinePaymentsTotalPaymentsLimitDefault = function(offlinePaymentsTotalPaymentsLimitDefault) {
	  this.offlinePaymentsTotalPaymentsLimitDefault = offlinePaymentsTotalPaymentsLimitDefault;
	};

	/**
	* Get the field value
	* @memberof device.Device
	* @return {Number} must be a long integer
	*/
	Device.prototype.getOfflinePaymentsTotalPaymentsLimitDefault = function() {
	  return this.offlinePaymentsTotalPaymentsLimitDefault;
	};

	/**
	* Set the field value
	* @memberof device.Device
	* @param {Number} offlinePaymentsMaxLimit must be a long integer
	*/
	Device.prototype.setOfflinePaymentsMaxLimit = function(offlinePaymentsMaxLimit) {
	  this.offlinePaymentsMaxLimit = offlinePaymentsMaxLimit;
	};

	/**
	* Get the field value
	* @memberof device.Device
	* @return {Number} must be a long integer
	*/
	Device.prototype.getOfflinePaymentsMaxLimit = function() {
	  return this.offlinePaymentsMaxLimit;
	};

	/**
	* Set the field value
	* @memberof device.Device
	* @param {Number} offlinePaymentsMaxTotalPaymentsLimit must be a long integer
	*/
	Device.prototype.setOfflinePaymentsMaxTotalPaymentsLimit = function(offlinePaymentsMaxTotalPaymentsLimit) {
	  this.offlinePaymentsMaxTotalPaymentsLimit = offlinePaymentsMaxTotalPaymentsLimit;
	};

	/**
	* Get the field value
	* @memberof device.Device
	* @return {Number} must be a long integer
	*/
	Device.prototype.getOfflinePaymentsMaxTotalPaymentsLimit = function() {
	  return this.offlinePaymentsMaxTotalPaymentsLimit;
	};

	/**
	* Set the field value
	* @memberof device.Device
	* @param {Boolean} showOfflinePayments 
	*/
	Device.prototype.setShowOfflinePayments = function(showOfflinePayments) {
	  this.showOfflinePayments = showOfflinePayments;
	};

	/**
	* Get the field value
	* @memberof device.Device
	* @return {Boolean} 
	*/
	Device.prototype.getShowOfflinePayments = function() {
	  return this.showOfflinePayments;
	};

	/**
	* Set the field value
	* @memberof device.Device
	* @param {Number} maxOfflineDays must be a long integer
	*/
	Device.prototype.setMaxOfflineDays = function(maxOfflineDays) {
	  this.maxOfflineDays = maxOfflineDays;
	};

	/**
	* Get the field value
	* @memberof device.Device
	* @return {Number} must be a long integer
	*/
	Device.prototype.getMaxOfflineDays = function() {
	  return this.maxOfflineDays;
	};

	/**
	* Set the field value
	* @memberof device.Device
	* @param {Boolean} allowStoreAndForward 
	*/
	Device.prototype.setAllowStoreAndForward = function(allowStoreAndForward) {
	  this.allowStoreAndForward = allowStoreAndForward;
	};

	/**
	* Get the field value
	* @memberof device.Device
	* @return {Boolean} 
	*/
	Device.prototype.getAllowStoreAndForward = function() {
	  return this.allowStoreAndForward;
	};

	/**
	* Set the field value
	* @memberof device.Device
	* @param {Array.<base.Reference>} secureReports An array of 
	*/
	Device.prototype.setSecureReports = function(secureReports) {
	  this.secureReports = secureReports;
	};

	/**
	* Get the field value
	* @memberof device.Device
	* @return {Array.<base.Reference>} An array of 
	*/
	Device.prototype.getSecureReports = function() {
	  return this.secureReports;
	};

	/**
	* Set the field value
	* @memberof device.Device
	* @param {String} bundleIndicator 
	*/
	Device.prototype.setBundleIndicator = function(bundleIndicator) {
	  this.bundleIndicator = bundleIndicator;
	};

	/**
	* Get the field value
	* @memberof device.Device
	* @return {String} 
	*/
	Device.prototype.getBundleIndicator = function() {
	  return this.bundleIndicator;
	};

	/**
	* @memberof device.Device
	* @private
	*/
	Device.prototype.getMetaInfo = function(fieldName) {
	  var curclass = this._class_;
	  do {
	    var fieldMetaInfo = curclass._meta_.fields[fieldName];
	    if(fieldMetaInfo) {
	      return fieldMetaInfo;
	    }
	    if(curclass._meta_._superMeta_) {
	      curclass = curclass._meta_._superMeta_._class_;
	    } else {
	      curclass = null;
	    }
	  } while(curclass);
	  return null;
	};

	Device.prototype.toString = function() {
	  return JSON.stringify(this);
	};

	Device._meta_ =  {fields:  {}};
	Device._meta_._class_ =  Device;
	Device._meta_.fields["id"] = {};
	Device._meta_.fields["id"].type = String;
	Device._meta_.fields["name"] = {};
	Device._meta_.fields["name"].type = String;
	Device._meta_.fields["model"] = {};
	Device._meta_.fields["model"].type = String;
	Device._meta_.fields["merchant"] = {};
	Device._meta_.fields["merchant"].type = base_Reference;
	Device._meta_.fields["orderPrefix"] = {};
	Device._meta_.fields["orderPrefix"].type = String;
	Device._meta_.fields["terminalId"] = {};
	Device._meta_.fields["terminalId"].type = String;
	Device._meta_.fields["terminalPrefix"] = {};
	Device._meta_.fields["terminalPrefix"].type = Number;
	Device._meta_.fields["serial"] = {};
	Device._meta_.fields["serial"].type = String;
	Device._meta_.fields["imei"] = {};
	Device._meta_.fields["imei"].type = String;
	Device._meta_.fields["imsi"] = {};
	Device._meta_.fields["imsi"].type = String;
	Device._meta_.fields["simIccid"] = {};
	Device._meta_.fields["simIccid"].type = String;
	Device._meta_.fields["deviceCertificate"] = {};
	Device._meta_.fields["deviceCertificate"].type = String;
	Device._meta_.fields["pedCertificate"] = {};
	Device._meta_.fields["pedCertificate"].type = String;
	Device._meta_.fields["deviceTypeName"] = {};
	Device._meta_.fields["deviceTypeName"].type = String;
	Device._meta_.fields["productName"] = {};
	Device._meta_.fields["productName"].type = String;
	Device._meta_.fields["pinDisabled"] = {};
	Device._meta_.fields["pinDisabled"].type = Boolean;
	Device._meta_.fields["offlinePayments"] = {};
	Device._meta_.fields["offlinePayments"].type = Boolean;
	Device._meta_.fields["offlinePaymentsAll"] = {};
	Device._meta_.fields["offlinePaymentsAll"].type = Boolean;
	Device._meta_.fields["offlinePaymentsLimit"] = {};
	Device._meta_.fields["offlinePaymentsLimit"].type = Number;
	Device._meta_.fields["offlinePaymentsPromptThreshold"] = {};
	Device._meta_.fields["offlinePaymentsPromptThreshold"].type = Number;
	Device._meta_.fields["offlinePaymentsTotalPaymentsLimit"] = {};
	Device._meta_.fields["offlinePaymentsTotalPaymentsLimit"].type = Number;
	Device._meta_.fields["offlinePaymentsLimitDefault"] = {};
	Device._meta_.fields["offlinePaymentsLimitDefault"].type = Number;
	Device._meta_.fields["offlinePaymentsPromptThresholdDefault"] = {};
	Device._meta_.fields["offlinePaymentsPromptThresholdDefault"].type = Number;
	Device._meta_.fields["offlinePaymentsTotalPaymentsLimitDefault"] = {};
	Device._meta_.fields["offlinePaymentsTotalPaymentsLimitDefault"].type = Number;
	Device._meta_.fields["offlinePaymentsMaxLimit"] = {};
	Device._meta_.fields["offlinePaymentsMaxLimit"].type = Number;
	Device._meta_.fields["offlinePaymentsMaxTotalPaymentsLimit"] = {};
	Device._meta_.fields["offlinePaymentsMaxTotalPaymentsLimit"].type = Number;
	Device._meta_.fields["showOfflinePayments"] = {};
	Device._meta_.fields["showOfflinePayments"].type = Boolean;
	Device._meta_.fields["maxOfflineDays"] = {};
	Device._meta_.fields["maxOfflineDays"].type = Number;
	Device._meta_.fields["allowStoreAndForward"] = {};
	Device._meta_.fields["allowStoreAndForward"].type = Boolean;
	Device._meta_.fields["secureReports"] = {};
	Device._meta_.fields["secureReports"].type = Array;
	Device._meta_.fields["secureReports"].elementType = base_Reference;
	Device._meta_.fields["bundleIndicator"] = {};
	Device._meta_.fields["bundleIndicator"].type = String;

	//
	// Expose the module.
	//
	if (true) {
	module.exports = Device;
	}



/***/ }),
/* 942 */
/***/ (function(module, exports, __webpack_require__) {

	/**
	 * Autogenerated by Avro
	 * 
	 * DO NOT EDIT DIRECTLY
	 */

	var device_DeviceAccessoryBuildType = __webpack_require__(387);
	var base_Reference = __webpack_require__(5);

	/**
	* @constructor
	* @memberof device
	*/
	var DeviceAccessory = function() {
	  this._class_ = DeviceAccessory;
	  this.id = undefined;
	  this.model = undefined;
	  this.serial = undefined;
	  this.associatedDevice = undefined;
	  this.pedCertificate = undefined;
	  this.buildType = undefined;
	  this.deviceType = undefined;
	  this.versionCode = undefined;
	  this.currentRom = undefined;
	  this.secureReports = undefined;
	  this.createdTime = undefined;
	  this.modifiedTime = undefined;
	};


	/**
	* Set the field value
	* Unique identifier
	*
	* @memberof device.DeviceAccessory
	* @param {String} id 
	*/
	DeviceAccessory.prototype.setId = function(id) {
	  this.id = id;
	};

	/**
	* Get the field value
	* Unique identifier
	* @memberof device.DeviceAccessory
	* @return {String} 
	*/
	DeviceAccessory.prototype.getId = function() {
	  return this.id;
	};

	/**
	* Set the field value
	* @memberof device.DeviceAccessory
	* @param {String} model 
	*/
	DeviceAccessory.prototype.setModel = function(model) {
	  this.model = model;
	};

	/**
	* Get the field value
	* @memberof device.DeviceAccessory
	* @return {String} 
	*/
	DeviceAccessory.prototype.getModel = function() {
	  return this.model;
	};

	/**
	* Set the field value
	* The accessories' serial number.
	*
	* @memberof device.DeviceAccessory
	* @param {String} serial 
	*/
	DeviceAccessory.prototype.setSerial = function(serial) {
	  this.serial = serial;
	};

	/**
	* Get the field value
	* The accessories' serial number.
	* @memberof device.DeviceAccessory
	* @return {String} 
	*/
	DeviceAccessory.prototype.getSerial = function() {
	  return this.serial;
	};

	/**
	* Set the field value
	* The device that this accessory is currently connected to, a 128-bit UUID, not a normal base-13 Clover ID.
	*
	* @memberof device.DeviceAccessory
	* @param {base.Reference} associatedDevice 
	*/
	DeviceAccessory.prototype.setAssociatedDevice = function(associatedDevice) {
	  this.associatedDevice = associatedDevice;
	};

	/**
	* Get the field value
	* The device that this accessory is currently connected to, a 128-bit UUID, not a normal base-13 Clover ID.
	* @memberof device.DeviceAccessory
	* @return {base.Reference} 
	*/
	DeviceAccessory.prototype.getAssociatedDevice = function() {
	  return this.associatedDevice;
	};

	/**
	* Set the field value
	* @memberof device.DeviceAccessory
	* @param {String} pedCertificate 
	*/
	DeviceAccessory.prototype.setPedCertificate = function(pedCertificate) {
	  this.pedCertificate = pedCertificate;
	};

	/**
	* Get the field value
	* @memberof device.DeviceAccessory
	* @return {String} 
	*/
	DeviceAccessory.prototype.getPedCertificate = function() {
	  return this.pedCertificate;
	};

	/**
	* Set the field value
	* @memberof device.DeviceAccessory
	* @param {device.DeviceAccessoryBuildType} buildType 
	*/
	DeviceAccessory.prototype.setBuildType = function(buildType) {
	  this.buildType = buildType;
	};

	/**
	* Get the field value
	* @memberof device.DeviceAccessory
	* @return {device.DeviceAccessoryBuildType} 
	*/
	DeviceAccessory.prototype.getBuildType = function() {
	  return this.buildType;
	};

	/**
	* Set the field value
	* @memberof device.DeviceAccessory
	* @param {base.Reference} deviceType 
	*/
	DeviceAccessory.prototype.setDeviceType = function(deviceType) {
	  this.deviceType = deviceType;
	};

	/**
	* Get the field value
	* @memberof device.DeviceAccessory
	* @return {base.Reference} 
	*/
	DeviceAccessory.prototype.getDeviceType = function() {
	  return this.deviceType;
	};

	/**
	* Set the field value
	* @memberof device.DeviceAccessory
	* @param {Number} versionCode must be a long integer
	*/
	DeviceAccessory.prototype.setVersionCode = function(versionCode) {
	  this.versionCode = versionCode;
	};

	/**
	* Get the field value
	* @memberof device.DeviceAccessory
	* @return {Number} must be a long integer
	*/
	DeviceAccessory.prototype.getVersionCode = function() {
	  return this.versionCode;
	};

	/**
	* Set the field value
	* @memberof device.DeviceAccessory
	* @param {base.Reference} currentRom 
	*/
	DeviceAccessory.prototype.setCurrentRom = function(currentRom) {
	  this.currentRom = currentRom;
	};

	/**
	* Get the field value
	* @memberof device.DeviceAccessory
	* @return {base.Reference} 
	*/
	DeviceAccessory.prototype.getCurrentRom = function() {
	  return this.currentRom;
	};

	/**
	* Set the field value
	* @memberof device.DeviceAccessory
	* @param {Array.<base.Reference>} secureReports An array of 
	*/
	DeviceAccessory.prototype.setSecureReports = function(secureReports) {
	  this.secureReports = secureReports;
	};

	/**
	* Get the field value
	* @memberof device.DeviceAccessory
	* @return {Array.<base.Reference>} An array of 
	*/
	DeviceAccessory.prototype.getSecureReports = function() {
	  return this.secureReports;
	};

	/**
	* Set the field value
	* @memberof device.DeviceAccessory
	* @param {Number} createdTime must be a long integer
	*/
	DeviceAccessory.prototype.setCreatedTime = function(createdTime) {
	  this.createdTime = createdTime;
	};

	/**
	* Get the field value
	* @memberof device.DeviceAccessory
	* @return {Number} must be a long integer
	*/
	DeviceAccessory.prototype.getCreatedTime = function() {
	  return this.createdTime;
	};

	/**
	* Set the field value
	* @memberof device.DeviceAccessory
	* @param {Number} modifiedTime must be a long integer
	*/
	DeviceAccessory.prototype.setModifiedTime = function(modifiedTime) {
	  this.modifiedTime = modifiedTime;
	};

	/**
	* Get the field value
	* @memberof device.DeviceAccessory
	* @return {Number} must be a long integer
	*/
	DeviceAccessory.prototype.getModifiedTime = function() {
	  return this.modifiedTime;
	};

	/**
	* @memberof device.DeviceAccessory
	* @private
	*/
	DeviceAccessory.prototype.getMetaInfo = function(fieldName) {
	  var curclass = this._class_;
	  do {
	    var fieldMetaInfo = curclass._meta_.fields[fieldName];
	    if(fieldMetaInfo) {
	      return fieldMetaInfo;
	    }
	    if(curclass._meta_._superMeta_) {
	      curclass = curclass._meta_._superMeta_._class_;
	    } else {
	      curclass = null;
	    }
	  } while(curclass);
	  return null;
	};

	DeviceAccessory.prototype.toString = function() {
	  return JSON.stringify(this);
	};

	DeviceAccessory._meta_ =  {fields:  {}};
	DeviceAccessory._meta_._class_ =  DeviceAccessory;
	DeviceAccessory._meta_.fields["id"] = {};
	DeviceAccessory._meta_.fields["id"].type = String;
	DeviceAccessory._meta_.fields["model"] = {};
	DeviceAccessory._meta_.fields["model"].type = String;
	DeviceAccessory._meta_.fields["serial"] = {};
	DeviceAccessory._meta_.fields["serial"].type = String;
	DeviceAccessory._meta_.fields["associatedDevice"] = {};
	DeviceAccessory._meta_.fields["associatedDevice"].type = base_Reference;
	DeviceAccessory._meta_.fields["pedCertificate"] = {};
	DeviceAccessory._meta_.fields["pedCertificate"].type = String;
	DeviceAccessory._meta_.fields["buildType"] = {};
	DeviceAccessory._meta_.fields["buildType"].type = device_DeviceAccessoryBuildType;
	DeviceAccessory._meta_.fields["deviceType"] = {};
	DeviceAccessory._meta_.fields["deviceType"].type = base_Reference;
	DeviceAccessory._meta_.fields["versionCode"] = {};
	DeviceAccessory._meta_.fields["versionCode"].type = Number;
	DeviceAccessory._meta_.fields["currentRom"] = {};
	DeviceAccessory._meta_.fields["currentRom"].type = base_Reference;
	DeviceAccessory._meta_.fields["secureReports"] = {};
	DeviceAccessory._meta_.fields["secureReports"].type = Array;
	DeviceAccessory._meta_.fields["secureReports"].elementType = base_Reference;
	DeviceAccessory._meta_.fields["createdTime"] = {};
	DeviceAccessory._meta_.fields["createdTime"].type = Number;
	DeviceAccessory._meta_.fields["modifiedTime"] = {};
	DeviceAccessory._meta_.fields["modifiedTime"].type = Number;

	//
	// Expose the module.
	//
	if (true) {
	module.exports = DeviceAccessory;
	}



/***/ }),
/* 943 */
/***/ (function(module, exports, __webpack_require__) {

	/**
	 * Autogenerated by Avro
	 * 
	 * DO NOT EDIT DIRECTLY
	 */

	var device_BundleItem = __webpack_require__(386);

	/**
	* @constructor
	* @memberof device
	*/
	var DeviceBundle = function() {
	  this._class_ = DeviceBundle;
	  this.id = undefined;
	  this.bundleIndicator = undefined;
	  this.description = undefined;
	  this.bundleItems = undefined;
	  this.createdTime = undefined;
	  this.modifiedTime = undefined;
	  this.deletedTime = undefined;
	};


	/**
	* Set the field value
	* Unique identifier
	*
	* @memberof device.DeviceBundle
	* @param {String} id 
	*/
	DeviceBundle.prototype.setId = function(id) {
	  this.id = id;
	};

	/**
	* Get the field value
	* Unique identifier
	* @memberof device.DeviceBundle
	* @return {String} 
	*/
	DeviceBundle.prototype.getId = function() {
	  return this.id;
	};

	/**
	* Set the field value
	* @memberof device.DeviceBundle
	* @param {String} bundleIndicator 
	*/
	DeviceBundle.prototype.setBundleIndicator = function(bundleIndicator) {
	  this.bundleIndicator = bundleIndicator;
	};

	/**
	* Get the field value
	* @memberof device.DeviceBundle
	* @return {String} 
	*/
	DeviceBundle.prototype.getBundleIndicator = function() {
	  return this.bundleIndicator;
	};

	/**
	* Set the field value
	* @memberof device.DeviceBundle
	* @param {String} description 
	*/
	DeviceBundle.prototype.setDescription = function(description) {
	  this.description = description;
	};

	/**
	* Get the field value
	* @memberof device.DeviceBundle
	* @return {String} 
	*/
	DeviceBundle.prototype.getDescription = function() {
	  return this.description;
	};

	/**
	* Set the field value
	* @memberof device.DeviceBundle
	* @param {Array.<device.BundleItem>} bundleItems An array of 
	*/
	DeviceBundle.prototype.setBundleItems = function(bundleItems) {
	  this.bundleItems = bundleItems;
	};

	/**
	* Get the field value
	* @memberof device.DeviceBundle
	* @return {Array.<device.BundleItem>} An array of 
	*/
	DeviceBundle.prototype.getBundleItems = function() {
	  return this.bundleItems;
	};

	/**
	* Set the field value
	* @memberof device.DeviceBundle
	* @param {Number} createdTime must be a long integer
	*/
	DeviceBundle.prototype.setCreatedTime = function(createdTime) {
	  this.createdTime = createdTime;
	};

	/**
	* Get the field value
	* @memberof device.DeviceBundle
	* @return {Number} must be a long integer
	*/
	DeviceBundle.prototype.getCreatedTime = function() {
	  return this.createdTime;
	};

	/**
	* Set the field value
	* @memberof device.DeviceBundle
	* @param {Number} modifiedTime must be a long integer
	*/
	DeviceBundle.prototype.setModifiedTime = function(modifiedTime) {
	  this.modifiedTime = modifiedTime;
	};

	/**
	* Get the field value
	* @memberof device.DeviceBundle
	* @return {Number} must be a long integer
	*/
	DeviceBundle.prototype.getModifiedTime = function() {
	  return this.modifiedTime;
	};

	/**
	* Set the field value
	* @memberof device.DeviceBundle
	* @param {Number} deletedTime must be a long integer
	*/
	DeviceBundle.prototype.setDeletedTime = function(deletedTime) {
	  this.deletedTime = deletedTime;
	};

	/**
	* Get the field value
	* @memberof device.DeviceBundle
	* @return {Number} must be a long integer
	*/
	DeviceBundle.prototype.getDeletedTime = function() {
	  return this.deletedTime;
	};

	/**
	* @memberof device.DeviceBundle
	* @private
	*/
	DeviceBundle.prototype.getMetaInfo = function(fieldName) {
	  var curclass = this._class_;
	  do {
	    var fieldMetaInfo = curclass._meta_.fields[fieldName];
	    if(fieldMetaInfo) {
	      return fieldMetaInfo;
	    }
	    if(curclass._meta_._superMeta_) {
	      curclass = curclass._meta_._superMeta_._class_;
	    } else {
	      curclass = null;
	    }
	  } while(curclass);
	  return null;
	};

	DeviceBundle.prototype.toString = function() {
	  return JSON.stringify(this);
	};

	DeviceBundle._meta_ =  {fields:  {}};
	DeviceBundle._meta_._class_ =  DeviceBundle;
	DeviceBundle._meta_.fields["id"] = {};
	DeviceBundle._meta_.fields["id"].type = String;
	DeviceBundle._meta_.fields["bundleIndicator"] = {};
	DeviceBundle._meta_.fields["bundleIndicator"].type = String;
	DeviceBundle._meta_.fields["description"] = {};
	DeviceBundle._meta_.fields["description"].type = String;
	DeviceBundle._meta_.fields["bundleItems"] = {};
	DeviceBundle._meta_.fields["bundleItems"].type = Array;
	DeviceBundle._meta_.fields["bundleItems"].elementType = device_BundleItem;
	DeviceBundle._meta_.fields["createdTime"] = {};
	DeviceBundle._meta_.fields["createdTime"].type = Number;
	DeviceBundle._meta_.fields["modifiedTime"] = {};
	DeviceBundle._meta_.fields["modifiedTime"].type = Number;
	DeviceBundle._meta_.fields["deletedTime"] = {};
	DeviceBundle._meta_.fields["deletedTime"].type = Number;

	//
	// Expose the module.
	//
	if (true) {
	module.exports = DeviceBundle;
	}



/***/ }),
/* 944 */
/***/ (function(module, exports, __webpack_require__) {

	/**
	 * Autogenerated by Avro
	 * 
	 * DO NOT EDIT DIRECTLY
	 */


	/**
	* @memberof device
	* @enum {string}
	*/
	var DeviceEventType = {
	  REGISTERED : "REGISTERED",
	  PROVISIONED : "PROVISIONED",
	  ACTIVATED : "ACTIVATED",
	  REACTIVATED : "REACTIVATED",
	  DEACTIVATED : "DEACTIVATED",
	  DISASSOCIATED : "DISASSOCIATED",
	  POS_MODE : "POS_MODE",
	  CFD_MODE : "CFD_MODE"
	};


	//
	// Expose the module.
	//
	if (true) {
	module.exports = DeviceEventType;
	}



/***/ }),
/* 945 */
/***/ (function(module, exports, __webpack_require__) {

	/**
	 * Autogenerated by Avro
	 * 
	 * DO NOT EDIT DIRECTLY
	 */

	var device_DeviceProvisionState = __webpack_require__(388);
	var base_Reference = __webpack_require__(5);

	/**
	* @constructor
	* @memberof device
	*/
	var DeviceProvision = function() {
	  this._class_ = DeviceProvision;
	  this.id = undefined;
	  this.deviceRef = undefined;
	  this.state = undefined;
	  this.lastActivationCode = undefined;
	  this.activationCode = undefined;
	  this.emailSent = undefined;
	  this.hasShipment = undefined;
	  this.shipment = undefined;
	  this.serialNumber = undefined;
	  this.chip_uid = undefined;
	  this.imei = undefined;
	  this.merchant = undefined;
	  this.deviceType = undefined;
	  this.provisionedTime = undefined;
	  this.activatedTime = undefined;
	  this.activationCodeCreatedTime = undefined;
	  this.terminalId = undefined;
	  this.reseller = undefined;
	  this.currentRom = undefined;
	  this.currentSecureBoardRom = undefined;
	  this.bundleIndicator = undefined;
	  this.modifiedTime = undefined;
	  this.deletedTime = undefined;
	  this.deviceWarrantyRef = undefined;
	};


	/**
	* Set the field value
	* Unique identifier
	*
	* @memberof device.DeviceProvision
	* @param {String} id 
	*/
	DeviceProvision.prototype.setId = function(id) {
	  this.id = id;
	};

	/**
	* Get the field value
	* Unique identifier
	* @memberof device.DeviceProvision
	* @return {String} 
	*/
	DeviceProvision.prototype.getId = function() {
	  return this.id;
	};

	/**
	* Set the field value
	* A 128-bit UUID, not a normal base-13 Clover ID.
	*
	* @memberof device.DeviceProvision
	* @param {base.Reference} deviceRef 
	*/
	DeviceProvision.prototype.setDeviceRef = function(deviceRef) {
	  this.deviceRef = deviceRef;
	};

	/**
	* Get the field value
	* A 128-bit UUID, not a normal base-13 Clover ID.
	* @memberof device.DeviceProvision
	* @return {base.Reference} 
	*/
	DeviceProvision.prototype.getDeviceRef = function() {
	  return this.deviceRef;
	};

	/**
	* Set the field value
	* @memberof device.DeviceProvision
	* @param {device.DeviceProvisionState} state 
	*/
	DeviceProvision.prototype.setState = function(state) {
	  this.state = state;
	};

	/**
	* Get the field value
	* @memberof device.DeviceProvision
	* @return {device.DeviceProvisionState} 
	*/
	DeviceProvision.prototype.getState = function() {
	  return this.state;
	};

	/**
	* Set the field value
	* @memberof device.DeviceProvision
	* @param {String} lastActivationCode 
	*/
	DeviceProvision.prototype.setLastActivationCode = function(lastActivationCode) {
	  this.lastActivationCode = lastActivationCode;
	};

	/**
	* Get the field value
	* @memberof device.DeviceProvision
	* @return {String} 
	*/
	DeviceProvision.prototype.getLastActivationCode = function() {
	  return this.lastActivationCode;
	};

	/**
	* Set the field value
	* @memberof device.DeviceProvision
	* @param {String} activationCode 
	*/
	DeviceProvision.prototype.setActivationCode = function(activationCode) {
	  this.activationCode = activationCode;
	};

	/**
	* Get the field value
	* @memberof device.DeviceProvision
	* @return {String} 
	*/
	DeviceProvision.prototype.getActivationCode = function() {
	  return this.activationCode;
	};

	/**
	* Set the field value
	* @memberof device.DeviceProvision
	* @param {Boolean} emailSent 
	*/
	DeviceProvision.prototype.setEmailSent = function(emailSent) {
	  this.emailSent = emailSent;
	};

	/**
	* Get the field value
	* @memberof device.DeviceProvision
	* @return {Boolean} 
	*/
	DeviceProvision.prototype.getEmailSent = function() {
	  return this.emailSent;
	};

	/**
	* Set the field value
	* @memberof device.DeviceProvision
	* @param {Boolean} hasShipment 
	*/
	DeviceProvision.prototype.setHasShipment = function(hasShipment) {
	  this.hasShipment = hasShipment;
	};

	/**
	* Get the field value
	* @memberof device.DeviceProvision
	* @return {Boolean} 
	*/
	DeviceProvision.prototype.getHasShipment = function() {
	  return this.hasShipment;
	};

	/**
	* Set the field value
	* @memberof device.DeviceProvision
	* @param {base.Reference} shipment 
	*/
	DeviceProvision.prototype.setShipment = function(shipment) {
	  this.shipment = shipment;
	};

	/**
	* Get the field value
	* @memberof device.DeviceProvision
	* @return {base.Reference} 
	*/
	DeviceProvision.prototype.getShipment = function() {
	  return this.shipment;
	};

	/**
	* Set the field value
	* @memberof device.DeviceProvision
	* @param {String} serialNumber 
	*/
	DeviceProvision.prototype.setSerialNumber = function(serialNumber) {
	  this.serialNumber = serialNumber;
	};

	/**
	* Get the field value
	* @memberof device.DeviceProvision
	* @return {String} 
	*/
	DeviceProvision.prototype.getSerialNumber = function() {
	  return this.serialNumber;
	};

	/**
	* Set the field value
	* chip uid associated with the device provisioned.
	*
	* @memberof device.DeviceProvision
	* @param {String} chip_uid 
	*/
	DeviceProvision.prototype.setChipUid = function(chip_uid) {
	  this.chip_uid = chip_uid;
	};

	/**
	* Get the field value
	* chip uid associated with the device provisioned.
	* @memberof device.DeviceProvision
	* @return {String} 
	*/
	DeviceProvision.prototype.getChipUid = function() {
	  return this.chip_uid;
	};

	/**
	* Set the field value
	* imei associated with the device provisioned.
	*
	* @memberof device.DeviceProvision
	* @param {String} imei 
	*/
	DeviceProvision.prototype.setImei = function(imei) {
	  this.imei = imei;
	};

	/**
	* Get the field value
	* imei associated with the device provisioned.
	* @memberof device.DeviceProvision
	* @return {String} 
	*/
	DeviceProvision.prototype.getImei = function() {
	  return this.imei;
	};

	/**
	* Set the field value
	* @memberof device.DeviceProvision
	* @param {base.Reference} merchant 
	*/
	DeviceProvision.prototype.setMerchant = function(merchant) {
	  this.merchant = merchant;
	};

	/**
	* Get the field value
	* @memberof device.DeviceProvision
	* @return {base.Reference} 
	*/
	DeviceProvision.prototype.getMerchant = function() {
	  return this.merchant;
	};

	/**
	* Set the field value
	* @memberof device.DeviceProvision
	* @param {String} deviceType 
	*/
	DeviceProvision.prototype.setDeviceType = function(deviceType) {
	  this.deviceType = deviceType;
	};

	/**
	* Get the field value
	* @memberof device.DeviceProvision
	* @return {String} 
	*/
	DeviceProvision.prototype.getDeviceType = function() {
	  return this.deviceType;
	};

	/**
	* Set the field value
	* @memberof device.DeviceProvision
	* @param {Number} provisionedTime must be a long integer
	*/
	DeviceProvision.prototype.setProvisionedTime = function(provisionedTime) {
	  this.provisionedTime = provisionedTime;
	};

	/**
	* Get the field value
	* @memberof device.DeviceProvision
	* @return {Number} must be a long integer
	*/
	DeviceProvision.prototype.getProvisionedTime = function() {
	  return this.provisionedTime;
	};

	/**
	* Set the field value
	* @memberof device.DeviceProvision
	* @param {Number} activatedTime must be a long integer
	*/
	DeviceProvision.prototype.setActivatedTime = function(activatedTime) {
	  this.activatedTime = activatedTime;
	};

	/**
	* Get the field value
	* @memberof device.DeviceProvision
	* @return {Number} must be a long integer
	*/
	DeviceProvision.prototype.getActivatedTime = function() {
	  return this.activatedTime;
	};

	/**
	* Set the field value
	* Date/time the activation code was created.
	*
	* @memberof device.DeviceProvision
	* @param {Number} activationCodeCreatedTime must be a long integer
	*/
	DeviceProvision.prototype.setActivationCodeCreatedTime = function(activationCodeCreatedTime) {
	  this.activationCodeCreatedTime = activationCodeCreatedTime;
	};

	/**
	* Get the field value
	* Date/time the activation code was created.
	* @memberof device.DeviceProvision
	* @return {Number} must be a long integer
	*/
	DeviceProvision.prototype.getActivationCodeCreatedTime = function() {
	  return this.activationCodeCreatedTime;
	};

	/**
	* Set the field value
	* @memberof device.DeviceProvision
	* @param {String} terminalId 
	*/
	DeviceProvision.prototype.setTerminalId = function(terminalId) {
	  this.terminalId = terminalId;
	};

	/**
	* Get the field value
	* @memberof device.DeviceProvision
	* @return {String} 
	*/
	DeviceProvision.prototype.getTerminalId = function() {
	  return this.terminalId;
	};

	/**
	* Set the field value
	* @memberof device.DeviceProvision
	* @param {base.Reference} reseller 
	*/
	DeviceProvision.prototype.setReseller = function(reseller) {
	  this.reseller = reseller;
	};

	/**
	* Get the field value
	* @memberof device.DeviceProvision
	* @return {base.Reference} 
	*/
	DeviceProvision.prototype.getReseller = function() {
	  return this.reseller;
	};

	/**
	* Set the field value
	* @memberof device.DeviceProvision
	* @param {base.Reference} currentRom 
	*/
	DeviceProvision.prototype.setCurrentRom = function(currentRom) {
	  this.currentRom = currentRom;
	};

	/**
	* Get the field value
	* @memberof device.DeviceProvision
	* @return {base.Reference} 
	*/
	DeviceProvision.prototype.getCurrentRom = function() {
	  return this.currentRom;
	};

	/**
	* Set the field value
	* @memberof device.DeviceProvision
	* @param {base.Reference} currentSecureBoardRom 
	*/
	DeviceProvision.prototype.setCurrentSecureBoardRom = function(currentSecureBoardRom) {
	  this.currentSecureBoardRom = currentSecureBoardRom;
	};

	/**
	* Get the field value
	* @memberof device.DeviceProvision
	* @return {base.Reference} 
	*/
	DeviceProvision.prototype.getCurrentSecureBoardRom = function() {
	  return this.currentSecureBoardRom;
	};

	/**
	* Set the field value
	* @memberof device.DeviceProvision
	* @param {String} bundleIndicator 
	*/
	DeviceProvision.prototype.setBundleIndicator = function(bundleIndicator) {
	  this.bundleIndicator = bundleIndicator;
	};

	/**
	* Get the field value
	* @memberof device.DeviceProvision
	* @return {String} 
	*/
	DeviceProvision.prototype.getBundleIndicator = function() {
	  return this.bundleIndicator;
	};

	/**
	* Set the field value
	* @memberof device.DeviceProvision
	* @param {Number} modifiedTime must be a long integer
	*/
	DeviceProvision.prototype.setModifiedTime = function(modifiedTime) {
	  this.modifiedTime = modifiedTime;
	};

	/**
	* Get the field value
	* @memberof device.DeviceProvision
	* @return {Number} must be a long integer
	*/
	DeviceProvision.prototype.getModifiedTime = function() {
	  return this.modifiedTime;
	};

	/**
	* Set the field value
	* Date/time this Device Provision was deleted.
	*
	* @memberof device.DeviceProvision
	* @param {Number} deletedTime must be a long integer
	*/
	DeviceProvision.prototype.setDeletedTime = function(deletedTime) {
	  this.deletedTime = deletedTime;
	};

	/**
	* Get the field value
	* Date/time this Device Provision was deleted.
	* @memberof device.DeviceProvision
	* @return {Number} must be a long integer
	*/
	DeviceProvision.prototype.getDeletedTime = function() {
	  return this.deletedTime;
	};

	/**
	* Set the field value
	* @memberof device.DeviceProvision
	* @param {base.Reference} deviceWarrantyRef 
	*/
	DeviceProvision.prototype.setDeviceWarrantyRef = function(deviceWarrantyRef) {
	  this.deviceWarrantyRef = deviceWarrantyRef;
	};

	/**
	* Get the field value
	* @memberof device.DeviceProvision
	* @return {base.Reference} 
	*/
	DeviceProvision.prototype.getDeviceWarrantyRef = function() {
	  return this.deviceWarrantyRef;
	};

	/**
	* @memberof device.DeviceProvision
	* @private
	*/
	DeviceProvision.prototype.getMetaInfo = function(fieldName) {
	  var curclass = this._class_;
	  do {
	    var fieldMetaInfo = curclass._meta_.fields[fieldName];
	    if(fieldMetaInfo) {
	      return fieldMetaInfo;
	    }
	    if(curclass._meta_._superMeta_) {
	      curclass = curclass._meta_._superMeta_._class_;
	    } else {
	      curclass = null;
	    }
	  } while(curclass);
	  return null;
	};

	DeviceProvision.prototype.toString = function() {
	  return JSON.stringify(this);
	};

	DeviceProvision._meta_ =  {fields:  {}};
	DeviceProvision._meta_._class_ =  DeviceProvision;
	DeviceProvision._meta_.fields["id"] = {};
	DeviceProvision._meta_.fields["id"].type = String;
	DeviceProvision._meta_.fields["deviceRef"] = {};
	DeviceProvision._meta_.fields["deviceRef"].type = base_Reference;
	DeviceProvision._meta_.fields["state"] = {};
	DeviceProvision._meta_.fields["state"].type = device_DeviceProvisionState;
	DeviceProvision._meta_.fields["lastActivationCode"] = {};
	DeviceProvision._meta_.fields["lastActivationCode"].type = String;
	DeviceProvision._meta_.fields["activationCode"] = {};
	DeviceProvision._meta_.fields["activationCode"].type = String;
	DeviceProvision._meta_.fields["emailSent"] = {};
	DeviceProvision._meta_.fields["emailSent"].type = Boolean;
	DeviceProvision._meta_.fields["hasShipment"] = {};
	DeviceProvision._meta_.fields["hasShipment"].type = Boolean;
	DeviceProvision._meta_.fields["shipment"] = {};
	DeviceProvision._meta_.fields["shipment"].type = base_Reference;
	DeviceProvision._meta_.fields["serialNumber"] = {};
	DeviceProvision._meta_.fields["serialNumber"].type = String;
	DeviceProvision._meta_.fields["chip_uid"] = {};
	DeviceProvision._meta_.fields["chip_uid"].type = String;
	DeviceProvision._meta_.fields["imei"] = {};
	DeviceProvision._meta_.fields["imei"].type = String;
	DeviceProvision._meta_.fields["merchant"] = {};
	DeviceProvision._meta_.fields["merchant"].type = base_Reference;
	DeviceProvision._meta_.fields["deviceType"] = {};
	DeviceProvision._meta_.fields["deviceType"].type = String;
	DeviceProvision._meta_.fields["provisionedTime"] = {};
	DeviceProvision._meta_.fields["provisionedTime"].type = Number;
	DeviceProvision._meta_.fields["activatedTime"] = {};
	DeviceProvision._meta_.fields["activatedTime"].type = Number;
	DeviceProvision._meta_.fields["activationCodeCreatedTime"] = {};
	DeviceProvision._meta_.fields["activationCodeCreatedTime"].type = Number;
	DeviceProvision._meta_.fields["terminalId"] = {};
	DeviceProvision._meta_.fields["terminalId"].type = String;
	DeviceProvision._meta_.fields["reseller"] = {};
	DeviceProvision._meta_.fields["reseller"].type = base_Reference;
	DeviceProvision._meta_.fields["currentRom"] = {};
	DeviceProvision._meta_.fields["currentRom"].type = base_Reference;
	DeviceProvision._meta_.fields["currentSecureBoardRom"] = {};
	DeviceProvision._meta_.fields["currentSecureBoardRom"].type = base_Reference;
	DeviceProvision._meta_.fields["bundleIndicator"] = {};
	DeviceProvision._meta_.fields["bundleIndicator"].type = String;
	DeviceProvision._meta_.fields["modifiedTime"] = {};
	DeviceProvision._meta_.fields["modifiedTime"].type = Number;
	DeviceProvision._meta_.fields["deletedTime"] = {};
	DeviceProvision._meta_.fields["deletedTime"].type = Number;
	DeviceProvision._meta_.fields["deviceWarrantyRef"] = {};
	DeviceProvision._meta_.fields["deviceWarrantyRef"].type = base_Reference;

	//
	// Expose the module.
	//
	if (true) {
	module.exports = DeviceProvision;
	}



/***/ }),
/* 946 */
/***/ (function(module, exports, __webpack_require__) {

	/**
	 * Autogenerated by Avro
	 * 
	 * DO NOT EDIT DIRECTLY
	 */


	/**
	* @constructor
	* @memberof device
	*/
	var DeviceProvisionAssoc = function() {
	  this._class_ = DeviceProvisionAssoc;
	  this.serialNumber = undefined;
	  this.associatedId = undefined;
	};


	/**
	* Set the field value
	* @memberof device.DeviceProvisionAssoc
	* @param {String} serialNumber 
	*/
	DeviceProvisionAssoc.prototype.setSerialNumber = function(serialNumber) {
	  this.serialNumber = serialNumber;
	};

	/**
	* Get the field value
	* @memberof device.DeviceProvisionAssoc
	* @return {String} 
	*/
	DeviceProvisionAssoc.prototype.getSerialNumber = function() {
	  return this.serialNumber;
	};

	/**
	* Set the field value
	* @memberof device.DeviceProvisionAssoc
	* @param {String} associatedId 
	*/
	DeviceProvisionAssoc.prototype.setAssociatedId = function(associatedId) {
	  this.associatedId = associatedId;
	};

	/**
	* Get the field value
	* @memberof device.DeviceProvisionAssoc
	* @return {String} 
	*/
	DeviceProvisionAssoc.prototype.getAssociatedId = function() {
	  return this.associatedId;
	};

	/**
	* @memberof device.DeviceProvisionAssoc
	* @private
	*/
	DeviceProvisionAssoc.prototype.getMetaInfo = function(fieldName) {
	  var curclass = this._class_;
	  do {
	    var fieldMetaInfo = curclass._meta_.fields[fieldName];
	    if(fieldMetaInfo) {
	      return fieldMetaInfo;
	    }
	    if(curclass._meta_._superMeta_) {
	      curclass = curclass._meta_._superMeta_._class_;
	    } else {
	      curclass = null;
	    }
	  } while(curclass);
	  return null;
	};

	DeviceProvisionAssoc.prototype.toString = function() {
	  return JSON.stringify(this);
	};

	DeviceProvisionAssoc._meta_ =  {fields:  {}};
	DeviceProvisionAssoc._meta_._class_ =  DeviceProvisionAssoc;
	DeviceProvisionAssoc._meta_.fields["serialNumber"] = {};
	DeviceProvisionAssoc._meta_.fields["serialNumber"].type = String;
	DeviceProvisionAssoc._meta_.fields["associatedId"] = {};
	DeviceProvisionAssoc._meta_.fields["associatedId"].type = String;

	//
	// Expose the module.
	//
	if (true) {
	module.exports = DeviceProvisionAssoc;
	}



/***/ }),
/* 947 */
/***/ (function(module, exports, __webpack_require__) {

	/**
	 * Autogenerated by Avro
	 * 
	 * DO NOT EDIT DIRECTLY
	 */


	/**
	* @constructor
	* @memberof device
	*/
	var DeviceProvisionStatus = function() {
	  this._class_ = DeviceProvisionStatus;
	  this.id = undefined;
	  this.chipUid = undefined;
	  this.imei = undefined;
	  this.provisionInfo = undefined;
	  this.lastActivationCode = undefined;
	  this.activationCode = undefined;
	  this.emailSent = undefined;
	  this.serialNumber = undefined;
	  this.merchantId = undefined;
	  this.provisionedTime = undefined;
	  this.activatedTime = undefined;
	  this.resellerId = undefined;
	  this.deletedTime = undefined;
	  this.modifiedTime = undefined;
	};


	/**
	* Set the field value
	* Unique identifier
	*
	* @memberof device.DeviceProvisionStatus
	* @param {String} id 
	*/
	DeviceProvisionStatus.prototype.setId = function(id) {
	  this.id = id;
	};

	/**
	* Get the field value
	* Unique identifier
	* @memberof device.DeviceProvisionStatus
	* @return {String} 
	*/
	DeviceProvisionStatus.prototype.getId = function() {
	  return this.id;
	};

	/**
	* Set the field value
	* @memberof device.DeviceProvisionStatus
	* @param {String} chipUid 
	*/
	DeviceProvisionStatus.prototype.setChipUid = function(chipUid) {
	  this.chipUid = chipUid;
	};

	/**
	* Get the field value
	* @memberof device.DeviceProvisionStatus
	* @return {String} 
	*/
	DeviceProvisionStatus.prototype.getChipUid = function() {
	  return this.chipUid;
	};

	/**
	* Set the field value
	* @memberof device.DeviceProvisionStatus
	* @param {String} imei 
	*/
	DeviceProvisionStatus.prototype.setImei = function(imei) {
	  this.imei = imei;
	};

	/**
	* Get the field value
	* @memberof device.DeviceProvisionStatus
	* @return {String} 
	*/
	DeviceProvisionStatus.prototype.getImei = function() {
	  return this.imei;
	};

	/**
	* Set the field value
	* @memberof device.DeviceProvisionStatus
	* @param {String} provisionInfo 
	*/
	DeviceProvisionStatus.prototype.setProvisionInfo = function(provisionInfo) {
	  this.provisionInfo = provisionInfo;
	};

	/**
	* Get the field value
	* @memberof device.DeviceProvisionStatus
	* @return {String} 
	*/
	DeviceProvisionStatus.prototype.getProvisionInfo = function() {
	  return this.provisionInfo;
	};

	/**
	* Set the field value
	* @memberof device.DeviceProvisionStatus
	* @param {String} lastActivationCode 
	*/
	DeviceProvisionStatus.prototype.setLastActivationCode = function(lastActivationCode) {
	  this.lastActivationCode = lastActivationCode;
	};

	/**
	* Get the field value
	* @memberof device.DeviceProvisionStatus
	* @return {String} 
	*/
	DeviceProvisionStatus.prototype.getLastActivationCode = function() {
	  return this.lastActivationCode;
	};

	/**
	* Set the field value
	* @memberof device.DeviceProvisionStatus
	* @param {String} activationCode 
	*/
	DeviceProvisionStatus.prototype.setActivationCode = function(activationCode) {
	  this.activationCode = activationCode;
	};

	/**
	* Get the field value
	* @memberof device.DeviceProvisionStatus
	* @return {String} 
	*/
	DeviceProvisionStatus.prototype.getActivationCode = function() {
	  return this.activationCode;
	};

	/**
	* Set the field value
	* @memberof device.DeviceProvisionStatus
	* @param {Boolean} emailSent 
	*/
	DeviceProvisionStatus.prototype.setEmailSent = function(emailSent) {
	  this.emailSent = emailSent;
	};

	/**
	* Get the field value
	* @memberof device.DeviceProvisionStatus
	* @return {Boolean} 
	*/
	DeviceProvisionStatus.prototype.getEmailSent = function() {
	  return this.emailSent;
	};

	/**
	* Set the field value
	* @memberof device.DeviceProvisionStatus
	* @param {String} serialNumber 
	*/
	DeviceProvisionStatus.prototype.setSerialNumber = function(serialNumber) {
	  this.serialNumber = serialNumber;
	};

	/**
	* Get the field value
	* @memberof device.DeviceProvisionStatus
	* @return {String} 
	*/
	DeviceProvisionStatus.prototype.getSerialNumber = function() {
	  return this.serialNumber;
	};

	/**
	* Set the field value
	* @memberof device.DeviceProvisionStatus
	* @param {Number} merchantId must be a long integer
	*/
	DeviceProvisionStatus.prototype.setMerchantId = function(merchantId) {
	  this.merchantId = merchantId;
	};

	/**
	* Get the field value
	* @memberof device.DeviceProvisionStatus
	* @return {Number} must be a long integer
	*/
	DeviceProvisionStatus.prototype.getMerchantId = function() {
	  return this.merchantId;
	};

	/**
	* Set the field value
	* @memberof device.DeviceProvisionStatus
	* @param {Number} provisionedTime must be a long integer
	*/
	DeviceProvisionStatus.prototype.setProvisionedTime = function(provisionedTime) {
	  this.provisionedTime = provisionedTime;
	};

	/**
	* Get the field value
	* @memberof device.DeviceProvisionStatus
	* @return {Number} must be a long integer
	*/
	DeviceProvisionStatus.prototype.getProvisionedTime = function() {
	  return this.provisionedTime;
	};

	/**
	* Set the field value
	* @memberof device.DeviceProvisionStatus
	* @param {Number} activatedTime must be a long integer
	*/
	DeviceProvisionStatus.prototype.setActivatedTime = function(activatedTime) {
	  this.activatedTime = activatedTime;
	};

	/**
	* Get the field value
	* @memberof device.DeviceProvisionStatus
	* @return {Number} must be a long integer
	*/
	DeviceProvisionStatus.prototype.getActivatedTime = function() {
	  return this.activatedTime;
	};

	/**
	* Set the field value
	* @memberof device.DeviceProvisionStatus
	* @param {Number} resellerId must be a long integer
	*/
	DeviceProvisionStatus.prototype.setResellerId = function(resellerId) {
	  this.resellerId = resellerId;
	};

	/**
	* Get the field value
	* @memberof device.DeviceProvisionStatus
	* @return {Number} must be a long integer
	*/
	DeviceProvisionStatus.prototype.getResellerId = function() {
	  return this.resellerId;
	};

	/**
	* Set the field value
	* @memberof device.DeviceProvisionStatus
	* @param {Number} deletedTime must be a long integer
	*/
	DeviceProvisionStatus.prototype.setDeletedTime = function(deletedTime) {
	  this.deletedTime = deletedTime;
	};

	/**
	* Get the field value
	* @memberof device.DeviceProvisionStatus
	* @return {Number} must be a long integer
	*/
	DeviceProvisionStatus.prototype.getDeletedTime = function() {
	  return this.deletedTime;
	};

	/**
	* Set the field value
	* @memberof device.DeviceProvisionStatus
	* @param {Number} modifiedTime must be a long integer
	*/
	DeviceProvisionStatus.prototype.setModifiedTime = function(modifiedTime) {
	  this.modifiedTime = modifiedTime;
	};

	/**
	* Get the field value
	* @memberof device.DeviceProvisionStatus
	* @return {Number} must be a long integer
	*/
	DeviceProvisionStatus.prototype.getModifiedTime = function() {
	  return this.modifiedTime;
	};

	/**
	* @memberof device.DeviceProvisionStatus
	* @private
	*/
	DeviceProvisionStatus.prototype.getMetaInfo = function(fieldName) {
	  var curclass = this._class_;
	  do {
	    var fieldMetaInfo = curclass._meta_.fields[fieldName];
	    if(fieldMetaInfo) {
	      return fieldMetaInfo;
	    }
	    if(curclass._meta_._superMeta_) {
	      curclass = curclass._meta_._superMeta_._class_;
	    } else {
	      curclass = null;
	    }
	  } while(curclass);
	  return null;
	};

	DeviceProvisionStatus.prototype.toString = function() {
	  return JSON.stringify(this);
	};

	DeviceProvisionStatus._meta_ =  {fields:  {}};
	DeviceProvisionStatus._meta_._class_ =  DeviceProvisionStatus;
	DeviceProvisionStatus._meta_.fields["id"] = {};
	DeviceProvisionStatus._meta_.fields["id"].type = String;
	DeviceProvisionStatus._meta_.fields["chipUid"] = {};
	DeviceProvisionStatus._meta_.fields["chipUid"].type = String;
	DeviceProvisionStatus._meta_.fields["imei"] = {};
	DeviceProvisionStatus._meta_.fields["imei"].type = String;
	DeviceProvisionStatus._meta_.fields["provisionInfo"] = {};
	DeviceProvisionStatus._meta_.fields["provisionInfo"].type = String;
	DeviceProvisionStatus._meta_.fields["lastActivationCode"] = {};
	DeviceProvisionStatus._meta_.fields["lastActivationCode"].type = String;
	DeviceProvisionStatus._meta_.fields["activationCode"] = {};
	DeviceProvisionStatus._meta_.fields["activationCode"].type = String;
	DeviceProvisionStatus._meta_.fields["emailSent"] = {};
	DeviceProvisionStatus._meta_.fields["emailSent"].type = Boolean;
	DeviceProvisionStatus._meta_.fields["serialNumber"] = {};
	DeviceProvisionStatus._meta_.fields["serialNumber"].type = String;
	DeviceProvisionStatus._meta_.fields["merchantId"] = {};
	DeviceProvisionStatus._meta_.fields["merchantId"].type = Number;
	DeviceProvisionStatus._meta_.fields["provisionedTime"] = {};
	DeviceProvisionStatus._meta_.fields["provisionedTime"].type = Number;
	DeviceProvisionStatus._meta_.fields["activatedTime"] = {};
	DeviceProvisionStatus._meta_.fields["activatedTime"].type = Number;
	DeviceProvisionStatus._meta_.fields["resellerId"] = {};
	DeviceProvisionStatus._meta_.fields["resellerId"].type = Number;
	DeviceProvisionStatus._meta_.fields["deletedTime"] = {};
	DeviceProvisionStatus._meta_.fields["deletedTime"].type = Number;
	DeviceProvisionStatus._meta_.fields["modifiedTime"] = {};
	DeviceProvisionStatus._meta_.fields["modifiedTime"].type = Number;

	//
	// Expose the module.
	//
	if (true) {
	module.exports = DeviceProvisionStatus;
	}



/***/ }),
/* 948 */
/***/ (function(module, exports, __webpack_require__) {

	/**
	 * Autogenerated by Avro
	 * 
	 * DO NOT EDIT DIRECTLY
	 */


	/** This is a wrapper calss which holds a list of request uuids */
	/**
	* @constructor
	* @memberof device
	*/
	var DeviceRequests = function() {
	  this._class_ = DeviceRequests;
	  this.requestUuids = undefined;
	};


	/**
	* Set the field value
	* @memberof device.DeviceRequests
	* @param {Array.<String>} requestUuids An array of 
	*/
	DeviceRequests.prototype.setRequestUuids = function(requestUuids) {
	  this.requestUuids = requestUuids;
	};

	/**
	* Get the field value
	* @memberof device.DeviceRequests
	* @return {Array.<String>} An array of 
	*/
	DeviceRequests.prototype.getRequestUuids = function() {
	  return this.requestUuids;
	};

	/**
	* @memberof device.DeviceRequests
	* @private
	*/
	DeviceRequests.prototype.getMetaInfo = function(fieldName) {
	  var curclass = this._class_;
	  do {
	    var fieldMetaInfo = curclass._meta_.fields[fieldName];
	    if(fieldMetaInfo) {
	      return fieldMetaInfo;
	    }
	    if(curclass._meta_._superMeta_) {
	      curclass = curclass._meta_._superMeta_._class_;
	    } else {
	      curclass = null;
	    }
	  } while(curclass);
	  return null;
	};

	DeviceRequests.prototype.toString = function() {
	  return JSON.stringify(this);
	};

	DeviceRequests._meta_ =  {fields:  {}};
	DeviceRequests._meta_._class_ =  DeviceRequests;
	DeviceRequests._meta_.fields["requestUuids"] = {};
	DeviceRequests._meta_.fields["requestUuids"].type = Array;

	//
	// Expose the module.
	//
	if (true) {
	module.exports = DeviceRequests;
	}



/***/ }),
/* 949 */
/***/ (function(module, exports, __webpack_require__) {

	/**
	 * Autogenerated by Avro
	 * 
	 * DO NOT EDIT DIRECTLY
	 */


	/** The state of a warranty for a device. */
	/**
	* @constructor
	* @memberof device
	*/
	var DeviceWarranty = function() {
	  this._class_ = DeviceWarranty;
	  this.id = undefined;
	  this.serialNumber = undefined;
	  this.standardWarrantyStartDay = undefined;
	  this.standardWarrantyEndDay = undefined;
	  this.standardWarrantyStartDate = undefined;
	  this.standardWarrantyEndDate = undefined;
	  this.extendedWarrantyStatus = undefined;
	  this.extendedWarrantyStartDay = undefined;
	  this.extendedWarrantyEndDay = undefined;
	  this.extendedWarrantyStartDate = undefined;
	  this.extendedWarrantyEndDate = undefined;
	};


	/**
	* Set the field value
	* Unique identifier
	*
	* @memberof device.DeviceWarranty
	* @param {String} id 
	*/
	DeviceWarranty.prototype.setId = function(id) {
	  this.id = id;
	};

	/**
	* Get the field value
	* Unique identifier
	* @memberof device.DeviceWarranty
	* @return {String} 
	*/
	DeviceWarranty.prototype.getId = function() {
	  return this.id;
	};

	/**
	* Set the field value
	* @memberof device.DeviceWarranty
	* @param {String} serialNumber 
	*/
	DeviceWarranty.prototype.setSerialNumber = function(serialNumber) {
	  this.serialNumber = serialNumber;
	};

	/**
	* Get the field value
	* @memberof device.DeviceWarranty
	* @return {String} 
	*/
	DeviceWarranty.prototype.getSerialNumber = function() {
	  return this.serialNumber;
	};

	/**
	* Set the field value
	* Day standard warranty starts dd-MMM-yyyy
	*
	* @memberof device.DeviceWarranty
	* @param {String} standardWarrantyStartDay 
	*/
	DeviceWarranty.prototype.setStandardWarrantyStartDay = function(standardWarrantyStartDay) {
	  this.standardWarrantyStartDay = standardWarrantyStartDay;
	};

	/**
	* Get the field value
	* Day standard warranty starts dd-MMM-yyyy
	* @memberof device.DeviceWarranty
	* @return {String} 
	*/
	DeviceWarranty.prototype.getStandardWarrantyStartDay = function() {
	  return this.standardWarrantyStartDay;
	};

	/**
	* Set the field value
	* Day standard warranty ends dd-MMM-yyyy
	*
	* @memberof device.DeviceWarranty
	* @param {String} standardWarrantyEndDay 
	*/
	DeviceWarranty.prototype.setStandardWarrantyEndDay = function(standardWarrantyEndDay) {
	  this.standardWarrantyEndDay = standardWarrantyEndDay;
	};

	/**
	* Get the field value
	* Day standard warranty ends dd-MMM-yyyy
	* @memberof device.DeviceWarranty
	* @return {String} 
	*/
	DeviceWarranty.prototype.getStandardWarrantyEndDay = function() {
	  return this.standardWarrantyEndDay;
	};

	/**
	* Set the field value
	* Date standard warranty starts
	*
	* @memberof device.DeviceWarranty
	* @param {Number} standardWarrantyStartDate must be a long integer
	*/
	DeviceWarranty.prototype.setStandardWarrantyStartDate = function(standardWarrantyStartDate) {
	  this.standardWarrantyStartDate = standardWarrantyStartDate;
	};

	/**
	* Get the field value
	* Date standard warranty starts
	* @memberof device.DeviceWarranty
	* @return {Number} must be a long integer
	*/
	DeviceWarranty.prototype.getStandardWarrantyStartDate = function() {
	  return this.standardWarrantyStartDate;
	};

	/**
	* Set the field value
	* Date standard warranty ends
	*
	* @memberof device.DeviceWarranty
	* @param {Number} standardWarrantyEndDate must be a long integer
	*/
	DeviceWarranty.prototype.setStandardWarrantyEndDate = function(standardWarrantyEndDate) {
	  this.standardWarrantyEndDate = standardWarrantyEndDate;
	};

	/**
	* Get the field value
	* Date standard warranty ends
	* @memberof device.DeviceWarranty
	* @return {Number} must be a long integer
	*/
	DeviceWarranty.prototype.getStandardWarrantyEndDate = function() {
	  return this.standardWarrantyEndDate;
	};

	/**
	* Set the field value
	* Status of the extended warranty
	*
	* @memberof device.DeviceWarranty
	* @param {String} extendedWarrantyStatus 
	*/
	DeviceWarranty.prototype.setExtendedWarrantyStatus = function(extendedWarrantyStatus) {
	  this.extendedWarrantyStatus = extendedWarrantyStatus;
	};

	/**
	* Get the field value
	* Status of the extended warranty
	* @memberof device.DeviceWarranty
	* @return {String} 
	*/
	DeviceWarranty.prototype.getExtendedWarrantyStatus = function() {
	  return this.extendedWarrantyStatus;
	};

	/**
	* Set the field value
	* Day extended warranty starts dd-MMM-yyyy
	*
	* @memberof device.DeviceWarranty
	* @param {String} extendedWarrantyStartDay 
	*/
	DeviceWarranty.prototype.setExtendedWarrantyStartDay = function(extendedWarrantyStartDay) {
	  this.extendedWarrantyStartDay = extendedWarrantyStartDay;
	};

	/**
	* Get the field value
	* Day extended warranty starts dd-MMM-yyyy
	* @memberof device.DeviceWarranty
	* @return {String} 
	*/
	DeviceWarranty.prototype.getExtendedWarrantyStartDay = function() {
	  return this.extendedWarrantyStartDay;
	};

	/**
	* Set the field value
	* Day extended warranty ends dd-MMM-yyyy
	*
	* @memberof device.DeviceWarranty
	* @param {String} extendedWarrantyEndDay 
	*/
	DeviceWarranty.prototype.setExtendedWarrantyEndDay = function(extendedWarrantyEndDay) {
	  this.extendedWarrantyEndDay = extendedWarrantyEndDay;
	};

	/**
	* Get the field value
	* Day extended warranty ends dd-MMM-yyyy
	* @memberof device.DeviceWarranty
	* @return {String} 
	*/
	DeviceWarranty.prototype.getExtendedWarrantyEndDay = function() {
	  return this.extendedWarrantyEndDay;
	};

	/**
	* Set the field value
	* Date extended warranty starts
	*
	* @memberof device.DeviceWarranty
	* @param {Number} extendedWarrantyStartDate must be a long integer
	*/
	DeviceWarranty.prototype.setExtendedWarrantyStartDate = function(extendedWarrantyStartDate) {
	  this.extendedWarrantyStartDate = extendedWarrantyStartDate;
	};

	/**
	* Get the field value
	* Date extended warranty starts
	* @memberof device.DeviceWarranty
	* @return {Number} must be a long integer
	*/
	DeviceWarranty.prototype.getExtendedWarrantyStartDate = function() {
	  return this.extendedWarrantyStartDate;
	};

	/**
	* Set the field value
	* Date extended warranty ends
	*
	* @memberof device.DeviceWarranty
	* @param {Number} extendedWarrantyEndDate must be a long integer
	*/
	DeviceWarranty.prototype.setExtendedWarrantyEndDate = function(extendedWarrantyEndDate) {
	  this.extendedWarrantyEndDate = extendedWarrantyEndDate;
	};

	/**
	* Get the field value
	* Date extended warranty ends
	* @memberof device.DeviceWarranty
	* @return {Number} must be a long integer
	*/
	DeviceWarranty.prototype.getExtendedWarrantyEndDate = function() {
	  return this.extendedWarrantyEndDate;
	};

	/**
	* @memberof device.DeviceWarranty
	* @private
	*/
	DeviceWarranty.prototype.getMetaInfo = function(fieldName) {
	  var curclass = this._class_;
	  do {
	    var fieldMetaInfo = curclass._meta_.fields[fieldName];
	    if(fieldMetaInfo) {
	      return fieldMetaInfo;
	    }
	    if(curclass._meta_._superMeta_) {
	      curclass = curclass._meta_._superMeta_._class_;
	    } else {
	      curclass = null;
	    }
	  } while(curclass);
	  return null;
	};

	DeviceWarranty.prototype.toString = function() {
	  return JSON.stringify(this);
	};

	DeviceWarranty._meta_ =  {fields:  {}};
	DeviceWarranty._meta_._class_ =  DeviceWarranty;
	DeviceWarranty._meta_.fields["id"] = {};
	DeviceWarranty._meta_.fields["id"].type = String;
	DeviceWarranty._meta_.fields["serialNumber"] = {};
	DeviceWarranty._meta_.fields["serialNumber"].type = String;
	DeviceWarranty._meta_.fields["standardWarrantyStartDay"] = {};
	DeviceWarranty._meta_.fields["standardWarrantyStartDay"].type = String;
	DeviceWarranty._meta_.fields["standardWarrantyEndDay"] = {};
	DeviceWarranty._meta_.fields["standardWarrantyEndDay"].type = String;
	DeviceWarranty._meta_.fields["standardWarrantyStartDate"] = {};
	DeviceWarranty._meta_.fields["standardWarrantyStartDate"].type = Number;
	DeviceWarranty._meta_.fields["standardWarrantyEndDate"] = {};
	DeviceWarranty._meta_.fields["standardWarrantyEndDate"].type = Number;
	DeviceWarranty._meta_.fields["extendedWarrantyStatus"] = {};
	DeviceWarranty._meta_.fields["extendedWarrantyStatus"].type = String;
	DeviceWarranty._meta_.fields["extendedWarrantyStartDay"] = {};
	DeviceWarranty._meta_.fields["extendedWarrantyStartDay"].type = String;
	DeviceWarranty._meta_.fields["extendedWarrantyEndDay"] = {};
	DeviceWarranty._meta_.fields["extendedWarrantyEndDay"].type = String;
	DeviceWarranty._meta_.fields["extendedWarrantyStartDate"] = {};
	DeviceWarranty._meta_.fields["extendedWarrantyStartDate"].type = Number;
	DeviceWarranty._meta_.fields["extendedWarrantyEndDate"] = {};
	DeviceWarranty._meta_.fields["extendedWarrantyEndDate"].type = Number;

	//
	// Expose the module.
	//
	if (true) {
	module.exports = DeviceWarranty;
	}



/***/ }),
/* 950 */
/***/ (function(module, exports, __webpack_require__) {

	/**
	 * Autogenerated by Avro
	 * 
	 * DO NOT EDIT DIRECTLY
	 */


	/**
	* @constructor
	* @memberof device
	*/
	var LimitedDevice = function() {
	  this._class_ = LimitedDevice;
	  this.id = undefined;
	  this.name = undefined;
	  this.serial = undefined;
	};


	/**
	* Set the field value
	* Unique identifier
	*
	* @memberof device.LimitedDevice
	* @param {String} id 
	*/
	LimitedDevice.prototype.setId = function(id) {
	  this.id = id;
	};

	/**
	* Get the field value
	* Unique identifier
	* @memberof device.LimitedDevice
	* @return {String} 
	*/
	LimitedDevice.prototype.getId = function() {
	  return this.id;
	};

	/**
	* Set the field value
	* Name of the device (if entered)
	*
	* @memberof device.LimitedDevice
	* @param {String} name 
	*/
	LimitedDevice.prototype.setName = function(name) {
	  this.name = name;
	};

	/**
	* Get the field value
	* Name of the device (if entered)
	* @memberof device.LimitedDevice
	* @return {String} 
	*/
	LimitedDevice.prototype.getName = function() {
	  return this.name;
	};

	/**
	* Set the field value
	* The device's serial number.
	*
	* @memberof device.LimitedDevice
	* @param {String} serial 
	*/
	LimitedDevice.prototype.setSerial = function(serial) {
	  this.serial = serial;
	};

	/**
	* Get the field value
	* The device's serial number.
	* @memberof device.LimitedDevice
	* @return {String} 
	*/
	LimitedDevice.prototype.getSerial = function() {
	  return this.serial;
	};

	/**
	* @memberof device.LimitedDevice
	* @private
	*/
	LimitedDevice.prototype.getMetaInfo = function(fieldName) {
	  var curclass = this._class_;
	  do {
	    var fieldMetaInfo = curclass._meta_.fields[fieldName];
	    if(fieldMetaInfo) {
	      return fieldMetaInfo;
	    }
	    if(curclass._meta_._superMeta_) {
	      curclass = curclass._meta_._superMeta_._class_;
	    } else {
	      curclass = null;
	    }
	  } while(curclass);
	  return null;
	};

	LimitedDevice.prototype.toString = function() {
	  return JSON.stringify(this);
	};

	LimitedDevice._meta_ =  {fields:  {}};
	LimitedDevice._meta_._class_ =  LimitedDevice;
	LimitedDevice._meta_.fields["id"] = {};
	LimitedDevice._meta_.fields["id"].type = String;
	LimitedDevice._meta_.fields["name"] = {};
	LimitedDevice._meta_.fields["name"].type = String;
	LimitedDevice._meta_.fields["serial"] = {};
	LimitedDevice._meta_.fields["serial"].type = String;

	//
	// Expose the module.
	//
	if (true) {
	module.exports = LimitedDevice;
	}



/***/ }),
/* 951 */
/***/ (function(module, exports, __webpack_require__) {

	/**
	 * Autogenerated by Avro
	 * 
	 * DO NOT EDIT DIRECTLY
	 */

	var device_RomBuildType = __webpack_require__(389);

	/**
	* @constructor
	* @memberof device
	*/
	var Rom = function() {
	  this._class_ = Rom;
	  this.id = undefined;
	  this.createdAt = undefined;
	  this.version = undefined;
	  this.versionName = undefined;
	  this.description = undefined;
	  this.buildType = undefined;
	  this.isCritical = undefined;
	  this.published = undefined;
	  this.enabled = undefined;
	  this.associationTime = undefined;
	};


	/**
	* Set the field value
	* Unique identifier
	*
	* @memberof device.Rom
	* @param {String} id 
	*/
	Rom.prototype.setId = function(id) {
	  this.id = id;
	};

	/**
	* Get the field value
	* Unique identifier
	* @memberof device.Rom
	* @return {String} 
	*/
	Rom.prototype.getId = function() {
	  return this.id;
	};

	/**
	* Set the field value
	* When the ROM was created
	*
	* @memberof device.Rom
	* @param {Number} createdAt must be a long integer
	*/
	Rom.prototype.setCreatedAt = function(createdAt) {
	  this.createdAt = createdAt;
	};

	/**
	* Get the field value
	* When the ROM was created
	* @memberof device.Rom
	* @return {Number} must be a long integer
	*/
	Rom.prototype.getCreatedAt = function() {
	  return this.createdAt;
	};

	/**
	* Set the field value
	* @memberof device.Rom
	* @param {Number} version must be a long integer
	*/
	Rom.prototype.setVersion = function(version) {
	  this.version = version;
	};

	/**
	* Get the field value
	* @memberof device.Rom
	* @return {Number} must be a long integer
	*/
	Rom.prototype.getVersion = function() {
	  return this.version;
	};

	/**
	* Set the field value
	* @memberof device.Rom
	* @param {String} versionName 
	*/
	Rom.prototype.setVersionName = function(versionName) {
	  this.versionName = versionName;
	};

	/**
	* Get the field value
	* @memberof device.Rom
	* @return {String} 
	*/
	Rom.prototype.getVersionName = function() {
	  return this.versionName;
	};

	/**
	* Set the field value
	* @memberof device.Rom
	* @param {String} description 
	*/
	Rom.prototype.setDescription = function(description) {
	  this.description = description;
	};

	/**
	* Get the field value
	* @memberof device.Rom
	* @return {String} 
	*/
	Rom.prototype.getDescription = function() {
	  return this.description;
	};

	/**
	* Set the field value
	* @memberof device.Rom
	* @param {device.RomBuildType} buildType 
	*/
	Rom.prototype.setBuildType = function(buildType) {
	  this.buildType = buildType;
	};

	/**
	* Get the field value
	* @memberof device.Rom
	* @return {device.RomBuildType} 
	*/
	Rom.prototype.getBuildType = function() {
	  return this.buildType;
	};

	/**
	* Set the field value
	* @memberof device.Rom
	* @param {Boolean} isCritical 
	*/
	Rom.prototype.setIsCritical = function(isCritical) {
	  this.isCritical = isCritical;
	};

	/**
	* Get the field value
	* @memberof device.Rom
	* @return {Boolean} 
	*/
	Rom.prototype.getIsCritical = function() {
	  return this.isCritical;
	};

	/**
	* Set the field value
	* @memberof device.Rom
	* @param {Boolean} published 
	*/
	Rom.prototype.setPublished = function(published) {
	  this.published = published;
	};

	/**
	* Get the field value
	* @memberof device.Rom
	* @return {Boolean} 
	*/
	Rom.prototype.getPublished = function() {
	  return this.published;
	};

	/**
	* Set the field value
	* @memberof device.Rom
	* @param {Boolean} enabled 
	*/
	Rom.prototype.setEnabled = function(enabled) {
	  this.enabled = enabled;
	};

	/**
	* Get the field value
	* @memberof device.Rom
	* @return {Boolean} 
	*/
	Rom.prototype.getEnabled = function() {
	  return this.enabled;
	};

	/**
	* Set the field value
	* When the ROM was associated with a merchant group
	*
	* @memberof device.Rom
	* @param {Number} associationTime must be a long integer
	*/
	Rom.prototype.setAssociationTime = function(associationTime) {
	  this.associationTime = associationTime;
	};

	/**
	* Get the field value
	* When the ROM was associated with a merchant group
	* @memberof device.Rom
	* @return {Number} must be a long integer
	*/
	Rom.prototype.getAssociationTime = function() {
	  return this.associationTime;
	};

	/**
	* @memberof device.Rom
	* @private
	*/
	Rom.prototype.getMetaInfo = function(fieldName) {
	  var curclass = this._class_;
	  do {
	    var fieldMetaInfo = curclass._meta_.fields[fieldName];
	    if(fieldMetaInfo) {
	      return fieldMetaInfo;
	    }
	    if(curclass._meta_._superMeta_) {
	      curclass = curclass._meta_._superMeta_._class_;
	    } else {
	      curclass = null;
	    }
	  } while(curclass);
	  return null;
	};

	Rom.prototype.toString = function() {
	  return JSON.stringify(this);
	};

	Rom._meta_ =  {fields:  {}};
	Rom._meta_._class_ =  Rom;
	Rom._meta_.fields["id"] = {};
	Rom._meta_.fields["id"].type = String;
	Rom._meta_.fields["createdAt"] = {};
	Rom._meta_.fields["createdAt"].type = Number;
	Rom._meta_.fields["version"] = {};
	Rom._meta_.fields["version"].type = Number;
	Rom._meta_.fields["versionName"] = {};
	Rom._meta_.fields["versionName"].type = String;
	Rom._meta_.fields["description"] = {};
	Rom._meta_.fields["description"].type = String;
	Rom._meta_.fields["buildType"] = {};
	Rom._meta_.fields["buildType"].type = device_RomBuildType;
	Rom._meta_.fields["isCritical"] = {};
	Rom._meta_.fields["isCritical"].type = Boolean;
	Rom._meta_.fields["published"] = {};
	Rom._meta_.fields["published"].type = Boolean;
	Rom._meta_.fields["enabled"] = {};
	Rom._meta_.fields["enabled"].type = Boolean;
	Rom._meta_.fields["associationTime"] = {};
	Rom._meta_.fields["associationTime"].type = Number;

	//
	// Expose the module.
	//
	if (true) {
	module.exports = Rom;
	}



/***/ }),
/* 952 */
/***/ (function(module, exports, __webpack_require__) {

	/**
	 * Autogenerated by Avro
	 * 
	 * DO NOT EDIT DIRECTLY
	 */

	var base_Reference = __webpack_require__(5);

	/**
	* @constructor
	* @memberof device
	*/
	var SwapRequestEvent = function() {
	  this._class_ = SwapRequestEvent;
	  this.id = undefined;
	  this.type = undefined;
	  this.serialNumber = undefined;
	  this.createdTime = undefined;
	  this.merchant = undefined;
	};


	/**
	* Set the field value
	* Unique identifier
	*
	* @memberof device.SwapRequestEvent
	* @param {String} id 
	*/
	SwapRequestEvent.prototype.setId = function(id) {
	  this.id = id;
	};

	/**
	* Get the field value
	* Unique identifier
	* @memberof device.SwapRequestEvent
	* @return {String} 
	*/
	SwapRequestEvent.prototype.getId = function() {
	  return this.id;
	};

	/**
	* Set the field value
	* @memberof device.SwapRequestEvent
	* @param {String} type 
	*/
	SwapRequestEvent.prototype.setType = function(type) {
	  this.type = type;
	};

	/**
	* Get the field value
	* @memberof device.SwapRequestEvent
	* @return {String} 
	*/
	SwapRequestEvent.prototype.getType = function() {
	  return this.type;
	};

	/**
	* Set the field value
	* @memberof device.SwapRequestEvent
	* @param {String} serialNumber 
	*/
	SwapRequestEvent.prototype.setSerialNumber = function(serialNumber) {
	  this.serialNumber = serialNumber;
	};

	/**
	* Get the field value
	* @memberof device.SwapRequestEvent
	* @return {String} 
	*/
	SwapRequestEvent.prototype.getSerialNumber = function() {
	  return this.serialNumber;
	};

	/**
	* Set the field value
	* @memberof device.SwapRequestEvent
	* @param {Number} createdTime must be a long integer
	*/
	SwapRequestEvent.prototype.setCreatedTime = function(createdTime) {
	  this.createdTime = createdTime;
	};

	/**
	* Get the field value
	* @memberof device.SwapRequestEvent
	* @return {Number} must be a long integer
	*/
	SwapRequestEvent.prototype.getCreatedTime = function() {
	  return this.createdTime;
	};

	/**
	* Set the field value
	* @memberof device.SwapRequestEvent
	* @param {base.Reference} merchant 
	*/
	SwapRequestEvent.prototype.setMerchant = function(merchant) {
	  this.merchant = merchant;
	};

	/**
	* Get the field value
	* @memberof device.SwapRequestEvent
	* @return {base.Reference} 
	*/
	SwapRequestEvent.prototype.getMerchant = function() {
	  return this.merchant;
	};

	/**
	* @memberof device.SwapRequestEvent
	* @private
	*/
	SwapRequestEvent.prototype.getMetaInfo = function(fieldName) {
	  var curclass = this._class_;
	  do {
	    var fieldMetaInfo = curclass._meta_.fields[fieldName];
	    if(fieldMetaInfo) {
	      return fieldMetaInfo;
	    }
	    if(curclass._meta_._superMeta_) {
	      curclass = curclass._meta_._superMeta_._class_;
	    } else {
	      curclass = null;
	    }
	  } while(curclass);
	  return null;
	};

	SwapRequestEvent.prototype.toString = function() {
	  return JSON.stringify(this);
	};

	SwapRequestEvent._meta_ =  {fields:  {}};
	SwapRequestEvent._meta_._class_ =  SwapRequestEvent;
	SwapRequestEvent._meta_.fields["id"] = {};
	SwapRequestEvent._meta_.fields["id"].type = String;
	SwapRequestEvent._meta_.fields["type"] = {};
	SwapRequestEvent._meta_.fields["type"].type = String;
	SwapRequestEvent._meta_.fields["serialNumber"] = {};
	SwapRequestEvent._meta_.fields["serialNumber"].type = String;
	SwapRequestEvent._meta_.fields["createdTime"] = {};
	SwapRequestEvent._meta_.fields["createdTime"].type = Number;
	SwapRequestEvent._meta_.fields["merchant"] = {};
	SwapRequestEvent._meta_.fields["merchant"].type = base_Reference;

	//
	// Expose the module.
	//
	if (true) {
	module.exports = SwapRequestEvent;
	}



/***/ }),
/* 953 */
/***/ (function(module, exports, __webpack_require__) {

	/**
	 * Autogenerated by Avro
	 * 
	 * DO NOT EDIT DIRECTLY
	 */


	/**
	* @constructor
	* @memberof device
	*/
	var UpdatedDeviceBundle = function() {
	  this._class_ = UpdatedDeviceBundle;
	  this.merchantId = undefined;
	  this.provisionedSerialNumber = undefined;
	  this.equipmentNumber = undefined;
	  this.equipmentCode = undefined;
	  this.bundleId = undefined;
	  this.effectiveTime = undefined;
	};


	/**
	* Set the field value
	* The UUID of the merchant that the equipment is associated with.
	*
	* @memberof device.UpdatedDeviceBundle
	* @param {String} merchantId 
	*/
	UpdatedDeviceBundle.prototype.setMerchantId = function(merchantId) {
	  this.merchantId = merchantId;
	};

	/**
	* Get the field value
	* The UUID of the merchant that the equipment is associated with.
	* @memberof device.UpdatedDeviceBundle
	* @return {String} 
	*/
	UpdatedDeviceBundle.prototype.getMerchantId = function() {
	  return this.merchantId;
	};

	/**
	* Set the field value
	* The serial number of the provisioned device that is being updated.
	*
	* @memberof device.UpdatedDeviceBundle
	* @param {String} provisionedSerialNumber 
	*/
	UpdatedDeviceBundle.prototype.setProvisionedSerialNumber = function(provisionedSerialNumber) {
	  this.provisionedSerialNumber = provisionedSerialNumber;
	};

	/**
	* Get the field value
	* The serial number of the provisioned device that is being updated.
	* @memberof device.UpdatedDeviceBundle
	* @return {String} 
	*/
	UpdatedDeviceBundle.prototype.getProvisionedSerialNumber = function() {
	  return this.provisionedSerialNumber;
	};

	/**
	* Set the field value
	* The equipment number of the boarded equipment that is getting the updated bundle.
	*
	* @memberof device.UpdatedDeviceBundle
	* @param {String} equipmentNumber 
	*/
	UpdatedDeviceBundle.prototype.setEquipmentNumber = function(equipmentNumber) {
	  this.equipmentNumber = equipmentNumber;
	};

	/**
	* Get the field value
	* The equipment number of the boarded equipment that is getting the updated bundle.
	* @memberof device.UpdatedDeviceBundle
	* @return {String} 
	*/
	UpdatedDeviceBundle.prototype.getEquipmentNumber = function() {
	  return this.equipmentNumber;
	};

	/**
	* Set the field value
	* The equipment code of the boarded equipment that is getting the updated bundle.
	*
	* @memberof device.UpdatedDeviceBundle
	* @param {String} equipmentCode 
	*/
	UpdatedDeviceBundle.prototype.setEquipmentCode = function(equipmentCode) {
	  this.equipmentCode = equipmentCode;
	};

	/**
	* Get the field value
	* The equipment code of the boarded equipment that is getting the updated bundle.
	* @memberof device.UpdatedDeviceBundle
	* @return {String} 
	*/
	UpdatedDeviceBundle.prototype.getEquipmentCode = function() {
	  return this.equipmentCode;
	};

	/**
	* Set the field value
	* The UUID of the bundle that is being used to be updated. Null if the bundle is being removed from the equipment.
	*
	* @memberof device.UpdatedDeviceBundle
	* @param {String} bundleId 
	*/
	UpdatedDeviceBundle.prototype.setBundleId = function(bundleId) {
	  this.bundleId = bundleId;
	};

	/**
	* Get the field value
	* The UUID of the bundle that is being used to be updated. Null if the bundle is being removed from the equipment.
	* @memberof device.UpdatedDeviceBundle
	* @return {String} 
	*/
	UpdatedDeviceBundle.prototype.getBundleId = function() {
	  return this.bundleId;
	};

	/**
	* Set the field value
	* The effective time of the bundle being assigned to a provisioned device.
	*
	* @memberof device.UpdatedDeviceBundle
	* @param {Number} effectiveTime must be a long integer
	*/
	UpdatedDeviceBundle.prototype.setEffectiveTime = function(effectiveTime) {
	  this.effectiveTime = effectiveTime;
	};

	/**
	* Get the field value
	* The effective time of the bundle being assigned to a provisioned device.
	* @memberof device.UpdatedDeviceBundle
	* @return {Number} must be a long integer
	*/
	UpdatedDeviceBundle.prototype.getEffectiveTime = function() {
	  return this.effectiveTime;
	};

	/**
	* @memberof device.UpdatedDeviceBundle
	* @private
	*/
	UpdatedDeviceBundle.prototype.getMetaInfo = function(fieldName) {
	  var curclass = this._class_;
	  do {
	    var fieldMetaInfo = curclass._meta_.fields[fieldName];
	    if(fieldMetaInfo) {
	      return fieldMetaInfo;
	    }
	    if(curclass._meta_._superMeta_) {
	      curclass = curclass._meta_._superMeta_._class_;
	    } else {
	      curclass = null;
	    }
	  } while(curclass);
	  return null;
	};

	UpdatedDeviceBundle.prototype.toString = function() {
	  return JSON.stringify(this);
	};

	UpdatedDeviceBundle._meta_ =  {fields:  {}};
	UpdatedDeviceBundle._meta_._class_ =  UpdatedDeviceBundle;
	UpdatedDeviceBundle._meta_.fields["merchantId"] = {};
	UpdatedDeviceBundle._meta_.fields["merchantId"].type = String;
	UpdatedDeviceBundle._meta_.fields["provisionedSerialNumber"] = {};
	UpdatedDeviceBundle._meta_.fields["provisionedSerialNumber"].type = String;
	UpdatedDeviceBundle._meta_.fields["equipmentNumber"] = {};
	UpdatedDeviceBundle._meta_.fields["equipmentNumber"].type = String;
	UpdatedDeviceBundle._meta_.fields["equipmentCode"] = {};
	UpdatedDeviceBundle._meta_.fields["equipmentCode"].type = String;
	UpdatedDeviceBundle._meta_.fields["bundleId"] = {};
	UpdatedDeviceBundle._meta_.fields["bundleId"].type = String;
	UpdatedDeviceBundle._meta_.fields["effectiveTime"] = {};
	UpdatedDeviceBundle._meta_.fields["effectiveTime"].type = Number;

	//
	// Expose the module.
	//
	if (true) {
	module.exports = UpdatedDeviceBundle;
	}



/***/ }),
/* 954 */
/***/ (function(module, exports, __webpack_require__) {

	
	module.exports.device = device;
	/**
	* @namespace device
	*/
	function device() {}


	device.AccessoryRomMetadataUpdateRequest = __webpack_require__(938);
	device.AssociatedDeviceBundle = __webpack_require__(939);
	device.BuildType = __webpack_require__(940);
	device.BundleItem = __webpack_require__(386);
	device.Device = __webpack_require__(941);
	device.DeviceAccessory = __webpack_require__(942);
	device.DeviceAccessoryBuildType = __webpack_require__(387);
	device.DeviceBundle = __webpack_require__(943);
	device.DeviceEventType = __webpack_require__(944);
	device.DeviceProvision = __webpack_require__(945);
	device.DeviceProvisionAssoc = __webpack_require__(946);
	device.DeviceProvisionState = __webpack_require__(388);
	device.DeviceProvisionStatus = __webpack_require__(947);
	device.DeviceRequests = __webpack_require__(948);
	device.DeviceWarranty = __webpack_require__(949);
	device.LimitedDevice = __webpack_require__(950);
	device.Rom = __webpack_require__(951);
	device.RomBuildType = __webpack_require__(389);
	device.SwapRequestEvent = __webpack_require__(952);
	device.UpdatedDeviceBundle = __webpack_require__(953);

	//
	// Expose the module.
	//
	if (true) {
	  module.exports = device;
	}
	    

/***/ }),
/* 955 */
/***/ (function(module, exports, __webpack_require__) {

	/**
	 * Autogenerated by Avro
	 * 
	 * DO NOT EDIT DIRECTLY
	 */


	/**
	* @memberof ecomm
	* @enum {string}
	*/
	var EcommerceIndicator = {
	  ecom : "ecom",
	  moto : "moto",
	  recurring : "recurring"
	};


	//
	// Expose the module.
	//
	if (true) {
	module.exports = EcommerceIndicator;
	}



/***/ }),
/* 956 */
/***/ (function(module, exports, __webpack_require__) {

	/**
	 * Autogenerated by Avro
	 * 
	 * DO NOT EDIT DIRECTLY
	 */

	var employees_EmployeeCardStatus = __webpack_require__(391);
	var base_Reference = __webpack_require__(5);

	/**
	* @constructor
	* @memberof employees
	*/
	var EmployeeCard = function() {
	  this._class_ = EmployeeCard;
	  this.id = undefined;
	  this.merchant = undefined;
	  this.employee = undefined;
	  this.updater = undefined;
	  this.number = undefined;
	  this.status = undefined;
	  this.createdTime = undefined;
	  this.modifiedTime = undefined;
	};


	/**
	* Set the field value
	* Unique identifier
	*
	* @memberof employees.EmployeeCard
	* @param {String} id 
	*/
	EmployeeCard.prototype.setId = function(id) {
	  this.id = id;
	};

	/**
	* Get the field value
	* Unique identifier
	* @memberof employees.EmployeeCard
	* @return {String} 
	*/
	EmployeeCard.prototype.getId = function() {
	  return this.id;
	};

	/**
	* Set the field value
	* The merchant the card belongs to
	*
	* @memberof employees.EmployeeCard
	* @param {base.Reference} merchant 
	*/
	EmployeeCard.prototype.setMerchant = function(merchant) {
	  this.merchant = merchant;
	};

	/**
	* Get the field value
	* The merchant the card belongs to
	* @memberof employees.EmployeeCard
	* @return {base.Reference} 
	*/
	EmployeeCard.prototype.getMerchant = function() {
	  return this.merchant;
	};

	/**
	* Set the field value
	* The employee who the card is currently assigned to
	*
	* @memberof employees.EmployeeCard
	* @param {base.Reference} employee 
	*/
	EmployeeCard.prototype.setEmployee = function(employee) {
	  this.employee = employee;
	};

	/**
	* Get the field value
	* The employee who the card is currently assigned to
	* @memberof employees.EmployeeCard
	* @return {base.Reference} 
	*/
	EmployeeCard.prototype.getEmployee = function() {
	  return this.employee;
	};

	/**
	* Set the field value
	* The employee who last updated the card's state
	*
	* @memberof employees.EmployeeCard
	* @param {base.Reference} updater 
	*/
	EmployeeCard.prototype.setUpdater = function(updater) {
	  this.updater = updater;
	};

	/**
	* Get the field value
	* The employee who last updated the card's state
	* @memberof employees.EmployeeCard
	* @return {base.Reference} 
	*/
	EmployeeCard.prototype.getUpdater = function() {
	  return this.updater;
	};

	/**
	* Set the field value
	* Unique number on the employee card.
	*
	* @memberof employees.EmployeeCard
	* @param {String} number 
	*/
	EmployeeCard.prototype.setNumber = function(number) {
	  this.number = number;
	};

	/**
	* Get the field value
	* Unique number on the employee card.
	* @memberof employees.EmployeeCard
	* @return {String} 
	*/
	EmployeeCard.prototype.getNumber = function() {
	  return this.number;
	};

	/**
	* Set the field value
	* Current status of the employee card
	*
	* @memberof employees.EmployeeCard
	* @param {employees.EmployeeCardStatus} status 
	*/
	EmployeeCard.prototype.setStatus = function(status) {
	  this.status = status;
	};

	/**
	* Get the field value
	* Current status of the employee card
	* @memberof employees.EmployeeCard
	* @return {employees.EmployeeCardStatus} 
	*/
	EmployeeCard.prototype.getStatus = function() {
	  return this.status;
	};

	/**
	* Set the field value
	* Timestamp of when this employee card was created
	*
	* @memberof employees.EmployeeCard
	* @param {Number} createdTime must be a long integer
	*/
	EmployeeCard.prototype.setCreatedTime = function(createdTime) {
	  this.createdTime = createdTime;
	};

	/**
	* Get the field value
	* Timestamp of when this employee card was created
	* @memberof employees.EmployeeCard
	* @return {Number} must be a long integer
	*/
	EmployeeCard.prototype.getCreatedTime = function() {
	  return this.createdTime;
	};

	/**
	* Set the field value
	* Timestamp of when this employee card was last updated
	*
	* @memberof employees.EmployeeCard
	* @param {Number} modifiedTime must be a long integer
	*/
	EmployeeCard.prototype.setModifiedTime = function(modifiedTime) {
	  this.modifiedTime = modifiedTime;
	};

	/**
	* Get the field value
	* Timestamp of when this employee card was last updated
	* @memberof employees.EmployeeCard
	* @return {Number} must be a long integer
	*/
	EmployeeCard.prototype.getModifiedTime = function() {
	  return this.modifiedTime;
	};

	/**
	* @memberof employees.EmployeeCard
	* @private
	*/
	EmployeeCard.prototype.getMetaInfo = function(fieldName) {
	  var curclass = this._class_;
	  do {
	    var fieldMetaInfo = curclass._meta_.fields[fieldName];
	    if(fieldMetaInfo) {
	      return fieldMetaInfo;
	    }
	    if(curclass._meta_._superMeta_) {
	      curclass = curclass._meta_._superMeta_._class_;
	    } else {
	      curclass = null;
	    }
	  } while(curclass);
	  return null;
	};

	EmployeeCard.prototype.toString = function() {
	  return JSON.stringify(this);
	};

	EmployeeCard._meta_ =  {fields:  {}};
	EmployeeCard._meta_._class_ =  EmployeeCard;
	EmployeeCard._meta_.fields["id"] = {};
	EmployeeCard._meta_.fields["id"].type = String;
	EmployeeCard._meta_.fields["merchant"] = {};
	EmployeeCard._meta_.fields["merchant"].type = base_Reference;
	EmployeeCard._meta_.fields["employee"] = {};
	EmployeeCard._meta_.fields["employee"].type = base_Reference;
	EmployeeCard._meta_.fields["updater"] = {};
	EmployeeCard._meta_.fields["updater"].type = base_Reference;
	EmployeeCard._meta_.fields["number"] = {};
	EmployeeCard._meta_.fields["number"].type = String;
	EmployeeCard._meta_.fields["status"] = {};
	EmployeeCard._meta_.fields["status"].type = employees_EmployeeCardStatus;
	EmployeeCard._meta_.fields["createdTime"] = {};
	EmployeeCard._meta_.fields["createdTime"].type = Number;
	EmployeeCard._meta_.fields["modifiedTime"] = {};
	EmployeeCard._meta_.fields["modifiedTime"].type = Number;

	//
	// Expose the module.
	//
	if (true) {
	module.exports = EmployeeCard;
	}



/***/ }),
/* 957 */
/***/ (function(module, exports, __webpack_require__) {

	/**
	 * Autogenerated by Avro
	 * 
	 * DO NOT EDIT DIRECTLY
	 */

	var employees_EmployeePermission = __webpack_require__(392);
	var base_Reference = __webpack_require__(5);
	var employees_Permissions = __webpack_require__(394);

	/**
	* @constructor
	* @memberof employees
	*/
	var PermissionSet = function() {
	  this._class_ = PermissionSet;
	  this.id = undefined;
	  this.name = undefined;
	  this.label = undefined;
	  this.app = undefined;
	  this.employeeDefault = undefined;
	  this.managerDefault = undefined;
	  this.permissions = undefined;
	  this.employeePermissions = undefined;
	  this.module = undefined;
	};


	/**
	* Set the field value
	* Unique identifier
	*
	* @memberof employees.PermissionSet
	* @param {String} id 
	*/
	PermissionSet.prototype.setId = function(id) {
	  this.id = id;
	};

	/**
	* Get the field value
	* Unique identifier
	* @memberof employees.PermissionSet
	* @return {String} 
	*/
	PermissionSet.prototype.getId = function() {
	  return this.id;
	};

	/**
	* Set the field value
	* Key of the permissionSet
	*
	* @memberof employees.PermissionSet
	* @param {String} name 
	*/
	PermissionSet.prototype.setName = function(name) {
	  this.name = name;
	};

	/**
	* Get the field value
	* Key of the permissionSet
	* @memberof employees.PermissionSet
	* @return {String} 
	*/
	PermissionSet.prototype.getName = function() {
	  return this.name;
	};

	/**
	* Set the field value
	* Label of the permissionSet
	*
	* @memberof employees.PermissionSet
	* @param {String} label 
	*/
	PermissionSet.prototype.setLabel = function(label) {
	  this.label = label;
	};

	/**
	* Get the field value
	* Label of the permissionSet
	* @memberof employees.PermissionSet
	* @return {String} 
	*/
	PermissionSet.prototype.getLabel = function() {
	  return this.label;
	};

	/**
	* Set the field value
	* @memberof employees.PermissionSet
	* @param {base.Reference} app 
	*/
	PermissionSet.prototype.setApp = function(app) {
	  this.app = app;
	};

	/**
	* Get the field value
	* @memberof employees.PermissionSet
	* @return {base.Reference} 
	*/
	PermissionSet.prototype.getApp = function() {
	  return this.app;
	};

	/**
	* Set the field value
	* @memberof employees.PermissionSet
	* @param {Boolean} employeeDefault 
	*/
	PermissionSet.prototype.setEmployeeDefault = function(employeeDefault) {
	  this.employeeDefault = employeeDefault;
	};

	/**
	* Get the field value
	* @memberof employees.PermissionSet
	* @return {Boolean} 
	*/
	PermissionSet.prototype.getEmployeeDefault = function() {
	  return this.employeeDefault;
	};

	/**
	* Set the field value
	* @memberof employees.PermissionSet
	* @param {Boolean} managerDefault 
	*/
	PermissionSet.prototype.setManagerDefault = function(managerDefault) {
	  this.managerDefault = managerDefault;
	};

	/**
	* Get the field value
	* @memberof employees.PermissionSet
	* @return {Boolean} 
	*/
	PermissionSet.prototype.getManagerDefault = function() {
	  return this.managerDefault;
	};

	/**
	* Set the field value
	* Bitmap of permissions
	*
	* @memberof employees.PermissionSet
	* @param {employees.Permissions} permissions 
	*/
	PermissionSet.prototype.setPermissions = function(permissions) {
	  this.permissions = permissions;
	};

	/**
	* Get the field value
	* Bitmap of permissions
	* @memberof employees.PermissionSet
	* @return {employees.Permissions} 
	*/
	PermissionSet.prototype.getPermissions = function() {
	  return this.permissions;
	};

	/**
	* Set the field value
	* @memberof employees.PermissionSet
	* @param {Array.<employees.EmployeePermission>} employeePermissions An array of 
	*/
	PermissionSet.prototype.setEmployeePermissions = function(employeePermissions) {
	  this.employeePermissions = employeePermissions;
	};

	/**
	* Get the field value
	* @memberof employees.PermissionSet
	* @return {Array.<employees.EmployeePermission>} An array of 
	*/
	PermissionSet.prototype.getEmployeePermissions = function() {
	  return this.employeePermissions;
	};

	/**
	* Set the field value
	* The module associated with this permission set (if any)
	*
	* @memberof employees.PermissionSet
	* @param {base.Reference} module 
	*/
	PermissionSet.prototype.setModule = function(module) {
	  this.module = module;
	};

	/**
	* Get the field value
	* The module associated with this permission set (if any)
	* @memberof employees.PermissionSet
	* @return {base.Reference} 
	*/
	PermissionSet.prototype.getModule = function() {
	  return this.module;
	};

	/**
	* @memberof employees.PermissionSet
	* @private
	*/
	PermissionSet.prototype.getMetaInfo = function(fieldName) {
	  var curclass = this._class_;
	  do {
	    var fieldMetaInfo = curclass._meta_.fields[fieldName];
	    if(fieldMetaInfo) {
	      return fieldMetaInfo;
	    }
	    if(curclass._meta_._superMeta_) {
	      curclass = curclass._meta_._superMeta_._class_;
	    } else {
	      curclass = null;
	    }
	  } while(curclass);
	  return null;
	};

	PermissionSet.prototype.toString = function() {
	  return JSON.stringify(this);
	};

	PermissionSet._meta_ =  {fields:  {}};
	PermissionSet._meta_._class_ =  PermissionSet;
	PermissionSet._meta_.fields["id"] = {};
	PermissionSet._meta_.fields["id"].type = String;
	PermissionSet._meta_.fields["name"] = {};
	PermissionSet._meta_.fields["name"].type = String;
	PermissionSet._meta_.fields["label"] = {};
	PermissionSet._meta_.fields["label"].type = String;
	PermissionSet._meta_.fields["app"] = {};
	PermissionSet._meta_.fields["app"].type = base_Reference;
	PermissionSet._meta_.fields["employeeDefault"] = {};
	PermissionSet._meta_.fields["employeeDefault"].type = Boolean;
	PermissionSet._meta_.fields["managerDefault"] = {};
	PermissionSet._meta_.fields["managerDefault"].type = Boolean;
	PermissionSet._meta_.fields["permissions"] = {};
	PermissionSet._meta_.fields["permissions"].type = employees_Permissions;
	PermissionSet._meta_.fields["employeePermissions"] = {};
	PermissionSet._meta_.fields["employeePermissions"].type = Array;
	PermissionSet._meta_.fields["employeePermissions"].elementType = employees_EmployeePermission;
	PermissionSet._meta_.fields["module"] = {};
	PermissionSet._meta_.fields["module"].type = base_Reference;

	//
	// Expose the module.
	//
	if (true) {
	module.exports = PermissionSet;
	}



/***/ }),
/* 958 */
/***/ (function(module, exports, __webpack_require__) {

	/**
	 * Autogenerated by Avro
	 * 
	 * DO NOT EDIT DIRECTLY
	 */

	var base_Reference = __webpack_require__(5);

	/**
	* @constructor
	* @memberof employees
	*/
	var PermissionSetRole = function() {
	  this._class_ = PermissionSetRole;
	  this.id = undefined;
	  this.role = undefined;
	  this.permissionSet = undefined;
	};


	/**
	* Set the field value
	* Not a normal Clover ID
	*
	* @memberof employees.PermissionSetRole
	* @param {String} id 
	*/
	PermissionSetRole.prototype.setId = function(id) {
	  this.id = id;
	};

	/**
	* Get the field value
	* Not a normal Clover ID
	* @memberof employees.PermissionSetRole
	* @return {String} 
	*/
	PermissionSetRole.prototype.getId = function() {
	  return this.id;
	};

	/**
	* Set the field value
	* The role
	*
	* @memberof employees.PermissionSetRole
	* @param {base.Reference} role 
	*/
	PermissionSetRole.prototype.setRole = function(role) {
	  this.role = role;
	};

	/**
	* Get the field value
	* The role
	* @memberof employees.PermissionSetRole
	* @return {base.Reference} 
	*/
	PermissionSetRole.prototype.getRole = function() {
	  return this.role;
	};

	/**
	* Set the field value
	* The role
	*
	* @memberof employees.PermissionSetRole
	* @param {base.Reference} permissionSet 
	*/
	PermissionSetRole.prototype.setPermissionSet = function(permissionSet) {
	  this.permissionSet = permissionSet;
	};

	/**
	* Get the field value
	* The role
	* @memberof employees.PermissionSetRole
	* @return {base.Reference} 
	*/
	PermissionSetRole.prototype.getPermissionSet = function() {
	  return this.permissionSet;
	};

	/**
	* @memberof employees.PermissionSetRole
	* @private
	*/
	PermissionSetRole.prototype.getMetaInfo = function(fieldName) {
	  var curclass = this._class_;
	  do {
	    var fieldMetaInfo = curclass._meta_.fields[fieldName];
	    if(fieldMetaInfo) {
	      return fieldMetaInfo;
	    }
	    if(curclass._meta_._superMeta_) {
	      curclass = curclass._meta_._superMeta_._class_;
	    } else {
	      curclass = null;
	    }
	  } while(curclass);
	  return null;
	};

	PermissionSetRole.prototype.toString = function() {
	  return JSON.stringify(this);
	};

	PermissionSetRole._meta_ =  {fields:  {}};
	PermissionSetRole._meta_._class_ =  PermissionSetRole;
	PermissionSetRole._meta_.fields["id"] = {};
	PermissionSetRole._meta_.fields["id"].type = String;
	PermissionSetRole._meta_.fields["role"] = {};
	PermissionSetRole._meta_.fields["role"].type = base_Reference;
	PermissionSetRole._meta_.fields["permissionSet"] = {};
	PermissionSetRole._meta_.fields["permissionSet"].type = base_Reference;

	//
	// Expose the module.
	//
	if (true) {
	module.exports = PermissionSetRole;
	}



/***/ }),
/* 959 */
/***/ (function(module, exports, __webpack_require__) {

	/**
	 * Autogenerated by Avro
	 * 
	 * DO NOT EDIT DIRECTLY
	 */

	var employees_AccountRole = __webpack_require__(237);

	/**
	* @constructor
	* @memberof employees
	*/
	var Role = function() {
	  this._class_ = Role;
	  this.id = undefined;
	  this.name = undefined;
	  this.systemRole = undefined;
	};


	/**
	* Set the field value
	* Unique identifier
	*
	* @memberof employees.Role
	* @param {String} id 
	*/
	Role.prototype.setId = function(id) {
	  this.id = id;
	};

	/**
	* Get the field value
	* Unique identifier
	* @memberof employees.Role
	* @return {String} 
	*/
	Role.prototype.getId = function() {
	  return this.id;
	};

	/**
	* Set the field value
	* Full name of the role
	*
	* @memberof employees.Role
	* @param {String} name 
	*/
	Role.prototype.setName = function(name) {
	  this.name = name;
	};

	/**
	* Get the field value
	* Full name of the role
	* @memberof employees.Role
	* @return {String} 
	*/
	Role.prototype.getName = function() {
	  return this.name;
	};

	/**
	* Set the field value
	* Base System Role
	*
	* @memberof employees.Role
	* @param {employees.AccountRole} systemRole 
	*/
	Role.prototype.setSystemRole = function(systemRole) {
	  this.systemRole = systemRole;
	};

	/**
	* Get the field value
	* Base System Role
	* @memberof employees.Role
	* @return {employees.AccountRole} 
	*/
	Role.prototype.getSystemRole = function() {
	  return this.systemRole;
	};

	/**
	* @memberof employees.Role
	* @private
	*/
	Role.prototype.getMetaInfo = function(fieldName) {
	  var curclass = this._class_;
	  do {
	    var fieldMetaInfo = curclass._meta_.fields[fieldName];
	    if(fieldMetaInfo) {
	      return fieldMetaInfo;
	    }
	    if(curclass._meta_._superMeta_) {
	      curclass = curclass._meta_._superMeta_._class_;
	    } else {
	      curclass = null;
	    }
	  } while(curclass);
	  return null;
	};

	Role.prototype.toString = function() {
	  return JSON.stringify(this);
	};

	Role._meta_ =  {fields:  {}};
	Role._meta_._class_ =  Role;
	Role._meta_.fields["id"] = {};
	Role._meta_.fields["id"].type = String;
	Role._meta_.fields["name"] = {};
	Role._meta_.fields["name"].type = String;
	Role._meta_.fields["systemRole"] = {};
	Role._meta_.fields["systemRole"].type = employees_AccountRole;

	//
	// Expose the module.
	//
	if (true) {
	module.exports = Role;
	}



/***/ }),
/* 960 */
/***/ (function(module, exports, __webpack_require__) {

	/**
	 * Autogenerated by Avro
	 * 
	 * DO NOT EDIT DIRECTLY
	 */

	var employees_Employee = __webpack_require__(390);

	/**
	* @constructor
	* @memberof employees
	*/
	var Shift = function() {
	  this._class_ = Shift;
	  this.id = undefined;
	  this.employee = undefined;
	  this.cashTipsCollected = undefined;
	  this.serverBanking = undefined;
	  this.inTime = undefined;
	  this.overrideInTime = undefined;
	  this.overrideInEmployee = undefined;
	  this.outTime = undefined;
	  this.overrideOutTime = undefined;
	  this.overrideOutEmployee = undefined;
	};


	/**
	* Set the field value
	* Unique identifier
	*
	* @memberof employees.Shift
	* @param {String} id 
	*/
	Shift.prototype.setId = function(id) {
	  this.id = id;
	};

	/**
	* Get the field value
	* Unique identifier
	* @memberof employees.Shift
	* @return {String} 
	*/
	Shift.prototype.getId = function() {
	  return this.id;
	};

	/**
	* Set the field value
	* The employee that worked this shift
	*
	* @memberof employees.Shift
	* @param {employees.Employee} employee 
	*/
	Shift.prototype.setEmployee = function(employee) {
	  this.employee = employee;
	};

	/**
	* Get the field value
	* The employee that worked this shift
	* @memberof employees.Shift
	* @return {employees.Employee} 
	*/
	Shift.prototype.getEmployee = function() {
	  return this.employee;
	};

	/**
	* Set the field value
	* Amount of cash tips collected
	*
	* @memberof employees.Shift
	* @param {Number} cashTipsCollected must be a long integer
	*/
	Shift.prototype.setCashTipsCollected = function(cashTipsCollected) {
	  this.cashTipsCollected = cashTipsCollected;
	};

	/**
	* Get the field value
	* Amount of cash tips collected
	* @memberof employees.Shift
	* @return {Number} must be a long integer
	*/
	Shift.prototype.getCashTipsCollected = function() {
	  return this.cashTipsCollected;
	};

	/**
	* Set the field value
	* Whether the employee used server banking
	*
	* @memberof employees.Shift
	* @param {Boolean} serverBanking 
	*/
	Shift.prototype.setServerBanking = function(serverBanking) {
	  this.serverBanking = serverBanking;
	};

	/**
	* Get the field value
	* Whether the employee used server banking
	* @memberof employees.Shift
	* @return {Boolean} 
	*/
	Shift.prototype.getServerBanking = function() {
	  return this.serverBanking;
	};

	/**
	* Set the field value
	* Clock in time
	*
	* @memberof employees.Shift
	* @param {Number} inTime must be a long integer
	*/
	Shift.prototype.setInTime = function(inTime) {
	  this.inTime = inTime;
	};

	/**
	* Get the field value
	* Clock in time
	* @memberof employees.Shift
	* @return {Number} must be a long integer
	*/
	Shift.prototype.getInTime = function() {
	  return this.inTime;
	};

	/**
	* Set the field value
	* Overridden clock in time
	*
	* @memberof employees.Shift
	* @param {Number} overrideInTime must be a long integer
	*/
	Shift.prototype.setOverrideInTime = function(overrideInTime) {
	  this.overrideInTime = overrideInTime;
	};

	/**
	* Get the field value
	* Overridden clock in time
	* @memberof employees.Shift
	* @return {Number} must be a long integer
	*/
	Shift.prototype.getOverrideInTime = function() {
	  return this.overrideInTime;
	};

	/**
	* Set the field value
	* The employee who overrode the clock in time
	*
	* @memberof employees.Shift
	* @param {employees.Employee} overrideInEmployee 
	*/
	Shift.prototype.setOverrideInEmployee = function(overrideInEmployee) {
	  this.overrideInEmployee = overrideInEmployee;
	};

	/**
	* Get the field value
	* The employee who overrode the clock in time
	* @memberof employees.Shift
	* @return {employees.Employee} 
	*/
	Shift.prototype.getOverrideInEmployee = function() {
	  return this.overrideInEmployee;
	};

	/**
	* Set the field value
	* Clock out time
	*
	* @memberof employees.Shift
	* @param {Number} outTime must be a long integer
	*/
	Shift.prototype.setOutTime = function(outTime) {
	  this.outTime = outTime;
	};

	/**
	* Get the field value
	* Clock out time
	* @memberof employees.Shift
	* @return {Number} must be a long integer
	*/
	Shift.prototype.getOutTime = function() {
	  return this.outTime;
	};

	/**
	* Set the field value
	* Overridden clock out time
	*
	* @memberof employees.Shift
	* @param {Number} overrideOutTime must be a long integer
	*/
	Shift.prototype.setOverrideOutTime = function(overrideOutTime) {
	  this.overrideOutTime = overrideOutTime;
	};

	/**
	* Get the field value
	* Overridden clock out time
	* @memberof employees.Shift
	* @return {Number} must be a long integer
	*/
	Shift.prototype.getOverrideOutTime = function() {
	  return this.overrideOutTime;
	};

	/**
	* Set the field value
	* The employee who overrode the clock out time
	*
	* @memberof employees.Shift
	* @param {employees.Employee} overrideOutEmployee 
	*/
	Shift.prototype.setOverrideOutEmployee = function(overrideOutEmployee) {
	  this.overrideOutEmployee = overrideOutEmployee;
	};

	/**
	* Get the field value
	* The employee who overrode the clock out time
	* @memberof employees.Shift
	* @return {employees.Employee} 
	*/
	Shift.prototype.getOverrideOutEmployee = function() {
	  return this.overrideOutEmployee;
	};

	/**
	* @memberof employees.Shift
	* @private
	*/
	Shift.prototype.getMetaInfo = function(fieldName) {
	  var curclass = this._class_;
	  do {
	    var fieldMetaInfo = curclass._meta_.fields[fieldName];
	    if(fieldMetaInfo) {
	      return fieldMetaInfo;
	    }
	    if(curclass._meta_._superMeta_) {
	      curclass = curclass._meta_._superMeta_._class_;
	    } else {
	      curclass = null;
	    }
	  } while(curclass);
	  return null;
	};

	Shift.prototype.toString = function() {
	  return JSON.stringify(this);
	};

	Shift._meta_ =  {fields:  {}};
	Shift._meta_._class_ =  Shift;
	Shift._meta_.fields["id"] = {};
	Shift._meta_.fields["id"].type = String;
	Shift._meta_.fields["employee"] = {};
	Shift._meta_.fields["employee"].type = employees_Employee;
	Shift._meta_.fields["cashTipsCollected"] = {};
	Shift._meta_.fields["cashTipsCollected"].type = Number;
	Shift._meta_.fields["serverBanking"] = {};
	Shift._meta_.fields["serverBanking"].type = Boolean;
	Shift._meta_.fields["inTime"] = {};
	Shift._meta_.fields["inTime"].type = Number;
	Shift._meta_.fields["overrideInTime"] = {};
	Shift._meta_.fields["overrideInTime"].type = Number;
	Shift._meta_.fields["overrideInEmployee"] = {};
	Shift._meta_.fields["overrideInEmployee"].type = employees_Employee;
	Shift._meta_.fields["outTime"] = {};
	Shift._meta_.fields["outTime"].type = Number;
	Shift._meta_.fields["overrideOutTime"] = {};
	Shift._meta_.fields["overrideOutTime"].type = Number;
	Shift._meta_.fields["overrideOutEmployee"] = {};
	Shift._meta_.fields["overrideOutEmployee"].type = employees_Employee;

	//
	// Expose the module.
	//
	if (true) {
	module.exports = Shift;
	}



/***/ }),
/* 961 */
/***/ (function(module, exports, __webpack_require__) {

	
	module.exports.employees = employees;
	/**
	* @namespace employees
	*/
	function employees() {}


	employees.AccountRole = __webpack_require__(237);
	employees.Employee = __webpack_require__(390);
	employees.EmployeeCard = __webpack_require__(956);
	employees.EmployeeCardStatus = __webpack_require__(391);
	employees.EmployeePermission = __webpack_require__(392);
	employees.Permission = __webpack_require__(393);
	employees.PermissionSet = __webpack_require__(957);
	employees.PermissionSetRole = __webpack_require__(958);
	employees.Permissions = __webpack_require__(394);
	employees.Role = __webpack_require__(959);
	employees.Shift = __webpack_require__(960);

	//
	// Expose the module.
	//
	if (true) {
	  module.exports = employees;
	}
	    

/***/ }),
/* 962 */
/***/ (function(module, exports, __webpack_require__) {

	
	module.exports.hours = hours;
	/**
	* @namespace hours
	*/
	function hours() {}


	hours.HourRange = __webpack_require__(395);
	hours.HoursSet = __webpack_require__(396);
	hours.Reference = __webpack_require__(397);
	hours.ReferenceType = __webpack_require__(398);

	//
	// Expose the module.
	//
	if (true) {
	  module.exports = hours;
	}
	    

/***/ }),
/* 963 */
/***/ (function(module, exports, __webpack_require__) {

	/**
	 * Autogenerated by Avro
	 * 
	 * DO NOT EDIT DIRECTLY
	 */

	var base_Reference = __webpack_require__(5);
	var inventory_Option = __webpack_require__(240);

	/**
	* @constructor
	* @memberof inventory
	*/
	var Attribute = function() {
	  this._class_ = Attribute;
	  this.id = undefined;
	  this.name = undefined;
	  this.itemGroup = undefined;
	  this.options = undefined;
	};


	/**
	* Set the field value
	* Unique identifier
	*
	* @memberof inventory.Attribute
	* @param {String} id 
	*/
	Attribute.prototype.setId = function(id) {
	  this.id = id;
	};

	/**
	* Get the field value
	* Unique identifier
	* @memberof inventory.Attribute
	* @return {String} 
	*/
	Attribute.prototype.getId = function() {
	  return this.id;
	};

	/**
	* Set the field value
	* Name of this attribute
	*
	* @memberof inventory.Attribute
	* @param {String} name 
	*/
	Attribute.prototype.setName = function(name) {
	  this.name = name;
	};

	/**
	* Get the field value
	* Name of this attribute
	* @memberof inventory.Attribute
	* @return {String} 
	*/
	Attribute.prototype.getName = function() {
	  return this.name;
	};

	/**
	* Set the field value
	* The item group this attribute belongs to
	*
	* @memberof inventory.Attribute
	* @param {base.Reference} itemGroup 
	*/
	Attribute.prototype.setItemGroup = function(itemGroup) {
	  this.itemGroup = itemGroup;
	};

	/**
	* Get the field value
	* The item group this attribute belongs to
	* @memberof inventory.Attribute
	* @return {base.Reference} 
	*/
	Attribute.prototype.getItemGroup = function() {
	  return this.itemGroup;
	};

	/**
	* Set the field value
	* Options associated with this attribute
	*
	* @memberof inventory.Attribute
	* @param {Array.<inventory.Option>} options An array of 
	*/
	Attribute.prototype.setOptions = function(options) {
	  this.options = options;
	};

	/**
	* Get the field value
	* Options associated with this attribute
	* @memberof inventory.Attribute
	* @return {Array.<inventory.Option>} An array of 
	*/
	Attribute.prototype.getOptions = function() {
	  return this.options;
	};

	/**
	* @memberof inventory.Attribute
	* @private
	*/
	Attribute.prototype.getMetaInfo = function(fieldName) {
	  var curclass = this._class_;
	  do {
	    var fieldMetaInfo = curclass._meta_.fields[fieldName];
	    if(fieldMetaInfo) {
	      return fieldMetaInfo;
	    }
	    if(curclass._meta_._superMeta_) {
	      curclass = curclass._meta_._superMeta_._class_;
	    } else {
	      curclass = null;
	    }
	  } while(curclass);
	  return null;
	};

	Attribute.prototype.toString = function() {
	  return JSON.stringify(this);
	};

	Attribute._meta_ =  {fields:  {}};
	Attribute._meta_._class_ =  Attribute;
	Attribute._meta_.fields["id"] = {};
	Attribute._meta_.fields["id"].type = String;
	Attribute._meta_.fields["name"] = {};
	Attribute._meta_.fields["name"].type = String;
	Attribute._meta_.fields["itemGroup"] = {};
	Attribute._meta_.fields["itemGroup"].type = base_Reference;
	Attribute._meta_.fields["options"] = {};
	Attribute._meta_.fields["options"].type = Array;
	Attribute._meta_.fields["options"].elementType = inventory_Option;

	//
	// Expose the module.
	//
	if (true) {
	module.exports = Attribute;
	}



/***/ }),
/* 964 */
/***/ (function(module, exports, __webpack_require__) {

	/**
	 * Autogenerated by Avro
	 * 
	 * DO NOT EDIT DIRECTLY
	 */

	var inventory_Item = __webpack_require__(101);
	var inventory_Category = __webpack_require__(153);

	/**
	* @constructor
	* @memberof inventory
	*/
	var CategoryItem = function() {
	  this._class_ = CategoryItem;
	  this.item = undefined;
	  this.category = undefined;
	};


	/**
	* Set the field value
	* @memberof inventory.CategoryItem
	* @param {inventory.Item} item 
	*/
	CategoryItem.prototype.setItem = function(item) {
	  this.item = item;
	};

	/**
	* Get the field value
	* @memberof inventory.CategoryItem
	* @return {inventory.Item} 
	*/
	CategoryItem.prototype.getItem = function() {
	  return this.item;
	};

	/**
	* Set the field value
	* @memberof inventory.CategoryItem
	* @param {inventory.Category} category 
	*/
	CategoryItem.prototype.setCategory = function(category) {
	  this.category = category;
	};

	/**
	* Get the field value
	* @memberof inventory.CategoryItem
	* @return {inventory.Category} 
	*/
	CategoryItem.prototype.getCategory = function() {
	  return this.category;
	};

	/**
	* @memberof inventory.CategoryItem
	* @private
	*/
	CategoryItem.prototype.getMetaInfo = function(fieldName) {
	  var curclass = this._class_;
	  do {
	    var fieldMetaInfo = curclass._meta_.fields[fieldName];
	    if(fieldMetaInfo) {
	      return fieldMetaInfo;
	    }
	    if(curclass._meta_._superMeta_) {
	      curclass = curclass._meta_._superMeta_._class_;
	    } else {
	      curclass = null;
	    }
	  } while(curclass);
	  return null;
	};

	CategoryItem.prototype.toString = function() {
	  return JSON.stringify(this);
	};

	CategoryItem._meta_ =  {fields:  {}};
	CategoryItem._meta_._class_ =  CategoryItem;
	CategoryItem._meta_.fields["item"] = {};
	CategoryItem._meta_.fields["item"].type = inventory_Item;
	CategoryItem._meta_.fields["category"] = {};
	CategoryItem._meta_.fields["category"].type = inventory_Category;

	//
	// Expose the module.
	//
	if (true) {
	module.exports = CategoryItem;
	}



/***/ }),
/* 965 */
/***/ (function(module, exports, __webpack_require__) {

	/**
	 * Autogenerated by Avro
	 * 
	 * DO NOT EDIT DIRECTLY
	 */

	var base_Reference = __webpack_require__(5);

	/**
	* @constructor
	* @memberof inventory
	*/
	var DataAssociation = function() {
	  this._class_ = DataAssociation;
	  this.primary = undefined;
	  this.secondary = undefined;
	  this.payload = undefined;
	};


	/**
	* Set the field value
	* The primary object in an association, e.g., 'Item' in an 'Item - Tax Rate' association
	*
	* @memberof inventory.DataAssociation
	* @param {base.Reference} primary 
	*/
	DataAssociation.prototype.setPrimary = function(primary) {
	  this.primary = primary;
	};

	/**
	* Get the field value
	* The primary object in an association, e.g., 'Item' in an 'Item - Tax Rate' association
	* @memberof inventory.DataAssociation
	* @return {base.Reference} 
	*/
	DataAssociation.prototype.getPrimary = function() {
	  return this.primary;
	};

	/**
	* Set the field value
	* The secondary object in an association, e.g., 'Tax Rate' in an 'Item - Tax Rate' association
	*
	* @memberof inventory.DataAssociation
	* @param {base.Reference} secondary 
	*/
	DataAssociation.prototype.setSecondary = function(secondary) {
	  this.secondary = secondary;
	};

	/**
	* Get the field value
	* The secondary object in an association, e.g., 'Tax Rate' in an 'Item - Tax Rate' association
	* @memberof inventory.DataAssociation
	* @return {base.Reference} 
	*/
	DataAssociation.prototype.getSecondary = function() {
	  return this.secondary;
	};

	/**
	* Set the field value
	* Serialized data related to the propagation, e.g. an update map.
	*
	* @memberof inventory.DataAssociation
	* @param {String} payload 
	*/
	DataAssociation.prototype.setPayload = function(payload) {
	  this.payload = payload;
	};

	/**
	* Get the field value
	* Serialized data related to the propagation, e.g. an update map.
	* @memberof inventory.DataAssociation
	* @return {String} 
	*/
	DataAssociation.prototype.getPayload = function() {
	  return this.payload;
	};

	/**
	* @memberof inventory.DataAssociation
	* @private
	*/
	DataAssociation.prototype.getMetaInfo = function(fieldName) {
	  var curclass = this._class_;
	  do {
	    var fieldMetaInfo = curclass._meta_.fields[fieldName];
	    if(fieldMetaInfo) {
	      return fieldMetaInfo;
	    }
	    if(curclass._meta_._superMeta_) {
	      curclass = curclass._meta_._superMeta_._class_;
	    } else {
	      curclass = null;
	    }
	  } while(curclass);
	  return null;
	};

	DataAssociation.prototype.toString = function() {
	  return JSON.stringify(this);
	};

	DataAssociation._meta_ =  {fields:  {}};
	DataAssociation._meta_._class_ =  DataAssociation;
	DataAssociation._meta_.fields["primary"] = {};
	DataAssociation._meta_.fields["primary"].type = base_Reference;
	DataAssociation._meta_.fields["secondary"] = {};
	DataAssociation._meta_.fields["secondary"].type = base_Reference;
	DataAssociation._meta_.fields["payload"] = {};
	DataAssociation._meta_.fields["payload"].type = String;

	//
	// Expose the module.
	//
	if (true) {
	module.exports = DataAssociation;
	}



/***/ }),
/* 966 */
/***/ (function(module, exports, __webpack_require__) {

	/**
	 * Autogenerated by Avro
	 * 
	 * DO NOT EDIT DIRECTLY
	 */

	var base_Reference = __webpack_require__(5);

	/**
	* @constructor
	* @memberof inventory
	*/
	var Discount = function() {
	  this._class_ = Discount;
	  this.id = undefined;
	  this.merchantRef = undefined;
	  this.name = undefined;
	  this.amount = undefined;
	  this.percentage = undefined;
	};


	/**
	* Set the field value
	* Unique identifier
	*
	* @memberof inventory.Discount
	* @param {String} id 
	*/
	Discount.prototype.setId = function(id) {
	  this.id = id;
	};

	/**
	* Get the field value
	* Unique identifier
	* @memberof inventory.Discount
	* @return {String} 
	*/
	Discount.prototype.getId = function() {
	  return this.id;
	};

	/**
	* Set the field value
	* @memberof inventory.Discount
	* @param {base.Reference} merchantRef 
	*/
	Discount.prototype.setMerchantRef = function(merchantRef) {
	  this.merchantRef = merchantRef;
	};

	/**
	* Get the field value
	* @memberof inventory.Discount
	* @return {base.Reference} 
	*/
	Discount.prototype.getMerchantRef = function() {
	  return this.merchantRef;
	};

	/**
	* Set the field value
	* Name of the discount
	*
	* @memberof inventory.Discount
	* @param {String} name 
	*/
	Discount.prototype.setName = function(name) {
	  this.name = name;
	};

	/**
	* Get the field value
	* Name of the discount
	* @memberof inventory.Discount
	* @return {String} 
	*/
	Discount.prototype.getName = function() {
	  return this.name;
	};

	/**
	* Set the field value
	* Discount amount in fraction of currency unit (e.g. cents) based on currency fraction digits supported
	*
	* @memberof inventory.Discount
	* @param {Null|Number} amount must be a long integer
	*/
	Discount.prototype.setAmount = function(amount) {
	  this.amount = amount;
	};

	/**
	* Get the field value
	* Discount amount in fraction of currency unit (e.g. cents) based on currency fraction digits supported
	* @memberof inventory.Discount
	* @return {Null|Number} must be a long integer
	*/
	Discount.prototype.getAmount = function() {
	  return this.amount;
	};

	/**
	* Set the field value
	* Discount amount in percent
	*
	* @memberof inventory.Discount
	* @param {Null|Number} percentage must be a long integer
	*/
	Discount.prototype.setPercentage = function(percentage) {
	  this.percentage = percentage;
	};

	/**
	* Get the field value
	* Discount amount in percent
	* @memberof inventory.Discount
	* @return {Null|Number} must be a long integer
	*/
	Discount.prototype.getPercentage = function() {
	  return this.percentage;
	};

	/**
	* @memberof inventory.Discount
	* @private
	*/
	Discount.prototype.getMetaInfo = function(fieldName) {
	  var curclass = this._class_;
	  do {
	    var fieldMetaInfo = curclass._meta_.fields[fieldName];
	    if(fieldMetaInfo) {
	      return fieldMetaInfo;
	    }
	    if(curclass._meta_._superMeta_) {
	      curclass = curclass._meta_._superMeta_._class_;
	    } else {
	      curclass = null;
	    }
	  } while(curclass);
	  return null;
	};

	Discount.prototype.toString = function() {
	  return JSON.stringify(this);
	};

	Discount._meta_ =  {fields:  {}};
	Discount._meta_._class_ =  Discount;
	Discount._meta_.fields["id"] = {};
	Discount._meta_.fields["id"].type = String;
	Discount._meta_.fields["merchantRef"] = {};
	Discount._meta_.fields["merchantRef"].type = base_Reference;
	Discount._meta_.fields["name"] = {};
	Discount._meta_.fields["name"].type = String;
	Discount._meta_.fields["amount"] = {};
	Discount._meta_.fields["amount"].type = Number;
	Discount._meta_.fields["percentage"] = {};
	Discount._meta_.fields["percentage"].type = Number;

	//
	// Expose the module.
	//
	if (true) {
	module.exports = Discount;
	}



/***/ }),
/* 967 */
/***/ (function(module, exports, __webpack_require__) {

	/**
	 * Autogenerated by Avro
	 * 
	 * DO NOT EDIT DIRECTLY
	 */

	var inventory_Item = __webpack_require__(101);

	/**
	* @constructor
	* @memberof inventory
	*/
	var InventoryItems = function() {
	  this._class_ = InventoryItems;
	  this.items = undefined;
	};


	/**
	* Set the field value
	* Array of inventory items
	*
	* @memberof inventory.InventoryItems
	* @param {Array.<inventory.Item>} items An array of 
	*/
	InventoryItems.prototype.setItems = function(items) {
	  this.items = items;
	};

	/**
	* Get the field value
	* Array of inventory items
	* @memberof inventory.InventoryItems
	* @return {Array.<inventory.Item>} An array of 
	*/
	InventoryItems.prototype.getItems = function() {
	  return this.items;
	};

	/**
	* @memberof inventory.InventoryItems
	* @private
	*/
	InventoryItems.prototype.getMetaInfo = function(fieldName) {
	  var curclass = this._class_;
	  do {
	    var fieldMetaInfo = curclass._meta_.fields[fieldName];
	    if(fieldMetaInfo) {
	      return fieldMetaInfo;
	    }
	    if(curclass._meta_._superMeta_) {
	      curclass = curclass._meta_._superMeta_._class_;
	    } else {
	      curclass = null;
	    }
	  } while(curclass);
	  return null;
	};

	InventoryItems.prototype.toString = function() {
	  return JSON.stringify(this);
	};

	InventoryItems._meta_ =  {fields:  {}};
	InventoryItems._meta_._class_ =  InventoryItems;
	InventoryItems._meta_.fields["items"] = {};
	InventoryItems._meta_.fields["items"].type = Array;
	InventoryItems._meta_.fields["items"].elementType = inventory_Item;

	//
	// Expose the module.
	//
	if (true) {
	module.exports = InventoryItems;
	}



/***/ }),
/* 968 */
/***/ (function(module, exports, __webpack_require__) {

	/**
	 * Autogenerated by Avro
	 * 
	 * DO NOT EDIT DIRECTLY
	 */

	var base_Reference = __webpack_require__(5);

	/**
	* @constructor
	* @memberof inventory
	*/
	var ItemGroup = function() {
	  this._class_ = ItemGroup;
	  this.id = undefined;
	  this.name = undefined;
	  this.items = undefined;
	  this.attributes = undefined;
	};


	/**
	* Set the field value
	* Unique identifier
	*
	* @memberof inventory.ItemGroup
	* @param {String} id 
	*/
	ItemGroup.prototype.setId = function(id) {
	  this.id = id;
	};

	/**
	* Get the field value
	* Unique identifier
	* @memberof inventory.ItemGroup
	* @return {String} 
	*/
	ItemGroup.prototype.getId = function() {
	  return this.id;
	};

	/**
	* Set the field value
	* Name of the option
	*
	* @memberof inventory.ItemGroup
	* @param {String} name 
	*/
	ItemGroup.prototype.setName = function(name) {
	  this.name = name;
	};

	/**
	* Get the field value
	* Name of the option
	* @memberof inventory.ItemGroup
	* @return {String} 
	*/
	ItemGroup.prototype.getName = function() {
	  return this.name;
	};

	/**
	* Set the field value
	* Items that are members of this group
	*
	* @memberof inventory.ItemGroup
	* @param {Array.<base.Reference>} items An array of 
	*/
	ItemGroup.prototype.setItems = function(items) {
	  this.items = items;
	};

	/**
	* Get the field value
	* Items that are members of this group
	* @memberof inventory.ItemGroup
	* @return {Array.<base.Reference>} An array of 
	*/
	ItemGroup.prototype.getItems = function() {
	  return this.items;
	};

	/**
	* Set the field value
	* Attributes that belong to this group
	*
	* @memberof inventory.ItemGroup
	* @param {Array.<base.Reference>} attributes An array of 
	*/
	ItemGroup.prototype.setAttributes = function(attributes) {
	  this.attributes = attributes;
	};

	/**
	* Get the field value
	* Attributes that belong to this group
	* @memberof inventory.ItemGroup
	* @return {Array.<base.Reference>} An array of 
	*/
	ItemGroup.prototype.getAttributes = function() {
	  return this.attributes;
	};

	/**
	* @memberof inventory.ItemGroup
	* @private
	*/
	ItemGroup.prototype.getMetaInfo = function(fieldName) {
	  var curclass = this._class_;
	  do {
	    var fieldMetaInfo = curclass._meta_.fields[fieldName];
	    if(fieldMetaInfo) {
	      return fieldMetaInfo;
	    }
	    if(curclass._meta_._superMeta_) {
	      curclass = curclass._meta_._superMeta_._class_;
	    } else {
	      curclass = null;
	    }
	  } while(curclass);
	  return null;
	};

	ItemGroup.prototype.toString = function() {
	  return JSON.stringify(this);
	};

	ItemGroup._meta_ =  {fields:  {}};
	ItemGroup._meta_._class_ =  ItemGroup;
	ItemGroup._meta_.fields["id"] = {};
	ItemGroup._meta_.fields["id"].type = String;
	ItemGroup._meta_.fields["name"] = {};
	ItemGroup._meta_.fields["name"].type = String;
	ItemGroup._meta_.fields["items"] = {};
	ItemGroup._meta_.fields["items"].type = Array;
	ItemGroup._meta_.fields["items"].elementType = base_Reference;
	ItemGroup._meta_.fields["attributes"] = {};
	ItemGroup._meta_.fields["attributes"].type = Array;
	ItemGroup._meta_.fields["attributes"].elementType = base_Reference;

	//
	// Expose the module.
	//
	if (true) {
	module.exports = ItemGroup;
	}



/***/ }),
/* 969 */
/***/ (function(module, exports, __webpack_require__) {

	/**
	 * Autogenerated by Avro
	 * 
	 * DO NOT EDIT DIRECTLY
	 */

	var inventory_ModifierGroup = __webpack_require__(154);
	var inventory_Item = __webpack_require__(101);

	/**
	* @constructor
	* @memberof inventory
	*/
	var ItemModifierGroup = function() {
	  this._class_ = ItemModifierGroup;
	  this.item = undefined;
	  this.modifierGroup = undefined;
	};


	/**
	* Set the field value
	* @memberof inventory.ItemModifierGroup
	* @param {inventory.Item} item 
	*/
	ItemModifierGroup.prototype.setItem = function(item) {
	  this.item = item;
	};

	/**
	* Get the field value
	* @memberof inventory.ItemModifierGroup
	* @return {inventory.Item} 
	*/
	ItemModifierGroup.prototype.getItem = function() {
	  return this.item;
	};

	/**
	* Set the field value
	* @memberof inventory.ItemModifierGroup
	* @param {inventory.ModifierGroup} modifierGroup 
	*/
	ItemModifierGroup.prototype.setModifierGroup = function(modifierGroup) {
	  this.modifierGroup = modifierGroup;
	};

	/**
	* Get the field value
	* @memberof inventory.ItemModifierGroup
	* @return {inventory.ModifierGroup} 
	*/
	ItemModifierGroup.prototype.getModifierGroup = function() {
	  return this.modifierGroup;
	};

	/**
	* @memberof inventory.ItemModifierGroup
	* @private
	*/
	ItemModifierGroup.prototype.getMetaInfo = function(fieldName) {
	  var curclass = this._class_;
	  do {
	    var fieldMetaInfo = curclass._meta_.fields[fieldName];
	    if(fieldMetaInfo) {
	      return fieldMetaInfo;
	    }
	    if(curclass._meta_._superMeta_) {
	      curclass = curclass._meta_._superMeta_._class_;
	    } else {
	      curclass = null;
	    }
	  } while(curclass);
	  return null;
	};

	ItemModifierGroup.prototype.toString = function() {
	  return JSON.stringify(this);
	};

	ItemModifierGroup._meta_ =  {fields:  {}};
	ItemModifierGroup._meta_._class_ =  ItemModifierGroup;
	ItemModifierGroup._meta_.fields["item"] = {};
	ItemModifierGroup._meta_.fields["item"].type = inventory_Item;
	ItemModifierGroup._meta_.fields["modifierGroup"] = {};
	ItemModifierGroup._meta_.fields["modifierGroup"].type = inventory_ModifierGroup;

	//
	// Expose the module.
	//
	if (true) {
	module.exports = ItemModifierGroup;
	}



/***/ }),
/* 970 */
/***/ (function(module, exports, __webpack_require__) {

	/**
	 * Autogenerated by Avro
	 * 
	 * DO NOT EDIT DIRECTLY
	 */


	/**
	* @constructor
	* @memberof inventory
	*/
	var MenuBulkUpdate = function() {
	  this._class_ = MenuBulkUpdate;
	  this.enabled = undefined;
	  this.uuids = undefined;
	};


	/**
	* Set the field value
	* Set value to the enabled column in menu item, layout, modifier, or modifier group table in the bulk update action
	*
	* @memberof inventory.MenuBulkUpdate
	* @param {Boolean} enabled 
	*/
	MenuBulkUpdate.prototype.setEnabled = function(enabled) {
	  this.enabled = enabled;
	};

	/**
	* Get the field value
	* Set value to the enabled column in menu item, layout, modifier, or modifier group table in the bulk update action
	* @memberof inventory.MenuBulkUpdate
	* @return {Boolean} 
	*/
	MenuBulkUpdate.prototype.getEnabled = function() {
	  return this.enabled;
	};

	/**
	* Set the field value
	* @memberof inventory.MenuBulkUpdate
	* @param {Array.<String>} uuids An array of 
	*/
	MenuBulkUpdate.prototype.setUuids = function(uuids) {
	  this.uuids = uuids;
	};

	/**
	* Get the field value
	* @memberof inventory.MenuBulkUpdate
	* @return {Array.<String>} An array of 
	*/
	MenuBulkUpdate.prototype.getUuids = function() {
	  return this.uuids;
	};

	/**
	* @memberof inventory.MenuBulkUpdate
	* @private
	*/
	MenuBulkUpdate.prototype.getMetaInfo = function(fieldName) {
	  var curclass = this._class_;
	  do {
	    var fieldMetaInfo = curclass._meta_.fields[fieldName];
	    if(fieldMetaInfo) {
	      return fieldMetaInfo;
	    }
	    if(curclass._meta_._superMeta_) {
	      curclass = curclass._meta_._superMeta_._class_;
	    } else {
	      curclass = null;
	    }
	  } while(curclass);
	  return null;
	};

	MenuBulkUpdate.prototype.toString = function() {
	  return JSON.stringify(this);
	};

	MenuBulkUpdate._meta_ =  {fields:  {}};
	MenuBulkUpdate._meta_._class_ =  MenuBulkUpdate;
	MenuBulkUpdate._meta_.fields["enabled"] = {};
	MenuBulkUpdate._meta_.fields["enabled"].type = Boolean;
	MenuBulkUpdate._meta_.fields["uuids"] = {};
	MenuBulkUpdate._meta_.fields["uuids"].type = Array;

	//
	// Expose the module.
	//
	if (true) {
	module.exports = MenuBulkUpdate;
	}



/***/ }),
/* 971 */
/***/ (function(module, exports, __webpack_require__) {

	/**
	 * Autogenerated by Avro
	 * 
	 * DO NOT EDIT DIRECTLY
	 */

	var inventory_ModifierGroup = __webpack_require__(154);

	/**
	* @constructor
	* @memberof inventory
	*/
	var ModifierGroupArray = function() {
	  this._class_ = ModifierGroupArray;
	  this.modifierGroups = undefined;
	};


	/**
	* Set the field value
	* @memberof inventory.ModifierGroupArray
	* @param {Array.<inventory.ModifierGroup>} modifierGroups An array of 
	*/
	ModifierGroupArray.prototype.setModifierGroups = function(modifierGroups) {
	  this.modifierGroups = modifierGroups;
	};

	/**
	* Get the field value
	* @memberof inventory.ModifierGroupArray
	* @return {Array.<inventory.ModifierGroup>} An array of 
	*/
	ModifierGroupArray.prototype.getModifierGroups = function() {
	  return this.modifierGroups;
	};

	/**
	* @memberof inventory.ModifierGroupArray
	* @private
	*/
	ModifierGroupArray.prototype.getMetaInfo = function(fieldName) {
	  var curclass = this._class_;
	  do {
	    var fieldMetaInfo = curclass._meta_.fields[fieldName];
	    if(fieldMetaInfo) {
	      return fieldMetaInfo;
	    }
	    if(curclass._meta_._superMeta_) {
	      curclass = curclass._meta_._superMeta_._class_;
	    } else {
	      curclass = null;
	    }
	  } while(curclass);
	  return null;
	};

	ModifierGroupArray.prototype.toString = function() {
	  return JSON.stringify(this);
	};

	ModifierGroupArray._meta_ =  {fields:  {}};
	ModifierGroupArray._meta_._class_ =  ModifierGroupArray;
	ModifierGroupArray._meta_.fields["modifierGroups"] = {};
	ModifierGroupArray._meta_.fields["modifierGroups"].type = Array;
	ModifierGroupArray._meta_.fields["modifierGroups"].elementType = inventory_ModifierGroup;

	//
	// Expose the module.
	//
	if (true) {
	module.exports = ModifierGroupArray;
	}



/***/ }),
/* 972 */
/***/ (function(module, exports, __webpack_require__) {

	/**
	 * Autogenerated by Avro
	 * 
	 * DO NOT EDIT DIRECTLY
	 */

	var base_Reference = __webpack_require__(5);

	/** This class represents the association between an item and an option */
	/**
	* @constructor
	* @memberof inventory
	*/
	var OptionItem = function() {
	  this._class_ = OptionItem;
	  this.option = undefined;
	  this.item = undefined;
	};


	/**
	* Set the field value
	* Reference to an option
	*
	* @memberof inventory.OptionItem
	* @param {Null|base.Reference} option 
	*/
	OptionItem.prototype.setOption = function(option) {
	  this.option = option;
	};

	/**
	* Get the field value
	* Reference to an option
	* @memberof inventory.OptionItem
	* @return {Null|base.Reference} 
	*/
	OptionItem.prototype.getOption = function() {
	  return this.option;
	};

	/**
	* Set the field value
	* Reference to an item
	*
	* @memberof inventory.OptionItem
	* @param {Null|base.Reference} item 
	*/
	OptionItem.prototype.setItem = function(item) {
	  this.item = item;
	};

	/**
	* Get the field value
	* Reference to an item
	* @memberof inventory.OptionItem
	* @return {Null|base.Reference} 
	*/
	OptionItem.prototype.getItem = function() {
	  return this.item;
	};

	/**
	* @memberof inventory.OptionItem
	* @private
	*/
	OptionItem.prototype.getMetaInfo = function(fieldName) {
	  var curclass = this._class_;
	  do {
	    var fieldMetaInfo = curclass._meta_.fields[fieldName];
	    if(fieldMetaInfo) {
	      return fieldMetaInfo;
	    }
	    if(curclass._meta_._superMeta_) {
	      curclass = curclass._meta_._superMeta_._class_;
	    } else {
	      curclass = null;
	    }
	  } while(curclass);
	  return null;
	};

	OptionItem.prototype.toString = function() {
	  return JSON.stringify(this);
	};

	OptionItem._meta_ =  {fields:  {}};
	OptionItem._meta_._class_ =  OptionItem;
	OptionItem._meta_.fields["option"] = {};
	OptionItem._meta_.fields["option"].type = base_Reference;
	OptionItem._meta_.fields["item"] = {};
	OptionItem._meta_.fields["item"].type = base_Reference;

	//
	// Expose the module.
	//
	if (true) {
	module.exports = OptionItem;
	}



/***/ }),
/* 973 */
/***/ (function(module, exports, __webpack_require__) {

	/**
	 * Autogenerated by Avro
	 * 
	 * DO NOT EDIT DIRECTLY
	 */


	/**
	* @constructor
	* @memberof inventory
	*/
	var SortOrder = function() {
	  this._class_ = SortOrder;
	  this.ids = undefined;
	};


	/**
	* Set the field value
	* @memberof inventory.SortOrder
	* @param {Array.<String>} ids An array of 
	*/
	SortOrder.prototype.setIds = function(ids) {
	  this.ids = ids;
	};

	/**
	* Get the field value
	* @memberof inventory.SortOrder
	* @return {Array.<String>} An array of 
	*/
	SortOrder.prototype.getIds = function() {
	  return this.ids;
	};

	/**
	* @memberof inventory.SortOrder
	* @private
	*/
	SortOrder.prototype.getMetaInfo = function(fieldName) {
	  var curclass = this._class_;
	  do {
	    var fieldMetaInfo = curclass._meta_.fields[fieldName];
	    if(fieldMetaInfo) {
	      return fieldMetaInfo;
	    }
	    if(curclass._meta_._superMeta_) {
	      curclass = curclass._meta_._superMeta_._class_;
	    } else {
	      curclass = null;
	    }
	  } while(curclass);
	  return null;
	};

	SortOrder.prototype.toString = function() {
	  return JSON.stringify(this);
	};

	SortOrder._meta_ =  {fields:  {}};
	SortOrder._meta_._class_ =  SortOrder;
	SortOrder._meta_.fields["ids"] = {};
	SortOrder._meta_.fields["ids"].type = Array;

	//
	// Expose the module.
	//
	if (true) {
	module.exports = SortOrder;
	}



/***/ }),
/* 974 */
/***/ (function(module, exports, __webpack_require__) {

	/**
	 * Autogenerated by Avro
	 * 
	 * DO NOT EDIT DIRECTLY
	 */

	var inventory_Item = __webpack_require__(101);
	var inventory_Tag = __webpack_require__(155);

	/**
	* @constructor
	* @memberof inventory
	*/
	var TagItem = function() {
	  this._class_ = TagItem;
	  this.tag = undefined;
	  this.item = undefined;
	};


	/**
	* Set the field value
	* @memberof inventory.TagItem
	* @param {inventory.Tag} tag 
	*/
	TagItem.prototype.setTag = function(tag) {
	  this.tag = tag;
	};

	/**
	* Get the field value
	* @memberof inventory.TagItem
	* @return {inventory.Tag} 
	*/
	TagItem.prototype.getTag = function() {
	  return this.tag;
	};

	/**
	* Set the field value
	* @memberof inventory.TagItem
	* @param {inventory.Item} item 
	*/
	TagItem.prototype.setItem = function(item) {
	  this.item = item;
	};

	/**
	* Get the field value
	* @memberof inventory.TagItem
	* @return {inventory.Item} 
	*/
	TagItem.prototype.getItem = function() {
	  return this.item;
	};

	/**
	* @memberof inventory.TagItem
	* @private
	*/
	TagItem.prototype.getMetaInfo = function(fieldName) {
	  var curclass = this._class_;
	  do {
	    var fieldMetaInfo = curclass._meta_.fields[fieldName];
	    if(fieldMetaInfo) {
	      return fieldMetaInfo;
	    }
	    if(curclass._meta_._superMeta_) {
	      curclass = curclass._meta_._superMeta_._class_;
	    } else {
	      curclass = null;
	    }
	  } while(curclass);
	  return null;
	};

	TagItem.prototype.toString = function() {
	  return JSON.stringify(this);
	};

	TagItem._meta_ =  {fields:  {}};
	TagItem._meta_._class_ =  TagItem;
	TagItem._meta_.fields["tag"] = {};
	TagItem._meta_.fields["tag"].type = inventory_Tag;
	TagItem._meta_.fields["item"] = {};
	TagItem._meta_.fields["item"].type = inventory_Item;

	//
	// Expose the module.
	//
	if (true) {
	module.exports = TagItem;
	}



/***/ }),
/* 975 */
/***/ (function(module, exports, __webpack_require__) {

	/**
	 * Autogenerated by Avro
	 * 
	 * DO NOT EDIT DIRECTLY
	 */

	var printer_Printer = __webpack_require__(88);
	var inventory_Tag = __webpack_require__(155);

	/**
	* @constructor
	* @memberof inventory
	*/
	var TagPrinter = function() {
	  this._class_ = TagPrinter;
	  this.tag = undefined;
	  this.printer = undefined;
	};


	/**
	* Set the field value
	* @memberof inventory.TagPrinter
	* @param {inventory.Tag} tag 
	*/
	TagPrinter.prototype.setTag = function(tag) {
	  this.tag = tag;
	};

	/**
	* Get the field value
	* @memberof inventory.TagPrinter
	* @return {inventory.Tag} 
	*/
	TagPrinter.prototype.getTag = function() {
	  return this.tag;
	};

	/**
	* Set the field value
	* @memberof inventory.TagPrinter
	* @param {printer.Printer} printer 
	*/
	TagPrinter.prototype.setPrinter = function(printer) {
	  this.printer = printer;
	};

	/**
	* Get the field value
	* @memberof inventory.TagPrinter
	* @return {printer.Printer} 
	*/
	TagPrinter.prototype.getPrinter = function() {
	  return this.printer;
	};

	/**
	* @memberof inventory.TagPrinter
	* @private
	*/
	TagPrinter.prototype.getMetaInfo = function(fieldName) {
	  var curclass = this._class_;
	  do {
	    var fieldMetaInfo = curclass._meta_.fields[fieldName];
	    if(fieldMetaInfo) {
	      return fieldMetaInfo;
	    }
	    if(curclass._meta_._superMeta_) {
	      curclass = curclass._meta_._superMeta_._class_;
	    } else {
	      curclass = null;
	    }
	  } while(curclass);
	  return null;
	};

	TagPrinter.prototype.toString = function() {
	  return JSON.stringify(this);
	};

	TagPrinter._meta_ =  {fields:  {}};
	TagPrinter._meta_._class_ =  TagPrinter;
	TagPrinter._meta_.fields["tag"] = {};
	TagPrinter._meta_.fields["tag"].type = inventory_Tag;
	TagPrinter._meta_.fields["printer"] = {};
	TagPrinter._meta_.fields["printer"].type = printer_Printer;

	//
	// Expose the module.
	//
	if (true) {
	module.exports = TagPrinter;
	}



/***/ }),
/* 976 */
/***/ (function(module, exports, __webpack_require__) {

	/**
	 * Autogenerated by Avro
	 * 
	 * DO NOT EDIT DIRECTLY
	 */

	var inventory_TaxRate = __webpack_require__(117);
	var inventory_Item = __webpack_require__(101);

	/**
	* @constructor
	* @memberof inventory
	*/
	var TaxRateItem = function() {
	  this._class_ = TaxRateItem;
	  this.taxRate = undefined;
	  this.item = undefined;
	};


	/**
	* Set the field value
	* @memberof inventory.TaxRateItem
	* @param {inventory.TaxRate} taxRate 
	*/
	TaxRateItem.prototype.setTaxRate = function(taxRate) {
	  this.taxRate = taxRate;
	};

	/**
	* Get the field value
	* @memberof inventory.TaxRateItem
	* @return {inventory.TaxRate} 
	*/
	TaxRateItem.prototype.getTaxRate = function() {
	  return this.taxRate;
	};

	/**
	* Set the field value
	* @memberof inventory.TaxRateItem
	* @param {inventory.Item} item 
	*/
	TaxRateItem.prototype.setItem = function(item) {
	  this.item = item;
	};

	/**
	* Get the field value
	* @memberof inventory.TaxRateItem
	* @return {inventory.Item} 
	*/
	TaxRateItem.prototype.getItem = function() {
	  return this.item;
	};

	/**
	* @memberof inventory.TaxRateItem
	* @private
	*/
	TaxRateItem.prototype.getMetaInfo = function(fieldName) {
	  var curclass = this._class_;
	  do {
	    var fieldMetaInfo = curclass._meta_.fields[fieldName];
	    if(fieldMetaInfo) {
	      return fieldMetaInfo;
	    }
	    if(curclass._meta_._superMeta_) {
	      curclass = curclass._meta_._superMeta_._class_;
	    } else {
	      curclass = null;
	    }
	  } while(curclass);
	  return null;
	};

	TaxRateItem.prototype.toString = function() {
	  return JSON.stringify(this);
	};

	TaxRateItem._meta_ =  {fields:  {}};
	TaxRateItem._meta_._class_ =  TaxRateItem;
	TaxRateItem._meta_.fields["taxRate"] = {};
	TaxRateItem._meta_.fields["taxRate"].type = inventory_TaxRate;
	TaxRateItem._meta_.fields["item"] = {};
	TaxRateItem._meta_.fields["item"].type = inventory_Item;

	//
	// Expose the module.
	//
	if (true) {
	module.exports = TaxRateItem;
	}



/***/ }),
/* 977 */
/***/ (function(module, exports, __webpack_require__) {

	
	module.exports.inventory = inventory;
	/**
	* @namespace inventory
	*/
	function inventory() {}


	inventory.Attribute = __webpack_require__(963);
	inventory.Category = __webpack_require__(153);
	inventory.CategoryItem = __webpack_require__(964);
	inventory.DataAssociation = __webpack_require__(965);
	inventory.Discount = __webpack_require__(966);
	inventory.InventoryItems = __webpack_require__(967);
	inventory.Item = __webpack_require__(101);
	inventory.ItemGroup = __webpack_require__(968);
	inventory.ItemModifierGroup = __webpack_require__(969);
	inventory.ItemStock = __webpack_require__(399);
	inventory.MenuBulkUpdate = __webpack_require__(970);
	inventory.MenuItem = __webpack_require__(238);
	inventory.MenuModifier = __webpack_require__(400);
	inventory.MenuModifierGroup = __webpack_require__(401);
	inventory.MenuSection = __webpack_require__(402);
	inventory.Modifier = __webpack_require__(239);
	inventory.ModifierGroup = __webpack_require__(154);
	inventory.ModifierGroupArray = __webpack_require__(971);
	inventory.Option = __webpack_require__(240);
	inventory.OptionItem = __webpack_require__(972);
	inventory.PriceType = __webpack_require__(403);
	inventory.SortOrder = __webpack_require__(973);
	inventory.Tag = __webpack_require__(155);
	inventory.TagItem = __webpack_require__(974);
	inventory.TagPrinter = __webpack_require__(975);
	inventory.TaxRate = __webpack_require__(117);
	inventory.TaxRateItem = __webpack_require__(976);
	inventory.TaxType = __webpack_require__(404);

	//
	// Expose the module.
	//
	if (true) {
	  module.exports = inventory;
	}
	    

/***/ }),
/* 978 */
/***/ (function(module, exports, __webpack_require__) {

	/**
	 * Autogenerated by Avro
	 * 
	 * DO NOT EDIT DIRECTLY
	 */

	var loyalty_CustomerProvidedDataResponseType = __webpack_require__(405);

	/** Response from the loyalty app after receiving the payload */
	/**
	* @constructor
	* @memberof loyalty
	*/
	var CustomerProvidedDataResponse = function() {
	  this._class_ = CustomerProvidedDataResponse;
	  this.responseType = undefined;
	};


	/**
	* Set the field value
	* @memberof loyalty.CustomerProvidedDataResponse
	* @param {loyalty.CustomerProvidedDataResponseType} responseType 
	*/
	CustomerProvidedDataResponse.prototype.setResponseType = function(responseType) {
	  this.responseType = responseType;
	};

	/**
	* Get the field value
	* @memberof loyalty.CustomerProvidedDataResponse
	* @return {loyalty.CustomerProvidedDataResponseType} 
	*/
	CustomerProvidedDataResponse.prototype.getResponseType = function() {
	  return this.responseType;
	};

	/**
	* @memberof loyalty.CustomerProvidedDataResponse
	* @private
	*/
	CustomerProvidedDataResponse.prototype.getMetaInfo = function(fieldName) {
	  var curclass = this._class_;
	  do {
	    var fieldMetaInfo = curclass._meta_.fields[fieldName];
	    if(fieldMetaInfo) {
	      return fieldMetaInfo;
	    }
	    if(curclass._meta_._superMeta_) {
	      curclass = curclass._meta_._superMeta_._class_;
	    } else {
	      curclass = null;
	    }
	  } while(curclass);
	  return null;
	};

	CustomerProvidedDataResponse.prototype.toString = function() {
	  return JSON.stringify(this);
	};

	CustomerProvidedDataResponse._meta_ =  {fields:  {}};
	CustomerProvidedDataResponse._meta_._class_ =  CustomerProvidedDataResponse;
	CustomerProvidedDataResponse._meta_.fields["responseType"] = {};
	CustomerProvidedDataResponse._meta_.fields["responseType"].type = loyalty_CustomerProvidedDataResponseType;

	//
	// Expose the module.
	//
	if (true) {
	module.exports = CustomerProvidedDataResponse;
	}



/***/ }),
/* 979 */
/***/ (function(module, exports, __webpack_require__) {

	
	module.exports.loyalty = loyalty;
	/**
	* @namespace loyalty
	*/
	function loyalty() {}


	loyalty.CustomerProvidedDataResponse = __webpack_require__(978);
	loyalty.CustomerProvidedDataResponseType = __webpack_require__(405);
	loyalty.LoyaltyDataConfig = __webpack_require__(241);

	//
	// Expose the module.
	//
	if (true) {
	  module.exports = loyalty;
	}
	    

/***/ }),
/* 980 */
/***/ (function(module, exports, __webpack_require__) {

	
	module.exports.merchant = merchant;
	/**
	* @namespace merchant
	*/
	function merchant() {}


	merchant.TipSuggestion = __webpack_require__(118);

	//
	// Expose the module.
	//
	if (true) {
	  module.exports = merchant;
	}
	    

/***/ }),
/* 981 */
/***/ (function(module, exports, __webpack_require__) {

	/**
	 * Autogenerated by Avro
	 * 
	 * DO NOT EDIT DIRECTLY
	 */

	var onlineorder_ProviderId = __webpack_require__(984);
	var onlineorder_OnlineOrderCustomer = __webpack_require__(982);
	var onlineorder_Reason = __webpack_require__(985);
	var base_Reference = __webpack_require__(5);
	var onlineorder_OrderState = __webpack_require__(983);

	/**
	* @constructor
	* @memberof onlineorder
	*/
	var OnlineOrder = function() {
	  this._class_ = OnlineOrder;
	  this.id = undefined;
	  this.merchantRef = undefined;
	  this.onlineOrderId = undefined;
	  this.receiptId = undefined;
	  this.provider = undefined;
	  this.providerId = undefined;
	  this.orderState = undefined;
	  this.onlineOrderCustomer = undefined;
	  this.deliverTime = undefined;
	  this.scheduledPickupTime = undefined;
	  this.reason = undefined;
	  this.createdTime = undefined;
	  this.modifiedTime = undefined;
	  this.deletedTime = undefined;
	};


	/**
	* Set the field value
	* order id
	*
	* @memberof onlineorder.OnlineOrder
	* @param {String} id 
	*/
	OnlineOrder.prototype.setId = function(id) {
	  this.id = id;
	};

	/**
	* Get the field value
	* order id
	* @memberof onlineorder.OnlineOrder
	* @return {String} 
	*/
	OnlineOrder.prototype.getId = function() {
	  return this.id;
	};

	/**
	* Set the field value
	* Reference to the merchant that created the order
	*
	* @memberof onlineorder.OnlineOrder
	* @param {base.Reference} merchantRef 
	*/
	OnlineOrder.prototype.setMerchantRef = function(merchantRef) {
	  this.merchantRef = merchantRef;
	};

	/**
	* Get the field value
	* Reference to the merchant that created the order
	* @memberof onlineorder.OnlineOrder
	* @return {base.Reference} 
	*/
	OnlineOrder.prototype.getMerchantRef = function() {
	  return this.merchantRef;
	};

	/**
	* Set the field value
	* Online Order id
	*
	* @memberof onlineorder.OnlineOrder
	* @param {String} onlineOrderId 
	*/
	OnlineOrder.prototype.setOnlineOrderId = function(onlineOrderId) {
	  this.onlineOrderId = onlineOrderId;
	};

	/**
	* Get the field value
	* Online Order id
	* @memberof onlineorder.OnlineOrder
	* @return {String} 
	*/
	OnlineOrder.prototype.getOnlineOrderId = function() {
	  return this.onlineOrderId;
	};

	/**
	* Set the field value
	* Receipt id
	*
	* @memberof onlineorder.OnlineOrder
	* @param {String} receiptId 
	*/
	OnlineOrder.prototype.setReceiptId = function(receiptId) {
	  this.receiptId = receiptId;
	};

	/**
	* Get the field value
	* Receipt id
	* @memberof onlineorder.OnlineOrder
	* @return {String} 
	*/
	OnlineOrder.prototype.getReceiptId = function() {
	  return this.receiptId;
	};

	/**
	* Set the field value
	* online order provider
	*
	* @memberof onlineorder.OnlineOrder
	* @param {base.Reference} provider 
	*/
	OnlineOrder.prototype.setProvider = function(provider) {
	  this.provider = provider;
	};

	/**
	* Get the field value
	* online order provider
	* @memberof onlineorder.OnlineOrder
	* @return {base.Reference} 
	*/
	OnlineOrder.prototype.getProvider = function() {
	  return this.provider;
	};

	/**
	* Set the field value
	* online order provider, to be compatible with the data digestion on client side in Oct apps cut, will be removed later.
	*
	* @memberof onlineorder.OnlineOrder
	* @param {Null|onlineorder.ProviderId} providerId 
	*/
	OnlineOrder.prototype.setProviderId = function(providerId) {
	  this.providerId = providerId;
	};

	/**
	* Get the field value
	* online order provider, to be compatible with the data digestion on client side in Oct apps cut, will be removed later.
	* @memberof onlineorder.OnlineOrder
	* @return {Null|onlineorder.ProviderId} 
	*/
	OnlineOrder.prototype.getProviderId = function() {
	  return this.providerId;
	};

	/**
	* Set the field value
	* online order status
	*
	* @memberof onlineorder.OnlineOrder
	* @param {Null|onlineorder.OrderState} orderState 
	*/
	OnlineOrder.prototype.setOrderState = function(orderState) {
	  this.orderState = orderState;
	};

	/**
	* Get the field value
	* online order status
	* @memberof onlineorder.OnlineOrder
	* @return {Null|onlineorder.OrderState} 
	*/
	OnlineOrder.prototype.getOrderState = function() {
	  return this.orderState;
	};

	/**
	* Set the field value
	* the customer who submitted the order request from provider
	*
	* @memberof onlineorder.OnlineOrder
	* @param {Null|onlineorder.OnlineOrderCustomer} onlineOrderCustomer 
	*/
	OnlineOrder.prototype.setOnlineOrderCustomer = function(onlineOrderCustomer) {
	  this.onlineOrderCustomer = onlineOrderCustomer;
	};

	/**
	* Get the field value
	* the customer who submitted the order request from provider
	* @memberof onlineorder.OnlineOrder
	* @return {Null|onlineorder.OnlineOrderCustomer} 
	*/
	OnlineOrder.prototype.getOnlineOrderCustomer = function() {
	  return this.onlineOrderCustomer;
	};

	/**
	* Set the field value
	* The timestamp the order gets delivered
	*
	* @memberof onlineorder.OnlineOrder
	* @param {Number} deliverTime must be a long integer
	*/
	OnlineOrder.prototype.setDeliverTime = function(deliverTime) {
	  this.deliverTime = deliverTime;
	};

	/**
	* Get the field value
	* The timestamp the order gets delivered
	* @memberof onlineorder.OnlineOrder
	* @return {Number} must be a long integer
	*/
	OnlineOrder.prototype.getDeliverTime = function() {
	  return this.deliverTime;
	};

	/**
	* Set the field value
	* The timestamp the order is scheduled to be picked up
	*
	* @memberof onlineorder.OnlineOrder
	* @param {Number} scheduledPickupTime must be a long integer
	*/
	OnlineOrder.prototype.setScheduledPickupTime = function(scheduledPickupTime) {
	  this.scheduledPickupTime = scheduledPickupTime;
	};

	/**
	* Get the field value
	* The timestamp the order is scheduled to be picked up
	* @memberof onlineorder.OnlineOrder
	* @return {Number} must be a long integer
	*/
	OnlineOrder.prototype.getScheduledPickupTime = function() {
	  return this.scheduledPickupTime;
	};

	/**
	* Set the field value
	* The reason the online order gets rejected or cancelled
	*
	* @memberof onlineorder.OnlineOrder
	* @param {Null|onlineorder.Reason} reason 
	*/
	OnlineOrder.prototype.setReason = function(reason) {
	  this.reason = reason;
	};

	/**
	* Get the field value
	* The reason the online order gets rejected or cancelled
	* @memberof onlineorder.OnlineOrder
	* @return {Null|onlineorder.Reason} 
	*/
	OnlineOrder.prototype.getReason = function() {
	  return this.reason;
	};

	/**
	* Set the field value
	* Timestamp when the online ordering item was created
	*
	* @memberof onlineorder.OnlineOrder
	* @param {Number} createdTime must be a long integer
	*/
	OnlineOrder.prototype.setCreatedTime = function(createdTime) {
	  this.createdTime = createdTime;
	};

	/**
	* Get the field value
	* Timestamp when the online ordering item was created
	* @memberof onlineorder.OnlineOrder
	* @return {Number} must be a long integer
	*/
	OnlineOrder.prototype.getCreatedTime = function() {
	  return this.createdTime;
	};

	/**
	* Set the field value
	* Timestamp when the online ordering item was last modified
	*
	* @memberof onlineorder.OnlineOrder
	* @param {Number} modifiedTime must be a long integer
	*/
	OnlineOrder.prototype.setModifiedTime = function(modifiedTime) {
	  this.modifiedTime = modifiedTime;
	};

	/**
	* Get the field value
	* Timestamp when the online ordering item was last modified
	* @memberof onlineorder.OnlineOrder
	* @return {Number} must be a long integer
	*/
	OnlineOrder.prototype.getModifiedTime = function() {
	  return this.modifiedTime;
	};

	/**
	* Set the field value
	* Timestamp when online ordering item was last deleted
	*
	* @memberof onlineorder.OnlineOrder
	* @param {Number} deletedTime must be a long integer
	*/
	OnlineOrder.prototype.setDeletedTime = function(deletedTime) {
	  this.deletedTime = deletedTime;
	};

	/**
	* Get the field value
	* Timestamp when online ordering item was last deleted
	* @memberof onlineorder.OnlineOrder
	* @return {Number} must be a long integer
	*/
	OnlineOrder.prototype.getDeletedTime = function() {
	  return this.deletedTime;
	};

	/**
	* @memberof onlineorder.OnlineOrder
	* @private
	*/
	OnlineOrder.prototype.getMetaInfo = function(fieldName) {
	  var curclass = this._class_;
	  do {
	    var fieldMetaInfo = curclass._meta_.fields[fieldName];
	    if(fieldMetaInfo) {
	      return fieldMetaInfo;
	    }
	    if(curclass._meta_._superMeta_) {
	      curclass = curclass._meta_._superMeta_._class_;
	    } else {
	      curclass = null;
	    }
	  } while(curclass);
	  return null;
	};

	OnlineOrder.prototype.toString = function() {
	  return JSON.stringify(this);
	};

	OnlineOrder._meta_ =  {fields:  {}};
	OnlineOrder._meta_._class_ =  OnlineOrder;
	OnlineOrder._meta_.fields["id"] = {};
	OnlineOrder._meta_.fields["id"].type = String;
	OnlineOrder._meta_.fields["merchantRef"] = {};
	OnlineOrder._meta_.fields["merchantRef"].type = base_Reference;
	OnlineOrder._meta_.fields["onlineOrderId"] = {};
	OnlineOrder._meta_.fields["onlineOrderId"].type = String;
	OnlineOrder._meta_.fields["receiptId"] = {};
	OnlineOrder._meta_.fields["receiptId"].type = String;
	OnlineOrder._meta_.fields["provider"] = {};
	OnlineOrder._meta_.fields["provider"].type = base_Reference;
	OnlineOrder._meta_.fields["providerId"] = {};
	OnlineOrder._meta_.fields["providerId"].type = onlineorder_ProviderId;
	OnlineOrder._meta_.fields["orderState"] = {};
	OnlineOrder._meta_.fields["orderState"].type = onlineorder_OrderState;
	OnlineOrder._meta_.fields["onlineOrderCustomer"] = {};
	OnlineOrder._meta_.fields["onlineOrderCustomer"].type = onlineorder_OnlineOrderCustomer;
	OnlineOrder._meta_.fields["deliverTime"] = {};
	OnlineOrder._meta_.fields["deliverTime"].type = Number;
	OnlineOrder._meta_.fields["scheduledPickupTime"] = {};
	OnlineOrder._meta_.fields["scheduledPickupTime"].type = Number;
	OnlineOrder._meta_.fields["reason"] = {};
	OnlineOrder._meta_.fields["reason"].type = onlineorder_Reason;
	OnlineOrder._meta_.fields["createdTime"] = {};
	OnlineOrder._meta_.fields["createdTime"].type = Number;
	OnlineOrder._meta_.fields["modifiedTime"] = {};
	OnlineOrder._meta_.fields["modifiedTime"].type = Number;
	OnlineOrder._meta_.fields["deletedTime"] = {};
	OnlineOrder._meta_.fields["deletedTime"].type = Number;

	//
	// Expose the module.
	//
	if (true) {
	module.exports = OnlineOrder;
	}



/***/ }),
/* 982 */
/***/ (function(module, exports, __webpack_require__) {

	/**
	 * Autogenerated by Avro
	 * 
	 * DO NOT EDIT DIRECTLY
	 */

	var base_Reference = __webpack_require__(5);

	/**
	* @constructor
	* @memberof onlineorder
	*/
	var OnlineOrderCustomer = function() {
	  this._class_ = OnlineOrderCustomer;
	  this.id = undefined;
	  this.merchantRef = undefined;
	  this.customerEmailAddress = undefined;
	  this.customerDisplayName = undefined;
	  this.customerFirstName = undefined;
	  this.customerLastName = undefined;
	  this.customerPhoneNumber = undefined;
	  this.createdTime = undefined;
	  this.modifiedTime = undefined;
	};


	/**
	* Set the field value
	* online order customer id
	*
	* @memberof onlineorder.OnlineOrderCustomer
	* @param {String} id 
	*/
	OnlineOrderCustomer.prototype.setId = function(id) {
	  this.id = id;
	};

	/**
	* Get the field value
	* online order customer id
	* @memberof onlineorder.OnlineOrderCustomer
	* @return {String} 
	*/
	OnlineOrderCustomer.prototype.getId = function() {
	  return this.id;
	};

	/**
	* Set the field value
	* Reference to the merchant that created the order
	*
	* @memberof onlineorder.OnlineOrderCustomer
	* @param {base.Reference} merchantRef 
	*/
	OnlineOrderCustomer.prototype.setMerchantRef = function(merchantRef) {
	  this.merchantRef = merchantRef;
	};

	/**
	* Get the field value
	* Reference to the merchant that created the order
	* @memberof onlineorder.OnlineOrderCustomer
	* @return {base.Reference} 
	*/
	OnlineOrderCustomer.prototype.getMerchantRef = function() {
	  return this.merchantRef;
	};

	/**
	* Set the field value
	* Online Order customer email address
	*
	* @memberof onlineorder.OnlineOrderCustomer
	* @param {String} customerEmailAddress 
	*/
	OnlineOrderCustomer.prototype.setCustomerEmailAddress = function(customerEmailAddress) {
	  this.customerEmailAddress = customerEmailAddress;
	};

	/**
	* Get the field value
	* Online Order customer email address
	* @memberof onlineorder.OnlineOrderCustomer
	* @return {String} 
	*/
	OnlineOrderCustomer.prototype.getCustomerEmailAddress = function() {
	  return this.customerEmailAddress;
	};

	/**
	* Set the field value
	* Online Order customer display name
	*
	* @memberof onlineorder.OnlineOrderCustomer
	* @param {String} customerDisplayName 
	*/
	OnlineOrderCustomer.prototype.setCustomerDisplayName = function(customerDisplayName) {
	  this.customerDisplayName = customerDisplayName;
	};

	/**
	* Get the field value
	* Online Order customer display name
	* @memberof onlineorder.OnlineOrderCustomer
	* @return {String} 
	*/
	OnlineOrderCustomer.prototype.getCustomerDisplayName = function() {
	  return this.customerDisplayName;
	};

	/**
	* Set the field value
	* Online Order customer first name
	*
	* @memberof onlineorder.OnlineOrderCustomer
	* @param {String} customerFirstName 
	*/
	OnlineOrderCustomer.prototype.setCustomerFirstName = function(customerFirstName) {
	  this.customerFirstName = customerFirstName;
	};

	/**
	* Get the field value
	* Online Order customer first name
	* @memberof onlineorder.OnlineOrderCustomer
	* @return {String} 
	*/
	OnlineOrderCustomer.prototype.getCustomerFirstName = function() {
	  return this.customerFirstName;
	};

	/**
	* Set the field value
	* Online Order customer last name
	*
	* @memberof onlineorder.OnlineOrderCustomer
	* @param {String} customerLastName 
	*/
	OnlineOrderCustomer.prototype.setCustomerLastName = function(customerLastName) {
	  this.customerLastName = customerLastName;
	};

	/**
	* Get the field value
	* Online Order customer last name
	* @memberof onlineorder.OnlineOrderCustomer
	* @return {String} 
	*/
	OnlineOrderCustomer.prototype.getCustomerLastName = function() {
	  return this.customerLastName;
	};

	/**
	* Set the field value
	* Online Order customer phone number
	*
	* @memberof onlineorder.OnlineOrderCustomer
	* @param {String} customerPhoneNumber 
	*/
	OnlineOrderCustomer.prototype.setCustomerPhoneNumber = function(customerPhoneNumber) {
	  this.customerPhoneNumber = customerPhoneNumber;
	};

	/**
	* Get the field value
	* Online Order customer phone number
	* @memberof onlineorder.OnlineOrderCustomer
	* @return {String} 
	*/
	OnlineOrderCustomer.prototype.getCustomerPhoneNumber = function() {
	  return this.customerPhoneNumber;
	};

	/**
	* Set the field value
	* Timestamp when the online ordering item was created
	*
	* @memberof onlineorder.OnlineOrderCustomer
	* @param {Number} createdTime must be a long integer
	*/
	OnlineOrderCustomer.prototype.setCreatedTime = function(createdTime) {
	  this.createdTime = createdTime;
	};

	/**
	* Get the field value
	* Timestamp when the online ordering item was created
	* @memberof onlineorder.OnlineOrderCustomer
	* @return {Number} must be a long integer
	*/
	OnlineOrderCustomer.prototype.getCreatedTime = function() {
	  return this.createdTime;
	};

	/**
	* Set the field value
	* Timestamp when the online ordering item was last modified
	*
	* @memberof onlineorder.OnlineOrderCustomer
	* @param {Number} modifiedTime must be a long integer
	*/
	OnlineOrderCustomer.prototype.setModifiedTime = function(modifiedTime) {
	  this.modifiedTime = modifiedTime;
	};

	/**
	* Get the field value
	* Timestamp when the online ordering item was last modified
	* @memberof onlineorder.OnlineOrderCustomer
	* @return {Number} must be a long integer
	*/
	OnlineOrderCustomer.prototype.getModifiedTime = function() {
	  return this.modifiedTime;
	};

	/**
	* @memberof onlineorder.OnlineOrderCustomer
	* @private
	*/
	OnlineOrderCustomer.prototype.getMetaInfo = function(fieldName) {
	  var curclass = this._class_;
	  do {
	    var fieldMetaInfo = curclass._meta_.fields[fieldName];
	    if(fieldMetaInfo) {
	      return fieldMetaInfo;
	    }
	    if(curclass._meta_._superMeta_) {
	      curclass = curclass._meta_._superMeta_._class_;
	    } else {
	      curclass = null;
	    }
	  } while(curclass);
	  return null;
	};

	OnlineOrderCustomer.prototype.toString = function() {
	  return JSON.stringify(this);
	};

	OnlineOrderCustomer._meta_ =  {fields:  {}};
	OnlineOrderCustomer._meta_._class_ =  OnlineOrderCustomer;
	OnlineOrderCustomer._meta_.fields["id"] = {};
	OnlineOrderCustomer._meta_.fields["id"].type = String;
	OnlineOrderCustomer._meta_.fields["merchantRef"] = {};
	OnlineOrderCustomer._meta_.fields["merchantRef"].type = base_Reference;
	OnlineOrderCustomer._meta_.fields["customerEmailAddress"] = {};
	OnlineOrderCustomer._meta_.fields["customerEmailAddress"].type = String;
	OnlineOrderCustomer._meta_.fields["customerDisplayName"] = {};
	OnlineOrderCustomer._meta_.fields["customerDisplayName"].type = String;
	OnlineOrderCustomer._meta_.fields["customerFirstName"] = {};
	OnlineOrderCustomer._meta_.fields["customerFirstName"].type = String;
	OnlineOrderCustomer._meta_.fields["customerLastName"] = {};
	OnlineOrderCustomer._meta_.fields["customerLastName"].type = String;
	OnlineOrderCustomer._meta_.fields["customerPhoneNumber"] = {};
	OnlineOrderCustomer._meta_.fields["customerPhoneNumber"].type = String;
	OnlineOrderCustomer._meta_.fields["createdTime"] = {};
	OnlineOrderCustomer._meta_.fields["createdTime"].type = Number;
	OnlineOrderCustomer._meta_.fields["modifiedTime"] = {};
	OnlineOrderCustomer._meta_.fields["modifiedTime"].type = Number;

	//
	// Expose the module.
	//
	if (true) {
	module.exports = OnlineOrderCustomer;
	}



/***/ }),
/* 983 */
/***/ (function(module, exports, __webpack_require__) {

	/**
	 * Autogenerated by Avro
	 * 
	 * DO NOT EDIT DIRECTLY
	 */


	/**
	* `CREATED`: the online order is created
	* `CONFIRMED`: the online order is accepted by merchant
	* `REJECTED`: the online order is rejected by merchant
	* `CANCELLED`: The online order is cancelled
	* `IN_PREPARATION`: The online order is being prepared by the merchant.
	* `READY_FOR_PICKUP`: Order is ready for pickup
	* `IN_TRANSIT`: Order is on the way for delivery
	* `FULFILLED`: Order is delivered or picked-up
	* @memberof onlineorder
	* @enum {string}
	*/
	var OrderState = {
	  CREATED : "CREATED",
	  CONFIRMED : "CONFIRMED",
	  REJECTED : "REJECTED",
	  CANCELLED : "CANCELLED",
	  IN_PREPARATION : "IN_PREPARATION",
	  READY_FOR_PICKUP : "READY_FOR_PICKUP",
	  IN_TRANSIT : "IN_TRANSIT",
	  FULFILLED : "FULFILLED"
	};


	//
	// Expose the module.
	//
	if (true) {
	module.exports = OrderState;
	}



/***/ }),
/* 984 */
/***/ (function(module, exports, __webpack_require__) {

	/**
	 * Autogenerated by Avro
	 * 
	 * DO NOT EDIT DIRECTLY
	 */


	/**
	* @memberof onlineorder
	* @enum {string}
	*/
	var ProviderId = {
	  GOOGLE : "GOOGLE"
	};


	//
	// Expose the module.
	//
	if (true) {
	module.exports = ProviderId;
	}



/***/ }),
/* 985 */
/***/ (function(module, exports, __webpack_require__) {

	/**
	 * Autogenerated by Avro
	 * 
	 * DO NOT EDIT DIRECTLY
	 */


	/**
	* @memberof onlineorder
	* @enum {string}
	*/
	var Reason = {
	  MENU_ITEM_UNAVAILABLE : "MENU_ITEM_UNAVAILABLE",
	  RESTAURANT_CLOSED : "RESTAURANT_CLOSED"
	};


	//
	// Expose the module.
	//
	if (true) {
	module.exports = Reason;
	}



/***/ }),
/* 986 */
/***/ (function(module, exports, __webpack_require__) {

	/**
	 * Autogenerated by Avro
	 * 
	 * DO NOT EDIT DIRECTLY
	 */

	var order_LineItem = __webpack_require__(157);

	/**
	* @constructor
	* @memberof order
	*/
	var CreateLineItemsRequest = function() {
	  this._class_ = CreateLineItemsRequest;
	  this.items = undefined;
	};


	/**
	* Set the field value
	* List of LineItem objects to create
	*
	* @memberof order.CreateLineItemsRequest
	* @param {Array.<order.LineItem>} items An array of 
	*/
	CreateLineItemsRequest.prototype.setItems = function(items) {
	  this.items = items;
	};

	/**
	* Get the field value
	* List of LineItem objects to create
	* @memberof order.CreateLineItemsRequest
	* @return {Array.<order.LineItem>} An array of 
	*/
	CreateLineItemsRequest.prototype.getItems = function() {
	  return this.items;
	};

	/**
	* @memberof order.CreateLineItemsRequest
	* @private
	*/
	CreateLineItemsRequest.prototype.getMetaInfo = function(fieldName) {
	  var curclass = this._class_;
	  do {
	    var fieldMetaInfo = curclass._meta_.fields[fieldName];
	    if(fieldMetaInfo) {
	      return fieldMetaInfo;
	    }
	    if(curclass._meta_._superMeta_) {
	      curclass = curclass._meta_._superMeta_._class_;
	    } else {
	      curclass = null;
	    }
	  } while(curclass);
	  return null;
	};

	CreateLineItemsRequest.prototype.toString = function() {
	  return JSON.stringify(this);
	};

	CreateLineItemsRequest._meta_ =  {fields:  {}};
	CreateLineItemsRequest._meta_._class_ =  CreateLineItemsRequest;
	CreateLineItemsRequest._meta_.fields["items"] = {};
	CreateLineItemsRequest._meta_.fields["items"].type = Array;
	CreateLineItemsRequest._meta_.fields["items"].elementType = order_LineItem;

	//
	// Expose the module.
	//
	if (true) {
	module.exports = CreateLineItemsRequest;
	}



/***/ }),
/* 987 */
/***/ (function(module, exports, __webpack_require__) {

	/**
	 * Autogenerated by Avro
	 * 
	 * DO NOT EDIT DIRECTLY
	 */


	/**
	* @constructor
	* @memberof order
	*/
	var FireOrder = function() {
	  this._class_ = FireOrder;
	  this.id = undefined;
	  this.orderId = undefined;
	  this.delay = undefined;
	};


	/**
	* Set the field value
	* Unique identifier
	*
	* @memberof order.FireOrder
	* @param {String} id 
	*/
	FireOrder.prototype.setId = function(id) {
	  this.id = id;
	};

	/**
	* Get the field value
	* Unique identifier
	* @memberof order.FireOrder
	* @return {String} 
	*/
	FireOrder.prototype.getId = function() {
	  return this.id;
	};

	/**
	* Set the field value
	* The id of the order to fire.
	*
	* @memberof order.FireOrder
	* @param {String} orderId 
	*/
	FireOrder.prototype.setOrderId = function(orderId) {
	  this.orderId = orderId;
	};

	/**
	* Get the field value
	* The id of the order to fire.
	* @memberof order.FireOrder
	* @return {String} 
	*/
	FireOrder.prototype.getOrderId = function() {
	  return this.orderId;
	};

	/**
	* Set the field value
	* How long in seconds to wait before calling fire.
	*
	* @memberof order.FireOrder
	* @param {Number} delay must be a long integer
	*/
	FireOrder.prototype.setDelay = function(delay) {
	  this.delay = delay;
	};

	/**
	* Get the field value
	* How long in seconds to wait before calling fire.
	* @memberof order.FireOrder
	* @return {Number} must be a long integer
	*/
	FireOrder.prototype.getDelay = function() {
	  return this.delay;
	};

	/**
	* @memberof order.FireOrder
	* @private
	*/
	FireOrder.prototype.getMetaInfo = function(fieldName) {
	  var curclass = this._class_;
	  do {
	    var fieldMetaInfo = curclass._meta_.fields[fieldName];
	    if(fieldMetaInfo) {
	      return fieldMetaInfo;
	    }
	    if(curclass._meta_._superMeta_) {
	      curclass = curclass._meta_._superMeta_._class_;
	    } else {
	      curclass = null;
	    }
	  } while(curclass);
	  return null;
	};

	FireOrder.prototype.toString = function() {
	  return JSON.stringify(this);
	};

	FireOrder._meta_ =  {fields:  {}};
	FireOrder._meta_._class_ =  FireOrder;
	FireOrder._meta_.fields["id"] = {};
	FireOrder._meta_.fields["id"].type = String;
	FireOrder._meta_.fields["orderId"] = {};
	FireOrder._meta_.fields["orderId"].type = String;
	FireOrder._meta_.fields["delay"] = {};
	FireOrder._meta_.fields["delay"].type = Number;

	//
	// Expose the module.
	//
	if (true) {
	module.exports = FireOrder;
	}



/***/ }),
/* 988 */
/***/ (function(module, exports, __webpack_require__) {

	/**
	 * Autogenerated by Avro
	 * 
	 * DO NOT EDIT DIRECTLY
	 */

	var inventory_TaxRate = __webpack_require__(117);

	/**
	* @constructor
	* @memberof order
	*/
	var LineItemTaxRates = function() {
	  this._class_ = LineItemTaxRates;
	  this.rates = undefined;
	};


	/**
	* Set the field value
	* The new tax rates to assign to the line item with the corresponding line item id.
	*
	* @memberof order.LineItemTaxRates
	* @param {Object.<String,Array.<inventory.TaxRate>>} rates A map of <String> to <An array of >
	*/
	LineItemTaxRates.prototype.setRates = function(rates) {
	  this.rates = rates;
	};

	/**
	* Get the field value
	* The new tax rates to assign to the line item with the corresponding line item id.
	* @memberof order.LineItemTaxRates
	* @return {Object.<String,Array.<inventory.TaxRate>>} A map of <String> to <An array of >
	*/
	LineItemTaxRates.prototype.getRates = function() {
	  return this.rates;
	};

	/**
	* @memberof order.LineItemTaxRates
	* @private
	*/
	LineItemTaxRates.prototype.getMetaInfo = function(fieldName) {
	  var curclass = this._class_;
	  do {
	    var fieldMetaInfo = curclass._meta_.fields[fieldName];
	    if(fieldMetaInfo) {
	      return fieldMetaInfo;
	    }
	    if(curclass._meta_._superMeta_) {
	      curclass = curclass._meta_._superMeta_._class_;
	    } else {
	      curclass = null;
	    }
	  } while(curclass);
	  return null;
	};

	LineItemTaxRates.prototype.toString = function() {
	  return JSON.stringify(this);
	};

	LineItemTaxRates._meta_ =  {fields:  {}};
	LineItemTaxRates._meta_._class_ =  LineItemTaxRates;
	LineItemTaxRates._meta_.fields["rates"] = {};
	LineItemTaxRates._meta_.fields["rates"].type = Object;
	LineItemTaxRates._meta_.fields["rates"].valueType = inventory_TaxRate;

	//
	// Expose the module.
	//
	if (true) {
	module.exports = LineItemTaxRates;
	}



/***/ }),
/* 989 */
/***/ (function(module, exports, __webpack_require__) {

	/**
	 * Autogenerated by Avro
	 * 
	 * DO NOT EDIT DIRECTLY
	 */


	/**
	* @constructor
	* @memberof order
	*/
	var OrderExpansion = function() {
	  this._class_ = OrderExpansion;
	  this.id = undefined;
	  this.hasCredit = false;
	  this.hasCreditCardTransaction = false;
	  this.hasCustomer = false;
	  this.hasCustomerEmailAddress = false;
	  this.hasCustomerAddress = false;
	  this.hasCustomerPhone = false;
	  this.hasDiscount = false;
	  this.hasLineItemDiscount = false;
	  this.hasServiceCharge = false;
	  this.hasRefund = false;
	  this.hasVoid = false;
	};


	/**
	* Set the field value
	* Unique identifier
	*
	* @memberof order.OrderExpansion
	* @param {String} id 
	*/
	OrderExpansion.prototype.setId = function(id) {
	  this.id = id;
	};

	/**
	* Get the field value
	* Unique identifier
	* @memberof order.OrderExpansion
	* @return {String} 
	*/
	OrderExpansion.prototype.getId = function() {
	  return this.id;
	};

	/**
	* Set the field value
	* True if order has credit.
	*
	* @memberof order.OrderExpansion
	* @param {Boolean} hasCredit 
	*/
	OrderExpansion.prototype.setHasCredit = function(hasCredit) {
	  this.hasCredit = hasCredit;
	};

	/**
	* Get the field value
	* True if order has credit.
	* @memberof order.OrderExpansion
	* @return {Boolean} 
	*/
	OrderExpansion.prototype.getHasCredit = function() {
	  return this.hasCredit;
	};

	/**
	* Set the field value
	* True if order has credit.
	*
	* @memberof order.OrderExpansion
	* @param {Boolean} hasCreditCardTransaction 
	*/
	OrderExpansion.prototype.setHasCreditCardTransaction = function(hasCreditCardTransaction) {
	  this.hasCreditCardTransaction = hasCreditCardTransaction;
	};

	/**
	* Get the field value
	* True if order has credit.
	* @memberof order.OrderExpansion
	* @return {Boolean} 
	*/
	OrderExpansion.prototype.getHasCreditCardTransaction = function() {
	  return this.hasCreditCardTransaction;
	};

	/**
	* Set the field value
	* True if order has customer
	*
	* @memberof order.OrderExpansion
	* @param {Boolean} hasCustomer 
	*/
	OrderExpansion.prototype.setHasCustomer = function(hasCustomer) {
	  this.hasCustomer = hasCustomer;
	};

	/**
	* Get the field value
	* True if order has customer
	* @memberof order.OrderExpansion
	* @return {Boolean} 
	*/
	OrderExpansion.prototype.getHasCustomer = function() {
	  return this.hasCustomer;
	};

	/**
	* Set the field value
	* True if customer has email address
	*
	* @memberof order.OrderExpansion
	* @param {Boolean} hasCustomerEmailAddress 
	*/
	OrderExpansion.prototype.setHasCustomerEmailAddress = function(hasCustomerEmailAddress) {
	  this.hasCustomerEmailAddress = hasCustomerEmailAddress;
	};

	/**
	* Get the field value
	* True if customer has email address
	* @memberof order.OrderExpansion
	* @return {Boolean} 
	*/
	OrderExpansion.prototype.getHasCustomerEmailAddress = function() {
	  return this.hasCustomerEmailAddress;
	};

	/**
	* Set the field value
	* True if customer has address
	*
	* @memberof order.OrderExpansion
	* @param {Boolean} hasCustomerAddress 
	*/
	OrderExpansion.prototype.setHasCustomerAddress = function(hasCustomerAddress) {
	  this.hasCustomerAddress = hasCustomerAddress;
	};

	/**
	* Get the field value
	* True if customer has address
	* @memberof order.OrderExpansion
	* @return {Boolean} 
	*/
	OrderExpansion.prototype.getHasCustomerAddress = function() {
	  return this.hasCustomerAddress;
	};

	/**
	* Set the field value
	* True if customer has phone
	*
	* @memberof order.OrderExpansion
	* @param {Boolean} hasCustomerPhone 
	*/
	OrderExpansion.prototype.setHasCustomerPhone = function(hasCustomerPhone) {
	  this.hasCustomerPhone = hasCustomerPhone;
	};

	/**
	* Get the field value
	* True if customer has phone
	* @memberof order.OrderExpansion
	* @return {Boolean} 
	*/
	OrderExpansion.prototype.getHasCustomerPhone = function() {
	  return this.hasCustomerPhone;
	};

	/**
	* Set the field value
	* True if order has discount
	*
	* @memberof order.OrderExpansion
	* @param {Boolean} hasDiscount 
	*/
	OrderExpansion.prototype.setHasDiscount = function(hasDiscount) {
	  this.hasDiscount = hasDiscount;
	};

	/**
	* Get the field value
	* True if order has discount
	* @memberof order.OrderExpansion
	* @return {Boolean} 
	*/
	OrderExpansion.prototype.getHasDiscount = function() {
	  return this.hasDiscount;
	};

	/**
	* Set the field value
	* True if order has line item discount
	*
	* @memberof order.OrderExpansion
	* @param {Boolean} hasLineItemDiscount 
	*/
	OrderExpansion.prototype.setHasLineItemDiscount = function(hasLineItemDiscount) {
	  this.hasLineItemDiscount = hasLineItemDiscount;
	};

	/**
	* Get the field value
	* True if order has line item discount
	* @memberof order.OrderExpansion
	* @return {Boolean} 
	*/
	OrderExpansion.prototype.getHasLineItemDiscount = function() {
	  return this.hasLineItemDiscount;
	};

	/**
	* Set the field value
	* Check for order has service charge
	*
	* @memberof order.OrderExpansion
	* @param {Boolean} hasServiceCharge 
	*/
	OrderExpansion.prototype.setHasServiceCharge = function(hasServiceCharge) {
	  this.hasServiceCharge = hasServiceCharge;
	};

	/**
	* Get the field value
	* Check for order has service charge
	* @memberof order.OrderExpansion
	* @return {Boolean} 
	*/
	OrderExpansion.prototype.getHasServiceCharge = function() {
	  return this.hasServiceCharge;
	};

	/**
	* Set the field value
	* True if order has a refund
	*
	* @memberof order.OrderExpansion
	* @param {Boolean} hasRefund 
	*/
	OrderExpansion.prototype.setHasRefund = function(hasRefund) {
	  this.hasRefund = hasRefund;
	};

	/**
	* Get the field value
	* True if order has a refund
	* @memberof order.OrderExpansion
	* @return {Boolean} 
	*/
	OrderExpansion.prototype.getHasRefund = function() {
	  return this.hasRefund;
	};

	/**
	* Set the field value
	* True if order has void
	*
	* @memberof order.OrderExpansion
	* @param {Boolean} hasVoid 
	*/
	OrderExpansion.prototype.setHasVoid = function(hasVoid) {
	  this.hasVoid = hasVoid;
	};

	/**
	* Get the field value
	* True if order has void
	* @memberof order.OrderExpansion
	* @return {Boolean} 
	*/
	OrderExpansion.prototype.getHasVoid = function() {
	  return this.hasVoid;
	};

	/**
	* @memberof order.OrderExpansion
	* @private
	*/
	OrderExpansion.prototype.getMetaInfo = function(fieldName) {
	  var curclass = this._class_;
	  do {
	    var fieldMetaInfo = curclass._meta_.fields[fieldName];
	    if(fieldMetaInfo) {
	      return fieldMetaInfo;
	    }
	    if(curclass._meta_._superMeta_) {
	      curclass = curclass._meta_._superMeta_._class_;
	    } else {
	      curclass = null;
	    }
	  } while(curclass);
	  return null;
	};

	OrderExpansion.prototype.toString = function() {
	  return JSON.stringify(this);
	};

	OrderExpansion._meta_ =  {fields:  {}};
	OrderExpansion._meta_._class_ =  OrderExpansion;
	OrderExpansion._meta_.fields["id"] = {};
	OrderExpansion._meta_.fields["id"].type = String;
	OrderExpansion._meta_.fields["hasCredit"] = {};
	OrderExpansion._meta_.fields["hasCredit"].type = Boolean;
	OrderExpansion._meta_.fields["hasCreditCardTransaction"] = {};
	OrderExpansion._meta_.fields["hasCreditCardTransaction"].type = Boolean;
	OrderExpansion._meta_.fields["hasCustomer"] = {};
	OrderExpansion._meta_.fields["hasCustomer"].type = Boolean;
	OrderExpansion._meta_.fields["hasCustomerEmailAddress"] = {};
	OrderExpansion._meta_.fields["hasCustomerEmailAddress"].type = Boolean;
	OrderExpansion._meta_.fields["hasCustomerAddress"] = {};
	OrderExpansion._meta_.fields["hasCustomerAddress"].type = Boolean;
	OrderExpansion._meta_.fields["hasCustomerPhone"] = {};
	OrderExpansion._meta_.fields["hasCustomerPhone"].type = Boolean;
	OrderExpansion._meta_.fields["hasDiscount"] = {};
	OrderExpansion._meta_.fields["hasDiscount"].type = Boolean;
	OrderExpansion._meta_.fields["hasLineItemDiscount"] = {};
	OrderExpansion._meta_.fields["hasLineItemDiscount"].type = Boolean;
	OrderExpansion._meta_.fields["hasServiceCharge"] = {};
	OrderExpansion._meta_.fields["hasServiceCharge"].type = Boolean;
	OrderExpansion._meta_.fields["hasRefund"] = {};
	OrderExpansion._meta_.fields["hasRefund"].type = Boolean;
	OrderExpansion._meta_.fields["hasVoid"] = {};
	OrderExpansion._meta_.fields["hasVoid"].type = Boolean;

	//
	// Expose the module.
	//
	if (true) {
	module.exports = OrderExpansion;
	}



/***/ }),
/* 990 */
/***/ (function(module, exports, __webpack_require__) {

	/**
	 * Autogenerated by Avro
	 * 
	 * DO NOT EDIT DIRECTLY
	 */


	/**
	* @constructor
	* @memberof order
	*/
	var OrderTaxRate = function() {
	  this._class_ = OrderTaxRate;
	  this.id = undefined;
	  this.name = undefined;
	  this.amount = undefined;
	};


	/**
	* Set the field value
	* @memberof order.OrderTaxRate
	* @param {String} id 
	*/
	OrderTaxRate.prototype.setId = function(id) {
	  this.id = id;
	};

	/**
	* Get the field value
	* @memberof order.OrderTaxRate
	* @return {String} 
	*/
	OrderTaxRate.prototype.getId = function() {
	  return this.id;
	};

	/**
	* Set the field value
	* @memberof order.OrderTaxRate
	* @param {String} name 
	*/
	OrderTaxRate.prototype.setName = function(name) {
	  this.name = name;
	};

	/**
	* Get the field value
	* @memberof order.OrderTaxRate
	* @return {String} 
	*/
	OrderTaxRate.prototype.getName = function() {
	  return this.name;
	};

	/**
	* Set the field value
	* @memberof order.OrderTaxRate
	* @param {Number} amount must be a long integer
	*/
	OrderTaxRate.prototype.setAmount = function(amount) {
	  this.amount = amount;
	};

	/**
	* Get the field value
	* @memberof order.OrderTaxRate
	* @return {Number} must be a long integer
	*/
	OrderTaxRate.prototype.getAmount = function() {
	  return this.amount;
	};

	/**
	* @memberof order.OrderTaxRate
	* @private
	*/
	OrderTaxRate.prototype.getMetaInfo = function(fieldName) {
	  var curclass = this._class_;
	  do {
	    var fieldMetaInfo = curclass._meta_.fields[fieldName];
	    if(fieldMetaInfo) {
	      return fieldMetaInfo;
	    }
	    if(curclass._meta_._superMeta_) {
	      curclass = curclass._meta_._superMeta_._class_;
	    } else {
	      curclass = null;
	    }
	  } while(curclass);
	  return null;
	};

	OrderTaxRate.prototype.toString = function() {
	  return JSON.stringify(this);
	};

	OrderTaxRate._meta_ =  {fields:  {}};
	OrderTaxRate._meta_._class_ =  OrderTaxRate;
	OrderTaxRate._meta_.fields["id"] = {};
	OrderTaxRate._meta_.fields["id"].type = String;
	OrderTaxRate._meta_.fields["name"] = {};
	OrderTaxRate._meta_.fields["name"].type = String;
	OrderTaxRate._meta_.fields["amount"] = {};
	OrderTaxRate._meta_.fields["amount"].type = Number;

	//
	// Expose the module.
	//
	if (true) {
	module.exports = OrderTaxRate;
	}



/***/ }),
/* 991 */
/***/ (function(module, exports, __webpack_require__) {

	/**
	 * Autogenerated by Avro
	 * 
	 * DO NOT EDIT DIRECTLY
	 */

	var order_OrderType = __webpack_require__(244);
	var inventory_Category = __webpack_require__(153);

	/**
	* @constructor
	* @memberof order
	*/
	var OrderTypeCategory = function() {
	  this._class_ = OrderTypeCategory;
	  this.orderType = undefined;
	  this.category = undefined;
	};


	/**
	* Set the field value
	* @memberof order.OrderTypeCategory
	* @param {order.OrderType} orderType 
	*/
	OrderTypeCategory.prototype.setOrderType = function(orderType) {
	  this.orderType = orderType;
	};

	/**
	* Get the field value
	* @memberof order.OrderTypeCategory
	* @return {order.OrderType} 
	*/
	OrderTypeCategory.prototype.getOrderType = function() {
	  return this.orderType;
	};

	/**
	* Set the field value
	* @memberof order.OrderTypeCategory
	* @param {inventory.Category} category 
	*/
	OrderTypeCategory.prototype.setCategory = function(category) {
	  this.category = category;
	};

	/**
	* Get the field value
	* @memberof order.OrderTypeCategory
	* @return {inventory.Category} 
	*/
	OrderTypeCategory.prototype.getCategory = function() {
	  return this.category;
	};

	/**
	* @memberof order.OrderTypeCategory
	* @private
	*/
	OrderTypeCategory.prototype.getMetaInfo = function(fieldName) {
	  var curclass = this._class_;
	  do {
	    var fieldMetaInfo = curclass._meta_.fields[fieldName];
	    if(fieldMetaInfo) {
	      return fieldMetaInfo;
	    }
	    if(curclass._meta_._superMeta_) {
	      curclass = curclass._meta_._superMeta_._class_;
	    } else {
	      curclass = null;
	    }
	  } while(curclass);
	  return null;
	};

	OrderTypeCategory.prototype.toString = function() {
	  return JSON.stringify(this);
	};

	OrderTypeCategory._meta_ =  {fields:  {}};
	OrderTypeCategory._meta_._class_ =  OrderTypeCategory;
	OrderTypeCategory._meta_.fields["orderType"] = {};
	OrderTypeCategory._meta_.fields["orderType"].type = order_OrderType;
	OrderTypeCategory._meta_.fields["category"] = {};
	OrderTypeCategory._meta_.fields["category"].type = inventory_Category;

	//
	// Expose the module.
	//
	if (true) {
	module.exports = OrderTypeCategory;
	}



/***/ }),
/* 992 */
/***/ (function(module, exports, __webpack_require__) {

	/**
	 * Autogenerated by Avro
	 * 
	 * DO NOT EDIT DIRECTLY
	 */


	/**
	* @constructor
	* @memberof order
	*/
	var OverrideInfo = function() {
	  this._class_ = OverrideInfo;
	  this.disableCustomerUpdate = undefined;
	};


	/**
	* Set the field value
	* Flag indicating whether a currently associated customer on an order should not be replaced
	*
	* @memberof order.OverrideInfo
	* @param {Boolean} disableCustomerUpdate 
	*/
	OverrideInfo.prototype.setDisableCustomerUpdate = function(disableCustomerUpdate) {
	  this.disableCustomerUpdate = disableCustomerUpdate;
	};

	/**
	* Get the field value
	* Flag indicating whether a currently associated customer on an order should not be replaced
	* @memberof order.OverrideInfo
	* @return {Boolean} 
	*/
	OverrideInfo.prototype.getDisableCustomerUpdate = function() {
	  return this.disableCustomerUpdate;
	};

	/**
	* @memberof order.OverrideInfo
	* @private
	*/
	OverrideInfo.prototype.getMetaInfo = function(fieldName) {
	  var curclass = this._class_;
	  do {
	    var fieldMetaInfo = curclass._meta_.fields[fieldName];
	    if(fieldMetaInfo) {
	      return fieldMetaInfo;
	    }
	    if(curclass._meta_._superMeta_) {
	      curclass = curclass._meta_._superMeta_._class_;
	    } else {
	      curclass = null;
	    }
	  } while(curclass);
	  return null;
	};

	OverrideInfo.prototype.toString = function() {
	  return JSON.stringify(this);
	};

	OverrideInfo._meta_ =  {fields:  {}};
	OverrideInfo._meta_._class_ =  OverrideInfo;
	OverrideInfo._meta_.fields["disableCustomerUpdate"] = {};
	OverrideInfo._meta_.fields["disableCustomerUpdate"].type = Boolean;

	//
	// Expose the module.
	//
	if (true) {
	module.exports = OverrideInfo;
	}



/***/ }),
/* 993 */
/***/ (function(module, exports, __webpack_require__) {

	/**
	 * Autogenerated by Avro
	 * 
	 * DO NOT EDIT DIRECTLY
	 */

	var order_PrintState = __webpack_require__(416);
	var base_Reference = __webpack_require__(5);
	var printer_PrintCategory = __webpack_require__(166);

	/**
	* @constructor
	* @memberof order
	*/
	var PrintOrder = function() {
	  this._class_ = PrintOrder;
	  this.id = undefined;
	  this.merchantRef = undefined;
	  this.orderRef = undefined;
	  this.deviceRef = undefined;
	  this.category = undefined;
	  this.state = undefined;
	  this.createdTime = undefined;
	  this.modifiedTime = undefined;
	  this.deletedTime = undefined;
	};


	/**
	* Set the field value
	* Unique identifier
	*
	* @memberof order.PrintOrder
	* @param {String} id 
	*/
	PrintOrder.prototype.setId = function(id) {
	  this.id = id;
	};

	/**
	* Get the field value
	* Unique identifier
	* @memberof order.PrintOrder
	* @return {String} 
	*/
	PrintOrder.prototype.getId = function() {
	  return this.id;
	};

	/**
	* Set the field value
	* @memberof order.PrintOrder
	* @param {base.Reference} merchantRef 
	*/
	PrintOrder.prototype.setMerchantRef = function(merchantRef) {
	  this.merchantRef = merchantRef;
	};

	/**
	* Get the field value
	* @memberof order.PrintOrder
	* @return {base.Reference} 
	*/
	PrintOrder.prototype.getMerchantRef = function() {
	  return this.merchantRef;
	};

	/**
	* Set the field value
	* Reference to the order to be printed
	*
	* @memberof order.PrintOrder
	* @param {base.Reference} orderRef 
	*/
	PrintOrder.prototype.setOrderRef = function(orderRef) {
	  this.orderRef = orderRef;
	};

	/**
	* Get the field value
	* Reference to the order to be printed
	* @memberof order.PrintOrder
	* @return {base.Reference} 
	*/
	PrintOrder.prototype.getOrderRef = function() {
	  return this.orderRef;
	};

	/**
	* Set the field value
	* The printing device. A 128-bit UUID, not a normal base-13 Clover ID.
	*
	* @memberof order.PrintOrder
	* @param {base.Reference} deviceRef 
	*/
	PrintOrder.prototype.setDeviceRef = function(deviceRef) {
	  this.deviceRef = deviceRef;
	};

	/**
	* Get the field value
	* The printing device. A 128-bit UUID, not a normal base-13 Clover ID.
	* @memberof order.PrintOrder
	* @return {base.Reference} 
	*/
	PrintOrder.prototype.getDeviceRef = function() {
	  return this.deviceRef;
	};

	/**
	* Set the field value
	* The print category
	*
	* @memberof order.PrintOrder
	* @param {printer.PrintCategory} category 
	*/
	PrintOrder.prototype.setCategory = function(category) {
	  this.category = category;
	};

	/**
	* Get the field value
	* The print category
	* @memberof order.PrintOrder
	* @return {printer.PrintCategory} 
	*/
	PrintOrder.prototype.getCategory = function() {
	  return this.category;
	};

	/**
	* Set the field value
	* print event state
	*
	* @memberof order.PrintOrder
	* @param {Null|order.PrintState} state 
	*/
	PrintOrder.prototype.setState = function(state) {
	  this.state = state;
	};

	/**
	* Get the field value
	* print event state
	* @memberof order.PrintOrder
	* @return {Null|order.PrintState} 
	*/
	PrintOrder.prototype.getState = function() {
	  return this.state;
	};

	/**
	* Set the field value
	* Timestamp when the print event was created
	*
	* @memberof order.PrintOrder
	* @param {Number} createdTime must be a long integer
	*/
	PrintOrder.prototype.setCreatedTime = function(createdTime) {
	  this.createdTime = createdTime;
	};

	/**
	* Get the field value
	* Timestamp when the print event was created
	* @memberof order.PrintOrder
	* @return {Number} must be a long integer
	*/
	PrintOrder.prototype.getCreatedTime = function() {
	  return this.createdTime;
	};

	/**
	* Set the field value
	* Timestamp when the print event was last modified
	*
	* @memberof order.PrintOrder
	* @param {Number} modifiedTime must be a long integer
	*/
	PrintOrder.prototype.setModifiedTime = function(modifiedTime) {
	  this.modifiedTime = modifiedTime;
	};

	/**
	* Get the field value
	* Timestamp when the print event was last modified
	* @memberof order.PrintOrder
	* @return {Number} must be a long integer
	*/
	PrintOrder.prototype.getModifiedTime = function() {
	  return this.modifiedTime;
	};

	/**
	* Set the field value
	* Timestamp when the print event was last deleted
	*
	* @memberof order.PrintOrder
	* @param {Number} deletedTime must be a long integer
	*/
	PrintOrder.prototype.setDeletedTime = function(deletedTime) {
	  this.deletedTime = deletedTime;
	};

	/**
	* Get the field value
	* Timestamp when the print event was last deleted
	* @memberof order.PrintOrder
	* @return {Number} must be a long integer
	*/
	PrintOrder.prototype.getDeletedTime = function() {
	  return this.deletedTime;
	};

	/**
	* @memberof order.PrintOrder
	* @private
	*/
	PrintOrder.prototype.getMetaInfo = function(fieldName) {
	  var curclass = this._class_;
	  do {
	    var fieldMetaInfo = curclass._meta_.fields[fieldName];
	    if(fieldMetaInfo) {
	      return fieldMetaInfo;
	    }
	    if(curclass._meta_._superMeta_) {
	      curclass = curclass._meta_._superMeta_._class_;
	    } else {
	      curclass = null;
	    }
	  } while(curclass);
	  return null;
	};

	PrintOrder.prototype.toString = function() {
	  return JSON.stringify(this);
	};

	PrintOrder._meta_ =  {fields:  {}};
	PrintOrder._meta_._class_ =  PrintOrder;
	PrintOrder._meta_.fields["id"] = {};
	PrintOrder._meta_.fields["id"].type = String;
	PrintOrder._meta_.fields["merchantRef"] = {};
	PrintOrder._meta_.fields["merchantRef"].type = base_Reference;
	PrintOrder._meta_.fields["orderRef"] = {};
	PrintOrder._meta_.fields["orderRef"].type = base_Reference;
	PrintOrder._meta_.fields["deviceRef"] = {};
	PrintOrder._meta_.fields["deviceRef"].type = base_Reference;
	PrintOrder._meta_.fields["category"] = {};
	PrintOrder._meta_.fields["category"].type = printer_PrintCategory;
	PrintOrder._meta_.fields["state"] = {};
	PrintOrder._meta_.fields["state"].type = order_PrintState;
	PrintOrder._meta_.fields["createdTime"] = {};
	PrintOrder._meta_.fields["createdTime"].type = Number;
	PrintOrder._meta_.fields["modifiedTime"] = {};
	PrintOrder._meta_.fields["modifiedTime"].type = Number;
	PrintOrder._meta_.fields["deletedTime"] = {};
	PrintOrder._meta_.fields["deletedTime"].type = Number;

	//
	// Expose the module.
	//
	if (true) {
	module.exports = PrintOrder;
	}



/***/ }),
/* 994 */
/***/ (function(module, exports, __webpack_require__) {

	/**
	 * Autogenerated by Avro
	 * 
	 * DO NOT EDIT DIRECTLY
	 */

	var base_Reference = __webpack_require__(5);

	/**
	* @constructor
	* @memberof order
	*/
	var SendReceiptRequest = function() {
	  this._class_ = SendReceiptRequest;
	  this.payment = undefined;
	  this.refund = undefined;
	  this.credit = undefined;
	  this.emailAddresses = undefined;
	  this.phoneNumbers = undefined;
	};


	/**
	* Set the field value
	* The payment of the requested receipt.
	*
	* @memberof order.SendReceiptRequest
	* @param {Null|base.Reference} payment 
	*/
	SendReceiptRequest.prototype.setPayment = function(payment) {
	  this.payment = payment;
	};

	/**
	* Get the field value
	* The payment of the requested receipt.
	* @memberof order.SendReceiptRequest
	* @return {Null|base.Reference} 
	*/
	SendReceiptRequest.prototype.getPayment = function() {
	  return this.payment;
	};

	/**
	* Set the field value
	* The refund of the requested receipt.
	*
	* @memberof order.SendReceiptRequest
	* @param {Null|base.Reference} refund 
	*/
	SendReceiptRequest.prototype.setRefund = function(refund) {
	  this.refund = refund;
	};

	/**
	* Get the field value
	* The refund of the requested receipt.
	* @memberof order.SendReceiptRequest
	* @return {Null|base.Reference} 
	*/
	SendReceiptRequest.prototype.getRefund = function() {
	  return this.refund;
	};

	/**
	* Set the field value
	* The credit of the requested receipt.
	*
	* @memberof order.SendReceiptRequest
	* @param {Null|base.Reference} credit 
	*/
	SendReceiptRequest.prototype.setCredit = function(credit) {
	  this.credit = credit;
	};

	/**
	* Get the field value
	* The credit of the requested receipt.
	* @memberof order.SendReceiptRequest
	* @return {Null|base.Reference} 
	*/
	SendReceiptRequest.prototype.getCredit = function() {
	  return this.credit;
	};

	/**
	* Set the field value
	* List of email addresses to send the receipt to.
	*
	* @memberof order.SendReceiptRequest
	* @param {Array.<String>} emailAddresses An array of 
	*/
	SendReceiptRequest.prototype.setEmailAddresses = function(emailAddresses) {
	  this.emailAddresses = emailAddresses;
	};

	/**
	* Get the field value
	* List of email addresses to send the receipt to.
	* @memberof order.SendReceiptRequest
	* @return {Array.<String>} An array of 
	*/
	SendReceiptRequest.prototype.getEmailAddresses = function() {
	  return this.emailAddresses;
	};

	/**
	* Set the field value
	* List of phone numbers to send the receipt to.
	*
	* @memberof order.SendReceiptRequest
	* @param {Array.<String>} phoneNumbers An array of 
	*/
	SendReceiptRequest.prototype.setPhoneNumbers = function(phoneNumbers) {
	  this.phoneNumbers = phoneNumbers;
	};

	/**
	* Get the field value
	* List of phone numbers to send the receipt to.
	* @memberof order.SendReceiptRequest
	* @return {Array.<String>} An array of 
	*/
	SendReceiptRequest.prototype.getPhoneNumbers = function() {
	  return this.phoneNumbers;
	};

	/**
	* @memberof order.SendReceiptRequest
	* @private
	*/
	SendReceiptRequest.prototype.getMetaInfo = function(fieldName) {
	  var curclass = this._class_;
	  do {
	    var fieldMetaInfo = curclass._meta_.fields[fieldName];
	    if(fieldMetaInfo) {
	      return fieldMetaInfo;
	    }
	    if(curclass._meta_._superMeta_) {
	      curclass = curclass._meta_._superMeta_._class_;
	    } else {
	      curclass = null;
	    }
	  } while(curclass);
	  return null;
	};

	SendReceiptRequest.prototype.toString = function() {
	  return JSON.stringify(this);
	};

	SendReceiptRequest._meta_ =  {fields:  {}};
	SendReceiptRequest._meta_._class_ =  SendReceiptRequest;
	SendReceiptRequest._meta_.fields["payment"] = {};
	SendReceiptRequest._meta_.fields["payment"].type = base_Reference;
	SendReceiptRequest._meta_.fields["refund"] = {};
	SendReceiptRequest._meta_.fields["refund"].type = base_Reference;
	SendReceiptRequest._meta_.fields["credit"] = {};
	SendReceiptRequest._meta_.fields["credit"].type = base_Reference;
	SendReceiptRequest._meta_.fields["emailAddresses"] = {};
	SendReceiptRequest._meta_.fields["emailAddresses"].type = Array;
	SendReceiptRequest._meta_.fields["phoneNumbers"] = {};
	SendReceiptRequest._meta_.fields["phoneNumbers"].type = Array;

	//
	// Expose the module.
	//
	if (true) {
	module.exports = SendReceiptRequest;
	}



/***/ }),
/* 995 */
/***/ (function(module, exports, __webpack_require__) {

	/**
	 * Autogenerated by Avro
	 * 
	 * DO NOT EDIT DIRECTLY
	 */


	/**
	* @constructor
	* @memberof order
	*/
	var SystemOrderType = function() {
	  this._class_ = SystemOrderType;
	  this.id = undefined;
	  this.labelKey = undefined;
	  this.isQsr = undefined;
	  this.isFsr = undefined;
	  this.isRetail = undefined;
	};


	/**
	* Set the field value
	* Unique identifier
	*
	* @memberof order.SystemOrderType
	* @param {String} id 
	*/
	SystemOrderType.prototype.setId = function(id) {
	  this.id = id;
	};

	/**
	* Get the field value
	* Unique identifier
	* @memberof order.SystemOrderType
	* @return {String} 
	*/
	SystemOrderType.prototype.getId = function() {
	  return this.id;
	};

	/**
	* Set the field value
	* Label Key
	*
	* @memberof order.SystemOrderType
	* @param {String} labelKey 
	*/
	SystemOrderType.prototype.setLabelKey = function(labelKey) {
	  this.labelKey = labelKey;
	};

	/**
	* Get the field value
	* Label Key
	* @memberof order.SystemOrderType
	* @return {String} 
	*/
	SystemOrderType.prototype.getLabelKey = function() {
	  return this.labelKey;
	};

	/**
	* Set the field value
	* Is for quick service restraunts?
	*
	* @memberof order.SystemOrderType
	* @param {Boolean} isQsr 
	*/
	SystemOrderType.prototype.setIsQsr = function(isQsr) {
	  this.isQsr = isQsr;
	};

	/**
	* Get the field value
	* Is for quick service restraunts?
	* @memberof order.SystemOrderType
	* @return {Boolean} 
	*/
	SystemOrderType.prototype.getIsQsr = function() {
	  return this.isQsr;
	};

	/**
	* Set the field value
	* Is for full service restraunts?
	*
	* @memberof order.SystemOrderType
	* @param {Boolean} isFsr 
	*/
	SystemOrderType.prototype.setIsFsr = function(isFsr) {
	  this.isFsr = isFsr;
	};

	/**
	* Get the field value
	* Is for full service restraunts?
	* @memberof order.SystemOrderType
	* @return {Boolean} 
	*/
	SystemOrderType.prototype.getIsFsr = function() {
	  return this.isFsr;
	};

	/**
	* Set the field value
	* Is for retail stores?
	*
	* @memberof order.SystemOrderType
	* @param {Boolean} isRetail 
	*/
	SystemOrderType.prototype.setIsRetail = function(isRetail) {
	  this.isRetail = isRetail;
	};

	/**
	* Get the field value
	* Is for retail stores?
	* @memberof order.SystemOrderType
	* @return {Boolean} 
	*/
	SystemOrderType.prototype.getIsRetail = function() {
	  return this.isRetail;
	};

	/**
	* @memberof order.SystemOrderType
	* @private
	*/
	SystemOrderType.prototype.getMetaInfo = function(fieldName) {
	  var curclass = this._class_;
	  do {
	    var fieldMetaInfo = curclass._meta_.fields[fieldName];
	    if(fieldMetaInfo) {
	      return fieldMetaInfo;
	    }
	    if(curclass._meta_._superMeta_) {
	      curclass = curclass._meta_._superMeta_._class_;
	    } else {
	      curclass = null;
	    }
	  } while(curclass);
	  return null;
	};

	SystemOrderType.prototype.toString = function() {
	  return JSON.stringify(this);
	};

	SystemOrderType._meta_ =  {fields:  {}};
	SystemOrderType._meta_._class_ =  SystemOrderType;
	SystemOrderType._meta_.fields["id"] = {};
	SystemOrderType._meta_.fields["id"].type = String;
	SystemOrderType._meta_.fields["labelKey"] = {};
	SystemOrderType._meta_.fields["labelKey"].type = String;
	SystemOrderType._meta_.fields["isQsr"] = {};
	SystemOrderType._meta_.fields["isQsr"].type = Boolean;
	SystemOrderType._meta_.fields["isFsr"] = {};
	SystemOrderType._meta_.fields["isFsr"].type = Boolean;
	SystemOrderType._meta_.fields["isRetail"] = {};
	SystemOrderType._meta_.fields["isRetail"].type = Boolean;

	//
	// Expose the module.
	//
	if (true) {
	module.exports = SystemOrderType;
	}



/***/ }),
/* 996 */
/***/ (function(module, exports, __webpack_require__) {

	/**
	 * Autogenerated by Avro
	 * 
	 * DO NOT EDIT DIRECTLY
	 */

	var order_ClientEventType = __webpack_require__(406);
	var order_LineItem = __webpack_require__(157);
	var base_Reference = __webpack_require__(5);

	/** For reporting on a removed line item */
	/**
	* @constructor
	* @memberof order
	*/
	var VoidedLineItem = function() {
	  this._class_ = VoidedLineItem;
	  this.lineItem = undefined;
	  this.merchant = undefined;
	  this.reason = undefined;
	  this.removedBy = undefined;
	  this.createdBy = undefined;
	  this.deletedTime = undefined;
	  this.environment = undefined;
	  this.clientEventType = undefined;
	};


	/**
	* Set the field value
	* The line item that was voided
	*
	* @memberof order.VoidedLineItem
	* @param {order.LineItem} lineItem 
	*/
	VoidedLineItem.prototype.setLineItem = function(lineItem) {
	  this.lineItem = lineItem;
	};

	/**
	* Get the field value
	* The line item that was voided
	* @memberof order.VoidedLineItem
	* @return {order.LineItem} 
	*/
	VoidedLineItem.prototype.getLineItem = function() {
	  return this.lineItem;
	};

	/**
	* Set the field value
	* @memberof order.VoidedLineItem
	* @param {base.Reference} merchant 
	*/
	VoidedLineItem.prototype.setMerchant = function(merchant) {
	  this.merchant = merchant;
	};

	/**
	* Get the field value
	* @memberof order.VoidedLineItem
	* @return {base.Reference} 
	*/
	VoidedLineItem.prototype.getMerchant = function() {
	  return this.merchant;
	};

	/**
	* Set the field value
	* Why was the line item voided
	*
	* @memberof order.VoidedLineItem
	* @param {Null|String} reason 
	*/
	VoidedLineItem.prototype.setReason = function(reason) {
	  this.reason = reason;
	};

	/**
	* Get the field value
	* Why was the line item voided
	* @memberof order.VoidedLineItem
	* @return {Null|String} 
	*/
	VoidedLineItem.prototype.getReason = function() {
	  return this.reason;
	};

	/**
	* Set the field value
	* Employee who voided the item
	*
	* @memberof order.VoidedLineItem
	* @param {base.Reference} removedBy 
	*/
	VoidedLineItem.prototype.setRemovedBy = function(removedBy) {
	  this.removedBy = removedBy;
	};

	/**
	* Get the field value
	* Employee who voided the item
	* @memberof order.VoidedLineItem
	* @return {base.Reference} 
	*/
	VoidedLineItem.prototype.getRemovedBy = function() {
	  return this.removedBy;
	};

	/**
	* Set the field value
	* Employee who created the order from which the line item was voided
	*
	* @memberof order.VoidedLineItem
	* @param {base.Reference} createdBy 
	*/
	VoidedLineItem.prototype.setCreatedBy = function(createdBy) {
	  this.createdBy = createdBy;
	};

	/**
	* Get the field value
	* Employee who created the order from which the line item was voided
	* @memberof order.VoidedLineItem
	* @return {base.Reference} 
	*/
	VoidedLineItem.prototype.getCreatedBy = function() {
	  return this.createdBy;
	};

	/**
	* Set the field value
	* Timestamp of when this line item was deleted
	*
	* @memberof order.VoidedLineItem
	* @param {Number} deletedTime must be a long integer
	*/
	VoidedLineItem.prototype.setDeletedTime = function(deletedTime) {
	  this.deletedTime = deletedTime;
	};

	/**
	* Get the field value
	* Timestamp of when this line item was deleted
	* @memberof order.VoidedLineItem
	* @return {Number} must be a long integer
	*/
	VoidedLineItem.prototype.getDeletedTime = function() {
	  return this.deletedTime;
	};

	/**
	* Set the field value
	* Which environment was this recorded in
	*
	* @memberof order.VoidedLineItem
	* @param {Null|String} environment 
	*/
	VoidedLineItem.prototype.setEnvironment = function(environment) {
	  this.environment = environment;
	};

	/**
	* Get the field value
	* Which environment was this recorded in
	* @memberof order.VoidedLineItem
	* @return {Null|String} 
	*/
	VoidedLineItem.prototype.getEnvironment = function() {
	  return this.environment;
	};

	/**
	* Set the field value
	* What event on the client removed this? Was it because of moving a table? Or was it plain old deleting a line item?
	*
	* @memberof order.VoidedLineItem
	* @param {order.ClientEventType} clientEventType 
	*/
	VoidedLineItem.prototype.setClientEventType = function(clientEventType) {
	  this.clientEventType = clientEventType;
	};

	/**
	* Get the field value
	* What event on the client removed this? Was it because of moving a table? Or was it plain old deleting a line item?
	* @memberof order.VoidedLineItem
	* @return {order.ClientEventType} 
	*/
	VoidedLineItem.prototype.getClientEventType = function() {
	  return this.clientEventType;
	};

	/**
	* @memberof order.VoidedLineItem
	* @private
	*/
	VoidedLineItem.prototype.getMetaInfo = function(fieldName) {
	  var curclass = this._class_;
	  do {
	    var fieldMetaInfo = curclass._meta_.fields[fieldName];
	    if(fieldMetaInfo) {
	      return fieldMetaInfo;
	    }
	    if(curclass._meta_._superMeta_) {
	      curclass = curclass._meta_._superMeta_._class_;
	    } else {
	      curclass = null;
	    }
	  } while(curclass);
	  return null;
	};

	VoidedLineItem.prototype.toString = function() {
	  return JSON.stringify(this);
	};

	VoidedLineItem._meta_ =  {fields:  {}};
	VoidedLineItem._meta_._class_ =  VoidedLineItem;
	VoidedLineItem._meta_.fields["lineItem"] = {};
	VoidedLineItem._meta_.fields["lineItem"].type = order_LineItem;
	VoidedLineItem._meta_.fields["merchant"] = {};
	VoidedLineItem._meta_.fields["merchant"].type = base_Reference;
	VoidedLineItem._meta_.fields["reason"] = {};
	VoidedLineItem._meta_.fields["reason"].type = String;
	VoidedLineItem._meta_.fields["removedBy"] = {};
	VoidedLineItem._meta_.fields["removedBy"].type = base_Reference;
	VoidedLineItem._meta_.fields["createdBy"] = {};
	VoidedLineItem._meta_.fields["createdBy"].type = base_Reference;
	VoidedLineItem._meta_.fields["deletedTime"] = {};
	VoidedLineItem._meta_.fields["deletedTime"].type = Number;
	VoidedLineItem._meta_.fields["environment"] = {};
	VoidedLineItem._meta_.fields["environment"].type = String;
	VoidedLineItem._meta_.fields["clientEventType"] = {};
	VoidedLineItem._meta_.fields["clientEventType"].type = order_ClientEventType;

	//
	// Expose the module.
	//
	if (true) {
	module.exports = VoidedLineItem;
	}



/***/ }),
/* 997 */
/***/ (function(module, exports, __webpack_require__) {

	
	module.exports.order = order;
	/**
	* @namespace order
	*/
	function order() {}
	order.operation = {}


	order.ClientEventType = __webpack_require__(406);
	order.CreateLineItemsRequest = __webpack_require__(986);
	order.CustomerIdMethod = __webpack_require__(407);
	order.Discount = __webpack_require__(242);
	order.DisplayDiscount = __webpack_require__(156);
	order.DisplayLineItem = __webpack_require__(243);
	order.DisplayModification = __webpack_require__(408);
	order.DisplayOrder = __webpack_require__(409);
	order.DisplayPayment = __webpack_require__(410);
	order.FireOrder = __webpack_require__(987);
	order.HoursAvailable = __webpack_require__(411);
	order.LineItem = __webpack_require__(157);
	order.LineItemTaxRates = __webpack_require__(988);
	order.Modification = __webpack_require__(412);
	order.Order = __webpack_require__(68);
	order.OrderExpansion = __webpack_require__(989);
	order.OrderTaxRate = __webpack_require__(990);
	order.OrderType = __webpack_require__(244);
	order.OrderTypeCategory = __webpack_require__(991);
	order.OverrideInfo = __webpack_require__(992);
	order.PayType = __webpack_require__(413);
	order.PaymentState = __webpack_require__(414);
	order.PrintGroup = __webpack_require__(415);
	order.PrintOrder = __webpack_require__(993);
	order.PrintState = __webpack_require__(416);
	order.SendReceiptRequest = __webpack_require__(994);
	order.SystemOrderType = __webpack_require__(995);
	order.VoidReason = __webpack_require__(87);
	order.VoidedLineItem = __webpack_require__(996);
	order.operation.DiscountsAddedOperation = __webpack_require__(417);
	order.operation.DiscountsDeletedOperation = __webpack_require__(418);
	order.operation.LineItemsAddedOperation = __webpack_require__(419);
	order.operation.LineItemsDeletedOperation = __webpack_require__(420);
	order.operation.OrderDeletedOperation = __webpack_require__(421);

	//
	// Expose the module.
	//
	if (true) {
	  module.exports = order;
	}
	    

/***/ }),
/* 998 */
/***/ (function(module, exports, __webpack_require__) {

	
	module.exports.pay = pay;
	/**
	* @namespace pay
	*/
	function pay() {}


	pay.CardFunction = __webpack_require__(422);
	pay.ErrorCode = __webpack_require__(423);
	pay.GwTxResult = __webpack_require__(424);
	pay.PaymentRequestCardDetails = __webpack_require__(158);
	pay.ServiceCode1 = __webpack_require__(425);
	pay.ServiceCode2 = __webpack_require__(426);
	pay.ServiceCode3 = __webpack_require__(427);
	pay.TransactionData = __webpack_require__(428);
	pay.TxResult = __webpack_require__(429);

	//
	// Expose the module.
	//
	if (true) {
	  module.exports = pay;
	}
	    

/***/ }),
/* 999 */
/***/ (function(module, exports, __webpack_require__) {

	/**
	 * Autogenerated by Avro
	 * 
	 * DO NOT EDIT DIRECTLY
	 */


	/**
	* @constructor
	* @memberof payments
	*/
	var BatchRequest = function() {
	  this._class_ = BatchRequest;
	  this.devices = undefined;
	};


	/**
	* Set the field value
	* @memberof payments.BatchRequest
	* @param {Array.<String>} devices An array of 
	*/
	BatchRequest.prototype.setDevices = function(devices) {
	  this.devices = devices;
	};

	/**
	* Get the field value
	* @memberof payments.BatchRequest
	* @return {Array.<String>} An array of 
	*/
	BatchRequest.prototype.getDevices = function() {
	  return this.devices;
	};

	/**
	* @memberof payments.BatchRequest
	* @private
	*/
	BatchRequest.prototype.getMetaInfo = function(fieldName) {
	  var curclass = this._class_;
	  do {
	    var fieldMetaInfo = curclass._meta_.fields[fieldName];
	    if(fieldMetaInfo) {
	      return fieldMetaInfo;
	    }
	    if(curclass._meta_._superMeta_) {
	      curclass = curclass._meta_._superMeta_._class_;
	    } else {
	      curclass = null;
	    }
	  } while(curclass);
	  return null;
	};

	BatchRequest.prototype.toString = function() {
	  return JSON.stringify(this);
	};

	BatchRequest._meta_ =  {fields:  {}};
	BatchRequest._meta_._class_ =  BatchRequest;
	BatchRequest._meta_.fields["devices"] = {};
	BatchRequest._meta_.fields["devices"].type = Array;

	//
	// Expose the module.
	//
	if (true) {
	module.exports = BatchRequest;
	}



/***/ }),
/* 1000 */
/***/ (function(module, exports, __webpack_require__) {

	/**
	 * Autogenerated by Avro
	 * 
	 * DO NOT EDIT DIRECTLY
	 */


	/**
	* @memberof payments
	* @enum {string}
	*/
	var CVVResult = {
	  SUCCESS : "SUCCESS",
	  FAILURE : "FAILURE",
	  NOT_PROCESSED : "NOT_PROCESSED",
	  NOT_PRESENT : "NOT_PRESENT"
	};


	//
	// Expose the module.
	//
	if (true) {
	module.exports = CVVResult;
	}



/***/ }),
/* 1001 */
/***/ (function(module, exports, __webpack_require__) {

	/**
	 * Autogenerated by Avro
	 * 
	 * DO NOT EDIT DIRECTLY
	 */

	var payments_CardlessPaymentDataType = __webpack_require__(438);
	var payments_CardlessPaymentNetwork = __webpack_require__(439);

	/** Data for a payment that is processed using a QR code or barcode. */
	/**
	* @constructor
	* @memberof payments
	*/
	var CardlessPaymentData = function() {
	  this._class_ = CardlessPaymentData;
	  this.paymentNetwork = undefined;
	  this.paymentType = undefined;
	  this.paymentData = undefined;
	};


	/**
	* Set the field value
	* Payment network
	*
	* @memberof payments.CardlessPaymentData
	* @param {payments.CardlessPaymentNetwork} paymentNetwork 
	*/
	CardlessPaymentData.prototype.setPaymentNetwork = function(paymentNetwork) {
	  this.paymentNetwork = paymentNetwork;
	};

	/**
	* Get the field value
	* Payment network
	* @memberof payments.CardlessPaymentData
	* @return {payments.CardlessPaymentNetwork} 
	*/
	CardlessPaymentData.prototype.getPaymentNetwork = function() {
	  return this.paymentNetwork;
	};

	/**
	* Set the field value
	* Payment method
	*
	* @memberof payments.CardlessPaymentData
	* @param {payments.CardlessPaymentDataType} paymentType 
	*/
	CardlessPaymentData.prototype.setPaymentType = function(paymentType) {
	  this.paymentType = paymentType;
	};

	/**
	* Get the field value
	* Payment method
	* @memberof payments.CardlessPaymentData
	* @return {payments.CardlessPaymentDataType} 
	*/
	CardlessPaymentData.prototype.getPaymentType = function() {
	  return this.paymentType;
	};

	/**
	* Set the field value
	* QR code or barcode data
	*
	* @memberof payments.CardlessPaymentData
	* @param {String} paymentData 
	*/
	CardlessPaymentData.prototype.setPaymentData = function(paymentData) {
	  this.paymentData = paymentData;
	};

	/**
	* Get the field value
	* QR code or barcode data
	* @memberof payments.CardlessPaymentData
	* @return {String} 
	*/
	CardlessPaymentData.prototype.getPaymentData = function() {
	  return this.paymentData;
	};

	/**
	* @memberof payments.CardlessPaymentData
	* @private
	*/
	CardlessPaymentData.prototype.getMetaInfo = function(fieldName) {
	  var curclass = this._class_;
	  do {
	    var fieldMetaInfo = curclass._meta_.fields[fieldName];
	    if(fieldMetaInfo) {
	      return fieldMetaInfo;
	    }
	    if(curclass._meta_._superMeta_) {
	      curclass = curclass._meta_._superMeta_._class_;
	    } else {
	      curclass = null;
	    }
	  } while(curclass);
	  return null;
	};

	CardlessPaymentData.prototype.toString = function() {
	  return JSON.stringify(this);
	};

	CardlessPaymentData._meta_ =  {fields:  {}};
	CardlessPaymentData._meta_._class_ =  CardlessPaymentData;
	CardlessPaymentData._meta_.fields["paymentNetwork"] = {};
	CardlessPaymentData._meta_.fields["paymentNetwork"].type = payments_CardlessPaymentNetwork;
	CardlessPaymentData._meta_.fields["paymentType"] = {};
	CardlessPaymentData._meta_.fields["paymentType"].type = payments_CardlessPaymentDataType;
	CardlessPaymentData._meta_.fields["paymentData"] = {};
	CardlessPaymentData._meta_.fields["paymentData"].type = String;

	//
	// Expose the module.
	//
	if (true) {
	module.exports = CardlessPaymentData;
	}



/***/ }),
/* 1002 */
/***/ (function(module, exports, __webpack_require__) {

	/**
	 * Autogenerated by Avro
	 * 
	 * DO NOT EDIT DIRECTLY
	 */

	var payments_CreditRefund = __webpack_require__(162);

	/**
	* @constructor
	* @memberof payments
	*/
	var CreditRefundResponse = function() {
	  this._class_ = CreditRefundResponse;
	  this.requestSuccessful = undefined;
	  this.responseErrorMessage = undefined;
	  this.creditRefund = undefined;
	  this.clientData = undefined;
	};


	/**
	* Set the field value
	* @memberof payments.CreditRefundResponse
	* @param {Boolean} requestSuccessful 
	*/
	CreditRefundResponse.prototype.setRequestSuccessful = function(requestSuccessful) {
	  this.requestSuccessful = requestSuccessful;
	};

	/**
	* Get the field value
	* @memberof payments.CreditRefundResponse
	* @return {Boolean} 
	*/
	CreditRefundResponse.prototype.getRequestSuccessful = function() {
	  return this.requestSuccessful;
	};

	/**
	* Set the field value
	* @memberof payments.CreditRefundResponse
	* @param {String|Null} responseErrorMessage 
	*/
	CreditRefundResponse.prototype.setResponseErrorMessage = function(responseErrorMessage) {
	  this.responseErrorMessage = responseErrorMessage;
	};

	/**
	* Get the field value
	* @memberof payments.CreditRefundResponse
	* @return {String|Null} 
	*/
	CreditRefundResponse.prototype.getResponseErrorMessage = function() {
	  return this.responseErrorMessage;
	};

	/**
	* Set the field value
	* @memberof payments.CreditRefundResponse
	* @param {payments.CreditRefund|Null} creditRefund 
	*/
	CreditRefundResponse.prototype.setCreditRefund = function(creditRefund) {
	  this.creditRefund = creditRefund;
	};

	/**
	* Get the field value
	* @memberof payments.CreditRefundResponse
	* @return {payments.CreditRefund|Null} 
	*/
	CreditRefundResponse.prototype.getCreditRefund = function() {
	  return this.creditRefund;
	};

	/**
	* Set the field value
	* Additional data sent back from the gateway
	*
	* @memberof payments.CreditRefundResponse
	* @param {Object.<String,String>} clientData A map of <String> to <>
	*/
	CreditRefundResponse.prototype.setClientData = function(clientData) {
	  this.clientData = clientData;
	};

	/**
	* Get the field value
	* Additional data sent back from the gateway
	* @memberof payments.CreditRefundResponse
	* @return {Object.<String,String>} A map of <String> to <>
	*/
	CreditRefundResponse.prototype.getClientData = function() {
	  return this.clientData;
	};

	/**
	* @memberof payments.CreditRefundResponse
	* @private
	*/
	CreditRefundResponse.prototype.getMetaInfo = function(fieldName) {
	  var curclass = this._class_;
	  do {
	    var fieldMetaInfo = curclass._meta_.fields[fieldName];
	    if(fieldMetaInfo) {
	      return fieldMetaInfo;
	    }
	    if(curclass._meta_._superMeta_) {
	      curclass = curclass._meta_._superMeta_._class_;
	    } else {
	      curclass = null;
	    }
	  } while(curclass);
	  return null;
	};

	CreditRefundResponse.prototype.toString = function() {
	  return JSON.stringify(this);
	};

	CreditRefundResponse._meta_ =  {fields:  {}};
	CreditRefundResponse._meta_._class_ =  CreditRefundResponse;
	CreditRefundResponse._meta_.fields["requestSuccessful"] = {};
	CreditRefundResponse._meta_.fields["requestSuccessful"].type = Boolean;
	CreditRefundResponse._meta_.fields["responseErrorMessage"] = {};
	CreditRefundResponse._meta_.fields["responseErrorMessage"].type = String;
	CreditRefundResponse._meta_.fields["creditRefund"] = {};
	CreditRefundResponse._meta_.fields["creditRefund"].type = payments_CreditRefund;
	CreditRefundResponse._meta_.fields["clientData"] = {};
	CreditRefundResponse._meta_.fields["clientData"].type = Object;

	//
	// Expose the module.
	//
	if (true) {
	module.exports = CreditRefundResponse;
	}



/***/ }),
/* 1003 */
/***/ (function(module, exports, __webpack_require__) {

	/**
	 * Autogenerated by Avro
	 * 
	 * DO NOT EDIT DIRECTLY
	 */

	var pay_PaymentRequestCardDetails = __webpack_require__(158);
	var payments_Credit = __webpack_require__(30);

	/**
	* @constructor
	* @memberof payments
	*/
	var CreditRequest = function() {
	  this._class_ = CreditRequest;
	  this.orderId = undefined;
	  this.credit = undefined;
	  this.paymentCard = undefined;
	};


	/**
	* Set the field value
	* Unique identifier of the order with which this payment is associated
	*
	* @memberof payments.CreditRequest
	* @param {String} orderId 
	*/
	CreditRequest.prototype.setOrderId = function(orderId) {
	  this.orderId = orderId;
	};

	/**
	* Get the field value
	* Unique identifier of the order with which this payment is associated
	* @memberof payments.CreditRequest
	* @return {String} 
	*/
	CreditRequest.prototype.getOrderId = function() {
	  return this.orderId;
	};

	/**
	* Set the field value
	* @memberof payments.CreditRequest
	* @param {payments.Credit|Null} credit 
	*/
	CreditRequest.prototype.setCredit = function(credit) {
	  this.credit = credit;
	};

	/**
	* Get the field value
	* @memberof payments.CreditRequest
	* @return {payments.Credit|Null} 
	*/
	CreditRequest.prototype.getCredit = function() {
	  return this.credit;
	};

	/**
	* Set the field value
	* @memberof payments.CreditRequest
	* @param {pay.PaymentRequestCardDetails|Null} paymentCard 
	*/
	CreditRequest.prototype.setPaymentCard = function(paymentCard) {
	  this.paymentCard = paymentCard;
	};

	/**
	* Get the field value
	* @memberof payments.CreditRequest
	* @return {pay.PaymentRequestCardDetails|Null} 
	*/
	CreditRequest.prototype.getPaymentCard = function() {
	  return this.paymentCard;
	};

	/**
	* @memberof payments.CreditRequest
	* @private
	*/
	CreditRequest.prototype.getMetaInfo = function(fieldName) {
	  var curclass = this._class_;
	  do {
	    var fieldMetaInfo = curclass._meta_.fields[fieldName];
	    if(fieldMetaInfo) {
	      return fieldMetaInfo;
	    }
	    if(curclass._meta_._superMeta_) {
	      curclass = curclass._meta_._superMeta_._class_;
	    } else {
	      curclass = null;
	    }
	  } while(curclass);
	  return null;
	};

	CreditRequest.prototype.toString = function() {
	  return JSON.stringify(this);
	};

	CreditRequest._meta_ =  {fields:  {}};
	CreditRequest._meta_._class_ =  CreditRequest;
	CreditRequest._meta_.fields["orderId"] = {};
	CreditRequest._meta_.fields["orderId"].type = String;
	CreditRequest._meta_.fields["credit"] = {};
	CreditRequest._meta_.fields["credit"].type = payments_Credit;
	CreditRequest._meta_.fields["paymentCard"] = {};
	CreditRequest._meta_.fields["paymentCard"].type = pay_PaymentRequestCardDetails;

	//
	// Expose the module.
	//
	if (true) {
	module.exports = CreditRequest;
	}



/***/ }),
/* 1004 */
/***/ (function(module, exports, __webpack_require__) {

	/**
	 * Autogenerated by Avro
	 * 
	 * DO NOT EDIT DIRECTLY
	 */

	var payments_Credit = __webpack_require__(30);

	/**
	* @constructor
	* @memberof payments
	*/
	var CreditResponse = function() {
	  this._class_ = CreditResponse;
	  this.requestSuccessful = undefined;
	  this.responseErrorMessage = undefined;
	  this.credit = undefined;
	  this.clientData = undefined;
	};


	/**
	* Set the field value
	* @memberof payments.CreditResponse
	* @param {Boolean} requestSuccessful 
	*/
	CreditResponse.prototype.setRequestSuccessful = function(requestSuccessful) {
	  this.requestSuccessful = requestSuccessful;
	};

	/**
	* Get the field value
	* @memberof payments.CreditResponse
	* @return {Boolean} 
	*/
	CreditResponse.prototype.getRequestSuccessful = function() {
	  return this.requestSuccessful;
	};

	/**
	* Set the field value
	* @memberof payments.CreditResponse
	* @param {String|Null} responseErrorMessage 
	*/
	CreditResponse.prototype.setResponseErrorMessage = function(responseErrorMessage) {
	  this.responseErrorMessage = responseErrorMessage;
	};

	/**
	* Get the field value
	* @memberof payments.CreditResponse
	* @return {String|Null} 
	*/
	CreditResponse.prototype.getResponseErrorMessage = function() {
	  return this.responseErrorMessage;
	};

	/**
	* Set the field value
	* @memberof payments.CreditResponse
	* @param {payments.Credit|Null} credit 
	*/
	CreditResponse.prototype.setCredit = function(credit) {
	  this.credit = credit;
	};

	/**
	* Get the field value
	* @memberof payments.CreditResponse
	* @return {payments.Credit|Null} 
	*/
	CreditResponse.prototype.getCredit = function() {
	  return this.credit;
	};

	/**
	* Set the field value
	* Additional data sent back from the gateway
	*
	* @memberof payments.CreditResponse
	* @param {Object.<String,String>} clientData A map of <String> to <>
	*/
	CreditResponse.prototype.setClientData = function(clientData) {
	  this.clientData = clientData;
	};

	/**
	* Get the field value
	* Additional data sent back from the gateway
	* @memberof payments.CreditResponse
	* @return {Object.<String,String>} A map of <String> to <>
	*/
	CreditResponse.prototype.getClientData = function() {
	  return this.clientData;
	};

	/**
	* @memberof payments.CreditResponse
	* @private
	*/
	CreditResponse.prototype.getMetaInfo = function(fieldName) {
	  var curclass = this._class_;
	  do {
	    var fieldMetaInfo = curclass._meta_.fields[fieldName];
	    if(fieldMetaInfo) {
	      return fieldMetaInfo;
	    }
	    if(curclass._meta_._superMeta_) {
	      curclass = curclass._meta_._superMeta_._class_;
	    } else {
	      curclass = null;
	    }
	  } while(curclass);
	  return null;
	};

	CreditResponse.prototype.toString = function() {
	  return JSON.stringify(this);
	};

	CreditResponse._meta_ =  {fields:  {}};
	CreditResponse._meta_._class_ =  CreditResponse;
	CreditResponse._meta_.fields["requestSuccessful"] = {};
	CreditResponse._meta_.fields["requestSuccessful"].type = Boolean;
	CreditResponse._meta_.fields["responseErrorMessage"] = {};
	CreditResponse._meta_.fields["responseErrorMessage"].type = String;
	CreditResponse._meta_.fields["credit"] = {};
	CreditResponse._meta_.fields["credit"].type = payments_Credit;
	CreditResponse._meta_.fields["clientData"] = {};
	CreditResponse._meta_.fields["clientData"].type = Object;

	//
	// Expose the module.
	//
	if (true) {
	module.exports = CreditResponse;
	}



/***/ }),
/* 1005 */
/***/ (function(module, exports, __webpack_require__) {

	/**
	 * Autogenerated by Avro
	 * 
	 * DO NOT EDIT DIRECTLY
	 */

	var base_Reference = __webpack_require__(5);

	/** The information related to a discount and who approved it for a specific line item on an order or entire order. Used for reporting.  */
	/**
	* @constructor
	* @memberof payments
	*/
	var DiscountApprover = function() {
	  this._class_ = DiscountApprover;
	  this.discount = undefined;
	  this.merchant = undefined;
	  this.approvedBy = undefined;
	  this.order = undefined;
	  this.lineItem = undefined;
	  this.createdTime = undefined;
	  this.environment = undefined;
	};


	/**
	* Set the field value
	* The discount ID and UUID
	*
	* @memberof payments.DiscountApprover
	* @param {base.Reference} discount 
	*/
	DiscountApprover.prototype.setDiscount = function(discount) {
	  this.discount = discount;
	};

	/**
	* Get the field value
	* The discount ID and UUID
	* @memberof payments.DiscountApprover
	* @return {base.Reference} 
	*/
	DiscountApprover.prototype.getDiscount = function() {
	  return this.discount;
	};

	/**
	* Set the field value
	* @memberof payments.DiscountApprover
	* @param {base.Reference} merchant 
	*/
	DiscountApprover.prototype.setMerchant = function(merchant) {
	  this.merchant = merchant;
	};

	/**
	* Get the field value
	* @memberof payments.DiscountApprover
	* @return {base.Reference} 
	*/
	DiscountApprover.prototype.getMerchant = function() {
	  return this.merchant;
	};

	/**
	* Set the field value
	* Employee who approved the discount
	*
	* @memberof payments.DiscountApprover
	* @param {base.Reference} approvedBy 
	*/
	DiscountApprover.prototype.setApprovedBy = function(approvedBy) {
	  this.approvedBy = approvedBy;
	};

	/**
	* Get the field value
	* Employee who approved the discount
	* @memberof payments.DiscountApprover
	* @return {base.Reference} 
	*/
	DiscountApprover.prototype.getApprovedBy = function() {
	  return this.approvedBy;
	};

	/**
	* Set the field value
	* The order with which the discount is associated.
	*
	* @memberof payments.DiscountApprover
	* @param {base.Reference} order 
	*/
	DiscountApprover.prototype.setOrder = function(order) {
	  this.order = order;
	};

	/**
	* Get the field value
	* The order with which the discount is associated.
	* @memberof payments.DiscountApprover
	* @return {base.Reference} 
	*/
	DiscountApprover.prototype.getOrder = function() {
	  return this.order;
	};

	/**
	* Set the field value
	* The lineItem with which the discount is associated
	*
	* @memberof payments.DiscountApprover
	* @param {Null|base.Reference} lineItem 
	*/
	DiscountApprover.prototype.setLineItem = function(lineItem) {
	  this.lineItem = lineItem;
	};

	/**
	* Get the field value
	* The lineItem with which the discount is associated
	* @memberof payments.DiscountApprover
	* @return {Null|base.Reference} 
	*/
	DiscountApprover.prototype.getLineItem = function() {
	  return this.lineItem;
	};

	/**
	* Set the field value
	* @memberof payments.DiscountApprover
	* @param {Number} createdTime must be a long integer
	*/
	DiscountApprover.prototype.setCreatedTime = function(createdTime) {
	  this.createdTime = createdTime;
	};

	/**
	* Get the field value
	* @memberof payments.DiscountApprover
	* @return {Number} must be a long integer
	*/
	DiscountApprover.prototype.getCreatedTime = function() {
	  return this.createdTime;
	};

	/**
	* Set the field value
	* Which environment was this recorded in
	*
	* @memberof payments.DiscountApprover
	* @param {Null|String} environment 
	*/
	DiscountApprover.prototype.setEnvironment = function(environment) {
	  this.environment = environment;
	};

	/**
	* Get the field value
	* Which environment was this recorded in
	* @memberof payments.DiscountApprover
	* @return {Null|String} 
	*/
	DiscountApprover.prototype.getEnvironment = function() {
	  return this.environment;
	};

	/**
	* @memberof payments.DiscountApprover
	* @private
	*/
	DiscountApprover.prototype.getMetaInfo = function(fieldName) {
	  var curclass = this._class_;
	  do {
	    var fieldMetaInfo = curclass._meta_.fields[fieldName];
	    if(fieldMetaInfo) {
	      return fieldMetaInfo;
	    }
	    if(curclass._meta_._superMeta_) {
	      curclass = curclass._meta_._superMeta_._class_;
	    } else {
	      curclass = null;
	    }
	  } while(curclass);
	  return null;
	};

	DiscountApprover.prototype.toString = function() {
	  return JSON.stringify(this);
	};

	DiscountApprover._meta_ =  {fields:  {}};
	DiscountApprover._meta_._class_ =  DiscountApprover;
	DiscountApprover._meta_.fields["discount"] = {};
	DiscountApprover._meta_.fields["discount"].type = base_Reference;
	DiscountApprover._meta_.fields["merchant"] = {};
	DiscountApprover._meta_.fields["merchant"].type = base_Reference;
	DiscountApprover._meta_.fields["approvedBy"] = {};
	DiscountApprover._meta_.fields["approvedBy"].type = base_Reference;
	DiscountApprover._meta_.fields["order"] = {};
	DiscountApprover._meta_.fields["order"].type = base_Reference;
	DiscountApprover._meta_.fields["lineItem"] = {};
	DiscountApprover._meta_.fields["lineItem"].type = base_Reference;
	DiscountApprover._meta_.fields["createdTime"] = {};
	DiscountApprover._meta_.fields["createdTime"].type = Number;
	DiscountApprover._meta_.fields["environment"] = {};
	DiscountApprover._meta_.fields["environment"].type = String;

	//
	// Expose the module.
	//
	if (true) {
	module.exports = DiscountApprover;
	}



/***/ }),
/* 1006 */
/***/ (function(module, exports, __webpack_require__) {

	/**
	 * Autogenerated by Avro
	 * 
	 * DO NOT EDIT DIRECTLY
	 */

	var payments_BatchType = __webpack_require__(248);
	var payments_BatchState = __webpack_require__(247);

	/**
	* @constructor
	* @memberof payments
	*/
	var FailedBatchSettlement = function() {
	  this._class_ = FailedBatchSettlement;
	  this.merchantName = undefined;
	  this.mid = undefined;
	  this.cid = undefined;
	  this.batchId = undefined;
	  this.txCount = undefined;
	  this.state = undefined;
	  this.batchType = undefined;
	  this.createdTime = undefined;
	  this.retries = undefined;
	};


	/**
	* Set the field value
	* @memberof payments.FailedBatchSettlement
	* @param {String} merchantName 
	*/
	FailedBatchSettlement.prototype.setMerchantName = function(merchantName) {
	  this.merchantName = merchantName;
	};

	/**
	* Get the field value
	* @memberof payments.FailedBatchSettlement
	* @return {String} 
	*/
	FailedBatchSettlement.prototype.getMerchantName = function() {
	  return this.merchantName;
	};

	/**
	* Set the field value
	* @memberof payments.FailedBatchSettlement
	* @param {String} mid 
	*/
	FailedBatchSettlement.prototype.setMid = function(mid) {
	  this.mid = mid;
	};

	/**
	* Get the field value
	* @memberof payments.FailedBatchSettlement
	* @return {String} 
	*/
	FailedBatchSettlement.prototype.getMid = function() {
	  return this.mid;
	};

	/**
	* Set the field value
	* @memberof payments.FailedBatchSettlement
	* @param {String} cid 
	*/
	FailedBatchSettlement.prototype.setCid = function(cid) {
	  this.cid = cid;
	};

	/**
	* Get the field value
	* @memberof payments.FailedBatchSettlement
	* @return {String} 
	*/
	FailedBatchSettlement.prototype.getCid = function() {
	  return this.cid;
	};

	/**
	* Set the field value
	* @memberof payments.FailedBatchSettlement
	* @param {String} batchId 
	*/
	FailedBatchSettlement.prototype.setBatchId = function(batchId) {
	  this.batchId = batchId;
	};

	/**
	* Get the field value
	* @memberof payments.FailedBatchSettlement
	* @return {String} 
	*/
	FailedBatchSettlement.prototype.getBatchId = function() {
	  return this.batchId;
	};

	/**
	* Set the field value
	* @memberof payments.FailedBatchSettlement
	* @param {Number} txCount must be an integer
	*/
	FailedBatchSettlement.prototype.setTxCount = function(txCount) {
	  this.txCount = txCount;
	};

	/**
	* Get the field value
	* @memberof payments.FailedBatchSettlement
	* @return {Number} must be an integer
	*/
	FailedBatchSettlement.prototype.getTxCount = function() {
	  return this.txCount;
	};

	/**
	* Set the field value
	* @memberof payments.FailedBatchSettlement
	* @param {payments.BatchState} state 
	*/
	FailedBatchSettlement.prototype.setState = function(state) {
	  this.state = state;
	};

	/**
	* Get the field value
	* @memberof payments.FailedBatchSettlement
	* @return {payments.BatchState} 
	*/
	FailedBatchSettlement.prototype.getState = function() {
	  return this.state;
	};

	/**
	* Set the field value
	* @memberof payments.FailedBatchSettlement
	* @param {payments.BatchType} batchType 
	*/
	FailedBatchSettlement.prototype.setBatchType = function(batchType) {
	  this.batchType = batchType;
	};

	/**
	* Get the field value
	* @memberof payments.FailedBatchSettlement
	* @return {payments.BatchType} 
	*/
	FailedBatchSettlement.prototype.getBatchType = function() {
	  return this.batchType;
	};

	/**
	* Set the field value
	* @memberof payments.FailedBatchSettlement
	* @param {Number} createdTime must be a long integer
	*/
	FailedBatchSettlement.prototype.setCreatedTime = function(createdTime) {
	  this.createdTime = createdTime;
	};

	/**
	* Get the field value
	* @memberof payments.FailedBatchSettlement
	* @return {Number} must be a long integer
	*/
	FailedBatchSettlement.prototype.getCreatedTime = function() {
	  return this.createdTime;
	};

	/**
	* Set the field value
	* @memberof payments.FailedBatchSettlement
	* @param {Number} retries must be an integer
	*/
	FailedBatchSettlement.prototype.setRetries = function(retries) {
	  this.retries = retries;
	};

	/**
	* Get the field value
	* @memberof payments.FailedBatchSettlement
	* @return {Number} must be an integer
	*/
	FailedBatchSettlement.prototype.getRetries = function() {
	  return this.retries;
	};

	/**
	* @memberof payments.FailedBatchSettlement
	* @private
	*/
	FailedBatchSettlement.prototype.getMetaInfo = function(fieldName) {
	  var curclass = this._class_;
	  do {
	    var fieldMetaInfo = curclass._meta_.fields[fieldName];
	    if(fieldMetaInfo) {
	      return fieldMetaInfo;
	    }
	    if(curclass._meta_._superMeta_) {
	      curclass = curclass._meta_._superMeta_._class_;
	    } else {
	      curclass = null;
	    }
	  } while(curclass);
	  return null;
	};

	FailedBatchSettlement.prototype.toString = function() {
	  return JSON.stringify(this);
	};

	FailedBatchSettlement._meta_ =  {fields:  {}};
	FailedBatchSettlement._meta_._class_ =  FailedBatchSettlement;
	FailedBatchSettlement._meta_.fields["merchantName"] = {};
	FailedBatchSettlement._meta_.fields["merchantName"].type = String;
	FailedBatchSettlement._meta_.fields["mid"] = {};
	FailedBatchSettlement._meta_.fields["mid"].type = String;
	FailedBatchSettlement._meta_.fields["cid"] = {};
	FailedBatchSettlement._meta_.fields["cid"].type = String;
	FailedBatchSettlement._meta_.fields["batchId"] = {};
	FailedBatchSettlement._meta_.fields["batchId"].type = String;
	FailedBatchSettlement._meta_.fields["txCount"] = {};
	FailedBatchSettlement._meta_.fields["txCount"].type = Number;
	FailedBatchSettlement._meta_.fields["state"] = {};
	FailedBatchSettlement._meta_.fields["state"].type = payments_BatchState;
	FailedBatchSettlement._meta_.fields["batchType"] = {};
	FailedBatchSettlement._meta_.fields["batchType"].type = payments_BatchType;
	FailedBatchSettlement._meta_.fields["createdTime"] = {};
	FailedBatchSettlement._meta_.fields["createdTime"].type = Number;
	FailedBatchSettlement._meta_.fields["retries"] = {};
	FailedBatchSettlement._meta_.fields["retries"].type = Number;

	//
	// Expose the module.
	//
	if (true) {
	module.exports = FailedBatchSettlement;
	}



/***/ }),
/* 1007 */
/***/ (function(module, exports, __webpack_require__) {

	/**
	 * Autogenerated by Avro
	 * 
	 * DO NOT EDIT DIRECTLY
	 */

	var payments_FraudResponseAction = __webpack_require__(252);

	/**
	* @constructor
	* @memberof payments
	*/
	var FraudResponseReason = function() {
	  this._class_ = FraudResponseReason;
	  this.action = undefined;
	  this.ruleTriggered = undefined;
	  this.reason = undefined;
	};


	/**
	* Set the field value
	* @memberof payments.FraudResponseReason
	* @param {payments.FraudResponseAction} action 
	*/
	FraudResponseReason.prototype.setAction = function(action) {
	  this.action = action;
	};

	/**
	* Get the field value
	* @memberof payments.FraudResponseReason
	* @return {payments.FraudResponseAction} 
	*/
	FraudResponseReason.prototype.getAction = function() {
	  return this.action;
	};

	/**
	* Set the field value
	* Rule that triggered this action
	*
	* @memberof payments.FraudResponseReason
	* @param {String} ruleTriggered 
	*/
	FraudResponseReason.prototype.setRuleTriggered = function(ruleTriggered) {
	  this.ruleTriggered = ruleTriggered;
	};

	/**
	* Get the field value
	* Rule that triggered this action
	* @memberof payments.FraudResponseReason
	* @return {String} 
	*/
	FraudResponseReason.prototype.getRuleTriggered = function() {
	  return this.ruleTriggered;
	};

	/**
	* Set the field value
	* Human readable reason associated with the rule
	*
	* @memberof payments.FraudResponseReason
	* @param {String} reason 
	*/
	FraudResponseReason.prototype.setReason = function(reason) {
	  this.reason = reason;
	};

	/**
	* Get the field value
	* Human readable reason associated with the rule
	* @memberof payments.FraudResponseReason
	* @return {String} 
	*/
	FraudResponseReason.prototype.getReason = function() {
	  return this.reason;
	};

	/**
	* @memberof payments.FraudResponseReason
	* @private
	*/
	FraudResponseReason.prototype.getMetaInfo = function(fieldName) {
	  var curclass = this._class_;
	  do {
	    var fieldMetaInfo = curclass._meta_.fields[fieldName];
	    if(fieldMetaInfo) {
	      return fieldMetaInfo;
	    }
	    if(curclass._meta_._superMeta_) {
	      curclass = curclass._meta_._superMeta_._class_;
	    } else {
	      curclass = null;
	    }
	  } while(curclass);
	  return null;
	};

	FraudResponseReason.prototype.toString = function() {
	  return JSON.stringify(this);
	};

	FraudResponseReason._meta_ =  {fields:  {}};
	FraudResponseReason._meta_._class_ =  FraudResponseReason;
	FraudResponseReason._meta_.fields["action"] = {};
	FraudResponseReason._meta_.fields["action"].type = payments_FraudResponseAction;
	FraudResponseReason._meta_.fields["ruleTriggered"] = {};
	FraudResponseReason._meta_.fields["ruleTriggered"].type = String;
	FraudResponseReason._meta_.fields["reason"] = {};
	FraudResponseReason._meta_.fields["reason"].type = String;

	//
	// Expose the module.
	//
	if (true) {
	module.exports = FraudResponseReason;
	}



/***/ }),
/* 1008 */
/***/ (function(module, exports, __webpack_require__) {

	/**
	 * Autogenerated by Avro
	 * 
	 * DO NOT EDIT DIRECTLY
	 */

	var payments_Currency = __webpack_require__(441);
	var payments_CardType = __webpack_require__(69);
	var payments_CardEntryType = __webpack_require__(119);
	var payments_GatewayTxState = __webpack_require__(253);
	var payments_GatewayTxType = __webpack_require__(447);

	/**
	* @constructor
	* @memberof payments
	*/
	var GatewayTxs = function() {
	  this._class_ = GatewayTxs;
	  this.merchantGatewayId = undefined;
	  this.clientId = undefined;
	  this.amount = undefined;
	  this.adjustAmount = undefined;
	  this.taxAmount = undefined;
	  this.tipAmount = undefined;
	  this.refundTaxAmount = undefined;
	  this.currency = undefined;
	  this.state = undefined;
	  this.retries = undefined;
	  this.type = undefined;
	  this.entryType = undefined;
	  this.responseCode = undefined;
	  this.responseMessage = undefined;
	  this.first4 = undefined;
	  this.last4 = undefined;
	  this.cardType = undefined;
	  this.refnum = undefined;
	  this.token = undefined;
	  this.authcode = undefined;
	  this.employeeId = undefined;
	  this.extra = undefined;
	  this.captured = undefined;
	  this.swiperSerial = undefined;
	  this.ksnPrefix = undefined;
	  this.createdTime = undefined;
	  this.modifiedTime = undefined;
	  this.refundId = undefined;
	  this.paymentRefundId = undefined;
	  this.extraGatewayInfo = undefined;
	  this.refundDeviceId = undefined;
	  this.paymentDeviceId = undefined;
	  this.paymentUuid = undefined;
	  this.refundUuid = undefined;
	  this.creditUuid = undefined;
	};


	/**
	* Set the field value
	* @memberof payments.GatewayTxs
	* @param {Number} merchantGatewayId must be a long integer
	*/
	GatewayTxs.prototype.setMerchantGatewayId = function(merchantGatewayId) {
	  this.merchantGatewayId = merchantGatewayId;
	};

	/**
	* Get the field value
	* @memberof payments.GatewayTxs
	* @return {Number} must be a long integer
	*/
	GatewayTxs.prototype.getMerchantGatewayId = function() {
	  return this.merchantGatewayId;
	};

	/**
	* Set the field value
	* @memberof payments.GatewayTxs
	* @param {String} clientId 
	*/
	GatewayTxs.prototype.setClientId = function(clientId) {
	  this.clientId = clientId;
	};

	/**
	* Get the field value
	* @memberof payments.GatewayTxs
	* @return {String} 
	*/
	GatewayTxs.prototype.getClientId = function() {
	  return this.clientId;
	};

	/**
	* Set the field value
	* @memberof payments.GatewayTxs
	* @param {Number} amount must be a long integer
	*/
	GatewayTxs.prototype.setAmount = function(amount) {
	  this.amount = amount;
	};

	/**
	* Get the field value
	* @memberof payments.GatewayTxs
	* @return {Number} must be a long integer
	*/
	GatewayTxs.prototype.getAmount = function() {
	  return this.amount;
	};

	/**
	* Set the field value
	* @memberof payments.GatewayTxs
	* @param {Number} adjustAmount must be a long integer
	*/
	GatewayTxs.prototype.setAdjustAmount = function(adjustAmount) {
	  this.adjustAmount = adjustAmount;
	};

	/**
	* Get the field value
	* @memberof payments.GatewayTxs
	* @return {Number} must be a long integer
	*/
	GatewayTxs.prototype.getAdjustAmount = function() {
	  return this.adjustAmount;
	};

	/**
	* Set the field value
	* @memberof payments.GatewayTxs
	* @param {Number} taxAmount must be a long integer
	*/
	GatewayTxs.prototype.setTaxAmount = function(taxAmount) {
	  this.taxAmount = taxAmount;
	};

	/**
	* Get the field value
	* @memberof payments.GatewayTxs
	* @return {Number} must be a long integer
	*/
	GatewayTxs.prototype.getTaxAmount = function() {
	  return this.taxAmount;
	};

	/**
	* Set the field value
	* @memberof payments.GatewayTxs
	* @param {Number} tipAmount must be a long integer
	*/
	GatewayTxs.prototype.setTipAmount = function(tipAmount) {
	  this.tipAmount = tipAmount;
	};

	/**
	* Get the field value
	* @memberof payments.GatewayTxs
	* @return {Number} must be a long integer
	*/
	GatewayTxs.prototype.getTipAmount = function() {
	  return this.tipAmount;
	};

	/**
	* Set the field value
	* @memberof payments.GatewayTxs
	* @param {Number} refundTaxAmount must be a long integer
	*/
	GatewayTxs.prototype.setRefundTaxAmount = function(refundTaxAmount) {
	  this.refundTaxAmount = refundTaxAmount;
	};

	/**
	* Get the field value
	* @memberof payments.GatewayTxs
	* @return {Number} must be a long integer
	*/
	GatewayTxs.prototype.getRefundTaxAmount = function() {
	  return this.refundTaxAmount;
	};

	/**
	* Set the field value
	* @memberof payments.GatewayTxs
	* @param {payments.Currency} currency 
	*/
	GatewayTxs.prototype.setCurrency = function(currency) {
	  this.currency = currency;
	};

	/**
	* Get the field value
	* @memberof payments.GatewayTxs
	* @return {payments.Currency} 
	*/
	GatewayTxs.prototype.getCurrency = function() {
	  return this.currency;
	};

	/**
	* Set the field value
	* @memberof payments.GatewayTxs
	* @param {payments.GatewayTxState} state 
	*/
	GatewayTxs.prototype.setState = function(state) {
	  this.state = state;
	};

	/**
	* Get the field value
	* @memberof payments.GatewayTxs
	* @return {payments.GatewayTxState} 
	*/
	GatewayTxs.prototype.getState = function() {
	  return this.state;
	};

	/**
	* Set the field value
	* @memberof payments.GatewayTxs
	* @param {Number} retries must be a long integer
	*/
	GatewayTxs.prototype.setRetries = function(retries) {
	  this.retries = retries;
	};

	/**
	* Get the field value
	* @memberof payments.GatewayTxs
	* @return {Number} must be a long integer
	*/
	GatewayTxs.prototype.getRetries = function() {
	  return this.retries;
	};

	/**
	* Set the field value
	* @memberof payments.GatewayTxs
	* @param {payments.GatewayTxType} type 
	*/
	GatewayTxs.prototype.setType = function(type) {
	  this.type = type;
	};

	/**
	* Get the field value
	* @memberof payments.GatewayTxs
	* @return {payments.GatewayTxType} 
	*/
	GatewayTxs.prototype.getType = function() {
	  return this.type;
	};

	/**
	* Set the field value
	* @memberof payments.GatewayTxs
	* @param {payments.CardEntryType} entryType 
	*/
	GatewayTxs.prototype.setEntryType = function(entryType) {
	  this.entryType = entryType;
	};

	/**
	* Get the field value
	* @memberof payments.GatewayTxs
	* @return {payments.CardEntryType} 
	*/
	GatewayTxs.prototype.getEntryType = function() {
	  return this.entryType;
	};

	/**
	* Set the field value
	* @memberof payments.GatewayTxs
	* @param {String} responseCode 
	*/
	GatewayTxs.prototype.setResponseCode = function(responseCode) {
	  this.responseCode = responseCode;
	};

	/**
	* Get the field value
	* @memberof payments.GatewayTxs
	* @return {String} 
	*/
	GatewayTxs.prototype.getResponseCode = function() {
	  return this.responseCode;
	};

	/**
	* Set the field value
	* @memberof payments.GatewayTxs
	* @param {String} responseMessage 
	*/
	GatewayTxs.prototype.setResponseMessage = function(responseMessage) {
	  this.responseMessage = responseMessage;
	};

	/**
	* Get the field value
	* @memberof payments.GatewayTxs
	* @return {String} 
	*/
	GatewayTxs.prototype.getResponseMessage = function() {
	  return this.responseMessage;
	};

	/**
	* Set the field value
	* @memberof payments.GatewayTxs
	* @param {String} first4 
	*/
	GatewayTxs.prototype.setFirst4 = function(first4) {
	  this.first4 = first4;
	};

	/**
	* Get the field value
	* @memberof payments.GatewayTxs
	* @return {String} 
	*/
	GatewayTxs.prototype.getFirst4 = function() {
	  return this.first4;
	};

	/**
	* Set the field value
	* @memberof payments.GatewayTxs
	* @param {String} last4 
	*/
	GatewayTxs.prototype.setLast4 = function(last4) {
	  this.last4 = last4;
	};

	/**
	* Get the field value
	* @memberof payments.GatewayTxs
	* @return {String} 
	*/
	GatewayTxs.prototype.getLast4 = function() {
	  return this.last4;
	};

	/**
	* Set the field value
	* @memberof payments.GatewayTxs
	* @param {payments.CardType} cardType 
	*/
	GatewayTxs.prototype.setCardType = function(cardType) {
	  this.cardType = cardType;
	};

	/**
	* Get the field value
	* @memberof payments.GatewayTxs
	* @return {payments.CardType} 
	*/
	GatewayTxs.prototype.getCardType = function() {
	  return this.cardType;
	};

	/**
	* Set the field value
	* @memberof payments.GatewayTxs
	* @param {String} refnum 
	*/
	GatewayTxs.prototype.setRefnum = function(refnum) {
	  this.refnum = refnum;
	};

	/**
	* Get the field value
	* @memberof payments.GatewayTxs
	* @return {String} 
	*/
	GatewayTxs.prototype.getRefnum = function() {
	  return this.refnum;
	};

	/**
	* Set the field value
	* @memberof payments.GatewayTxs
	* @param {String} token 
	*/
	GatewayTxs.prototype.setToken = function(token) {
	  this.token = token;
	};

	/**
	* Get the field value
	* @memberof payments.GatewayTxs
	* @return {String} 
	*/
	GatewayTxs.prototype.getToken = function() {
	  return this.token;
	};

	/**
	* Set the field value
	* @memberof payments.GatewayTxs
	* @param {String} authcode 
	*/
	GatewayTxs.prototype.setAuthcode = function(authcode) {
	  this.authcode = authcode;
	};

	/**
	* Get the field value
	* @memberof payments.GatewayTxs
	* @return {String} 
	*/
	GatewayTxs.prototype.getAuthcode = function() {
	  return this.authcode;
	};

	/**
	* Set the field value
	* @memberof payments.GatewayTxs
	* @param {String} employeeId 
	*/
	GatewayTxs.prototype.setEmployeeId = function(employeeId) {
	  this.employeeId = employeeId;
	};

	/**
	* Get the field value
	* @memberof payments.GatewayTxs
	* @return {String} 
	*/
	GatewayTxs.prototype.getEmployeeId = function() {
	  return this.employeeId;
	};

	/**
	* Set the field value
	* @memberof payments.GatewayTxs
	* @param {String} extra 
	*/
	GatewayTxs.prototype.setExtra = function(extra) {
	  this.extra = extra;
	};

	/**
	* Get the field value
	* @memberof payments.GatewayTxs
	* @return {String} 
	*/
	GatewayTxs.prototype.getExtra = function() {
	  return this.extra;
	};

	/**
	* Set the field value
	* @memberof payments.GatewayTxs
	* @param {Boolean|Null} captured 
	*/
	GatewayTxs.prototype.setCaptured = function(captured) {
	  this.captured = captured;
	};

	/**
	* Get the field value
	* @memberof payments.GatewayTxs
	* @return {Boolean|Null} 
	*/
	GatewayTxs.prototype.getCaptured = function() {
	  return this.captured;
	};

	/**
	* Set the field value
	* @memberof payments.GatewayTxs
	* @param {String} swiperSerial 
	*/
	GatewayTxs.prototype.setSwiperSerial = function(swiperSerial) {
	  this.swiperSerial = swiperSerial;
	};

	/**
	* Get the field value
	* @memberof payments.GatewayTxs
	* @return {String} 
	*/
	GatewayTxs.prototype.getSwiperSerial = function() {
	  return this.swiperSerial;
	};

	/**
	* Set the field value
	* @memberof payments.GatewayTxs
	* @param {String} ksnPrefix 
	*/
	GatewayTxs.prototype.setKsnPrefix = function(ksnPrefix) {
	  this.ksnPrefix = ksnPrefix;
	};

	/**
	* Get the field value
	* @memberof payments.GatewayTxs
	* @return {String} 
	*/
	GatewayTxs.prototype.getKsnPrefix = function() {
	  return this.ksnPrefix;
	};

	/**
	* Set the field value
	* @memberof payments.GatewayTxs
	* @param {Number} createdTime must be a long integer
	*/
	GatewayTxs.prototype.setCreatedTime = function(createdTime) {
	  this.createdTime = createdTime;
	};

	/**
	* Get the field value
	* @memberof payments.GatewayTxs
	* @return {Number} must be a long integer
	*/
	GatewayTxs.prototype.getCreatedTime = function() {
	  return this.createdTime;
	};

	/**
	* Set the field value
	* @memberof payments.GatewayTxs
	* @param {Number} modifiedTime must be a long integer
	*/
	GatewayTxs.prototype.setModifiedTime = function(modifiedTime) {
	  this.modifiedTime = modifiedTime;
	};

	/**
	* Get the field value
	* @memberof payments.GatewayTxs
	* @return {Number} must be a long integer
	*/
	GatewayTxs.prototype.getModifiedTime = function() {
	  return this.modifiedTime;
	};

	/**
	* Set the field value
	* @memberof payments.GatewayTxs
	* @param {Number|Null} refundId must be a long integer, 
	*/
	GatewayTxs.prototype.setRefundId = function(refundId) {
	  this.refundId = refundId;
	};

	/**
	* Get the field value
	* @memberof payments.GatewayTxs
	* @return {Number|Null} must be a long integer, 
	*/
	GatewayTxs.prototype.getRefundId = function() {
	  return this.refundId;
	};

	/**
	* Set the field value
	* @memberof payments.GatewayTxs
	* @param {Number|Null} paymentRefundId must be a long integer, 
	*/
	GatewayTxs.prototype.setPaymentRefundId = function(paymentRefundId) {
	  this.paymentRefundId = paymentRefundId;
	};

	/**
	* Get the field value
	* @memberof payments.GatewayTxs
	* @return {Number|Null} must be a long integer, 
	*/
	GatewayTxs.prototype.getPaymentRefundId = function() {
	  return this.paymentRefundId;
	};

	/**
	* Set the field value
	* @memberof payments.GatewayTxs
	* @param {Object.<String,String>} extraGatewayInfo A map of <String> to <>
	*/
	GatewayTxs.prototype.setExtraGatewayInfo = function(extraGatewayInfo) {
	  this.extraGatewayInfo = extraGatewayInfo;
	};

	/**
	* Get the field value
	* @memberof payments.GatewayTxs
	* @return {Object.<String,String>} A map of <String> to <>
	*/
	GatewayTxs.prototype.getExtraGatewayInfo = function() {
	  return this.extraGatewayInfo;
	};

	/**
	* Set the field value
	* @memberof payments.GatewayTxs
	* @param {Number|Null} refundDeviceId must be a long integer, 
	*/
	GatewayTxs.prototype.setRefundDeviceId = function(refundDeviceId) {
	  this.refundDeviceId = refundDeviceId;
	};

	/**
	* Get the field value
	* @memberof payments.GatewayTxs
	* @return {Number|Null} must be a long integer, 
	*/
	GatewayTxs.prototype.getRefundDeviceId = function() {
	  return this.refundDeviceId;
	};

	/**
	* Set the field value
	* @memberof payments.GatewayTxs
	* @param {Number|Null} paymentDeviceId must be a long integer, 
	*/
	GatewayTxs.prototype.setPaymentDeviceId = function(paymentDeviceId) {
	  this.paymentDeviceId = paymentDeviceId;
	};

	/**
	* Get the field value
	* @memberof payments.GatewayTxs
	* @return {Number|Null} must be a long integer, 
	*/
	GatewayTxs.prototype.getPaymentDeviceId = function() {
	  return this.paymentDeviceId;
	};

	/**
	* Set the field value
	* @memberof payments.GatewayTxs
	* @param {String} paymentUuid 
	*/
	GatewayTxs.prototype.setPaymentUuid = function(paymentUuid) {
	  this.paymentUuid = paymentUuid;
	};

	/**
	* Get the field value
	* @memberof payments.GatewayTxs
	* @return {String} 
	*/
	GatewayTxs.prototype.getPaymentUuid = function() {
	  return this.paymentUuid;
	};

	/**
	* Set the field value
	* @memberof payments.GatewayTxs
	* @param {String} refundUuid 
	*/
	GatewayTxs.prototype.setRefundUuid = function(refundUuid) {
	  this.refundUuid = refundUuid;
	};

	/**
	* Get the field value
	* @memberof payments.GatewayTxs
	* @return {String} 
	*/
	GatewayTxs.prototype.getRefundUuid = function() {
	  return this.refundUuid;
	};

	/**
	* Set the field value
	* @memberof payments.GatewayTxs
	* @param {String} creditUuid 
	*/
	GatewayTxs.prototype.setCreditUuid = function(creditUuid) {
	  this.creditUuid = creditUuid;
	};

	/**
	* Get the field value
	* @memberof payments.GatewayTxs
	* @return {String} 
	*/
	GatewayTxs.prototype.getCreditUuid = function() {
	  return this.creditUuid;
	};

	/**
	* @memberof payments.GatewayTxs
	* @private
	*/
	GatewayTxs.prototype.getMetaInfo = function(fieldName) {
	  var curclass = this._class_;
	  do {
	    var fieldMetaInfo = curclass._meta_.fields[fieldName];
	    if(fieldMetaInfo) {
	      return fieldMetaInfo;
	    }
	    if(curclass._meta_._superMeta_) {
	      curclass = curclass._meta_._superMeta_._class_;
	    } else {
	      curclass = null;
	    }
	  } while(curclass);
	  return null;
	};

	GatewayTxs.prototype.toString = function() {
	  return JSON.stringify(this);
	};

	GatewayTxs._meta_ =  {fields:  {}};
	GatewayTxs._meta_._class_ =  GatewayTxs;
	GatewayTxs._meta_.fields["merchantGatewayId"] = {};
	GatewayTxs._meta_.fields["merchantGatewayId"].type = Number;
	GatewayTxs._meta_.fields["clientId"] = {};
	GatewayTxs._meta_.fields["clientId"].type = String;
	GatewayTxs._meta_.fields["amount"] = {};
	GatewayTxs._meta_.fields["amount"].type = Number;
	GatewayTxs._meta_.fields["adjustAmount"] = {};
	GatewayTxs._meta_.fields["adjustAmount"].type = Number;
	GatewayTxs._meta_.fields["taxAmount"] = {};
	GatewayTxs._meta_.fields["taxAmount"].type = Number;
	GatewayTxs._meta_.fields["tipAmount"] = {};
	GatewayTxs._meta_.fields["tipAmount"].type = Number;
	GatewayTxs._meta_.fields["refundTaxAmount"] = {};
	GatewayTxs._meta_.fields["refundTaxAmount"].type = Number;
	GatewayTxs._meta_.fields["currency"] = {};
	GatewayTxs._meta_.fields["currency"].type = payments_Currency;
	GatewayTxs._meta_.fields["state"] = {};
	GatewayTxs._meta_.fields["state"].type = payments_GatewayTxState;
	GatewayTxs._meta_.fields["retries"] = {};
	GatewayTxs._meta_.fields["retries"].type = Number;
	GatewayTxs._meta_.fields["type"] = {};
	GatewayTxs._meta_.fields["type"].type = payments_GatewayTxType;
	GatewayTxs._meta_.fields["entryType"] = {};
	GatewayTxs._meta_.fields["entryType"].type = payments_CardEntryType;
	GatewayTxs._meta_.fields["responseCode"] = {};
	GatewayTxs._meta_.fields["responseCode"].type = String;
	GatewayTxs._meta_.fields["responseMessage"] = {};
	GatewayTxs._meta_.fields["responseMessage"].type = String;
	GatewayTxs._meta_.fields["first4"] = {};
	GatewayTxs._meta_.fields["first4"].type = String;
	GatewayTxs._meta_.fields["last4"] = {};
	GatewayTxs._meta_.fields["last4"].type = String;
	GatewayTxs._meta_.fields["cardType"] = {};
	GatewayTxs._meta_.fields["cardType"].type = payments_CardType;
	GatewayTxs._meta_.fields["refnum"] = {};
	GatewayTxs._meta_.fields["refnum"].type = String;
	GatewayTxs._meta_.fields["token"] = {};
	GatewayTxs._meta_.fields["token"].type = String;
	GatewayTxs._meta_.fields["authcode"] = {};
	GatewayTxs._meta_.fields["authcode"].type = String;
	GatewayTxs._meta_.fields["employeeId"] = {};
	GatewayTxs._meta_.fields["employeeId"].type = String;
	GatewayTxs._meta_.fields["extra"] = {};
	GatewayTxs._meta_.fields["extra"].type = String;
	GatewayTxs._meta_.fields["captured"] = {};
	GatewayTxs._meta_.fields["captured"].type = Boolean;
	GatewayTxs._meta_.fields["swiperSerial"] = {};
	GatewayTxs._meta_.fields["swiperSerial"].type = String;
	GatewayTxs._meta_.fields["ksnPrefix"] = {};
	GatewayTxs._meta_.fields["ksnPrefix"].type = String;
	GatewayTxs._meta_.fields["createdTime"] = {};
	GatewayTxs._meta_.fields["createdTime"].type = Number;
	GatewayTxs._meta_.fields["modifiedTime"] = {};
	GatewayTxs._meta_.fields["modifiedTime"].type = Number;
	GatewayTxs._meta_.fields["refundId"] = {};
	GatewayTxs._meta_.fields["refundId"].type = Number;
	GatewayTxs._meta_.fields["paymentRefundId"] = {};
	GatewayTxs._meta_.fields["paymentRefundId"].type = Number;
	GatewayTxs._meta_.fields["extraGatewayInfo"] = {};
	GatewayTxs._meta_.fields["extraGatewayInfo"].type = Object;
	GatewayTxs._meta_.fields["refundDeviceId"] = {};
	GatewayTxs._meta_.fields["refundDeviceId"].type = Number;
	GatewayTxs._meta_.fields["paymentDeviceId"] = {};
	GatewayTxs._meta_.fields["paymentDeviceId"].type = Number;
	GatewayTxs._meta_.fields["paymentUuid"] = {};
	GatewayTxs._meta_.fields["paymentUuid"].type = String;
	GatewayTxs._meta_.fields["refundUuid"] = {};
	GatewayTxs._meta_.fields["refundUuid"].type = String;
	GatewayTxs._meta_.fields["creditUuid"] = {};
	GatewayTxs._meta_.fields["creditUuid"].type = String;

	//
	// Expose the module.
	//
	if (true) {
	module.exports = GatewayTxs;
	}



/***/ }),
/* 1009 */
/***/ (function(module, exports, __webpack_require__) {

	/**
	 * Autogenerated by Avro
	 * 
	 * DO NOT EDIT DIRECTLY
	 */

	var payments_GiftCardState = __webpack_require__(449);
	var payments_Payment = __webpack_require__(11);
	var payments_TxType = __webpack_require__(461);

	/**
	* @constructor
	* @memberof payments
	*/
	var GiftCardResponse = function() {
	  this._class_ = GiftCardResponse;
	  this.txType = undefined;
	  this.state = payments_GiftCardState["INVALID"];
	  this.requestAmount = undefined;
	  this.payment = undefined;
	  this.responseMessage = undefined;
	  this.requestSuccessful = false;
	  this.accountNumber = undefined;
	  this.scv = undefined;
	  this.giftCardTxUuid = undefined;
	  this.transactionId = undefined;
	  this.referenceUuid = undefined;
	  this.authCode = undefined;
	  this.begBal = undefined;
	  this.endBal = undefined;
	  this.holdBal = undefined;
	  this.syncPaymentObject = undefined;
	};


	/**
	* Set the field value
	* @memberof payments.GiftCardResponse
	* @param {payments.TxType} txType 
	*/
	GiftCardResponse.prototype.setTxType = function(txType) {
	  this.txType = txType;
	};

	/**
	* Get the field value
	* @memberof payments.GiftCardResponse
	* @return {payments.TxType} 
	*/
	GiftCardResponse.prototype.getTxType = function() {
	  return this.txType;
	};

	/**
	* Set the field value
	* @memberof payments.GiftCardResponse
	* @param {payments.GiftCardState} state 
	*/
	GiftCardResponse.prototype.setState = function(state) {
	  this.state = state;
	};

	/**
	* Get the field value
	* @memberof payments.GiftCardResponse
	* @return {payments.GiftCardState} 
	*/
	GiftCardResponse.prototype.getState = function() {
	  return this.state;
	};

	/**
	* Set the field value
	* Transaction Amount
	*
	* @memberof payments.GiftCardResponse
	* @param {Number} requestAmount must be a long integer
	*/
	GiftCardResponse.prototype.setRequestAmount = function(requestAmount) {
	  this.requestAmount = requestAmount;
	};

	/**
	* Get the field value
	* Transaction Amount
	* @memberof payments.GiftCardResponse
	* @return {Number} must be a long integer
	*/
	GiftCardResponse.prototype.getRequestAmount = function() {
	  return this.requestAmount;
	};

	/**
	* Set the field value
	* @memberof payments.GiftCardResponse
	* @param {payments.Payment} payment 
	*/
	GiftCardResponse.prototype.setPayment = function(payment) {
	  this.payment = payment;
	};

	/**
	* Get the field value
	* @memberof payments.GiftCardResponse
	* @return {payments.Payment} 
	*/
	GiftCardResponse.prototype.getPayment = function() {
	  return this.payment;
	};

	/**
	* Set the field value
	* @memberof payments.GiftCardResponse
	* @param {String} responseMessage 
	*/
	GiftCardResponse.prototype.setResponseMessage = function(responseMessage) {
	  this.responseMessage = responseMessage;
	};

	/**
	* Get the field value
	* @memberof payments.GiftCardResponse
	* @return {String} 
	*/
	GiftCardResponse.prototype.getResponseMessage = function() {
	  return this.responseMessage;
	};

	/**
	* Set the field value
	* @memberof payments.GiftCardResponse
	* @param {Boolean} requestSuccessful 
	*/
	GiftCardResponse.prototype.setRequestSuccessful = function(requestSuccessful) {
	  this.requestSuccessful = requestSuccessful;
	};

	/**
	* Get the field value
	* @memberof payments.GiftCardResponse
	* @return {Boolean} 
	*/
	GiftCardResponse.prototype.getRequestSuccessful = function() {
	  return this.requestSuccessful;
	};

	/**
	* Set the field value
	* @memberof payments.GiftCardResponse
	* @param {String} accountNumber 
	*/
	GiftCardResponse.prototype.setAccountNumber = function(accountNumber) {
	  this.accountNumber = accountNumber;
	};

	/**
	* Get the field value
	* @memberof payments.GiftCardResponse
	* @return {String} 
	*/
	GiftCardResponse.prototype.getAccountNumber = function() {
	  return this.accountNumber;
	};

	/**
	* Set the field value
	* @memberof payments.GiftCardResponse
	* @param {String} scv 
	*/
	GiftCardResponse.prototype.setScv = function(scv) {
	  this.scv = scv;
	};

	/**
	* Get the field value
	* @memberof payments.GiftCardResponse
	* @return {String} 
	*/
	GiftCardResponse.prototype.getScv = function() {
	  return this.scv;
	};

	/**
	* Set the field value
	* @memberof payments.GiftCardResponse
	* @param {String} giftCardTxUuid 
	*/
	GiftCardResponse.prototype.setGiftCardTxUuid = function(giftCardTxUuid) {
	  this.giftCardTxUuid = giftCardTxUuid;
	};

	/**
	* Get the field value
	* @memberof payments.GiftCardResponse
	* @return {String} 
	*/
	GiftCardResponse.prototype.getGiftCardTxUuid = function() {
	  return this.giftCardTxUuid;
	};

	/**
	* Set the field value
	* @memberof payments.GiftCardResponse
	* @param {String} transactionId 
	*/
	GiftCardResponse.prototype.setTransactionId = function(transactionId) {
	  this.transactionId = transactionId;
	};

	/**
	* Get the field value
	* @memberof payments.GiftCardResponse
	* @return {String} 
	*/
	GiftCardResponse.prototype.getTransactionId = function() {
	  return this.transactionId;
	};

	/**
	* Set the field value
	* @memberof payments.GiftCardResponse
	* @param {String} referenceUuid 
	*/
	GiftCardResponse.prototype.setReferenceUuid = function(referenceUuid) {
	  this.referenceUuid = referenceUuid;
	};

	/**
	* Get the field value
	* @memberof payments.GiftCardResponse
	* @return {String} 
	*/
	GiftCardResponse.prototype.getReferenceUuid = function() {
	  return this.referenceUuid;
	};

	/**
	* Set the field value
	* @memberof payments.GiftCardResponse
	* @param {String} authCode 
	*/
	GiftCardResponse.prototype.setAuthCode = function(authCode) {
	  this.authCode = authCode;
	};

	/**
	* Get the field value
	* @memberof payments.GiftCardResponse
	* @return {String} 
	*/
	GiftCardResponse.prototype.getAuthCode = function() {
	  return this.authCode;
	};

	/**
	* Set the field value
	* @memberof payments.GiftCardResponse
	* @param {Null|Number} begBal must be a long integer
	*/
	GiftCardResponse.prototype.setBegBal = function(begBal) {
	  this.begBal = begBal;
	};

	/**
	* Get the field value
	* @memberof payments.GiftCardResponse
	* @return {Null|Number} must be a long integer
	*/
	GiftCardResponse.prototype.getBegBal = function() {
	  return this.begBal;
	};

	/**
	* Set the field value
	* @memberof payments.GiftCardResponse
	* @param {Null|Number} endBal must be a long integer
	*/
	GiftCardResponse.prototype.setEndBal = function(endBal) {
	  this.endBal = endBal;
	};

	/**
	* Get the field value
	* @memberof payments.GiftCardResponse
	* @return {Null|Number} must be a long integer
	*/
	GiftCardResponse.prototype.getEndBal = function() {
	  return this.endBal;
	};

	/**
	* Set the field value
	* @memberof payments.GiftCardResponse
	* @param {Null|Number} holdBal must be a long integer
	*/
	GiftCardResponse.prototype.setHoldBal = function(holdBal) {
	  this.holdBal = holdBal;
	};

	/**
	* Get the field value
	* @memberof payments.GiftCardResponse
	* @return {Null|Number} must be a long integer
	*/
	GiftCardResponse.prototype.getHoldBal = function() {
	  return this.holdBal;
	};

	/**
	* Set the field value
	* @memberof payments.GiftCardResponse
	* @param {Boolean} syncPaymentObject 
	*/
	GiftCardResponse.prototype.setSyncPaymentObject = function(syncPaymentObject) {
	  this.syncPaymentObject = syncPaymentObject;
	};

	/**
	* Get the field value
	* @memberof payments.GiftCardResponse
	* @return {Boolean} 
	*/
	GiftCardResponse.prototype.getSyncPaymentObject = function() {
	  return this.syncPaymentObject;
	};

	/**
	* @memberof payments.GiftCardResponse
	* @private
	*/
	GiftCardResponse.prototype.getMetaInfo = function(fieldName) {
	  var curclass = this._class_;
	  do {
	    var fieldMetaInfo = curclass._meta_.fields[fieldName];
	    if(fieldMetaInfo) {
	      return fieldMetaInfo;
	    }
	    if(curclass._meta_._superMeta_) {
	      curclass = curclass._meta_._superMeta_._class_;
	    } else {
	      curclass = null;
	    }
	  } while(curclass);
	  return null;
	};

	GiftCardResponse.prototype.toString = function() {
	  return JSON.stringify(this);
	};

	GiftCardResponse._meta_ =  {fields:  {}};
	GiftCardResponse._meta_._class_ =  GiftCardResponse;
	GiftCardResponse._meta_.fields["txType"] = {};
	GiftCardResponse._meta_.fields["txType"].type = payments_TxType;
	GiftCardResponse._meta_.fields["state"] = {};
	GiftCardResponse._meta_.fields["state"].type = payments_GiftCardState;
	GiftCardResponse._meta_.fields["requestAmount"] = {};
	GiftCardResponse._meta_.fields["requestAmount"].type = Number;
	GiftCardResponse._meta_.fields["payment"] = {};
	GiftCardResponse._meta_.fields["payment"].type = payments_Payment;
	GiftCardResponse._meta_.fields["responseMessage"] = {};
	GiftCardResponse._meta_.fields["responseMessage"].type = String;
	GiftCardResponse._meta_.fields["requestSuccessful"] = {};
	GiftCardResponse._meta_.fields["requestSuccessful"].type = Boolean;
	GiftCardResponse._meta_.fields["accountNumber"] = {};
	GiftCardResponse._meta_.fields["accountNumber"].type = String;
	GiftCardResponse._meta_.fields["scv"] = {};
	GiftCardResponse._meta_.fields["scv"].type = String;
	GiftCardResponse._meta_.fields["giftCardTxUuid"] = {};
	GiftCardResponse._meta_.fields["giftCardTxUuid"].type = String;
	GiftCardResponse._meta_.fields["transactionId"] = {};
	GiftCardResponse._meta_.fields["transactionId"].type = String;
	GiftCardResponse._meta_.fields["referenceUuid"] = {};
	GiftCardResponse._meta_.fields["referenceUuid"].type = String;
	GiftCardResponse._meta_.fields["authCode"] = {};
	GiftCardResponse._meta_.fields["authCode"].type = String;
	GiftCardResponse._meta_.fields["begBal"] = {};
	GiftCardResponse._meta_.fields["begBal"].type = Number;
	GiftCardResponse._meta_.fields["endBal"] = {};
	GiftCardResponse._meta_.fields["endBal"].type = Number;
	GiftCardResponse._meta_.fields["holdBal"] = {};
	GiftCardResponse._meta_.fields["holdBal"].type = Number;
	GiftCardResponse._meta_.fields["syncPaymentObject"] = {};
	GiftCardResponse._meta_.fields["syncPaymentObject"].type = Boolean;

	//
	// Expose the module.
	//
	if (true) {
	module.exports = GiftCardResponse;
	}



/***/ }),
/* 1010 */
/***/ (function(module, exports, __webpack_require__) {

	/**
	 * Autogenerated by Avro
	 * 
	 * DO NOT EDIT DIRECTLY
	 */

	var payments_LineItemPayment = __webpack_require__(163);
	var payments_TaxableAmountRate = __webpack_require__(122);
	var payments_ServiceChargeAmount = __webpack_require__(121);
	var payments_GiftCard = __webpack_require__(448);

	/**
	* @constructor
	* @memberof payments
	*/
	var GiftCardTransaction = function() {
	  this._class_ = GiftCardTransaction;
	  this.id = undefined;
	  this.amount = undefined;
	  this.taxAmount = undefined;
	  this.tipAmount = undefined;
	  this.orderId = undefined;
	  this.card = undefined;
	  this.paymentIds = undefined;
	  this.ignorePayment = false;
	  this.serviceChargeAmount = undefined;
	  this.taxableAmountRates = undefined;
	  this.lineItems = undefined;
	  this.employeeId = undefined;
	  this.suppressPayment = "false";
	};


	/**
	* Set the field value
	* UUID
	*
	* @memberof payments.GiftCardTransaction
	* @param {String} id 
	*/
	GiftCardTransaction.prototype.setId = function(id) {
	  this.id = id;
	};

	/**
	* Get the field value
	* UUID
	* @memberof payments.GiftCardTransaction
	* @return {String} 
	*/
	GiftCardTransaction.prototype.getId = function() {
	  return this.id;
	};

	/**
	* Set the field value
	* Transaction Amount
	*
	* @memberof payments.GiftCardTransaction
	* @param {Number} amount must be a long integer
	*/
	GiftCardTransaction.prototype.setAmount = function(amount) {
	  this.amount = amount;
	};

	/**
	* Get the field value
	* Transaction Amount
	* @memberof payments.GiftCardTransaction
	* @return {Number} must be a long integer
	*/
	GiftCardTransaction.prototype.getAmount = function() {
	  return this.amount;
	};

	/**
	* Set the field value
	* Tax Amount
	*
	* @memberof payments.GiftCardTransaction
	* @param {Number} taxAmount must be a long integer
	*/
	GiftCardTransaction.prototype.setTaxAmount = function(taxAmount) {
	  this.taxAmount = taxAmount;
	};

	/**
	* Get the field value
	* Tax Amount
	* @memberof payments.GiftCardTransaction
	* @return {Number} must be a long integer
	*/
	GiftCardTransaction.prototype.getTaxAmount = function() {
	  return this.taxAmount;
	};

	/**
	* Set the field value
	* Tip Amount
	*
	* @memberof payments.GiftCardTransaction
	* @param {Number} tipAmount must be a long integer
	*/
	GiftCardTransaction.prototype.setTipAmount = function(tipAmount) {
	  this.tipAmount = tipAmount;
	};

	/**
	* Get the field value
	* Tip Amount
	* @memberof payments.GiftCardTransaction
	* @return {Number} must be a long integer
	*/
	GiftCardTransaction.prototype.getTipAmount = function() {
	  return this.tipAmount;
	};

	/**
	* Set the field value
	* @memberof payments.GiftCardTransaction
	* @param {String} orderId 
	*/
	GiftCardTransaction.prototype.setOrderId = function(orderId) {
	  this.orderId = orderId;
	};

	/**
	* Get the field value
	* @memberof payments.GiftCardTransaction
	* @return {String} 
	*/
	GiftCardTransaction.prototype.getOrderId = function() {
	  return this.orderId;
	};

	/**
	* Set the field value
	* Gift Card
	*
	* @memberof payments.GiftCardTransaction
	* @param {payments.GiftCard} card 
	*/
	GiftCardTransaction.prototype.setCard = function(card) {
	  this.card = card;
	};

	/**
	* Get the field value
	* Gift Card
	* @memberof payments.GiftCardTransaction
	* @return {payments.GiftCard} 
	*/
	GiftCardTransaction.prototype.getCard = function() {
	  return this.card;
	};

	/**
	* Set the field value
	* @memberof payments.GiftCardTransaction
	* @param {Array.<String>} paymentIds An array of 
	*/
	GiftCardTransaction.prototype.setPaymentIds = function(paymentIds) {
	  this.paymentIds = paymentIds;
	};

	/**
	* Get the field value
	* @memberof payments.GiftCardTransaction
	* @return {Array.<String>} An array of 
	*/
	GiftCardTransaction.prototype.getPaymentIds = function() {
	  return this.paymentIds;
	};

	/**
	* Set the field value
	* @memberof payments.GiftCardTransaction
	* @param {Boolean} ignorePayment 
	*/
	GiftCardTransaction.prototype.setIgnorePayment = function(ignorePayment) {
	  this.ignorePayment = ignorePayment;
	};

	/**
	* Get the field value
	* @memberof payments.GiftCardTransaction
	* @return {Boolean} 
	*/
	GiftCardTransaction.prototype.getIgnorePayment = function() {
	  return this.ignorePayment;
	};

	/**
	* Set the field value
	* @memberof payments.GiftCardTransaction
	* @param {payments.ServiceChargeAmount} serviceChargeAmount 
	*/
	GiftCardTransaction.prototype.setServiceChargeAmount = function(serviceChargeAmount) {
	  this.serviceChargeAmount = serviceChargeAmount;
	};

	/**
	* Get the field value
	* @memberof payments.GiftCardTransaction
	* @return {payments.ServiceChargeAmount} 
	*/
	GiftCardTransaction.prototype.getServiceChargeAmount = function() {
	  return this.serviceChargeAmount;
	};

	/**
	* Set the field value
	* @memberof payments.GiftCardTransaction
	* @param {Array.<payments.TaxableAmountRate>} taxableAmountRates An array of 
	*/
	GiftCardTransaction.prototype.setTaxableAmountRates = function(taxableAmountRates) {
	  this.taxableAmountRates = taxableAmountRates;
	};

	/**
	* Get the field value
	* @memberof payments.GiftCardTransaction
	* @return {Array.<payments.TaxableAmountRate>} An array of 
	*/
	GiftCardTransaction.prototype.getTaxableAmountRates = function() {
	  return this.taxableAmountRates;
	};

	/**
	* Set the field value
	* Payments that were made for this line item
	*
	* @memberof payments.GiftCardTransaction
	* @param {Array.<payments.LineItemPayment>} lineItems An array of 
	*/
	GiftCardTransaction.prototype.setLineItems = function(lineItems) {
	  this.lineItems = lineItems;
	};

	/**
	* Get the field value
	* Payments that were made for this line item
	* @memberof payments.GiftCardTransaction
	* @return {Array.<payments.LineItemPayment>} An array of 
	*/
	GiftCardTransaction.prototype.getLineItems = function() {
	  return this.lineItems;
	};

	/**
	* Set the field value
	* @memberof payments.GiftCardTransaction
	* @param {String} employeeId 
	*/
	GiftCardTransaction.prototype.setEmployeeId = function(employeeId) {
	  this.employeeId = employeeId;
	};

	/**
	* Get the field value
	* @memberof payments.GiftCardTransaction
	* @return {String} 
	*/
	GiftCardTransaction.prototype.getEmployeeId = function() {
	  return this.employeeId;
	};

	/**
	* Set the field value
	* @memberof payments.GiftCardTransaction
	* @param {Boolean} suppressPayment 
	*/
	GiftCardTransaction.prototype.setSuppressPayment = function(suppressPayment) {
	  this.suppressPayment = suppressPayment;
	};

	/**
	* Get the field value
	* @memberof payments.GiftCardTransaction
	* @return {Boolean} 
	*/
	GiftCardTransaction.prototype.getSuppressPayment = function() {
	  return this.suppressPayment;
	};

	/**
	* @memberof payments.GiftCardTransaction
	* @private
	*/
	GiftCardTransaction.prototype.getMetaInfo = function(fieldName) {
	  var curclass = this._class_;
	  do {
	    var fieldMetaInfo = curclass._meta_.fields[fieldName];
	    if(fieldMetaInfo) {
	      return fieldMetaInfo;
	    }
	    if(curclass._meta_._superMeta_) {
	      curclass = curclass._meta_._superMeta_._class_;
	    } else {
	      curclass = null;
	    }
	  } while(curclass);
	  return null;
	};

	GiftCardTransaction.prototype.toString = function() {
	  return JSON.stringify(this);
	};

	GiftCardTransaction._meta_ =  {fields:  {}};
	GiftCardTransaction._meta_._class_ =  GiftCardTransaction;
	GiftCardTransaction._meta_.fields["id"] = {};
	GiftCardTransaction._meta_.fields["id"].type = String;
	GiftCardTransaction._meta_.fields["amount"] = {};
	GiftCardTransaction._meta_.fields["amount"].type = Number;
	GiftCardTransaction._meta_.fields["taxAmount"] = {};
	GiftCardTransaction._meta_.fields["taxAmount"].type = Number;
	GiftCardTransaction._meta_.fields["tipAmount"] = {};
	GiftCardTransaction._meta_.fields["tipAmount"].type = Number;
	GiftCardTransaction._meta_.fields["orderId"] = {};
	GiftCardTransaction._meta_.fields["orderId"].type = String;
	GiftCardTransaction._meta_.fields["card"] = {};
	GiftCardTransaction._meta_.fields["card"].type = payments_GiftCard;
	GiftCardTransaction._meta_.fields["paymentIds"] = {};
	GiftCardTransaction._meta_.fields["paymentIds"].type = Array;
	GiftCardTransaction._meta_.fields["ignorePayment"] = {};
	GiftCardTransaction._meta_.fields["ignorePayment"].type = Boolean;
	GiftCardTransaction._meta_.fields["serviceChargeAmount"] = {};
	GiftCardTransaction._meta_.fields["serviceChargeAmount"].type = payments_ServiceChargeAmount;
	GiftCardTransaction._meta_.fields["taxableAmountRates"] = {};
	GiftCardTransaction._meta_.fields["taxableAmountRates"].type = Array;
	GiftCardTransaction._meta_.fields["taxableAmountRates"].elementType = payments_TaxableAmountRate;
	GiftCardTransaction._meta_.fields["lineItems"] = {};
	GiftCardTransaction._meta_.fields["lineItems"].type = Array;
	GiftCardTransaction._meta_.fields["lineItems"].elementType = payments_LineItemPayment;
	GiftCardTransaction._meta_.fields["employeeId"] = {};
	GiftCardTransaction._meta_.fields["employeeId"].type = String;
	GiftCardTransaction._meta_.fields["suppressPayment"] = {};
	GiftCardTransaction._meta_.fields["suppressPayment"].type = Boolean;

	//
	// Expose the module.
	//
	if (true) {
	module.exports = GiftCardTransaction;
	}



/***/ }),
/* 1011 */
/***/ (function(module, exports, __webpack_require__) {

	/**
	 * Autogenerated by Avro
	 * 
	 * DO NOT EDIT DIRECTLY
	 */


	/**
	* @constructor
	* @memberof payments
	*/
	var PaymentAttribute = function() {
	  this._class_ = PaymentAttribute;
	  this.type = undefined;
	  this.value = undefined;
	};


	/**
	* Set the field value
	* @memberof payments.PaymentAttribute
	* @param {String} type 
	*/
	PaymentAttribute.prototype.setType = function(type) {
	  this.type = type;
	};

	/**
	* Get the field value
	* @memberof payments.PaymentAttribute
	* @return {String} 
	*/
	PaymentAttribute.prototype.getType = function() {
	  return this.type;
	};

	/**
	* Set the field value
	* @memberof payments.PaymentAttribute
	* @param {String} value 
	*/
	PaymentAttribute.prototype.setValue = function(value) {
	  this.value = value;
	};

	/**
	* Get the field value
	* @memberof payments.PaymentAttribute
	* @return {String} 
	*/
	PaymentAttribute.prototype.getValue = function() {
	  return this.value;
	};

	/**
	* @memberof payments.PaymentAttribute
	* @private
	*/
	PaymentAttribute.prototype.getMetaInfo = function(fieldName) {
	  var curclass = this._class_;
	  do {
	    var fieldMetaInfo = curclass._meta_.fields[fieldName];
	    if(fieldMetaInfo) {
	      return fieldMetaInfo;
	    }
	    if(curclass._meta_._superMeta_) {
	      curclass = curclass._meta_._superMeta_._class_;
	    } else {
	      curclass = null;
	    }
	  } while(curclass);
	  return null;
	};

	PaymentAttribute.prototype.toString = function() {
	  return JSON.stringify(this);
	};

	PaymentAttribute._meta_ =  {fields:  {}};
	PaymentAttribute._meta_._class_ =  PaymentAttribute;
	PaymentAttribute._meta_.fields["type"] = {};
	PaymentAttribute._meta_.fields["type"].type = String;
	PaymentAttribute._meta_.fields["value"] = {};
	PaymentAttribute._meta_.fields["value"].type = String;

	//
	// Expose the module.
	//
	if (true) {
	module.exports = PaymentAttribute;
	}



/***/ }),
/* 1012 */
/***/ (function(module, exports, __webpack_require__) {

	/**
	 * Autogenerated by Avro
	 * 
	 * DO NOT EDIT DIRECTLY
	 */

	var payments_Payment = __webpack_require__(11);

	/**
	* @constructor
	* @memberof payments
	*/
	var PaymentResponse = function() {
	  this._class_ = PaymentResponse;
	  this.requestSuccessful = undefined;
	  this.responseErrorMessage = undefined;
	  this.payment = undefined;
	  this.clientData = undefined;
	  this.syncPaymentObject = undefined;
	};


	/**
	* Set the field value
	* @memberof payments.PaymentResponse
	* @param {Boolean} requestSuccessful 
	*/
	PaymentResponse.prototype.setRequestSuccessful = function(requestSuccessful) {
	  this.requestSuccessful = requestSuccessful;
	};

	/**
	* Get the field value
	* @memberof payments.PaymentResponse
	* @return {Boolean} 
	*/
	PaymentResponse.prototype.getRequestSuccessful = function() {
	  return this.requestSuccessful;
	};

	/**
	* Set the field value
	* @memberof payments.PaymentResponse
	* @param {String|Null} responseErrorMessage 
	*/
	PaymentResponse.prototype.setResponseErrorMessage = function(responseErrorMessage) {
	  this.responseErrorMessage = responseErrorMessage;
	};

	/**
	* Get the field value
	* @memberof payments.PaymentResponse
	* @return {String|Null} 
	*/
	PaymentResponse.prototype.getResponseErrorMessage = function() {
	  return this.responseErrorMessage;
	};

	/**
	* Set the field value
	* @memberof payments.PaymentResponse
	* @param {payments.Payment|Null} payment 
	*/
	PaymentResponse.prototype.setPayment = function(payment) {
	  this.payment = payment;
	};

	/**
	* Get the field value
	* @memberof payments.PaymentResponse
	* @return {payments.Payment|Null} 
	*/
	PaymentResponse.prototype.getPayment = function() {
	  return this.payment;
	};

	/**
	* Set the field value
	* Additional data sent back from the gateway
	*
	* @memberof payments.PaymentResponse
	* @param {Object.<String,String>} clientData A map of <String> to <>
	*/
	PaymentResponse.prototype.setClientData = function(clientData) {
	  this.clientData = clientData;
	};

	/**
	* Get the field value
	* Additional data sent back from the gateway
	* @memberof payments.PaymentResponse
	* @return {Object.<String,String>} A map of <String> to <>
	*/
	PaymentResponse.prototype.getClientData = function() {
	  return this.clientData;
	};

	/**
	* Set the field value
	* @memberof payments.PaymentResponse
	* @param {Boolean} syncPaymentObject 
	*/
	PaymentResponse.prototype.setSyncPaymentObject = function(syncPaymentObject) {
	  this.syncPaymentObject = syncPaymentObject;
	};

	/**
	* Get the field value
	* @memberof payments.PaymentResponse
	* @return {Boolean} 
	*/
	PaymentResponse.prototype.getSyncPaymentObject = function() {
	  return this.syncPaymentObject;
	};

	/**
	* @memberof payments.PaymentResponse
	* @private
	*/
	PaymentResponse.prototype.getMetaInfo = function(fieldName) {
	  var curclass = this._class_;
	  do {
	    var fieldMetaInfo = curclass._meta_.fields[fieldName];
	    if(fieldMetaInfo) {
	      return fieldMetaInfo;
	    }
	    if(curclass._meta_._superMeta_) {
	      curclass = curclass._meta_._superMeta_._class_;
	    } else {
	      curclass = null;
	    }
	  } while(curclass);
	  return null;
	};

	PaymentResponse.prototype.toString = function() {
	  return JSON.stringify(this);
	};

	PaymentResponse._meta_ =  {fields:  {}};
	PaymentResponse._meta_._class_ =  PaymentResponse;
	PaymentResponse._meta_.fields["requestSuccessful"] = {};
	PaymentResponse._meta_.fields["requestSuccessful"].type = Boolean;
	PaymentResponse._meta_.fields["responseErrorMessage"] = {};
	PaymentResponse._meta_.fields["responseErrorMessage"].type = String;
	PaymentResponse._meta_.fields["payment"] = {};
	PaymentResponse._meta_.fields["payment"].type = payments_Payment;
	PaymentResponse._meta_.fields["clientData"] = {};
	PaymentResponse._meta_.fields["clientData"].type = Object;
	PaymentResponse._meta_.fields["syncPaymentObject"] = {};
	PaymentResponse._meta_.fields["syncPaymentObject"].type = Boolean;

	//
	// Expose the module.
	//
	if (true) {
	module.exports = PaymentResponse;
	}



/***/ }),
/* 1013 */
/***/ (function(module, exports, __webpack_require__) {

	/**
	 * Autogenerated by Avro
	 * 
	 * DO NOT EDIT DIRECTLY
	 */

	var payments_CardType = __webpack_require__(69);
	var payments_FraudResponseAction = __webpack_require__(252);
	var payments_FraudResponseCodeType = __webpack_require__(446);

	/**
	* @constructor
	* @memberof payments
	*/
	var PaymentResponseFraudSetting = function() {
	  this._class_ = PaymentResponseFraudSetting;
	  this.id = undefined;
	  this.cardType = undefined;
	  this.responseCode = undefined;
	  this.responseCodeType = undefined;
	  this.action = undefined;
	  this.settingName = undefined;
	  this.createdTime = undefined;
	  this.modifiedTime = undefined;
	  this.deletedTime = undefined;
	};


	/**
	* Set the field value
	* Unique identifier
	*
	* @memberof payments.PaymentResponseFraudSetting
	* @param {String} id 
	*/
	PaymentResponseFraudSetting.prototype.setId = function(id) {
	  this.id = id;
	};

	/**
	* Get the field value
	* Unique identifier
	* @memberof payments.PaymentResponseFraudSetting
	* @return {String} 
	*/
	PaymentResponseFraudSetting.prototype.getId = function() {
	  return this.id;
	};

	/**
	* Set the field value
	* @memberof payments.PaymentResponseFraudSetting
	* @param {payments.CardType} cardType 
	*/
	PaymentResponseFraudSetting.prototype.setCardType = function(cardType) {
	  this.cardType = cardType;
	};

	/**
	* Get the field value
	* @memberof payments.PaymentResponseFraudSetting
	* @return {payments.CardType} 
	*/
	PaymentResponseFraudSetting.prototype.getCardType = function() {
	  return this.cardType;
	};

	/**
	* Set the field value
	* @memberof payments.PaymentResponseFraudSetting
	* @param {String} responseCode 
	*/
	PaymentResponseFraudSetting.prototype.setResponseCode = function(responseCode) {
	  this.responseCode = responseCode;
	};

	/**
	* Get the field value
	* @memberof payments.PaymentResponseFraudSetting
	* @return {String} 
	*/
	PaymentResponseFraudSetting.prototype.getResponseCode = function() {
	  return this.responseCode;
	};

	/**
	* Set the field value
	* Type of response code: avs or cvv
	*
	* @memberof payments.PaymentResponseFraudSetting
	* @param {payments.FraudResponseCodeType} responseCodeType 
	*/
	PaymentResponseFraudSetting.prototype.setResponseCodeType = function(responseCodeType) {
	  this.responseCodeType = responseCodeType;
	};

	/**
	* Get the field value
	* Type of response code: avs or cvv
	* @memberof payments.PaymentResponseFraudSetting
	* @return {payments.FraudResponseCodeType} 
	*/
	PaymentResponseFraudSetting.prototype.getResponseCodeType = function() {
	  return this.responseCodeType;
	};

	/**
	* Set the field value
	* Type of fraud response action: whether to void transaction, prompt user whether he/she wants to void it or ignore - do nothing
	*
	* @memberof payments.PaymentResponseFraudSetting
	* @param {payments.FraudResponseAction} action 
	*/
	PaymentResponseFraudSetting.prototype.setAction = function(action) {
	  this.action = action;
	};

	/**
	* Get the field value
	* Type of fraud response action: whether to void transaction, prompt user whether he/she wants to void it or ignore - do nothing
	* @memberof payments.PaymentResponseFraudSetting
	* @return {payments.FraudResponseAction} 
	*/
	PaymentResponseFraudSetting.prototype.getAction = function() {
	  return this.action;
	};

	/**
	* Set the field value
	* @memberof payments.PaymentResponseFraudSetting
	* @param {String} settingName 
	*/
	PaymentResponseFraudSetting.prototype.setSettingName = function(settingName) {
	  this.settingName = settingName;
	};

	/**
	* Get the field value
	* @memberof payments.PaymentResponseFraudSetting
	* @return {String} 
	*/
	PaymentResponseFraudSetting.prototype.getSettingName = function() {
	  return this.settingName;
	};

	/**
	* Set the field value
	* @memberof payments.PaymentResponseFraudSetting
	* @param {Number} createdTime must be a long integer
	*/
	PaymentResponseFraudSetting.prototype.setCreatedTime = function(createdTime) {
	  this.createdTime = createdTime;
	};

	/**
	* Get the field value
	* @memberof payments.PaymentResponseFraudSetting
	* @return {Number} must be a long integer
	*/
	PaymentResponseFraudSetting.prototype.getCreatedTime = function() {
	  return this.createdTime;
	};

	/**
	* Set the field value
	* @memberof payments.PaymentResponseFraudSetting
	* @param {Number} modifiedTime must be a long integer
	*/
	PaymentResponseFraudSetting.prototype.setModifiedTime = function(modifiedTime) {
	  this.modifiedTime = modifiedTime;
	};

	/**
	* Get the field value
	* @memberof payments.PaymentResponseFraudSetting
	* @return {Number} must be a long integer
	*/
	PaymentResponseFraudSetting.prototype.getModifiedTime = function() {
	  return this.modifiedTime;
	};

	/**
	* Set the field value
	* @memberof payments.PaymentResponseFraudSetting
	* @param {Number} deletedTime must be a long integer
	*/
	PaymentResponseFraudSetting.prototype.setDeletedTime = function(deletedTime) {
	  this.deletedTime = deletedTime;
	};

	/**
	* Get the field value
	* @memberof payments.PaymentResponseFraudSetting
	* @return {Number} must be a long integer
	*/
	PaymentResponseFraudSetting.prototype.getDeletedTime = function() {
	  return this.deletedTime;
	};

	/**
	* @memberof payments.PaymentResponseFraudSetting
	* @private
	*/
	PaymentResponseFraudSetting.prototype.getMetaInfo = function(fieldName) {
	  var curclass = this._class_;
	  do {
	    var fieldMetaInfo = curclass._meta_.fields[fieldName];
	    if(fieldMetaInfo) {
	      return fieldMetaInfo;
	    }
	    if(curclass._meta_._superMeta_) {
	      curclass = curclass._meta_._superMeta_._class_;
	    } else {
	      curclass = null;
	    }
	  } while(curclass);
	  return null;
	};

	PaymentResponseFraudSetting.prototype.toString = function() {
	  return JSON.stringify(this);
	};

	PaymentResponseFraudSetting._meta_ =  {fields:  {}};
	PaymentResponseFraudSetting._meta_._class_ =  PaymentResponseFraudSetting;
	PaymentResponseFraudSetting._meta_.fields["id"] = {};
	PaymentResponseFraudSetting._meta_.fields["id"].type = String;
	PaymentResponseFraudSetting._meta_.fields["cardType"] = {};
	PaymentResponseFraudSetting._meta_.fields["cardType"].type = payments_CardType;
	PaymentResponseFraudSetting._meta_.fields["responseCode"] = {};
	PaymentResponseFraudSetting._meta_.fields["responseCode"].type = String;
	PaymentResponseFraudSetting._meta_.fields["responseCodeType"] = {};
	PaymentResponseFraudSetting._meta_.fields["responseCodeType"].type = payments_FraudResponseCodeType;
	PaymentResponseFraudSetting._meta_.fields["action"] = {};
	PaymentResponseFraudSetting._meta_.fields["action"].type = payments_FraudResponseAction;
	PaymentResponseFraudSetting._meta_.fields["settingName"] = {};
	PaymentResponseFraudSetting._meta_.fields["settingName"].type = String;
	PaymentResponseFraudSetting._meta_.fields["createdTime"] = {};
	PaymentResponseFraudSetting._meta_.fields["createdTime"].type = Number;
	PaymentResponseFraudSetting._meta_.fields["modifiedTime"] = {};
	PaymentResponseFraudSetting._meta_.fields["modifiedTime"].type = Number;
	PaymentResponseFraudSetting._meta_.fields["deletedTime"] = {};
	PaymentResponseFraudSetting._meta_.fields["deletedTime"].type = Number;

	//
	// Expose the module.
	//
	if (true) {
	module.exports = PaymentResponseFraudSetting;
	}



/***/ }),
/* 1014 */
/***/ (function(module, exports, __webpack_require__) {

	/**
	 * Autogenerated by Avro
	 * 
	 * DO NOT EDIT DIRECTLY
	 */

	var pay_PaymentRequestCardDetails = __webpack_require__(158);
	var payments_Refund = __webpack_require__(26);

	/**
	* @constructor
	* @memberof payments
	*/
	var RefundRequest = function() {
	  this._class_ = RefundRequest;
	  this.refund = undefined;
	  this.card = undefined;
	  this.isAdjustment = undefined;
	};


	/**
	* Set the field value
	* @memberof payments.RefundRequest
	* @param {payments.Refund|Null} refund 
	*/
	RefundRequest.prototype.setRefund = function(refund) {
	  this.refund = refund;
	};

	/**
	* Get the field value
	* @memberof payments.RefundRequest
	* @return {payments.Refund|Null} 
	*/
	RefundRequest.prototype.getRefund = function() {
	  return this.refund;
	};

	/**
	* Set the field value
	* @memberof payments.RefundRequest
	* @param {pay.PaymentRequestCardDetails|Null} card 
	*/
	RefundRequest.prototype.setCard = function(card) {
	  this.card = card;
	};

	/**
	* Get the field value
	* @memberof payments.RefundRequest
	* @return {pay.PaymentRequestCardDetails|Null} 
	*/
	RefundRequest.prototype.getCard = function() {
	  return this.card;
	};

	/**
	* Set the field value
	* @memberof payments.RefundRequest
	* @param {Boolean} isAdjustment 
	*/
	RefundRequest.prototype.setIsAdjustment = function(isAdjustment) {
	  this.isAdjustment = isAdjustment;
	};

	/**
	* Get the field value
	* @memberof payments.RefundRequest
	* @return {Boolean} 
	*/
	RefundRequest.prototype.getIsAdjustment = function() {
	  return this.isAdjustment;
	};

	/**
	* @memberof payments.RefundRequest
	* @private
	*/
	RefundRequest.prototype.getMetaInfo = function(fieldName) {
	  var curclass = this._class_;
	  do {
	    var fieldMetaInfo = curclass._meta_.fields[fieldName];
	    if(fieldMetaInfo) {
	      return fieldMetaInfo;
	    }
	    if(curclass._meta_._superMeta_) {
	      curclass = curclass._meta_._superMeta_._class_;
	    } else {
	      curclass = null;
	    }
	  } while(curclass);
	  return null;
	};

	RefundRequest.prototype.toString = function() {
	  return JSON.stringify(this);
	};

	RefundRequest._meta_ =  {fields:  {}};
	RefundRequest._meta_._class_ =  RefundRequest;
	RefundRequest._meta_.fields["refund"] = {};
	RefundRequest._meta_.fields["refund"].type = payments_Refund;
	RefundRequest._meta_.fields["card"] = {};
	RefundRequest._meta_.fields["card"].type = pay_PaymentRequestCardDetails;
	RefundRequest._meta_.fields["isAdjustment"] = {};
	RefundRequest._meta_.fields["isAdjustment"].type = Boolean;

	//
	// Expose the module.
	//
	if (true) {
	module.exports = RefundRequest;
	}



/***/ }),
/* 1015 */
/***/ (function(module, exports, __webpack_require__) {

	/**
	 * Autogenerated by Avro
	 * 
	 * DO NOT EDIT DIRECTLY
	 */

	var payments_Payment = __webpack_require__(11);
	var payments_Refund = __webpack_require__(26);

	/**
	* @constructor
	* @memberof payments
	*/
	var RefundResponse = function() {
	  this._class_ = RefundResponse;
	  this.requestSuccessful = undefined;
	  this.responseErrorMessage = undefined;
	  this.refund = undefined;
	  this.payment = undefined;
	  this.extra = undefined;
	};


	/**
	* Set the field value
	* @memberof payments.RefundResponse
	* @param {Boolean} requestSuccessful 
	*/
	RefundResponse.prototype.setRequestSuccessful = function(requestSuccessful) {
	  this.requestSuccessful = requestSuccessful;
	};

	/**
	* Get the field value
	* @memberof payments.RefundResponse
	* @return {Boolean} 
	*/
	RefundResponse.prototype.getRequestSuccessful = function() {
	  return this.requestSuccessful;
	};

	/**
	* Set the field value
	* @memberof payments.RefundResponse
	* @param {String|Null} responseErrorMessage 
	*/
	RefundResponse.prototype.setResponseErrorMessage = function(responseErrorMessage) {
	  this.responseErrorMessage = responseErrorMessage;
	};

	/**
	* Get the field value
	* @memberof payments.RefundResponse
	* @return {String|Null} 
	*/
	RefundResponse.prototype.getResponseErrorMessage = function() {
	  return this.responseErrorMessage;
	};

	/**
	* Set the field value
	* @memberof payments.RefundResponse
	* @param {payments.Refund|Null} refund 
	*/
	RefundResponse.prototype.setRefund = function(refund) {
	  this.refund = refund;
	};

	/**
	* Get the field value
	* @memberof payments.RefundResponse
	* @return {payments.Refund|Null} 
	*/
	RefundResponse.prototype.getRefund = function() {
	  return this.refund;
	};

	/**
	* Set the field value
	* @memberof payments.RefundResponse
	* @param {payments.Payment|Null} payment 
	*/
	RefundResponse.prototype.setPayment = function(payment) {
	  this.payment = payment;
	};

	/**
	* Get the field value
	* @memberof payments.RefundResponse
	* @return {payments.Payment|Null} 
	*/
	RefundResponse.prototype.getPayment = function() {
	  return this.payment;
	};

	/**
	* Set the field value
	* extra stuff
	*
	* @memberof payments.RefundResponse
	* @param {Object.<String,String>} extra A map of <String> to <>
	*/
	RefundResponse.prototype.setExtra = function(extra) {
	  this.extra = extra;
	};

	/**
	* Get the field value
	* extra stuff
	* @memberof payments.RefundResponse
	* @return {Object.<String,String>} A map of <String> to <>
	*/
	RefundResponse.prototype.getExtra = function() {
	  return this.extra;
	};

	/**
	* @memberof payments.RefundResponse
	* @private
	*/
	RefundResponse.prototype.getMetaInfo = function(fieldName) {
	  var curclass = this._class_;
	  do {
	    var fieldMetaInfo = curclass._meta_.fields[fieldName];
	    if(fieldMetaInfo) {
	      return fieldMetaInfo;
	    }
	    if(curclass._meta_._superMeta_) {
	      curclass = curclass._meta_._superMeta_._class_;
	    } else {
	      curclass = null;
	    }
	  } while(curclass);
	  return null;
	};

	RefundResponse.prototype.toString = function() {
	  return JSON.stringify(this);
	};

	RefundResponse._meta_ =  {fields:  {}};
	RefundResponse._meta_._class_ =  RefundResponse;
	RefundResponse._meta_.fields["requestSuccessful"] = {};
	RefundResponse._meta_.fields["requestSuccessful"].type = Boolean;
	RefundResponse._meta_.fields["responseErrorMessage"] = {};
	RefundResponse._meta_.fields["responseErrorMessage"].type = String;
	RefundResponse._meta_.fields["refund"] = {};
	RefundResponse._meta_.fields["refund"].type = payments_Refund;
	RefundResponse._meta_.fields["payment"] = {};
	RefundResponse._meta_.fields["payment"].type = payments_Payment;
	RefundResponse._meta_.fields["extra"] = {};
	RefundResponse._meta_.fields["extra"].type = Object;

	//
	// Expose the module.
	//
	if (true) {
	module.exports = RefundResponse;
	}



/***/ }),
/* 1016 */
/***/ (function(module, exports, __webpack_require__) {

	/**
	 * Autogenerated by Avro
	 * 
	 * DO NOT EDIT DIRECTLY
	 */


	/**
	* @constructor
	* @memberof payments
	*/
	var RegionalExtras = function() {
	  this._class_ = RegionalExtras;
	  this.FISCAL_INVOICE_NUMBER_KEY = "com.clover.regionalextras.ar.FISCAL_INVOICE_NUMBER_KEY";
	  this.INSTALLMENT_NUMBER_KEY = "com.clover.regionalextras.ar.INSTALLMENT_NUMBER_KEY";
	  this.INSTALLMENT_PLAN_KEY = "com.clover.regionalextras.ar.INSTALLMENT_PLAN_KEY";
	  this.SKIP_FISCAL_INVOICE_NUMBER_SCREEN_VALUE = "com.clover.regionalextras.ar.SKIP_FISCAL_INVOICE_NUMBER_SCREEN_VALUE";
	  this.CONFIRM_FISCAL_INVOICE_NUMBER_PROVIDED_VALUE = "com.clover.regionalextras.ar.CONFIRM_FISCAL_INVOICE_NUMBER_PROVIDED_VALUE";
	  this.INSTALLMENT_NUMBER_DEFAULT_VALUE = "1";
	};


	/**
	* Get the field value
	* @memberof payments.RegionalExtras
	* @return {String} 
	*/
	RegionalExtras.prototype.getFISCALINVOICENUMBERKEY = function() {
	  return this.FISCAL_INVOICE_NUMBER_KEY;
	};

	/**
	* Get the field value
	* @memberof payments.RegionalExtras
	* @return {String} 
	*/
	RegionalExtras.prototype.getINSTALLMENTNUMBERKEY = function() {
	  return this.INSTALLMENT_NUMBER_KEY;
	};

	/**
	* Get the field value
	* @memberof payments.RegionalExtras
	* @return {String} 
	*/
	RegionalExtras.prototype.getINSTALLMENTPLANKEY = function() {
	  return this.INSTALLMENT_PLAN_KEY;
	};

	/**
	* Get the field value
	* @memberof payments.RegionalExtras
	* @return {String} 
	*/
	RegionalExtras.prototype.getSKIPFISCALINVOICENUMBERSCREENVALUE = function() {
	  return this.SKIP_FISCAL_INVOICE_NUMBER_SCREEN_VALUE;
	};

	/**
	* Get the field value
	* @memberof payments.RegionalExtras
	* @return {String} 
	*/
	RegionalExtras.prototype.getCONFIRMFISCALINVOICENUMBERPROVIDEDVALUE = function() {
	  return this.CONFIRM_FISCAL_INVOICE_NUMBER_PROVIDED_VALUE;
	};

	/**
	* Get the field value
	* @memberof payments.RegionalExtras
	* @return {String} 
	*/
	RegionalExtras.prototype.getINSTALLMENTNUMBERDEFAULTVALUE = function() {
	  return this.INSTALLMENT_NUMBER_DEFAULT_VALUE;
	};

	/**
	* @memberof payments.RegionalExtras
	* @private
	*/
	RegionalExtras.prototype.getMetaInfo = function(fieldName) {
	  var curclass = this._class_;
	  do {
	    var fieldMetaInfo = curclass._meta_.fields[fieldName];
	    if(fieldMetaInfo) {
	      return fieldMetaInfo;
	    }
	    if(curclass._meta_._superMeta_) {
	      curclass = curclass._meta_._superMeta_._class_;
	    } else {
	      curclass = null;
	    }
	  } while(curclass);
	  return null;
	};

	RegionalExtras.prototype.toString = function() {
	  return JSON.stringify(this);
	};

	RegionalExtras._meta_ =  {fields:  {}};
	RegionalExtras._meta_._class_ =  RegionalExtras;
	RegionalExtras._meta_.fields["FISCAL_INVOICE_NUMBER_KEY"] = {};
	RegionalExtras._meta_.fields["FISCAL_INVOICE_NUMBER_KEY"].type = String;
	RegionalExtras._meta_.fields["INSTALLMENT_NUMBER_KEY"] = {};
	RegionalExtras._meta_.fields["INSTALLMENT_NUMBER_KEY"].type = String;
	RegionalExtras._meta_.fields["INSTALLMENT_PLAN_KEY"] = {};
	RegionalExtras._meta_.fields["INSTALLMENT_PLAN_KEY"].type = String;
	RegionalExtras._meta_.fields["SKIP_FISCAL_INVOICE_NUMBER_SCREEN_VALUE"] = {};
	RegionalExtras._meta_.fields["SKIP_FISCAL_INVOICE_NUMBER_SCREEN_VALUE"].type = String;
	RegionalExtras._meta_.fields["CONFIRM_FISCAL_INVOICE_NUMBER_PROVIDED_VALUE"] = {};
	RegionalExtras._meta_.fields["CONFIRM_FISCAL_INVOICE_NUMBER_PROVIDED_VALUE"].type = String;
	RegionalExtras._meta_.fields["INSTALLMENT_NUMBER_DEFAULT_VALUE"] = {};
	RegionalExtras._meta_.fields["INSTALLMENT_NUMBER_DEFAULT_VALUE"].type = String;

	//
	// Expose the module.
	//
	if (true) {
	module.exports = RegionalExtras;
	}



/***/ }),
/* 1017 */
/***/ (function(module, exports, __webpack_require__) {

	/**
	 * Autogenerated by Avro
	 * 
	 * DO NOT EDIT DIRECTLY
	 */

	var payments_Refund = __webpack_require__(26);

	/**
	* @constructor
	* @memberof payments
	*/
	var ServiceFeeRefundRequest = function() {
	  this._class_ = ServiceFeeRefundRequest;
	  this.refund = undefined;
	};


	/**
	* Set the field value
	* Service fee refund object
	*
	* @memberof payments.ServiceFeeRefundRequest
	* @param {payments.Refund} refund 
	*/
	ServiceFeeRefundRequest.prototype.setRefund = function(refund) {
	  this.refund = refund;
	};

	/**
	* Get the field value
	* Service fee refund object
	* @memberof payments.ServiceFeeRefundRequest
	* @return {payments.Refund} 
	*/
	ServiceFeeRefundRequest.prototype.getRefund = function() {
	  return this.refund;
	};

	/**
	* @memberof payments.ServiceFeeRefundRequest
	* @private
	*/
	ServiceFeeRefundRequest.prototype.getMetaInfo = function(fieldName) {
	  var curclass = this._class_;
	  do {
	    var fieldMetaInfo = curclass._meta_.fields[fieldName];
	    if(fieldMetaInfo) {
	      return fieldMetaInfo;
	    }
	    if(curclass._meta_._superMeta_) {
	      curclass = curclass._meta_._superMeta_._class_;
	    } else {
	      curclass = null;
	    }
	  } while(curclass);
	  return null;
	};

	ServiceFeeRefundRequest.prototype.toString = function() {
	  return JSON.stringify(this);
	};

	ServiceFeeRefundRequest._meta_ =  {fields:  {}};
	ServiceFeeRefundRequest._meta_._class_ =  ServiceFeeRefundRequest;
	ServiceFeeRefundRequest._meta_.fields["refund"] = {};
	ServiceFeeRefundRequest._meta_.fields["refund"].type = payments_Refund;

	//
	// Expose the module.
	//
	if (true) {
	module.exports = ServiceFeeRefundRequest;
	}



/***/ }),
/* 1018 */
/***/ (function(module, exports, __webpack_require__) {

	/**
	 * Autogenerated by Avro
	 * 
	 * DO NOT EDIT DIRECTLY
	 */

	var payments_VaultedCard = __webpack_require__(70);

	/**
	* @constructor
	* @memberof payments
	*/
	var ServiceFeeRequest = function() {
	  this._class_ = ServiceFeeRequest;
	  this.amount = undefined;
	  this.orderId = undefined;
	  this.sourcePaymentId = undefined;
	  this.vaultedCard = undefined;
	};


	/**
	* Set the field value
	* amount (cents) of the service fee
	*
	* @memberof payments.ServiceFeeRequest
	* @param {Number} amount must be a long integer
	*/
	ServiceFeeRequest.prototype.setAmount = function(amount) {
	  this.amount = amount;
	};

	/**
	* Get the field value
	* amount (cents) of the service fee
	* @memberof payments.ServiceFeeRequest
	* @return {Number} must be a long integer
	*/
	ServiceFeeRequest.prototype.getAmount = function() {
	  return this.amount;
	};

	/**
	* Set the field value
	* Unique identifier of the order with which this payment is associated (will be auto-populated by client connector)
	*
	* @memberof payments.ServiceFeeRequest
	* @param {String} orderId 
	*/
	ServiceFeeRequest.prototype.setOrderId = function(orderId) {
	  this.orderId = orderId;
	};

	/**
	* Get the field value
	* Unique identifier of the order with which this payment is associated (will be auto-populated by client connector)
	* @memberof payments.ServiceFeeRequest
	* @return {String} 
	*/
	ServiceFeeRequest.prototype.getOrderId = function() {
	  return this.orderId;
	};

	/**
	* Set the field value
	* Unique identifier of the primary payment the serivce fee is associated with
	*
	* @memberof payments.ServiceFeeRequest
	* @param {String} sourcePaymentId 
	*/
	ServiceFeeRequest.prototype.setSourcePaymentId = function(sourcePaymentId) {
	  this.sourcePaymentId = sourcePaymentId;
	};

	/**
	* Get the field value
	* Unique identifier of the primary payment the serivce fee is associated with
	* @memberof payments.ServiceFeeRequest
	* @return {String} 
	*/
	ServiceFeeRequest.prototype.getSourcePaymentId = function() {
	  return this.sourcePaymentId;
	};

	/**
	* Set the field value
	* Vaulted card to use to bill the service fee
	*
	* @memberof payments.ServiceFeeRequest
	* @param {payments.VaultedCard} vaultedCard 
	*/
	ServiceFeeRequest.prototype.setVaultedCard = function(vaultedCard) {
	  this.vaultedCard = vaultedCard;
	};

	/**
	* Get the field value
	* Vaulted card to use to bill the service fee
	* @memberof payments.ServiceFeeRequest
	* @return {payments.VaultedCard} 
	*/
	ServiceFeeRequest.prototype.getVaultedCard = function() {
	  return this.vaultedCard;
	};

	/**
	* @memberof payments.ServiceFeeRequest
	* @private
	*/
	ServiceFeeRequest.prototype.getMetaInfo = function(fieldName) {
	  var curclass = this._class_;
	  do {
	    var fieldMetaInfo = curclass._meta_.fields[fieldName];
	    if(fieldMetaInfo) {
	      return fieldMetaInfo;
	    }
	    if(curclass._meta_._superMeta_) {
	      curclass = curclass._meta_._superMeta_._class_;
	    } else {
	      curclass = null;
	    }
	  } while(curclass);
	  return null;
	};

	ServiceFeeRequest.prototype.toString = function() {
	  return JSON.stringify(this);
	};

	ServiceFeeRequest._meta_ =  {fields:  {}};
	ServiceFeeRequest._meta_._class_ =  ServiceFeeRequest;
	ServiceFeeRequest._meta_.fields["amount"] = {};
	ServiceFeeRequest._meta_.fields["amount"].type = Number;
	ServiceFeeRequest._meta_.fields["orderId"] = {};
	ServiceFeeRequest._meta_.fields["orderId"].type = String;
	ServiceFeeRequest._meta_.fields["sourcePaymentId"] = {};
	ServiceFeeRequest._meta_.fields["sourcePaymentId"].type = String;
	ServiceFeeRequest._meta_.fields["vaultedCard"] = {};
	ServiceFeeRequest._meta_.fields["vaultedCard"].type = payments_VaultedCard;

	//
	// Expose the module.
	//
	if (true) {
	module.exports = ServiceFeeRequest;
	}



/***/ }),
/* 1019 */
/***/ (function(module, exports, __webpack_require__) {

	/**
	 * Autogenerated by Avro
	 * 
	 * DO NOT EDIT DIRECTLY
	 */

	var customers_Customer = __webpack_require__(67);
	var payments_TokenRequestType = __webpack_require__(458);
	var payments_CardTransaction = __webpack_require__(102);
	var payments_Result = __webpack_require__(120);
	var payments_TransactionInfo = __webpack_require__(104);
	var base_Reference = __webpack_require__(5);
	var base_Tender = __webpack_require__(116);

	/**
	* @constructor
	* @memberof payments
	*/
	var TokenRequest = function() {
	  this._class_ = TokenRequest;
	  this.id = undefined;
	  this.type = undefined;
	  this.employee = undefined;
	  this.device = undefined;
	  this.merchant = undefined;
	  this.tender = undefined;
	  this.customer = undefined;
	  this.externalReferenceId = undefined;
	  this.cardTransaction = undefined;
	  this.note = undefined;
	  this.result = undefined;
	  this.createdTime = undefined;
	  this.modifiedTime = undefined;
	  this.deletedTime = undefined;
	  this.transactionInfo = undefined;
	};


	/**
	* Set the field value
	* Unique identifier
	*
	* @memberof payments.TokenRequest
	* @param {String} id 
	*/
	TokenRequest.prototype.setId = function(id) {
	  this.id = id;
	};

	/**
	* Get the field value
	* Unique identifier
	* @memberof payments.TokenRequest
	* @return {String} 
	*/
	TokenRequest.prototype.getId = function() {
	  return this.id;
	};

	/**
	* Set the field value
	* Type of request
	*
	* @memberof payments.TokenRequest
	* @param {payments.TokenRequestType} type 
	*/
	TokenRequest.prototype.setType = function(type) {
	  this.type = type;
	};

	/**
	* Get the field value
	* Type of request
	* @memberof payments.TokenRequest
	* @return {payments.TokenRequestType} 
	*/
	TokenRequest.prototype.getType = function() {
	  return this.type;
	};

	/**
	* Set the field value
	* The employee who processed the token request
	*
	* @memberof payments.TokenRequest
	* @param {base.Reference} employee 
	*/
	TokenRequest.prototype.setEmployee = function(employee) {
	  this.employee = employee;
	};

	/**
	* Get the field value
	* The employee who processed the token request
	* @memberof payments.TokenRequest
	* @return {base.Reference} 
	*/
	TokenRequest.prototype.getEmployee = function() {
	  return this.employee;
	};

	/**
	* Set the field value
	* The device that processed the token request, a 128-bit UUID, not a normal base-13 Clover ID.
	*
	* @memberof payments.TokenRequest
	* @param {base.Reference} device 
	*/
	TokenRequest.prototype.setDevice = function(device) {
	  this.device = device;
	};

	/**
	* Get the field value
	* The device that processed the token request, a 128-bit UUID, not a normal base-13 Clover ID.
	* @memberof payments.TokenRequest
	* @return {base.Reference} 
	*/
	TokenRequest.prototype.getDevice = function() {
	  return this.device;
	};

	/**
	* Set the field value
	* The merchant associate with this token request
	*
	* @memberof payments.TokenRequest
	* @param {base.Reference} merchant 
	*/
	TokenRequest.prototype.setMerchant = function(merchant) {
	  this.merchant = merchant;
	};

	/**
	* Get the field value
	* The merchant associate with this token request
	* @memberof payments.TokenRequest
	* @return {base.Reference} 
	*/
	TokenRequest.prototype.getMerchant = function() {
	  return this.merchant;
	};

	/**
	* Set the field value
	* The tender associated with this token request
	*
	* @memberof payments.TokenRequest
	* @param {base.Tender} tender 
	*/
	TokenRequest.prototype.setTender = function(tender) {
	  this.tender = tender;
	};

	/**
	* Get the field value
	* The tender associated with this token request
	* @memberof payments.TokenRequest
	* @return {base.Tender} 
	*/
	TokenRequest.prototype.getTender = function() {
	  return this.tender;
	};

	/**
	* Set the field value
	* The customer associated with this token request
	*
	* @memberof payments.TokenRequest
	* @param {customers.Customer} customer 
	*/
	TokenRequest.prototype.setCustomer = function(customer) {
	  this.customer = customer;
	};

	/**
	* Get the field value
	* The customer associated with this token request
	* @memberof payments.TokenRequest
	* @return {customers.Customer} 
	*/
	TokenRequest.prototype.getCustomer = function() {
	  return this.customer;
	};

	/**
	* Set the field value
	* Merchant-specified reference number
	*
	* @memberof payments.TokenRequest
	* @param {String} externalReferenceId 
	*/
	TokenRequest.prototype.setExternalReferenceId = function(externalReferenceId) {
	  this.externalReferenceId = externalReferenceId;
	};

	/**
	* Get the field value
	* Merchant-specified reference number
	* @memberof payments.TokenRequest
	* @return {String} 
	*/
	TokenRequest.prototype.getExternalReferenceId = function() {
	  return this.externalReferenceId;
	};

	/**
	* Set the field value
	* Information about the card used for the token request
	*
	* @memberof payments.TokenRequest
	* @param {payments.CardTransaction} cardTransaction 
	*/
	TokenRequest.prototype.setCardTransaction = function(cardTransaction) {
	  this.cardTransaction = cardTransaction;
	};

	/**
	* Get the field value
	* Information about the card used for the token request
	* @memberof payments.TokenRequest
	* @return {payments.CardTransaction} 
	*/
	TokenRequest.prototype.getCardTransaction = function() {
	  return this.cardTransaction;
	};

	/**
	* Set the field value
	* Note input by the merchant
	*
	* @memberof payments.TokenRequest
	* @param {String} note 
	*/
	TokenRequest.prototype.setNote = function(note) {
	  this.note = note;
	};

	/**
	* Get the field value
	* Note input by the merchant
	* @memberof payments.TokenRequest
	* @return {String} 
	*/
	TokenRequest.prototype.getNote = function() {
	  return this.note;
	};

	/**
	* Set the field value
	* Result of this token request
	*
	* @memberof payments.TokenRequest
	* @param {payments.Result} result 
	*/
	TokenRequest.prototype.setResult = function(result) {
	  this.result = result;
	};

	/**
	* Get the field value
	* Result of this token request
	* @memberof payments.TokenRequest
	* @return {payments.Result} 
	*/
	TokenRequest.prototype.getResult = function() {
	  return this.result;
	};

	/**
	* Set the field value
	* Time that the token request was recorded on the server
	*
	* @memberof payments.TokenRequest
	* @param {Number} createdTime must be a long integer
	*/
	TokenRequest.prototype.setCreatedTime = function(createdTime) {
	  this.createdTime = createdTime;
	};

	/**
	* Get the field value
	* Time that the token request was recorded on the server
	* @memberof payments.TokenRequest
	* @return {Number} must be a long integer
	*/
	TokenRequest.prototype.getCreatedTime = function() {
	  return this.createdTime;
	};

	/**
	* Set the field value
	* Time that the token request was initiated on the device
	*
	* @memberof payments.TokenRequest
	* @param {Number} modifiedTime must be a long integer
	*/
	TokenRequest.prototype.setModifiedTime = function(modifiedTime) {
	  this.modifiedTime = modifiedTime;
	};

	/**
	* Get the field value
	* Time that the token request was initiated on the device
	* @memberof payments.TokenRequest
	* @return {Number} must be a long integer
	*/
	TokenRequest.prototype.getModifiedTime = function() {
	  return this.modifiedTime;
	};

	/**
	* Set the field value
	* Time that the token request was deleted
	*
	* @memberof payments.TokenRequest
	* @param {Number} deletedTime must be a long integer
	*/
	TokenRequest.prototype.setDeletedTime = function(deletedTime) {
	  this.deletedTime = deletedTime;
	};

	/**
	* Get the field value
	* Time that the token request was deleted
	* @memberof payments.TokenRequest
	* @return {Number} must be a long integer
	*/
	TokenRequest.prototype.getDeletedTime = function() {
	  return this.deletedTime;
	};

	/**
	* Set the field value
	* Information over transaction information
	*
	* @memberof payments.TokenRequest
	* @param {payments.TransactionInfo} transactionInfo 
	*/
	TokenRequest.prototype.setTransactionInfo = function(transactionInfo) {
	  this.transactionInfo = transactionInfo;
	};

	/**
	* Get the field value
	* Information over transaction information
	* @memberof payments.TokenRequest
	* @return {payments.TransactionInfo} 
	*/
	TokenRequest.prototype.getTransactionInfo = function() {
	  return this.transactionInfo;
	};

	/**
	* @memberof payments.TokenRequest
	* @private
	*/
	TokenRequest.prototype.getMetaInfo = function(fieldName) {
	  var curclass = this._class_;
	  do {
	    var fieldMetaInfo = curclass._meta_.fields[fieldName];
	    if(fieldMetaInfo) {
	      return fieldMetaInfo;
	    }
	    if(curclass._meta_._superMeta_) {
	      curclass = curclass._meta_._superMeta_._class_;
	    } else {
	      curclass = null;
	    }
	  } while(curclass);
	  return null;
	};

	TokenRequest.prototype.toString = function() {
	  return JSON.stringify(this);
	};

	TokenRequest._meta_ =  {fields:  {}};
	TokenRequest._meta_._class_ =  TokenRequest;
	TokenRequest._meta_.fields["id"] = {};
	TokenRequest._meta_.fields["id"].type = String;
	TokenRequest._meta_.fields["type"] = {};
	TokenRequest._meta_.fields["type"].type = payments_TokenRequestType;
	TokenRequest._meta_.fields["employee"] = {};
	TokenRequest._meta_.fields["employee"].type = base_Reference;
	TokenRequest._meta_.fields["device"] = {};
	TokenRequest._meta_.fields["device"].type = base_Reference;
	TokenRequest._meta_.fields["merchant"] = {};
	TokenRequest._meta_.fields["merchant"].type = base_Reference;
	TokenRequest._meta_.fields["tender"] = {};
	TokenRequest._meta_.fields["tender"].type = base_Tender;
	TokenRequest._meta_.fields["customer"] = {};
	TokenRequest._meta_.fields["customer"].type = customers_Customer;
	TokenRequest._meta_.fields["externalReferenceId"] = {};
	TokenRequest._meta_.fields["externalReferenceId"].type = String;
	TokenRequest._meta_.fields["cardTransaction"] = {};
	TokenRequest._meta_.fields["cardTransaction"].type = payments_CardTransaction;
	TokenRequest._meta_.fields["note"] = {};
	TokenRequest._meta_.fields["note"].type = String;
	TokenRequest._meta_.fields["result"] = {};
	TokenRequest._meta_.fields["result"].type = payments_Result;
	TokenRequest._meta_.fields["createdTime"] = {};
	TokenRequest._meta_.fields["createdTime"].type = Number;
	TokenRequest._meta_.fields["modifiedTime"] = {};
	TokenRequest._meta_.fields["modifiedTime"].type = Number;
	TokenRequest._meta_.fields["deletedTime"] = {};
	TokenRequest._meta_.fields["deletedTime"].type = Number;
	TokenRequest._meta_.fields["transactionInfo"] = {};
	TokenRequest._meta_.fields["transactionInfo"].type = payments_TransactionInfo;

	//
	// Expose the module.
	//
	if (true) {
	module.exports = TokenRequest;
	}



/***/ }),
/* 1020 */
/***/ (function(module, exports, __webpack_require__) {

	/**
	 * Autogenerated by Avro
	 * 
	 * DO NOT EDIT DIRECTLY
	 */

	var payments_CreditRefund = __webpack_require__(162);
	var payments_Payment = __webpack_require__(11);
	var payments_Refund = __webpack_require__(26);
	var payments_Credit = __webpack_require__(30);

	/**
	* @constructor
	* @memberof payments
	*/
	var Transaction = function() {
	  this._class_ = Transaction;
	  this.createdTime = undefined;
	  this.clientCreatedTime = undefined;
	  this.payment = undefined;
	  this.refund = undefined;
	  this.credit = undefined;
	  this.creditRefund = undefined;
	};


	/**
	* Set the field value
	* The time when the transaction was recorded on the server
	*
	* @memberof payments.Transaction
	* @param {Number} createdTime must be a long integer
	*/
	Transaction.prototype.setCreatedTime = function(createdTime) {
	  this.createdTime = createdTime;
	};

	/**
	* Get the field value
	* The time when the transaction was recorded on the server
	* @memberof payments.Transaction
	* @return {Number} must be a long integer
	*/
	Transaction.prototype.getCreatedTime = function() {
	  return this.createdTime;
	};

	/**
	* Set the field value
	* The time when the transaction was recorded on the client
	*
	* @memberof payments.Transaction
	* @param {Number} clientCreatedTime must be a long integer
	*/
	Transaction.prototype.setClientCreatedTime = function(clientCreatedTime) {
	  this.clientCreatedTime = clientCreatedTime;
	};

	/**
	* Get the field value
	* The time when the transaction was recorded on the client
	* @memberof payments.Transaction
	* @return {Number} must be a long integer
	*/
	Transaction.prototype.getClientCreatedTime = function() {
	  return this.clientCreatedTime;
	};

	/**
	* Set the field value
	* @memberof payments.Transaction
	* @param {payments.Payment} payment 
	*/
	Transaction.prototype.setPayment = function(payment) {
	  this.payment = payment;
	};

	/**
	* Get the field value
	* @memberof payments.Transaction
	* @return {payments.Payment} 
	*/
	Transaction.prototype.getPayment = function() {
	  return this.payment;
	};

	/**
	* Set the field value
	* @memberof payments.Transaction
	* @param {payments.Refund} refund 
	*/
	Transaction.prototype.setRefund = function(refund) {
	  this.refund = refund;
	};

	/**
	* Get the field value
	* @memberof payments.Transaction
	* @return {payments.Refund} 
	*/
	Transaction.prototype.getRefund = function() {
	  return this.refund;
	};

	/**
	* Set the field value
	* @memberof payments.Transaction
	* @param {payments.Credit} credit 
	*/
	Transaction.prototype.setCredit = function(credit) {
	  this.credit = credit;
	};

	/**
	* Get the field value
	* @memberof payments.Transaction
	* @return {payments.Credit} 
	*/
	Transaction.prototype.getCredit = function() {
	  return this.credit;
	};

	/**
	* Set the field value
	* @memberof payments.Transaction
	* @param {payments.CreditRefund} creditRefund 
	*/
	Transaction.prototype.setCreditRefund = function(creditRefund) {
	  this.creditRefund = creditRefund;
	};

	/**
	* Get the field value
	* @memberof payments.Transaction
	* @return {payments.CreditRefund} 
	*/
	Transaction.prototype.getCreditRefund = function() {
	  return this.creditRefund;
	};

	/**
	* @memberof payments.Transaction
	* @private
	*/
	Transaction.prototype.getMetaInfo = function(fieldName) {
	  var curclass = this._class_;
	  do {
	    var fieldMetaInfo = curclass._meta_.fields[fieldName];
	    if(fieldMetaInfo) {
	      return fieldMetaInfo;
	    }
	    if(curclass._meta_._superMeta_) {
	      curclass = curclass._meta_._superMeta_._class_;
	    } else {
	      curclass = null;
	    }
	  } while(curclass);
	  return null;
	};

	Transaction.prototype.toString = function() {
	  return JSON.stringify(this);
	};

	Transaction._meta_ =  {fields:  {}};
	Transaction._meta_._class_ =  Transaction;
	Transaction._meta_.fields["createdTime"] = {};
	Transaction._meta_.fields["createdTime"].type = Number;
	Transaction._meta_.fields["clientCreatedTime"] = {};
	Transaction._meta_.fields["clientCreatedTime"].type = Number;
	Transaction._meta_.fields["payment"] = {};
	Transaction._meta_.fields["payment"].type = payments_Payment;
	Transaction._meta_.fields["refund"] = {};
	Transaction._meta_.fields["refund"].type = payments_Refund;
	Transaction._meta_.fields["credit"] = {};
	Transaction._meta_.fields["credit"].type = payments_Credit;
	Transaction._meta_.fields["creditRefund"] = {};
	Transaction._meta_.fields["creditRefund"].type = payments_CreditRefund;

	//
	// Expose the module.
	//
	if (true) {
	module.exports = Transaction;
	}



/***/ }),
/* 1021 */
/***/ (function(module, exports, __webpack_require__) {

	/**
	 * Autogenerated by Avro
	 * 
	 * DO NOT EDIT DIRECTLY
	 */

	var payments_VasPayloadResponseType = __webpack_require__(466);

	/** Response from the provider after receiving the payload */
	/**
	* @constructor
	* @memberof payments
	*/
	var VasPayloadResponse = function() {
	  this._class_ = VasPayloadResponse;
	  this.responseType = undefined;
	};


	/**
	* Set the field value
	* @memberof payments.VasPayloadResponse
	* @param {payments.VasPayloadResponseType} responseType 
	*/
	VasPayloadResponse.prototype.setResponseType = function(responseType) {
	  this.responseType = responseType;
	};

	/**
	* Get the field value
	* @memberof payments.VasPayloadResponse
	* @return {payments.VasPayloadResponseType} 
	*/
	VasPayloadResponse.prototype.getResponseType = function() {
	  return this.responseType;
	};

	/**
	* @memberof payments.VasPayloadResponse
	* @private
	*/
	VasPayloadResponse.prototype.getMetaInfo = function(fieldName) {
	  var curclass = this._class_;
	  do {
	    var fieldMetaInfo = curclass._meta_.fields[fieldName];
	    if(fieldMetaInfo) {
	      return fieldMetaInfo;
	    }
	    if(curclass._meta_._superMeta_) {
	      curclass = curclass._meta_._superMeta_._class_;
	    } else {
	      curclass = null;
	    }
	  } while(curclass);
	  return null;
	};

	VasPayloadResponse.prototype.toString = function() {
	  return JSON.stringify(this);
	};

	VasPayloadResponse._meta_ =  {fields:  {}};
	VasPayloadResponse._meta_._class_ =  VasPayloadResponse;
	VasPayloadResponse._meta_.fields["responseType"] = {};
	VasPayloadResponse._meta_.fields["responseType"].type = payments_VasPayloadResponseType;

	//
	// Expose the module.
	//
	if (true) {
	module.exports = VasPayloadResponse;
	}



/***/ }),
/* 1022 */
/***/ (function(module, exports, __webpack_require__) {

	/**
	 * Autogenerated by Avro
	 * 
	 * DO NOT EDIT DIRECTLY
	 */

	var payments_VasPushMode = __webpack_require__(467);
	var payments_VasMode = __webpack_require__(256);
	var payments_VasDataType = __webpack_require__(165);

	/**
	* @constructor
	* @memberof payments
	*/
	var VasSettings = function() {
	  this._class_ = VasSettings;
	  this.vasMode = undefined;
	  this.serviceTypes = undefined;
	  this.extras = undefined;
	  this.pushMode = undefined;
	};


	/**
	* Set the field value
	* Populated per tx.  If not passed PAY_ONLY is the default behavior
	*
	* @memberof payments.VasSettings
	* @param {payments.VasMode} vasMode 
	*/
	VasSettings.prototype.setVasMode = function(vasMode) {
	  this.vasMode = vasMode;
	};

	/**
	* Get the field value
	* Populated per tx.  If not passed PAY_ONLY is the default behavior
	* @memberof payments.VasSettings
	* @return {payments.VasMode} 
	*/
	VasSettings.prototype.getVasMode = function() {
	  return this.vasMode;
	};

	/**
	* Set the field value
	* Vas service types of interest for this txn
	*
	* @memberof payments.VasSettings
	* @param {Array.<payments.VasDataType>} serviceTypes An array of 
	*/
	VasSettings.prototype.setServiceTypes = function(serviceTypes) {
	  this.serviceTypes = serviceTypes;
	};

	/**
	* Get the field value
	* Vas service types of interest for this txn
	* @memberof payments.VasSettings
	* @return {Array.<payments.VasDataType>} An array of 
	*/
	VasSettings.prototype.getServiceTypes = function() {
	  return this.serviceTypes;
	};

	/**
	* Set the field value
	* Additional context relevant extras such as EXTRA_ORDER_ID
	*
	* @memberof payments.VasSettings
	* @param {Object.<String,String>} extras A map of <String> to <>
	*/
	VasSettings.prototype.setExtras = function(extras) {
	  this.extras = extras;
	};

	/**
	* Get the field value
	* Additional context relevant extras such as EXTRA_ORDER_ID
	* @memberof payments.VasSettings
	* @return {Object.<String,String>} A map of <String> to <>
	*/
	VasSettings.prototype.getExtras = function() {
	  return this.extras;
	};

	/**
	* Set the field value
	* Indicates if vas is push url only, no push, or push in addition to GET
	*
	* @memberof payments.VasSettings
	* @param {payments.VasPushMode} pushMode 
	*/
	VasSettings.prototype.setPushMode = function(pushMode) {
	  this.pushMode = pushMode;
	};

	/**
	* Get the field value
	* Indicates if vas is push url only, no push, or push in addition to GET
	* @memberof payments.VasSettings
	* @return {payments.VasPushMode} 
	*/
	VasSettings.prototype.getPushMode = function() {
	  return this.pushMode;
	};

	/**
	* @memberof payments.VasSettings
	* @private
	*/
	VasSettings.prototype.getMetaInfo = function(fieldName) {
	  var curclass = this._class_;
	  do {
	    var fieldMetaInfo = curclass._meta_.fields[fieldName];
	    if(fieldMetaInfo) {
	      return fieldMetaInfo;
	    }
	    if(curclass._meta_._superMeta_) {
	      curclass = curclass._meta_._superMeta_._class_;
	    } else {
	      curclass = null;
	    }
	  } while(curclass);
	  return null;
	};

	VasSettings.prototype.toString = function() {
	  return JSON.stringify(this);
	};

	VasSettings._meta_ =  {fields:  {}};
	VasSettings._meta_._class_ =  VasSettings;
	VasSettings._meta_.fields["vasMode"] = {};
	VasSettings._meta_.fields["vasMode"].type = payments_VasMode;
	VasSettings._meta_.fields["serviceTypes"] = {};
	VasSettings._meta_.fields["serviceTypes"].type = Array;
	VasSettings._meta_.fields["serviceTypes"].elementType = payments_VasDataType;
	VasSettings._meta_.fields["extras"] = {};
	VasSettings._meta_.fields["extras"].type = Object;
	VasSettings._meta_.fields["pushMode"] = {};
	VasSettings._meta_.fields["pushMode"].type = payments_VasPushMode;

	//
	// Expose the module.
	//
	if (true) {
	module.exports = VasSettings;
	}



/***/ }),
/* 1023 */
/***/ (function(module, exports, __webpack_require__) {

	
	module.exports.payments = payments;
	/**
	* @namespace payments
	*/
	function payments() {}


	payments.AVSResult = __webpack_require__(430);
	payments.AccountType = __webpack_require__(431);
	payments.AdditionalChargeAmount = __webpack_require__(245);
	payments.AdditionalChargeType = __webpack_require__(432);
	payments.Authorization = __webpack_require__(159);
	payments.Batch = __webpack_require__(246);
	payments.BatchCardTotal = __webpack_require__(160);
	payments.BatchDetail = __webpack_require__(433);
	payments.BatchRequest = __webpack_require__(999);
	payments.BatchState = __webpack_require__(247);
	payments.BatchTotalStats = __webpack_require__(434);
	payments.BatchTotalType = __webpack_require__(161);
	payments.BatchTransactions = __webpack_require__(435);
	payments.BatchType = __webpack_require__(248);
	payments.CVVResult = __webpack_require__(1000);
	payments.CardEntryType = __webpack_require__(119);
	payments.CardTransaction = __webpack_require__(102);
	payments.CardTransactionState = __webpack_require__(436);
	payments.CardTransactionType = __webpack_require__(437);
	payments.CardType = __webpack_require__(69);
	payments.CardlessPaymentData = __webpack_require__(1001);
	payments.CardlessPaymentDataType = __webpack_require__(438);
	payments.CardlessPaymentNetwork = __webpack_require__(439);
	payments.CashAdvanceCustomerIdentification = __webpack_require__(249);
	payments.CashAdvanceExtra = __webpack_require__(440);
	payments.Credit = __webpack_require__(30);
	payments.CreditRefund = __webpack_require__(162);
	payments.CreditRefundResponse = __webpack_require__(1002);
	payments.CreditRequest = __webpack_require__(1003);
	payments.CreditResponse = __webpack_require__(1004);
	payments.Currency = __webpack_require__(441);
	payments.CvmResult = __webpack_require__(442);
	payments.DCCInfo = __webpack_require__(250);
	payments.DataEntryLocation = __webpack_require__(251);
	payments.DeviceTotalStats = __webpack_require__(443);
	payments.DiscountApprover = __webpack_require__(1005);
	payments.ECommTransactionInfo = __webpack_require__(444);
	payments.EndpointTotalStats = __webpack_require__(445);
	payments.FailedBatchSettlement = __webpack_require__(1006);
	payments.FraudResponseAction = __webpack_require__(252);
	payments.FraudResponseCodeType = __webpack_require__(446);
	payments.FraudResponseReason = __webpack_require__(1007);
	payments.GatewayTxState = __webpack_require__(253);
	payments.GatewayTxType = __webpack_require__(447);
	payments.GatewayTxs = __webpack_require__(1008);
	payments.GermanInfo = __webpack_require__(103);
	payments.GiftCard = __webpack_require__(448);
	payments.GiftCardResponse = __webpack_require__(1009);
	payments.GiftCardState = __webpack_require__(449);
	payments.GiftCardTransaction = __webpack_require__(1010);
	payments.IdType = __webpack_require__(450);
	payments.IncrementalAuthorization = __webpack_require__(451);
	payments.LineItemPayment = __webpack_require__(163);
	payments.Payment = __webpack_require__(11);
	payments.PaymentAttribute = __webpack_require__(1011);
	payments.PaymentResponse = __webpack_require__(1012);
	payments.PaymentResponseFraudSetting = __webpack_require__(1013);
	payments.PaymentTaxRate = __webpack_require__(452);
	payments.PromotionalMessage = __webpack_require__(453);
	payments.Refund = __webpack_require__(26);
	payments.RefundRequest = __webpack_require__(1014);
	payments.RefundResponse = __webpack_require__(1015);
	payments.RegionalExtras = __webpack_require__(1016);
	payments.Result = __webpack_require__(120);
	payments.ReversalReason = __webpack_require__(454);
	payments.SelectedService = __webpack_require__(455);
	payments.ServerTotalStats = __webpack_require__(456);
	payments.ServiceChargeAmount = __webpack_require__(121);
	payments.ServiceFeeRefundRequest = __webpack_require__(1017);
	payments.ServiceFeeRequest = __webpack_require__(1018);
	payments.SignatureDisclaimer = __webpack_require__(457);
	payments.TaxableAmountRate = __webpack_require__(122);
	payments.TipMode = __webpack_require__(254);
	payments.TokenRequest = __webpack_require__(1019);
	payments.TokenRequestType = __webpack_require__(458);
	payments.Transaction = __webpack_require__(1020);
	payments.TransactionInfo = __webpack_require__(104);
	payments.TransactionResult = __webpack_require__(459);
	payments.TransactionSettings = __webpack_require__(164);
	payments.TxFormat = __webpack_require__(460);
	payments.TxType = __webpack_require__(461);
	payments.Type = __webpack_require__(462);
	payments.VasConfig = __webpack_require__(255);
	payments.VasDataType = __webpack_require__(165);
	payments.VasDataTypeType = __webpack_require__(463);
	payments.VasMode = __webpack_require__(256);
	payments.VasPayload = __webpack_require__(464);
	payments.VasPayloadElement = __webpack_require__(465);
	payments.VasPayloadResponse = __webpack_require__(1021);
	payments.VasPayloadResponseType = __webpack_require__(466);
	payments.VasProtocol = __webpack_require__(257);
	payments.VasPushMode = __webpack_require__(467);
	payments.VasResponseFormat = __webpack_require__(468);
	payments.VasServiceProvider = __webpack_require__(469);
	payments.VasSettings = __webpack_require__(1022);
	payments.VaultedCard = __webpack_require__(70);

	//
	// Expose the module.
	//
	if (true) {
	  module.exports = payments;
	}
	    

/***/ }),
/* 1024 */
/***/ (function(module, exports, __webpack_require__) {

	
	module.exports.printer = printer;
	/**
	* @namespace printer
	*/
	function printer() {}


	printer.PrintCategory = __webpack_require__(166);
	printer.PrintJobStatus = __webpack_require__(258);
	printer.Printer = __webpack_require__(88);
	printer.PrinterType = __webpack_require__(470);

	//
	// Expose the module.
	//
	if (true) {
	  module.exports = printer;
	}
	    

/***/ }),
/* 1025 */
/***/ (function(module, exports, __webpack_require__) {

	/**
	 * Autogenerated by Avro
	 * 
	 * DO NOT EDIT DIRECTLY
	 */

	var remotemessage_Method = __webpack_require__(2);
	var remotemessage_Message = __webpack_require__(3);

	/**
	* @constructor
	* @augments remotemessage.Message
	* @memberof remotemessage
	*/
	var AcknowledgementMessage = function() {
	  remotemessage_Message.call(this);
	  this._superClass_ = remotemessage_Message;
	  this._class_ = AcknowledgementMessage;
	  this.setMethod(remotemessage_Method["ACK"]);
	  this.sourceMethod = undefined;
	};

	AcknowledgementMessage.prototype = Object.create(remotemessage_Message.prototype);
	AcknowledgementMessage.prototype.constructor = AcknowledgementMessage;

	/**
	* Set the field value
	* The remote message method type that is being acknowledged
	*
	* @memberof remotemessage.AcknowledgementMessage
	* @param {remotemessage.Method} sourceMethod 
	*/
	AcknowledgementMessage.prototype.setSourceMethod = function(sourceMethod) {
	  this.sourceMethod = sourceMethod;
	};

	/**
	* Get the field value
	* The remote message method type that is being acknowledged
	* @memberof remotemessage.AcknowledgementMessage
	* @return {remotemessage.Method} 
	*/
	AcknowledgementMessage.prototype.getSourceMethod = function() {
	  return this.sourceMethod;
	};

	AcknowledgementMessage._meta_ =  {fields:  {}};
	AcknowledgementMessage._meta_._class_ =  AcknowledgementMessage;
	AcknowledgementMessage._meta_._superMeta_ = remotemessage_Message._meta_;
	AcknowledgementMessage._meta_.fields["sourceMethod"] = {};
	AcknowledgementMessage._meta_.fields["sourceMethod"].type = remotemessage_Method;

	//
	// Expose the module.
	//
	if (true) {
	module.exports = AcknowledgementMessage;
	}



/***/ }),
/* 1026 */
/***/ (function(module, exports, __webpack_require__) {

	/**
	 * Autogenerated by Avro
	 * 
	 * DO NOT EDIT DIRECTLY
	 */

	var remotemessage_Method = __webpack_require__(2);
	var remotemessage_Message = __webpack_require__(3);

	/**
	* @constructor
	* @augments remotemessage.Message
	* @memberof remotemessage
	*/
	var ActivityMessageFromActivity = function() {
	  remotemessage_Message.call(this);
	  this._superClass_ = remotemessage_Message;
	  this._class_ = ActivityMessageFromActivity;
	  this.setMethod(remotemessage_Method["ACTIVITY_MESSAGE_FROM_ACTIVITY"]);
	  this.action = undefined;
	  this.payload = undefined;
	};

	ActivityMessageFromActivity.prototype = Object.create(remotemessage_Message.prototype);
	ActivityMessageFromActivity.prototype.constructor = ActivityMessageFromActivity;

	/**
	* Set the field value
	* The name of the activity/action being sent from a running custom activity
	*
	* @memberof remotemessage.ActivityMessageFromActivity
	* @param {String} action 
	*/
	ActivityMessageFromActivity.prototype.setAction = function(action) {
	  this.action = action;
	};

	/**
	* Get the field value
	* The name of the activity/action being sent from a running custom activity
	* @memberof remotemessage.ActivityMessageFromActivity
	* @return {String} 
	*/
	ActivityMessageFromActivity.prototype.getAction = function() {
	  return this.action;
	};

	/**
	* Set the field value
	* Data for this activity
	*
	* @memberof remotemessage.ActivityMessageFromActivity
	* @param {String} payload 
	*/
	ActivityMessageFromActivity.prototype.setPayload = function(payload) {
	  this.payload = payload;
	};

	/**
	* Get the field value
	* Data for this activity
	* @memberof remotemessage.ActivityMessageFromActivity
	* @return {String} 
	*/
	ActivityMessageFromActivity.prototype.getPayload = function() {
	  return this.payload;
	};

	ActivityMessageFromActivity._meta_ =  {fields:  {}};
	ActivityMessageFromActivity._meta_._class_ =  ActivityMessageFromActivity;
	ActivityMessageFromActivity._meta_._superMeta_ = remotemessage_Message._meta_;
	ActivityMessageFromActivity._meta_.fields["action"] = {};
	ActivityMessageFromActivity._meta_.fields["action"].type = String;
	ActivityMessageFromActivity._meta_.fields["payload"] = {};
	ActivityMessageFromActivity._meta_.fields["payload"].type = String;

	//
	// Expose the module.
	//
	if (true) {
	module.exports = ActivityMessageFromActivity;
	}



/***/ }),
/* 1027 */
/***/ (function(module, exports, __webpack_require__) {

	/**
	 * Autogenerated by Avro
	 * 
	 * DO NOT EDIT DIRECTLY
	 */

	var remotemessage_Method = __webpack_require__(2);
	var remotemessage_Message = __webpack_require__(3);

	/**
	* @constructor
	* @augments remotemessage.Message
	* @memberof remotemessage
	*/
	var ActivityMessageToActivity = function() {
	  remotemessage_Message.call(this);
	  this._superClass_ = remotemessage_Message;
	  this._class_ = ActivityMessageToActivity;
	  this.setMethod(remotemessage_Method["ACTIVITY_MESSAGE_TO_ACTIVITY"]);
	  this.action = undefined;
	  this.payload = undefined;
	};

	ActivityMessageToActivity.prototype = Object.create(remotemessage_Message.prototype);
	ActivityMessageToActivity.prototype.constructor = ActivityMessageToActivity;

	/**
	* Set the field value
	* The name of the activity/action being sent to a running custom activity
	*
	* @memberof remotemessage.ActivityMessageToActivity
	* @param {String} action 
	*/
	ActivityMessageToActivity.prototype.setAction = function(action) {
	  this.action = action;
	};

	/**
	* Get the field value
	* The name of the activity/action being sent to a running custom activity
	* @memberof remotemessage.ActivityMessageToActivity
	* @return {String} 
	*/
	ActivityMessageToActivity.prototype.getAction = function() {
	  return this.action;
	};

	/**
	* Set the field value
	* Data for this activity
	*
	* @memberof remotemessage.ActivityMessageToActivity
	* @param {String} payload 
	*/
	ActivityMessageToActivity.prototype.setPayload = function(payload) {
	  this.payload = payload;
	};

	/**
	* Get the field value
	* Data for this activity
	* @memberof remotemessage.ActivityMessageToActivity
	* @return {String} 
	*/
	ActivityMessageToActivity.prototype.getPayload = function() {
	  return this.payload;
	};

	ActivityMessageToActivity._meta_ =  {fields:  {}};
	ActivityMessageToActivity._meta_._class_ =  ActivityMessageToActivity;
	ActivityMessageToActivity._meta_._superMeta_ = remotemessage_Message._meta_;
	ActivityMessageToActivity._meta_.fields["action"] = {};
	ActivityMessageToActivity._meta_.fields["action"].type = String;
	ActivityMessageToActivity._meta_.fields["payload"] = {};
	ActivityMessageToActivity._meta_.fields["payload"].type = String;

	//
	// Expose the module.
	//
	if (true) {
	module.exports = ActivityMessageToActivity;
	}



/***/ }),
/* 1028 */
/***/ (function(module, exports, __webpack_require__) {

	/**
	 * Autogenerated by Avro
	 * 
	 * DO NOT EDIT DIRECTLY
	 */

	var remotemessage_Method = __webpack_require__(2);
	var remotemessage_Message = __webpack_require__(3);

	/**
	* @constructor
	* @augments remotemessage.Message
	* @memberof remotemessage
	*/
	var ActivityRequest = function() {
	  remotemessage_Message.call(this);
	  this._superClass_ = remotemessage_Message;
	  this._class_ = ActivityRequest;
	  this.setMethod(remotemessage_Method["ACTIVITY_REQUEST"]);
	  this.action = undefined;
	  this.payload = undefined;
	  this.nonBlocking = undefined;
	  this.forceLaunch = undefined;
	};

	ActivityRequest.prototype = Object.create(remotemessage_Message.prototype);
	ActivityRequest.prototype.constructor = ActivityRequest;

	/**
	* Set the field value
	* The name of the action for this activity
	*
	* @memberof remotemessage.ActivityRequest
	* @param {String} action 
	*/
	ActivityRequest.prototype.setAction = function(action) {
	  this.action = action;
	};

	/**
	* Get the field value
	* The name of the action for this activity
	* @memberof remotemessage.ActivityRequest
	* @return {String} 
	*/
	ActivityRequest.prototype.getAction = function() {
	  return this.action;
	};

	/**
	* Set the field value
	* Data for this activity
	*
	* @memberof remotemessage.ActivityRequest
	* @param {String} payload 
	*/
	ActivityRequest.prototype.setPayload = function(payload) {
	  this.payload = payload;
	};

	/**
	* Get the field value
	* Data for this activity
	* @memberof remotemessage.ActivityRequest
	* @return {String} 
	*/
	ActivityRequest.prototype.getPayload = function() {
	  return this.payload;
	};

	/**
	* Set the field value
	* If true, then the activity can be stopped in regular execution.
	*
	* @memberof remotemessage.ActivityRequest
	* @param {Boolean} nonBlocking 
	*/
	ActivityRequest.prototype.setNonBlocking = function(nonBlocking) {
	  this.nonBlocking = nonBlocking;
	};

	/**
	* Get the field value
	* If true, then the activity can be stopped in regular execution.
	* @memberof remotemessage.ActivityRequest
	* @return {Boolean} 
	*/
	ActivityRequest.prototype.getNonBlocking = function() {
	  return this.nonBlocking;
	};

	/**
	* Set the field value
	* If true, then the activity will cancel other activity and run.  This includes payment activity.
	*
	* @memberof remotemessage.ActivityRequest
	* @param {Boolean} forceLaunch 
	*/
	ActivityRequest.prototype.setForceLaunch = function(forceLaunch) {
	  this.forceLaunch = forceLaunch;
	};

	/**
	* Get the field value
	* If true, then the activity will cancel other activity and run.  This includes payment activity.
	* @memberof remotemessage.ActivityRequest
	* @return {Boolean} 
	*/
	ActivityRequest.prototype.getForceLaunch = function() {
	  return this.forceLaunch;
	};

	ActivityRequest._meta_ =  {fields:  {}};
	ActivityRequest._meta_._class_ =  ActivityRequest;
	ActivityRequest._meta_._superMeta_ = remotemessage_Message._meta_;
	ActivityRequest._meta_.fields["action"] = {};
	ActivityRequest._meta_.fields["action"].type = String;
	ActivityRequest._meta_.fields["payload"] = {};
	ActivityRequest._meta_.fields["payload"].type = String;
	ActivityRequest._meta_.fields["nonBlocking"] = {};
	ActivityRequest._meta_.fields["nonBlocking"].type = Boolean;
	ActivityRequest._meta_.fields["forceLaunch"] = {};
	ActivityRequest._meta_.fields["forceLaunch"].type = Boolean;

	//
	// Expose the module.
	//
	if (true) {
	module.exports = ActivityRequest;
	}



/***/ }),
/* 1029 */
/***/ (function(module, exports, __webpack_require__) {

	/**
	 * Autogenerated by Avro
	 * 
	 * DO NOT EDIT DIRECTLY
	 */

	var remotemessage_Method = __webpack_require__(2);
	var remotemessage_Message = __webpack_require__(3);

	/**
	* @constructor
	* @augments remotemessage.Message
	* @memberof remotemessage
	*/
	var ActivityResponseMessage = function() {
	  remotemessage_Message.call(this);
	  this._superClass_ = remotemessage_Message;
	  this._class_ = ActivityResponseMessage;
	  this.setMethod(remotemessage_Method["ACTIVITY_RESPONSE"]);
	  this.resultCode = undefined;
	  this.failReason = undefined;
	  this.payload = undefined;
	  this.action = undefined;
	};

	ActivityResponseMessage.prototype = Object.create(remotemessage_Message.prototype);
	ActivityResponseMessage.prototype.constructor = ActivityResponseMessage;

	/**
	* Set the field value
	* The result code after running this activity
	*
	* @memberof remotemessage.ActivityResponseMessage
	* @param {Number} resultCode must be a long integer
	*/
	ActivityResponseMessage.prototype.setResultCode = function(resultCode) {
	  this.resultCode = resultCode;
	};

	/**
	* Get the field value
	* The result code after running this activity
	* @memberof remotemessage.ActivityResponseMessage
	* @return {Number} must be a long integer
	*/
	ActivityResponseMessage.prototype.getResultCode = function() {
	  return this.resultCode;
	};

	/**
	* Set the field value
	* If this activity failed, the reason for the failure
	*
	* @memberof remotemessage.ActivityResponseMessage
	* @param {String} failReason 
	*/
	ActivityResponseMessage.prototype.setFailReason = function(failReason) {
	  this.failReason = failReason;
	};

	/**
	* Get the field value
	* If this activity failed, the reason for the failure
	* @memberof remotemessage.ActivityResponseMessage
	* @return {String} 
	*/
	ActivityResponseMessage.prototype.getFailReason = function() {
	  return this.failReason;
	};

	/**
	* Set the field value
	* Response data for this activity
	*
	* @memberof remotemessage.ActivityResponseMessage
	* @param {String} payload 
	*/
	ActivityResponseMessage.prototype.setPayload = function(payload) {
	  this.payload = payload;
	};

	/**
	* Get the field value
	* Response data for this activity
	* @memberof remotemessage.ActivityResponseMessage
	* @return {String} 
	*/
	ActivityResponseMessage.prototype.getPayload = function() {
	  return this.payload;
	};

	/**
	* Set the field value
	* The name of the action for this activity
	*
	* @memberof remotemessage.ActivityResponseMessage
	* @param {String} action 
	*/
	ActivityResponseMessage.prototype.setAction = function(action) {
	  this.action = action;
	};

	/**
	* Get the field value
	* The name of the action for this activity
	* @memberof remotemessage.ActivityResponseMessage
	* @return {String} 
	*/
	ActivityResponseMessage.prototype.getAction = function() {
	  return this.action;
	};

	ActivityResponseMessage._meta_ =  {fields:  {}};
	ActivityResponseMessage._meta_._class_ =  ActivityResponseMessage;
	ActivityResponseMessage._meta_._superMeta_ = remotemessage_Message._meta_;
	ActivityResponseMessage._meta_.fields["resultCode"] = {};
	ActivityResponseMessage._meta_.fields["resultCode"].type = Number;
	ActivityResponseMessage._meta_.fields["failReason"] = {};
	ActivityResponseMessage._meta_.fields["failReason"].type = String;
	ActivityResponseMessage._meta_.fields["payload"] = {};
	ActivityResponseMessage._meta_.fields["payload"].type = String;
	ActivityResponseMessage._meta_.fields["action"] = {};
	ActivityResponseMessage._meta_.fields["action"].type = String;

	//
	// Expose the module.
	//
	if (true) {
	module.exports = ActivityResponseMessage;
	}



/***/ }),
/* 1030 */
/***/ (function(module, exports, __webpack_require__) {

	/**
	 * Autogenerated by Avro
	 * 
	 * DO NOT EDIT DIRECTLY
	 */

	var remotemessage_Method = __webpack_require__(2);
	var remotemessage_Message = __webpack_require__(3);

	/**
	* @constructor
	* @augments remotemessage.Message
	* @memberof remotemessage
	*/
	var BalanceInquiryRequestMessage = function() {
	  remotemessage_Message.call(this);
	  this._superClass_ = remotemessage_Message;
	  this._class_ = BalanceInquiryRequestMessage;
	  this.setMethod(remotemessage_Method["BALANCE_INQUIRY"]);
	  this.cardEntryMethods = undefined;
	  this.cardDataMessage = undefined;
	};

	BalanceInquiryRequestMessage.prototype = Object.create(remotemessage_Message.prototype);
	BalanceInquiryRequestMessage.prototype.constructor = BalanceInquiryRequestMessage;

	/**
	* Set the field value
	* @memberof remotemessage.BalanceInquiryRequestMessage
	* @param {Null|Number} cardEntryMethods must be an integer
	*/
	BalanceInquiryRequestMessage.prototype.setCardEntryMethods = function(cardEntryMethods) {
	  this.cardEntryMethods = cardEntryMethods;
	};

	/**
	* Get the field value
	* @memberof remotemessage.BalanceInquiryRequestMessage
	* @return {Null|Number} must be an integer
	*/
	BalanceInquiryRequestMessage.prototype.getCardEntryMethods = function() {
	  return this.cardEntryMethods;
	};

	/**
	* Set the field value
	* @memberof remotemessage.BalanceInquiryRequestMessage
	* @param {String} cardDataMessage 
	*/
	BalanceInquiryRequestMessage.prototype.setCardDataMessage = function(cardDataMessage) {
	  this.cardDataMessage = cardDataMessage;
	};

	/**
	* Get the field value
	* @memberof remotemessage.BalanceInquiryRequestMessage
	* @return {String} 
	*/
	BalanceInquiryRequestMessage.prototype.getCardDataMessage = function() {
	  return this.cardDataMessage;
	};

	BalanceInquiryRequestMessage._meta_ =  {fields:  {}};
	BalanceInquiryRequestMessage._meta_._class_ =  BalanceInquiryRequestMessage;
	BalanceInquiryRequestMessage._meta_._superMeta_ = remotemessage_Message._meta_;
	BalanceInquiryRequestMessage._meta_.fields["cardEntryMethods"] = {};
	BalanceInquiryRequestMessage._meta_.fields["cardEntryMethods"].type = Number;
	BalanceInquiryRequestMessage._meta_.fields["cardDataMessage"] = {};
	BalanceInquiryRequestMessage._meta_.fields["cardDataMessage"].type = String;

	//
	// Expose the module.
	//
	if (true) {
	module.exports = BalanceInquiryRequestMessage;
	}



/***/ }),
/* 1031 */
/***/ (function(module, exports, __webpack_require__) {

	/**
	 * Autogenerated by Avro
	 * 
	 * DO NOT EDIT DIRECTLY
	 */

	var remotemessage_Method = __webpack_require__(2);
	var remotemessage_ResultStatus = __webpack_require__(23);
	var pay_PaymentRequestCardDetails = __webpack_require__(158);
	var remotemessage_Message = __webpack_require__(3);
	var payments_Payment = __webpack_require__(11);

	/**
	* @constructor
	* @augments remotemessage.Message
	* @memberof remotemessage
	*/
	var BalanceInquiryResponseMessage = function() {
	  remotemessage_Message.call(this);
	  this._superClass_ = remotemessage_Message;
	  this._class_ = BalanceInquiryResponseMessage;
	  this.setMethod(remotemessage_Method["BALANCE_INQUIRY_RESPONSE"]);
	  this.status = undefined;
	  this.reason = undefined;
	  this.payment = undefined;
	  this.cardDetails = undefined;
	};

	BalanceInquiryResponseMessage.prototype = Object.create(remotemessage_Message.prototype);
	BalanceInquiryResponseMessage.prototype.constructor = BalanceInquiryResponseMessage;

	/**
	* Set the field value
	* @memberof remotemessage.BalanceInquiryResponseMessage
	* @param {remotemessage.ResultStatus} status 
	*/
	BalanceInquiryResponseMessage.prototype.setStatus = function(status) {
	  this.status = status;
	};

	/**
	* Get the field value
	* @memberof remotemessage.BalanceInquiryResponseMessage
	* @return {remotemessage.ResultStatus} 
	*/
	BalanceInquiryResponseMessage.prototype.getStatus = function() {
	  return this.status;
	};

	/**
	* Set the field value
	* @memberof remotemessage.BalanceInquiryResponseMessage
	* @param {String} reason 
	*/
	BalanceInquiryResponseMessage.prototype.setReason = function(reason) {
	  this.reason = reason;
	};

	/**
	* Get the field value
	* @memberof remotemessage.BalanceInquiryResponseMessage
	* @return {String} 
	*/
	BalanceInquiryResponseMessage.prototype.getReason = function() {
	  return this.reason;
	};

	/**
	* Set the field value
	* @memberof remotemessage.BalanceInquiryResponseMessage
	* @param {payments.Payment} payment 
	*/
	BalanceInquiryResponseMessage.prototype.setPayment = function(payment) {
	  this.payment = payment;
	};

	/**
	* Get the field value
	* @memberof remotemessage.BalanceInquiryResponseMessage
	* @return {payments.Payment} 
	*/
	BalanceInquiryResponseMessage.prototype.getPayment = function() {
	  return this.payment;
	};

	/**
	* Set the field value
	* @memberof remotemessage.BalanceInquiryResponseMessage
	* @param {pay.PaymentRequestCardDetails} cardDetails 
	*/
	BalanceInquiryResponseMessage.prototype.setCardDetails = function(cardDetails) {
	  this.cardDetails = cardDetails;
	};

	/**
	* Get the field value
	* @memberof remotemessage.BalanceInquiryResponseMessage
	* @return {pay.PaymentRequestCardDetails} 
	*/
	BalanceInquiryResponseMessage.prototype.getCardDetails = function() {
	  return this.cardDetails;
	};

	BalanceInquiryResponseMessage._meta_ =  {fields:  {}};
	BalanceInquiryResponseMessage._meta_._class_ =  BalanceInquiryResponseMessage;
	BalanceInquiryResponseMessage._meta_._superMeta_ = remotemessage_Message._meta_;
	BalanceInquiryResponseMessage._meta_.fields["status"] = {};
	BalanceInquiryResponseMessage._meta_.fields["status"].type = remotemessage_ResultStatus;
	BalanceInquiryResponseMessage._meta_.fields["reason"] = {};
	BalanceInquiryResponseMessage._meta_.fields["reason"].type = String;
	BalanceInquiryResponseMessage._meta_.fields["payment"] = {};
	BalanceInquiryResponseMessage._meta_.fields["payment"].type = payments_Payment;
	BalanceInquiryResponseMessage._meta_.fields["cardDetails"] = {};
	BalanceInquiryResponseMessage._meta_.fields["cardDetails"].type = pay_PaymentRequestCardDetails;

	//
	// Expose the module.
	//
	if (true) {
	module.exports = BalanceInquiryResponseMessage;
	}



/***/ }),
/* 1032 */
/***/ (function(module, exports, __webpack_require__) {

	/**
	 * Autogenerated by Avro
	 * 
	 * DO NOT EDIT DIRECTLY
	 */

	var remotemessage_Method = __webpack_require__(2);
	var remotemessage_Message = __webpack_require__(3);

	/**
	* @constructor
	* @augments remotemessage.Message
	* @memberof remotemessage
	*/
	var BreakMessage = function() {
	  remotemessage_Message.call(this);
	  this._superClass_ = remotemessage_Message;
	  this._class_ = BreakMessage;
	  this.setMethod(remotemessage_Method["BREAK"]);
	};

	BreakMessage.prototype = Object.create(remotemessage_Message.prototype);
	BreakMessage.prototype.constructor = BreakMessage;

	BreakMessage._meta_ =  {fields:  {}};
	BreakMessage._meta_._class_ =  BreakMessage;
	BreakMessage._meta_._superMeta_ = remotemessage_Message._meta_;

	//
	// Expose the module.
	//
	if (true) {
	module.exports = BreakMessage;
	}



/***/ }),
/* 1033 */
/***/ (function(module, exports, __webpack_require__) {

	/**
	 * Autogenerated by Avro
	 * 
	 * DO NOT EDIT DIRECTLY
	 */

	var remotemessage_Method = __webpack_require__(2);
	var remotemessage_Message = __webpack_require__(3);

	/**
	* @constructor
	* @augments remotemessage.Message
	* @memberof remotemessage
	*/
	var CapturePreAuthMessage = function() {
	  remotemessage_Message.call(this);
	  this._superClass_ = remotemessage_Message;
	  this._class_ = CapturePreAuthMessage;
	  this.setMethod(remotemessage_Method["CAPTURE_PREAUTH"]);
	  this.amount = undefined;
	  this.tipAmount = undefined;
	  this.paymentId = undefined;
	};

	CapturePreAuthMessage.prototype = Object.create(remotemessage_Message.prototype);
	CapturePreAuthMessage.prototype.constructor = CapturePreAuthMessage;

	/**
	* Set the field value
	* Total amount paid
	*
	* @memberof remotemessage.CapturePreAuthMessage
	* @param {Number} amount must be a long integer
	*/
	CapturePreAuthMessage.prototype.setAmount = function(amount) {
	  this.amount = amount;
	};

	/**
	* Get the field value
	* Total amount paid
	* @memberof remotemessage.CapturePreAuthMessage
	* @return {Number} must be a long integer
	*/
	CapturePreAuthMessage.prototype.getAmount = function() {
	  return this.amount;
	};

	/**
	* Set the field value
	* Amount paid in tips
	*
	* @memberof remotemessage.CapturePreAuthMessage
	* @param {Number|Null} tipAmount must be a long integer, 
	*/
	CapturePreAuthMessage.prototype.setTipAmount = function(tipAmount) {
	  this.tipAmount = tipAmount;
	};

	/**
	* Get the field value
	* Amount paid in tips
	* @memberof remotemessage.CapturePreAuthMessage
	* @return {Number|Null} must be a long integer, 
	*/
	CapturePreAuthMessage.prototype.getTipAmount = function() {
	  return this.tipAmount;
	};

	/**
	* Set the field value
	* Unique identifier for a payment
	*
	* @memberof remotemessage.CapturePreAuthMessage
	* @param {String} paymentId 
	*/
	CapturePreAuthMessage.prototype.setPaymentId = function(paymentId) {
	  this.paymentId = paymentId;
	};

	/**
	* Get the field value
	* Unique identifier for a payment
	* @memberof remotemessage.CapturePreAuthMessage
	* @return {String} 
	*/
	CapturePreAuthMessage.prototype.getPaymentId = function() {
	  return this.paymentId;
	};

	CapturePreAuthMessage._meta_ =  {fields:  {}};
	CapturePreAuthMessage._meta_._class_ =  CapturePreAuthMessage;
	CapturePreAuthMessage._meta_._superMeta_ = remotemessage_Message._meta_;
	CapturePreAuthMessage._meta_.fields["amount"] = {};
	CapturePreAuthMessage._meta_.fields["amount"].type = Number;
	CapturePreAuthMessage._meta_.fields["tipAmount"] = {};
	CapturePreAuthMessage._meta_.fields["tipAmount"].type = Number;
	CapturePreAuthMessage._meta_.fields["paymentId"] = {};
	CapturePreAuthMessage._meta_.fields["paymentId"].type = String;

	//
	// Expose the module.
	//
	if (true) {
	module.exports = CapturePreAuthMessage;
	}



/***/ }),
/* 1034 */
/***/ (function(module, exports, __webpack_require__) {

	/**
	 * Autogenerated by Avro
	 * 
	 * DO NOT EDIT DIRECTLY
	 */

	var remotemessage_Method = __webpack_require__(2);
	var remotemessage_ResultStatus = __webpack_require__(23);
	var remotemessage_Message = __webpack_require__(3);

	/**
	* @constructor
	* @augments remotemessage.Message
	* @memberof remotemessage
	*/
	var CapturePreAuthResponseMessage = function() {
	  remotemessage_Message.call(this);
	  this._superClass_ = remotemessage_Message;
	  this._class_ = CapturePreAuthResponseMessage;
	  this.setMethod(remotemessage_Method["CAPTURE_PREAUTH_RESPONSE"]);
	  this.status = undefined;
	  this.reason = undefined;
	  this.message = undefined;
	  this.paymentId = undefined;
	  this.amount = undefined;
	  this.tipAmount = undefined;
	};

	CapturePreAuthResponseMessage.prototype = Object.create(remotemessage_Message.prototype);
	CapturePreAuthResponseMessage.prototype.constructor = CapturePreAuthResponseMessage;

	/**
	* Set the field value
	* The status of the request.
	*
	* @memberof remotemessage.CapturePreAuthResponseMessage
	* @param {remotemessage.ResultStatus} status 
	*/
	CapturePreAuthResponseMessage.prototype.setStatus = function(status) {
	  this.status = status;
	};

	/**
	* Get the field value
	* The status of the request.
	* @memberof remotemessage.CapturePreAuthResponseMessage
	* @return {remotemessage.ResultStatus} 
	*/
	CapturePreAuthResponseMessage.prototype.getStatus = function() {
	  return this.status;
	};

	/**
	* Set the field value
	* Detail message from the server.
	*
	* @memberof remotemessage.CapturePreAuthResponseMessage
	* @param {String} reason 
	*/
	CapturePreAuthResponseMessage.prototype.setReason = function(reason) {
	  this.reason = reason;
	};

	/**
	* Get the field value
	* Detail message from the server.
	* @memberof remotemessage.CapturePreAuthResponseMessage
	* @return {String} 
	*/
	CapturePreAuthResponseMessage.prototype.getReason = function() {
	  return this.reason;
	};

	/**
	* Set the field value
	* @memberof remotemessage.CapturePreAuthResponseMessage
	* @param {String} message 
	*/
	CapturePreAuthResponseMessage.prototype.setMessage = function(message) {
	  this.message = message;
	};

	/**
	* Get the field value
	* @memberof remotemessage.CapturePreAuthResponseMessage
	* @return {String} 
	*/
	CapturePreAuthResponseMessage.prototype.getMessage = function() {
	  return this.message;
	};

	/**
	* Set the field value
	* Unique identifier for a payment
	*
	* @memberof remotemessage.CapturePreAuthResponseMessage
	* @param {String} paymentId 
	*/
	CapturePreAuthResponseMessage.prototype.setPaymentId = function(paymentId) {
	  this.paymentId = paymentId;
	};

	/**
	* Get the field value
	* Unique identifier for a payment
	* @memberof remotemessage.CapturePreAuthResponseMessage
	* @return {String} 
	*/
	CapturePreAuthResponseMessage.prototype.getPaymentId = function() {
	  return this.paymentId;
	};

	/**
	* Set the field value
	* Total amount paid
	*
	* @memberof remotemessage.CapturePreAuthResponseMessage
	* @param {Number} amount must be a long integer
	*/
	CapturePreAuthResponseMessage.prototype.setAmount = function(amount) {
	  this.amount = amount;
	};

	/**
	* Get the field value
	* Total amount paid
	* @memberof remotemessage.CapturePreAuthResponseMessage
	* @return {Number} must be a long integer
	*/
	CapturePreAuthResponseMessage.prototype.getAmount = function() {
	  return this.amount;
	};

	/**
	* Set the field value
	* Amount paid in tips
	*
	* @memberof remotemessage.CapturePreAuthResponseMessage
	* @param {Number|Null} tipAmount must be a long integer, 
	*/
	CapturePreAuthResponseMessage.prototype.setTipAmount = function(tipAmount) {
	  this.tipAmount = tipAmount;
	};

	/**
	* Get the field value
	* Amount paid in tips
	* @memberof remotemessage.CapturePreAuthResponseMessage
	* @return {Number|Null} must be a long integer, 
	*/
	CapturePreAuthResponseMessage.prototype.getTipAmount = function() {
	  return this.tipAmount;
	};

	CapturePreAuthResponseMessage._meta_ =  {fields:  {}};
	CapturePreAuthResponseMessage._meta_._class_ =  CapturePreAuthResponseMessage;
	CapturePreAuthResponseMessage._meta_._superMeta_ = remotemessage_Message._meta_;
	CapturePreAuthResponseMessage._meta_.fields["status"] = {};
	CapturePreAuthResponseMessage._meta_.fields["status"].type = remotemessage_ResultStatus;
	CapturePreAuthResponseMessage._meta_.fields["reason"] = {};
	CapturePreAuthResponseMessage._meta_.fields["reason"].type = String;
	CapturePreAuthResponseMessage._meta_.fields["message"] = {};
	CapturePreAuthResponseMessage._meta_.fields["message"].type = String;
	CapturePreAuthResponseMessage._meta_.fields["paymentId"] = {};
	CapturePreAuthResponseMessage._meta_.fields["paymentId"].type = String;
	CapturePreAuthResponseMessage._meta_.fields["amount"] = {};
	CapturePreAuthResponseMessage._meta_.fields["amount"].type = Number;
	CapturePreAuthResponseMessage._meta_.fields["tipAmount"] = {};
	CapturePreAuthResponseMessage._meta_.fields["tipAmount"].type = Number;

	//
	// Expose the module.
	//
	if (true) {
	module.exports = CapturePreAuthResponseMessage;
	}



/***/ }),
/* 1035 */
/***/ (function(module, exports, __webpack_require__) {

	/**
	 * Autogenerated by Avro
	 * 
	 * DO NOT EDIT DIRECTLY
	 */

	var remotemessage_Method = __webpack_require__(2);
	var remotemessage_PayIntent = __webpack_require__(262);
	var remotemessage_Message = __webpack_require__(3);

	/**
	* @constructor
	* @augments remotemessage.Message
	* @memberof remotemessage
	*/
	var CardDataRequestMessage = function() {
	  remotemessage_Message.call(this);
	  this._superClass_ = remotemessage_Message;
	  this._class_ = CardDataRequestMessage;
	  this.setMethod(remotemessage_Method["CARD_DATA"]);
	  this.payIntent = undefined;
	};

	CardDataRequestMessage.prototype = Object.create(remotemessage_Message.prototype);
	CardDataRequestMessage.prototype.constructor = CardDataRequestMessage;

	/**
	* Set the field value
	* The payIntent
	*
	* @memberof remotemessage.CardDataRequestMessage
	* @param {remotemessage.PayIntent} payIntent 
	*/
	CardDataRequestMessage.prototype.setPayIntent = function(payIntent) {
	  this.payIntent = payIntent;
	};

	/**
	* Get the field value
	* The payIntent
	* @memberof remotemessage.CardDataRequestMessage
	* @return {remotemessage.PayIntent} 
	*/
	CardDataRequestMessage.prototype.getPayIntent = function() {
	  return this.payIntent;
	};

	CardDataRequestMessage._meta_ =  {fields:  {}};
	CardDataRequestMessage._meta_._class_ =  CardDataRequestMessage;
	CardDataRequestMessage._meta_._superMeta_ = remotemessage_Message._meta_;
	CardDataRequestMessage._meta_.fields["payIntent"] = {};
	CardDataRequestMessage._meta_.fields["payIntent"].type = remotemessage_PayIntent;

	//
	// Expose the module.
	//
	if (true) {
	module.exports = CardDataRequestMessage;
	}



/***/ }),
/* 1036 */
/***/ (function(module, exports, __webpack_require__) {

	/**
	 * Autogenerated by Avro
	 * 
	 * DO NOT EDIT DIRECTLY
	 */

	var remotemessage_Method = __webpack_require__(2);
	var remotemessage_ResultStatus = __webpack_require__(23);
	var remotemessage_Message = __webpack_require__(3);
	var base_CardData = __webpack_require__(233);

	/**
	* @constructor
	* @augments remotemessage.Message
	* @memberof remotemessage
	*/
	var CardDataResponseMessage = function() {
	  remotemessage_Message.call(this);
	  this._superClass_ = remotemessage_Message;
	  this._class_ = CardDataResponseMessage;
	  this.setMethod(remotemessage_Method["CARD_DATA_RESPONSE"]);
	  this.reason = undefined;
	  this.status = undefined;
	  this.cardData = undefined;
	};

	CardDataResponseMessage.prototype = Object.create(remotemessage_Message.prototype);
	CardDataResponseMessage.prototype.constructor = CardDataResponseMessage;

	/**
	* Set the field value
	* May be populated when the operation fails.
	*
	* @memberof remotemessage.CardDataResponseMessage
	* @param {String} reason 
	*/
	CardDataResponseMessage.prototype.setReason = function(reason) {
	  this.reason = reason;
	};

	/**
	* Get the field value
	* May be populated when the operation fails.
	* @memberof remotemessage.CardDataResponseMessage
	* @return {String} 
	*/
	CardDataResponseMessage.prototype.getReason = function() {
	  return this.reason;
	};

	/**
	* Set the field value
	* @memberof remotemessage.CardDataResponseMessage
	* @param {remotemessage.ResultStatus} status 
	*/
	CardDataResponseMessage.prototype.setStatus = function(status) {
	  this.status = status;
	};

	/**
	* Get the field value
	* @memberof remotemessage.CardDataResponseMessage
	* @return {remotemessage.ResultStatus} 
	*/
	CardDataResponseMessage.prototype.getStatus = function() {
	  return this.status;
	};

	/**
	* Set the field value
	* The data for the card
	*
	* @memberof remotemessage.CardDataResponseMessage
	* @param {base.CardData} cardData 
	*/
	CardDataResponseMessage.prototype.setCardData = function(cardData) {
	  this.cardData = cardData;
	};

	/**
	* Get the field value
	* The data for the card
	* @memberof remotemessage.CardDataResponseMessage
	* @return {base.CardData} 
	*/
	CardDataResponseMessage.prototype.getCardData = function() {
	  return this.cardData;
	};

	CardDataResponseMessage._meta_ =  {fields:  {}};
	CardDataResponseMessage._meta_._class_ =  CardDataResponseMessage;
	CardDataResponseMessage._meta_._superMeta_ = remotemessage_Message._meta_;
	CardDataResponseMessage._meta_.fields["reason"] = {};
	CardDataResponseMessage._meta_.fields["reason"].type = String;
	CardDataResponseMessage._meta_.fields["status"] = {};
	CardDataResponseMessage._meta_.fields["status"].type = remotemessage_ResultStatus;
	CardDataResponseMessage._meta_.fields["cardData"] = {};
	CardDataResponseMessage._meta_.fields["cardData"].type = base_CardData;

	//
	// Expose the module.
	//
	if (true) {
	module.exports = CardDataResponseMessage;
	}



/***/ }),
/* 1037 */
/***/ (function(module, exports, __webpack_require__) {

	/**
	 * Autogenerated by Avro
	 * 
	 * DO NOT EDIT DIRECTLY
	 */

	var remotemessage_Method = __webpack_require__(2);
	var remotemessage_Message = __webpack_require__(3);

	/**
	* @constructor
	* @augments remotemessage.Message
	* @memberof remotemessage
	*/
	var CashbackSelectedMessage = function() {
	  remotemessage_Message.call(this);
	  this._superClass_ = remotemessage_Message;
	  this._class_ = CashbackSelectedMessage;
	  this.setMethod(remotemessage_Method["CASHBACK_SELECTED"]);
	  this.cashbackAmount = undefined;
	};

	CashbackSelectedMessage.prototype = Object.create(remotemessage_Message.prototype);
	CashbackSelectedMessage.prototype.constructor = CashbackSelectedMessage;

	/**
	* Set the field value
	* Amount of cash selected
	*
	* @memberof remotemessage.CashbackSelectedMessage
	* @param {Number} cashbackAmount must be a long integer
	*/
	CashbackSelectedMessage.prototype.setCashbackAmount = function(cashbackAmount) {
	  this.cashbackAmount = cashbackAmount;
	};

	/**
	* Get the field value
	* Amount of cash selected
	* @memberof remotemessage.CashbackSelectedMessage
	* @return {Number} must be a long integer
	*/
	CashbackSelectedMessage.prototype.getCashbackAmount = function() {
	  return this.cashbackAmount;
	};

	CashbackSelectedMessage._meta_ =  {fields:  {}};
	CashbackSelectedMessage._meta_._class_ =  CashbackSelectedMessage;
	CashbackSelectedMessage._meta_._superMeta_ = remotemessage_Message._meta_;
	CashbackSelectedMessage._meta_.fields["cashbackAmount"] = {};
	CashbackSelectedMessage._meta_.fields["cashbackAmount"].type = Number;

	//
	// Expose the module.
	//
	if (true) {
	module.exports = CashbackSelectedMessage;
	}



/***/ }),
/* 1038 */
/***/ (function(module, exports, __webpack_require__) {

	/**
	 * Autogenerated by Avro
	 * 
	 * DO NOT EDIT DIRECTLY
	 */

	var remotemessage_Method = __webpack_require__(2);
	var remotemessage_Message = __webpack_require__(3);

	/**
	* @constructor
	* @augments remotemessage.Message
	* @memberof remotemessage
	*/
	var CloseoutRequestMessage = function() {
	  remotemessage_Message.call(this);
	  this._superClass_ = remotemessage_Message;
	  this._class_ = CloseoutRequestMessage;
	  this.setMethod(remotemessage_Method["CLOSEOUT_REQUEST"]);
	  this.allowOpenTabs = undefined;
	  this.batchId = undefined;
	};

	CloseoutRequestMessage.prototype = Object.create(remotemessage_Message.prototype);
	CloseoutRequestMessage.prototype.constructor = CloseoutRequestMessage;

	/**
	* Set the field value
	* If true then open tabs can still be closed out.
	*
	* @memberof remotemessage.CloseoutRequestMessage
	* @param {Boolean} allowOpenTabs 
	*/
	CloseoutRequestMessage.prototype.setAllowOpenTabs = function(allowOpenTabs) {
	  this.allowOpenTabs = allowOpenTabs;
	};

	/**
	* Get the field value
	* If true then open tabs can still be closed out.
	* @memberof remotemessage.CloseoutRequestMessage
	* @return {Boolean} 
	*/
	CloseoutRequestMessage.prototype.getAllowOpenTabs = function() {
	  return this.allowOpenTabs;
	};

	/**
	* Set the field value
	* Reserved for future use.  Specifies the batch to close.
	*
	* @memberof remotemessage.CloseoutRequestMessage
	* @param {String} batchId 
	*/
	CloseoutRequestMessage.prototype.setBatchId = function(batchId) {
	  this.batchId = batchId;
	};

	/**
	* Get the field value
	* Reserved for future use.  Specifies the batch to close.
	* @memberof remotemessage.CloseoutRequestMessage
	* @return {String} 
	*/
	CloseoutRequestMessage.prototype.getBatchId = function() {
	  return this.batchId;
	};

	CloseoutRequestMessage._meta_ =  {fields:  {}};
	CloseoutRequestMessage._meta_._class_ =  CloseoutRequestMessage;
	CloseoutRequestMessage._meta_._superMeta_ = remotemessage_Message._meta_;
	CloseoutRequestMessage._meta_.fields["allowOpenTabs"] = {};
	CloseoutRequestMessage._meta_.fields["allowOpenTabs"].type = Boolean;
	CloseoutRequestMessage._meta_.fields["batchId"] = {};
	CloseoutRequestMessage._meta_.fields["batchId"].type = String;

	//
	// Expose the module.
	//
	if (true) {
	module.exports = CloseoutRequestMessage;
	}



/***/ }),
/* 1039 */
/***/ (function(module, exports, __webpack_require__) {

	/**
	 * Autogenerated by Avro
	 * 
	 * DO NOT EDIT DIRECTLY
	 */

	var remotemessage_Method = __webpack_require__(2);
	var remotemessage_ResultStatus = __webpack_require__(23);
	var payments_Batch = __webpack_require__(246);
	var remotemessage_Message = __webpack_require__(3);

	/**
	* @constructor
	* @augments remotemessage.Message
	* @memberof remotemessage
	*/
	var CloseoutResponseMessage = function() {
	  remotemessage_Message.call(this);
	  this._superClass_ = remotemessage_Message;
	  this._class_ = CloseoutResponseMessage;
	  this.setMethod(remotemessage_Method["CLOSEOUT_RESPONSE"]);
	  this.reason = undefined;
	  this.status = undefined;
	  this.batch = undefined;
	};

	CloseoutResponseMessage.prototype = Object.create(remotemessage_Message.prototype);
	CloseoutResponseMessage.prototype.constructor = CloseoutResponseMessage;

	/**
	* Set the field value
	* Detail information.
	*
	* @memberof remotemessage.CloseoutResponseMessage
	* @param {String} reason 
	*/
	CloseoutResponseMessage.prototype.setReason = function(reason) {
	  this.reason = reason;
	};

	/**
	* Get the field value
	* Detail information.
	* @memberof remotemessage.CloseoutResponseMessage
	* @return {String} 
	*/
	CloseoutResponseMessage.prototype.getReason = function() {
	  return this.reason;
	};

	/**
	* Set the field value
	* The status of the request.
	*
	* @memberof remotemessage.CloseoutResponseMessage
	* @param {remotemessage.ResultStatus} status 
	*/
	CloseoutResponseMessage.prototype.setStatus = function(status) {
	  this.status = status;
	};

	/**
	* Get the field value
	* The status of the request.
	* @memberof remotemessage.CloseoutResponseMessage
	* @return {remotemessage.ResultStatus} 
	*/
	CloseoutResponseMessage.prototype.getStatus = function() {
	  return this.status;
	};

	/**
	* Set the field value
	* The closeout info.
	*
	* @memberof remotemessage.CloseoutResponseMessage
	* @param {payments.Batch} batch 
	*/
	CloseoutResponseMessage.prototype.setBatch = function(batch) {
	  this.batch = batch;
	};

	/**
	* Get the field value
	* The closeout info.
	* @memberof remotemessage.CloseoutResponseMessage
	* @return {payments.Batch} 
	*/
	CloseoutResponseMessage.prototype.getBatch = function() {
	  return this.batch;
	};

	CloseoutResponseMessage._meta_ =  {fields:  {}};
	CloseoutResponseMessage._meta_._class_ =  CloseoutResponseMessage;
	CloseoutResponseMessage._meta_._superMeta_ = remotemessage_Message._meta_;
	CloseoutResponseMessage._meta_.fields["reason"] = {};
	CloseoutResponseMessage._meta_.fields["reason"].type = String;
	CloseoutResponseMessage._meta_.fields["status"] = {};
	CloseoutResponseMessage._meta_.fields["status"].type = remotemessage_ResultStatus;
	CloseoutResponseMessage._meta_.fields["batch"] = {};
	CloseoutResponseMessage._meta_.fields["batch"].type = payments_Batch;

	//
	// Expose the module.
	//
	if (true) {
	module.exports = CloseoutResponseMessage;
	}



/***/ }),
/* 1040 */
/***/ (function(module, exports, __webpack_require__) {

	/**
	 * Autogenerated by Avro
	 * 
	 * DO NOT EDIT DIRECTLY
	 */

	var remotemessage_Method = __webpack_require__(2);
	var remotemessage_Message = __webpack_require__(3);

	/**
	* @constructor
	* @augments remotemessage.Message
	* @memberof remotemessage
	*/
	var CloverDeviceLogMessage = function() {
	  remotemessage_Message.call(this);
	  this._superClass_ = remotemessage_Message;
	  this._class_ = CloverDeviceLogMessage;
	  this.setMethod(remotemessage_Method["CLOVER_DEVICE_LOG_REQUEST"]);
	  this.message = undefined;
	};

	CloverDeviceLogMessage.prototype = Object.create(remotemessage_Message.prototype);
	CloverDeviceLogMessage.prototype.constructor = CloverDeviceLogMessage;

	/**
	* Set the field value
	* The message to log.
	*
	* @memberof remotemessage.CloverDeviceLogMessage
	* @param {String} message 
	*/
	CloverDeviceLogMessage.prototype.setMessage = function(message) {
	  this.message = message;
	};

	/**
	* Get the field value
	* The message to log.
	* @memberof remotemessage.CloverDeviceLogMessage
	* @return {String} 
	*/
	CloverDeviceLogMessage.prototype.getMessage = function() {
	  return this.message;
	};

	CloverDeviceLogMessage._meta_ =  {fields:  {}};
	CloverDeviceLogMessage._meta_._class_ =  CloverDeviceLogMessage;
	CloverDeviceLogMessage._meta_._superMeta_ = remotemessage_Message._meta_;
	CloverDeviceLogMessage._meta_.fields["message"] = {};
	CloverDeviceLogMessage._meta_.fields["message"].type = String;

	//
	// Expose the module.
	//
	if (true) {
	module.exports = CloverDeviceLogMessage;
	}



/***/ }),
/* 1041 */
/***/ (function(module, exports, __webpack_require__) {

	/**
	 * Autogenerated by Avro
	 * 
	 * DO NOT EDIT DIRECTLY
	 */

	var remotemessage_Method = __webpack_require__(2);
	var remotemessage_Message = __webpack_require__(3);

	/**  Used to notify clients of pay display of a configuration change.
	 * This is conceptually abstract to allow for various configuration types. */
	/**
	* @constructor
	* @augments remotemessage.Message
	* @memberof remotemessage
	*/
	var ConfigurationChangeMessage = function() {
	  remotemessage_Message.call(this);
	  this._superClass_ = remotemessage_Message;
	  this._class_ = ConfigurationChangeMessage;
	  this.setMethod(remotemessage_Method["CONFIGURATION_CHANGE"]);
	  this.configurationType = undefined;
	  this.configuration = undefined;
	};

	ConfigurationChangeMessage.prototype = Object.create(remotemessage_Message.prototype);
	ConfigurationChangeMessage.prototype.constructor = ConfigurationChangeMessage;

	/**
	* Set the field value
	* The type of configuration that is upcoming.  One of
	 * com.clover.remote.message.ConfigurationChangeMessage#USB
	 * com.clover.remote.message.ConfigurationChangeMessage#NETWORK_PAY_DISPLAY
	 * com.clover.remote.message.ConfigurationChangeMessage#CLOUD_PAY_DISPLAY
	*
	* @memberof remotemessage.ConfigurationChangeMessage
	* @param {String} configurationType 
	*/
	ConfigurationChangeMessage.prototype.setConfigurationType = function(configurationType) {
	  this.configurationType = configurationType;
	};

	/**
	* Get the field value
	* The type of configuration that is upcoming.  One of
	 * com.clover.remote.message.ConfigurationChangeMessage#USB
	 * com.clover.remote.message.ConfigurationChangeMessage#NETWORK_PAY_DISPLAY
	 * com.clover.remote.message.ConfigurationChangeMessage#CLOUD_PAY_DISPLAY
	* @memberof remotemessage.ConfigurationChangeMessage
	* @return {String} 
	*/
	ConfigurationChangeMessage.prototype.getConfigurationType = function() {
	  return this.configurationType;
	};

	/**
	* Set the field value
	* Typically a json serialized string that represents the change to the configuration.
	 * This is not typed, or constrained, so it could contain any string value, but the
	 * intention is to include a serialized representation of the new configuration.
	*
	* @memberof remotemessage.ConfigurationChangeMessage
	* @param {String} configuration 
	*/
	ConfigurationChangeMessage.prototype.setConfiguration = function(configuration) {
	  this.configuration = configuration;
	};

	/**
	* Get the field value
	* Typically a json serialized string that represents the change to the configuration.
	 * This is not typed, or constrained, so it could contain any string value, but the
	 * intention is to include a serialized representation of the new configuration.
	* @memberof remotemessage.ConfigurationChangeMessage
	* @return {String} 
	*/
	ConfigurationChangeMessage.prototype.getConfiguration = function() {
	  return this.configuration;
	};

	ConfigurationChangeMessage._meta_ =  {fields:  {}};
	ConfigurationChangeMessage._meta_._class_ =  ConfigurationChangeMessage;
	ConfigurationChangeMessage._meta_._superMeta_ = remotemessage_Message._meta_;
	ConfigurationChangeMessage._meta_.fields["configurationType"] = {};
	ConfigurationChangeMessage._meta_.fields["configurationType"].type = String;
	ConfigurationChangeMessage._meta_.fields["configuration"] = {};
	ConfigurationChangeMessage._meta_.fields["configuration"].type = String;

	//
	// Expose the module.
	//
	if (true) {
	module.exports = ConfigurationChangeMessage;
	}



/***/ }),
/* 1042 */
/***/ (function(module, exports, __webpack_require__) {

	/**
	 * Autogenerated by Avro
	 * 
	 * DO NOT EDIT DIRECTLY
	 */

	var remotemessage_Method = __webpack_require__(2);
	var base_Challenge = __webpack_require__(234);
	var remotemessage_Message = __webpack_require__(3);
	var payments_Payment = __webpack_require__(11);

	/**
	* @constructor
	* @augments remotemessage.Message
	* @memberof remotemessage
	*/
	var ConfirmPaymentMessage = function() {
	  remotemessage_Message.call(this);
	  this._superClass_ = remotemessage_Message;
	  this._class_ = ConfirmPaymentMessage;
	  this.setMethod(remotemessage_Method["CONFIRM_PAYMENT_MESSAGE"]);
	  this.payment = undefined;
	  this.challenges = undefined;
	};

	ConfirmPaymentMessage.prototype = Object.create(remotemessage_Message.prototype);
	ConfirmPaymentMessage.prototype.constructor = ConfirmPaymentMessage;

	/**
	* Set the field value
	* A payment
	*
	* @memberof remotemessage.ConfirmPaymentMessage
	* @param {payments.Payment} payment 
	*/
	ConfirmPaymentMessage.prototype.setPayment = function(payment) {
	  this.payment = payment;
	};

	/**
	* Get the field value
	* A payment
	* @memberof remotemessage.ConfirmPaymentMessage
	* @return {payments.Payment} 
	*/
	ConfirmPaymentMessage.prototype.getPayment = function() {
	  return this.payment;
	};

	/**
	* Set the field value
	* The challenges for the payment.
	*
	* @memberof remotemessage.ConfirmPaymentMessage
	* @param {Array.<base.Challenge>} challenges An array of 
	*/
	ConfirmPaymentMessage.prototype.setChallenges = function(challenges) {
	  this.challenges = challenges;
	};

	/**
	* Get the field value
	* The challenges for the payment.
	* @memberof remotemessage.ConfirmPaymentMessage
	* @return {Array.<base.Challenge>} An array of 
	*/
	ConfirmPaymentMessage.prototype.getChallenges = function() {
	  return this.challenges;
	};

	ConfirmPaymentMessage._meta_ =  {fields:  {}};
	ConfirmPaymentMessage._meta_._class_ =  ConfirmPaymentMessage;
	ConfirmPaymentMessage._meta_._superMeta_ = remotemessage_Message._meta_;
	ConfirmPaymentMessage._meta_.fields["payment"] = {};
	ConfirmPaymentMessage._meta_.fields["payment"].type = payments_Payment;
	ConfirmPaymentMessage._meta_.fields["challenges"] = {};
	ConfirmPaymentMessage._meta_.fields["challenges"].type = Array;
	ConfirmPaymentMessage._meta_.fields["challenges"].elementType = base_Challenge;

	//
	// Expose the module.
	//
	if (true) {
	module.exports = ConfirmPaymentMessage;
	}



/***/ }),
/* 1043 */
/***/ (function(module, exports, __webpack_require__) {

	/**
	 * Autogenerated by Avro
	 * 
	 * DO NOT EDIT DIRECTLY
	 */

	var remotemessage_Method = __webpack_require__(2);
	var remotemessage_Message = __webpack_require__(3);
	var payments_Credit = __webpack_require__(30);

	/**
	* @constructor
	* @augments remotemessage.Message
	* @memberof remotemessage
	*/
	var CreditPrintMessage = function() {
	  remotemessage_Message.call(this);
	  this._superClass_ = remotemessage_Message;
	  this._class_ = CreditPrintMessage;
	  this.setMethod(remotemessage_Method["PRINT_CREDIT"]);
	  this.credit = undefined;
	};

	CreditPrintMessage.prototype = Object.create(remotemessage_Message.prototype);
	CreditPrintMessage.prototype.constructor = CreditPrintMessage;

	/**
	* Set the field value
	* @memberof remotemessage.CreditPrintMessage
	* @param {payments.Credit} credit 
	*/
	CreditPrintMessage.prototype.setCredit = function(credit) {
	  this.credit = credit;
	};

	/**
	* Get the field value
	* @memberof remotemessage.CreditPrintMessage
	* @return {payments.Credit} 
	*/
	CreditPrintMessage.prototype.getCredit = function() {
	  return this.credit;
	};

	CreditPrintMessage._meta_ =  {fields:  {}};
	CreditPrintMessage._meta_._class_ =  CreditPrintMessage;
	CreditPrintMessage._meta_._superMeta_ = remotemessage_Message._meta_;
	CreditPrintMessage._meta_.fields["credit"] = {};
	CreditPrintMessage._meta_.fields["credit"].type = payments_Credit;

	//
	// Expose the module.
	//
	if (true) {
	module.exports = CreditPrintMessage;
	}



/***/ }),
/* 1044 */
/***/ (function(module, exports, __webpack_require__) {

	/**
	 * Autogenerated by Avro
	 * 
	 * DO NOT EDIT DIRECTLY
	 */

	var remotemessage_Method = __webpack_require__(2);
	var remotemessage_Message = __webpack_require__(3);
	var customers_CustomerInfo = __webpack_require__(381);

	/**
	* @constructor
	* @augments remotemessage.Message
	* @memberof remotemessage
	*/
	var CustomerInfoMessage = function() {
	  remotemessage_Message.call(this);
	  this._superClass_ = remotemessage_Message;
	  this._class_ = CustomerInfoMessage;
	  this.setMethod(remotemessage_Method["CUSTOMER_INFO_MESSAGE"]);
	  this.customer = undefined;
	};

	CustomerInfoMessage.prototype = Object.create(remotemessage_Message.prototype);
	CustomerInfoMessage.prototype.constructor = CustomerInfoMessage;

	/**
	* Set the field value
	* The customer
	*
	* @memberof remotemessage.CustomerInfoMessage
	* @param {customers.CustomerInfo} customer 
	*/
	CustomerInfoMessage.prototype.setCustomer = function(customer) {
	  this.customer = customer;
	};

	/**
	* Get the field value
	* The customer
	* @memberof remotemessage.CustomerInfoMessage
	* @return {customers.CustomerInfo} 
	*/
	CustomerInfoMessage.prototype.getCustomer = function() {
	  return this.customer;
	};

	CustomerInfoMessage._meta_ =  {fields:  {}};
	CustomerInfoMessage._meta_._class_ =  CustomerInfoMessage;
	CustomerInfoMessage._meta_._superMeta_ = remotemessage_Message._meta_;
	CustomerInfoMessage._meta_.fields["customer"] = {};
	CustomerInfoMessage._meta_.fields["customer"].type = customers_CustomerInfo;

	//
	// Expose the module.
	//
	if (true) {
	module.exports = CustomerInfoMessage;
	}



/***/ }),
/* 1045 */
/***/ (function(module, exports, __webpack_require__) {

	/**
	 * Autogenerated by Avro
	 * 
	 * DO NOT EDIT DIRECTLY
	 */

	var remotemessage_Method = __webpack_require__(2);
	var loyalty_LoyaltyDataConfig = __webpack_require__(241);
	var remotemessage_Message = __webpack_require__(3);

	/**
	* @constructor
	* @augments remotemessage.Message
	* @memberof remotemessage
	*/
	var CustomerProvidedDataMessage = function() {
	  remotemessage_Message.call(this);
	  this._superClass_ = remotemessage_Message;
	  this._class_ = CustomerProvidedDataMessage;
	  this.setMethod(remotemessage_Method["CUSTOMER_PROVIDED_DATA_MESSAGE"]);
	  this.eventId = undefined;
	  this.config = undefined;
	  this.data = undefined;
	};

	CustomerProvidedDataMessage.prototype = Object.create(remotemessage_Message.prototype);
	CustomerProvidedDataMessage.prototype.constructor = CustomerProvidedDataMessage;

	/**
	* Set the field value
	* An id that represents this collection event
	*
	* @memberof remotemessage.CustomerProvidedDataMessage
	* @param {String} eventId 
	*/
	CustomerProvidedDataMessage.prototype.setEventId = function(eventId) {
	  this.eventId = eventId;
	};

	/**
	* Get the field value
	* An id that represents this collection event
	* @memberof remotemessage.CustomerProvidedDataMessage
	* @return {String} 
	*/
	CustomerProvidedDataMessage.prototype.getEventId = function() {
	  return this.eventId;
	};

	/**
	* Set the field value
	* The configuration that identifies what this event data represents.  This is used when interpreting the data.
	*
	* @memberof remotemessage.CustomerProvidedDataMessage
	* @param {loyalty.LoyaltyDataConfig} config 
	*/
	CustomerProvidedDataMessage.prototype.setConfig = function(config) {
	  this.config = config;
	};

	/**
	* Get the field value
	* The configuration that identifies what this event data represents.  This is used when interpreting the data.
	* @memberof remotemessage.CustomerProvidedDataMessage
	* @return {loyalty.LoyaltyDataConfig} 
	*/
	CustomerProvidedDataMessage.prototype.getConfig = function() {
	  return this.config;
	};

	/**
	* Set the field value
	* The data that was collected.  This is similar to a CLOB.
	*
	* @memberof remotemessage.CustomerProvidedDataMessage
	* @param {String} data 
	*/
	CustomerProvidedDataMessage.prototype.setData = function(data) {
	  this.data = data;
	};

	/**
	* Get the field value
	* The data that was collected.  This is similar to a CLOB.
	* @memberof remotemessage.CustomerProvidedDataMessage
	* @return {String} 
	*/
	CustomerProvidedDataMessage.prototype.getData = function() {
	  return this.data;
	};

	CustomerProvidedDataMessage._meta_ =  {fields:  {}};
	CustomerProvidedDataMessage._meta_._class_ =  CustomerProvidedDataMessage;
	CustomerProvidedDataMessage._meta_._superMeta_ = remotemessage_Message._meta_;
	CustomerProvidedDataMessage._meta_.fields["eventId"] = {};
	CustomerProvidedDataMessage._meta_.fields["eventId"].type = String;
	CustomerProvidedDataMessage._meta_.fields["config"] = {};
	CustomerProvidedDataMessage._meta_.fields["config"].type = loyalty_LoyaltyDataConfig;
	CustomerProvidedDataMessage._meta_.fields["data"] = {};
	CustomerProvidedDataMessage._meta_.fields["data"].type = String;

	//
	// Expose the module.
	//
	if (true) {
	module.exports = CustomerProvidedDataMessage;
	}



/***/ }),
/* 1046 */
/***/ (function(module, exports, __webpack_require__) {

	/**
	 * Autogenerated by Avro
	 * 
	 * DO NOT EDIT DIRECTLY
	 */

	var remotemessage_Method = __webpack_require__(2);
	var remotemessage_Message = __webpack_require__(3);
	var payments_Credit = __webpack_require__(30);

	/**
	* @constructor
	* @augments remotemessage.Message
	* @memberof remotemessage
	*/
	var DeclineCreditPrintMessage = function() {
	  remotemessage_Message.call(this);
	  this._superClass_ = remotemessage_Message;
	  this._class_ = DeclineCreditPrintMessage;
	  this.setMethod(remotemessage_Method["PRINT_CREDIT_DECLINE"]);
	  this.credit = undefined;
	  this.reason = undefined;
	};

	DeclineCreditPrintMessage.prototype = Object.create(remotemessage_Message.prototype);
	DeclineCreditPrintMessage.prototype.constructor = DeclineCreditPrintMessage;

	/**
	* Set the field value
	* @memberof remotemessage.DeclineCreditPrintMessage
	* @param {payments.Credit} credit 
	*/
	DeclineCreditPrintMessage.prototype.setCredit = function(credit) {
	  this.credit = credit;
	};

	/**
	* Get the field value
	* @memberof remotemessage.DeclineCreditPrintMessage
	* @return {payments.Credit} 
	*/
	DeclineCreditPrintMessage.prototype.getCredit = function() {
	  return this.credit;
	};

	/**
	* Set the field value
	* @memberof remotemessage.DeclineCreditPrintMessage
	* @param {String} reason 
	*/
	DeclineCreditPrintMessage.prototype.setReason = function(reason) {
	  this.reason = reason;
	};

	/**
	* Get the field value
	* @memberof remotemessage.DeclineCreditPrintMessage
	* @return {String} 
	*/
	DeclineCreditPrintMessage.prototype.getReason = function() {
	  return this.reason;
	};

	DeclineCreditPrintMessage._meta_ =  {fields:  {}};
	DeclineCreditPrintMessage._meta_._class_ =  DeclineCreditPrintMessage;
	DeclineCreditPrintMessage._meta_._superMeta_ = remotemessage_Message._meta_;
	DeclineCreditPrintMessage._meta_.fields["credit"] = {};
	DeclineCreditPrintMessage._meta_.fields["credit"].type = payments_Credit;
	DeclineCreditPrintMessage._meta_.fields["reason"] = {};
	DeclineCreditPrintMessage._meta_.fields["reason"].type = String;

	//
	// Expose the module.
	//
	if (true) {
	module.exports = DeclineCreditPrintMessage;
	}



/***/ }),
/* 1047 */
/***/ (function(module, exports, __webpack_require__) {

	/**
	 * Autogenerated by Avro
	 * 
	 * DO NOT EDIT DIRECTLY
	 */

	var remotemessage_Method = __webpack_require__(2);
	var remotemessage_Message = __webpack_require__(3);
	var payments_Payment = __webpack_require__(11);

	/**
	* @constructor
	* @augments remotemessage.Message
	* @memberof remotemessage
	*/
	var DeclinePaymentPrintMessage = function() {
	  remotemessage_Message.call(this);
	  this._superClass_ = remotemessage_Message;
	  this._class_ = DeclinePaymentPrintMessage;
	  this.setMethod(remotemessage_Method["PRINT_PAYMENT_DECLINE"]);
	  this.payment = undefined;
	  this.reason = undefined;
	};

	DeclinePaymentPrintMessage.prototype = Object.create(remotemessage_Message.prototype);
	DeclinePaymentPrintMessage.prototype.constructor = DeclinePaymentPrintMessage;

	/**
	* Set the field value
	* @memberof remotemessage.DeclinePaymentPrintMessage
	* @param {payments.Payment} payment 
	*/
	DeclinePaymentPrintMessage.prototype.setPayment = function(payment) {
	  this.payment = payment;
	};

	/**
	* Get the field value
	* @memberof remotemessage.DeclinePaymentPrintMessage
	* @return {payments.Payment} 
	*/
	DeclinePaymentPrintMessage.prototype.getPayment = function() {
	  return this.payment;
	};

	/**
	* Set the field value
	* @memberof remotemessage.DeclinePaymentPrintMessage
	* @param {String} reason 
	*/
	DeclinePaymentPrintMessage.prototype.setReason = function(reason) {
	  this.reason = reason;
	};

	/**
	* Get the field value
	* @memberof remotemessage.DeclinePaymentPrintMessage
	* @return {String} 
	*/
	DeclinePaymentPrintMessage.prototype.getReason = function() {
	  return this.reason;
	};

	DeclinePaymentPrintMessage._meta_ =  {fields:  {}};
	DeclinePaymentPrintMessage._meta_._class_ =  DeclinePaymentPrintMessage;
	DeclinePaymentPrintMessage._meta_._superMeta_ = remotemessage_Message._meta_;
	DeclinePaymentPrintMessage._meta_.fields["payment"] = {};
	DeclinePaymentPrintMessage._meta_.fields["payment"].type = payments_Payment;
	DeclinePaymentPrintMessage._meta_.fields["reason"] = {};
	DeclinePaymentPrintMessage._meta_.fields["reason"].type = String;

	//
	// Expose the module.
	//
	if (true) {
	module.exports = DeclinePaymentPrintMessage;
	}



/***/ }),
/* 1048 */
/***/ (function(module, exports, __webpack_require__) {

	/**
	 * Autogenerated by Avro
	 * 
	 * DO NOT EDIT DIRECTLY
	 */

	var remotemessage_Method = __webpack_require__(2);
	var remotemessage_Message = __webpack_require__(3);

	/**
	* @constructor
	* @augments remotemessage.Message
	* @memberof remotemessage
	*/
	var DiscoveryRequestMessage = function() {
	  remotemessage_Message.call(this);
	  this._superClass_ = remotemessage_Message;
	  this._class_ = DiscoveryRequestMessage;
	  this.setMethod(remotemessage_Method["DISCOVERY_REQUEST"]);
	  this.supportsOrderModification = undefined;
	};

	DiscoveryRequestMessage.prototype = Object.create(remotemessage_Message.prototype);
	DiscoveryRequestMessage.prototype.constructor = DiscoveryRequestMessage;

	/**
	* Set the field value
	* If true then order modification operations are supported.
	*
	* @memberof remotemessage.DiscoveryRequestMessage
	* @param {Boolean|Null} supportsOrderModification 
	*/
	DiscoveryRequestMessage.prototype.setSupportsOrderModification = function(supportsOrderModification) {
	  this.supportsOrderModification = supportsOrderModification;
	};

	/**
	* Get the field value
	* If true then order modification operations are supported.
	* @memberof remotemessage.DiscoveryRequestMessage
	* @return {Boolean|Null} 
	*/
	DiscoveryRequestMessage.prototype.getSupportsOrderModification = function() {
	  return this.supportsOrderModification;
	};

	DiscoveryRequestMessage._meta_ =  {fields:  {}};
	DiscoveryRequestMessage._meta_._class_ =  DiscoveryRequestMessage;
	DiscoveryRequestMessage._meta_._superMeta_ = remotemessage_Message._meta_;
	DiscoveryRequestMessage._meta_.fields["supportsOrderModification"] = {};
	DiscoveryRequestMessage._meta_.fields["supportsOrderModification"].type = Boolean;

	//
	// Expose the module.
	//
	if (true) {
	module.exports = DiscoveryRequestMessage;
	}



/***/ }),
/* 1049 */
/***/ (function(module, exports, __webpack_require__) {

	/**
	 * Autogenerated by Avro
	 * 
	 * DO NOT EDIT DIRECTLY
	 */

	var remotemessage_Method = __webpack_require__(2);
	var remotemessage_Message = __webpack_require__(3);

	/**
	* @constructor
	* @augments remotemessage.Message
	* @memberof remotemessage
	*/
	var DiscoveryResponseMessage = function() {
	  remotemessage_Message.call(this);
	  this._superClass_ = remotemessage_Message;
	  this._class_ = DiscoveryResponseMessage;
	  this.setMethod(remotemessage_Method["DISCOVERY_RESPONSE"]);
	  this.merchantId = undefined;
	  this.merchantName = undefined;
	  this.merchantMId = undefined;
	  this.name = undefined;
	  this.serial = undefined;
	  this.model = undefined;
	  this.ready = "false";
	  this.supportsTipAdjust = "false";
	  this.supportsManualRefund = "false";
	  this.supportsMultiPayToken = "false";
	  this.supportsAcknowledgement = "false";
	  this.supportsPreAuth = "false";
	  this.supportsAuth = "false";
	  this.supportsVaultCard = "false";
	  this.supportsVoidPaymentResponse = "false";
	};

	DiscoveryResponseMessage.prototype = Object.create(remotemessage_Message.prototype);
	DiscoveryResponseMessage.prototype.constructor = DiscoveryResponseMessage;

	/**
	* Set the field value
	* @memberof remotemessage.DiscoveryResponseMessage
	* @param {String} merchantId 
	*/
	DiscoveryResponseMessage.prototype.setMerchantId = function(merchantId) {
	  this.merchantId = merchantId;
	};

	/**
	* Get the field value
	* @memberof remotemessage.DiscoveryResponseMessage
	* @return {String} 
	*/
	DiscoveryResponseMessage.prototype.getMerchantId = function() {
	  return this.merchantId;
	};

	/**
	* Set the field value
	* @memberof remotemessage.DiscoveryResponseMessage
	* @param {String} merchantName 
	*/
	DiscoveryResponseMessage.prototype.setMerchantName = function(merchantName) {
	  this.merchantName = merchantName;
	};

	/**
	* Get the field value
	* @memberof remotemessage.DiscoveryResponseMessage
	* @return {String} 
	*/
	DiscoveryResponseMessage.prototype.getMerchantName = function() {
	  return this.merchantName;
	};

	/**
	* Set the field value
	* @memberof remotemessage.DiscoveryResponseMessage
	* @param {String} merchantMId 
	*/
	DiscoveryResponseMessage.prototype.setMerchantMId = function(merchantMId) {
	  this.merchantMId = merchantMId;
	};

	/**
	* Get the field value
	* @memberof remotemessage.DiscoveryResponseMessage
	* @return {String} 
	*/
	DiscoveryResponseMessage.prototype.getMerchantMId = function() {
	  return this.merchantMId;
	};

	/**
	* Set the field value
	* @memberof remotemessage.DiscoveryResponseMessage
	* @param {String} name 
	*/
	DiscoveryResponseMessage.prototype.setName = function(name) {
	  this.name = name;
	};

	/**
	* Get the field value
	* @memberof remotemessage.DiscoveryResponseMessage
	* @return {String} 
	*/
	DiscoveryResponseMessage.prototype.getName = function() {
	  return this.name;
	};

	/**
	* Set the field value
	* @memberof remotemessage.DiscoveryResponseMessage
	* @param {String} serial 
	*/
	DiscoveryResponseMessage.prototype.setSerial = function(serial) {
	  this.serial = serial;
	};

	/**
	* Get the field value
	* @memberof remotemessage.DiscoveryResponseMessage
	* @return {String} 
	*/
	DiscoveryResponseMessage.prototype.getSerial = function() {
	  return this.serial;
	};

	/**
	* Set the field value
	* @memberof remotemessage.DiscoveryResponseMessage
	* @param {String} model 
	*/
	DiscoveryResponseMessage.prototype.setModel = function(model) {
	  this.model = model;
	};

	/**
	* Get the field value
	* @memberof remotemessage.DiscoveryResponseMessage
	* @return {String} 
	*/
	DiscoveryResponseMessage.prototype.getModel = function() {
	  return this.model;
	};

	/**
	* Set the field value
	* @memberof remotemessage.DiscoveryResponseMessage
	* @param {Boolean} ready 
	*/
	DiscoveryResponseMessage.prototype.setReady = function(ready) {
	  this.ready = ready;
	};

	/**
	* Get the field value
	* @memberof remotemessage.DiscoveryResponseMessage
	* @return {Boolean} 
	*/
	DiscoveryResponseMessage.prototype.getReady = function() {
	  return this.ready;
	};

	/**
	* Set the field value
	* @memberof remotemessage.DiscoveryResponseMessage
	* @param {Boolean} supportsTipAdjust 
	*/
	DiscoveryResponseMessage.prototype.setSupportsTipAdjust = function(supportsTipAdjust) {
	  this.supportsTipAdjust = supportsTipAdjust;
	};

	/**
	* Get the field value
	* @memberof remotemessage.DiscoveryResponseMessage
	* @return {Boolean} 
	*/
	DiscoveryResponseMessage.prototype.getSupportsTipAdjust = function() {
	  return this.supportsTipAdjust;
	};

	/**
	* Set the field value
	* @memberof remotemessage.DiscoveryResponseMessage
	* @param {Boolean} supportsManualRefund 
	*/
	DiscoveryResponseMessage.prototype.setSupportsManualRefund = function(supportsManualRefund) {
	  this.supportsManualRefund = supportsManualRefund;
	};

	/**
	* Get the field value
	* @memberof remotemessage.DiscoveryResponseMessage
	* @return {Boolean} 
	*/
	DiscoveryResponseMessage.prototype.getSupportsManualRefund = function() {
	  return this.supportsManualRefund;
	};

	/**
	* Set the field value
	* @memberof remotemessage.DiscoveryResponseMessage
	* @param {Boolean} supportsMultiPayToken 
	*/
	DiscoveryResponseMessage.prototype.setSupportsMultiPayToken = function(supportsMultiPayToken) {
	  this.supportsMultiPayToken = supportsMultiPayToken;
	};

	/**
	* Get the field value
	* @memberof remotemessage.DiscoveryResponseMessage
	* @return {Boolean} 
	*/
	DiscoveryResponseMessage.prototype.getSupportsMultiPayToken = function() {
	  return this.supportsMultiPayToken;
	};

	/**
	* Set the field value
	* @memberof remotemessage.DiscoveryResponseMessage
	* @param {Boolean} supportsAcknowledgement 
	*/
	DiscoveryResponseMessage.prototype.setSupportsAcknowledgement = function(supportsAcknowledgement) {
	  this.supportsAcknowledgement = supportsAcknowledgement;
	};

	/**
	* Get the field value
	* @memberof remotemessage.DiscoveryResponseMessage
	* @return {Boolean} 
	*/
	DiscoveryResponseMessage.prototype.getSupportsAcknowledgement = function() {
	  return this.supportsAcknowledgement;
	};

	/**
	* Set the field value
	* @memberof remotemessage.DiscoveryResponseMessage
	* @param {Boolean} supportsPreAuth 
	*/
	DiscoveryResponseMessage.prototype.setSupportsPreAuth = function(supportsPreAuth) {
	  this.supportsPreAuth = supportsPreAuth;
	};

	/**
	* Get the field value
	* @memberof remotemessage.DiscoveryResponseMessage
	* @return {Boolean} 
	*/
	DiscoveryResponseMessage.prototype.getSupportsPreAuth = function() {
	  return this.supportsPreAuth;
	};

	/**
	* Set the field value
	* @memberof remotemessage.DiscoveryResponseMessage
	* @param {Boolean} supportsAuth 
	*/
	DiscoveryResponseMessage.prototype.setSupportsAuth = function(supportsAuth) {
	  this.supportsAuth = supportsAuth;
	};

	/**
	* Get the field value
	* @memberof remotemessage.DiscoveryResponseMessage
	* @return {Boolean} 
	*/
	DiscoveryResponseMessage.prototype.getSupportsAuth = function() {
	  return this.supportsAuth;
	};

	/**
	* Set the field value
	* @memberof remotemessage.DiscoveryResponseMessage
	* @param {Boolean} supportsVaultCard 
	*/
	DiscoveryResponseMessage.prototype.setSupportsVaultCard = function(supportsVaultCard) {
	  this.supportsVaultCard = supportsVaultCard;
	};

	/**
	* Get the field value
	* @memberof remotemessage.DiscoveryResponseMessage
	* @return {Boolean} 
	*/
	DiscoveryResponseMessage.prototype.getSupportsVaultCard = function() {
	  return this.supportsVaultCard;
	};

	/**
	* Set the field value
	* @memberof remotemessage.DiscoveryResponseMessage
	* @param {Boolean} supportsVoidPaymentResponse 
	*/
	DiscoveryResponseMessage.prototype.setSupportsVoidPaymentResponse = function(supportsVoidPaymentResponse) {
	  this.supportsVoidPaymentResponse = supportsVoidPaymentResponse;
	};

	/**
	* Get the field value
	* @memberof remotemessage.DiscoveryResponseMessage
	* @return {Boolean} 
	*/
	DiscoveryResponseMessage.prototype.getSupportsVoidPaymentResponse = function() {
	  return this.supportsVoidPaymentResponse;
	};

	DiscoveryResponseMessage._meta_ =  {fields:  {}};
	DiscoveryResponseMessage._meta_._class_ =  DiscoveryResponseMessage;
	DiscoveryResponseMessage._meta_._superMeta_ = remotemessage_Message._meta_;
	DiscoveryResponseMessage._meta_.fields["merchantId"] = {};
	DiscoveryResponseMessage._meta_.fields["merchantId"].type = String;
	DiscoveryResponseMessage._meta_.fields["merchantName"] = {};
	DiscoveryResponseMessage._meta_.fields["merchantName"].type = String;
	DiscoveryResponseMessage._meta_.fields["merchantMId"] = {};
	DiscoveryResponseMessage._meta_.fields["merchantMId"].type = String;
	DiscoveryResponseMessage._meta_.fields["name"] = {};
	DiscoveryResponseMessage._meta_.fields["name"].type = String;
	DiscoveryResponseMessage._meta_.fields["serial"] = {};
	DiscoveryResponseMessage._meta_.fields["serial"].type = String;
	DiscoveryResponseMessage._meta_.fields["model"] = {};
	DiscoveryResponseMessage._meta_.fields["model"].type = String;
	DiscoveryResponseMessage._meta_.fields["ready"] = {};
	DiscoveryResponseMessage._meta_.fields["ready"].type = Boolean;
	DiscoveryResponseMessage._meta_.fields["supportsTipAdjust"] = {};
	DiscoveryResponseMessage._meta_.fields["supportsTipAdjust"].type = Boolean;
	DiscoveryResponseMessage._meta_.fields["supportsManualRefund"] = {};
	DiscoveryResponseMessage._meta_.fields["supportsManualRefund"].type = Boolean;
	DiscoveryResponseMessage._meta_.fields["supportsMultiPayToken"] = {};
	DiscoveryResponseMessage._meta_.fields["supportsMultiPayToken"].type = Boolean;
	DiscoveryResponseMessage._meta_.fields["supportsAcknowledgement"] = {};
	DiscoveryResponseMessage._meta_.fields["supportsAcknowledgement"].type = Boolean;
	DiscoveryResponseMessage._meta_.fields["supportsPreAuth"] = {};
	DiscoveryResponseMessage._meta_.fields["supportsPreAuth"].type = Boolean;
	DiscoveryResponseMessage._meta_.fields["supportsAuth"] = {};
	DiscoveryResponseMessage._meta_.fields["supportsAuth"].type = Boolean;
	DiscoveryResponseMessage._meta_.fields["supportsVaultCard"] = {};
	DiscoveryResponseMessage._meta_.fields["supportsVaultCard"].type = Boolean;
	DiscoveryResponseMessage._meta_.fields["supportsVoidPaymentResponse"] = {};
	DiscoveryResponseMessage._meta_.fields["supportsVoidPaymentResponse"].type = Boolean;

	//
	// Expose the module.
	//
	if (true) {
	module.exports = DiscoveryResponseMessage;
	}



/***/ }),
/* 1050 */
/***/ (function(module, exports, __webpack_require__) {

	/**
	 * Autogenerated by Avro
	 * 
	 * DO NOT EDIT DIRECTLY
	 */

	var remotemessage_Method = __webpack_require__(2);
	var remotemessage_Message = __webpack_require__(3);

	/**
	* @constructor
	* @augments remotemessage.Message
	* @memberof remotemessage
	*/
	var EmployeePermissionsRequest = function() {
	  remotemessage_Message.call(this);
	  this._superClass_ = remotemessage_Message;
	  this._class_ = EmployeePermissionsRequest;
	  this.setMethod(remotemessage_Method["EMPLOYEE_PERMISSIONS_REQUEST"]);
	  this.reason = undefined;
	  this.permissions = undefined;
	  this.appPackage = undefined;
	  this.showCancelButton = undefined;
	};

	EmployeePermissionsRequest.prototype = Object.create(remotemessage_Message.prototype);
	EmployeePermissionsRequest.prototype.constructor = EmployeePermissionsRequest;

	/**
	* Set the field value
	* Detail message from the server.
	*
	* @memberof remotemessage.EmployeePermissionsRequest
	* @param {String} reason 
	*/
	EmployeePermissionsRequest.prototype.setReason = function(reason) {
	  this.reason = reason;
	};

	/**
	* Get the field value
	* Detail message from the server.
	* @memberof remotemessage.EmployeePermissionsRequest
	* @return {String} 
	*/
	EmployeePermissionsRequest.prototype.getReason = function() {
	  return this.reason;
	};

	/**
	* Set the field value
	* @memberof remotemessage.EmployeePermissionsRequest
	* @param {String} permissions 
	*/
	EmployeePermissionsRequest.prototype.setPermissions = function(permissions) {
	  this.permissions = permissions;
	};

	/**
	* Get the field value
	* @memberof remotemessage.EmployeePermissionsRequest
	* @return {String} 
	*/
	EmployeePermissionsRequest.prototype.getPermissions = function() {
	  return this.permissions;
	};

	/**
	* Set the field value
	* @memberof remotemessage.EmployeePermissionsRequest
	* @param {String} appPackage 
	*/
	EmployeePermissionsRequest.prototype.setAppPackage = function(appPackage) {
	  this.appPackage = appPackage;
	};

	/**
	* Get the field value
	* @memberof remotemessage.EmployeePermissionsRequest
	* @return {String} 
	*/
	EmployeePermissionsRequest.prototype.getAppPackage = function() {
	  return this.appPackage;
	};

	/**
	* Set the field value
	* @memberof remotemessage.EmployeePermissionsRequest
	* @param {Boolean} showCancelButton 
	*/
	EmployeePermissionsRequest.prototype.setShowCancelButton = function(showCancelButton) {
	  this.showCancelButton = showCancelButton;
	};

	/**
	* Get the field value
	* @memberof remotemessage.EmployeePermissionsRequest
	* @return {Boolean} 
	*/
	EmployeePermissionsRequest.prototype.getShowCancelButton = function() {
	  return this.showCancelButton;
	};

	EmployeePermissionsRequest._meta_ =  {fields:  {}};
	EmployeePermissionsRequest._meta_._class_ =  EmployeePermissionsRequest;
	EmployeePermissionsRequest._meta_._superMeta_ = remotemessage_Message._meta_;
	EmployeePermissionsRequest._meta_.fields["reason"] = {};
	EmployeePermissionsRequest._meta_.fields["reason"].type = String;
	EmployeePermissionsRequest._meta_.fields["permissions"] = {};
	EmployeePermissionsRequest._meta_.fields["permissions"].type = String;
	EmployeePermissionsRequest._meta_.fields["appPackage"] = {};
	EmployeePermissionsRequest._meta_.fields["appPackage"].type = String;
	EmployeePermissionsRequest._meta_.fields["showCancelButton"] = {};
	EmployeePermissionsRequest._meta_.fields["showCancelButton"].type = Boolean;

	//
	// Expose the module.
	//
	if (true) {
	module.exports = EmployeePermissionsRequest;
	}



/***/ }),
/* 1051 */
/***/ (function(module, exports, __webpack_require__) {

	/**
	 * Autogenerated by Avro
	 * 
	 * DO NOT EDIT DIRECTLY
	 */

	var remotemessage_ErrorCode = __webpack_require__(259);

	/**
	* @constructor
	* @memberof remotemessage
	*/
	var ErrorCodeEnum = function() {
	  this._class_ = ErrorCodeEnum;
	  this.errorCode = undefined;
	};


	/**
	* Set the field value
	* @memberof remotemessage.ErrorCodeEnum
	* @param {remotemessage.ErrorCode} errorCode 
	*/
	ErrorCodeEnum.prototype.setErrorCode = function(errorCode) {
	  this.errorCode = errorCode;
	};

	/**
	* Get the field value
	* @memberof remotemessage.ErrorCodeEnum
	* @return {remotemessage.ErrorCode} 
	*/
	ErrorCodeEnum.prototype.getErrorCode = function() {
	  return this.errorCode;
	};

	/**
	* @memberof remotemessage.ErrorCodeEnum
	* @private
	*/
	ErrorCodeEnum.prototype.getMetaInfo = function(fieldName) {
	  var curclass = this._class_;
	  do {
	    var fieldMetaInfo = curclass._meta_.fields[fieldName];
	    if(fieldMetaInfo) {
	      return fieldMetaInfo;
	    }
	    if(curclass._meta_._superMeta_) {
	      curclass = curclass._meta_._superMeta_._class_;
	    } else {
	      curclass = null;
	    }
	  } while(curclass);
	  return null;
	};

	ErrorCodeEnum.prototype.toString = function() {
	  return JSON.stringify(this);
	};

	ErrorCodeEnum._meta_ =  {fields:  {}};
	ErrorCodeEnum._meta_._class_ =  ErrorCodeEnum;
	ErrorCodeEnum._meta_.fields["errorCode"] = {};
	ErrorCodeEnum._meta_.fields["errorCode"].type = remotemessage_ErrorCode;

	//
	// Expose the module.
	//
	if (true) {
	module.exports = ErrorCodeEnum;
	}



/***/ }),
/* 1052 */
/***/ (function(module, exports, __webpack_require__) {

	/**
	 * Autogenerated by Avro
	 * 
	 * DO NOT EDIT DIRECTLY
	 */

	var remotemessage_ExternalDeviceState = __webpack_require__(123);

	/**
	* @constructor
	* @memberof remotemessage
	*/
	var ExternalDeviceStateEnum = function() {
	  this._class_ = ExternalDeviceStateEnum;
	  this.state = undefined;
	};


	/**
	* Set the field value
	* @memberof remotemessage.ExternalDeviceStateEnum
	* @param {remotemessage.ExternalDeviceState} state 
	*/
	ExternalDeviceStateEnum.prototype.setState = function(state) {
	  this.state = state;
	};

	/**
	* Get the field value
	* @memberof remotemessage.ExternalDeviceStateEnum
	* @return {remotemessage.ExternalDeviceState} 
	*/
	ExternalDeviceStateEnum.prototype.getState = function() {
	  return this.state;
	};

	/**
	* @memberof remotemessage.ExternalDeviceStateEnum
	* @private
	*/
	ExternalDeviceStateEnum.prototype.getMetaInfo = function(fieldName) {
	  var curclass = this._class_;
	  do {
	    var fieldMetaInfo = curclass._meta_.fields[fieldName];
	    if(fieldMetaInfo) {
	      return fieldMetaInfo;
	    }
	    if(curclass._meta_._superMeta_) {
	      curclass = curclass._meta_._superMeta_._class_;
	    } else {
	      curclass = null;
	    }
	  } while(curclass);
	  return null;
	};

	ExternalDeviceStateEnum.prototype.toString = function() {
	  return JSON.stringify(this);
	};

	ExternalDeviceStateEnum._meta_ =  {fields:  {}};
	ExternalDeviceStateEnum._meta_._class_ =  ExternalDeviceStateEnum;
	ExternalDeviceStateEnum._meta_.fields["state"] = {};
	ExternalDeviceStateEnum._meta_.fields["state"].type = remotemessage_ExternalDeviceState;

	//
	// Expose the module.
	//
	if (true) {
	module.exports = ExternalDeviceStateEnum;
	}



/***/ }),
/* 1053 */
/***/ (function(module, exports, __webpack_require__) {

	/**
	 * Autogenerated by Avro
	 * 
	 * DO NOT EDIT DIRECTLY
	 */

	var remotemessage_Method = __webpack_require__(2);
	var remotemessage_Message = __webpack_require__(3);

	/**
	* @constructor
	* @augments remotemessage.Message
	* @memberof remotemessage
	*/
	var FinishCancelMessage = function() {
	  remotemessage_Message.call(this);
	  this._superClass_ = remotemessage_Message;
	  this._class_ = FinishCancelMessage;
	  this.setMethod(remotemessage_Method["FINISH_CANCEL"]);
	  this.requestInfo = undefined;
	};

	FinishCancelMessage.prototype = Object.create(remotemessage_Message.prototype);
	FinishCancelMessage.prototype.constructor = FinishCancelMessage;

	/**
	* Set the field value
	* Extra information to include with the request, like type of request. Use constants in TxTypeRequestInfo.
	*
	* @memberof remotemessage.FinishCancelMessage
	* @param {String} requestInfo 
	*/
	FinishCancelMessage.prototype.setRequestInfo = function(requestInfo) {
	  this.requestInfo = requestInfo;
	};

	/**
	* Get the field value
	* Extra information to include with the request, like type of request. Use constants in TxTypeRequestInfo.
	* @memberof remotemessage.FinishCancelMessage
	* @return {String} 
	*/
	FinishCancelMessage.prototype.getRequestInfo = function() {
	  return this.requestInfo;
	};

	FinishCancelMessage._meta_ =  {fields:  {}};
	FinishCancelMessage._meta_._class_ =  FinishCancelMessage;
	FinishCancelMessage._meta_._superMeta_ = remotemessage_Message._meta_;
	FinishCancelMessage._meta_.fields["requestInfo"] = {};
	FinishCancelMessage._meta_.fields["requestInfo"].type = String;

	//
	// Expose the module.
	//
	if (true) {
	module.exports = FinishCancelMessage;
	}



/***/ }),
/* 1054 */
/***/ (function(module, exports, __webpack_require__) {

	/**
	 * Autogenerated by Avro
	 * 
	 * DO NOT EDIT DIRECTLY
	 */

	var remotemessage_Method = __webpack_require__(2);
	var remotemessage_Message = __webpack_require__(3);
	var payments_Payment = __webpack_require__(11);
	var base_Signature = __webpack_require__(86);
	var payments_Refund = __webpack_require__(26);
	var payments_Credit = __webpack_require__(30);

	/**
	* @constructor
	* @augments remotemessage.Message
	* @memberof remotemessage
	*/
	var FinishOkMessage = function() {
	  remotemessage_Message.call(this);
	  this._superClass_ = remotemessage_Message;
	  this._class_ = FinishOkMessage;
	  this.setMethod(remotemessage_Method["FINISH_OK"]);
	  this.credit = undefined;
	  this.payment = undefined;
	  this.refund = undefined;
	  this.signature = undefined;
	  this.requestInfo = undefined;
	};

	FinishOkMessage.prototype = Object.create(remotemessage_Message.prototype);
	FinishOkMessage.prototype.constructor = FinishOkMessage;

	/**
	* Set the field value
	* A credit
	*
	* @memberof remotemessage.FinishOkMessage
	* @param {payments.Credit} credit 
	*/
	FinishOkMessage.prototype.setCredit = function(credit) {
	  this.credit = credit;
	};

	/**
	* Get the field value
	* A credit
	* @memberof remotemessage.FinishOkMessage
	* @return {payments.Credit} 
	*/
	FinishOkMessage.prototype.getCredit = function() {
	  return this.credit;
	};

	/**
	* Set the field value
	* A payment
	*
	* @memberof remotemessage.FinishOkMessage
	* @param {payments.Payment} payment 
	*/
	FinishOkMessage.prototype.setPayment = function(payment) {
	  this.payment = payment;
	};

	/**
	* Get the field value
	* A payment
	* @memberof remotemessage.FinishOkMessage
	* @return {payments.Payment} 
	*/
	FinishOkMessage.prototype.getPayment = function() {
	  return this.payment;
	};

	/**
	* Set the field value
	* The refund
	*
	* @memberof remotemessage.FinishOkMessage
	* @param {payments.Refund} refund 
	*/
	FinishOkMessage.prototype.setRefund = function(refund) {
	  this.refund = refund;
	};

	/**
	* Get the field value
	* The refund
	* @memberof remotemessage.FinishOkMessage
	* @return {payments.Refund} 
	*/
	FinishOkMessage.prototype.getRefund = function() {
	  return this.refund;
	};

	/**
	* Set the field value
	* A signature
	*
	* @memberof remotemessage.FinishOkMessage
	* @param {base.Signature} signature 
	*/
	FinishOkMessage.prototype.setSignature = function(signature) {
	  this.signature = signature;
	};

	/**
	* Get the field value
	* A signature
	* @memberof remotemessage.FinishOkMessage
	* @return {base.Signature} 
	*/
	FinishOkMessage.prototype.getSignature = function() {
	  return this.signature;
	};

	/**
	* Set the field value
	* Extra information to include with the request, like type of request. Use constants in TxTypeRequestInfo.
	*
	* @memberof remotemessage.FinishOkMessage
	* @param {String} requestInfo 
	*/
	FinishOkMessage.prototype.setRequestInfo = function(requestInfo) {
	  this.requestInfo = requestInfo;
	};

	/**
	* Get the field value
	* Extra information to include with the request, like type of request. Use constants in TxTypeRequestInfo.
	* @memberof remotemessage.FinishOkMessage
	* @return {String} 
	*/
	FinishOkMessage.prototype.getRequestInfo = function() {
	  return this.requestInfo;
	};

	FinishOkMessage._meta_ =  {fields:  {}};
	FinishOkMessage._meta_._class_ =  FinishOkMessage;
	FinishOkMessage._meta_._superMeta_ = remotemessage_Message._meta_;
	FinishOkMessage._meta_.fields["credit"] = {};
	FinishOkMessage._meta_.fields["credit"].type = payments_Credit;
	FinishOkMessage._meta_.fields["payment"] = {};
	FinishOkMessage._meta_.fields["payment"].type = payments_Payment;
	FinishOkMessage._meta_.fields["refund"] = {};
	FinishOkMessage._meta_.fields["refund"].type = payments_Refund;
	FinishOkMessage._meta_.fields["signature"] = {};
	FinishOkMessage._meta_.fields["signature"].type = base_Signature;
	FinishOkMessage._meta_.fields["requestInfo"] = {};
	FinishOkMessage._meta_.fields["requestInfo"].type = String;

	//
	// Expose the module.
	//
	if (true) {
	module.exports = FinishOkMessage;
	}



/***/ }),
/* 1055 */
/***/ (function(module, exports, __webpack_require__) {

	/**
	 * Autogenerated by Avro
	 * 
	 * DO NOT EDIT DIRECTLY
	 */

	var remotemessage_Method = __webpack_require__(2);
	var remotemessage_Message = __webpack_require__(3);

	/**
	* @constructor
	* @augments remotemessage.Message
	* @memberof remotemessage
	*/
	var ForceConnectMessage = function() {
	  remotemessage_Message.call(this);
	  this._superClass_ = remotemessage_Message;
	  this._class_ = ForceConnectMessage;
	  this.setMethod(remotemessage_Method["FORCECONNECT"]);
	  this.friendlyId = undefined;
	};

	ForceConnectMessage.prototype = Object.create(remotemessage_Message.prototype);
	ForceConnectMessage.prototype.constructor = ForceConnectMessage;

	/**
	* Set the field value
	* The friendly id of the system that overtook the connection.
	*
	* @memberof remotemessage.ForceConnectMessage
	* @param {String} friendlyId 
	*/
	ForceConnectMessage.prototype.setFriendlyId = function(friendlyId) {
	  this.friendlyId = friendlyId;
	};

	/**
	* Get the field value
	* The friendly id of the system that overtook the connection.
	* @memberof remotemessage.ForceConnectMessage
	* @return {String} 
	*/
	ForceConnectMessage.prototype.getFriendlyId = function() {
	  return this.friendlyId;
	};

	ForceConnectMessage._meta_ =  {fields:  {}};
	ForceConnectMessage._meta_._class_ =  ForceConnectMessage;
	ForceConnectMessage._meta_._superMeta_ = remotemessage_Message._meta_;
	ForceConnectMessage._meta_.fields["friendlyId"] = {};
	ForceConnectMessage._meta_.fields["friendlyId"].type = String;

	//
	// Expose the module.
	//
	if (true) {
	module.exports = ForceConnectMessage;
	}



/***/ }),
/* 1056 */
/***/ (function(module, exports, __webpack_require__) {

	/**
	 * Autogenerated by Avro
	 * 
	 * DO NOT EDIT DIRECTLY
	 */

	var remotemessage_Method = __webpack_require__(2);
	var remotemessage_Message = __webpack_require__(3);
	var printer_PrintCategory = __webpack_require__(166);

	/**
	* @constructor
	* @augments remotemessage.Message
	* @memberof remotemessage
	*/
	var GetPrintersRequestMessage = function() {
	  remotemessage_Message.call(this);
	  this._superClass_ = remotemessage_Message;
	  this._class_ = GetPrintersRequestMessage;
	  this.setMethod(remotemessage_Method["GET_PRINTERS_REQUEST"]);
	  this.category = undefined;
	};

	GetPrintersRequestMessage.prototype = Object.create(remotemessage_Message.prototype);
	GetPrintersRequestMessage.prototype.constructor = GetPrintersRequestMessage;

	/**
	* Set the field value
	* Category of printers to retrieve
	*
	* @memberof remotemessage.GetPrintersRequestMessage
	* @param {printer.PrintCategory} category 
	*/
	GetPrintersRequestMessage.prototype.setCategory = function(category) {
	  this.category = category;
	};

	/**
	* Get the field value
	* Category of printers to retrieve
	* @memberof remotemessage.GetPrintersRequestMessage
	* @return {printer.PrintCategory} 
	*/
	GetPrintersRequestMessage.prototype.getCategory = function() {
	  return this.category;
	};

	GetPrintersRequestMessage._meta_ =  {fields:  {}};
	GetPrintersRequestMessage._meta_._class_ =  GetPrintersRequestMessage;
	GetPrintersRequestMessage._meta_._superMeta_ = remotemessage_Message._meta_;
	GetPrintersRequestMessage._meta_.fields["category"] = {};
	GetPrintersRequestMessage._meta_.fields["category"].type = printer_PrintCategory;

	//
	// Expose the module.
	//
	if (true) {
	module.exports = GetPrintersRequestMessage;
	}



/***/ }),
/* 1057 */
/***/ (function(module, exports, __webpack_require__) {

	/**
	 * Autogenerated by Avro
	 * 
	 * DO NOT EDIT DIRECTLY
	 */

	var remotemessage_Method = __webpack_require__(2);
	var printer_Printer = __webpack_require__(88);
	var remotemessage_Message = __webpack_require__(3);

	/**
	* @constructor
	* @augments remotemessage.Message
	* @memberof remotemessage
	*/
	var GetPrintersResponseMessage = function() {
	  remotemessage_Message.call(this);
	  this._superClass_ = remotemessage_Message;
	  this._class_ = GetPrintersResponseMessage;
	  this.setMethod(remotemessage_Method["GET_PRINTERS_RESPONSE"]);
	  this.printers = undefined;
	};

	GetPrintersResponseMessage.prototype = Object.create(remotemessage_Message.prototype);
	GetPrintersResponseMessage.prototype.constructor = GetPrintersResponseMessage;

	/**
	* Set the field value
	* List of printers of the requested type.
	*
	* @memberof remotemessage.GetPrintersResponseMessage
	* @param {Array.<printer.Printer>} printers An array of 
	*/
	GetPrintersResponseMessage.prototype.setPrinters = function(printers) {
	  this.printers = printers;
	};

	/**
	* Get the field value
	* List of printers of the requested type.
	* @memberof remotemessage.GetPrintersResponseMessage
	* @return {Array.<printer.Printer>} An array of 
	*/
	GetPrintersResponseMessage.prototype.getPrinters = function() {
	  return this.printers;
	};

	GetPrintersResponseMessage._meta_ =  {fields:  {}};
	GetPrintersResponseMessage._meta_._class_ =  GetPrintersResponseMessage;
	GetPrintersResponseMessage._meta_._superMeta_ = remotemessage_Message._meta_;
	GetPrintersResponseMessage._meta_.fields["printers"] = {};
	GetPrintersResponseMessage._meta_.fields["printers"].type = Array;
	GetPrintersResponseMessage._meta_.fields["printers"].elementType = printer_Printer;

	//
	// Expose the module.
	//
	if (true) {
	module.exports = GetPrintersResponseMessage;
	}



/***/ }),
/* 1058 */
/***/ (function(module, exports, __webpack_require__) {

	/**
	 * Autogenerated by Avro
	 * 
	 * DO NOT EDIT DIRECTLY
	 */

	var remotemessage_Method = __webpack_require__(2);
	var printer_Printer = __webpack_require__(88);
	var remotemessage_Message = __webpack_require__(3);

	/**
	* @constructor
	* @augments remotemessage.Message
	* @memberof remotemessage
	*/
	var ImagePrintMessage = function() {
	  remotemessage_Message.call(this);
	  this._superClass_ = remotemessage_Message;
	  this._class_ = ImagePrintMessage;
	  this.setMethod(remotemessage_Method["PRINT_IMAGE"]);
	  this.png = undefined;
	  this.urlString = undefined;
	  this.externalPrintJobId = undefined;
	  this.printer = undefined;
	};

	ImagePrintMessage.prototype = Object.create(remotemessage_Message.prototype);
	ImagePrintMessage.prototype.constructor = ImagePrintMessage;

	/**
	* Set the field value
	* An image serialized to a base64 encoded byte array
	*
	* @memberof remotemessage.ImagePrintMessage
	* @param {Object} png Byte buffer
	*/
	ImagePrintMessage.prototype.setPng = function(png) {
	  this.png = png;
	};

	/**
	* Get the field value
	* An image serialized to a base64 encoded byte array
	* @memberof remotemessage.ImagePrintMessage
	* @return {Object} Byte buffer
	*/
	ImagePrintMessage.prototype.getPng = function() {
	  return this.png;
	};

	/**
	* Set the field value
	* The url of an image.  The url must be accessible from the Clover device.
	*
	* @memberof remotemessage.ImagePrintMessage
	* @param {String} urlString 
	*/
	ImagePrintMessage.prototype.setUrlString = function(urlString) {
	  this.urlString = urlString;
	};

	/**
	* Get the field value
	* The url of an image.  The url must be accessible from the Clover device.
	* @memberof remotemessage.ImagePrintMessage
	* @return {String} 
	*/
	ImagePrintMessage.prototype.getUrlString = function() {
	  return this.urlString;
	};

	/**
	* Set the field value
	* External print job ID assigned to this request
	*
	* @memberof remotemessage.ImagePrintMessage
	* @param {String} externalPrintJobId 
	*/
	ImagePrintMessage.prototype.setExternalPrintJobId = function(externalPrintJobId) {
	  this.externalPrintJobId = externalPrintJobId;
	};

	/**
	* Get the field value
	* External print job ID assigned to this request
	* @memberof remotemessage.ImagePrintMessage
	* @return {String} 
	*/
	ImagePrintMessage.prototype.getExternalPrintJobId = function() {
	  return this.externalPrintJobId;
	};

	/**
	* Set the field value
	* Printer to which the print job should be routed.
	*
	* @memberof remotemessage.ImagePrintMessage
	* @param {printer.Printer} printer 
	*/
	ImagePrintMessage.prototype.setPrinter = function(printer) {
	  this.printer = printer;
	};

	/**
	* Get the field value
	* Printer to which the print job should be routed.
	* @memberof remotemessage.ImagePrintMessage
	* @return {printer.Printer} 
	*/
	ImagePrintMessage.prototype.getPrinter = function() {
	  return this.printer;
	};

	ImagePrintMessage._meta_ =  {fields:  {}};
	ImagePrintMessage._meta_._class_ =  ImagePrintMessage;
	ImagePrintMessage._meta_._superMeta_ = remotemessage_Message._meta_;
	ImagePrintMessage._meta_.fields["png"] = {};
	ImagePrintMessage._meta_.fields["png"].type = Object;
	ImagePrintMessage._meta_.fields["urlString"] = {};
	ImagePrintMessage._meta_.fields["urlString"].type = String;
	ImagePrintMessage._meta_.fields["externalPrintJobId"] = {};
	ImagePrintMessage._meta_.fields["externalPrintJobId"].type = String;
	ImagePrintMessage._meta_.fields["printer"] = {};
	ImagePrintMessage._meta_.fields["printer"].type = printer_Printer;

	//
	// Expose the module.
	//
	if (true) {
	module.exports = ImagePrintMessage;
	}



/***/ }),
/* 1059 */
/***/ (function(module, exports, __webpack_require__) {

	/**
	 * Autogenerated by Avro
	 * 
	 * DO NOT EDIT DIRECTLY
	 */

	var remotemessage_Method = __webpack_require__(2);
	var remotemessage_Message = __webpack_require__(3);

	/**
	* @constructor
	* @augments remotemessage.Message
	* @memberof remotemessage
	*/
	var IncrementPreAuthMessage = function() {
	  remotemessage_Message.call(this);
	  this._superClass_ = remotemessage_Message;
	  this._class_ = IncrementPreAuthMessage;
	  this.setMethod(remotemessage_Method["INCREMENT_PREAUTH_REQUEST"]);
	  this.amount = undefined;
	  this.paymentId = undefined;
	};

	IncrementPreAuthMessage.prototype = Object.create(remotemessage_Message.prototype);
	IncrementPreAuthMessage.prototype.constructor = IncrementPreAuthMessage;

	/**
	* Set the field value
	* The amount by which to increment the pre-auth.
	*
	* @memberof remotemessage.IncrementPreAuthMessage
	* @param {Number} amount must be a long integer
	*/
	IncrementPreAuthMessage.prototype.setAmount = function(amount) {
	  this.amount = amount;
	};

	/**
	* Get the field value
	* The amount by which to increment the pre-auth.
	* @memberof remotemessage.IncrementPreAuthMessage
	* @return {Number} must be a long integer
	*/
	IncrementPreAuthMessage.prototype.getAmount = function() {
	  return this.amount;
	};

	/**
	* Set the field value
	* paymentId of the pre-auth to be incremented.
	*
	* @memberof remotemessage.IncrementPreAuthMessage
	* @param {String} paymentId 
	*/
	IncrementPreAuthMessage.prototype.setPaymentId = function(paymentId) {
	  this.paymentId = paymentId;
	};

	/**
	* Get the field value
	* paymentId of the pre-auth to be incremented.
	* @memberof remotemessage.IncrementPreAuthMessage
	* @return {String} 
	*/
	IncrementPreAuthMessage.prototype.getPaymentId = function() {
	  return this.paymentId;
	};

	IncrementPreAuthMessage._meta_ =  {fields:  {}};
	IncrementPreAuthMessage._meta_._class_ =  IncrementPreAuthMessage;
	IncrementPreAuthMessage._meta_._superMeta_ = remotemessage_Message._meta_;
	IncrementPreAuthMessage._meta_.fields["amount"] = {};
	IncrementPreAuthMessage._meta_.fields["amount"].type = Number;
	IncrementPreAuthMessage._meta_.fields["paymentId"] = {};
	IncrementPreAuthMessage._meta_.fields["paymentId"].type = String;

	//
	// Expose the module.
	//
	if (true) {
	module.exports = IncrementPreAuthMessage;
	}



/***/ }),
/* 1060 */
/***/ (function(module, exports, __webpack_require__) {

	/**
	 * Autogenerated by Avro
	 * 
	 * DO NOT EDIT DIRECTLY
	 */

	var remotemessage_Method = __webpack_require__(2);
	var payments_Authorization = __webpack_require__(159);
	var remotemessage_ResultStatus = __webpack_require__(23);
	var remotemessage_Message = __webpack_require__(3);

	/**
	* @constructor
	* @augments remotemessage.Message
	* @memberof remotemessage
	*/
	var IncrementPreAuthResponseMessage = function() {
	  remotemessage_Message.call(this);
	  this._superClass_ = remotemessage_Message;
	  this._class_ = IncrementPreAuthResponseMessage;
	  this.setMethod(remotemessage_Method["INCREMENT_PREAUTH_RESPONSE"]);
	  this.status = undefined;
	  this.reason = undefined;
	  this.authorization = undefined;
	};

	IncrementPreAuthResponseMessage.prototype = Object.create(remotemessage_Message.prototype);
	IncrementPreAuthResponseMessage.prototype.constructor = IncrementPreAuthResponseMessage;

	/**
	* Set the field value
	* The status of the request.
	*
	* @memberof remotemessage.IncrementPreAuthResponseMessage
	* @param {remotemessage.ResultStatus} status 
	*/
	IncrementPreAuthResponseMessage.prototype.setStatus = function(status) {
	  this.status = status;
	};

	/**
	* Get the field value
	* The status of the request.
	* @memberof remotemessage.IncrementPreAuthResponseMessage
	* @return {remotemessage.ResultStatus} 
	*/
	IncrementPreAuthResponseMessage.prototype.getStatus = function() {
	  return this.status;
	};

	/**
	* Set the field value
	* Detail message from the server.
	*
	* @memberof remotemessage.IncrementPreAuthResponseMessage
	* @param {String} reason 
	*/
	IncrementPreAuthResponseMessage.prototype.setReason = function(reason) {
	  this.reason = reason;
	};

	/**
	* Get the field value
	* Detail message from the server.
	* @memberof remotemessage.IncrementPreAuthResponseMessage
	* @return {String} 
	*/
	IncrementPreAuthResponseMessage.prototype.getReason = function() {
	  return this.reason;
	};

	/**
	* Set the field value
	* The resulting Authorization
	*
	* @memberof remotemessage.IncrementPreAuthResponseMessage
	* @param {payments.Authorization} authorization 
	*/
	IncrementPreAuthResponseMessage.prototype.setAuthorization = function(authorization) {
	  this.authorization = authorization;
	};

	/**
	* Get the field value
	* The resulting Authorization
	* @memberof remotemessage.IncrementPreAuthResponseMessage
	* @return {payments.Authorization} 
	*/
	IncrementPreAuthResponseMessage.prototype.getAuthorization = function() {
	  return this.authorization;
	};

	IncrementPreAuthResponseMessage._meta_ =  {fields:  {}};
	IncrementPreAuthResponseMessage._meta_._class_ =  IncrementPreAuthResponseMessage;
	IncrementPreAuthResponseMessage._meta_._superMeta_ = remotemessage_Message._meta_;
	IncrementPreAuthResponseMessage._meta_.fields["status"] = {};
	IncrementPreAuthResponseMessage._meta_.fields["status"].type = remotemessage_ResultStatus;
	IncrementPreAuthResponseMessage._meta_.fields["reason"] = {};
	IncrementPreAuthResponseMessage._meta_.fields["reason"].type = String;
	IncrementPreAuthResponseMessage._meta_.fields["authorization"] = {};
	IncrementPreAuthResponseMessage._meta_.fields["authorization"].type = payments_Authorization;

	//
	// Expose the module.
	//
	if (true) {
	module.exports = IncrementPreAuthResponseMessage;
	}



/***/ }),
/* 1061 */
/***/ (function(module, exports, __webpack_require__) {

	/**
	 * Autogenerated by Avro
	 * 
	 * DO NOT EDIT DIRECTLY
	 */

	var remotemessage_Method = __webpack_require__(2);
	var remotemessage_ResultStatus = __webpack_require__(23);
	var remotemessage_ExternalDeviceSubState = __webpack_require__(261);
	var remotemessage_ExternalDeviceState = __webpack_require__(123);
	var remotemessage_Message = __webpack_require__(3);
	var remotemessage_ExternalDeviceStateData = __webpack_require__(260);

	/**
	* @constructor
	* @augments remotemessage.Message
	* @memberof remotemessage
	*/
	var InvalidStateTransitionMessage = function() {
	  remotemessage_Message.call(this);
	  this._superClass_ = remotemessage_Message;
	  this._class_ = InvalidStateTransitionMessage;
	  this.setMethod(remotemessage_Method["INVALID_STATE_TRANSITION"]);
	  this.result = undefined;
	  this.reason = undefined;
	  this.requestedTransition = undefined;
	  this.state = undefined;
	  this.substate = undefined;
	  this.data = undefined;
	};

	InvalidStateTransitionMessage.prototype = Object.create(remotemessage_Message.prototype);
	InvalidStateTransitionMessage.prototype.constructor = InvalidStateTransitionMessage;

	/**
	* Set the field value
	* @memberof remotemessage.InvalidStateTransitionMessage
	* @param {remotemessage.ResultStatus} result 
	*/
	InvalidStateTransitionMessage.prototype.setResult = function(result) {
	  this.result = result;
	};

	/**
	* Get the field value
	* @memberof remotemessage.InvalidStateTransitionMessage
	* @return {remotemessage.ResultStatus} 
	*/
	InvalidStateTransitionMessage.prototype.getResult = function() {
	  return this.result;
	};

	/**
	* Set the field value
	* Detail message from the server.
	*
	* @memberof remotemessage.InvalidStateTransitionMessage
	* @param {String} reason 
	*/
	InvalidStateTransitionMessage.prototype.setReason = function(reason) {
	  this.reason = reason;
	};

	/**
	* Get the field value
	* Detail message from the server.
	* @memberof remotemessage.InvalidStateTransitionMessage
	* @return {String} 
	*/
	InvalidStateTransitionMessage.prototype.getReason = function() {
	  return this.reason;
	};

	/**
	* Set the field value
	* @memberof remotemessage.InvalidStateTransitionMessage
	* @param {String} requestedTransition 
	*/
	InvalidStateTransitionMessage.prototype.setRequestedTransition = function(requestedTransition) {
	  this.requestedTransition = requestedTransition;
	};

	/**
	* Get the field value
	* @memberof remotemessage.InvalidStateTransitionMessage
	* @return {String} 
	*/
	InvalidStateTransitionMessage.prototype.getRequestedTransition = function() {
	  return this.requestedTransition;
	};

	/**
	* Set the field value
	* @memberof remotemessage.InvalidStateTransitionMessage
	* @param {remotemessage.ExternalDeviceState} state 
	*/
	InvalidStateTransitionMessage.prototype.setState = function(state) {
	  this.state = state;
	};

	/**
	* Get the field value
	* @memberof remotemessage.InvalidStateTransitionMessage
	* @return {remotemessage.ExternalDeviceState} 
	*/
	InvalidStateTransitionMessage.prototype.getState = function() {
	  return this.state;
	};

	/**
	* Set the field value
	* @memberof remotemessage.InvalidStateTransitionMessage
	* @param {remotemessage.ExternalDeviceSubState} substate 
	*/
	InvalidStateTransitionMessage.prototype.setSubstate = function(substate) {
	  this.substate = substate;
	};

	/**
	* Get the field value
	* @memberof remotemessage.InvalidStateTransitionMessage
	* @return {remotemessage.ExternalDeviceSubState} 
	*/
	InvalidStateTransitionMessage.prototype.getSubstate = function() {
	  return this.substate;
	};

	/**
	* Set the field value
	* @memberof remotemessage.InvalidStateTransitionMessage
	* @param {remotemessage.ExternalDeviceStateData} data 
	*/
	InvalidStateTransitionMessage.prototype.setData = function(data) {
	  this.data = data;
	};

	/**
	* Get the field value
	* @memberof remotemessage.InvalidStateTransitionMessage
	* @return {remotemessage.ExternalDeviceStateData} 
	*/
	InvalidStateTransitionMessage.prototype.getData = function() {
	  return this.data;
	};

	InvalidStateTransitionMessage._meta_ =  {fields:  {}};
	InvalidStateTransitionMessage._meta_._class_ =  InvalidStateTransitionMessage;
	InvalidStateTransitionMessage._meta_._superMeta_ = remotemessage_Message._meta_;
	InvalidStateTransitionMessage._meta_.fields["result"] = {};
	InvalidStateTransitionMessage._meta_.fields["result"].type = remotemessage_ResultStatus;
	InvalidStateTransitionMessage._meta_.fields["reason"] = {};
	InvalidStateTransitionMessage._meta_.fields["reason"].type = String;
	InvalidStateTransitionMessage._meta_.fields["requestedTransition"] = {};
	InvalidStateTransitionMessage._meta_.fields["requestedTransition"].type = String;
	InvalidStateTransitionMessage._meta_.fields["state"] = {};
	InvalidStateTransitionMessage._meta_.fields["state"].type = remotemessage_ExternalDeviceState;
	InvalidStateTransitionMessage._meta_.fields["substate"] = {};
	InvalidStateTransitionMessage._meta_.fields["substate"].type = remotemessage_ExternalDeviceSubState;
	InvalidStateTransitionMessage._meta_.fields["data"] = {};
	InvalidStateTransitionMessage._meta_.fields["data"].type = remotemessage_ExternalDeviceStateData;

	//
	// Expose the module.
	//
	if (true) {
	module.exports = InvalidStateTransitionMessage;
	}



/***/ }),
/* 1062 */
/***/ (function(module, exports, __webpack_require__) {

	/**
	 * Autogenerated by Avro
	 * 
	 * DO NOT EDIT DIRECTLY
	 */

	var remotemessage_KeyPress = __webpack_require__(167);

	/**
	* @constructor
	* @memberof remotemessage
	*/
	var KeyPressEnum = function() {
	  this._class_ = KeyPressEnum;
	  this.status = undefined;
	};


	/**
	* Set the field value
	* @memberof remotemessage.KeyPressEnum
	* @param {remotemessage.KeyPress} status 
	*/
	KeyPressEnum.prototype.setStatus = function(status) {
	  this.status = status;
	};

	/**
	* Get the field value
	* @memberof remotemessage.KeyPressEnum
	* @return {remotemessage.KeyPress} 
	*/
	KeyPressEnum.prototype.getStatus = function() {
	  return this.status;
	};

	/**
	* @memberof remotemessage.KeyPressEnum
	* @private
	*/
	KeyPressEnum.prototype.getMetaInfo = function(fieldName) {
	  var curclass = this._class_;
	  do {
	    var fieldMetaInfo = curclass._meta_.fields[fieldName];
	    if(fieldMetaInfo) {
	      return fieldMetaInfo;
	    }
	    if(curclass._meta_._superMeta_) {
	      curclass = curclass._meta_._superMeta_._class_;
	    } else {
	      curclass = null;
	    }
	  } while(curclass);
	  return null;
	};

	KeyPressEnum.prototype.toString = function() {
	  return JSON.stringify(this);
	};

	KeyPressEnum._meta_ =  {fields:  {}};
	KeyPressEnum._meta_._class_ =  KeyPressEnum;
	KeyPressEnum._meta_.fields["status"] = {};
	KeyPressEnum._meta_.fields["status"].type = remotemessage_KeyPress;

	//
	// Expose the module.
	//
	if (true) {
	module.exports = KeyPressEnum;
	}



/***/ }),
/* 1063 */
/***/ (function(module, exports, __webpack_require__) {

	/**
	 * Autogenerated by Avro
	 * 
	 * DO NOT EDIT DIRECTLY
	 */

	var remotemessage_Method = __webpack_require__(2);
	var remotemessage_KeyPress = __webpack_require__(167);
	var remotemessage_Message = __webpack_require__(3);

	/**
	* @constructor
	* @augments remotemessage.Message
	* @memberof remotemessage
	*/
	var KeyPressMessage = function() {
	  remotemessage_Message.call(this);
	  this._superClass_ = remotemessage_Message;
	  this._class_ = KeyPressMessage;
	  this.setMethod(remotemessage_Method["KEY_PRESS"]);
	  this.keyPress = undefined;
	};

	KeyPressMessage.prototype = Object.create(remotemessage_Message.prototype);
	KeyPressMessage.prototype.constructor = KeyPressMessage;

	/**
	* Set the field value
	* @memberof remotemessage.KeyPressMessage
	* @param {remotemessage.KeyPress} keyPress 
	*/
	KeyPressMessage.prototype.setKeyPress = function(keyPress) {
	  this.keyPress = keyPress;
	};

	/**
	* Get the field value
	* @memberof remotemessage.KeyPressMessage
	* @return {remotemessage.KeyPress} 
	*/
	KeyPressMessage.prototype.getKeyPress = function() {
	  return this.keyPress;
	};

	KeyPressMessage._meta_ =  {fields:  {}};
	KeyPressMessage._meta_._class_ =  KeyPressMessage;
	KeyPressMessage._meta_._superMeta_ = remotemessage_Message._meta_;
	KeyPressMessage._meta_.fields["keyPress"] = {};
	KeyPressMessage._meta_.fields["keyPress"].type = remotemessage_KeyPress;

	//
	// Expose the module.
	//
	if (true) {
	module.exports = KeyPressMessage;
	}



/***/ }),
/* 1064 */
/***/ (function(module, exports, __webpack_require__) {

	/**
	 * Autogenerated by Avro
	 * 
	 * DO NOT EDIT DIRECTLY
	 */

	var remotemessage_Method = __webpack_require__(2);
	var remotemessage_Message = __webpack_require__(3);

	/**
	* @constructor
	* @augments remotemessage.Message
	* @memberof remotemessage
	*/
	var LastMessageRequestMessage = function() {
	  remotemessage_Message.call(this);
	  this._superClass_ = remotemessage_Message;
	  this._class_ = LastMessageRequestMessage;
	  this.setMethod(remotemessage_Method["LAST_MSG_REQUEST"]);
	};

	LastMessageRequestMessage.prototype = Object.create(remotemessage_Message.prototype);
	LastMessageRequestMessage.prototype.constructor = LastMessageRequestMessage;

	LastMessageRequestMessage._meta_ =  {fields:  {}};
	LastMessageRequestMessage._meta_._class_ =  LastMessageRequestMessage;
	LastMessageRequestMessage._meta_._superMeta_ = remotemessage_Message._meta_;

	//
	// Expose the module.
	//
	if (true) {
	module.exports = LastMessageRequestMessage;
	}



/***/ }),
/* 1065 */
/***/ (function(module, exports, __webpack_require__) {

	/**
	 * Autogenerated by Avro
	 * 
	 * DO NOT EDIT DIRECTLY
	 */

	var remotemessage_Method = __webpack_require__(2);
	var remotemessage_Message = __webpack_require__(3);

	/**
	* @constructor
	* @augments remotemessage.Message
	* @memberof remotemessage
	*/
	var LastMessageResponseMessage = function() {
	  remotemessage_Message.call(this);
	  this._superClass_ = remotemessage_Message;
	  this._class_ = LastMessageResponseMessage;
	  this.setMethod(remotemessage_Method["LAST_MSG_RESPONSE"]);
	  this.request = undefined;
	  this.response = undefined;
	};

	LastMessageResponseMessage.prototype = Object.create(remotemessage_Message.prototype);
	LastMessageResponseMessage.prototype.constructor = LastMessageResponseMessage;

	/**
	* Set the field value
	* The last transactional request the device recorded
	*
	* @memberof remotemessage.LastMessageResponseMessage
	* @param {remotemessage.Message} request 
	*/
	LastMessageResponseMessage.prototype.setRequest = function(request) {
	  this.request = request;
	};

	/**
	* Get the field value
	* The last transactional request the device recorded
	* @memberof remotemessage.LastMessageResponseMessage
	* @return {remotemessage.Message} 
	*/
	LastMessageResponseMessage.prototype.getRequest = function() {
	  return this.request;
	};

	/**
	* Set the field value
	* The last transactional response the device recorded
	*
	* @memberof remotemessage.LastMessageResponseMessage
	* @param {remotemessage.Message} response 
	*/
	LastMessageResponseMessage.prototype.setResponse = function(response) {
	  this.response = response;
	};

	/**
	* Get the field value
	* The last transactional response the device recorded
	* @memberof remotemessage.LastMessageResponseMessage
	* @return {remotemessage.Message} 
	*/
	LastMessageResponseMessage.prototype.getResponse = function() {
	  return this.response;
	};

	LastMessageResponseMessage._meta_ =  {fields:  {}};
	LastMessageResponseMessage._meta_._class_ =  LastMessageResponseMessage;
	LastMessageResponseMessage._meta_._superMeta_ = remotemessage_Message._meta_;
	LastMessageResponseMessage._meta_.fields["request"] = {};
	LastMessageResponseMessage._meta_.fields["request"].type = remotemessage_Message;
	LastMessageResponseMessage._meta_.fields["response"] = {};
	LastMessageResponseMessage._meta_.fields["response"].type = remotemessage_Message;

	//
	// Expose the module.
	//
	if (true) {
	module.exports = LastMessageResponseMessage;
	}



/***/ }),
/* 1066 */
/***/ (function(module, exports, __webpack_require__) {

	/**
	 * Autogenerated by Avro
	 * 
	 * DO NOT EDIT DIRECTLY
	 */

	var remotemessage_Method = __webpack_require__(2);
	var remotemessage_Message = __webpack_require__(3);
	var remotemessage_LogLevelEnum = __webpack_require__(474);

	/**
	* @constructor
	* @augments remotemessage.Message
	* @memberof remotemessage
	*/
	var LogMessage = function() {
	  remotemessage_Message.call(this);
	  this._superClass_ = remotemessage_Message;
	  this._class_ = LogMessage;
	  this.setMethod(remotemessage_Method["LOG_MESSAGE"]);
	  this.logLevel = undefined;
	  this.messages = undefined;
	};

	LogMessage.prototype = Object.create(remotemessage_Message.prototype);
	LogMessage.prototype.constructor = LogMessage;

	/**
	* Set the field value
	* @memberof remotemessage.LogMessage
	* @param {remotemessage.LogLevelEnum} logLevel 
	*/
	LogMessage.prototype.setLogLevel = function(logLevel) {
	  this.logLevel = logLevel;
	};

	/**
	* Get the field value
	* @memberof remotemessage.LogMessage
	* @return {remotemessage.LogLevelEnum} 
	*/
	LogMessage.prototype.getLogLevel = function() {
	  return this.logLevel;
	};

	/**
	* Set the field value
	* @memberof remotemessage.LogMessage
	* @param {Object.<String,String>} messages A map of <String> to <>
	*/
	LogMessage.prototype.setMessages = function(messages) {
	  this.messages = messages;
	};

	/**
	* Get the field value
	* @memberof remotemessage.LogMessage
	* @return {Object.<String,String>} A map of <String> to <>
	*/
	LogMessage.prototype.getMessages = function() {
	  return this.messages;
	};

	LogMessage._meta_ =  {fields:  {}};
	LogMessage._meta_._class_ =  LogMessage;
	LogMessage._meta_._superMeta_ = remotemessage_Message._meta_;
	LogMessage._meta_.fields["logLevel"] = {};
	LogMessage._meta_.fields["logLevel"].type = remotemessage_LogLevelEnum;
	LogMessage._meta_.fields["messages"] = {};
	LogMessage._meta_.fields["messages"].type = Object;

	//
	// Expose the module.
	//
	if (true) {
	module.exports = LogMessage;
	}



/***/ }),
/* 1067 */
/***/ (function(module, exports, __webpack_require__) {

	/**
	 * Autogenerated by Avro
	 * 
	 * DO NOT EDIT DIRECTLY
	 */

	var remotemessage_Method = __webpack_require__(2);
	var remotemessage_Message = __webpack_require__(3);

	/** Used in loyalty systems. */
	/**
	* @constructor
	* @augments remotemessage.Message
	* @memberof remotemessage
	*/
	var LoyaltyPointsCalculatedMessage = function() {
	  remotemessage_Message.call(this);
	  this._superClass_ = remotemessage_Message;
	  this._class_ = LoyaltyPointsCalculatedMessage;
	  this.setMethod(remotemessage_Method["SHOW_LOYALTY_POINTS_CALCULATED"]);
	  this.loyaltyUuid = undefined;
	  this.points = undefined;
	  this.orderId = undefined;
	};

	LoyaltyPointsCalculatedMessage.prototype = Object.create(remotemessage_Message.prototype);
	LoyaltyPointsCalculatedMessage.prototype.constructor = LoyaltyPointsCalculatedMessage;

	/**
	* Set the field value
	* The id for the loyalty entity (likely a customer id of some type)
	*
	* @memberof remotemessage.LoyaltyPointsCalculatedMessage
	* @param {String} loyaltyUuid 
	*/
	LoyaltyPointsCalculatedMessage.prototype.setLoyaltyUuid = function(loyaltyUuid) {
	  this.loyaltyUuid = loyaltyUuid;
	};

	/**
	* Get the field value
	* The id for the loyalty entity (likely a customer id of some type)
	* @memberof remotemessage.LoyaltyPointsCalculatedMessage
	* @return {String} 
	*/
	LoyaltyPointsCalculatedMessage.prototype.getLoyaltyUuid = function() {
	  return this.loyaltyUuid;
	};

	/**
	* Set the field value
	* The number of points calculated for the event
	*
	* @memberof remotemessage.LoyaltyPointsCalculatedMessage
	* @param {Number} points must be a long integer
	*/
	LoyaltyPointsCalculatedMessage.prototype.setPoints = function(points) {
	  this.points = points;
	};

	/**
	* Get the field value
	* The number of points calculated for the event
	* @memberof remotemessage.LoyaltyPointsCalculatedMessage
	* @return {Number} must be a long integer
	*/
	LoyaltyPointsCalculatedMessage.prototype.getPoints = function() {
	  return this.points;
	};

	/**
	* Set the field value
	* The order with which the awarded are associated
	*
	* @memberof remotemessage.LoyaltyPointsCalculatedMessage
	* @param {String} orderId 
	*/
	LoyaltyPointsCalculatedMessage.prototype.setOrderId = function(orderId) {
	  this.orderId = orderId;
	};

	/**
	* Get the field value
	* The order with which the awarded are associated
	* @memberof remotemessage.LoyaltyPointsCalculatedMessage
	* @return {String} 
	*/
	LoyaltyPointsCalculatedMessage.prototype.getOrderId = function() {
	  return this.orderId;
	};

	LoyaltyPointsCalculatedMessage._meta_ =  {fields:  {}};
	LoyaltyPointsCalculatedMessage._meta_._class_ =  LoyaltyPointsCalculatedMessage;
	LoyaltyPointsCalculatedMessage._meta_._superMeta_ = remotemessage_Message._meta_;
	LoyaltyPointsCalculatedMessage._meta_.fields["loyaltyUuid"] = {};
	LoyaltyPointsCalculatedMessage._meta_.fields["loyaltyUuid"].type = String;
	LoyaltyPointsCalculatedMessage._meta_.fields["points"] = {};
	LoyaltyPointsCalculatedMessage._meta_.fields["points"].type = Number;
	LoyaltyPointsCalculatedMessage._meta_.fields["orderId"] = {};
	LoyaltyPointsCalculatedMessage._meta_.fields["orderId"].type = String;

	//
	// Expose the module.
	//
	if (true) {
	module.exports = LoyaltyPointsCalculatedMessage;
	}



/***/ }),
/* 1068 */
/***/ (function(module, exports, __webpack_require__) {

	/**
	 * Autogenerated by Avro
	 * 
	 * DO NOT EDIT DIRECTLY
	 */

	var remotemessage_Method = __webpack_require__(2);
	var remotemessage_Message = __webpack_require__(3);

	/** Used in loyalty systems. */
	/**
	* @constructor
	* @augments remotemessage.Message
	* @memberof remotemessage
	*/
	var LoyaltyPointsEarnedMessage = function() {
	  remotemessage_Message.call(this);
	  this._superClass_ = remotemessage_Message;
	  this._class_ = LoyaltyPointsEarnedMessage;
	  this.setMethod(remotemessage_Method["SHOW_LOYALTY_POINTS_EARNED_SCREEN"]);
	  this.loyaltyUuid = undefined;
	  this.points = undefined;
	  this.orderId = undefined;
	};

	LoyaltyPointsEarnedMessage.prototype = Object.create(remotemessage_Message.prototype);
	LoyaltyPointsEarnedMessage.prototype.constructor = LoyaltyPointsEarnedMessage;

	/**
	* Set the field value
	* The id for the loyalty entity (likely a customer id of some type)
	*
	* @memberof remotemessage.LoyaltyPointsEarnedMessage
	* @param {String} loyaltyUuid 
	*/
	LoyaltyPointsEarnedMessage.prototype.setLoyaltyUuid = function(loyaltyUuid) {
	  this.loyaltyUuid = loyaltyUuid;
	};

	/**
	* Get the field value
	* The id for the loyalty entity (likely a customer id of some type)
	* @memberof remotemessage.LoyaltyPointsEarnedMessage
	* @return {String} 
	*/
	LoyaltyPointsEarnedMessage.prototype.getLoyaltyUuid = function() {
	  return this.loyaltyUuid;
	};

	/**
	* Set the field value
	* The number of points calculated for the event
	*
	* @memberof remotemessage.LoyaltyPointsEarnedMessage
	* @param {Number} points must be a long integer
	*/
	LoyaltyPointsEarnedMessage.prototype.setPoints = function(points) {
	  this.points = points;
	};

	/**
	* Get the field value
	* The number of points calculated for the event
	* @memberof remotemessage.LoyaltyPointsEarnedMessage
	* @return {Number} must be a long integer
	*/
	LoyaltyPointsEarnedMessage.prototype.getPoints = function() {
	  return this.points;
	};

	/**
	* Set the field value
	* The order with which the awarded are associated
	*
	* @memberof remotemessage.LoyaltyPointsEarnedMessage
	* @param {String} orderId 
	*/
	LoyaltyPointsEarnedMessage.prototype.setOrderId = function(orderId) {
	  this.orderId = orderId;
	};

	/**
	* Get the field value
	* The order with which the awarded are associated
	* @memberof remotemessage.LoyaltyPointsEarnedMessage
	* @return {String} 
	*/
	LoyaltyPointsEarnedMessage.prototype.getOrderId = function() {
	  return this.orderId;
	};

	LoyaltyPointsEarnedMessage._meta_ =  {fields:  {}};
	LoyaltyPointsEarnedMessage._meta_._class_ =  LoyaltyPointsEarnedMessage;
	LoyaltyPointsEarnedMessage._meta_._superMeta_ = remotemessage_Message._meta_;
	LoyaltyPointsEarnedMessage._meta_.fields["loyaltyUuid"] = {};
	LoyaltyPointsEarnedMessage._meta_.fields["loyaltyUuid"].type = String;
	LoyaltyPointsEarnedMessage._meta_.fields["points"] = {};
	LoyaltyPointsEarnedMessage._meta_.fields["points"].type = Number;
	LoyaltyPointsEarnedMessage._meta_.fields["orderId"] = {};
	LoyaltyPointsEarnedMessage._meta_.fields["orderId"].type = String;

	//
	// Expose the module.
	//
	if (true) {
	module.exports = LoyaltyPointsEarnedMessage;
	}



/***/ }),
/* 1069 */
/***/ (function(module, exports, __webpack_require__) {

	/**
	 * Autogenerated by Avro
	 * 
	 * DO NOT EDIT DIRECTLY
	 */

	var remotemessage_Method = __webpack_require__(2);
	var remotemessage_Message = __webpack_require__(3);

	/** Used in loyalty systems. */
	/**
	* @constructor
	* @augments remotemessage.Message
	* @memberof remotemessage
	*/
	var LoyaltyPointsReceiptPrintedMessage = function() {
	  remotemessage_Message.call(this);
	  this._superClass_ = remotemessage_Message;
	  this._class_ = LoyaltyPointsReceiptPrintedMessage;
	  this.setMethod(remotemessage_Method["SHOW_LOYALTY_POINTS_RECEIPT_PRINTED"]);
	  this.points = undefined;
	  this.orderId = undefined;
	};

	LoyaltyPointsReceiptPrintedMessage.prototype = Object.create(remotemessage_Message.prototype);
	LoyaltyPointsReceiptPrintedMessage.prototype.constructor = LoyaltyPointsReceiptPrintedMessage;

	/**
	* Set the field value
	* The number of points calculated for the event
	*
	* @memberof remotemessage.LoyaltyPointsReceiptPrintedMessage
	* @param {Number} points must be a long integer
	*/
	LoyaltyPointsReceiptPrintedMessage.prototype.setPoints = function(points) {
	  this.points = points;
	};

	/**
	* Get the field value
	* The number of points calculated for the event
	* @memberof remotemessage.LoyaltyPointsReceiptPrintedMessage
	* @return {Number} must be a long integer
	*/
	LoyaltyPointsReceiptPrintedMessage.prototype.getPoints = function() {
	  return this.points;
	};

	/**
	* Set the field value
	* The order with which the awarded are associated
	*
	* @memberof remotemessage.LoyaltyPointsReceiptPrintedMessage
	* @param {String} orderId 
	*/
	LoyaltyPointsReceiptPrintedMessage.prototype.setOrderId = function(orderId) {
	  this.orderId = orderId;
	};

	/**
	* Get the field value
	* The order with which the awarded are associated
	* @memberof remotemessage.LoyaltyPointsReceiptPrintedMessage
	* @return {String} 
	*/
	LoyaltyPointsReceiptPrintedMessage.prototype.getOrderId = function() {
	  return this.orderId;
	};

	LoyaltyPointsReceiptPrintedMessage._meta_ =  {fields:  {}};
	LoyaltyPointsReceiptPrintedMessage._meta_._class_ =  LoyaltyPointsReceiptPrintedMessage;
	LoyaltyPointsReceiptPrintedMessage._meta_._superMeta_ = remotemessage_Message._meta_;
	LoyaltyPointsReceiptPrintedMessage._meta_.fields["points"] = {};
	LoyaltyPointsReceiptPrintedMessage._meta_.fields["points"].type = Number;
	LoyaltyPointsReceiptPrintedMessage._meta_.fields["orderId"] = {};
	LoyaltyPointsReceiptPrintedMessage._meta_.fields["orderId"].type = String;

	//
	// Expose the module.
	//
	if (true) {
	module.exports = LoyaltyPointsReceiptPrintedMessage;
	}



/***/ }),
/* 1070 */
/***/ (function(module, exports, __webpack_require__) {

	/**
	 * Autogenerated by Avro
	 * 
	 * DO NOT EDIT DIRECTLY
	 */

	var remotemessage_Method = __webpack_require__(2);
	var printer_Printer = __webpack_require__(88);
	var remotemessage_Message = __webpack_require__(3);

	/**
	* @constructor
	* @augments remotemessage.Message
	* @memberof remotemessage
	*/
	var OpenCashDrawerMessage = function() {
	  remotemessage_Message.call(this);
	  this._superClass_ = remotemessage_Message;
	  this._class_ = OpenCashDrawerMessage;
	  this.setMethod(remotemessage_Method["OPEN_CASH_DRAWER"]);
	  this.reason = undefined;
	  this.printer = undefined;
	};

	OpenCashDrawerMessage.prototype = Object.create(remotemessage_Message.prototype);
	OpenCashDrawerMessage.prototype.constructor = OpenCashDrawerMessage;

	/**
	* Set the field value
	* The reason the cash drawer was opened.
	*
	* @memberof remotemessage.OpenCashDrawerMessage
	* @param {String} reason 
	*/
	OpenCashDrawerMessage.prototype.setReason = function(reason) {
	  this.reason = reason;
	};

	/**
	* Get the field value
	* The reason the cash drawer was opened.
	* @memberof remotemessage.OpenCashDrawerMessage
	* @return {String} 
	*/
	OpenCashDrawerMessage.prototype.getReason = function() {
	  return this.reason;
	};

	/**
	* Set the field value
	* The ID of the specific drawer to open.
	*
	* @memberof remotemessage.OpenCashDrawerMessage
	* @param {printer.Printer} printer 
	*/
	OpenCashDrawerMessage.prototype.setPrinter = function(printer) {
	  this.printer = printer;
	};

	/**
	* Get the field value
	* The ID of the specific drawer to open.
	* @memberof remotemessage.OpenCashDrawerMessage
	* @return {printer.Printer} 
	*/
	OpenCashDrawerMessage.prototype.getPrinter = function() {
	  return this.printer;
	};

	OpenCashDrawerMessage._meta_ =  {fields:  {}};
	OpenCashDrawerMessage._meta_._class_ =  OpenCashDrawerMessage;
	OpenCashDrawerMessage._meta_._superMeta_ = remotemessage_Message._meta_;
	OpenCashDrawerMessage._meta_.fields["reason"] = {};
	OpenCashDrawerMessage._meta_.fields["reason"].type = String;
	OpenCashDrawerMessage._meta_.fields["printer"] = {};
	OpenCashDrawerMessage._meta_.fields["printer"].type = printer_Printer;

	//
	// Expose the module.
	//
	if (true) {
	module.exports = OpenCashDrawerMessage;
	}



/***/ }),
/* 1071 */
/***/ (function(module, exports, __webpack_require__) {

	/**
	 * Autogenerated by Avro
	 * 
	 * DO NOT EDIT DIRECTLY
	 */

	var remotemessage_Method = __webpack_require__(2);
	var remotemessage_Message = __webpack_require__(3);
	var remotemessage_AddDiscountAction = __webpack_require__(471);

	/**
	* @constructor
	* @augments remotemessage.Message
	* @memberof remotemessage
	*/
	var OrderActionAddDiscountMessage = function() {
	  remotemessage_Message.call(this);
	  this._superClass_ = remotemessage_Message;
	  this._class_ = OrderActionAddDiscountMessage;
	  this.setMethod(remotemessage_Method["ORDER_ACTION_ADD_DISCOUNT"]);
	  this.addDiscountAction = undefined;
	};

	OrderActionAddDiscountMessage.prototype = Object.create(remotemessage_Message.prototype);
	OrderActionAddDiscountMessage.prototype.constructor = OrderActionAddDiscountMessage;

	/**
	* Set the field value
	* @memberof remotemessage.OrderActionAddDiscountMessage
	* @param {remotemessage.AddDiscountAction} addDiscountAction 
	*/
	OrderActionAddDiscountMessage.prototype.setAddDiscountAction = function(addDiscountAction) {
	  this.addDiscountAction = addDiscountAction;
	};

	/**
	* Get the field value
	* @memberof remotemessage.OrderActionAddDiscountMessage
	* @return {remotemessage.AddDiscountAction} 
	*/
	OrderActionAddDiscountMessage.prototype.getAddDiscountAction = function() {
	  return this.addDiscountAction;
	};

	OrderActionAddDiscountMessage._meta_ =  {fields:  {}};
	OrderActionAddDiscountMessage._meta_._class_ =  OrderActionAddDiscountMessage;
	OrderActionAddDiscountMessage._meta_._superMeta_ = remotemessage_Message._meta_;
	OrderActionAddDiscountMessage._meta_.fields["addDiscountAction"] = {};
	OrderActionAddDiscountMessage._meta_.fields["addDiscountAction"].type = remotemessage_AddDiscountAction;

	//
	// Expose the module.
	//
	if (true) {
	module.exports = OrderActionAddDiscountMessage;
	}



/***/ }),
/* 1072 */
/***/ (function(module, exports, __webpack_require__) {

	/**
	 * Autogenerated by Avro
	 * 
	 * DO NOT EDIT DIRECTLY
	 */

	var remotemessage_Method = __webpack_require__(2);
	var remotemessage_Message = __webpack_require__(3);
	var remotemessage_AddLineItemAction = __webpack_require__(472);

	/**
	* @constructor
	* @augments remotemessage.Message
	* @memberof remotemessage
	*/
	var OrderActionAddLineItemMessage = function() {
	  remotemessage_Message.call(this);
	  this._superClass_ = remotemessage_Message;
	  this._class_ = OrderActionAddLineItemMessage;
	  this.setMethod(remotemessage_Method["ORDER_ACTION_ADD_LINE_ITEM"]);
	  this.addLineItemAction = undefined;
	};

	OrderActionAddLineItemMessage.prototype = Object.create(remotemessage_Message.prototype);
	OrderActionAddLineItemMessage.prototype.constructor = OrderActionAddLineItemMessage;

	/**
	* Set the field value
	* @memberof remotemessage.OrderActionAddLineItemMessage
	* @param {remotemessage.AddLineItemAction} addLineItemAction 
	*/
	OrderActionAddLineItemMessage.prototype.setAddLineItemAction = function(addLineItemAction) {
	  this.addLineItemAction = addLineItemAction;
	};

	/**
	* Get the field value
	* @memberof remotemessage.OrderActionAddLineItemMessage
	* @return {remotemessage.AddLineItemAction} 
	*/
	OrderActionAddLineItemMessage.prototype.getAddLineItemAction = function() {
	  return this.addLineItemAction;
	};

	OrderActionAddLineItemMessage._meta_ =  {fields:  {}};
	OrderActionAddLineItemMessage._meta_._class_ =  OrderActionAddLineItemMessage;
	OrderActionAddLineItemMessage._meta_._superMeta_ = remotemessage_Message._meta_;
	OrderActionAddLineItemMessage._meta_.fields["addLineItemAction"] = {};
	OrderActionAddLineItemMessage._meta_.fields["addLineItemAction"].type = remotemessage_AddLineItemAction;

	//
	// Expose the module.
	//
	if (true) {
	module.exports = OrderActionAddLineItemMessage;
	}



/***/ }),
/* 1073 */
/***/ (function(module, exports, __webpack_require__) {

	/**
	 * Autogenerated by Avro
	 * 
	 * DO NOT EDIT DIRECTLY
	 */

	var remotemessage_Method = __webpack_require__(2);
	var remotemessage_Message = __webpack_require__(3);
	var remotemessage_RemoveDiscountAction = __webpack_require__(479);

	/**
	* @constructor
	* @augments remotemessage.Message
	* @memberof remotemessage
	*/
	var OrderActionRemoveDiscountMessage = function() {
	  remotemessage_Message.call(this);
	  this._superClass_ = remotemessage_Message;
	  this._class_ = OrderActionRemoveDiscountMessage;
	  this.setMethod(remotemessage_Method["ORDER_ACTION_REMOVE_DISCOUNT"]);
	  this.removeDiscountAction = undefined;
	};

	OrderActionRemoveDiscountMessage.prototype = Object.create(remotemessage_Message.prototype);
	OrderActionRemoveDiscountMessage.prototype.constructor = OrderActionRemoveDiscountMessage;

	/**
	* Set the field value
	* @memberof remotemessage.OrderActionRemoveDiscountMessage
	* @param {remotemessage.RemoveDiscountAction} removeDiscountAction 
	*/
	OrderActionRemoveDiscountMessage.prototype.setRemoveDiscountAction = function(removeDiscountAction) {
	  this.removeDiscountAction = removeDiscountAction;
	};

	/**
	* Get the field value
	* @memberof remotemessage.OrderActionRemoveDiscountMessage
	* @return {remotemessage.RemoveDiscountAction} 
	*/
	OrderActionRemoveDiscountMessage.prototype.getRemoveDiscountAction = function() {
	  return this.removeDiscountAction;
	};

	OrderActionRemoveDiscountMessage._meta_ =  {fields:  {}};
	OrderActionRemoveDiscountMessage._meta_._class_ =  OrderActionRemoveDiscountMessage;
	OrderActionRemoveDiscountMessage._meta_._superMeta_ = remotemessage_Message._meta_;
	OrderActionRemoveDiscountMessage._meta_.fields["removeDiscountAction"] = {};
	OrderActionRemoveDiscountMessage._meta_.fields["removeDiscountAction"].type = remotemessage_RemoveDiscountAction;

	//
	// Expose the module.
	//
	if (true) {
	module.exports = OrderActionRemoveDiscountMessage;
	}



/***/ }),
/* 1074 */
/***/ (function(module, exports, __webpack_require__) {

	/**
	 * Autogenerated by Avro
	 * 
	 * DO NOT EDIT DIRECTLY
	 */

	var remotemessage_Method = __webpack_require__(2);
	var remotemessage_Message = __webpack_require__(3);
	var remotemessage_RemoveLineItemAction = __webpack_require__(480);

	/**
	* @constructor
	* @augments remotemessage.Message
	* @memberof remotemessage
	*/
	var OrderActionRemoveLineItemMessage = function() {
	  remotemessage_Message.call(this);
	  this._superClass_ = remotemessage_Message;
	  this._class_ = OrderActionRemoveLineItemMessage;
	  this.setMethod(remotemessage_Method["ORDER_ACTION_REMOVE_LINE_ITEM"]);
	  this.removeLineItemAction = undefined;
	};

	OrderActionRemoveLineItemMessage.prototype = Object.create(remotemessage_Message.prototype);
	OrderActionRemoveLineItemMessage.prototype.constructor = OrderActionRemoveLineItemMessage;

	/**
	* Set the field value
	* @memberof remotemessage.OrderActionRemoveLineItemMessage
	* @param {remotemessage.RemoveLineItemAction} removeLineItemAction 
	*/
	OrderActionRemoveLineItemMessage.prototype.setRemoveLineItemAction = function(removeLineItemAction) {
	  this.removeLineItemAction = removeLineItemAction;
	};

	/**
	* Get the field value
	* @memberof remotemessage.OrderActionRemoveLineItemMessage
	* @return {remotemessage.RemoveLineItemAction} 
	*/
	OrderActionRemoveLineItemMessage.prototype.getRemoveLineItemAction = function() {
	  return this.removeLineItemAction;
	};

	OrderActionRemoveLineItemMessage._meta_ =  {fields:  {}};
	OrderActionRemoveLineItemMessage._meta_._class_ =  OrderActionRemoveLineItemMessage;
	OrderActionRemoveLineItemMessage._meta_._superMeta_ = remotemessage_Message._meta_;
	OrderActionRemoveLineItemMessage._meta_.fields["removeLineItemAction"] = {};
	OrderActionRemoveLineItemMessage._meta_.fields["removeLineItemAction"].type = remotemessage_RemoveLineItemAction;

	//
	// Expose the module.
	//
	if (true) {
	module.exports = OrderActionRemoveLineItemMessage;
	}



/***/ }),
/* 1075 */
/***/ (function(module, exports, __webpack_require__) {

	/**
	 * Autogenerated by Avro
	 * 
	 * DO NOT EDIT DIRECTLY
	 */

	var remotemessage_Method = __webpack_require__(2);
	var remotemessage_Message = __webpack_require__(3);
	var remotemessage_OrderActionResponse = __webpack_require__(475);

	/**
	* @constructor
	* @augments remotemessage.Message
	* @memberof remotemessage
	*/
	var OrderActionResponseMessage = function() {
	  remotemessage_Message.call(this);
	  this._superClass_ = remotemessage_Message;
	  this._class_ = OrderActionResponseMessage;
	  this.setMethod(remotemessage_Method["ORDER_ACTION_RESPONSE"]);
	  this.orderActionResponse = undefined;
	};

	OrderActionResponseMessage.prototype = Object.create(remotemessage_Message.prototype);
	OrderActionResponseMessage.prototype.constructor = OrderActionResponseMessage;

	/**
	* Set the field value
	* @memberof remotemessage.OrderActionResponseMessage
	* @param {remotemessage.OrderActionResponse} orderActionResponse 
	*/
	OrderActionResponseMessage.prototype.setOrderActionResponse = function(orderActionResponse) {
	  this.orderActionResponse = orderActionResponse;
	};

	/**
	* Get the field value
	* @memberof remotemessage.OrderActionResponseMessage
	* @return {remotemessage.OrderActionResponse} 
	*/
	OrderActionResponseMessage.prototype.getOrderActionResponse = function() {
	  return this.orderActionResponse;
	};

	OrderActionResponseMessage._meta_ =  {fields:  {}};
	OrderActionResponseMessage._meta_._class_ =  OrderActionResponseMessage;
	OrderActionResponseMessage._meta_._superMeta_ = remotemessage_Message._meta_;
	OrderActionResponseMessage._meta_.fields["orderActionResponse"] = {};
	OrderActionResponseMessage._meta_.fields["orderActionResponse"].type = remotemessage_OrderActionResponse;

	//
	// Expose the module.
	//
	if (true) {
	module.exports = OrderActionResponseMessage;
	}



/***/ }),
/* 1076 */
/***/ (function(module, exports, __webpack_require__) {

	/**
	 * Autogenerated by Avro
	 * 
	 * DO NOT EDIT DIRECTLY
	 */

	var remotemessage_Method = __webpack_require__(2);
	var order_operation_DiscountsAddedOperation = __webpack_require__(417);
	var order_operation_OrderDeletedOperation = __webpack_require__(421);
	var remotemessage_Message = __webpack_require__(3);
	var order_operation_LineItemsAddedOperation = __webpack_require__(419);
	var order_operation_LineItemsDeletedOperation = __webpack_require__(420);
	var order_DisplayOrder = __webpack_require__(409);
	var order_operation_DiscountsDeletedOperation = __webpack_require__(418);

	/**
	* @constructor
	* @augments remotemessage.Message
	* @memberof remotemessage
	*/
	var OrderUpdateMessage = function() {
	  remotemessage_Message.call(this);
	  this._superClass_ = remotemessage_Message;
	  this._class_ = OrderUpdateMessage;
	  this.setMethod(remotemessage_Method["SHOW_ORDER_SCREEN"]);
	  this.order = undefined;
	  this.lineItemsAddedOperation = undefined;
	  this.lineItemsDeletedOperation = undefined;
	  this.discountsAddedOperation = undefined;
	  this.discountsDeletedOperation = undefined;
	  this.orderDeletedOperation = undefined;
	};

	OrderUpdateMessage.prototype = Object.create(remotemessage_Message.prototype);
	OrderUpdateMessage.prototype.constructor = OrderUpdateMessage;

	/**
	* Set the field value
	* The order that is to be displayed.
	*
	* @memberof remotemessage.OrderUpdateMessage
	* @param {order.DisplayOrder} order 
	*/
	OrderUpdateMessage.prototype.setOrder = function(order) {
	  this.order = order;
	};

	/**
	* Get the field value
	* The order that is to be displayed.
	* @memberof remotemessage.OrderUpdateMessage
	* @return {order.DisplayOrder} 
	*/
	OrderUpdateMessage.prototype.getOrder = function() {
	  return this.order;
	};

	/**
	* Set the field value
	* Items that were added to the display order.
	*
	* @memberof remotemessage.OrderUpdateMessage
	* @param {order.operation.LineItemsAddedOperation} lineItemsAddedOperation 
	*/
	OrderUpdateMessage.prototype.setLineItemsAddedOperation = function(lineItemsAddedOperation) {
	  this.lineItemsAddedOperation = lineItemsAddedOperation;
	};

	/**
	* Get the field value
	* Items that were added to the display order.
	* @memberof remotemessage.OrderUpdateMessage
	* @return {order.operation.LineItemsAddedOperation} 
	*/
	OrderUpdateMessage.prototype.getLineItemsAddedOperation = function() {
	  return this.lineItemsAddedOperation;
	};

	/**
	* Set the field value
	* Items that were added to the display order.
	*
	* @memberof remotemessage.OrderUpdateMessage
	* @param {order.operation.LineItemsDeletedOperation} lineItemsDeletedOperation 
	*/
	OrderUpdateMessage.prototype.setLineItemsDeletedOperation = function(lineItemsDeletedOperation) {
	  this.lineItemsDeletedOperation = lineItemsDeletedOperation;
	};

	/**
	* Get the field value
	* Items that were added to the display order.
	* @memberof remotemessage.OrderUpdateMessage
	* @return {order.operation.LineItemsDeletedOperation} 
	*/
	OrderUpdateMessage.prototype.getLineItemsDeletedOperation = function() {
	  return this.lineItemsDeletedOperation;
	};

	/**
	* Set the field value
	* Items that were added to the display order.
	*
	* @memberof remotemessage.OrderUpdateMessage
	* @param {order.operation.DiscountsAddedOperation} discountsAddedOperation 
	*/
	OrderUpdateMessage.prototype.setDiscountsAddedOperation = function(discountsAddedOperation) {
	  this.discountsAddedOperation = discountsAddedOperation;
	};

	/**
	* Get the field value
	* Items that were added to the display order.
	* @memberof remotemessage.OrderUpdateMessage
	* @return {order.operation.DiscountsAddedOperation} 
	*/
	OrderUpdateMessage.prototype.getDiscountsAddedOperation = function() {
	  return this.discountsAddedOperation;
	};

	/**
	* Set the field value
	* Items that were added to the display order.
	*
	* @memberof remotemessage.OrderUpdateMessage
	* @param {order.operation.DiscountsDeletedOperation} discountsDeletedOperation 
	*/
	OrderUpdateMessage.prototype.setDiscountsDeletedOperation = function(discountsDeletedOperation) {
	  this.discountsDeletedOperation = discountsDeletedOperation;
	};

	/**
	* Get the field value
	* Items that were added to the display order.
	* @memberof remotemessage.OrderUpdateMessage
	* @return {order.operation.DiscountsDeletedOperation} 
	*/
	OrderUpdateMessage.prototype.getDiscountsDeletedOperation = function() {
	  return this.discountsDeletedOperation;
	};

	/**
	* Set the field value
	* Items that were added to the display order.
	*
	* @memberof remotemessage.OrderUpdateMessage
	* @param {order.operation.OrderDeletedOperation} orderDeletedOperation 
	*/
	OrderUpdateMessage.prototype.setOrderDeletedOperation = function(orderDeletedOperation) {
	  this.orderDeletedOperation = orderDeletedOperation;
	};

	/**
	* Get the field value
	* Items that were added to the display order.
	* @memberof remotemessage.OrderUpdateMessage
	* @return {order.operation.OrderDeletedOperation} 
	*/
	OrderUpdateMessage.prototype.getOrderDeletedOperation = function() {
	  return this.orderDeletedOperation;
	};

	OrderUpdateMessage._meta_ =  {fields:  {}};
	OrderUpdateMessage._meta_._class_ =  OrderUpdateMessage;
	OrderUpdateMessage._meta_._superMeta_ = remotemessage_Message._meta_;
	OrderUpdateMessage._meta_.fields["order"] = {};
	OrderUpdateMessage._meta_.fields["order"].type = order_DisplayOrder;
	OrderUpdateMessage._meta_.fields["lineItemsAddedOperation"] = {};
	OrderUpdateMessage._meta_.fields["lineItemsAddedOperation"].type = order_operation_LineItemsAddedOperation;
	OrderUpdateMessage._meta_.fields["lineItemsDeletedOperation"] = {};
	OrderUpdateMessage._meta_.fields["lineItemsDeletedOperation"].type = order_operation_LineItemsDeletedOperation;
	OrderUpdateMessage._meta_.fields["discountsAddedOperation"] = {};
	OrderUpdateMessage._meta_.fields["discountsAddedOperation"].type = order_operation_DiscountsAddedOperation;
	OrderUpdateMessage._meta_.fields["discountsDeletedOperation"] = {};
	OrderUpdateMessage._meta_.fields["discountsDeletedOperation"].type = order_operation_DiscountsDeletedOperation;
	OrderUpdateMessage._meta_.fields["orderDeletedOperation"] = {};
	OrderUpdateMessage._meta_.fields["orderDeletedOperation"].type = order_operation_OrderDeletedOperation;

	//
	// Expose the module.
	//
	if (true) {
	module.exports = OrderUpdateMessage;
	}



/***/ }),
/* 1077 */
/***/ (function(module, exports, __webpack_require__) {

	/**
	 * Autogenerated by Avro
	 * 
	 * DO NOT EDIT DIRECTLY
	 */

	var remotemessage_Method = __webpack_require__(2);
	var remotemessage_Message = __webpack_require__(3);

	/**
	* @constructor
	* @augments remotemessage.Message
	* @memberof remotemessage
	*/
	var PairingCodeMessage = function() {
	  remotemessage_Message.call(this);
	  this._superClass_ = remotemessage_Message;
	  this._class_ = PairingCodeMessage;
	  this.setMethod(remotemessage_Method["PAIRING_CODE"]);
	  this.pairingCode = undefined;
	};

	PairingCodeMessage.prototype = Object.create(remotemessage_Message.prototype);
	PairingCodeMessage.prototype.constructor = PairingCodeMessage;

	/**
	* Set the field value
	* The pairing code to display.
	*
	* @memberof remotemessage.PairingCodeMessage
	* @param {String} pairingCode 
	*/
	PairingCodeMessage.prototype.setPairingCode = function(pairingCode) {
	  this.pairingCode = pairingCode;
	};

	/**
	* Get the field value
	* The pairing code to display.
	* @memberof remotemessage.PairingCodeMessage
	* @return {String} 
	*/
	PairingCodeMessage.prototype.getPairingCode = function() {
	  return this.pairingCode;
	};

	PairingCodeMessage._meta_ =  {fields:  {}};
	PairingCodeMessage._meta_._class_ =  PairingCodeMessage;
	PairingCodeMessage._meta_._superMeta_ = remotemessage_Message._meta_;
	PairingCodeMessage._meta_.fields["pairingCode"] = {};
	PairingCodeMessage._meta_.fields["pairingCode"].type = String;

	//
	// Expose the module.
	//
	if (true) {
	module.exports = PairingCodeMessage;
	}



/***/ }),
/* 1078 */
/***/ (function(module, exports, __webpack_require__) {

	/**
	 * Autogenerated by Avro
	 * 
	 * DO NOT EDIT DIRECTLY
	 */

	var remotemessage_Method = __webpack_require__(2);
	var remotemessage_PairingRequestMessage = __webpack_require__(476);
	var remotemessage_PairingState = __webpack_require__(477);

	/**
	* @constructor
	* @augments remotemessage.PairingRequestMessage
	* @memberof remotemessage
	*/
	var PairingResponseMessage = function() {
	  remotemessage_PairingRequestMessage.call(this);
	  this._superClass_ = remotemessage_PairingRequestMessage;
	  this._class_ = PairingResponseMessage;
	  this.setMethod(remotemessage_Method["PAIRING_RESPONSE"]);
	  this.pairingState = undefined;
	  this.millis = undefined;
	};

	PairingResponseMessage.prototype = Object.create(remotemessage_PairingRequestMessage.prototype);
	PairingResponseMessage.prototype.constructor = PairingResponseMessage;

	/**
	* Set the field value
	* The state of the pairing flow
	*
	* @memberof remotemessage.PairingResponseMessage
	* @param {remotemessage.PairingState} pairingState 
	*/
	PairingResponseMessage.prototype.setPairingState = function(pairingState) {
	  this.pairingState = pairingState;
	};

	/**
	* Get the field value
	* The state of the pairing flow
	* @memberof remotemessage.PairingResponseMessage
	* @return {remotemessage.PairingState} 
	*/
	PairingResponseMessage.prototype.getPairingState = function() {
	  return this.pairingState;
	};

	/**
	* Set the field value
	* A timestamp of when the authentication token was obtained
	*
	* @memberof remotemessage.PairingResponseMessage
	* @param {Number} millis must be a long integer
	*/
	PairingResponseMessage.prototype.setMillis = function(millis) {
	  this.millis = millis;
	};

	/**
	* Get the field value
	* A timestamp of when the authentication token was obtained
	* @memberof remotemessage.PairingResponseMessage
	* @return {Number} must be a long integer
	*/
	PairingResponseMessage.prototype.getMillis = function() {
	  return this.millis;
	};

	PairingResponseMessage._meta_ =  {fields:  {}};
	PairingResponseMessage._meta_._class_ =  PairingResponseMessage;
	PairingResponseMessage._meta_._superMeta_ = remotemessage_PairingRequestMessage._meta_;
	PairingResponseMessage._meta_.fields["pairingState"] = {};
	PairingResponseMessage._meta_.fields["pairingState"].type = remotemessage_PairingState;
	PairingResponseMessage._meta_.fields["millis"] = {};
	PairingResponseMessage._meta_.fields["millis"].type = Number;

	//
	// Expose the module.
	//
	if (true) {
	module.exports = PairingResponseMessage;
	}



/***/ }),
/* 1079 */
/***/ (function(module, exports, __webpack_require__) {

	/**
	 * Autogenerated by Avro
	 * 
	 * DO NOT EDIT DIRECTLY
	 */

	var remotemessage_Method = __webpack_require__(2);
	var remotemessage_Message = __webpack_require__(3);

	/**
	* @constructor
	* @augments remotemessage.Message
	* @memberof remotemessage
	*/
	var PartialAuthMessage = function() {
	  remotemessage_Message.call(this);
	  this._superClass_ = remotemessage_Message;
	  this._class_ = PartialAuthMessage;
	  this.setMethod(remotemessage_Method["PARTIAL_AUTH"]);
	  this.partialAuthAmount = undefined;
	};

	PartialAuthMessage.prototype = Object.create(remotemessage_Message.prototype);
	PartialAuthMessage.prototype.constructor = PartialAuthMessage;

	/**
	* Set the field value
	* Amount authorized
	*
	* @memberof remotemessage.PartialAuthMessage
	* @param {Number} partialAuthAmount must be a long integer
	*/
	PartialAuthMessage.prototype.setPartialAuthAmount = function(partialAuthAmount) {
	  this.partialAuthAmount = partialAuthAmount;
	};

	/**
	* Get the field value
	* Amount authorized
	* @memberof remotemessage.PartialAuthMessage
	* @return {Number} must be a long integer
	*/
	PartialAuthMessage.prototype.getPartialAuthAmount = function() {
	  return this.partialAuthAmount;
	};

	PartialAuthMessage._meta_ =  {fields:  {}};
	PartialAuthMessage._meta_._class_ =  PartialAuthMessage;
	PartialAuthMessage._meta_._superMeta_ = remotemessage_Message._meta_;
	PartialAuthMessage._meta_.fields["partialAuthAmount"] = {};
	PartialAuthMessage._meta_.fields["partialAuthAmount"].type = Number;

	//
	// Expose the module.
	//
	if (true) {
	module.exports = PartialAuthMessage;
	}



/***/ }),
/* 1080 */
/***/ (function(module, exports, __webpack_require__) {

	/**
	 * Autogenerated by Avro
	 * 
	 * DO NOT EDIT DIRECTLY
	 */

	var remotemessage_Method = __webpack_require__(2);
	var remotemessage_Message = __webpack_require__(3);
	var payments_Payment = __webpack_require__(11);

	/**
	* @constructor
	* @augments remotemessage.Message
	* @memberof remotemessage
	*/
	var PaymentConfirmedMessage = function() {
	  remotemessage_Message.call(this);
	  this._superClass_ = remotemessage_Message;
	  this._class_ = PaymentConfirmedMessage;
	  this.setMethod(remotemessage_Method["PAYMENT_CONFIRMED"]);
	  this.payment = undefined;
	};

	PaymentConfirmedMessage.prototype = Object.create(remotemessage_Message.prototype);
	PaymentConfirmedMessage.prototype.constructor = PaymentConfirmedMessage;

	/**
	* Set the field value
	* A payment
	*
	* @memberof remotemessage.PaymentConfirmedMessage
	* @param {payments.Payment} payment 
	*/
	PaymentConfirmedMessage.prototype.setPayment = function(payment) {
	  this.payment = payment;
	};

	/**
	* Get the field value
	* A payment
	* @memberof remotemessage.PaymentConfirmedMessage
	* @return {payments.Payment} 
	*/
	PaymentConfirmedMessage.prototype.getPayment = function() {
	  return this.payment;
	};

	PaymentConfirmedMessage._meta_ =  {fields:  {}};
	PaymentConfirmedMessage._meta_._class_ =  PaymentConfirmedMessage;
	PaymentConfirmedMessage._meta_._superMeta_ = remotemessage_Message._meta_;
	PaymentConfirmedMessage._meta_.fields["payment"] = {};
	PaymentConfirmedMessage._meta_.fields["payment"].type = payments_Payment;

	//
	// Expose the module.
	//
	if (true) {
	module.exports = PaymentConfirmedMessage;
	}



/***/ }),
/* 1081 */
/***/ (function(module, exports, __webpack_require__) {

	/**
	 * Autogenerated by Avro
	 * 
	 * DO NOT EDIT DIRECTLY
	 */

	var remotemessage_Method = __webpack_require__(2);
	var remotemessage_Message = __webpack_require__(3);
	var payments_Payment = __webpack_require__(11);

	/**
	* @constructor
	* @augments remotemessage.Message
	* @memberof remotemessage
	*/
	var PaymentPrintMerchantCopyMessage = function() {
	  remotemessage_Message.call(this);
	  this._superClass_ = remotemessage_Message;
	  this._class_ = PaymentPrintMerchantCopyMessage;
	  this.setMethod(remotemessage_Method["PRINT_PAYMENT_MERCHANT_COPY"]);
	  this.payment = undefined;
	};

	PaymentPrintMerchantCopyMessage.prototype = Object.create(remotemessage_Message.prototype);
	PaymentPrintMerchantCopyMessage.prototype.constructor = PaymentPrintMerchantCopyMessage;

	/**
	* Set the field value
	* @memberof remotemessage.PaymentPrintMerchantCopyMessage
	* @param {payments.Payment} payment 
	*/
	PaymentPrintMerchantCopyMessage.prototype.setPayment = function(payment) {
	  this.payment = payment;
	};

	/**
	* Get the field value
	* @memberof remotemessage.PaymentPrintMerchantCopyMessage
	* @return {payments.Payment} 
	*/
	PaymentPrintMerchantCopyMessage.prototype.getPayment = function() {
	  return this.payment;
	};

	PaymentPrintMerchantCopyMessage._meta_ =  {fields:  {}};
	PaymentPrintMerchantCopyMessage._meta_._class_ =  PaymentPrintMerchantCopyMessage;
	PaymentPrintMerchantCopyMessage._meta_._superMeta_ = remotemessage_Message._meta_;
	PaymentPrintMerchantCopyMessage._meta_.fields["payment"] = {};
	PaymentPrintMerchantCopyMessage._meta_.fields["payment"].type = payments_Payment;

	//
	// Expose the module.
	//
	if (true) {
	module.exports = PaymentPrintMerchantCopyMessage;
	}



/***/ }),
/* 1082 */
/***/ (function(module, exports, __webpack_require__) {

	/**
	 * Autogenerated by Avro
	 * 
	 * DO NOT EDIT DIRECTLY
	 */

	var remotemessage_Method = __webpack_require__(2);
	var remotemessage_Message = __webpack_require__(3);
	var payments_Payment = __webpack_require__(11);
	var order_Order = __webpack_require__(68);

	/**
	* @constructor
	* @augments remotemessage.Message
	* @memberof remotemessage
	*/
	var PaymentPrintMessage = function() {
	  remotemessage_Message.call(this);
	  this._superClass_ = remotemessage_Message;
	  this._class_ = PaymentPrintMessage;
	  this.setMethod(remotemessage_Method["PRINT_PAYMENT"]);
	  this.payment = undefined;
	  this.order = undefined;
	};

	PaymentPrintMessage.prototype = Object.create(remotemessage_Message.prototype);
	PaymentPrintMessage.prototype.constructor = PaymentPrintMessage;

	/**
	* Set the field value
	* @memberof remotemessage.PaymentPrintMessage
	* @param {payments.Payment} payment 
	*/
	PaymentPrintMessage.prototype.setPayment = function(payment) {
	  this.payment = payment;
	};

	/**
	* Get the field value
	* @memberof remotemessage.PaymentPrintMessage
	* @return {payments.Payment} 
	*/
	PaymentPrintMessage.prototype.getPayment = function() {
	  return this.payment;
	};

	/**
	* Set the field value
	* @memberof remotemessage.PaymentPrintMessage
	* @param {order.Order} order 
	*/
	PaymentPrintMessage.prototype.setOrder = function(order) {
	  this.order = order;
	};

	/**
	* Get the field value
	* @memberof remotemessage.PaymentPrintMessage
	* @return {order.Order} 
	*/
	PaymentPrintMessage.prototype.getOrder = function() {
	  return this.order;
	};

	PaymentPrintMessage._meta_ =  {fields:  {}};
	PaymentPrintMessage._meta_._class_ =  PaymentPrintMessage;
	PaymentPrintMessage._meta_._superMeta_ = remotemessage_Message._meta_;
	PaymentPrintMessage._meta_.fields["payment"] = {};
	PaymentPrintMessage._meta_.fields["payment"].type = payments_Payment;
	PaymentPrintMessage._meta_.fields["order"] = {};
	PaymentPrintMessage._meta_.fields["order"].type = order_Order;

	//
	// Expose the module.
	//
	if (true) {
	module.exports = PaymentPrintMessage;
	}



/***/ }),
/* 1083 */
/***/ (function(module, exports, __webpack_require__) {

	/**
	 * Autogenerated by Avro
	 * 
	 * DO NOT EDIT DIRECTLY
	 */

	var remotemessage_Method = __webpack_require__(2);
	var order_VoidReason = __webpack_require__(87);
	var remotemessage_Message = __webpack_require__(3);
	var payments_Payment = __webpack_require__(11);

	/**
	* @constructor
	* @augments remotemessage.Message
	* @memberof remotemessage
	*/
	var PaymentRejectedMessage = function() {
	  remotemessage_Message.call(this);
	  this._superClass_ = remotemessage_Message;
	  this._class_ = PaymentRejectedMessage;
	  this.setMethod(remotemessage_Method["PAYMENT_REJECTED"]);
	  this.payment = undefined;
	  this.reason = undefined;
	};

	PaymentRejectedMessage.prototype = Object.create(remotemessage_Message.prototype);
	PaymentRejectedMessage.prototype.constructor = PaymentRejectedMessage;

	/**
	* Set the field value
	* A payment
	*
	* @memberof remotemessage.PaymentRejectedMessage
	* @param {payments.Payment} payment 
	*/
	PaymentRejectedMessage.prototype.setPayment = function(payment) {
	  this.payment = payment;
	};

	/**
	* Get the field value
	* A payment
	* @memberof remotemessage.PaymentRejectedMessage
	* @return {payments.Payment} 
	*/
	PaymentRejectedMessage.prototype.getPayment = function() {
	  return this.payment;
	};

	/**
	* Set the field value
	* The reason the payment is being rejected
	*
	* @memberof remotemessage.PaymentRejectedMessage
	* @param {order.VoidReason} reason 
	*/
	PaymentRejectedMessage.prototype.setReason = function(reason) {
	  this.reason = reason;
	};

	/**
	* Get the field value
	* The reason the payment is being rejected
	* @memberof remotemessage.PaymentRejectedMessage
	* @return {order.VoidReason} 
	*/
	PaymentRejectedMessage.prototype.getReason = function() {
	  return this.reason;
	};

	PaymentRejectedMessage._meta_ =  {fields:  {}};
	PaymentRejectedMessage._meta_._class_ =  PaymentRejectedMessage;
	PaymentRejectedMessage._meta_._superMeta_ = remotemessage_Message._meta_;
	PaymentRejectedMessage._meta_.fields["payment"] = {};
	PaymentRejectedMessage._meta_.fields["payment"].type = payments_Payment;
	PaymentRejectedMessage._meta_.fields["reason"] = {};
	PaymentRejectedMessage._meta_.fields["reason"].type = order_VoidReason;

	//
	// Expose the module.
	//
	if (true) {
	module.exports = PaymentRejectedMessage;
	}



/***/ }),
/* 1084 */
/***/ (function(module, exports, __webpack_require__) {

	/**
	 * Autogenerated by Avro
	 * 
	 * DO NOT EDIT DIRECTLY
	 */

	var remotemessage_Method = __webpack_require__(2);
	var order_VoidReason = __webpack_require__(87);
	var remotemessage_Message = __webpack_require__(3);
	var payments_Payment = __webpack_require__(11);

	/**
	* @constructor
	* @augments remotemessage.Message
	* @memberof remotemessage
	*/
	var PaymentVoidedMessage = function() {
	  remotemessage_Message.call(this);
	  this._superClass_ = remotemessage_Message;
	  this._class_ = PaymentVoidedMessage;
	  this.setMethod(remotemessage_Method["PAYMENT_VOIDED"]);
	  this.payment = undefined;
	  this.voidReason = undefined;
	};

	PaymentVoidedMessage.prototype = Object.create(remotemessage_Message.prototype);
	PaymentVoidedMessage.prototype.constructor = PaymentVoidedMessage;

	/**
	* Set the field value
	* A payment
	*
	* @memberof remotemessage.PaymentVoidedMessage
	* @param {payments.Payment} payment 
	*/
	PaymentVoidedMessage.prototype.setPayment = function(payment) {
	  this.payment = payment;
	};

	/**
	* Get the field value
	* A payment
	* @memberof remotemessage.PaymentVoidedMessage
	* @return {payments.Payment} 
	*/
	PaymentVoidedMessage.prototype.getPayment = function() {
	  return this.payment;
	};

	/**
	* Set the field value
	* @memberof remotemessage.PaymentVoidedMessage
	* @param {order.VoidReason} voidReason 
	*/
	PaymentVoidedMessage.prototype.setVoidReason = function(voidReason) {
	  this.voidReason = voidReason;
	};

	/**
	* Get the field value
	* @memberof remotemessage.PaymentVoidedMessage
	* @return {order.VoidReason} 
	*/
	PaymentVoidedMessage.prototype.getVoidReason = function() {
	  return this.voidReason;
	};

	PaymentVoidedMessage._meta_ =  {fields:  {}};
	PaymentVoidedMessage._meta_._class_ =  PaymentVoidedMessage;
	PaymentVoidedMessage._meta_._superMeta_ = remotemessage_Message._meta_;
	PaymentVoidedMessage._meta_.fields["payment"] = {};
	PaymentVoidedMessage._meta_.fields["payment"].type = payments_Payment;
	PaymentVoidedMessage._meta_.fields["voidReason"] = {};
	PaymentVoidedMessage._meta_.fields["voidReason"].type = order_VoidReason;

	//
	// Expose the module.
	//
	if (true) {
	module.exports = PaymentVoidedMessage;
	}



/***/ }),
/* 1085 */
/***/ (function(module, exports, __webpack_require__) {

	/**
	 * Autogenerated by Avro
	 * 
	 * DO NOT EDIT DIRECTLY
	 */

	var remotemessage_Method = __webpack_require__(2);
	var remotemessage_Message = __webpack_require__(3);

	/** Request to get the status of a print job. */
	/**
	* @constructor
	* @augments remotemessage.Message
	* @memberof remotemessage
	*/
	var PrintJobStatusRequestMessage = function() {
	  remotemessage_Message.call(this);
	  this._superClass_ = remotemessage_Message;
	  this._class_ = PrintJobStatusRequestMessage;
	  this.setMethod(remotemessage_Method["PRINT_JOB_STATUS_REQUEST"]);
	  this.externalPrintJobId = undefined;
	};

	PrintJobStatusRequestMessage.prototype = Object.create(remotemessage_Message.prototype);
	PrintJobStatusRequestMessage.prototype.constructor = PrintJobStatusRequestMessage;

	/**
	* Set the field value
	* External print job ID to retrieve status for
	*
	* @memberof remotemessage.PrintJobStatusRequestMessage
	* @param {String} externalPrintJobId 
	*/
	PrintJobStatusRequestMessage.prototype.setExternalPrintJobId = function(externalPrintJobId) {
	  this.externalPrintJobId = externalPrintJobId;
	};

	/**
	* Get the field value
	* External print job ID to retrieve status for
	* @memberof remotemessage.PrintJobStatusRequestMessage
	* @return {String} 
	*/
	PrintJobStatusRequestMessage.prototype.getExternalPrintJobId = function() {
	  return this.externalPrintJobId;
	};

	PrintJobStatusRequestMessage._meta_ =  {fields:  {}};
	PrintJobStatusRequestMessage._meta_._class_ =  PrintJobStatusRequestMessage;
	PrintJobStatusRequestMessage._meta_._superMeta_ = remotemessage_Message._meta_;
	PrintJobStatusRequestMessage._meta_.fields["externalPrintJobId"] = {};
	PrintJobStatusRequestMessage._meta_.fields["externalPrintJobId"].type = String;

	//
	// Expose the module.
	//
	if (true) {
	module.exports = PrintJobStatusRequestMessage;
	}



/***/ }),
/* 1086 */
/***/ (function(module, exports, __webpack_require__) {

	/**
	 * Autogenerated by Avro
	 * 
	 * DO NOT EDIT DIRECTLY
	 */

	var remotemessage_Method = __webpack_require__(2);
	var printer_PrintJobStatus = __webpack_require__(258);
	var remotemessage_Message = __webpack_require__(3);

	/** contains the status of the requested print job. */
	/**
	* @constructor
	* @augments remotemessage.Message
	* @memberof remotemessage
	*/
	var PrintJobStatusResponseMessage = function() {
	  remotemessage_Message.call(this);
	  this._superClass_ = remotemessage_Message;
	  this._class_ = PrintJobStatusResponseMessage;
	  this.setMethod(remotemessage_Method["PRINT_JOB_STATUS_RESPONSE"]);
	  this.externalPrintJobId = undefined;
	  this.status = undefined;
	};

	PrintJobStatusResponseMessage.prototype = Object.create(remotemessage_Message.prototype);
	PrintJobStatusResponseMessage.prototype.constructor = PrintJobStatusResponseMessage;

	/**
	* Set the field value
	* External print job ID that status was retrieved for
	*
	* @memberof remotemessage.PrintJobStatusResponseMessage
	* @param {String} externalPrintJobId 
	*/
	PrintJobStatusResponseMessage.prototype.setExternalPrintJobId = function(externalPrintJobId) {
	  this.externalPrintJobId = externalPrintJobId;
	};

	/**
	* Get the field value
	* External print job ID that status was retrieved for
	* @memberof remotemessage.PrintJobStatusResponseMessage
	* @return {String} 
	*/
	PrintJobStatusResponseMessage.prototype.getExternalPrintJobId = function() {
	  return this.externalPrintJobId;
	};

	/**
	* Set the field value
	* The current status of the requested print job
	*
	* @memberof remotemessage.PrintJobStatusResponseMessage
	* @param {printer.PrintJobStatus} status 
	*/
	PrintJobStatusResponseMessage.prototype.setStatus = function(status) {
	  this.status = status;
	};

	/**
	* Get the field value
	* The current status of the requested print job
	* @memberof remotemessage.PrintJobStatusResponseMessage
	* @return {printer.PrintJobStatus} 
	*/
	PrintJobStatusResponseMessage.prototype.getStatus = function() {
	  return this.status;
	};

	PrintJobStatusResponseMessage._meta_ =  {fields:  {}};
	PrintJobStatusResponseMessage._meta_._class_ =  PrintJobStatusResponseMessage;
	PrintJobStatusResponseMessage._meta_._superMeta_ = remotemessage_Message._meta_;
	PrintJobStatusResponseMessage._meta_.fields["externalPrintJobId"] = {};
	PrintJobStatusResponseMessage._meta_.fields["externalPrintJobId"].type = String;
	PrintJobStatusResponseMessage._meta_.fields["status"] = {};
	PrintJobStatusResponseMessage._meta_.fields["status"].type = printer_PrintJobStatus;

	//
	// Expose the module.
	//
	if (true) {
	module.exports = PrintJobStatusResponseMessage;
	}



/***/ }),
/* 1087 */
/***/ (function(module, exports, __webpack_require__) {

	/**
	 * Autogenerated by Avro
	 * 
	 * DO NOT EDIT DIRECTLY
	 */

	var remotemessage_QueryStatus = __webpack_require__(263);

	/**
	* @constructor
	* @memberof remotemessage
	*/
	var QueryStatusEnum = function() {
	  this._class_ = QueryStatusEnum;
	  this.queryStatus = undefined;
	};


	/**
	* Set the field value
	* @memberof remotemessage.QueryStatusEnum
	* @param {remotemessage.QueryStatus} queryStatus 
	*/
	QueryStatusEnum.prototype.setQueryStatus = function(queryStatus) {
	  this.queryStatus = queryStatus;
	};

	/**
	* Get the field value
	* @memberof remotemessage.QueryStatusEnum
	* @return {remotemessage.QueryStatus} 
	*/
	QueryStatusEnum.prototype.getQueryStatus = function() {
	  return this.queryStatus;
	};

	/**
	* @memberof remotemessage.QueryStatusEnum
	* @private
	*/
	QueryStatusEnum.prototype.getMetaInfo = function(fieldName) {
	  var curclass = this._class_;
	  do {
	    var fieldMetaInfo = curclass._meta_.fields[fieldName];
	    if(fieldMetaInfo) {
	      return fieldMetaInfo;
	    }
	    if(curclass._meta_._superMeta_) {
	      curclass = curclass._meta_._superMeta_._class_;
	    } else {
	      curclass = null;
	    }
	  } while(curclass);
	  return null;
	};

	QueryStatusEnum.prototype.toString = function() {
	  return JSON.stringify(this);
	};

	QueryStatusEnum._meta_ =  {fields:  {}};
	QueryStatusEnum._meta_._class_ =  QueryStatusEnum;
	QueryStatusEnum._meta_.fields["queryStatus"] = {};
	QueryStatusEnum._meta_.fields["queryStatus"].type = remotemessage_QueryStatus;

	//
	// Expose the module.
	//
	if (true) {
	module.exports = QueryStatusEnum;
	}



/***/ }),
/* 1088 */
/***/ (function(module, exports, __webpack_require__) {

	/**
	 * Autogenerated by Avro
	 * 
	 * DO NOT EDIT DIRECTLY
	 */

	var remotemessage_Method = __webpack_require__(2);
	var remotemessage_Message = __webpack_require__(3);
	var payments_Payment = __webpack_require__(11);
	var order_Order = __webpack_require__(68);
	var payments_Refund = __webpack_require__(26);

	/**
	* @constructor
	* @augments remotemessage.Message
	* @memberof remotemessage
	*/
	var RefundPaymentPrintMessage = function() {
	  remotemessage_Message.call(this);
	  this._superClass_ = remotemessage_Message;
	  this._class_ = RefundPaymentPrintMessage;
	  this.setMethod(remotemessage_Method["REFUND_PRINT_PAYMENT"]);
	  this.payment = undefined;
	  this.order = undefined;
	  this.refund = undefined;
	};

	RefundPaymentPrintMessage.prototype = Object.create(remotemessage_Message.prototype);
	RefundPaymentPrintMessage.prototype.constructor = RefundPaymentPrintMessage;

	/**
	* Set the field value
	* @memberof remotemessage.RefundPaymentPrintMessage
	* @param {payments.Payment} payment 
	*/
	RefundPaymentPrintMessage.prototype.setPayment = function(payment) {
	  this.payment = payment;
	};

	/**
	* Get the field value
	* @memberof remotemessage.RefundPaymentPrintMessage
	* @return {payments.Payment} 
	*/
	RefundPaymentPrintMessage.prototype.getPayment = function() {
	  return this.payment;
	};

	/**
	* Set the field value
	* @memberof remotemessage.RefundPaymentPrintMessage
	* @param {order.Order} order 
	*/
	RefundPaymentPrintMessage.prototype.setOrder = function(order) {
	  this.order = order;
	};

	/**
	* Get the field value
	* @memberof remotemessage.RefundPaymentPrintMessage
	* @return {order.Order} 
	*/
	RefundPaymentPrintMessage.prototype.getOrder = function() {
	  return this.order;
	};

	/**
	* Set the field value
	* @memberof remotemessage.RefundPaymentPrintMessage
	* @param {payments.Refund} refund 
	*/
	RefundPaymentPrintMessage.prototype.setRefund = function(refund) {
	  this.refund = refund;
	};

	/**
	* Get the field value
	* @memberof remotemessage.RefundPaymentPrintMessage
	* @return {payments.Refund} 
	*/
	RefundPaymentPrintMessage.prototype.getRefund = function() {
	  return this.refund;
	};

	RefundPaymentPrintMessage._meta_ =  {fields:  {}};
	RefundPaymentPrintMessage._meta_._class_ =  RefundPaymentPrintMessage;
	RefundPaymentPrintMessage._meta_._superMeta_ = remotemessage_Message._meta_;
	RefundPaymentPrintMessage._meta_.fields["payment"] = {};
	RefundPaymentPrintMessage._meta_.fields["payment"].type = payments_Payment;
	RefundPaymentPrintMessage._meta_.fields["order"] = {};
	RefundPaymentPrintMessage._meta_.fields["order"].type = order_Order;
	RefundPaymentPrintMessage._meta_.fields["refund"] = {};
	RefundPaymentPrintMessage._meta_.fields["refund"].type = payments_Refund;

	//
	// Expose the module.
	//
	if (true) {
	module.exports = RefundPaymentPrintMessage;
	}



/***/ }),
/* 1089 */
/***/ (function(module, exports, __webpack_require__) {

	/**
	 * Autogenerated by Avro
	 * 
	 * DO NOT EDIT DIRECTLY
	 */

	var remotemessage_Method = __webpack_require__(2);
	var remotemessage_Message = __webpack_require__(3);

	/**
	* @constructor
	* @augments remotemessage.Message
	* @memberof remotemessage
	*/
	var RefundRequestMessage = function() {
	  remotemessage_Message.call(this);
	  this._superClass_ = remotemessage_Message;
	  this._class_ = RefundRequestMessage;
	  this.setMethod(remotemessage_Method["REFUND_REQUEST"]);
	  this.fullRefund = undefined;
	  this.amount = undefined;
	  this.orderId = undefined;
	  this.paymentId = undefined;
	  this.disableCloverPrinting = false;
	  this.disableReceiptSelection = false;
	  this.extras = undefined;
	};

	RefundRequestMessage.prototype = Object.create(remotemessage_Message.prototype);
	RefundRequestMessage.prototype.constructor = RefundRequestMessage;

	/**
	* Set the field value
	* If true, then it is a full refund.  The amount will be ignored.
	*
	* @memberof remotemessage.RefundRequestMessage
	* @param {Boolean} fullRefund 
	*/
	RefundRequestMessage.prototype.setFullRefund = function(fullRefund) {
	  this.fullRefund = fullRefund;
	};

	/**
	* Get the field value
	* If true, then it is a full refund.  The amount will be ignored.
	* @memberof remotemessage.RefundRequestMessage
	* @return {Boolean} 
	*/
	RefundRequestMessage.prototype.getFullRefund = function() {
	  return this.fullRefund;
	};

	/**
	* Set the field value
	* Amount of refund.  Used in partial refunds.
	*
	* @memberof remotemessage.RefundRequestMessage
	* @param {Number} amount must be a long integer
	*/
	RefundRequestMessage.prototype.setAmount = function(amount) {
	  this.amount = amount;
	};

	/**
	* Get the field value
	* Amount of refund.  Used in partial refunds.
	* @memberof remotemessage.RefundRequestMessage
	* @return {Number} must be a long integer
	*/
	RefundRequestMessage.prototype.getAmount = function() {
	  return this.amount;
	};

	/**
	* Set the field value
	* Unique identifier for a order
	*
	* @memberof remotemessage.RefundRequestMessage
	* @param {String} orderId 
	*/
	RefundRequestMessage.prototype.setOrderId = function(orderId) {
	  this.orderId = orderId;
	};

	/**
	* Get the field value
	* Unique identifier for a order
	* @memberof remotemessage.RefundRequestMessage
	* @return {String} 
	*/
	RefundRequestMessage.prototype.getOrderId = function() {
	  return this.orderId;
	};

	/**
	* Set the field value
	* Unique identifier for a payment
	*
	* @memberof remotemessage.RefundRequestMessage
	* @param {String} paymentId 
	*/
	RefundRequestMessage.prototype.setPaymentId = function(paymentId) {
	  this.paymentId = paymentId;
	};

	/**
	* Get the field value
	* Unique identifier for a payment
	* @memberof remotemessage.RefundRequestMessage
	* @return {String} 
	*/
	RefundRequestMessage.prototype.getPaymentId = function() {
	  return this.paymentId;
	};

	/**
	* Set the field value
	* @memberof remotemessage.RefundRequestMessage
	* @param {Boolean} disableCloverPrinting 
	*/
	RefundRequestMessage.prototype.setDisableCloverPrinting = function(disableCloverPrinting) {
	  this.disableCloverPrinting = disableCloverPrinting;
	};

	/**
	* Get the field value
	* @memberof remotemessage.RefundRequestMessage
	* @return {Boolean} 
	*/
	RefundRequestMessage.prototype.getDisableCloverPrinting = function() {
	  return this.disableCloverPrinting;
	};

	/**
	* Set the field value
	* @memberof remotemessage.RefundRequestMessage
	* @param {Boolean} disableReceiptSelection 
	*/
	RefundRequestMessage.prototype.setDisableReceiptSelection = function(disableReceiptSelection) {
	  this.disableReceiptSelection = disableReceiptSelection;
	};

	/**
	* Get the field value
	* @memberof remotemessage.RefundRequestMessage
	* @return {Boolean} 
	*/
	RefundRequestMessage.prototype.getDisableReceiptSelection = function() {
	  return this.disableReceiptSelection;
	};

	/**
	* Set the field value
	* Extra data used by external systems.
	*
	* @memberof remotemessage.RefundRequestMessage
	* @param {Object.<String,String>} extras A map of <String> to <>
	*/
	RefundRequestMessage.prototype.setExtras = function(extras) {
	  this.extras = extras;
	};

	/**
	* Get the field value
	* Extra data used by external systems.
	* @memberof remotemessage.RefundRequestMessage
	* @return {Object.<String,String>} A map of <String> to <>
	*/
	RefundRequestMessage.prototype.getExtras = function() {
	  return this.extras;
	};

	RefundRequestMessage._meta_ =  {fields:  {}};
	RefundRequestMessage._meta_._class_ =  RefundRequestMessage;
	RefundRequestMessage._meta_._superMeta_ = remotemessage_Message._meta_;
	RefundRequestMessage._meta_.fields["fullRefund"] = {};
	RefundRequestMessage._meta_.fields["fullRefund"].type = Boolean;
	RefundRequestMessage._meta_.fields["amount"] = {};
	RefundRequestMessage._meta_.fields["amount"].type = Number;
	RefundRequestMessage._meta_.fields["orderId"] = {};
	RefundRequestMessage._meta_.fields["orderId"].type = String;
	RefundRequestMessage._meta_.fields["paymentId"] = {};
	RefundRequestMessage._meta_.fields["paymentId"].type = String;
	RefundRequestMessage._meta_.fields["disableCloverPrinting"] = {};
	RefundRequestMessage._meta_.fields["disableCloverPrinting"].type = Boolean;
	RefundRequestMessage._meta_.fields["disableReceiptSelection"] = {};
	RefundRequestMessage._meta_.fields["disableReceiptSelection"].type = Boolean;
	RefundRequestMessage._meta_.fields["extras"] = {};
	RefundRequestMessage._meta_.fields["extras"].type = Object;

	//
	// Expose the module.
	//
	if (true) {
	module.exports = RefundRequestMessage;
	}



/***/ }),
/* 1090 */
/***/ (function(module, exports, __webpack_require__) {

	/**
	 * Autogenerated by Avro
	 * 
	 * DO NOT EDIT DIRECTLY
	 */

	var remotemessage_Method = __webpack_require__(2);
	var remotemessage_TxState = __webpack_require__(168);
	var remotemessage_Message = __webpack_require__(3);
	var remotemessage_ErrorCode = __webpack_require__(259);
	var payments_Refund = __webpack_require__(26);

	/**
	* @constructor
	* @augments remotemessage.Message
	* @memberof remotemessage
	*/
	var RefundResponseMessage = function() {
	  remotemessage_Message.call(this);
	  this._superClass_ = remotemessage_Message;
	  this._class_ = RefundResponseMessage;
	  this.setMethod(remotemessage_Method["REFUND_RESPONSE"]);
	  this.orderId = undefined;
	  this.paymentId = undefined;
	  this.refund = undefined;
	  this.reason = undefined;
	  this.message = undefined;
	  this.code = undefined;
	};

	RefundResponseMessage.prototype = Object.create(remotemessage_Message.prototype);
	RefundResponseMessage.prototype.constructor = RefundResponseMessage;

	/**
	* Set the field value
	* Unique identifier for a order
	*
	* @memberof remotemessage.RefundResponseMessage
	* @param {String} orderId 
	*/
	RefundResponseMessage.prototype.setOrderId = function(orderId) {
	  this.orderId = orderId;
	};

	/**
	* Get the field value
	* Unique identifier for a order
	* @memberof remotemessage.RefundResponseMessage
	* @return {String} 
	*/
	RefundResponseMessage.prototype.getOrderId = function() {
	  return this.orderId;
	};

	/**
	* Set the field value
	* Unique identifier for a payment
	*
	* @memberof remotemessage.RefundResponseMessage
	* @param {String} paymentId 
	*/
	RefundResponseMessage.prototype.setPaymentId = function(paymentId) {
	  this.paymentId = paymentId;
	};

	/**
	* Get the field value
	* Unique identifier for a payment
	* @memberof remotemessage.RefundResponseMessage
	* @return {String} 
	*/
	RefundResponseMessage.prototype.getPaymentId = function() {
	  return this.paymentId;
	};

	/**
	* Set the field value
	* The refund
	*
	* @memberof remotemessage.RefundResponseMessage
	* @param {payments.Refund} refund 
	*/
	RefundResponseMessage.prototype.setRefund = function(refund) {
	  this.refund = refund;
	};

	/**
	* Get the field value
	* The refund
	* @memberof remotemessage.RefundResponseMessage
	* @return {payments.Refund} 
	*/
	RefundResponseMessage.prototype.getRefund = function() {
	  return this.refund;
	};

	/**
	* Set the field value
	* Detail code if an error is encountered
	*
	* @memberof remotemessage.RefundResponseMessage
	* @param {remotemessage.ErrorCode} reason 
	*/
	RefundResponseMessage.prototype.setReason = function(reason) {
	  this.reason = reason;
	};

	/**
	* Get the field value
	* Detail code if an error is encountered
	* @memberof remotemessage.RefundResponseMessage
	* @return {remotemessage.ErrorCode} 
	*/
	RefundResponseMessage.prototype.getReason = function() {
	  return this.reason;
	};

	/**
	* Set the field value
	* Detail message
	*
	* @memberof remotemessage.RefundResponseMessage
	* @param {String} message 
	*/
	RefundResponseMessage.prototype.setMessage = function(message) {
	  this.message = message;
	};

	/**
	* Get the field value
	* Detail message
	* @memberof remotemessage.RefundResponseMessage
	* @return {String} 
	*/
	RefundResponseMessage.prototype.getMessage = function() {
	  return this.message;
	};

	/**
	* Set the field value
	* Transaction state (success|fail)
	*
	* @memberof remotemessage.RefundResponseMessage
	* @param {remotemessage.TxState} code 
	*/
	RefundResponseMessage.prototype.setCode = function(code) {
	  this.code = code;
	};

	/**
	* Get the field value
	* Transaction state (success|fail)
	* @memberof remotemessage.RefundResponseMessage
	* @return {remotemessage.TxState} 
	*/
	RefundResponseMessage.prototype.getCode = function() {
	  return this.code;
	};

	RefundResponseMessage._meta_ =  {fields:  {}};
	RefundResponseMessage._meta_._class_ =  RefundResponseMessage;
	RefundResponseMessage._meta_._superMeta_ = remotemessage_Message._meta_;
	RefundResponseMessage._meta_.fields["orderId"] = {};
	RefundResponseMessage._meta_.fields["orderId"].type = String;
	RefundResponseMessage._meta_.fields["paymentId"] = {};
	RefundResponseMessage._meta_.fields["paymentId"].type = String;
	RefundResponseMessage._meta_.fields["refund"] = {};
	RefundResponseMessage._meta_.fields["refund"].type = payments_Refund;
	RefundResponseMessage._meta_.fields["reason"] = {};
	RefundResponseMessage._meta_.fields["reason"].type = remotemessage_ErrorCode;
	RefundResponseMessage._meta_.fields["message"] = {};
	RefundResponseMessage._meta_.fields["message"].type = String;
	RefundResponseMessage._meta_.fields["code"] = {};
	RefundResponseMessage._meta_.fields["code"].type = remotemessage_TxState;

	//
	// Expose the module.
	//
	if (true) {
	module.exports = RefundResponseMessage;
	}



/***/ }),
/* 1091 */
/***/ (function(module, exports, __webpack_require__) {

	/**
	 * Autogenerated by Avro
	 * 
	 * DO NOT EDIT DIRECTLY
	 */

	var remotemessage_Method = __webpack_require__(2);
	var loyalty_LoyaltyDataConfig = __webpack_require__(241);
	var remotemessage_Message = __webpack_require__(3);

	/**
	* @constructor
	* @augments remotemessage.Message
	* @memberof remotemessage
	*/
	var RegisterForCustomerProvidedDataMessage = function() {
	  remotemessage_Message.call(this);
	  this._superClass_ = remotemessage_Message;
	  this._class_ = RegisterForCustomerProvidedDataMessage;
	  this.setMethod(remotemessage_Method["REGISTER_FOR_CUST_DATA"]);
	  this.configurations = undefined;
	};

	RegisterForCustomerProvidedDataMessage.prototype = Object.create(remotemessage_Message.prototype);
	RegisterForCustomerProvidedDataMessage.prototype.constructor = RegisterForCustomerProvidedDataMessage;

	/**
	* Set the field value
	* Configurations for the data we want to receive.
	*
	* @memberof remotemessage.RegisterForCustomerProvidedDataMessage
	* @param {Array.<loyalty.LoyaltyDataConfig>} configurations An array of 
	*/
	RegisterForCustomerProvidedDataMessage.prototype.setConfigurations = function(configurations) {
	  this.configurations = configurations;
	};

	/**
	* Get the field value
	* Configurations for the data we want to receive.
	* @memberof remotemessage.RegisterForCustomerProvidedDataMessage
	* @return {Array.<loyalty.LoyaltyDataConfig>} An array of 
	*/
	RegisterForCustomerProvidedDataMessage.prototype.getConfigurations = function() {
	  return this.configurations;
	};

	RegisterForCustomerProvidedDataMessage._meta_ =  {fields:  {}};
	RegisterForCustomerProvidedDataMessage._meta_._class_ =  RegisterForCustomerProvidedDataMessage;
	RegisterForCustomerProvidedDataMessage._meta_._superMeta_ = remotemessage_Message._meta_;
	RegisterForCustomerProvidedDataMessage._meta_.fields["configurations"] = {};
	RegisterForCustomerProvidedDataMessage._meta_.fields["configurations"].type = Array;
	RegisterForCustomerProvidedDataMessage._meta_.fields["configurations"].elementType = loyalty_LoyaltyDataConfig;

	//
	// Expose the module.
	//
	if (true) {
	module.exports = RegisterForCustomerProvidedDataMessage;
	}



/***/ }),
/* 1092 */
/***/ (function(module, exports, __webpack_require__) {

	/**
	 * Autogenerated by Avro
	 * 
	 * DO NOT EDIT DIRECTLY
	 */

	var remotemessage_Method = __webpack_require__(2);
	var remotemessage_Message = __webpack_require__(3);

	/** Errors that are encountered that cannot be recovered from are passed using this class.  This is intended to be used to aid integrators and Clover support in troubleshooting systems integration with devices. */
	/**
	* @constructor
	* @augments remotemessage.Message
	* @memberof remotemessage
	*/
	var RemoteError = function() {
	  remotemessage_Message.call(this);
	  this._superClass_ = remotemessage_Message;
	  this._class_ = RemoteError;
	  this.setMethod(remotemessage_Method["REMOTE_ERROR"]);
	  this.errorDetail = undefined;
	  this.errorMessage = undefined;
	  this.errorCode = undefined;
	};

	RemoteError.prototype = Object.create(remotemessage_Message.prototype);
	RemoteError.prototype.constructor = RemoteError;

	/**
	* Set the field value
	* Detailed information on the error.  This is engineering information for troubleshooting.
	*
	* @memberof remotemessage.RemoteError
	* @param {String|Null} errorDetail 
	*/
	RemoteError.prototype.setErrorDetail = function(errorDetail) {
	  this.errorDetail = errorDetail;
	};

	/**
	* Get the field value
	* Detailed information on the error.  This is engineering information for troubleshooting.
	* @memberof remotemessage.RemoteError
	* @return {String|Null} 
	*/
	RemoteError.prototype.getErrorDetail = function() {
	  return this.errorDetail;
	};

	/**
	* Set the field value
	* A concise description of the error (fixme: the value 13 is suspicious)
	*
	* @memberof remotemessage.RemoteError
	* @param {String} errorMessage 
	*/
	RemoteError.prototype.setErrorMessage = function(errorMessage) {
	  this.errorMessage = errorMessage;
	};

	/**
	* Get the field value
	* A concise description of the error (fixme: the value 13 is suspicious)
	* @memberof remotemessage.RemoteError
	* @return {String} 
	*/
	RemoteError.prototype.getErrorMessage = function() {
	  return this.errorMessage;
	};

	/**
	* Set the field value
	* If available, the code for the error encountered.
	*
	* @memberof remotemessage.RemoteError
	* @param {Number|Null} errorCode must be a long integer, 
	*/
	RemoteError.prototype.setErrorCode = function(errorCode) {
	  this.errorCode = errorCode;
	};

	/**
	* Get the field value
	* If available, the code for the error encountered.
	* @memberof remotemessage.RemoteError
	* @return {Number|Null} must be a long integer, 
	*/
	RemoteError.prototype.getErrorCode = function() {
	  return this.errorCode;
	};

	RemoteError._meta_ =  {fields:  {}};
	RemoteError._meta_._class_ =  RemoteError;
	RemoteError._meta_._superMeta_ = remotemessage_Message._meta_;
	RemoteError._meta_.fields["errorDetail"] = {};
	RemoteError._meta_.fields["errorDetail"].type = String;
	RemoteError._meta_.fields["errorMessage"] = {};
	RemoteError._meta_.fields["errorMessage"].type = String;
	RemoteError._meta_.fields["errorCode"] = {};
	RemoteError._meta_.fields["errorCode"].type = Number;

	//
	// Expose the module.
	//
	if (true) {
	module.exports = RemoteError;
	}



/***/ }),
/* 1093 */
/***/ (function(module, exports, __webpack_require__) {

	/**
	 * Autogenerated by Avro
	 * 
	 * DO NOT EDIT DIRECTLY
	 */

	var remotemessage_Method = __webpack_require__(2);
	var remotemessage_RemoteMessageType = __webpack_require__(478);

	/**
	* @constructor
	* @memberof remotemessage
	*/
	var RemoteMessage = function() {
	  this._class_ = RemoteMessage;
	  this.id = undefined;
	  this.type = undefined;
	  this.packageName = undefined;
	  this.method = undefined;
	  this.payload = undefined;
	  this.remoteSourceSDK = undefined;
	  this.remoteApplicationID = undefined;
	  this.version = undefined;
	  this.fragmentIndex = undefined;
	  this.lastFragment = undefined;
	  this.attachmentEncoding = undefined;
	  this.attachment = undefined;
	  this.attachmentUri = undefined;
	  this.remotePayCompatibilityVersion = undefined;
	};


	/**
	* Set the field value
	* Identifier for the message
	*
	* @memberof remotemessage.RemoteMessage
	* @param {String} id 
	*/
	RemoteMessage.prototype.setId = function(id) {
	  this.id = id;
	};

	/**
	* Get the field value
	* Identifier for the message
	* @memberof remotemessage.RemoteMessage
	* @return {String} 
	*/
	RemoteMessage.prototype.getId = function() {
	  return this.id;
	};

	/**
	* Set the field value
	* @memberof remotemessage.RemoteMessage
	* @param {remotemessage.RemoteMessageType} type 
	*/
	RemoteMessage.prototype.setType = function(type) {
	  this.type = type;
	};

	/**
	* Get the field value
	* @memberof remotemessage.RemoteMessage
	* @return {remotemessage.RemoteMessageType} 
	*/
	RemoteMessage.prototype.getType = function() {
	  return this.type;
	};

	/**
	* Set the field value
	* The package name of the sending Clover api
	*
	* @memberof remotemessage.RemoteMessage
	* @param {String} packageName 
	*/
	RemoteMessage.prototype.setPackageName = function(packageName) {
	  this.packageName = packageName;
	};

	/**
	* Get the field value
	* The package name of the sending Clover api
	* @memberof remotemessage.RemoteMessage
	* @return {String} 
	*/
	RemoteMessage.prototype.getPackageName = function() {
	  return this.packageName;
	};

	/**
	* Set the field value
	* The name of the business message being sent
	*
	* @memberof remotemessage.RemoteMessage
	* @param {remotemessage.Method} method 
	*/
	RemoteMessage.prototype.setMethod = function(method) {
	  this.method = method;
	};

	/**
	* Get the field value
	* The name of the business message being sent
	* @memberof remotemessage.RemoteMessage
	* @return {remotemessage.Method} 
	*/
	RemoteMessage.prototype.getMethod = function() {
	  return this.method;
	};

	/**
	* Set the field value
	* The payload message being sent.  Interpreted based on the method.
	*
	* @memberof remotemessage.RemoteMessage
	* @param {String} payload 
	*/
	RemoteMessage.prototype.setPayload = function(payload) {
	  this.payload = payload;
	};

	/**
	* Get the field value
	* The payload message being sent.  Interpreted based on the method.
	* @memberof remotemessage.RemoteMessage
	* @return {String} 
	*/
	RemoteMessage.prototype.getPayload = function() {
	  return this.payload;
	};

	/**
	* Set the field value
	* The identifier for the source SDK.  This identifies the connector.
	*
	* @memberof remotemessage.RemoteMessage
	* @param {String} remoteSourceSDK 
	*/
	RemoteMessage.prototype.setRemoteSourceSDK = function(remoteSourceSDK) {
	  this.remoteSourceSDK = remoteSourceSDK;
	};

	/**
	* Get the field value
	* The identifier for the source SDK.  This identifies the connector.
	* @memberof remotemessage.RemoteMessage
	* @return {String} 
	*/
	RemoteMessage.prototype.getRemoteSourceSDK = function() {
	  return this.remoteSourceSDK;
	};

	/**
	* Set the field value
	* The identifier for the sending application.  This identifies the app.
	*
	* @memberof remotemessage.RemoteMessage
	* @param {String} remoteApplicationID 
	*/
	RemoteMessage.prototype.setRemoteApplicationID = function(remoteApplicationID) {
	  this.remoteApplicationID = remoteApplicationID;
	};

	/**
	* Get the field value
	* The identifier for the sending application.  This identifies the app.
	* @memberof remotemessage.RemoteMessage
	* @return {String} 
	*/
	RemoteMessage.prototype.getRemoteApplicationID = function() {
	  return this.remoteApplicationID;
	};

	/**
	* Set the field value
	* The Remote Message version.
	*
	* @memberof remotemessage.RemoteMessage
	* @param {Number} version must be an integer
	*/
	RemoteMessage.prototype.setVersion = function(version) {
	  this.version = version;
	};

	/**
	* Get the field value
	* The Remote Message version.
	* @memberof remotemessage.RemoteMessage
	* @return {Number} must be an integer
	*/
	RemoteMessage.prototype.getVersion = function() {
	  return this.version;
	};

	/**
	* Set the field value
	* The order of fragments when message is split for large attachments.
	*
	* @memberof remotemessage.RemoteMessage
	* @param {Number} fragmentIndex must be an integer
	*/
	RemoteMessage.prototype.setFragmentIndex = function(fragmentIndex) {
	  this.fragmentIndex = fragmentIndex;
	};

	/**
	* Get the field value
	* The order of fragments when message is split for large attachments.
	* @memberof remotemessage.RemoteMessage
	* @return {Number} must be an integer
	*/
	RemoteMessage.prototype.getFragmentIndex = function() {
	  return this.fragmentIndex;
	};

	/**
	* Set the field value
	* If this is the final fragment in a series.
	*
	* @memberof remotemessage.RemoteMessage
	* @param {Boolean} lastFragment 
	*/
	RemoteMessage.prototype.setLastFragment = function(lastFragment) {
	  this.lastFragment = lastFragment;
	};

	/**
	* Get the field value
	* If this is the final fragment in a series.
	* @memberof remotemessage.RemoteMessage
	* @return {Boolean} 
	*/
	RemoteMessage.prototype.getLastFragment = function() {
	  return this.lastFragment;
	};

	/**
	* Set the field value
	* The type of encoding used for the attachment, typically BASE64.
	*
	* @memberof remotemessage.RemoteMessage
	* @param {String} attachmentEncoding 
	*/
	RemoteMessage.prototype.setAttachmentEncoding = function(attachmentEncoding) {
	  this.attachmentEncoding = attachmentEncoding;
	};

	/**
	* Get the field value
	* The type of encoding used for the attachment, typically BASE64.
	* @memberof remotemessage.RemoteMessage
	* @return {String} 
	*/
	RemoteMessage.prototype.getAttachmentEncoding = function() {
	  return this.attachmentEncoding;
	};

	/**
	* Set the field value
	* The encoded attachment.
	*
	* @memberof remotemessage.RemoteMessage
	* @param {String} attachment 
	*/
	RemoteMessage.prototype.setAttachment = function(attachment) {
	  this.attachment = attachment;
	};

	/**
	* Get the field value
	* The encoded attachment.
	* @memberof remotemessage.RemoteMessage
	* @return {String} 
	*/
	RemoteMessage.prototype.getAttachment = function() {
	  return this.attachment;
	};

	/**
	* Set the field value
	* The attachment URI.
	*
	* @memberof remotemessage.RemoteMessage
	* @param {String} attachmentUri 
	*/
	RemoteMessage.prototype.setAttachmentUri = function(attachmentUri) {
	  this.attachmentUri = attachmentUri;
	};

	/**
	* Get the field value
	* The attachment URI.
	* @memberof remotemessage.RemoteMessage
	* @return {String} 
	*/
	RemoteMessage.prototype.getAttachmentUri = function() {
	  return this.attachmentUri;
	};

	/**
	* Set the field value
	* This indicates the version of the SDK compatibility to the version of the Pay Display.  This is set to > 1 for 'nextGen' messages
	*
	* @memberof remotemessage.RemoteMessage
	* @param {Number} remotePayCompatibilityVersion must be an integer
	*/
	RemoteMessage.prototype.setRemotePayCompatibilityVersion = function(remotePayCompatibilityVersion) {
	  this.remotePayCompatibilityVersion = remotePayCompatibilityVersion;
	};

	/**
	* Get the field value
	* This indicates the version of the SDK compatibility to the version of the Pay Display.  This is set to > 1 for 'nextGen' messages
	* @memberof remotemessage.RemoteMessage
	* @return {Number} must be an integer
	*/
	RemoteMessage.prototype.getRemotePayCompatibilityVersion = function() {
	  return this.remotePayCompatibilityVersion;
	};

	/**
	* @memberof remotemessage.RemoteMessage
	* @private
	*/
	RemoteMessage.prototype.getMetaInfo = function(fieldName) {
	  var curclass = this._class_;
	  do {
	    var fieldMetaInfo = curclass._meta_.fields[fieldName];
	    if(fieldMetaInfo) {
	      return fieldMetaInfo;
	    }
	    if(curclass._meta_._superMeta_) {
	      curclass = curclass._meta_._superMeta_._class_;
	    } else {
	      curclass = null;
	    }
	  } while(curclass);
	  return null;
	};

	RemoteMessage.prototype.toString = function() {
	  return JSON.stringify(this);
	};

	RemoteMessage._meta_ =  {fields:  {}};
	RemoteMessage._meta_._class_ =  RemoteMessage;
	RemoteMessage._meta_.fields["id"] = {};
	RemoteMessage._meta_.fields["id"].type = String;
	RemoteMessage._meta_.fields["type"] = {};
	RemoteMessage._meta_.fields["type"].type = remotemessage_RemoteMessageType;
	RemoteMessage._meta_.fields["packageName"] = {};
	RemoteMessage._meta_.fields["packageName"].type = String;
	RemoteMessage._meta_.fields["method"] = {};
	RemoteMessage._meta_.fields["method"].type = remotemessage_Method;
	RemoteMessage._meta_.fields["payload"] = {};
	RemoteMessage._meta_.fields["payload"].type = String;
	RemoteMessage._meta_.fields["remoteSourceSDK"] = {};
	RemoteMessage._meta_.fields["remoteSourceSDK"].type = String;
	RemoteMessage._meta_.fields["remoteApplicationID"] = {};
	RemoteMessage._meta_.fields["remoteApplicationID"].type = String;
	RemoteMessage._meta_.fields["version"] = {};
	RemoteMessage._meta_.fields["version"].type = Number;
	RemoteMessage._meta_.fields["fragmentIndex"] = {};
	RemoteMessage._meta_.fields["fragmentIndex"].type = Number;
	RemoteMessage._meta_.fields["lastFragment"] = {};
	RemoteMessage._meta_.fields["lastFragment"].type = Boolean;
	RemoteMessage._meta_.fields["attachmentEncoding"] = {};
	RemoteMessage._meta_.fields["attachmentEncoding"].type = String;
	RemoteMessage._meta_.fields["attachment"] = {};
	RemoteMessage._meta_.fields["attachment"].type = String;
	RemoteMessage._meta_.fields["attachmentUri"] = {};
	RemoteMessage._meta_.fields["attachmentUri"].type = String;
	RemoteMessage._meta_.fields["remotePayCompatibilityVersion"] = {};
	RemoteMessage._meta_.fields["remotePayCompatibilityVersion"].type = Number;

	//
	// Expose the module.
	//
	if (true) {
	module.exports = RemoteMessage;
	}



/***/ }),
/* 1094 */
/***/ (function(module, exports, __webpack_require__) {

	/**
	 * Autogenerated by Avro
	 * 
	 * DO NOT EDIT DIRECTLY
	 */

	var remotemessage_Method = __webpack_require__(2);
	var remotemessage_Message = __webpack_require__(3);
	var merchant_TipSuggestion = __webpack_require__(118);

	/**
	* @constructor
	* @augments remotemessage.Message
	* @memberof remotemessage
	*/
	var RequestTipRequestMessage = function() {
	  remotemessage_Message.call(this);
	  this._superClass_ = remotemessage_Message;
	  this._class_ = RequestTipRequestMessage;
	  this.setMethod(remotemessage_Method["REQUEST_TIP"]);
	  this.tipSuggestions = undefined;
	  this.tippableAmount = undefined;
	};

	RequestTipRequestMessage.prototype = Object.create(remotemessage_Message.prototype);
	RequestTipRequestMessage.prototype.constructor = RequestTipRequestMessage;

	/**
	* Set the field value
	* @memberof remotemessage.RequestTipRequestMessage
	* @param {Array.<merchant.TipSuggestion>} tipSuggestions An array of 
	*/
	RequestTipRequestMessage.prototype.setTipSuggestions = function(tipSuggestions) {
	  this.tipSuggestions = tipSuggestions;
	};

	/**
	* Get the field value
	* @memberof remotemessage.RequestTipRequestMessage
	* @return {Array.<merchant.TipSuggestion>} An array of 
	*/
	RequestTipRequestMessage.prototype.getTipSuggestions = function() {
	  return this.tipSuggestions;
	};

	/**
	* Set the field value
	* @memberof remotemessage.RequestTipRequestMessage
	* @param {Number} tippableAmount must be a long integer
	*/
	RequestTipRequestMessage.prototype.setTippableAmount = function(tippableAmount) {
	  this.tippableAmount = tippableAmount;
	};

	/**
	* Get the field value
	* @memberof remotemessage.RequestTipRequestMessage
	* @return {Number} must be a long integer
	*/
	RequestTipRequestMessage.prototype.getTippableAmount = function() {
	  return this.tippableAmount;
	};

	RequestTipRequestMessage._meta_ =  {fields:  {}};
	RequestTipRequestMessage._meta_._class_ =  RequestTipRequestMessage;
	RequestTipRequestMessage._meta_._superMeta_ = remotemessage_Message._meta_;
	RequestTipRequestMessage._meta_.fields["tipSuggestions"] = {};
	RequestTipRequestMessage._meta_.fields["tipSuggestions"].type = Array;
	RequestTipRequestMessage._meta_.fields["tipSuggestions"].elementType = merchant_TipSuggestion;
	RequestTipRequestMessage._meta_.fields["tippableAmount"] = {};
	RequestTipRequestMessage._meta_.fields["tippableAmount"].type = Number;

	//
	// Expose the module.
	//
	if (true) {
	module.exports = RequestTipRequestMessage;
	}



/***/ }),
/* 1095 */
/***/ (function(module, exports, __webpack_require__) {

	/**
	 * Autogenerated by Avro
	 * 
	 * DO NOT EDIT DIRECTLY
	 */

	var remotemessage_Method = __webpack_require__(2);
	var remotemessage_ResultStatus = __webpack_require__(23);
	var remotemessage_Message = __webpack_require__(3);

	/**
	* @constructor
	* @augments remotemessage.Message
	* @memberof remotemessage
	*/
	var RequestTipResponseMessage = function() {
	  remotemessage_Message.call(this);
	  this._superClass_ = remotemessage_Message;
	  this._class_ = RequestTipResponseMessage;
	  this.setMethod(remotemessage_Method["REQUEST_TIP_RESPONSE"]);
	  this.amount = undefined;
	  this.status = undefined;
	  this.reason = undefined;
	};

	RequestTipResponseMessage.prototype = Object.create(remotemessage_Message.prototype);
	RequestTipResponseMessage.prototype.constructor = RequestTipResponseMessage;

	/**
	* Set the field value
	* @memberof remotemessage.RequestTipResponseMessage
	* @param {Number} amount must be a long integer
	*/
	RequestTipResponseMessage.prototype.setAmount = function(amount) {
	  this.amount = amount;
	};

	/**
	* Get the field value
	* @memberof remotemessage.RequestTipResponseMessage
	* @return {Number} must be a long integer
	*/
	RequestTipResponseMessage.prototype.getAmount = function() {
	  return this.amount;
	};

	/**
	* Set the field value
	* @memberof remotemessage.RequestTipResponseMessage
	* @param {remotemessage.ResultStatus} status 
	*/
	RequestTipResponseMessage.prototype.setStatus = function(status) {
	  this.status = status;
	};

	/**
	* Get the field value
	* @memberof remotemessage.RequestTipResponseMessage
	* @return {remotemessage.ResultStatus} 
	*/
	RequestTipResponseMessage.prototype.getStatus = function() {
	  return this.status;
	};

	/**
	* Set the field value
	* @memberof remotemessage.RequestTipResponseMessage
	* @param {String} reason 
	*/
	RequestTipResponseMessage.prototype.setReason = function(reason) {
	  this.reason = reason;
	};

	/**
	* Get the field value
	* @memberof remotemessage.RequestTipResponseMessage
	* @return {String} 
	*/
	RequestTipResponseMessage.prototype.getReason = function() {
	  return this.reason;
	};

	RequestTipResponseMessage._meta_ =  {fields:  {}};
	RequestTipResponseMessage._meta_._class_ =  RequestTipResponseMessage;
	RequestTipResponseMessage._meta_._superMeta_ = remotemessage_Message._meta_;
	RequestTipResponseMessage._meta_.fields["amount"] = {};
	RequestTipResponseMessage._meta_.fields["amount"].type = Number;
	RequestTipResponseMessage._meta_.fields["status"] = {};
	RequestTipResponseMessage._meta_.fields["status"].type = remotemessage_ResultStatus;
	RequestTipResponseMessage._meta_.fields["reason"] = {};
	RequestTipResponseMessage._meta_.fields["reason"].type = String;

	//
	// Expose the module.
	//
	if (true) {
	module.exports = RequestTipResponseMessage;
	}



/***/ }),
/* 1096 */
/***/ (function(module, exports, __webpack_require__) {

	/**
	 * Autogenerated by Avro
	 * 
	 * DO NOT EDIT DIRECTLY
	 */

	var remotemessage_Method = __webpack_require__(2);
	var remotemessage_ResultStatus = __webpack_require__(23);
	var remotemessage_ExternalDeviceState = __webpack_require__(123);
	var remotemessage_Message = __webpack_require__(3);

	/**
	* @constructor
	* @augments remotemessage.Message
	* @memberof remotemessage
	*/
	var ResetDeviceResponseMessage = function() {
	  remotemessage_Message.call(this);
	  this._superClass_ = remotemessage_Message;
	  this._class_ = ResetDeviceResponseMessage;
	  this.setMethod(remotemessage_Method["RESET_DEVICE_RESPONSE"]);
	  this.reason = undefined;
	  this.status = undefined;
	  this.state = undefined;
	};

	ResetDeviceResponseMessage.prototype = Object.create(remotemessage_Message.prototype);
	ResetDeviceResponseMessage.prototype.constructor = ResetDeviceResponseMessage;

	/**
	* Set the field value
	* May be populated when the operation fails.
	*
	* @memberof remotemessage.ResetDeviceResponseMessage
	* @param {String} reason 
	*/
	ResetDeviceResponseMessage.prototype.setReason = function(reason) {
	  this.reason = reason;
	};

	/**
	* Get the field value
	* May be populated when the operation fails.
	* @memberof remotemessage.ResetDeviceResponseMessage
	* @return {String} 
	*/
	ResetDeviceResponseMessage.prototype.getReason = function() {
	  return this.reason;
	};

	/**
	* Set the field value
	* @memberof remotemessage.ResetDeviceResponseMessage
	* @param {remotemessage.ResultStatus} status 
	*/
	ResetDeviceResponseMessage.prototype.setStatus = function(status) {
	  this.status = status;
	};

	/**
	* Get the field value
	* @memberof remotemessage.ResetDeviceResponseMessage
	* @return {remotemessage.ResultStatus} 
	*/
	ResetDeviceResponseMessage.prototype.getStatus = function() {
	  return this.status;
	};

	/**
	* Set the field value
	* High level state of the connected device.
	*
	* @memberof remotemessage.ResetDeviceResponseMessage
	* @param {remotemessage.ExternalDeviceState} state 
	*/
	ResetDeviceResponseMessage.prototype.setState = function(state) {
	  this.state = state;
	};

	/**
	* Get the field value
	* High level state of the connected device.
	* @memberof remotemessage.ResetDeviceResponseMessage
	* @return {remotemessage.ExternalDeviceState} 
	*/
	ResetDeviceResponseMessage.prototype.getState = function() {
	  return this.state;
	};

	ResetDeviceResponseMessage._meta_ =  {fields:  {}};
	ResetDeviceResponseMessage._meta_._class_ =  ResetDeviceResponseMessage;
	ResetDeviceResponseMessage._meta_._superMeta_ = remotemessage_Message._meta_;
	ResetDeviceResponseMessage._meta_.fields["reason"] = {};
	ResetDeviceResponseMessage._meta_.fields["reason"].type = String;
	ResetDeviceResponseMessage._meta_.fields["status"] = {};
	ResetDeviceResponseMessage._meta_.fields["status"].type = remotemessage_ResultStatus;
	ResetDeviceResponseMessage._meta_.fields["state"] = {};
	ResetDeviceResponseMessage._meta_.fields["state"].type = remotemessage_ExternalDeviceState;

	//
	// Expose the module.
	//
	if (true) {
	module.exports = ResetDeviceResponseMessage;
	}



/***/ }),
/* 1097 */
/***/ (function(module, exports, __webpack_require__) {

	/**
	 * Autogenerated by Avro
	 * 
	 * DO NOT EDIT DIRECTLY
	 */

	var remotemessage_Method = __webpack_require__(2);
	var remotemessage_Message = __webpack_require__(3);

	/**
	* @constructor
	* @augments remotemessage.Message
	* @memberof remotemessage
	*/
	var ResetMessage = function() {
	  remotemessage_Message.call(this);
	  this._superClass_ = remotemessage_Message;
	  this._class_ = ResetMessage;
	  this.setMethod(remotemessage_Method["RESET"]);
	};

	ResetMessage.prototype = Object.create(remotemessage_Message.prototype);
	ResetMessage.prototype.constructor = ResetMessage;

	ResetMessage._meta_ =  {fields:  {}};
	ResetMessage._meta_._class_ =  ResetMessage;
	ResetMessage._meta_._superMeta_ = remotemessage_Message._meta_;

	//
	// Expose the module.
	//
	if (true) {
	module.exports = ResetMessage;
	}



/***/ }),
/* 1098 */
/***/ (function(module, exports, __webpack_require__) {

	/**
	 * Autogenerated by Avro
	 * 
	 * DO NOT EDIT DIRECTLY
	 */

	var remotemessage_ResultStatus = __webpack_require__(23);

	/**
	* @constructor
	* @memberof remotemessage
	*/
	var ResultStatusEnum = function() {
	  this._class_ = ResultStatusEnum;
	  this.status = undefined;
	};


	/**
	* Set the field value
	* @memberof remotemessage.ResultStatusEnum
	* @param {remotemessage.ResultStatus} status 
	*/
	ResultStatusEnum.prototype.setStatus = function(status) {
	  this.status = status;
	};

	/**
	* Get the field value
	* @memberof remotemessage.ResultStatusEnum
	* @return {remotemessage.ResultStatus} 
	*/
	ResultStatusEnum.prototype.getStatus = function() {
	  return this.status;
	};

	/**
	* @memberof remotemessage.ResultStatusEnum
	* @private
	*/
	ResultStatusEnum.prototype.getMetaInfo = function(fieldName) {
	  var curclass = this._class_;
	  do {
	    var fieldMetaInfo = curclass._meta_.fields[fieldName];
	    if(fieldMetaInfo) {
	      return fieldMetaInfo;
	    }
	    if(curclass._meta_._superMeta_) {
	      curclass = curclass._meta_._superMeta_._class_;
	    } else {
	      curclass = null;
	    }
	  } while(curclass);
	  return null;
	};

	ResultStatusEnum.prototype.toString = function() {
	  return JSON.stringify(this);
	};

	ResultStatusEnum._meta_ =  {fields:  {}};
	ResultStatusEnum._meta_._class_ =  ResultStatusEnum;
	ResultStatusEnum._meta_.fields["status"] = {};
	ResultStatusEnum._meta_.fields["status"].type = remotemessage_ResultStatus;

	//
	// Expose the module.
	//
	if (true) {
	module.exports = ResultStatusEnum;
	}



/***/ }),
/* 1099 */
/***/ (function(module, exports, __webpack_require__) {

	/**
	 * Autogenerated by Avro
	 * 
	 * DO NOT EDIT DIRECTLY
	 */

	var remotemessage_Method = __webpack_require__(2);
	var remotemessage_Message = __webpack_require__(3);

	/**
	* @constructor
	* @augments remotemessage.Message
	* @memberof remotemessage
	*/
	var RetrieveCustomActivitiesRequestMessage = function() {
	  remotemessage_Message.call(this);
	  this._superClass_ = remotemessage_Message;
	  this._class_ = RetrieveCustomActivitiesRequestMessage;
	  this.setMethod(remotemessage_Method["RETRIEVE_CUSTOM_ACTIVITIES_REQUEST"]);
	  this.filters = undefined;
	};

	RetrieveCustomActivitiesRequestMessage.prototype = Object.create(remotemessage_Message.prototype);
	RetrieveCustomActivitiesRequestMessage.prototype.constructor = RetrieveCustomActivitiesRequestMessage;

	/**
	* Set the field value
	* List of category names to filter the results on.
	*
	* @memberof remotemessage.RetrieveCustomActivitiesRequestMessage
	* @param {Array.<String>} filters An array of 
	*/
	RetrieveCustomActivitiesRequestMessage.prototype.setFilters = function(filters) {
	  this.filters = filters;
	};

	/**
	* Get the field value
	* List of category names to filter the results on.
	* @memberof remotemessage.RetrieveCustomActivitiesRequestMessage
	* @return {Array.<String>} An array of 
	*/
	RetrieveCustomActivitiesRequestMessage.prototype.getFilters = function() {
	  return this.filters;
	};

	RetrieveCustomActivitiesRequestMessage._meta_ =  {fields:  {}};
	RetrieveCustomActivitiesRequestMessage._meta_._class_ =  RetrieveCustomActivitiesRequestMessage;
	RetrieveCustomActivitiesRequestMessage._meta_._superMeta_ = remotemessage_Message._meta_;
	RetrieveCustomActivitiesRequestMessage._meta_.fields["filters"] = {};
	RetrieveCustomActivitiesRequestMessage._meta_.fields["filters"].type = Array;

	//
	// Expose the module.
	//
	if (true) {
	module.exports = RetrieveCustomActivitiesRequestMessage;
	}



/***/ }),
/* 1100 */
/***/ (function(module, exports, __webpack_require__) {

	/**
	 * Autogenerated by Avro
	 * 
	 * DO NOT EDIT DIRECTLY
	 */

	var remotemessage_Method = __webpack_require__(2);
	var custom_CustomActivity = __webpack_require__(932);
	var remotemessage_Message = __webpack_require__(3);

	/**
	* @constructor
	* @augments remotemessage.Message
	* @memberof remotemessage
	*/
	var RetrieveCustomActivitiesResponseMessage = function() {
	  remotemessage_Message.call(this);
	  this._superClass_ = remotemessage_Message;
	  this._class_ = RetrieveCustomActivitiesResponseMessage;
	  this.setMethod(remotemessage_Method["RETRIEVE_CUSTOM_ACTIVITIES_RESPONSE"]);
	  this.activities = undefined;
	};

	RetrieveCustomActivitiesResponseMessage.prototype = Object.create(remotemessage_Message.prototype);
	RetrieveCustomActivitiesResponseMessage.prototype.constructor = RetrieveCustomActivitiesResponseMessage;

	/**
	* Set the field value
	* Custom activities that met the request filtering requirements.
	*
	* @memberof remotemessage.RetrieveCustomActivitiesResponseMessage
	* @param {Array.<custom.CustomActivity>} activities An array of 
	*/
	RetrieveCustomActivitiesResponseMessage.prototype.setActivities = function(activities) {
	  this.activities = activities;
	};

	/**
	* Get the field value
	* Custom activities that met the request filtering requirements.
	* @memberof remotemessage.RetrieveCustomActivitiesResponseMessage
	* @return {Array.<custom.CustomActivity>} An array of 
	*/
	RetrieveCustomActivitiesResponseMessage.prototype.getActivities = function() {
	  return this.activities;
	};

	RetrieveCustomActivitiesResponseMessage._meta_ =  {fields:  {}};
	RetrieveCustomActivitiesResponseMessage._meta_._class_ =  RetrieveCustomActivitiesResponseMessage;
	RetrieveCustomActivitiesResponseMessage._meta_._superMeta_ = remotemessage_Message._meta_;
	RetrieveCustomActivitiesResponseMessage._meta_.fields["activities"] = {};
	RetrieveCustomActivitiesResponseMessage._meta_.fields["activities"].type = Array;
	RetrieveCustomActivitiesResponseMessage._meta_.fields["activities"].elementType = custom_CustomActivity;

	//
	// Expose the module.
	//
	if (true) {
	module.exports = RetrieveCustomActivitiesResponseMessage;
	}



/***/ }),
/* 1101 */
/***/ (function(module, exports, __webpack_require__) {

	/**
	 * Autogenerated by Avro
	 * 
	 * DO NOT EDIT DIRECTLY
	 */

	var remotemessage_Method = __webpack_require__(2);
	var remotemessage_Message = __webpack_require__(3);

	/**
	* @constructor
	* @augments remotemessage.Message
	* @memberof remotemessage
	*/
	var RetrieveDeviceStatusRequestMessage = function() {
	  remotemessage_Message.call(this);
	  this._superClass_ = remotemessage_Message;
	  this._class_ = RetrieveDeviceStatusRequestMessage;
	  this.setMethod(remotemessage_Method["RETRIEVE_DEVICE_STATUS_REQUEST"]);
	  this.sendLastMessage = false;
	};

	RetrieveDeviceStatusRequestMessage.prototype = Object.create(remotemessage_Message.prototype);
	RetrieveDeviceStatusRequestMessage.prototype.constructor = RetrieveDeviceStatusRequestMessage;

	/**
	* Set the field value
	* Send last message, if true
	*
	* @memberof remotemessage.RetrieveDeviceStatusRequestMessage
	* @param {Boolean} sendLastMessage 
	*/
	RetrieveDeviceStatusRequestMessage.prototype.setSendLastMessage = function(sendLastMessage) {
	  this.sendLastMessage = sendLastMessage;
	};

	/**
	* Get the field value
	* Send last message, if true
	* @memberof remotemessage.RetrieveDeviceStatusRequestMessage
	* @return {Boolean} 
	*/
	RetrieveDeviceStatusRequestMessage.prototype.getSendLastMessage = function() {
	  return this.sendLastMessage;
	};

	RetrieveDeviceStatusRequestMessage._meta_ =  {fields:  {}};
	RetrieveDeviceStatusRequestMessage._meta_._class_ =  RetrieveDeviceStatusRequestMessage;
	RetrieveDeviceStatusRequestMessage._meta_._superMeta_ = remotemessage_Message._meta_;
	RetrieveDeviceStatusRequestMessage._meta_.fields["sendLastMessage"] = {};
	RetrieveDeviceStatusRequestMessage._meta_.fields["sendLastMessage"].type = Boolean;

	//
	// Expose the module.
	//
	if (true) {
	module.exports = RetrieveDeviceStatusRequestMessage;
	}



/***/ }),
/* 1102 */
/***/ (function(module, exports, __webpack_require__) {

	/**
	 * Autogenerated by Avro
	 * 
	 * DO NOT EDIT DIRECTLY
	 */

	var remotemessage_Method = __webpack_require__(2);
	var remotemessage_ResultStatus = __webpack_require__(23);
	var remotemessage_ExternalDeviceSubState = __webpack_require__(261);
	var remotemessage_ExternalDeviceState = __webpack_require__(123);
	var remotemessage_Message = __webpack_require__(3);
	var remotemessage_ExternalDeviceStateData = __webpack_require__(260);

	/**
	* @constructor
	* @augments remotemessage.Message
	* @memberof remotemessage
	*/
	var RetrieveDeviceStatusResponseMessage = function() {
	  remotemessage_Message.call(this);
	  this._superClass_ = remotemessage_Message;
	  this._class_ = RetrieveDeviceStatusResponseMessage;
	  this.setMethod(remotemessage_Method["RETRIEVE_DEVICE_STATUS_RESPONSE"]);
	  this.reason = undefined;
	  this.status = undefined;
	  this.state = undefined;
	  this.substate = undefined;
	  this.data = undefined;
	};

	RetrieveDeviceStatusResponseMessage.prototype = Object.create(remotemessage_Message.prototype);
	RetrieveDeviceStatusResponseMessage.prototype.constructor = RetrieveDeviceStatusResponseMessage;

	/**
	* Set the field value
	* May be populated when the operation fails.
	*
	* @memberof remotemessage.RetrieveDeviceStatusResponseMessage
	* @param {String} reason 
	*/
	RetrieveDeviceStatusResponseMessage.prototype.setReason = function(reason) {
	  this.reason = reason;
	};

	/**
	* Get the field value
	* May be populated when the operation fails.
	* @memberof remotemessage.RetrieveDeviceStatusResponseMessage
	* @return {String} 
	*/
	RetrieveDeviceStatusResponseMessage.prototype.getReason = function() {
	  return this.reason;
	};

	/**
	* Set the field value
	* @memberof remotemessage.RetrieveDeviceStatusResponseMessage
	* @param {remotemessage.ResultStatus} status 
	*/
	RetrieveDeviceStatusResponseMessage.prototype.setStatus = function(status) {
	  this.status = status;
	};

	/**
	* Get the field value
	* @memberof remotemessage.RetrieveDeviceStatusResponseMessage
	* @return {remotemessage.ResultStatus} 
	*/
	RetrieveDeviceStatusResponseMessage.prototype.getStatus = function() {
	  return this.status;
	};

	/**
	* Set the field value
	* High level state of the connected device.
	*
	* @memberof remotemessage.RetrieveDeviceStatusResponseMessage
	* @param {remotemessage.ExternalDeviceState} state 
	*/
	RetrieveDeviceStatusResponseMessage.prototype.setState = function(state) {
	  this.state = state;
	};

	/**
	* Get the field value
	* High level state of the connected device.
	* @memberof remotemessage.RetrieveDeviceStatusResponseMessage
	* @return {remotemessage.ExternalDeviceState} 
	*/
	RetrieveDeviceStatusResponseMessage.prototype.getState = function() {
	  return this.state;
	};

	/**
	* Set the field value
	* Substate of the connected device.
	*
	* @memberof remotemessage.RetrieveDeviceStatusResponseMessage
	* @param {remotemessage.ExternalDeviceSubState} substate 
	*/
	RetrieveDeviceStatusResponseMessage.prototype.setSubstate = function(substate) {
	  this.substate = substate;
	};

	/**
	* Get the field value
	* Substate of the connected device.
	* @memberof remotemessage.RetrieveDeviceStatusResponseMessage
	* @return {remotemessage.ExternalDeviceSubState} 
	*/
	RetrieveDeviceStatusResponseMessage.prototype.getSubstate = function() {
	  return this.substate;
	};

	/**
	* Set the field value
	* Additional data elements supplementing the state of the connected device.
	*
	* @memberof remotemessage.RetrieveDeviceStatusResponseMessage
	* @param {remotemessage.ExternalDeviceStateData} data 
	*/
	RetrieveDeviceStatusResponseMessage.prototype.setData = function(data) {
	  this.data = data;
	};

	/**
	* Get the field value
	* Additional data elements supplementing the state of the connected device.
	* @memberof remotemessage.RetrieveDeviceStatusResponseMessage
	* @return {remotemessage.ExternalDeviceStateData} 
	*/
	RetrieveDeviceStatusResponseMessage.prototype.getData = function() {
	  return this.data;
	};

	RetrieveDeviceStatusResponseMessage._meta_ =  {fields:  {}};
	RetrieveDeviceStatusResponseMessage._meta_._class_ =  RetrieveDeviceStatusResponseMessage;
	RetrieveDeviceStatusResponseMessage._meta_._superMeta_ = remotemessage_Message._meta_;
	RetrieveDeviceStatusResponseMessage._meta_.fields["reason"] = {};
	RetrieveDeviceStatusResponseMessage._meta_.fields["reason"].type = String;
	RetrieveDeviceStatusResponseMessage._meta_.fields["status"] = {};
	RetrieveDeviceStatusResponseMessage._meta_.fields["status"].type = remotemessage_ResultStatus;
	RetrieveDeviceStatusResponseMessage._meta_.fields["state"] = {};
	RetrieveDeviceStatusResponseMessage._meta_.fields["state"].type = remotemessage_ExternalDeviceState;
	RetrieveDeviceStatusResponseMessage._meta_.fields["substate"] = {};
	RetrieveDeviceStatusResponseMessage._meta_.fields["substate"].type = remotemessage_ExternalDeviceSubState;
	RetrieveDeviceStatusResponseMessage._meta_.fields["data"] = {};
	RetrieveDeviceStatusResponseMessage._meta_.fields["data"].type = remotemessage_ExternalDeviceStateData;

	//
	// Expose the module.
	//
	if (true) {
	module.exports = RetrieveDeviceStatusResponseMessage;
	}



/***/ }),
/* 1103 */
/***/ (function(module, exports, __webpack_require__) {

	/**
	 * Autogenerated by Avro
	 * 
	 * DO NOT EDIT DIRECTLY
	 */

	var remotemessage_Method = __webpack_require__(2);
	var remotemessage_Message = __webpack_require__(3);

	/** Request to retrieve a payment made to a specific device. */
	/**
	* @constructor
	* @augments remotemessage.Message
	* @memberof remotemessage
	*/
	var RetrievePaymentRequestMessage = function() {
	  remotemessage_Message.call(this);
	  this._superClass_ = remotemessage_Message;
	  this._class_ = RetrievePaymentRequestMessage;
	  this.setMethod(remotemessage_Method["RETRIEVE_PAYMENT_REQUEST"]);
	  this.externalPaymentId = undefined;
	};

	RetrievePaymentRequestMessage.prototype = Object.create(remotemessage_Message.prototype);
	RetrievePaymentRequestMessage.prototype.constructor = RetrievePaymentRequestMessage;

	/**
	* Set the field value
	* The externalPaymentId used when a payment was created
	*
	* @memberof remotemessage.RetrievePaymentRequestMessage
	* @param {String} externalPaymentId 
	*/
	RetrievePaymentRequestMessage.prototype.setExternalPaymentId = function(externalPaymentId) {
	  this.externalPaymentId = externalPaymentId;
	};

	/**
	* Get the field value
	* The externalPaymentId used when a payment was created
	* @memberof remotemessage.RetrievePaymentRequestMessage
	* @return {String} 
	*/
	RetrievePaymentRequestMessage.prototype.getExternalPaymentId = function() {
	  return this.externalPaymentId;
	};

	RetrievePaymentRequestMessage._meta_ =  {fields:  {}};
	RetrievePaymentRequestMessage._meta_._class_ =  RetrievePaymentRequestMessage;
	RetrievePaymentRequestMessage._meta_._superMeta_ = remotemessage_Message._meta_;
	RetrievePaymentRequestMessage._meta_.fields["externalPaymentId"] = {};
	RetrievePaymentRequestMessage._meta_.fields["externalPaymentId"].type = String;

	//
	// Expose the module.
	//
	if (true) {
	module.exports = RetrievePaymentRequestMessage;
	}



/***/ }),
/* 1104 */
/***/ (function(module, exports, __webpack_require__) {

	/**
	 * Autogenerated by Avro
	 * 
	 * DO NOT EDIT DIRECTLY
	 */

	var remotemessage_Method = __webpack_require__(2);
	var remotemessage_ResultStatus = __webpack_require__(23);
	var remotemessage_Message = __webpack_require__(3);
	var payments_Payment = __webpack_require__(11);
	var remotemessage_QueryStatus = __webpack_require__(263);

	/**
	* @constructor
	* @augments remotemessage.Message
	* @memberof remotemessage
	*/
	var RetrievePaymentResponseMessage = function() {
	  remotemessage_Message.call(this);
	  this._superClass_ = remotemessage_Message;
	  this._class_ = RetrievePaymentResponseMessage;
	  this.setMethod(remotemessage_Method["RETRIEVE_PAYMENT_RESPONSE"]);
	  this.status = undefined;
	  this.reason = undefined;
	  this.externalPaymentId = undefined;
	  this.queryStatus = undefined;
	  this.message = undefined;
	  this.payment = undefined;
	};

	RetrievePaymentResponseMessage.prototype = Object.create(remotemessage_Message.prototype);
	RetrievePaymentResponseMessage.prototype.constructor = RetrievePaymentResponseMessage;

	/**
	* Set the field value
	* The status of the request.
	*
	* @memberof remotemessage.RetrievePaymentResponseMessage
	* @param {remotemessage.ResultStatus} status 
	*/
	RetrievePaymentResponseMessage.prototype.setStatus = function(status) {
	  this.status = status;
	};

	/**
	* Get the field value
	* The status of the request.
	* @memberof remotemessage.RetrievePaymentResponseMessage
	* @return {remotemessage.ResultStatus} 
	*/
	RetrievePaymentResponseMessage.prototype.getStatus = function() {
	  return this.status;
	};

	/**
	* Set the field value
	* May be populated when the operation fails.
	*
	* @memberof remotemessage.RetrievePaymentResponseMessage
	* @param {String} reason 
	*/
	RetrievePaymentResponseMessage.prototype.setReason = function(reason) {
	  this.reason = reason;
	};

	/**
	* Get the field value
	* May be populated when the operation fails.
	* @memberof remotemessage.RetrievePaymentResponseMessage
	* @return {String} 
	*/
	RetrievePaymentResponseMessage.prototype.getReason = function() {
	  return this.reason;
	};

	/**
	* Set the field value
	* The externalPaymentId used when a payment was created
	*
	* @memberof remotemessage.RetrievePaymentResponseMessage
	* @param {String} externalPaymentId 
	*/
	RetrievePaymentResponseMessage.prototype.setExternalPaymentId = function(externalPaymentId) {
	  this.externalPaymentId = externalPaymentId;
	};

	/**
	* Get the field value
	* The externalPaymentId used when a payment was created
	* @memberof remotemessage.RetrievePaymentResponseMessage
	* @return {String} 
	*/
	RetrievePaymentResponseMessage.prototype.getExternalPaymentId = function() {
	  return this.externalPaymentId;
	};

	/**
	* Set the field value
	* The status of the query
	*
	* @memberof remotemessage.RetrievePaymentResponseMessage
	* @param {remotemessage.QueryStatus} queryStatus 
	*/
	RetrievePaymentResponseMessage.prototype.setQueryStatus = function(queryStatus) {
	  this.queryStatus = queryStatus;
	};

	/**
	* Get the field value
	* The status of the query
	* @memberof remotemessage.RetrievePaymentResponseMessage
	* @return {remotemessage.QueryStatus} 
	*/
	RetrievePaymentResponseMessage.prototype.getQueryStatus = function() {
	  return this.queryStatus;
	};

	/**
	* Set the field value
	* @memberof remotemessage.RetrievePaymentResponseMessage
	* @param {String} message 
	*/
	RetrievePaymentResponseMessage.prototype.setMessage = function(message) {
	  this.message = message;
	};

	/**
	* Get the field value
	* @memberof remotemessage.RetrievePaymentResponseMessage
	* @return {String} 
	*/
	RetrievePaymentResponseMessage.prototype.getMessage = function() {
	  return this.message;
	};

	/**
	* Set the field value
	* Payment information
	*
	* @memberof remotemessage.RetrievePaymentResponseMessage
	* @param {payments.Payment} payment 
	*/
	RetrievePaymentResponseMessage.prototype.setPayment = function(payment) {
	  this.payment = payment;
	};

	/**
	* Get the field value
	* Payment information
	* @memberof remotemessage.RetrievePaymentResponseMessage
	* @return {payments.Payment} 
	*/
	RetrievePaymentResponseMessage.prototype.getPayment = function() {
	  return this.payment;
	};

	RetrievePaymentResponseMessage._meta_ =  {fields:  {}};
	RetrievePaymentResponseMessage._meta_._class_ =  RetrievePaymentResponseMessage;
	RetrievePaymentResponseMessage._meta_._superMeta_ = remotemessage_Message._meta_;
	RetrievePaymentResponseMessage._meta_.fields["status"] = {};
	RetrievePaymentResponseMessage._meta_.fields["status"].type = remotemessage_ResultStatus;
	RetrievePaymentResponseMessage._meta_.fields["reason"] = {};
	RetrievePaymentResponseMessage._meta_.fields["reason"].type = String;
	RetrievePaymentResponseMessage._meta_.fields["externalPaymentId"] = {};
	RetrievePaymentResponseMessage._meta_.fields["externalPaymentId"].type = String;
	RetrievePaymentResponseMessage._meta_.fields["queryStatus"] = {};
	RetrievePaymentResponseMessage._meta_.fields["queryStatus"].type = remotemessage_QueryStatus;
	RetrievePaymentResponseMessage._meta_.fields["message"] = {};
	RetrievePaymentResponseMessage._meta_.fields["message"].type = String;
	RetrievePaymentResponseMessage._meta_.fields["payment"] = {};
	RetrievePaymentResponseMessage._meta_.fields["payment"].type = payments_Payment;

	//
	// Expose the module.
	//
	if (true) {
	module.exports = RetrievePaymentResponseMessage;
	}



/***/ }),
/* 1105 */
/***/ (function(module, exports, __webpack_require__) {

	/**
	 * Autogenerated by Avro
	 * 
	 * DO NOT EDIT DIRECTLY
	 */

	var remotemessage_Method = __webpack_require__(2);
	var remotemessage_Message = __webpack_require__(3);

	/**
	* @constructor
	* @augments remotemessage.Message
	* @memberof remotemessage
	*/
	var RetrievePendingPaymentsMessage = function() {
	  remotemessage_Message.call(this);
	  this._superClass_ = remotemessage_Message;
	  this._class_ = RetrievePendingPaymentsMessage;
	  this.setMethod(remotemessage_Method["RETRIEVE_PENDING_PAYMENTS"]);
	};

	RetrievePendingPaymentsMessage.prototype = Object.create(remotemessage_Message.prototype);
	RetrievePendingPaymentsMessage.prototype.constructor = RetrievePendingPaymentsMessage;

	RetrievePendingPaymentsMessage._meta_ =  {fields:  {}};
	RetrievePendingPaymentsMessage._meta_._class_ =  RetrievePendingPaymentsMessage;
	RetrievePendingPaymentsMessage._meta_._superMeta_ = remotemessage_Message._meta_;

	//
	// Expose the module.
	//
	if (true) {
	module.exports = RetrievePendingPaymentsMessage;
	}



/***/ }),
/* 1106 */
/***/ (function(module, exports, __webpack_require__) {

	/**
	 * Autogenerated by Avro
	 * 
	 * DO NOT EDIT DIRECTLY
	 */

	var remotemessage_Method = __webpack_require__(2);
	var remotemessage_ResultStatus = __webpack_require__(23);
	var base_PendingPaymentEntry = __webpack_require__(236);
	var remotemessage_Message = __webpack_require__(3);

	/**
	* @constructor
	* @augments remotemessage.Message
	* @memberof remotemessage
	*/
	var RetrievePendingPaymentsResponseMessage = function() {
	  remotemessage_Message.call(this);
	  this._superClass_ = remotemessage_Message;
	  this._class_ = RetrievePendingPaymentsResponseMessage;
	  this.setMethod(remotemessage_Method["RETRIEVE_PENDING_PAYMENTS_RESPONSE"]);
	  this.status = undefined;
	  this.pendingPaymentEntries = undefined;
	  this.reason = undefined;
	};

	RetrievePendingPaymentsResponseMessage.prototype = Object.create(remotemessage_Message.prototype);
	RetrievePendingPaymentsResponseMessage.prototype.constructor = RetrievePendingPaymentsResponseMessage;

	/**
	* Set the field value
	* The status of the result
	*
	* @memberof remotemessage.RetrievePendingPaymentsResponseMessage
	* @param {remotemessage.ResultStatus} status 
	*/
	RetrievePendingPaymentsResponseMessage.prototype.setStatus = function(status) {
	  this.status = status;
	};

	/**
	* Get the field value
	* The status of the result
	* @memberof remotemessage.RetrievePendingPaymentsResponseMessage
	* @return {remotemessage.ResultStatus} 
	*/
	RetrievePendingPaymentsResponseMessage.prototype.getStatus = function() {
	  return this.status;
	};

	/**
	* Set the field value
	* The pending payments.
	*
	* @memberof remotemessage.RetrievePendingPaymentsResponseMessage
	* @param {Array.<base.PendingPaymentEntry>} pendingPaymentEntries An array of 
	*/
	RetrievePendingPaymentsResponseMessage.prototype.setPendingPaymentEntries = function(pendingPaymentEntries) {
	  this.pendingPaymentEntries = pendingPaymentEntries;
	};

	/**
	* Get the field value
	* The pending payments.
	* @memberof remotemessage.RetrievePendingPaymentsResponseMessage
	* @return {Array.<base.PendingPaymentEntry>} An array of 
	*/
	RetrievePendingPaymentsResponseMessage.prototype.getPendingPaymentEntries = function() {
	  return this.pendingPaymentEntries;
	};

	/**
	* Set the field value
	* May be populated when the operation fails.
	*
	* @memberof remotemessage.RetrievePendingPaymentsResponseMessage
	* @param {String} reason 
	*/
	RetrievePendingPaymentsResponseMessage.prototype.setReason = function(reason) {
	  this.reason = reason;
	};

	/**
	* Get the field value
	* May be populated when the operation fails.
	* @memberof remotemessage.RetrievePendingPaymentsResponseMessage
	* @return {String} 
	*/
	RetrievePendingPaymentsResponseMessage.prototype.getReason = function() {
	  return this.reason;
	};

	RetrievePendingPaymentsResponseMessage._meta_ =  {fields:  {}};
	RetrievePendingPaymentsResponseMessage._meta_._class_ =  RetrievePendingPaymentsResponseMessage;
	RetrievePendingPaymentsResponseMessage._meta_._superMeta_ = remotemessage_Message._meta_;
	RetrievePendingPaymentsResponseMessage._meta_.fields["status"] = {};
	RetrievePendingPaymentsResponseMessage._meta_.fields["status"].type = remotemessage_ResultStatus;
	RetrievePendingPaymentsResponseMessage._meta_.fields["pendingPaymentEntries"] = {};
	RetrievePendingPaymentsResponseMessage._meta_.fields["pendingPaymentEntries"].type = Array;
	RetrievePendingPaymentsResponseMessage._meta_.fields["pendingPaymentEntries"].elementType = base_PendingPaymentEntry;
	RetrievePendingPaymentsResponseMessage._meta_.fields["reason"] = {};
	RetrievePendingPaymentsResponseMessage._meta_.fields["reason"].type = String;

	//
	// Expose the module.
	//
	if (true) {
	module.exports = RetrievePendingPaymentsResponseMessage;
	}



/***/ }),
/* 1107 */
/***/ (function(module, exports, __webpack_require__) {

	/**
	 * Autogenerated by Avro
	 * 
	 * DO NOT EDIT DIRECTLY
	 */

	var remotemessage_Method = __webpack_require__(2);
	var remotemessage_Message = __webpack_require__(3);

	/**
	* @constructor
	* @augments remotemessage.Message
	* @memberof remotemessage
	*/
	var ShowPaymentReceiptOptionsMessage = function() {
	  remotemessage_Message.call(this);
	  this._superClass_ = remotemessage_Message;
	  this._class_ = ShowPaymentReceiptOptionsMessage;
	  this.setMethod(remotemessage_Method["SHOW_PAYMENT_RECEIPT_OPTIONS"]);
	  this.orderId = undefined;
	  this.paymentId = undefined;
	  this.disableCloverPrinting = false;
	};

	ShowPaymentReceiptOptionsMessage.prototype = Object.create(remotemessage_Message.prototype);
	ShowPaymentReceiptOptionsMessage.prototype.constructor = ShowPaymentReceiptOptionsMessage;

	/**
	* Set the field value
	* Unique identifier for a order
	*
	* @memberof remotemessage.ShowPaymentReceiptOptionsMessage
	* @param {String} orderId 
	*/
	ShowPaymentReceiptOptionsMessage.prototype.setOrderId = function(orderId) {
	  this.orderId = orderId;
	};

	/**
	* Get the field value
	* Unique identifier for a order
	* @memberof remotemessage.ShowPaymentReceiptOptionsMessage
	* @return {String} 
	*/
	ShowPaymentReceiptOptionsMessage.prototype.getOrderId = function() {
	  return this.orderId;
	};

	/**
	* Set the field value
	* Unique identifier for a payment
	*
	* @memberof remotemessage.ShowPaymentReceiptOptionsMessage
	* @param {String} paymentId 
	*/
	ShowPaymentReceiptOptionsMessage.prototype.setPaymentId = function(paymentId) {
	  this.paymentId = paymentId;
	};

	/**
	* Get the field value
	* Unique identifier for a payment
	* @memberof remotemessage.ShowPaymentReceiptOptionsMessage
	* @return {String} 
	*/
	ShowPaymentReceiptOptionsMessage.prototype.getPaymentId = function() {
	  return this.paymentId;
	};

	/**
	* Set the field value
	* @memberof remotemessage.ShowPaymentReceiptOptionsMessage
	* @param {Boolean} disableCloverPrinting 
	*/
	ShowPaymentReceiptOptionsMessage.prototype.setDisableCloverPrinting = function(disableCloverPrinting) {
	  this.disableCloverPrinting = disableCloverPrinting;
	};

	/**
	* Get the field value
	* @memberof remotemessage.ShowPaymentReceiptOptionsMessage
	* @return {Boolean} 
	*/
	ShowPaymentReceiptOptionsMessage.prototype.getDisableCloverPrinting = function() {
	  return this.disableCloverPrinting;
	};

	ShowPaymentReceiptOptionsMessage._meta_ =  {fields:  {}};
	ShowPaymentReceiptOptionsMessage._meta_._class_ =  ShowPaymentReceiptOptionsMessage;
	ShowPaymentReceiptOptionsMessage._meta_._superMeta_ = remotemessage_Message._meta_;
	ShowPaymentReceiptOptionsMessage._meta_.fields["orderId"] = {};
	ShowPaymentReceiptOptionsMessage._meta_.fields["orderId"].type = String;
	ShowPaymentReceiptOptionsMessage._meta_.fields["paymentId"] = {};
	ShowPaymentReceiptOptionsMessage._meta_.fields["paymentId"].type = String;
	ShowPaymentReceiptOptionsMessage._meta_.fields["disableCloverPrinting"] = {};
	ShowPaymentReceiptOptionsMessage._meta_.fields["disableCloverPrinting"].type = Boolean;

	//
	// Expose the module.
	//
	if (true) {
	module.exports = ShowPaymentReceiptOptionsMessage;
	}



/***/ }),
/* 1108 */
/***/ (function(module, exports, __webpack_require__) {

	/**
	 * Autogenerated by Avro
	 * 
	 * DO NOT EDIT DIRECTLY
	 */

	var remotemessage_Method = __webpack_require__(2);
	var remotemessage_Message = __webpack_require__(3);
	var payments_Payment = __webpack_require__(11);
	var payments_Refund = __webpack_require__(26);
	var payments_Credit = __webpack_require__(30);

	/**
	* @constructor
	* @augments remotemessage.Message
	* @memberof remotemessage
	*/
	var ShowReceiptOptionsMessage = function() {
	  remotemessage_Message.call(this);
	  this._superClass_ = remotemessage_Message;
	  this._class_ = ShowReceiptOptionsMessage;
	  this.setMethod(remotemessage_Method["SHOW_RECEIPT_OPTIONS"]);
	  this.orderId = undefined;
	  this.paymentId = undefined;
	  this.refundId = undefined;
	  this.creditId = undefined;
	  this.disableCloverPrinting = undefined;
	  this.payment = undefined;
	  this.credit = undefined;
	  this.refund = undefined;
	  this.isReprint = undefined;
	};

	ShowReceiptOptionsMessage.prototype = Object.create(remotemessage_Message.prototype);
	ShowReceiptOptionsMessage.prototype.constructor = ShowReceiptOptionsMessage;

	/**
	* Set the field value
	* @memberof remotemessage.ShowReceiptOptionsMessage
	* @param {String} orderId 
	*/
	ShowReceiptOptionsMessage.prototype.setOrderId = function(orderId) {
	  this.orderId = orderId;
	};

	/**
	* Get the field value
	* @memberof remotemessage.ShowReceiptOptionsMessage
	* @return {String} 
	*/
	ShowReceiptOptionsMessage.prototype.getOrderId = function() {
	  return this.orderId;
	};

	/**
	* Set the field value
	* @memberof remotemessage.ShowReceiptOptionsMessage
	* @param {String} paymentId 
	*/
	ShowReceiptOptionsMessage.prototype.setPaymentId = function(paymentId) {
	  this.paymentId = paymentId;
	};

	/**
	* Get the field value
	* @memberof remotemessage.ShowReceiptOptionsMessage
	* @return {String} 
	*/
	ShowReceiptOptionsMessage.prototype.getPaymentId = function() {
	  return this.paymentId;
	};

	/**
	* Set the field value
	* @memberof remotemessage.ShowReceiptOptionsMessage
	* @param {String} refundId 
	*/
	ShowReceiptOptionsMessage.prototype.setRefundId = function(refundId) {
	  this.refundId = refundId;
	};

	/**
	* Get the field value
	* @memberof remotemessage.ShowReceiptOptionsMessage
	* @return {String} 
	*/
	ShowReceiptOptionsMessage.prototype.getRefundId = function() {
	  return this.refundId;
	};

	/**
	* Set the field value
	* @memberof remotemessage.ShowReceiptOptionsMessage
	* @param {String} creditId 
	*/
	ShowReceiptOptionsMessage.prototype.setCreditId = function(creditId) {
	  this.creditId = creditId;
	};

	/**
	* Get the field value
	* @memberof remotemessage.ShowReceiptOptionsMessage
	* @return {String} 
	*/
	ShowReceiptOptionsMessage.prototype.getCreditId = function() {
	  return this.creditId;
	};

	/**
	* Set the field value
	* @memberof remotemessage.ShowReceiptOptionsMessage
	* @param {Boolean} disableCloverPrinting 
	*/
	ShowReceiptOptionsMessage.prototype.setDisableCloverPrinting = function(disableCloverPrinting) {
	  this.disableCloverPrinting = disableCloverPrinting;
	};

	/**
	* Get the field value
	* @memberof remotemessage.ShowReceiptOptionsMessage
	* @return {Boolean} 
	*/
	ShowReceiptOptionsMessage.prototype.getDisableCloverPrinting = function() {
	  return this.disableCloverPrinting;
	};

	/**
	* Set the field value
	* @memberof remotemessage.ShowReceiptOptionsMessage
	* @param {payments.Payment} payment 
	*/
	ShowReceiptOptionsMessage.prototype.setPayment = function(payment) {
	  this.payment = payment;
	};

	/**
	* Get the field value
	* @memberof remotemessage.ShowReceiptOptionsMessage
	* @return {payments.Payment} 
	*/
	ShowReceiptOptionsMessage.prototype.getPayment = function() {
	  return this.payment;
	};

	/**
	* Set the field value
	* @memberof remotemessage.ShowReceiptOptionsMessage
	* @param {payments.Credit} credit 
	*/
	ShowReceiptOptionsMessage.prototype.setCredit = function(credit) {
	  this.credit = credit;
	};

	/**
	* Get the field value
	* @memberof remotemessage.ShowReceiptOptionsMessage
	* @return {payments.Credit} 
	*/
	ShowReceiptOptionsMessage.prototype.getCredit = function() {
	  return this.credit;
	};

	/**
	* Set the field value
	* @memberof remotemessage.ShowReceiptOptionsMessage
	* @param {payments.Refund} refund 
	*/
	ShowReceiptOptionsMessage.prototype.setRefund = function(refund) {
	  this.refund = refund;
	};

	/**
	* Get the field value
	* @memberof remotemessage.ShowReceiptOptionsMessage
	* @return {payments.Refund} 
	*/
	ShowReceiptOptionsMessage.prototype.getRefund = function() {
	  return this.refund;
	};

	/**
	* Set the field value
	* @memberof remotemessage.ShowReceiptOptionsMessage
	* @param {Boolean} isReprint 
	*/
	ShowReceiptOptionsMessage.prototype.setIsReprint = function(isReprint) {
	  this.isReprint = isReprint;
	};

	/**
	* Get the field value
	* @memberof remotemessage.ShowReceiptOptionsMessage
	* @return {Boolean} 
	*/
	ShowReceiptOptionsMessage.prototype.getIsReprint = function() {
	  return this.isReprint;
	};

	ShowReceiptOptionsMessage._meta_ =  {fields:  {}};
	ShowReceiptOptionsMessage._meta_._class_ =  ShowReceiptOptionsMessage;
	ShowReceiptOptionsMessage._meta_._superMeta_ = remotemessage_Message._meta_;
	ShowReceiptOptionsMessage._meta_.fields["orderId"] = {};
	ShowReceiptOptionsMessage._meta_.fields["orderId"].type = String;
	ShowReceiptOptionsMessage._meta_.fields["paymentId"] = {};
	ShowReceiptOptionsMessage._meta_.fields["paymentId"].type = String;
	ShowReceiptOptionsMessage._meta_.fields["refundId"] = {};
	ShowReceiptOptionsMessage._meta_.fields["refundId"].type = String;
	ShowReceiptOptionsMessage._meta_.fields["creditId"] = {};
	ShowReceiptOptionsMessage._meta_.fields["creditId"].type = String;
	ShowReceiptOptionsMessage._meta_.fields["disableCloverPrinting"] = {};
	ShowReceiptOptionsMessage._meta_.fields["disableCloverPrinting"].type = Boolean;
	ShowReceiptOptionsMessage._meta_.fields["payment"] = {};
	ShowReceiptOptionsMessage._meta_.fields["payment"].type = payments_Payment;
	ShowReceiptOptionsMessage._meta_.fields["credit"] = {};
	ShowReceiptOptionsMessage._meta_.fields["credit"].type = payments_Credit;
	ShowReceiptOptionsMessage._meta_.fields["refund"] = {};
	ShowReceiptOptionsMessage._meta_.fields["refund"].type = payments_Refund;
	ShowReceiptOptionsMessage._meta_.fields["isReprint"] = {};
	ShowReceiptOptionsMessage._meta_.fields["isReprint"].type = Boolean;

	//
	// Expose the module.
	//
	if (true) {
	module.exports = ShowReceiptOptionsMessage;
	}



/***/ }),
/* 1109 */
/***/ (function(module, exports, __webpack_require__) {

	/**
	 * Autogenerated by Avro
	 * 
	 * DO NOT EDIT DIRECTLY
	 */

	var remotemessage_Method = __webpack_require__(2);
	var remotemessage_ResultStatus = __webpack_require__(23);
	var remotemessage_Message = __webpack_require__(3);

	/**
	* @constructor
	* @augments remotemessage.Message
	* @memberof remotemessage
	*/
	var ShowReceiptOptionsResponseMessage = function() {
	  remotemessage_Message.call(this);
	  this._superClass_ = remotemessage_Message;
	  this._class_ = ShowReceiptOptionsResponseMessage;
	  this.setMethod(remotemessage_Method["SHOW_RECEIPT_OPTIONS_RESPONSE"]);
	  this.reason = undefined;
	  this.status = undefined;
	};

	ShowReceiptOptionsResponseMessage.prototype = Object.create(remotemessage_Message.prototype);
	ShowReceiptOptionsResponseMessage.prototype.constructor = ShowReceiptOptionsResponseMessage;

	/**
	* Set the field value
	* @memberof remotemessage.ShowReceiptOptionsResponseMessage
	* @param {String} reason 
	*/
	ShowReceiptOptionsResponseMessage.prototype.setReason = function(reason) {
	  this.reason = reason;
	};

	/**
	* Get the field value
	* @memberof remotemessage.ShowReceiptOptionsResponseMessage
	* @return {String} 
	*/
	ShowReceiptOptionsResponseMessage.prototype.getReason = function() {
	  return this.reason;
	};

	/**
	* Set the field value
	* The status of the request.
	*
	* @memberof remotemessage.ShowReceiptOptionsResponseMessage
	* @param {remotemessage.ResultStatus} status 
	*/
	ShowReceiptOptionsResponseMessage.prototype.setStatus = function(status) {
	  this.status = status;
	};

	/**
	* Get the field value
	* The status of the request.
	* @memberof remotemessage.ShowReceiptOptionsResponseMessage
	* @return {remotemessage.ResultStatus} 
	*/
	ShowReceiptOptionsResponseMessage.prototype.getStatus = function() {
	  return this.status;
	};

	ShowReceiptOptionsResponseMessage._meta_ =  {fields:  {}};
	ShowReceiptOptionsResponseMessage._meta_._class_ =  ShowReceiptOptionsResponseMessage;
	ShowReceiptOptionsResponseMessage._meta_._superMeta_ = remotemessage_Message._meta_;
	ShowReceiptOptionsResponseMessage._meta_.fields["reason"] = {};
	ShowReceiptOptionsResponseMessage._meta_.fields["reason"].type = String;
	ShowReceiptOptionsResponseMessage._meta_.fields["status"] = {};
	ShowReceiptOptionsResponseMessage._meta_.fields["status"].type = remotemessage_ResultStatus;

	//
	// Expose the module.
	//
	if (true) {
	module.exports = ShowReceiptOptionsResponseMessage;
	}



/***/ }),
/* 1110 */
/***/ (function(module, exports, __webpack_require__) {

	/**
	 * Autogenerated by Avro
	 * 
	 * DO NOT EDIT DIRECTLY
	 */

	var remotemessage_Method = __webpack_require__(2);
	var remotemessage_Message = __webpack_require__(3);

	/**
	* @constructor
	* @augments remotemessage.Message
	* @memberof remotemessage
	*/
	var ShutDownMessage = function() {
	  remotemessage_Message.call(this);
	  this._superClass_ = remotemessage_Message;
	  this._class_ = ShutDownMessage;
	  this.setMethod(remotemessage_Method["SHUTDOWN"]);
	};

	ShutDownMessage.prototype = Object.create(remotemessage_Message.prototype);
	ShutDownMessage.prototype.constructor = ShutDownMessage;

	ShutDownMessage._meta_ =  {fields:  {}};
	ShutDownMessage._meta_._class_ =  ShutDownMessage;
	ShutDownMessage._meta_._superMeta_ = remotemessage_Message._meta_;

	//
	// Expose the module.
	//
	if (true) {
	module.exports = ShutDownMessage;
	}



/***/ }),
/* 1111 */
/***/ (function(module, exports, __webpack_require__) {

	/**
	 * Autogenerated by Avro
	 * 
	 * DO NOT EDIT DIRECTLY
	 */

	var remotemessage_Method = __webpack_require__(2);
	var remotemessage_Message = __webpack_require__(3);

	/**
	* @constructor
	* @augments remotemessage.Message
	* @memberof remotemessage
	*/
	var SignatureRequestMessage = function() {
	  remotemessage_Message.call(this);
	  this._superClass_ = remotemessage_Message;
	  this._class_ = SignatureRequestMessage;
	  this.setMethod(remotemessage_Method["REQUEST_SIGNATURE"]);
	  this.acknowledgementMessage = undefined;
	};

	SignatureRequestMessage.prototype = Object.create(remotemessage_Message.prototype);
	SignatureRequestMessage.prototype.constructor = SignatureRequestMessage;

	/**
	* Set the field value
	* @memberof remotemessage.SignatureRequestMessage
	* @param {String} acknowledgementMessage 
	*/
	SignatureRequestMessage.prototype.setAcknowledgementMessage = function(acknowledgementMessage) {
	  this.acknowledgementMessage = acknowledgementMessage;
	};

	/**
	* Get the field value
	* @memberof remotemessage.SignatureRequestMessage
	* @return {String} 
	*/
	SignatureRequestMessage.prototype.getAcknowledgementMessage = function() {
	  return this.acknowledgementMessage;
	};

	SignatureRequestMessage._meta_ =  {fields:  {}};
	SignatureRequestMessage._meta_._class_ =  SignatureRequestMessage;
	SignatureRequestMessage._meta_._superMeta_ = remotemessage_Message._meta_;
	SignatureRequestMessage._meta_.fields["acknowledgementMessage"] = {};
	SignatureRequestMessage._meta_.fields["acknowledgementMessage"].type = String;

	//
	// Expose the module.
	//
	if (true) {
	module.exports = SignatureRequestMessage;
	}



/***/ }),
/* 1112 */
/***/ (function(module, exports, __webpack_require__) {

	/**
	 * Autogenerated by Avro
	 * 
	 * DO NOT EDIT DIRECTLY
	 */

	var remotemessage_Method = __webpack_require__(2);
	var remotemessage_ResultStatus = __webpack_require__(23);
	var remotemessage_Message = __webpack_require__(3);
	var base_Signature = __webpack_require__(86);

	/**
	* @constructor
	* @augments remotemessage.Message
	* @memberof remotemessage
	*/
	var SignatureResponseMessage = function() {
	  remotemessage_Message.call(this);
	  this._superClass_ = remotemessage_Message;
	  this._class_ = SignatureResponseMessage;
	  this.setMethod(remotemessage_Method["REQUEST_SIGNATURE_RESPONSE"]);
	  this.status = undefined;
	  this.reason = undefined;
	  this.signature = undefined;
	};

	SignatureResponseMessage.prototype = Object.create(remotemessage_Message.prototype);
	SignatureResponseMessage.prototype.constructor = SignatureResponseMessage;

	/**
	* Set the field value
	* @memberof remotemessage.SignatureResponseMessage
	* @param {remotemessage.ResultStatus} status 
	*/
	SignatureResponseMessage.prototype.setStatus = function(status) {
	  this.status = status;
	};

	/**
	* Get the field value
	* @memberof remotemessage.SignatureResponseMessage
	* @return {remotemessage.ResultStatus} 
	*/
	SignatureResponseMessage.prototype.getStatus = function() {
	  return this.status;
	};

	/**
	* Set the field value
	* @memberof remotemessage.SignatureResponseMessage
	* @param {String} reason 
	*/
	SignatureResponseMessage.prototype.setReason = function(reason) {
	  this.reason = reason;
	};

	/**
	* Get the field value
	* @memberof remotemessage.SignatureResponseMessage
	* @return {String} 
	*/
	SignatureResponseMessage.prototype.getReason = function() {
	  return this.reason;
	};

	/**
	* Set the field value
	* @memberof remotemessage.SignatureResponseMessage
	* @param {base.Signature} signature 
	*/
	SignatureResponseMessage.prototype.setSignature = function(signature) {
	  this.signature = signature;
	};

	/**
	* Get the field value
	* @memberof remotemessage.SignatureResponseMessage
	* @return {base.Signature} 
	*/
	SignatureResponseMessage.prototype.getSignature = function() {
	  return this.signature;
	};

	SignatureResponseMessage._meta_ =  {fields:  {}};
	SignatureResponseMessage._meta_._class_ =  SignatureResponseMessage;
	SignatureResponseMessage._meta_._superMeta_ = remotemessage_Message._meta_;
	SignatureResponseMessage._meta_.fields["status"] = {};
	SignatureResponseMessage._meta_.fields["status"].type = remotemessage_ResultStatus;
	SignatureResponseMessage._meta_.fields["reason"] = {};
	SignatureResponseMessage._meta_.fields["reason"].type = String;
	SignatureResponseMessage._meta_.fields["signature"] = {};
	SignatureResponseMessage._meta_.fields["signature"].type = base_Signature;

	//
	// Expose the module.
	//
	if (true) {
	module.exports = SignatureResponseMessage;
	}



/***/ }),
/* 1113 */
/***/ (function(module, exports, __webpack_require__) {

	/**
	 * Autogenerated by Avro
	 * 
	 * DO NOT EDIT DIRECTLY
	 */

	var remotemessage_Method = __webpack_require__(2);
	var remotemessage_Message = __webpack_require__(3);
	var payments_Payment = __webpack_require__(11);

	/**
	* @constructor
	* @augments remotemessage.Message
	* @memberof remotemessage
	*/
	var SignatureVerifiedMessage = function() {
	  remotemessage_Message.call(this);
	  this._superClass_ = remotemessage_Message;
	  this._class_ = SignatureVerifiedMessage;
	  this.setMethod(remotemessage_Method["SIGNATURE_VERIFIED"]);
	  this.payment = undefined;
	  this.verified = undefined;
	};

	SignatureVerifiedMessage.prototype = Object.create(remotemessage_Message.prototype);
	SignatureVerifiedMessage.prototype.constructor = SignatureVerifiedMessage;

	/**
	* Set the field value
	* A payment
	*
	* @memberof remotemessage.SignatureVerifiedMessage
	* @param {payments.Payment} payment 
	*/
	SignatureVerifiedMessage.prototype.setPayment = function(payment) {
	  this.payment = payment;
	};

	/**
	* Get the field value
	* A payment
	* @memberof remotemessage.SignatureVerifiedMessage
	* @return {payments.Payment} 
	*/
	SignatureVerifiedMessage.prototype.getPayment = function() {
	  return this.payment;
	};

	/**
	* Set the field value
	* If true the signature is verified
	*
	* @memberof remotemessage.SignatureVerifiedMessage
	* @param {Boolean} verified 
	*/
	SignatureVerifiedMessage.prototype.setVerified = function(verified) {
	  this.verified = verified;
	};

	/**
	* Get the field value
	* If true the signature is verified
	* @memberof remotemessage.SignatureVerifiedMessage
	* @return {Boolean} 
	*/
	SignatureVerifiedMessage.prototype.getVerified = function() {
	  return this.verified;
	};

	SignatureVerifiedMessage._meta_ =  {fields:  {}};
	SignatureVerifiedMessage._meta_._class_ =  SignatureVerifiedMessage;
	SignatureVerifiedMessage._meta_._superMeta_ = remotemessage_Message._meta_;
	SignatureVerifiedMessage._meta_.fields["payment"] = {};
	SignatureVerifiedMessage._meta_.fields["payment"].type = payments_Payment;
	SignatureVerifiedMessage._meta_.fields["verified"] = {};
	SignatureVerifiedMessage._meta_.fields["verified"].type = Boolean;

	//
	// Expose the module.
	//
	if (true) {
	module.exports = SignatureVerifiedMessage;
	}



/***/ }),
/* 1114 */
/***/ (function(module, exports, __webpack_require__) {

	/**
	 * Autogenerated by Avro
	 * 
	 * DO NOT EDIT DIRECTLY
	 */

	var remotemessage_Method = __webpack_require__(2);
	var payments_VasConfig = __webpack_require__(255);
	var remotemessage_Message = __webpack_require__(3);

	/**
	* @constructor
	* @augments remotemessage.Message
	* @memberof remotemessage
	*/
	var StartVasMessage = function() {
	  remotemessage_Message.call(this);
	  this._superClass_ = remotemessage_Message;
	  this._class_ = StartVasMessage;
	  this.setMethod(remotemessage_Method["START_VAS"]);
	  this.config = undefined;
	};

	StartVasMessage.prototype = Object.create(remotemessage_Message.prototype);
	StartVasMessage.prototype.constructor = StartVasMessage;

	/**
	* Set the field value
	* The configuration to use when starting VAS, or null
	*
	* @memberof remotemessage.StartVasMessage
	* @param {payments.VasConfig} config 
	*/
	StartVasMessage.prototype.setConfig = function(config) {
	  this.config = config;
	};

	/**
	* Get the field value
	* The configuration to use when starting VAS, or null
	* @memberof remotemessage.StartVasMessage
	* @return {payments.VasConfig} 
	*/
	StartVasMessage.prototype.getConfig = function() {
	  return this.config;
	};

	StartVasMessage._meta_ =  {fields:  {}};
	StartVasMessage._meta_._class_ =  StartVasMessage;
	StartVasMessage._meta_._superMeta_ = remotemessage_Message._meta_;
	StartVasMessage._meta_.fields["config"] = {};
	StartVasMessage._meta_.fields["config"].type = payments_VasConfig;

	//
	// Expose the module.
	//
	if (true) {
	module.exports = StartVasMessage;
	}



/***/ }),
/* 1115 */
/***/ (function(module, exports, __webpack_require__) {

	/**
	 * Autogenerated by Avro
	 * 
	 * DO NOT EDIT DIRECTLY
	 */

	var remotemessage_Method = __webpack_require__(2);
	var remotemessage_Message = __webpack_require__(3);

	/**
	* @constructor
	* @augments remotemessage.Message
	* @memberof remotemessage
	*/
	var StopVasMessage = function() {
	  remotemessage_Message.call(this);
	  this._superClass_ = remotemessage_Message;
	  this._class_ = StopVasMessage;
	  this.setMethod(remotemessage_Method["STOP_VAS"]);
	};

	StopVasMessage.prototype = Object.create(remotemessage_Message.prototype);
	StopVasMessage.prototype.constructor = StopVasMessage;

	StopVasMessage._meta_ =  {fields:  {}};
	StopVasMessage._meta_._class_ =  StopVasMessage;
	StopVasMessage._meta_._superMeta_ = remotemessage_Message._meta_;

	//
	// Expose the module.
	//
	if (true) {
	module.exports = StopVasMessage;
	}



/***/ }),
/* 1116 */
/***/ (function(module, exports, __webpack_require__) {

	/**
	 * Autogenerated by Avro
	 * 
	 * DO NOT EDIT DIRECTLY
	 */

	var remotemessage_Method = __webpack_require__(2);
	var remotemessage_Message = __webpack_require__(3);

	/**
	* @constructor
	* @augments remotemessage.Message
	* @memberof remotemessage
	*/
	var TerminalMessage = function() {
	  remotemessage_Message.call(this);
	  this._superClass_ = remotemessage_Message;
	  this._class_ = TerminalMessage;
	  this.setMethod(remotemessage_Method["TERMINAL_MESSAGE"]);
	  this.text = undefined;
	};

	TerminalMessage.prototype = Object.create(remotemessage_Message.prototype);
	TerminalMessage.prototype.constructor = TerminalMessage;

	/**
	* Set the field value
	* The message to display.
	*
	* @memberof remotemessage.TerminalMessage
	* @param {String} text 
	*/
	TerminalMessage.prototype.setText = function(text) {
	  this.text = text;
	};

	/**
	* Get the field value
	* The message to display.
	* @memberof remotemessage.TerminalMessage
	* @return {String} 
	*/
	TerminalMessage.prototype.getText = function() {
	  return this.text;
	};

	TerminalMessage._meta_ =  {fields:  {}};
	TerminalMessage._meta_._class_ =  TerminalMessage;
	TerminalMessage._meta_._superMeta_ = remotemessage_Message._meta_;
	TerminalMessage._meta_.fields["text"] = {};
	TerminalMessage._meta_.fields["text"].type = String;

	//
	// Expose the module.
	//
	if (true) {
	module.exports = TerminalMessage;
	}



/***/ }),
/* 1117 */
/***/ (function(module, exports, __webpack_require__) {

	/**
	 * Autogenerated by Avro
	 * 
	 * DO NOT EDIT DIRECTLY
	 */

	var remotemessage_Method = __webpack_require__(2);
	var printer_Printer = __webpack_require__(88);
	var remotemessage_Message = __webpack_require__(3);

	/**
	* @constructor
	* @augments remotemessage.Message
	* @memberof remotemessage
	*/
	var TextPrintMessage = function() {
	  remotemessage_Message.call(this);
	  this._superClass_ = remotemessage_Message;
	  this._class_ = TextPrintMessage;
	  this.setMethod(remotemessage_Method["PRINT_TEXT"]);
	  this.textLines = undefined;
	  this.externalPrintJobId = undefined;
	  this.printer = undefined;
	};

	TextPrintMessage.prototype = Object.create(remotemessage_Message.prototype);
	TextPrintMessage.prototype.constructor = TextPrintMessage;

	/**
	* Set the field value
	* @memberof remotemessage.TextPrintMessage
	* @param {Array.<String>} textLines An array of 
	*/
	TextPrintMessage.prototype.setTextLines = function(textLines) {
	  this.textLines = textLines;
	};

	/**
	* Get the field value
	* @memberof remotemessage.TextPrintMessage
	* @return {Array.<String>} An array of 
	*/
	TextPrintMessage.prototype.getTextLines = function() {
	  return this.textLines;
	};

	/**
	* Set the field value
	* External print job ID assigned to this request
	*
	* @memberof remotemessage.TextPrintMessage
	* @param {String} externalPrintJobId 
	*/
	TextPrintMessage.prototype.setExternalPrintJobId = function(externalPrintJobId) {
	  this.externalPrintJobId = externalPrintJobId;
	};

	/**
	* Get the field value
	* External print job ID assigned to this request
	* @memberof remotemessage.TextPrintMessage
	* @return {String} 
	*/
	TextPrintMessage.prototype.getExternalPrintJobId = function() {
	  return this.externalPrintJobId;
	};

	/**
	* Set the field value
	* Printer to which the print job should be routed.
	*
	* @memberof remotemessage.TextPrintMessage
	* @param {printer.Printer} printer 
	*/
	TextPrintMessage.prototype.setPrinter = function(printer) {
	  this.printer = printer;
	};

	/**
	* Get the field value
	* Printer to which the print job should be routed.
	* @memberof remotemessage.TextPrintMessage
	* @return {printer.Printer} 
	*/
	TextPrintMessage.prototype.getPrinter = function() {
	  return this.printer;
	};

	TextPrintMessage._meta_ =  {fields:  {}};
	TextPrintMessage._meta_._class_ =  TextPrintMessage;
	TextPrintMessage._meta_._superMeta_ = remotemessage_Message._meta_;
	TextPrintMessage._meta_.fields["textLines"] = {};
	TextPrintMessage._meta_.fields["textLines"].type = Array;
	TextPrintMessage._meta_.fields["externalPrintJobId"] = {};
	TextPrintMessage._meta_.fields["externalPrintJobId"].type = String;
	TextPrintMessage._meta_.fields["printer"] = {};
	TextPrintMessage._meta_.fields["printer"].type = printer_Printer;

	//
	// Expose the module.
	//
	if (true) {
	module.exports = TextPrintMessage;
	}



/***/ }),
/* 1118 */
/***/ (function(module, exports, __webpack_require__) {

	/**
	 * Autogenerated by Avro
	 * 
	 * DO NOT EDIT DIRECTLY
	 */

	var remotemessage_Method = __webpack_require__(2);
	var remotemessage_Message = __webpack_require__(3);

	/**
	* @constructor
	* @augments remotemessage.Message
	* @memberof remotemessage
	*/
	var ThankYouMessage = function() {
	  remotemessage_Message.call(this);
	  this._superClass_ = remotemessage_Message;
	  this._class_ = ThankYouMessage;
	  this.setMethod(remotemessage_Method["SHOW_THANK_YOU_SCREEN"]);
	};

	ThankYouMessage.prototype = Object.create(remotemessage_Message.prototype);
	ThankYouMessage.prototype.constructor = ThankYouMessage;

	ThankYouMessage._meta_ =  {fields:  {}};
	ThankYouMessage._meta_._class_ =  ThankYouMessage;
	ThankYouMessage._meta_._superMeta_ = remotemessage_Message._meta_;

	//
	// Expose the module.
	//
	if (true) {
	module.exports = ThankYouMessage;
	}



/***/ }),
/* 1119 */
/***/ (function(module, exports, __webpack_require__) {

	/**
	 * Autogenerated by Avro
	 * 
	 * DO NOT EDIT DIRECTLY
	 */

	var remotemessage_Method = __webpack_require__(2);
	var remotemessage_Message = __webpack_require__(3);

	/**
	* @constructor
	* @augments remotemessage.Message
	* @memberof remotemessage
	*/
	var TipAddedMessage = function() {
	  remotemessage_Message.call(this);
	  this._superClass_ = remotemessage_Message;
	  this._class_ = TipAddedMessage;
	  this.setMethod(remotemessage_Method["TIP_ADDED"]);
	  this.tipAmount = undefined;
	};

	TipAddedMessage.prototype = Object.create(remotemessage_Message.prototype);
	TipAddedMessage.prototype.constructor = TipAddedMessage;

	/**
	* Set the field value
	* Amount paid in tips
	*
	* @memberof remotemessage.TipAddedMessage
	* @param {Number} tipAmount must be a long integer
	*/
	TipAddedMessage.prototype.setTipAmount = function(tipAmount) {
	  this.tipAmount = tipAmount;
	};

	/**
	* Get the field value
	* Amount paid in tips
	* @memberof remotemessage.TipAddedMessage
	* @return {Number} must be a long integer
	*/
	TipAddedMessage.prototype.getTipAmount = function() {
	  return this.tipAmount;
	};

	TipAddedMessage._meta_ =  {fields:  {}};
	TipAddedMessage._meta_._class_ =  TipAddedMessage;
	TipAddedMessage._meta_._superMeta_ = remotemessage_Message._meta_;
	TipAddedMessage._meta_.fields["tipAmount"] = {};
	TipAddedMessage._meta_.fields["tipAmount"].type = Number;

	//
	// Expose the module.
	//
	if (true) {
	module.exports = TipAddedMessage;
	}



/***/ }),
/* 1120 */
/***/ (function(module, exports, __webpack_require__) {

	/**
	 * Autogenerated by Avro
	 * 
	 * DO NOT EDIT DIRECTLY
	 */

	var remotemessage_Method = __webpack_require__(2);
	var remotemessage_Message = __webpack_require__(3);

	/**
	* @constructor
	* @augments remotemessage.Message
	* @memberof remotemessage
	*/
	var TipAdjustMessage = function() {
	  remotemessage_Message.call(this);
	  this._superClass_ = remotemessage_Message;
	  this._class_ = TipAdjustMessage;
	  this.setMethod(remotemessage_Method["TIP_ADJUST"]);
	  this.tipAmount = undefined;
	  this.orderId = undefined;
	  this.paymentId = undefined;
	};

	TipAdjustMessage.prototype = Object.create(remotemessage_Message.prototype);
	TipAdjustMessage.prototype.constructor = TipAdjustMessage;

	/**
	* Set the field value
	* Amount paid in tips
	*
	* @memberof remotemessage.TipAdjustMessage
	* @param {Number} tipAmount must be a long integer
	*/
	TipAdjustMessage.prototype.setTipAmount = function(tipAmount) {
	  this.tipAmount = tipAmount;
	};

	/**
	* Get the field value
	* Amount paid in tips
	* @memberof remotemessage.TipAdjustMessage
	* @return {Number} must be a long integer
	*/
	TipAdjustMessage.prototype.getTipAmount = function() {
	  return this.tipAmount;
	};

	/**
	* Set the field value
	* Unique identifier for a order
	*
	* @memberof remotemessage.TipAdjustMessage
	* @param {String} orderId 
	*/
	TipAdjustMessage.prototype.setOrderId = function(orderId) {
	  this.orderId = orderId;
	};

	/**
	* Get the field value
	* Unique identifier for a order
	* @memberof remotemessage.TipAdjustMessage
	* @return {String} 
	*/
	TipAdjustMessage.prototype.getOrderId = function() {
	  return this.orderId;
	};

	/**
	* Set the field value
	* Unique identifier for a payment
	*
	* @memberof remotemessage.TipAdjustMessage
	* @param {String} paymentId 
	*/
	TipAdjustMessage.prototype.setPaymentId = function(paymentId) {
	  this.paymentId = paymentId;
	};

	/**
	* Get the field value
	* Unique identifier for a payment
	* @memberof remotemessage.TipAdjustMessage
	* @return {String} 
	*/
	TipAdjustMessage.prototype.getPaymentId = function() {
	  return this.paymentId;
	};

	TipAdjustMessage._meta_ =  {fields:  {}};
	TipAdjustMessage._meta_._class_ =  TipAdjustMessage;
	TipAdjustMessage._meta_._superMeta_ = remotemessage_Message._meta_;
	TipAdjustMessage._meta_.fields["tipAmount"] = {};
	TipAdjustMessage._meta_.fields["tipAmount"].type = Number;
	TipAdjustMessage._meta_.fields["orderId"] = {};
	TipAdjustMessage._meta_.fields["orderId"].type = String;
	TipAdjustMessage._meta_.fields["paymentId"] = {};
	TipAdjustMessage._meta_.fields["paymentId"].type = String;

	//
	// Expose the module.
	//
	if (true) {
	module.exports = TipAdjustMessage;
	}



/***/ }),
/* 1121 */
/***/ (function(module, exports, __webpack_require__) {

	/**
	 * Autogenerated by Avro
	 * 
	 * DO NOT EDIT DIRECTLY
	 */

	var remotemessage_Method = __webpack_require__(2);
	var remotemessage_Message = __webpack_require__(3);

	/**
	* @constructor
	* @augments remotemessage.Message
	* @memberof remotemessage
	*/
	var TipAdjustResponseMessage = function() {
	  remotemessage_Message.call(this);
	  this._superClass_ = remotemessage_Message;
	  this._class_ = TipAdjustResponseMessage;
	  this.setMethod(remotemessage_Method["TIP_ADJUST_RESPONSE"]);
	  this.success = undefined;
	  this.amount = undefined;
	  this.orderId = undefined;
	  this.message = undefined;
	  this.reason = undefined;
	  this.paymentId = undefined;
	};

	TipAdjustResponseMessage.prototype = Object.create(remotemessage_Message.prototype);
	TipAdjustResponseMessage.prototype.constructor = TipAdjustResponseMessage;

	/**
	* Set the field value
	* If true the tip adjustment succeeded
	*
	* @memberof remotemessage.TipAdjustResponseMessage
	* @param {Boolean} success 
	*/
	TipAdjustResponseMessage.prototype.setSuccess = function(success) {
	  this.success = success;
	};

	/**
	* Get the field value
	* If true the tip adjustment succeeded
	* @memberof remotemessage.TipAdjustResponseMessage
	* @return {Boolean} 
	*/
	TipAdjustResponseMessage.prototype.getSuccess = function() {
	  return this.success;
	};

	/**
	* Set the field value
	* Amount of tip
	*
	* @memberof remotemessage.TipAdjustResponseMessage
	* @param {Number} amount must be a long integer
	*/
	TipAdjustResponseMessage.prototype.setAmount = function(amount) {
	  this.amount = amount;
	};

	/**
	* Get the field value
	* Amount of tip
	* @memberof remotemessage.TipAdjustResponseMessage
	* @return {Number} must be a long integer
	*/
	TipAdjustResponseMessage.prototype.getAmount = function() {
	  return this.amount;
	};

	/**
	* Set the field value
	* Unique identifier for a order
	*
	* @memberof remotemessage.TipAdjustResponseMessage
	* @param {String} orderId 
	*/
	TipAdjustResponseMessage.prototype.setOrderId = function(orderId) {
	  this.orderId = orderId;
	};

	/**
	* Get the field value
	* Unique identifier for a order
	* @memberof remotemessage.TipAdjustResponseMessage
	* @return {String} 
	*/
	TipAdjustResponseMessage.prototype.getOrderId = function() {
	  return this.orderId;
	};

	/**
	* Set the field value
	* @memberof remotemessage.TipAdjustResponseMessage
	* @param {String} message 
	*/
	TipAdjustResponseMessage.prototype.setMessage = function(message) {
	  this.message = message;
	};

	/**
	* Get the field value
	* @memberof remotemessage.TipAdjustResponseMessage
	* @return {String} 
	*/
	TipAdjustResponseMessage.prototype.getMessage = function() {
	  return this.message;
	};

	/**
	* Set the field value
	* @memberof remotemessage.TipAdjustResponseMessage
	* @param {String} reason 
	*/
	TipAdjustResponseMessage.prototype.setReason = function(reason) {
	  this.reason = reason;
	};

	/**
	* Get the field value
	* @memberof remotemessage.TipAdjustResponseMessage
	* @return {String} 
	*/
	TipAdjustResponseMessage.prototype.getReason = function() {
	  return this.reason;
	};

	/**
	* Set the field value
	* Unique identifier for a payment
	*
	* @memberof remotemessage.TipAdjustResponseMessage
	* @param {String} paymentId 
	*/
	TipAdjustResponseMessage.prototype.setPaymentId = function(paymentId) {
	  this.paymentId = paymentId;
	};

	/**
	* Get the field value
	* Unique identifier for a payment
	* @memberof remotemessage.TipAdjustResponseMessage
	* @return {String} 
	*/
	TipAdjustResponseMessage.prototype.getPaymentId = function() {
	  return this.paymentId;
	};

	TipAdjustResponseMessage._meta_ =  {fields:  {}};
	TipAdjustResponseMessage._meta_._class_ =  TipAdjustResponseMessage;
	TipAdjustResponseMessage._meta_._superMeta_ = remotemessage_Message._meta_;
	TipAdjustResponseMessage._meta_.fields["success"] = {};
	TipAdjustResponseMessage._meta_.fields["success"].type = Boolean;
	TipAdjustResponseMessage._meta_.fields["amount"] = {};
	TipAdjustResponseMessage._meta_.fields["amount"].type = Number;
	TipAdjustResponseMessage._meta_.fields["orderId"] = {};
	TipAdjustResponseMessage._meta_.fields["orderId"].type = String;
	TipAdjustResponseMessage._meta_.fields["message"] = {};
	TipAdjustResponseMessage._meta_.fields["message"].type = String;
	TipAdjustResponseMessage._meta_.fields["reason"] = {};
	TipAdjustResponseMessage._meta_.fields["reason"].type = String;
	TipAdjustResponseMessage._meta_.fields["paymentId"] = {};
	TipAdjustResponseMessage._meta_.fields["paymentId"].type = String;

	//
	// Expose the module.
	//
	if (true) {
	module.exports = TipAdjustResponseMessage;
	}



/***/ }),
/* 1122 */
/***/ (function(module, exports, __webpack_require__) {

	/**
	 * Autogenerated by Avro
	 * 
	 * DO NOT EDIT DIRECTLY
	 */

	var remotemessage_Method = __webpack_require__(2);
	var remotemessage_PayIntent = __webpack_require__(262);
	var remotemessage_Message = __webpack_require__(3);
	var order_Order = __webpack_require__(68);

	/**
	* @constructor
	* @augments remotemessage.Message
	* @memberof remotemessage
	*/
	var TxStartRequestMessage = function() {
	  remotemessage_Message.call(this);
	  this._superClass_ = remotemessage_Message;
	  this._class_ = TxStartRequestMessage;
	  this.setMethod(remotemessage_Method["TX_START"]);
	  this.suppressOnScreenTips = undefined;
	  this.order = undefined;
	  this.payIntent = undefined;
	  this.requestInfo = undefined;
	};

	TxStartRequestMessage.prototype = Object.create(remotemessage_Message.prototype);
	TxStartRequestMessage.prototype.constructor = TxStartRequestMessage;

	/**
	* Set the field value
	* If true, then tips on the screen should not be displayed.
	*
	* @memberof remotemessage.TxStartRequestMessage
	* @param {Boolean} suppressOnScreenTips 
	*/
	TxStartRequestMessage.prototype.setSuppressOnScreenTips = function(suppressOnScreenTips) {
	  this.suppressOnScreenTips = suppressOnScreenTips;
	};

	/**
	* Get the field value
	* If true, then tips on the screen should not be displayed.
	* @memberof remotemessage.TxStartRequestMessage
	* @return {Boolean} 
	*/
	TxStartRequestMessage.prototype.getSuppressOnScreenTips = function() {
	  return this.suppressOnScreenTips;
	};

	/**
	* Set the field value
	* The order
	*
	* @memberof remotemessage.TxStartRequestMessage
	* @param {order.Order} order 
	*/
	TxStartRequestMessage.prototype.setOrder = function(order) {
	  this.order = order;
	};

	/**
	* Get the field value
	* The order
	* @memberof remotemessage.TxStartRequestMessage
	* @return {order.Order} 
	*/
	TxStartRequestMessage.prototype.getOrder = function() {
	  return this.order;
	};

	/**
	* Set the field value
	* The payIntent
	*
	* @memberof remotemessage.TxStartRequestMessage
	* @param {remotemessage.PayIntent} payIntent 
	*/
	TxStartRequestMessage.prototype.setPayIntent = function(payIntent) {
	  this.payIntent = payIntent;
	};

	/**
	* Get the field value
	* The payIntent
	* @memberof remotemessage.TxStartRequestMessage
	* @return {remotemessage.PayIntent} 
	*/
	TxStartRequestMessage.prototype.getPayIntent = function() {
	  return this.payIntent;
	};

	/**
	* Set the field value
	* Extra information to include with the request, like type of request
	*
	* @memberof remotemessage.TxStartRequestMessage
	* @param {String} requestInfo 
	*/
	TxStartRequestMessage.prototype.setRequestInfo = function(requestInfo) {
	  this.requestInfo = requestInfo;
	};

	/**
	* Get the field value
	* Extra information to include with the request, like type of request
	* @memberof remotemessage.TxStartRequestMessage
	* @return {String} 
	*/
	TxStartRequestMessage.prototype.getRequestInfo = function() {
	  return this.requestInfo;
	};

	TxStartRequestMessage._meta_ =  {fields:  {}};
	TxStartRequestMessage._meta_._class_ =  TxStartRequestMessage;
	TxStartRequestMessage._meta_._superMeta_ = remotemessage_Message._meta_;
	TxStartRequestMessage._meta_.fields["suppressOnScreenTips"] = {};
	TxStartRequestMessage._meta_.fields["suppressOnScreenTips"].type = Boolean;
	TxStartRequestMessage._meta_.fields["order"] = {};
	TxStartRequestMessage._meta_.fields["order"].type = order_Order;
	TxStartRequestMessage._meta_.fields["payIntent"] = {};
	TxStartRequestMessage._meta_.fields["payIntent"].type = remotemessage_PayIntent;
	TxStartRequestMessage._meta_.fields["requestInfo"] = {};
	TxStartRequestMessage._meta_.fields["requestInfo"].type = String;

	//
	// Expose the module.
	//
	if (true) {
	module.exports = TxStartRequestMessage;
	}



/***/ }),
/* 1123 */
/***/ (function(module, exports, __webpack_require__) {

	/**
	 * Autogenerated by Avro
	 * 
	 * DO NOT EDIT DIRECTLY
	 */

	var remotemessage_Method = __webpack_require__(2);
	var remotemessage_Message = __webpack_require__(3);
	var remotemessage_TxStartResponseResult = __webpack_require__(482);
	var order_Order = __webpack_require__(68);

	/**
	* @constructor
	* @augments remotemessage.Message
	* @memberof remotemessage
	*/
	var TxStartResponseMessage = function() {
	  remotemessage_Message.call(this);
	  this._superClass_ = remotemessage_Message;
	  this._class_ = TxStartResponseMessage;
	  this.setMethod(remotemessage_Method["TX_START_RESPONSE"]);
	  this.success = undefined;
	  this.order = undefined;
	  this.externalPaymentId = undefined;
	  this.message = undefined;
	  this.reason = undefined;
	  this.result = undefined;
	  this.requestInfo = undefined;
	};

	TxStartResponseMessage.prototype = Object.create(remotemessage_Message.prototype);
	TxStartResponseMessage.prototype.constructor = TxStartResponseMessage;

	/**
	* Set the field value
	* Deprecated
	*
	* @memberof remotemessage.TxStartResponseMessage
	* @param {Boolean} success 
	*/
	TxStartResponseMessage.prototype.setSuccess = function(success) {
	  this.success = success;
	};

	/**
	* Get the field value
	* Deprecated
	* @memberof remotemessage.TxStartResponseMessage
	* @return {Boolean} 
	*/
	TxStartResponseMessage.prototype.getSuccess = function() {
	  return this.success;
	};

	/**
	* Set the field value
	* The order
	*
	* @memberof remotemessage.TxStartResponseMessage
	* @param {order.Order} order 
	*/
	TxStartResponseMessage.prototype.setOrder = function(order) {
	  this.order = order;
	};

	/**
	* Get the field value
	* The order
	* @memberof remotemessage.TxStartResponseMessage
	* @return {order.Order} 
	*/
	TxStartResponseMessage.prototype.getOrder = function() {
	  return this.order;
	};

	/**
	* Set the field value
	* The external id provided in the initiating pay intent
	*
	* @memberof remotemessage.TxStartResponseMessage
	* @param {String} externalPaymentId 
	*/
	TxStartResponseMessage.prototype.setExternalPaymentId = function(externalPaymentId) {
	  this.externalPaymentId = externalPaymentId;
	};

	/**
	* Get the field value
	* The external id provided in the initiating pay intent
	* @memberof remotemessage.TxStartResponseMessage
	* @return {String} 
	*/
	TxStartResponseMessage.prototype.getExternalPaymentId = function() {
	  return this.externalPaymentId;
	};

	/**
	* Set the field value
	* @memberof remotemessage.TxStartResponseMessage
	* @param {String} message 
	*/
	TxStartResponseMessage.prototype.setMessage = function(message) {
	  this.message = message;
	};

	/**
	* Get the field value
	* @memberof remotemessage.TxStartResponseMessage
	* @return {String} 
	*/
	TxStartResponseMessage.prototype.getMessage = function() {
	  return this.message;
	};

	/**
	* Set the field value
	* @memberof remotemessage.TxStartResponseMessage
	* @param {String} reason 
	*/
	TxStartResponseMessage.prototype.setReason = function(reason) {
	  this.reason = reason;
	};

	/**
	* Get the field value
	* @memberof remotemessage.TxStartResponseMessage
	* @return {String} 
	*/
	TxStartResponseMessage.prototype.getReason = function() {
	  return this.reason;
	};

	/**
	* Set the field value
	* @memberof remotemessage.TxStartResponseMessage
	* @param {remotemessage.TxStartResponseResult} result 
	*/
	TxStartResponseMessage.prototype.setResult = function(result) {
	  this.result = result;
	};

	/**
	* Get the field value
	* @memberof remotemessage.TxStartResponseMessage
	* @return {remotemessage.TxStartResponseResult} 
	*/
	TxStartResponseMessage.prototype.getResult = function() {
	  return this.result;
	};

	/**
	* Set the field value
	* Extra information to include with the request, like type of request
	*
	* @memberof remotemessage.TxStartResponseMessage
	* @param {String} requestInfo 
	*/
	TxStartResponseMessage.prototype.setRequestInfo = function(requestInfo) {
	  this.requestInfo = requestInfo;
	};

	/**
	* Get the field value
	* Extra information to include with the request, like type of request
	* @memberof remotemessage.TxStartResponseMessage
	* @return {String} 
	*/
	TxStartResponseMessage.prototype.getRequestInfo = function() {
	  return this.requestInfo;
	};

	TxStartResponseMessage._meta_ =  {fields:  {}};
	TxStartResponseMessage._meta_._class_ =  TxStartResponseMessage;
	TxStartResponseMessage._meta_._superMeta_ = remotemessage_Message._meta_;
	TxStartResponseMessage._meta_.fields["success"] = {};
	TxStartResponseMessage._meta_.fields["success"].type = Boolean;
	TxStartResponseMessage._meta_.fields["order"] = {};
	TxStartResponseMessage._meta_.fields["order"].type = order_Order;
	TxStartResponseMessage._meta_.fields["externalPaymentId"] = {};
	TxStartResponseMessage._meta_.fields["externalPaymentId"].type = String;
	TxStartResponseMessage._meta_.fields["message"] = {};
	TxStartResponseMessage._meta_.fields["message"].type = String;
	TxStartResponseMessage._meta_.fields["reason"] = {};
	TxStartResponseMessage._meta_.fields["reason"].type = String;
	TxStartResponseMessage._meta_.fields["result"] = {};
	TxStartResponseMessage._meta_.fields["result"].type = remotemessage_TxStartResponseResult;
	TxStartResponseMessage._meta_.fields["requestInfo"] = {};
	TxStartResponseMessage._meta_.fields["requestInfo"].type = String;

	//
	// Expose the module.
	//
	if (true) {
	module.exports = TxStartResponseMessage;
	}



/***/ }),
/* 1124 */
/***/ (function(module, exports, __webpack_require__) {

	/**
	 * Autogenerated by Avro
	 * 
	 * DO NOT EDIT DIRECTLY
	 */

	var remotemessage_TxState = __webpack_require__(168);

	/**
	* @constructor
	* @memberof remotemessage
	*/
	var TxStateEnum = function() {
	  this._class_ = TxStateEnum;
	  this.txState = undefined;
	};


	/**
	* Set the field value
	* @memberof remotemessage.TxStateEnum
	* @param {remotemessage.TxState} txState 
	*/
	TxStateEnum.prototype.setTxState = function(txState) {
	  this.txState = txState;
	};

	/**
	* Get the field value
	* @memberof remotemessage.TxStateEnum
	* @return {remotemessage.TxState} 
	*/
	TxStateEnum.prototype.getTxState = function() {
	  return this.txState;
	};

	/**
	* @memberof remotemessage.TxStateEnum
	* @private
	*/
	TxStateEnum.prototype.getMetaInfo = function(fieldName) {
	  var curclass = this._class_;
	  do {
	    var fieldMetaInfo = curclass._meta_.fields[fieldName];
	    if(fieldMetaInfo) {
	      return fieldMetaInfo;
	    }
	    if(curclass._meta_._superMeta_) {
	      curclass = curclass._meta_._superMeta_._class_;
	    } else {
	      curclass = null;
	    }
	  } while(curclass);
	  return null;
	};

	TxStateEnum.prototype.toString = function() {
	  return JSON.stringify(this);
	};

	TxStateEnum._meta_ =  {fields:  {}};
	TxStateEnum._meta_._class_ =  TxStateEnum;
	TxStateEnum._meta_.fields["txState"] = {};
	TxStateEnum._meta_.fields["txState"].type = remotemessage_TxState;

	//
	// Expose the module.
	//
	if (true) {
	module.exports = TxStateEnum;
	}



/***/ }),
/* 1125 */
/***/ (function(module, exports, __webpack_require__) {

	/**
	 * Autogenerated by Avro
	 * 
	 * DO NOT EDIT DIRECTLY
	 */

	var remotemessage_Method = __webpack_require__(2);
	var remotemessage_TxState = __webpack_require__(168);
	var remotemessage_Message = __webpack_require__(3);

	/**
	* @constructor
	* @augments remotemessage.Message
	* @memberof remotemessage
	*/
	var TxStateMessage = function() {
	  remotemessage_Message.call(this);
	  this._superClass_ = remotemessage_Message;
	  this._class_ = TxStateMessage;
	  this.setMethod(remotemessage_Method["TX_STATE"]);
	  this.txState = undefined;
	};

	TxStateMessage.prototype = Object.create(remotemessage_Message.prototype);
	TxStateMessage.prototype.constructor = TxStateMessage;

	/**
	* Set the field value
	* Transaction state
	*
	* @memberof remotemessage.TxStateMessage
	* @param {remotemessage.TxState} txState 
	*/
	TxStateMessage.prototype.setTxState = function(txState) {
	  this.txState = txState;
	};

	/**
	* Get the field value
	* Transaction state
	* @memberof remotemessage.TxStateMessage
	* @return {remotemessage.TxState} 
	*/
	TxStateMessage.prototype.getTxState = function() {
	  return this.txState;
	};

	TxStateMessage._meta_ =  {fields:  {}};
	TxStateMessage._meta_._class_ =  TxStateMessage;
	TxStateMessage._meta_._superMeta_ = remotemessage_Message._meta_;
	TxStateMessage._meta_.fields["txState"] = {};
	TxStateMessage._meta_.fields["txState"].type = remotemessage_TxState;

	//
	// Expose the module.
	//
	if (true) {
	module.exports = TxStateMessage;
	}



/***/ }),
/* 1126 */
/***/ (function(module, exports, __webpack_require__) {

	/**
	 * Autogenerated by Avro
	 * 
	 * DO NOT EDIT DIRECTLY
	 */


	/**
	* @constructor
	* @memberof remotemessage
	*/
	var TxTypeRequestInfo = function() {
	  this._class_ = TxTypeRequestInfo;
	  this.SALE = "SALE";
	  this.AUTH = "AUTH";
	  this.PREAUTH = "PREAUTH";
	  this.CREDIT = "CREDIT";
	  this.REFUND = "REFUND";
	  this.VOID_PAYMENT = "VOID_PAYMENT";
	};


	/**
	* Get the field value
	* @memberof remotemessage.TxTypeRequestInfo
	* @return {String} 
	*/
	TxTypeRequestInfo.prototype.getSALE = function() {
	  return this.SALE;
	};

	/**
	* Get the field value
	* @memberof remotemessage.TxTypeRequestInfo
	* @return {String} 
	*/
	TxTypeRequestInfo.prototype.getAUTH = function() {
	  return this.AUTH;
	};

	/**
	* Get the field value
	* @memberof remotemessage.TxTypeRequestInfo
	* @return {String} 
	*/
	TxTypeRequestInfo.prototype.getPREAUTH = function() {
	  return this.PREAUTH;
	};

	/**
	* Get the field value
	* @memberof remotemessage.TxTypeRequestInfo
	* @return {String} 
	*/
	TxTypeRequestInfo.prototype.getCREDIT = function() {
	  return this.CREDIT;
	};

	/**
	* Get the field value
	* @memberof remotemessage.TxTypeRequestInfo
	* @return {String} 
	*/
	TxTypeRequestInfo.prototype.getREFUND = function() {
	  return this.REFUND;
	};

	/**
	* Get the field value
	* @memberof remotemessage.TxTypeRequestInfo
	* @return {String} 
	*/
	TxTypeRequestInfo.prototype.getVOIDPAYMENT = function() {
	  return this.VOID_PAYMENT;
	};

	/**
	* @memberof remotemessage.TxTypeRequestInfo
	* @private
	*/
	TxTypeRequestInfo.prototype.getMetaInfo = function(fieldName) {
	  var curclass = this._class_;
	  do {
	    var fieldMetaInfo = curclass._meta_.fields[fieldName];
	    if(fieldMetaInfo) {
	      return fieldMetaInfo;
	    }
	    if(curclass._meta_._superMeta_) {
	      curclass = curclass._meta_._superMeta_._class_;
	    } else {
	      curclass = null;
	    }
	  } while(curclass);
	  return null;
	};

	TxTypeRequestInfo.prototype.toString = function() {
	  return JSON.stringify(this);
	};

	TxTypeRequestInfo._meta_ =  {fields:  {}};
	TxTypeRequestInfo._meta_._class_ =  TxTypeRequestInfo;
	TxTypeRequestInfo._meta_.fields["SALE"] = {};
	TxTypeRequestInfo._meta_.fields["SALE"].type = String;
	TxTypeRequestInfo._meta_.fields["AUTH"] = {};
	TxTypeRequestInfo._meta_.fields["AUTH"].type = String;
	TxTypeRequestInfo._meta_.fields["PREAUTH"] = {};
	TxTypeRequestInfo._meta_.fields["PREAUTH"].type = String;
	TxTypeRequestInfo._meta_.fields["CREDIT"] = {};
	TxTypeRequestInfo._meta_.fields["CREDIT"].type = String;
	TxTypeRequestInfo._meta_.fields["REFUND"] = {};
	TxTypeRequestInfo._meta_.fields["REFUND"].type = String;
	TxTypeRequestInfo._meta_.fields["VOID_PAYMENT"] = {};
	TxTypeRequestInfo._meta_.fields["VOID_PAYMENT"].type = String;

	//
	// Expose the module.
	//
	if (true) {
	module.exports = TxTypeRequestInfo;
	}



/***/ }),
/* 1127 */
/***/ (function(module, exports, __webpack_require__) {

	/**
	 * Autogenerated by Avro
	 * 
	 * DO NOT EDIT DIRECTLY
	 */

	var remotemessage_Method = __webpack_require__(2);
	var remotemessage_UiDirection = __webpack_require__(483);
	var remotemessage_InputOption = __webpack_require__(473);
	var remotemessage_Message = __webpack_require__(3);
	var remotemessage_UiState = __webpack_require__(484);

	/**
	* @constructor
	* @augments remotemessage.Message
	* @memberof remotemessage
	*/
	var UiStateMessage = function() {
	  remotemessage_Message.call(this);
	  this._superClass_ = remotemessage_Message;
	  this._class_ = UiStateMessage;
	  this.setMethod(remotemessage_Method["UI_STATE"]);
	  this.uiText = undefined;
	  this.uiDirection = undefined;
	  this.inputOptions = undefined;
	  this.uiState = undefined;
	};

	UiStateMessage.prototype = Object.create(remotemessage_Message.prototype);
	UiStateMessage.prototype.constructor = UiStateMessage;

	/**
	* Set the field value
	* The text for the UI
	*
	* @memberof remotemessage.UiStateMessage
	* @param {String} uiText 
	*/
	UiStateMessage.prototype.setUiText = function(uiText) {
	  this.uiText = uiText;
	};

	/**
	* Get the field value
	* The text for the UI
	* @memberof remotemessage.UiStateMessage
	* @return {String} 
	*/
	UiStateMessage.prototype.getUiText = function() {
	  return this.uiText;
	};

	/**
	* Set the field value
	* @memberof remotemessage.UiStateMessage
	* @param {remotemessage.UiDirection} uiDirection 
	*/
	UiStateMessage.prototype.setUiDirection = function(uiDirection) {
	  this.uiDirection = uiDirection;
	};

	/**
	* Get the field value
	* @memberof remotemessage.UiStateMessage
	* @return {remotemessage.UiDirection} 
	*/
	UiStateMessage.prototype.getUiDirection = function() {
	  return this.uiDirection;
	};

	/**
	* Set the field value
	* @memberof remotemessage.UiStateMessage
	* @param {Array.<remotemessage.InputOption>} inputOptions An array of 
	*/
	UiStateMessage.prototype.setInputOptions = function(inputOptions) {
	  this.inputOptions = inputOptions;
	};

	/**
	* Get the field value
	* @memberof remotemessage.UiStateMessage
	* @return {Array.<remotemessage.InputOption>} An array of 
	*/
	UiStateMessage.prototype.getInputOptions = function() {
	  return this.inputOptions;
	};

	/**
	* Set the field value
	* @memberof remotemessage.UiStateMessage
	* @param {remotemessage.UiState} uiState 
	*/
	UiStateMessage.prototype.setUiState = function(uiState) {
	  this.uiState = uiState;
	};

	/**
	* Get the field value
	* @memberof remotemessage.UiStateMessage
	* @return {remotemessage.UiState} 
	*/
	UiStateMessage.prototype.getUiState = function() {
	  return this.uiState;
	};

	UiStateMessage._meta_ =  {fields:  {}};
	UiStateMessage._meta_._class_ =  UiStateMessage;
	UiStateMessage._meta_._superMeta_ = remotemessage_Message._meta_;
	UiStateMessage._meta_.fields["uiText"] = {};
	UiStateMessage._meta_.fields["uiText"].type = String;
	UiStateMessage._meta_.fields["uiDirection"] = {};
	UiStateMessage._meta_.fields["uiDirection"].type = remotemessage_UiDirection;
	UiStateMessage._meta_.fields["inputOptions"] = {};
	UiStateMessage._meta_.fields["inputOptions"].type = Array;
	UiStateMessage._meta_.fields["inputOptions"].elementType = remotemessage_InputOption;
	UiStateMessage._meta_.fields["uiState"] = {};
	UiStateMessage._meta_.fields["uiState"].type = remotemessage_UiState;

	//
	// Expose the module.
	//
	if (true) {
	module.exports = UiStateMessage;
	}



/***/ }),
/* 1128 */
/***/ (function(module, exports, __webpack_require__) {

	/**
	 * Autogenerated by Avro
	 * 
	 * DO NOT EDIT DIRECTLY
	 */

	var remotemessage_Method = __webpack_require__(2);
	var remotemessage_VasConfigMessage = __webpack_require__(485);

	/**
	* @constructor
	* @augments remotemessage.VasConfigMessage
	* @memberof remotemessage
	*/
	var VasConfigChangedMessage = function() {
	  remotemessage_VasConfigMessage.call(this);
	  this._superClass_ = remotemessage_VasConfigMessage;
	  this._class_ = VasConfigChangedMessage;
	  this.setMethod(remotemessage_Method["VAS_CONFIG_CHANGED"]);
	  this.proxyProvider = undefined;
	};

	VasConfigChangedMessage.prototype = Object.create(remotemessage_VasConfigMessage.prototype);
	VasConfigChangedMessage.prototype.constructor = VasConfigChangedMessage;

	/**
	* Set the field value
	* The package name of the proxy that is set for the vas providers.
	*
	* @memberof remotemessage.VasConfigChangedMessage
	* @param {String} proxyProvider 
	*/
	VasConfigChangedMessage.prototype.setProxyProvider = function(proxyProvider) {
	  this.proxyProvider = proxyProvider;
	};

	/**
	* Get the field value
	* The package name of the proxy that is set for the vas providers.
	* @memberof remotemessage.VasConfigChangedMessage
	* @return {String} 
	*/
	VasConfigChangedMessage.prototype.getProxyProvider = function() {
	  return this.proxyProvider;
	};

	VasConfigChangedMessage._meta_ =  {fields:  {}};
	VasConfigChangedMessage._meta_._class_ =  VasConfigChangedMessage;
	VasConfigChangedMessage._meta_._superMeta_ = remotemessage_VasConfigMessage._meta_;
	VasConfigChangedMessage._meta_.fields["proxyProvider"] = {};
	VasConfigChangedMessage._meta_.fields["proxyProvider"].type = String;

	//
	// Expose the module.
	//
	if (true) {
	module.exports = VasConfigChangedMessage;
	}



/***/ }),
/* 1129 */
/***/ (function(module, exports, __webpack_require__) {

	/**
	 * Autogenerated by Avro
	 * 
	 * DO NOT EDIT DIRECTLY
	 */

	var remotemessage_Method = __webpack_require__(2);
	var payments_VasMode = __webpack_require__(256);
	var remotemessage_Message = __webpack_require__(3);
	var payments_VasPayload = __webpack_require__(464);

	/**
	* @constructor
	* @augments remotemessage.Message
	* @memberof remotemessage
	*/
	var VasPayloadMessage = function() {
	  remotemessage_Message.call(this);
	  this._superClass_ = remotemessage_Message;
	  this._class_ = VasPayloadMessage;
	  this.setMethod(remotemessage_Method["VAS_PAYLOAD_MESSAGE"]);
	  this.vasPayload = undefined;
	  this.vasMode = undefined;
	  this.extras = undefined;
	};

	VasPayloadMessage.prototype = Object.create(remotemessage_Message.prototype);
	VasPayloadMessage.prototype.constructor = VasPayloadMessage;

	/**
	* Set the field value
	* A VAS payload
	*
	* @memberof remotemessage.VasPayloadMessage
	* @param {payments.VasPayload} vasPayload 
	*/
	VasPayloadMessage.prototype.setVasPayload = function(vasPayload) {
	  this.vasPayload = vasPayload;
	};

	/**
	* Get the field value
	* A VAS payload
	* @memberof remotemessage.VasPayloadMessage
	* @return {payments.VasPayload} 
	*/
	VasPayloadMessage.prototype.getVasPayload = function() {
	  return this.vasPayload;
	};

	/**
	* Set the field value
	* The VAS mode for the payload
	*
	* @memberof remotemessage.VasPayloadMessage
	* @param {payments.VasMode} vasMode 
	*/
	VasPayloadMessage.prototype.setVasMode = function(vasMode) {
	  this.vasMode = vasMode;
	};

	/**
	* Get the field value
	* The VAS mode for the payload
	* @memberof remotemessage.VasPayloadMessage
	* @return {payments.VasMode} 
	*/
	VasPayloadMessage.prototype.getVasMode = function() {
	  return this.vasMode;
	};

	/**
	* Set the field value
	* Extra data used by external systems.
	*
	* @memberof remotemessage.VasPayloadMessage
	* @param {Object.<String,String>} extras A map of <String> to <>
	*/
	VasPayloadMessage.prototype.setExtras = function(extras) {
	  this.extras = extras;
	};

	/**
	* Get the field value
	* Extra data used by external systems.
	* @memberof remotemessage.VasPayloadMessage
	* @return {Object.<String,String>} A map of <String> to <>
	*/
	VasPayloadMessage.prototype.getExtras = function() {
	  return this.extras;
	};

	VasPayloadMessage._meta_ =  {fields:  {}};
	VasPayloadMessage._meta_._class_ =  VasPayloadMessage;
	VasPayloadMessage._meta_._superMeta_ = remotemessage_Message._meta_;
	VasPayloadMessage._meta_.fields["vasPayload"] = {};
	VasPayloadMessage._meta_.fields["vasPayload"].type = payments_VasPayload;
	VasPayloadMessage._meta_.fields["vasMode"] = {};
	VasPayloadMessage._meta_.fields["vasMode"].type = payments_VasMode;
	VasPayloadMessage._meta_.fields["extras"] = {};
	VasPayloadMessage._meta_.fields["extras"].type = Object;

	//
	// Expose the module.
	//
	if (true) {
	module.exports = VasPayloadMessage;
	}



/***/ }),
/* 1130 */
/***/ (function(module, exports, __webpack_require__) {

	/**
	 * Autogenerated by Avro
	 * 
	 * DO NOT EDIT DIRECTLY
	 */

	var remotemessage_VasState = __webpack_require__(264);

	/**
	* @constructor
	* @memberof remotemessage
	*/
	var VasStateEnum = function() {
	  this._class_ = VasStateEnum;
	  this.vasState = undefined;
	};


	/**
	* Set the field value
	* @memberof remotemessage.VasStateEnum
	* @param {remotemessage.VasState} vasState 
	*/
	VasStateEnum.prototype.setVasState = function(vasState) {
	  this.vasState = vasState;
	};

	/**
	* Get the field value
	* @memberof remotemessage.VasStateEnum
	* @return {remotemessage.VasState} 
	*/
	VasStateEnum.prototype.getVasState = function() {
	  return this.vasState;
	};

	/**
	* @memberof remotemessage.VasStateEnum
	* @private
	*/
	VasStateEnum.prototype.getMetaInfo = function(fieldName) {
	  var curclass = this._class_;
	  do {
	    var fieldMetaInfo = curclass._meta_.fields[fieldName];
	    if(fieldMetaInfo) {
	      return fieldMetaInfo;
	    }
	    if(curclass._meta_._superMeta_) {
	      curclass = curclass._meta_._superMeta_._class_;
	    } else {
	      curclass = null;
	    }
	  } while(curclass);
	  return null;
	};

	VasStateEnum.prototype.toString = function() {
	  return JSON.stringify(this);
	};

	VasStateEnum._meta_ =  {fields:  {}};
	VasStateEnum._meta_._class_ =  VasStateEnum;
	VasStateEnum._meta_.fields["vasState"] = {};
	VasStateEnum._meta_.fields["vasState"].type = remotemessage_VasState;

	//
	// Expose the module.
	//
	if (true) {
	module.exports = VasStateEnum;
	}



/***/ }),
/* 1131 */
/***/ (function(module, exports, __webpack_require__) {

	/**
	 * Autogenerated by Avro
	 * 
	 * DO NOT EDIT DIRECTLY
	 */

	var remotemessage_Method = __webpack_require__(2);
	var remotemessage_VasState = __webpack_require__(264);
	var remotemessage_Message = __webpack_require__(3);

	/**
	* @constructor
	* @augments remotemessage.Message
	* @memberof remotemessage
	*/
	var VasStateMessage = function() {
	  remotemessage_Message.call(this);
	  this._superClass_ = remotemessage_Message;
	  this._class_ = VasStateMessage;
	  this.setMethod(remotemessage_Method["VAS_STATE"]);
	  this.oldState = undefined;
	  this.newState = undefined;
	};

	VasStateMessage.prototype = Object.create(remotemessage_Message.prototype);
	VasStateMessage.prototype.constructor = VasStateMessage;

	/**
	* Set the field value
	* The previous state of the vas system
	*
	* @memberof remotemessage.VasStateMessage
	* @param {remotemessage.VasState} oldState 
	*/
	VasStateMessage.prototype.setOldState = function(oldState) {
	  this.oldState = oldState;
	};

	/**
	* Get the field value
	* The previous state of the vas system
	* @memberof remotemessage.VasStateMessage
	* @return {remotemessage.VasState} 
	*/
	VasStateMessage.prototype.getOldState = function() {
	  return this.oldState;
	};

	/**
	* Set the field value
	* The current state of the vas system
	*
	* @memberof remotemessage.VasStateMessage
	* @param {remotemessage.VasState} newState 
	*/
	VasStateMessage.prototype.setNewState = function(newState) {
	  this.newState = newState;
	};

	/**
	* Get the field value
	* The current state of the vas system
	* @memberof remotemessage.VasStateMessage
	* @return {remotemessage.VasState} 
	*/
	VasStateMessage.prototype.getNewState = function() {
	  return this.newState;
	};

	VasStateMessage._meta_ =  {fields:  {}};
	VasStateMessage._meta_._class_ =  VasStateMessage;
	VasStateMessage._meta_._superMeta_ = remotemessage_Message._meta_;
	VasStateMessage._meta_.fields["oldState"] = {};
	VasStateMessage._meta_.fields["oldState"].type = remotemessage_VasState;
	VasStateMessage._meta_.fields["newState"] = {};
	VasStateMessage._meta_.fields["newState"].type = remotemessage_VasState;

	//
	// Expose the module.
	//
	if (true) {
	module.exports = VasStateMessage;
	}



/***/ }),
/* 1132 */
/***/ (function(module, exports, __webpack_require__) {

	/**
	 * Autogenerated by Avro
	 * 
	 * DO NOT EDIT DIRECTLY
	 */

	var remotemessage_Method = __webpack_require__(2);
	var remotemessage_Message = __webpack_require__(3);

	/**
	* @constructor
	* @augments remotemessage.Message
	* @memberof remotemessage
	*/
	var VaultCardMessage = function() {
	  remotemessage_Message.call(this);
	  this._superClass_ = remotemessage_Message;
	  this._class_ = VaultCardMessage;
	  this.setMethod(remotemessage_Method["VAULT_CARD"]);
	  this.cardEntryMethods = undefined;
	  this.tokenType = undefined;
	  this.singleUse = false;
	};

	VaultCardMessage.prototype = Object.create(remotemessage_Message.prototype);
	VaultCardMessage.prototype.constructor = VaultCardMessage;

	/**
	* Set the field value
	* Allowed entry methods
	*
	* @memberof remotemessage.VaultCardMessage
	* @param {Number} cardEntryMethods must be an integer
	*/
	VaultCardMessage.prototype.setCardEntryMethods = function(cardEntryMethods) {
	  this.cardEntryMethods = cardEntryMethods;
	};

	/**
	* Get the field value
	* Allowed entry methods
	* @memberof remotemessage.VaultCardMessage
	* @return {Number} must be an integer
	*/
	VaultCardMessage.prototype.getCardEntryMethods = function() {
	  return this.cardEntryMethods;
	};

	/**
	* Set the field value
	* If set, this indicates the token type.  If unset or unrecognized, the default legacy type of tokenization is used
	*
	* @memberof remotemessage.VaultCardMessage
	* @param {String} tokenType 
	*/
	VaultCardMessage.prototype.setTokenType = function(tokenType) {
	  this.tokenType = tokenType;
	};

	/**
	* Get the field value
	* If set, this indicates the token type.  If unset or unrecognized, the default legacy type of tokenization is used
	* @memberof remotemessage.VaultCardMessage
	* @return {String} 
	*/
	VaultCardMessage.prototype.getTokenType = function() {
	  return this.tokenType;
	};

	/**
	* Set the field value
	* If true, then request a token that can be used only one time.
	*
	* @memberof remotemessage.VaultCardMessage
	* @param {Boolean} singleUse 
	*/
	VaultCardMessage.prototype.setSingleUse = function(singleUse) {
	  this.singleUse = singleUse;
	};

	/**
	* Get the field value
	* If true, then request a token that can be used only one time.
	* @memberof remotemessage.VaultCardMessage
	* @return {Boolean} 
	*/
	VaultCardMessage.prototype.getSingleUse = function() {
	  return this.singleUse;
	};

	VaultCardMessage._meta_ =  {fields:  {}};
	VaultCardMessage._meta_._class_ =  VaultCardMessage;
	VaultCardMessage._meta_._superMeta_ = remotemessage_Message._meta_;
	VaultCardMessage._meta_.fields["cardEntryMethods"] = {};
	VaultCardMessage._meta_.fields["cardEntryMethods"].type = Number;
	VaultCardMessage._meta_.fields["tokenType"] = {};
	VaultCardMessage._meta_.fields["tokenType"].type = String;
	VaultCardMessage._meta_.fields["singleUse"] = {};
	VaultCardMessage._meta_.fields["singleUse"].type = Boolean;

	//
	// Expose the module.
	//
	if (true) {
	module.exports = VaultCardMessage;
	}



/***/ }),
/* 1133 */
/***/ (function(module, exports, __webpack_require__) {

	/**
	 * Autogenerated by Avro
	 * 
	 * DO NOT EDIT DIRECTLY
	 */

	var remotemessage_Method = __webpack_require__(2);
	var remotemessage_ResultStatus = __webpack_require__(23);
	var remotemessage_Message = __webpack_require__(3);
	var payments_VaultedCard = __webpack_require__(70);

	/**
	* @constructor
	* @augments remotemessage.Message
	* @memberof remotemessage
	*/
	var VaultCardResponseMessage = function() {
	  remotemessage_Message.call(this);
	  this._superClass_ = remotemessage_Message;
	  this._class_ = VaultCardResponseMessage;
	  this.setMethod(remotemessage_Method["VAULT_CARD_RESPONSE"]);
	  this.reason = undefined;
	  this.status = undefined;
	  this.tokenType = undefined;
	  this.card = undefined;
	};

	VaultCardResponseMessage.prototype = Object.create(remotemessage_Message.prototype);
	VaultCardResponseMessage.prototype.constructor = VaultCardResponseMessage;

	/**
	* Set the field value
	* May be populated when the operation fails.
	*
	* @memberof remotemessage.VaultCardResponseMessage
	* @param {String} reason 
	*/
	VaultCardResponseMessage.prototype.setReason = function(reason) {
	  this.reason = reason;
	};

	/**
	* Get the field value
	* May be populated when the operation fails.
	* @memberof remotemessage.VaultCardResponseMessage
	* @return {String} 
	*/
	VaultCardResponseMessage.prototype.getReason = function() {
	  return this.reason;
	};

	/**
	* Set the field value
	* @memberof remotemessage.VaultCardResponseMessage
	* @param {remotemessage.ResultStatus} status 
	*/
	VaultCardResponseMessage.prototype.setStatus = function(status) {
	  this.status = status;
	};

	/**
	* Get the field value
	* @memberof remotemessage.VaultCardResponseMessage
	* @return {remotemessage.ResultStatus} 
	*/
	VaultCardResponseMessage.prototype.getStatus = function() {
	  return this.status;
	};

	/**
	* Set the field value
	* If set, this indicates the token type.  If unset or unrecognized, the default legacy type of tokenization was used
	*
	* @memberof remotemessage.VaultCardResponseMessage
	* @param {String} tokenType 
	*/
	VaultCardResponseMessage.prototype.setTokenType = function(tokenType) {
	  this.tokenType = tokenType;
	};

	/**
	* Get the field value
	* If set, this indicates the token type.  If unset or unrecognized, the default legacy type of tokenization was used
	* @memberof remotemessage.VaultCardResponseMessage
	* @return {String} 
	*/
	VaultCardResponseMessage.prototype.getTokenType = function() {
	  return this.tokenType;
	};

	/**
	* Set the field value
	* The card that was vaulted.
	*
	* @memberof remotemessage.VaultCardResponseMessage
	* @param {payments.VaultedCard} card 
	*/
	VaultCardResponseMessage.prototype.setCard = function(card) {
	  this.card = card;
	};

	/**
	* Get the field value
	* The card that was vaulted.
	* @memberof remotemessage.VaultCardResponseMessage
	* @return {payments.VaultedCard} 
	*/
	VaultCardResponseMessage.prototype.getCard = function() {
	  return this.card;
	};

	VaultCardResponseMessage._meta_ =  {fields:  {}};
	VaultCardResponseMessage._meta_._class_ =  VaultCardResponseMessage;
	VaultCardResponseMessage._meta_._superMeta_ = remotemessage_Message._meta_;
	VaultCardResponseMessage._meta_.fields["reason"] = {};
	VaultCardResponseMessage._meta_.fields["reason"].type = String;
	VaultCardResponseMessage._meta_.fields["status"] = {};
	VaultCardResponseMessage._meta_.fields["status"].type = remotemessage_ResultStatus;
	VaultCardResponseMessage._meta_.fields["tokenType"] = {};
	VaultCardResponseMessage._meta_.fields["tokenType"].type = String;
	VaultCardResponseMessage._meta_.fields["card"] = {};
	VaultCardResponseMessage._meta_.fields["card"].type = payments_VaultedCard;

	//
	// Expose the module.
	//
	if (true) {
	module.exports = VaultCardResponseMessage;
	}



/***/ }),
/* 1134 */
/***/ (function(module, exports, __webpack_require__) {

	/**
	 * Autogenerated by Avro
	 * 
	 * DO NOT EDIT DIRECTLY
	 */

	var remotemessage_Method = __webpack_require__(2);
	var remotemessage_Message = __webpack_require__(3);
	var payments_Payment = __webpack_require__(11);
	var base_Signature = __webpack_require__(86);

	/**
	* @constructor
	* @augments remotemessage.Message
	* @memberof remotemessage
	*/
	var VerifySignatureMessage = function() {
	  remotemessage_Message.call(this);
	  this._superClass_ = remotemessage_Message;
	  this._class_ = VerifySignatureMessage;
	  this.setMethod(remotemessage_Method["VERIFY_SIGNATURE"]);
	  this.payment = undefined;
	  this.signature = undefined;
	};

	VerifySignatureMessage.prototype = Object.create(remotemessage_Message.prototype);
	VerifySignatureMessage.prototype.constructor = VerifySignatureMessage;

	/**
	* Set the field value
	* A payment
	*
	* @memberof remotemessage.VerifySignatureMessage
	* @param {payments.Payment} payment 
	*/
	VerifySignatureMessage.prototype.setPayment = function(payment) {
	  this.payment = payment;
	};

	/**
	* Get the field value
	* A payment
	* @memberof remotemessage.VerifySignatureMessage
	* @return {payments.Payment} 
	*/
	VerifySignatureMessage.prototype.getPayment = function() {
	  return this.payment;
	};

	/**
	* Set the field value
	* A signature
	*
	* @memberof remotemessage.VerifySignatureMessage
	* @param {base.Signature} signature 
	*/
	VerifySignatureMessage.prototype.setSignature = function(signature) {
	  this.signature = signature;
	};

	/**
	* Get the field value
	* A signature
	* @memberof remotemessage.VerifySignatureMessage
	* @return {base.Signature} 
	*/
	VerifySignatureMessage.prototype.getSignature = function() {
	  return this.signature;
	};

	VerifySignatureMessage._meta_ =  {fields:  {}};
	VerifySignatureMessage._meta_._class_ =  VerifySignatureMessage;
	VerifySignatureMessage._meta_._superMeta_ = remotemessage_Message._meta_;
	VerifySignatureMessage._meta_.fields["payment"] = {};
	VerifySignatureMessage._meta_.fields["payment"].type = payments_Payment;
	VerifySignatureMessage._meta_.fields["signature"] = {};
	VerifySignatureMessage._meta_.fields["signature"].type = base_Signature;

	//
	// Expose the module.
	//
	if (true) {
	module.exports = VerifySignatureMessage;
	}



/***/ }),
/* 1135 */
/***/ (function(module, exports, __webpack_require__) {

	/**
	 * Autogenerated by Avro
	 * 
	 * DO NOT EDIT DIRECTLY
	 */

	var remotemessage_Method = __webpack_require__(2);
	var remotemessage_Message = __webpack_require__(3);

	/**
	* @constructor
	* @augments remotemessage.Message
	* @memberof remotemessage
	*/
	var VoidCreditMessage = function() {
	  remotemessage_Message.call(this);
	  this._superClass_ = remotemessage_Message;
	  this._class_ = VoidCreditMessage;
	  this.setMethod(remotemessage_Method["VOID_CREDIT"]);
	  this.orderId = undefined;
	  this.creditId = undefined;
	  this.disableCloverPrinting = false;
	  this.disableReceiptSelection = false;
	};

	VoidCreditMessage.prototype = Object.create(remotemessage_Message.prototype);
	VoidCreditMessage.prototype.constructor = VoidCreditMessage;

	/**
	* Set the field value
	* @memberof remotemessage.VoidCreditMessage
	* @param {String} orderId 
	*/
	VoidCreditMessage.prototype.setOrderId = function(orderId) {
	  this.orderId = orderId;
	};

	/**
	* Get the field value
	* @memberof remotemessage.VoidCreditMessage
	* @return {String} 
	*/
	VoidCreditMessage.prototype.getOrderId = function() {
	  return this.orderId;
	};

	/**
	* Set the field value
	* @memberof remotemessage.VoidCreditMessage
	* @param {String} creditId 
	*/
	VoidCreditMessage.prototype.setCreditId = function(creditId) {
	  this.creditId = creditId;
	};

	/**
	* Get the field value
	* @memberof remotemessage.VoidCreditMessage
	* @return {String} 
	*/
	VoidCreditMessage.prototype.getCreditId = function() {
	  return this.creditId;
	};

	/**
	* Set the field value
	* @memberof remotemessage.VoidCreditMessage
	* @param {Boolean} disableCloverPrinting 
	*/
	VoidCreditMessage.prototype.setDisableCloverPrinting = function(disableCloverPrinting) {
	  this.disableCloverPrinting = disableCloverPrinting;
	};

	/**
	* Get the field value
	* @memberof remotemessage.VoidCreditMessage
	* @return {Boolean} 
	*/
	VoidCreditMessage.prototype.getDisableCloverPrinting = function() {
	  return this.disableCloverPrinting;
	};

	/**
	* Set the field value
	* @memberof remotemessage.VoidCreditMessage
	* @param {Boolean} disableReceiptSelection 
	*/
	VoidCreditMessage.prototype.setDisableReceiptSelection = function(disableReceiptSelection) {
	  this.disableReceiptSelection = disableReceiptSelection;
	};

	/**
	* Get the field value
	* @memberof remotemessage.VoidCreditMessage
	* @return {Boolean} 
	*/
	VoidCreditMessage.prototype.getDisableReceiptSelection = function() {
	  return this.disableReceiptSelection;
	};

	VoidCreditMessage._meta_ =  {fields:  {}};
	VoidCreditMessage._meta_._class_ =  VoidCreditMessage;
	VoidCreditMessage._meta_._superMeta_ = remotemessage_Message._meta_;
	VoidCreditMessage._meta_.fields["orderId"] = {};
	VoidCreditMessage._meta_.fields["orderId"].type = String;
	VoidCreditMessage._meta_.fields["creditId"] = {};
	VoidCreditMessage._meta_.fields["creditId"].type = String;
	VoidCreditMessage._meta_.fields["disableCloverPrinting"] = {};
	VoidCreditMessage._meta_.fields["disableCloverPrinting"].type = Boolean;
	VoidCreditMessage._meta_.fields["disableReceiptSelection"] = {};
	VoidCreditMessage._meta_.fields["disableReceiptSelection"].type = Boolean;

	//
	// Expose the module.
	//
	if (true) {
	module.exports = VoidCreditMessage;
	}



/***/ }),
/* 1136 */
/***/ (function(module, exports, __webpack_require__) {

	/**
	 * Autogenerated by Avro
	 * 
	 * DO NOT EDIT DIRECTLY
	 */

	var remotemessage_Method = __webpack_require__(2);
	var remotemessage_ResultStatus = __webpack_require__(23);
	var remotemessage_Message = __webpack_require__(3);
	var payments_Credit = __webpack_require__(30);

	/**
	* @constructor
	* @augments remotemessage.Message
	* @memberof remotemessage
	*/
	var VoidCreditResponseMessage = function() {
	  remotemessage_Message.call(this);
	  this._superClass_ = remotemessage_Message;
	  this._class_ = VoidCreditResponseMessage;
	  this.setMethod(remotemessage_Method["VOID_CREDIT_RESPONSE"]);
	  this.credit = undefined;
	  this.status = undefined;
	  this.success = false;
	  this.reason = undefined;
	  this.message = undefined;
	};

	VoidCreditResponseMessage.prototype = Object.create(remotemessage_Message.prototype);
	VoidCreditResponseMessage.prototype.constructor = VoidCreditResponseMessage;

	/**
	* Set the field value
	* @memberof remotemessage.VoidCreditResponseMessage
	* @param {payments.Credit} credit 
	*/
	VoidCreditResponseMessage.prototype.setCredit = function(credit) {
	  this.credit = credit;
	};

	/**
	* Get the field value
	* @memberof remotemessage.VoidCreditResponseMessage
	* @return {payments.Credit} 
	*/
	VoidCreditResponseMessage.prototype.getCredit = function() {
	  return this.credit;
	};

	/**
	* Set the field value
	* @memberof remotemessage.VoidCreditResponseMessage
	* @param {remotemessage.ResultStatus} status 
	*/
	VoidCreditResponseMessage.prototype.setStatus = function(status) {
	  this.status = status;
	};

	/**
	* Get the field value
	* @memberof remotemessage.VoidCreditResponseMessage
	* @return {remotemessage.ResultStatus} 
	*/
	VoidCreditResponseMessage.prototype.getStatus = function() {
	  return this.status;
	};

	/**
	* Set the field value
	* @memberof remotemessage.VoidCreditResponseMessage
	* @param {Boolean} success 
	*/
	VoidCreditResponseMessage.prototype.setSuccess = function(success) {
	  this.success = success;
	};

	/**
	* Get the field value
	* @memberof remotemessage.VoidCreditResponseMessage
	* @return {Boolean} 
	*/
	VoidCreditResponseMessage.prototype.getSuccess = function() {
	  return this.success;
	};

	/**
	* Set the field value
	* @memberof remotemessage.VoidCreditResponseMessage
	* @param {String} reason 
	*/
	VoidCreditResponseMessage.prototype.setReason = function(reason) {
	  this.reason = reason;
	};

	/**
	* Get the field value
	* @memberof remotemessage.VoidCreditResponseMessage
	* @return {String} 
	*/
	VoidCreditResponseMessage.prototype.getReason = function() {
	  return this.reason;
	};

	/**
	* Set the field value
	* @memberof remotemessage.VoidCreditResponseMessage
	* @param {String} message 
	*/
	VoidCreditResponseMessage.prototype.setMessage = function(message) {
	  this.message = message;
	};

	/**
	* Get the field value
	* @memberof remotemessage.VoidCreditResponseMessage
	* @return {String} 
	*/
	VoidCreditResponseMessage.prototype.getMessage = function() {
	  return this.message;
	};

	VoidCreditResponseMessage._meta_ =  {fields:  {}};
	VoidCreditResponseMessage._meta_._class_ =  VoidCreditResponseMessage;
	VoidCreditResponseMessage._meta_._superMeta_ = remotemessage_Message._meta_;
	VoidCreditResponseMessage._meta_.fields["credit"] = {};
	VoidCreditResponseMessage._meta_.fields["credit"].type = payments_Credit;
	VoidCreditResponseMessage._meta_.fields["status"] = {};
	VoidCreditResponseMessage._meta_.fields["status"].type = remotemessage_ResultStatus;
	VoidCreditResponseMessage._meta_.fields["success"] = {};
	VoidCreditResponseMessage._meta_.fields["success"].type = Boolean;
	VoidCreditResponseMessage._meta_.fields["reason"] = {};
	VoidCreditResponseMessage._meta_.fields["reason"].type = String;
	VoidCreditResponseMessage._meta_.fields["message"] = {};
	VoidCreditResponseMessage._meta_.fields["message"].type = String;

	//
	// Expose the module.
	//
	if (true) {
	module.exports = VoidCreditResponseMessage;
	}



/***/ }),
/* 1137 */
/***/ (function(module, exports, __webpack_require__) {

	/**
	 * Autogenerated by Avro
	 * 
	 * DO NOT EDIT DIRECTLY
	 */

	var remotemessage_Method = __webpack_require__(2);
	var order_VoidReason = __webpack_require__(87);
	var remotemessage_Message = __webpack_require__(3);
	var payments_Payment = __webpack_require__(11);

	/**
	* @constructor
	* @augments remotemessage.Message
	* @memberof remotemessage
	*/
	var VoidPaymentMessage = function() {
	  remotemessage_Message.call(this);
	  this._superClass_ = remotemessage_Message;
	  this._class_ = VoidPaymentMessage;
	  this.setMethod(remotemessage_Method["VOID_PAYMENT"]);
	  this.payment = undefined;
	  this.voidReason = undefined;
	  this.disableCloverPrinting = false;
	  this.disableReceiptSelection = false;
	  this.extras = undefined;
	};

	VoidPaymentMessage.prototype = Object.create(remotemessage_Message.prototype);
	VoidPaymentMessage.prototype.constructor = VoidPaymentMessage;

	/**
	* Set the field value
	* A payment
	*
	* @memberof remotemessage.VoidPaymentMessage
	* @param {payments.Payment} payment 
	*/
	VoidPaymentMessage.prototype.setPayment = function(payment) {
	  this.payment = payment;
	};

	/**
	* Get the field value
	* A payment
	* @memberof remotemessage.VoidPaymentMessage
	* @return {payments.Payment} 
	*/
	VoidPaymentMessage.prototype.getPayment = function() {
	  return this.payment;
	};

	/**
	* Set the field value
	* @memberof remotemessage.VoidPaymentMessage
	* @param {order.VoidReason} voidReason 
	*/
	VoidPaymentMessage.prototype.setVoidReason = function(voidReason) {
	  this.voidReason = voidReason;
	};

	/**
	* Get the field value
	* @memberof remotemessage.VoidPaymentMessage
	* @return {order.VoidReason} 
	*/
	VoidPaymentMessage.prototype.getVoidReason = function() {
	  return this.voidReason;
	};

	/**
	* Set the field value
	* @memberof remotemessage.VoidPaymentMessage
	* @param {Boolean} disableCloverPrinting 
	*/
	VoidPaymentMessage.prototype.setDisableCloverPrinting = function(disableCloverPrinting) {
	  this.disableCloverPrinting = disableCloverPrinting;
	};

	/**
	* Get the field value
	* @memberof remotemessage.VoidPaymentMessage
	* @return {Boolean} 
	*/
	VoidPaymentMessage.prototype.getDisableCloverPrinting = function() {
	  return this.disableCloverPrinting;
	};

	/**
	* Set the field value
	* @memberof remotemessage.VoidPaymentMessage
	* @param {Boolean} disableReceiptSelection 
	*/
	VoidPaymentMessage.prototype.setDisableReceiptSelection = function(disableReceiptSelection) {
	  this.disableReceiptSelection = disableReceiptSelection;
	};

	/**
	* Get the field value
	* @memberof remotemessage.VoidPaymentMessage
	* @return {Boolean} 
	*/
	VoidPaymentMessage.prototype.getDisableReceiptSelection = function() {
	  return this.disableReceiptSelection;
	};

	/**
	* Set the field value
	* Extra data used by external systems.
	*
	* @memberof remotemessage.VoidPaymentMessage
	* @param {Object.<String,String>} extras A map of <String> to <>
	*/
	VoidPaymentMessage.prototype.setExtras = function(extras) {
	  this.extras = extras;
	};

	/**
	* Get the field value
	* Extra data used by external systems.
	* @memberof remotemessage.VoidPaymentMessage
	* @return {Object.<String,String>} A map of <String> to <>
	*/
	VoidPaymentMessage.prototype.getExtras = function() {
	  return this.extras;
	};

	VoidPaymentMessage._meta_ =  {fields:  {}};
	VoidPaymentMessage._meta_._class_ =  VoidPaymentMessage;
	VoidPaymentMessage._meta_._superMeta_ = remotemessage_Message._meta_;
	VoidPaymentMessage._meta_.fields["payment"] = {};
	VoidPaymentMessage._meta_.fields["payment"].type = payments_Payment;
	VoidPaymentMessage._meta_.fields["voidReason"] = {};
	VoidPaymentMessage._meta_.fields["voidReason"].type = order_VoidReason;
	VoidPaymentMessage._meta_.fields["disableCloverPrinting"] = {};
	VoidPaymentMessage._meta_.fields["disableCloverPrinting"].type = Boolean;
	VoidPaymentMessage._meta_.fields["disableReceiptSelection"] = {};
	VoidPaymentMessage._meta_.fields["disableReceiptSelection"].type = Boolean;
	VoidPaymentMessage._meta_.fields["extras"] = {};
	VoidPaymentMessage._meta_.fields["extras"].type = Object;

	//
	// Expose the module.
	//
	if (true) {
	module.exports = VoidPaymentMessage;
	}



/***/ }),
/* 1138 */
/***/ (function(module, exports, __webpack_require__) {

	/**
	 * Autogenerated by Avro
	 * 
	 * DO NOT EDIT DIRECTLY
	 */

	var remotemessage_Method = __webpack_require__(2);
	var remotemessage_Message = __webpack_require__(3);

	/**
	* @constructor
	* @augments remotemessage.Message
	* @memberof remotemessage
	*/
	var VoidPaymentRefundMessage = function() {
	  remotemessage_Message.call(this);
	  this._superClass_ = remotemessage_Message;
	  this._class_ = VoidPaymentRefundMessage;
	  this.setMethod(remotemessage_Method["VOID_PAYMENT_REFUND"]);
	  this.orderId = undefined;
	  this.refundId = undefined;
	  this.disableCloverPrinting = false;
	  this.disableReceiptSelection = false;
	  this.extras = undefined;
	};

	VoidPaymentRefundMessage.prototype = Object.create(remotemessage_Message.prototype);
	VoidPaymentRefundMessage.prototype.constructor = VoidPaymentRefundMessage;

	/**
	* Set the field value
	* @memberof remotemessage.VoidPaymentRefundMessage
	* @param {String} orderId 
	*/
	VoidPaymentRefundMessage.prototype.setOrderId = function(orderId) {
	  this.orderId = orderId;
	};

	/**
	* Get the field value
	* @memberof remotemessage.VoidPaymentRefundMessage
	* @return {String} 
	*/
	VoidPaymentRefundMessage.prototype.getOrderId = function() {
	  return this.orderId;
	};

	/**
	* Set the field value
	* @memberof remotemessage.VoidPaymentRefundMessage
	* @param {String} refundId 
	*/
	VoidPaymentRefundMessage.prototype.setRefundId = function(refundId) {
	  this.refundId = refundId;
	};

	/**
	* Get the field value
	* @memberof remotemessage.VoidPaymentRefundMessage
	* @return {String} 
	*/
	VoidPaymentRefundMessage.prototype.getRefundId = function() {
	  return this.refundId;
	};

	/**
	* Set the field value
	* @memberof remotemessage.VoidPaymentRefundMessage
	* @param {Boolean} disableCloverPrinting 
	*/
	VoidPaymentRefundMessage.prototype.setDisableCloverPrinting = function(disableCloverPrinting) {
	  this.disableCloverPrinting = disableCloverPrinting;
	};

	/**
	* Get the field value
	* @memberof remotemessage.VoidPaymentRefundMessage
	* @return {Boolean} 
	*/
	VoidPaymentRefundMessage.prototype.getDisableCloverPrinting = function() {
	  return this.disableCloverPrinting;
	};

	/**
	* Set the field value
	* @memberof remotemessage.VoidPaymentRefundMessage
	* @param {Boolean} disableReceiptSelection 
	*/
	VoidPaymentRefundMessage.prototype.setDisableReceiptSelection = function(disableReceiptSelection) {
	  this.disableReceiptSelection = disableReceiptSelection;
	};

	/**
	* Get the field value
	* @memberof remotemessage.VoidPaymentRefundMessage
	* @return {Boolean} 
	*/
	VoidPaymentRefundMessage.prototype.getDisableReceiptSelection = function() {
	  return this.disableReceiptSelection;
	};

	/**
	* Set the field value
	* Extra data used by external systems.
	*
	* @memberof remotemessage.VoidPaymentRefundMessage
	* @param {Object.<String,String>} extras A map of <String> to <>
	*/
	VoidPaymentRefundMessage.prototype.setExtras = function(extras) {
	  this.extras = extras;
	};

	/**
	* Get the field value
	* Extra data used by external systems.
	* @memberof remotemessage.VoidPaymentRefundMessage
	* @return {Object.<String,String>} A map of <String> to <>
	*/
	VoidPaymentRefundMessage.prototype.getExtras = function() {
	  return this.extras;
	};

	VoidPaymentRefundMessage._meta_ =  {fields:  {}};
	VoidPaymentRefundMessage._meta_._class_ =  VoidPaymentRefundMessage;
	VoidPaymentRefundMessage._meta_._superMeta_ = remotemessage_Message._meta_;
	VoidPaymentRefundMessage._meta_.fields["orderId"] = {};
	VoidPaymentRefundMessage._meta_.fields["orderId"].type = String;
	VoidPaymentRefundMessage._meta_.fields["refundId"] = {};
	VoidPaymentRefundMessage._meta_.fields["refundId"].type = String;
	VoidPaymentRefundMessage._meta_.fields["disableCloverPrinting"] = {};
	VoidPaymentRefundMessage._meta_.fields["disableCloverPrinting"].type = Boolean;
	VoidPaymentRefundMessage._meta_.fields["disableReceiptSelection"] = {};
	VoidPaymentRefundMessage._meta_.fields["disableReceiptSelection"].type = Boolean;
	VoidPaymentRefundMessage._meta_.fields["extras"] = {};
	VoidPaymentRefundMessage._meta_.fields["extras"].type = Object;

	//
	// Expose the module.
	//
	if (true) {
	module.exports = VoidPaymentRefundMessage;
	}



/***/ }),
/* 1139 */
/***/ (function(module, exports, __webpack_require__) {

	/**
	 * Autogenerated by Avro
	 * 
	 * DO NOT EDIT DIRECTLY
	 */

	var remotemessage_Method = __webpack_require__(2);
	var remotemessage_ResultStatus = __webpack_require__(23);
	var remotemessage_Message = __webpack_require__(3);
	var payments_Refund = __webpack_require__(26);

	/**
	* @constructor
	* @augments remotemessage.Message
	* @memberof remotemessage
	*/
	var VoidPaymentRefundResponseMessage = function() {
	  remotemessage_Message.call(this);
	  this._superClass_ = remotemessage_Message;
	  this._class_ = VoidPaymentRefundResponseMessage;
	  this.setMethod(remotemessage_Method["VOID_PAYMENT_REFUND_RESPONSE"]);
	  this.refund = undefined;
	  this.status = undefined;
	  this.success = false;
	  this.reason = undefined;
	  this.message = undefined;
	};

	VoidPaymentRefundResponseMessage.prototype = Object.create(remotemessage_Message.prototype);
	VoidPaymentRefundResponseMessage.prototype.constructor = VoidPaymentRefundResponseMessage;

	/**
	* Set the field value
	* @memberof remotemessage.VoidPaymentRefundResponseMessage
	* @param {payments.Refund} refund 
	*/
	VoidPaymentRefundResponseMessage.prototype.setRefund = function(refund) {
	  this.refund = refund;
	};

	/**
	* Get the field value
	* @memberof remotemessage.VoidPaymentRefundResponseMessage
	* @return {payments.Refund} 
	*/
	VoidPaymentRefundResponseMessage.prototype.getRefund = function() {
	  return this.refund;
	};

	/**
	* Set the field value
	* @memberof remotemessage.VoidPaymentRefundResponseMessage
	* @param {remotemessage.ResultStatus} status 
	*/
	VoidPaymentRefundResponseMessage.prototype.setStatus = function(status) {
	  this.status = status;
	};

	/**
	* Get the field value
	* @memberof remotemessage.VoidPaymentRefundResponseMessage
	* @return {remotemessage.ResultStatus} 
	*/
	VoidPaymentRefundResponseMessage.prototype.getStatus = function() {
	  return this.status;
	};

	/**
	* Set the field value
	* @memberof remotemessage.VoidPaymentRefundResponseMessage
	* @param {Boolean} success 
	*/
	VoidPaymentRefundResponseMessage.prototype.setSuccess = function(success) {
	  this.success = success;
	};

	/**
	* Get the field value
	* @memberof remotemessage.VoidPaymentRefundResponseMessage
	* @return {Boolean} 
	*/
	VoidPaymentRefundResponseMessage.prototype.getSuccess = function() {
	  return this.success;
	};

	/**
	* Set the field value
	* @memberof remotemessage.VoidPaymentRefundResponseMessage
	* @param {String} reason 
	*/
	VoidPaymentRefundResponseMessage.prototype.setReason = function(reason) {
	  this.reason = reason;
	};

	/**
	* Get the field value
	* @memberof remotemessage.VoidPaymentRefundResponseMessage
	* @return {String} 
	*/
	VoidPaymentRefundResponseMessage.prototype.getReason = function() {
	  return this.reason;
	};

	/**
	* Set the field value
	* @memberof remotemessage.VoidPaymentRefundResponseMessage
	* @param {String} message 
	*/
	VoidPaymentRefundResponseMessage.prototype.setMessage = function(message) {
	  this.message = message;
	};

	/**
	* Get the field value
	* @memberof remotemessage.VoidPaymentRefundResponseMessage
	* @return {String} 
	*/
	VoidPaymentRefundResponseMessage.prototype.getMessage = function() {
	  return this.message;
	};

	VoidPaymentRefundResponseMessage._meta_ =  {fields:  {}};
	VoidPaymentRefundResponseMessage._meta_._class_ =  VoidPaymentRefundResponseMessage;
	VoidPaymentRefundResponseMessage._meta_._superMeta_ = remotemessage_Message._meta_;
	VoidPaymentRefundResponseMessage._meta_.fields["refund"] = {};
	VoidPaymentRefundResponseMessage._meta_.fields["refund"].type = payments_Refund;
	VoidPaymentRefundResponseMessage._meta_.fields["status"] = {};
	VoidPaymentRefundResponseMessage._meta_.fields["status"].type = remotemessage_ResultStatus;
	VoidPaymentRefundResponseMessage._meta_.fields["success"] = {};
	VoidPaymentRefundResponseMessage._meta_.fields["success"].type = Boolean;
	VoidPaymentRefundResponseMessage._meta_.fields["reason"] = {};
	VoidPaymentRefundResponseMessage._meta_.fields["reason"].type = String;
	VoidPaymentRefundResponseMessage._meta_.fields["message"] = {};
	VoidPaymentRefundResponseMessage._meta_.fields["message"].type = String;

	//
	// Expose the module.
	//
	if (true) {
	module.exports = VoidPaymentRefundResponseMessage;
	}



/***/ }),
/* 1140 */
/***/ (function(module, exports, __webpack_require__) {

	/**
	 * Autogenerated by Avro
	 * 
	 * DO NOT EDIT DIRECTLY
	 */

	var remotemessage_Method = __webpack_require__(2);
	var order_VoidReason = __webpack_require__(87);
	var remotemessage_ResultStatus = __webpack_require__(23);
	var remotemessage_Message = __webpack_require__(3);
	var payments_Payment = __webpack_require__(11);

	/**
	* @constructor
	* @augments remotemessage.Message
	* @memberof remotemessage
	*/
	var VoidPaymentResponseMessage = function() {
	  remotemessage_Message.call(this);
	  this._superClass_ = remotemessage_Message;
	  this._class_ = VoidPaymentResponseMessage;
	  this.setMethod(remotemessage_Method["VOID_PAYMENT_RESPONSE"]);
	  this.payment = undefined;
	  this.voidReason = undefined;
	  this.status = undefined;
	  this.success = false;
	  this.reason = undefined;
	  this.message = undefined;
	};

	VoidPaymentResponseMessage.prototype = Object.create(remotemessage_Message.prototype);
	VoidPaymentResponseMessage.prototype.constructor = VoidPaymentResponseMessage;

	/**
	* Set the field value
	* @memberof remotemessage.VoidPaymentResponseMessage
	* @param {payments.Payment} payment 
	*/
	VoidPaymentResponseMessage.prototype.setPayment = function(payment) {
	  this.payment = payment;
	};

	/**
	* Get the field value
	* @memberof remotemessage.VoidPaymentResponseMessage
	* @return {payments.Payment} 
	*/
	VoidPaymentResponseMessage.prototype.getPayment = function() {
	  return this.payment;
	};

	/**
	* Set the field value
	* @memberof remotemessage.VoidPaymentResponseMessage
	* @param {order.VoidReason} voidReason 
	*/
	VoidPaymentResponseMessage.prototype.setVoidReason = function(voidReason) {
	  this.voidReason = voidReason;
	};

	/**
	* Get the field value
	* @memberof remotemessage.VoidPaymentResponseMessage
	* @return {order.VoidReason} 
	*/
	VoidPaymentResponseMessage.prototype.getVoidReason = function() {
	  return this.voidReason;
	};

	/**
	* Set the field value
	* @memberof remotemessage.VoidPaymentResponseMessage
	* @param {remotemessage.ResultStatus} status 
	*/
	VoidPaymentResponseMessage.prototype.setStatus = function(status) {
	  this.status = status;
	};

	/**
	* Get the field value
	* @memberof remotemessage.VoidPaymentResponseMessage
	* @return {remotemessage.ResultStatus} 
	*/
	VoidPaymentResponseMessage.prototype.getStatus = function() {
	  return this.status;
	};

	/**
	* Set the field value
	* @memberof remotemessage.VoidPaymentResponseMessage
	* @param {Boolean} success 
	*/
	VoidPaymentResponseMessage.prototype.setSuccess = function(success) {
	  this.success = success;
	};

	/**
	* Get the field value
	* @memberof remotemessage.VoidPaymentResponseMessage
	* @return {Boolean} 
	*/
	VoidPaymentResponseMessage.prototype.getSuccess = function() {
	  return this.success;
	};

	/**
	* Set the field value
	* @memberof remotemessage.VoidPaymentResponseMessage
	* @param {String} reason 
	*/
	VoidPaymentResponseMessage.prototype.setReason = function(reason) {
	  this.reason = reason;
	};

	/**
	* Get the field value
	* @memberof remotemessage.VoidPaymentResponseMessage
	* @return {String} 
	*/
	VoidPaymentResponseMessage.prototype.getReason = function() {
	  return this.reason;
	};

	/**
	* Set the field value
	* @memberof remotemessage.VoidPaymentResponseMessage
	* @param {String} message 
	*/
	VoidPaymentResponseMessage.prototype.setMessage = function(message) {
	  this.message = message;
	};

	/**
	* Get the field value
	* @memberof remotemessage.VoidPaymentResponseMessage
	* @return {String} 
	*/
	VoidPaymentResponseMessage.prototype.getMessage = function() {
	  return this.message;
	};

	VoidPaymentResponseMessage._meta_ =  {fields:  {}};
	VoidPaymentResponseMessage._meta_._class_ =  VoidPaymentResponseMessage;
	VoidPaymentResponseMessage._meta_._superMeta_ = remotemessage_Message._meta_;
	VoidPaymentResponseMessage._meta_.fields["payment"] = {};
	VoidPaymentResponseMessage._meta_.fields["payment"].type = payments_Payment;
	VoidPaymentResponseMessage._meta_.fields["voidReason"] = {};
	VoidPaymentResponseMessage._meta_.fields["voidReason"].type = order_VoidReason;
	VoidPaymentResponseMessage._meta_.fields["status"] = {};
	VoidPaymentResponseMessage._meta_.fields["status"].type = remotemessage_ResultStatus;
	VoidPaymentResponseMessage._meta_.fields["success"] = {};
	VoidPaymentResponseMessage._meta_.fields["success"].type = Boolean;
	VoidPaymentResponseMessage._meta_.fields["reason"] = {};
	VoidPaymentResponseMessage._meta_.fields["reason"].type = String;
	VoidPaymentResponseMessage._meta_.fields["message"] = {};
	VoidPaymentResponseMessage._meta_.fields["message"].type = String;

	//
	// Expose the module.
	//
	if (true) {
	module.exports = VoidPaymentResponseMessage;
	}



/***/ }),
/* 1141 */
/***/ (function(module, exports, __webpack_require__) {

	/**
	 * Autogenerated by Avro
	 * 
	 * DO NOT EDIT DIRECTLY
	 */

	var remotemessage_Method = __webpack_require__(2);
	var remotemessage_Message = __webpack_require__(3);

	/**
	* @constructor
	* @augments remotemessage.Message
	* @memberof remotemessage
	*/
	var WelcomeMessage = function() {
	  remotemessage_Message.call(this);
	  this._superClass_ = remotemessage_Message;
	  this._class_ = WelcomeMessage;
	  this.setMethod(remotemessage_Method["SHOW_WELCOME_SCREEN"]);
	};

	WelcomeMessage.prototype = Object.create(remotemessage_Message.prototype);
	WelcomeMessage.prototype.constructor = WelcomeMessage;

	WelcomeMessage._meta_ =  {fields:  {}};
	WelcomeMessage._meta_._class_ =  WelcomeMessage;
	WelcomeMessage._meta_._superMeta_ = remotemessage_Message._meta_;

	//
	// Expose the module.
	//
	if (true) {
	module.exports = WelcomeMessage;
	}



/***/ }),
/* 1142 */
/***/ (function(module, exports, __webpack_require__) {

	
	module.exports.remotemessage = remotemessage;
	/**
	* @namespace remotemessage
	*/
	function remotemessage() {}


	remotemessage.AcknowledgementMessage = __webpack_require__(1025);
	remotemessage.ActivityMessageFromActivity = __webpack_require__(1026);
	remotemessage.ActivityMessageToActivity = __webpack_require__(1027);
	remotemessage.ActivityRequest = __webpack_require__(1028);
	remotemessage.ActivityResponseMessage = __webpack_require__(1029);
	remotemessage.AddDiscountAction = __webpack_require__(471);
	remotemessage.AddLineItemAction = __webpack_require__(472);
	remotemessage.BalanceInquiryRequestMessage = __webpack_require__(1030);
	remotemessage.BalanceInquiryResponseMessage = __webpack_require__(1031);
	remotemessage.BreakMessage = __webpack_require__(1032);
	remotemessage.CapturePreAuthMessage = __webpack_require__(1033);
	remotemessage.CapturePreAuthResponseMessage = __webpack_require__(1034);
	remotemessage.CardDataRequestMessage = __webpack_require__(1035);
	remotemessage.CardDataResponseMessage = __webpack_require__(1036);
	remotemessage.CashbackSelectedMessage = __webpack_require__(1037);
	remotemessage.CloseoutRequestMessage = __webpack_require__(1038);
	remotemessage.CloseoutResponseMessage = __webpack_require__(1039);
	remotemessage.CloverDeviceLogMessage = __webpack_require__(1040);
	remotemessage.ConfigurationChangeMessage = __webpack_require__(1041);
	remotemessage.ConfirmPaymentMessage = __webpack_require__(1042);
	remotemessage.CreditPrintMessage = __webpack_require__(1043);
	remotemessage.CustomerInfoMessage = __webpack_require__(1044);
	remotemessage.CustomerProvidedDataMessage = __webpack_require__(1045);
	remotemessage.DeclineCreditPrintMessage = __webpack_require__(1046);
	remotemessage.DeclinePaymentPrintMessage = __webpack_require__(1047);
	remotemessage.DiscoveryRequestMessage = __webpack_require__(1048);
	remotemessage.DiscoveryResponseMessage = __webpack_require__(1049);
	remotemessage.EmployeePermissionsRequest = __webpack_require__(1050);
	remotemessage.ErrorCode = __webpack_require__(259);
	remotemessage.ErrorCodeEnum = __webpack_require__(1051);
	remotemessage.ExternalDeviceState = __webpack_require__(123);
	remotemessage.ExternalDeviceStateData = __webpack_require__(260);
	remotemessage.ExternalDeviceStateEnum = __webpack_require__(1052);
	remotemessage.ExternalDeviceSubState = __webpack_require__(261);
	remotemessage.FinishCancelMessage = __webpack_require__(1053);
	remotemessage.FinishOkMessage = __webpack_require__(1054);
	remotemessage.ForceConnectMessage = __webpack_require__(1055);
	remotemessage.GetPrintersRequestMessage = __webpack_require__(1056);
	remotemessage.GetPrintersResponseMessage = __webpack_require__(1057);
	remotemessage.ImagePrintMessage = __webpack_require__(1058);
	remotemessage.IncrementPreAuthMessage = __webpack_require__(1059);
	remotemessage.IncrementPreAuthResponseMessage = __webpack_require__(1060);
	remotemessage.InputOption = __webpack_require__(473);
	remotemessage.InvalidStateTransitionMessage = __webpack_require__(1061);
	remotemessage.KeyPress = __webpack_require__(167);
	remotemessage.KeyPressEnum = __webpack_require__(1062);
	remotemessage.KeyPressMessage = __webpack_require__(1063);
	remotemessage.LastMessageRequestMessage = __webpack_require__(1064);
	remotemessage.LastMessageResponseMessage = __webpack_require__(1065);
	remotemessage.LogLevelEnum = __webpack_require__(474);
	remotemessage.LogMessage = __webpack_require__(1066);
	remotemessage.LoyaltyPointsCalculatedMessage = __webpack_require__(1067);
	remotemessage.LoyaltyPointsEarnedMessage = __webpack_require__(1068);
	remotemessage.LoyaltyPointsReceiptPrintedMessage = __webpack_require__(1069);
	remotemessage.Message = __webpack_require__(3);
	remotemessage.Method = __webpack_require__(2);
	remotemessage.OpenCashDrawerMessage = __webpack_require__(1070);
	remotemessage.OrderActionAddDiscountMessage = __webpack_require__(1071);
	remotemessage.OrderActionAddLineItemMessage = __webpack_require__(1072);
	remotemessage.OrderActionRemoveDiscountMessage = __webpack_require__(1073);
	remotemessage.OrderActionRemoveLineItemMessage = __webpack_require__(1074);
	remotemessage.OrderActionResponse = __webpack_require__(475);
	remotemessage.OrderActionResponseMessage = __webpack_require__(1075);
	remotemessage.OrderUpdateMessage = __webpack_require__(1076);
	remotemessage.PairingCodeMessage = __webpack_require__(1077);
	remotemessage.PairingRequestMessage = __webpack_require__(476);
	remotemessage.PairingResponseMessage = __webpack_require__(1078);
	remotemessage.PairingState = __webpack_require__(477);
	remotemessage.PartialAuthMessage = __webpack_require__(1079);
	remotemessage.PayIntent = __webpack_require__(262);
	remotemessage.PaymentConfirmedMessage = __webpack_require__(1080);
	remotemessage.PaymentPrintMerchantCopyMessage = __webpack_require__(1081);
	remotemessage.PaymentPrintMessage = __webpack_require__(1082);
	remotemessage.PaymentRejectedMessage = __webpack_require__(1083);
	remotemessage.PaymentVoidedMessage = __webpack_require__(1084);
	remotemessage.PrintJobStatusRequestMessage = __webpack_require__(1085);
	remotemessage.PrintJobStatusResponseMessage = __webpack_require__(1086);
	remotemessage.QueryStatus = __webpack_require__(263);
	remotemessage.QueryStatusEnum = __webpack_require__(1087);
	remotemessage.RefundPaymentPrintMessage = __webpack_require__(1088);
	remotemessage.RefundRequestMessage = __webpack_require__(1089);
	remotemessage.RefundResponseMessage = __webpack_require__(1090);
	remotemessage.RegisterForCustomerProvidedDataMessage = __webpack_require__(1091);
	remotemessage.RemoteError = __webpack_require__(1092);
	remotemessage.RemoteMessage = __webpack_require__(1093);
	remotemessage.RemoteMessageType = __webpack_require__(478);
	remotemessage.RemoveDiscountAction = __webpack_require__(479);
	remotemessage.RemoveLineItemAction = __webpack_require__(480);
	remotemessage.RequestTipRequestMessage = __webpack_require__(1094);
	remotemessage.RequestTipResponseMessage = __webpack_require__(1095);
	remotemessage.ResetDeviceResponseMessage = __webpack_require__(1096);
	remotemessage.ResetMessage = __webpack_require__(1097);
	remotemessage.ResultStatus = __webpack_require__(23);
	remotemessage.ResultStatusEnum = __webpack_require__(1098);
	remotemessage.RetrieveCustomActivitiesRequestMessage = __webpack_require__(1099);
	remotemessage.RetrieveCustomActivitiesResponseMessage = __webpack_require__(1100);
	remotemessage.RetrieveDeviceStatusRequestMessage = __webpack_require__(1101);
	remotemessage.RetrieveDeviceStatusResponseMessage = __webpack_require__(1102);
	remotemessage.RetrievePaymentRequestMessage = __webpack_require__(1103);
	remotemessage.RetrievePaymentResponseMessage = __webpack_require__(1104);
	remotemessage.RetrievePendingPaymentsMessage = __webpack_require__(1105);
	remotemessage.RetrievePendingPaymentsResponseMessage = __webpack_require__(1106);
	remotemessage.ShowPaymentReceiptOptionsMessage = __webpack_require__(1107);
	remotemessage.ShowReceiptOptionsMessage = __webpack_require__(1108);
	remotemessage.ShowReceiptOptionsResponseMessage = __webpack_require__(1109);
	remotemessage.ShutDownMessage = __webpack_require__(1110);
	remotemessage.SignatureRequestMessage = __webpack_require__(1111);
	remotemessage.SignatureResponseMessage = __webpack_require__(1112);
	remotemessage.SignatureVerifiedMessage = __webpack_require__(1113);
	remotemessage.StartVasMessage = __webpack_require__(1114);
	remotemessage.StopVasMessage = __webpack_require__(1115);
	remotemessage.TerminalMessage = __webpack_require__(1116);
	remotemessage.TextPrintMessage = __webpack_require__(1117);
	remotemessage.ThankYouMessage = __webpack_require__(1118);
	remotemessage.TipAddedMessage = __webpack_require__(1119);
	remotemessage.TipAdjustMessage = __webpack_require__(1120);
	remotemessage.TipAdjustResponseMessage = __webpack_require__(1121);
	remotemessage.TransactionType = __webpack_require__(481);
	remotemessage.TxStartRequestMessage = __webpack_require__(1122);
	remotemessage.TxStartResponseMessage = __webpack_require__(1123);
	remotemessage.TxStartResponseResult = __webpack_require__(482);
	remotemessage.TxState = __webpack_require__(168);
	remotemessage.TxStateEnum = __webpack_require__(1124);
	remotemessage.TxStateMessage = __webpack_require__(1125);
	remotemessage.TxTypeRequestInfo = __webpack_require__(1126);
	remotemessage.UiDirection = __webpack_require__(483);
	remotemessage.UiState = __webpack_require__(484);
	remotemessage.UiStateMessage = __webpack_require__(1127);
	remotemessage.VasConfigChangedMessage = __webpack_require__(1128);
	remotemessage.VasConfigMessage = __webpack_require__(485);
	remotemessage.VasPayloadMessage = __webpack_require__(1129);
	remotemessage.VasState = __webpack_require__(264);
	remotemessage.VasStateEnum = __webpack_require__(1130);
	remotemessage.VasStateMessage = __webpack_require__(1131);
	remotemessage.VaultCardMessage = __webpack_require__(1132);
	remotemessage.VaultCardResponseMessage = __webpack_require__(1133);
	remotemessage.VerifySignatureMessage = __webpack_require__(1134);
	remotemessage.VoidCreditMessage = __webpack_require__(1135);
	remotemessage.VoidCreditResponseMessage = __webpack_require__(1136);
	remotemessage.VoidPaymentMessage = __webpack_require__(1137);
	remotemessage.VoidPaymentRefundMessage = __webpack_require__(1138);
	remotemessage.VoidPaymentRefundResponseMessage = __webpack_require__(1139);
	remotemessage.VoidPaymentResponseMessage = __webpack_require__(1140);
	remotemessage.WelcomeMessage = __webpack_require__(1141);

	//
	// Expose the module.
	//
	if (true) {
	  module.exports = remotemessage;
	}
	    

/***/ }),
/* 1143 */
/***/ (function(module, exports, __webpack_require__) {

	/**
	 * Autogenerated by Avro
	 * 
	 * DO NOT EDIT DIRECTLY
	 */

	var remotepay_TransactionType = __webpack_require__(89);
	var remotepay_TransactionRequest = __webpack_require__(273);

	/** A authorization request */
	/**
	* @constructor
	* @augments remotepay.TransactionRequest
	* @memberof remotepay
	*/
	var AuthRequest = function() {
	  remotepay_TransactionRequest.call(this);
	  this._superClass_ = remotepay_TransactionRequest;
	  this._class_ = AuthRequest;
	  this.type = remotepay_TransactionType["PAYMENT"];
	};

	AuthRequest.prototype = Object.create(remotepay_TransactionRequest.prototype);
	AuthRequest.prototype.constructor = AuthRequest;

	AuthRequest._meta_ =  {fields:  {}};
	AuthRequest._meta_._class_ =  AuthRequest;
	AuthRequest._meta_._superMeta_ = remotepay_TransactionRequest._meta_;

	//
	// Expose the module.
	//
	if (true) {
	module.exports = AuthRequest;
	}



/***/ }),
/* 1144 */
/***/ (function(module, exports, __webpack_require__) {

	/**
	 * Autogenerated by Avro
	 * 
	 * DO NOT EDIT DIRECTLY
	 */

	var remotepay_PaymentResponse = __webpack_require__(125);

	/** The response to an authorization request */
	/**
	* @constructor
	* @augments remotepay.PaymentResponse
	* @memberof remotepay
	*/
	var AuthResponse = function() {
	  remotepay_PaymentResponse.call(this);
	  this._superClass_ = remotepay_PaymentResponse;
	  this._class_ = AuthResponse;
	};

	AuthResponse.prototype = Object.create(remotepay_PaymentResponse.prototype);
	AuthResponse.prototype.constructor = AuthResponse;

	AuthResponse._meta_ =  {fields:  {}};
	AuthResponse._meta_._class_ =  AuthResponse;
	AuthResponse._meta_._superMeta_ = remotepay_PaymentResponse._meta_;

	//
	// Expose the module.
	//
	if (true) {
	module.exports = AuthResponse;
	}



/***/ }),
/* 1145 */
/***/ (function(module, exports, __webpack_require__) {

	/**
	 * Autogenerated by Avro
	 * 
	 * DO NOT EDIT DIRECTLY
	 */

	var remotepay_BaseRequest = __webpack_require__(14);

	/** Captures a previously made pre auth */
	/**
	* @constructor
	* @augments remotepay.BaseRequest
	* @memberof remotepay
	*/
	var CapturePreAuthRequest = function() {
	  remotepay_BaseRequest.call(this);
	  this._superClass_ = remotepay_BaseRequest;
	  this._class_ = CapturePreAuthRequest;
	  this.amount = undefined;
	  this.tipAmount = undefined;
	  this.paymentId = undefined;
	};

	CapturePreAuthRequest.prototype = Object.create(remotepay_BaseRequest.prototype);
	CapturePreAuthRequest.prototype.constructor = CapturePreAuthRequest;

	/**
	* Set the field value
	* Total amount paid
	*
	* @memberof remotepay.CapturePreAuthRequest
	* @param {Number} amount must be a long integer
	*/
	CapturePreAuthRequest.prototype.setAmount = function(amount) {
	  this.amount = amount;
	};

	/**
	* Get the field value
	* Total amount paid
	* @memberof remotepay.CapturePreAuthRequest
	* @return {Number} must be a long integer
	*/
	CapturePreAuthRequest.prototype.getAmount = function() {
	  return this.amount;
	};

	/**
	* Set the field value
	* Amount paid in tips
	*
	* @memberof remotepay.CapturePreAuthRequest
	* @param {Number|Null} tipAmount must be a long integer, 
	*/
	CapturePreAuthRequest.prototype.setTipAmount = function(tipAmount) {
	  this.tipAmount = tipAmount;
	};

	/**
	* Get the field value
	* Amount paid in tips
	* @memberof remotepay.CapturePreAuthRequest
	* @return {Number|Null} must be a long integer, 
	*/
	CapturePreAuthRequest.prototype.getTipAmount = function() {
	  return this.tipAmount;
	};

	/**
	* Set the field value
	* Unique identifier for a payment
	*
	* @memberof remotepay.CapturePreAuthRequest
	* @param {String} paymentId 
	*/
	CapturePreAuthRequest.prototype.setPaymentId = function(paymentId) {
	  this.paymentId = paymentId;
	};

	/**
	* Get the field value
	* Unique identifier for a payment
	* @memberof remotepay.CapturePreAuthRequest
	* @return {String} 
	*/
	CapturePreAuthRequest.prototype.getPaymentId = function() {
	  return this.paymentId;
	};

	CapturePreAuthRequest._meta_ =  {fields:  {}};
	CapturePreAuthRequest._meta_._class_ =  CapturePreAuthRequest;
	CapturePreAuthRequest._meta_._superMeta_ = remotepay_BaseRequest._meta_;
	CapturePreAuthRequest._meta_.fields["amount"] = {};
	CapturePreAuthRequest._meta_.fields["amount"].type = Number;
	CapturePreAuthRequest._meta_.fields["tipAmount"] = {};
	CapturePreAuthRequest._meta_.fields["tipAmount"].type = Number;
	CapturePreAuthRequest._meta_.fields["paymentId"] = {};
	CapturePreAuthRequest._meta_.fields["paymentId"].type = String;

	//
	// Expose the module.
	//
	if (true) {
	module.exports = CapturePreAuthRequest;
	}



/***/ }),
/* 1146 */
/***/ (function(module, exports, __webpack_require__) {

	/**
	 * Autogenerated by Avro
	 * 
	 * DO NOT EDIT DIRECTLY
	 */

	var remotepay_BaseResponse = __webpack_require__(15);

	/** The result of an attempt to capture a previously made pre auth */
	/**
	* @constructor
	* @augments remotepay.BaseResponse
	* @memberof remotepay
	*/
	var CapturePreAuthResponse = function() {
	  remotepay_BaseResponse.call(this);
	  this._superClass_ = remotepay_BaseResponse;
	  this._class_ = CapturePreAuthResponse;
	  this.paymentId = undefined;
	  this.amount = undefined;
	  this.tipAmount = undefined;
	};

	CapturePreAuthResponse.prototype = Object.create(remotepay_BaseResponse.prototype);
	CapturePreAuthResponse.prototype.constructor = CapturePreAuthResponse;

	/**
	* Set the field value
	* Unique identifier for a payment
	*
	* @memberof remotepay.CapturePreAuthResponse
	* @param {String} paymentId 
	*/
	CapturePreAuthResponse.prototype.setPaymentId = function(paymentId) {
	  this.paymentId = paymentId;
	};

	/**
	* Get the field value
	* Unique identifier for a payment
	* @memberof remotepay.CapturePreAuthResponse
	* @return {String} 
	*/
	CapturePreAuthResponse.prototype.getPaymentId = function() {
	  return this.paymentId;
	};

	/**
	* Set the field value
	* Total amount paid
	*
	* @memberof remotepay.CapturePreAuthResponse
	* @param {Number} amount must be a long integer
	*/
	CapturePreAuthResponse.prototype.setAmount = function(amount) {
	  this.amount = amount;
	};

	/**
	* Get the field value
	* Total amount paid
	* @memberof remotepay.CapturePreAuthResponse
	* @return {Number} must be a long integer
	*/
	CapturePreAuthResponse.prototype.getAmount = function() {
	  return this.amount;
	};

	/**
	* Set the field value
	* Included tip
	*
	* @memberof remotepay.CapturePreAuthResponse
	* @param {Number} tipAmount must be a long integer
	*/
	CapturePreAuthResponse.prototype.setTipAmount = function(tipAmount) {
	  this.tipAmount = tipAmount;
	};

	/**
	* Get the field value
	* Included tip
	* @memberof remotepay.CapturePreAuthResponse
	* @return {Number} must be a long integer
	*/
	CapturePreAuthResponse.prototype.getTipAmount = function() {
	  return this.tipAmount;
	};

	CapturePreAuthResponse._meta_ =  {fields:  {}};
	CapturePreAuthResponse._meta_._class_ =  CapturePreAuthResponse;
	CapturePreAuthResponse._meta_._superMeta_ = remotepay_BaseResponse._meta_;
	CapturePreAuthResponse._meta_.fields["paymentId"] = {};
	CapturePreAuthResponse._meta_.fields["paymentId"].type = String;
	CapturePreAuthResponse._meta_.fields["amount"] = {};
	CapturePreAuthResponse._meta_.fields["amount"].type = Number;
	CapturePreAuthResponse._meta_.fields["tipAmount"] = {};
	CapturePreAuthResponse._meta_.fields["tipAmount"].type = Number;

	//
	// Expose the module.
	//
	if (true) {
	module.exports = CapturePreAuthResponse;
	}



/***/ }),
/* 1147 */
/***/ (function(module, exports, __webpack_require__) {

	/**
	 * Autogenerated by Avro
	 * 
	 * DO NOT EDIT DIRECTLY
	 */

	var remotepay_BaseRequest = __webpack_require__(14);

	/**
	* @constructor
	* @augments remotepay.BaseRequest
	* @memberof remotepay
	*/
	var CardInfoRequest = function() {
	  remotepay_BaseRequest.call(this);
	  this._superClass_ = remotepay_BaseRequest;
	  this._class_ = CardInfoRequest;
	  this.cardEntryMethods = undefined;
	};

	CardInfoRequest.prototype = Object.create(remotepay_BaseRequest.prototype);
	CardInfoRequest.prototype.constructor = CardInfoRequest;

	/**
	* Set the field value
	* Allowed entry methods
	*
	* @memberof remotepay.CardInfoRequest
	* @param {Number} cardEntryMethods must be an integer
	*/
	CardInfoRequest.prototype.setCardEntryMethods = function(cardEntryMethods) {
	  this.cardEntryMethods = cardEntryMethods;
	};

	/**
	* Get the field value
	* Allowed entry methods
	* @memberof remotepay.CardInfoRequest
	* @return {Number} must be an integer
	*/
	CardInfoRequest.prototype.getCardEntryMethods = function() {
	  return this.cardEntryMethods;
	};

	CardInfoRequest._meta_ =  {fields:  {}};
	CardInfoRequest._meta_._class_ =  CardInfoRequest;
	CardInfoRequest._meta_._superMeta_ = remotepay_BaseRequest._meta_;
	CardInfoRequest._meta_.fields["cardEntryMethods"] = {};
	CardInfoRequest._meta_.fields["cardEntryMethods"].type = Number;

	//
	// Expose the module.
	//
	if (true) {
	module.exports = CardInfoRequest;
	}



/***/ }),
/* 1148 */
/***/ (function(module, exports, __webpack_require__) {

	/**
	 * Autogenerated by Avro
	 * 
	 * DO NOT EDIT DIRECTLY
	 */

	var remotepay_BaseResponse = __webpack_require__(15);
	var payments_VaultedCard = __webpack_require__(70);

	/**
	* @constructor
	* @augments remotepay.BaseResponse
	* @memberof remotepay
	*/
	var CardInfoResponse = function() {
	  remotepay_BaseResponse.call(this);
	  this._superClass_ = remotepay_BaseResponse;
	  this._class_ = CardInfoResponse;
	  this.card = undefined;
	};

	CardInfoResponse.prototype = Object.create(remotepay_BaseResponse.prototype);
	CardInfoResponse.prototype.constructor = CardInfoResponse;

	/**
	* Set the field value
	* The card that was vaulted.
	*
	* @memberof remotepay.CardInfoResponse
	* @param {payments.VaultedCard} card 
	*/
	CardInfoResponse.prototype.setCard = function(card) {
	  this.card = card;
	};

	/**
	* Get the field value
	* The card that was vaulted.
	* @memberof remotepay.CardInfoResponse
	* @return {payments.VaultedCard} 
	*/
	CardInfoResponse.prototype.getCard = function() {
	  return this.card;
	};

	CardInfoResponse._meta_ =  {fields:  {}};
	CardInfoResponse._meta_._class_ =  CardInfoResponse;
	CardInfoResponse._meta_._superMeta_ = remotepay_BaseResponse._meta_;
	CardInfoResponse._meta_.fields["card"] = {};
	CardInfoResponse._meta_.fields["card"].type = payments_VaultedCard;

	//
	// Expose the module.
	//
	if (true) {
	module.exports = CardInfoResponse;
	}



/***/ }),
/* 1149 */
/***/ (function(module, exports, __webpack_require__) {

	/**
	 * Autogenerated by Avro
	 * 
	 * DO NOT EDIT DIRECTLY
	 */

	var remotepay_BaseRequest = __webpack_require__(14);

	/**
	* @constructor
	* @augments remotepay.BaseRequest
	* @memberof remotepay
	*/
	var CheckBalanceRequest = function() {
	  remotepay_BaseRequest.call(this);
	  this._superClass_ = remotepay_BaseRequest;
	  this._class_ = CheckBalanceRequest;
	  this.cardEntryMethods = undefined;
	};

	CheckBalanceRequest.prototype = Object.create(remotepay_BaseRequest.prototype);
	CheckBalanceRequest.prototype.constructor = CheckBalanceRequest;

	/**
	* Set the field value
	* @memberof remotepay.CheckBalanceRequest
	* @param {Null|Number} cardEntryMethods must be an integer
	*/
	CheckBalanceRequest.prototype.setCardEntryMethods = function(cardEntryMethods) {
	  this.cardEntryMethods = cardEntryMethods;
	};

	/**
	* Get the field value
	* @memberof remotepay.CheckBalanceRequest
	* @return {Null|Number} must be an integer
	*/
	CheckBalanceRequest.prototype.getCardEntryMethods = function() {
	  return this.cardEntryMethods;
	};

	CheckBalanceRequest._meta_ =  {fields:  {}};
	CheckBalanceRequest._meta_._class_ =  CheckBalanceRequest;
	CheckBalanceRequest._meta_._superMeta_ = remotepay_BaseRequest._meta_;
	CheckBalanceRequest._meta_.fields["cardEntryMethods"] = {};
	CheckBalanceRequest._meta_.fields["cardEntryMethods"].type = Number;

	//
	// Expose the module.
	//
	if (true) {
	module.exports = CheckBalanceRequest;
	}



/***/ }),
/* 1150 */
/***/ (function(module, exports, __webpack_require__) {

	/**
	 * Autogenerated by Avro
	 * 
	 * DO NOT EDIT DIRECTLY
	 */

	var remotepay_BaseResponse = __webpack_require__(15);

	/**
	* @constructor
	* @augments remotepay.BaseResponse
	* @memberof remotepay
	*/
	var CheckBalanceResponse = function() {
	  remotepay_BaseResponse.call(this);
	  this._superClass_ = remotepay_BaseResponse;
	  this._class_ = CheckBalanceResponse;
	  this.amount = undefined;
	};

	CheckBalanceResponse.prototype = Object.create(remotepay_BaseResponse.prototype);
	CheckBalanceResponse.prototype.constructor = CheckBalanceResponse;

	/**
	* Set the field value
	* @memberof remotepay.CheckBalanceResponse
	* @param {Number} amount must be a long integer
	*/
	CheckBalanceResponse.prototype.setAmount = function(amount) {
	  this.amount = amount;
	};

	/**
	* Get the field value
	* @memberof remotepay.CheckBalanceResponse
	* @return {Number} must be a long integer
	*/
	CheckBalanceResponse.prototype.getAmount = function() {
	  return this.amount;
	};

	CheckBalanceResponse._meta_ =  {fields:  {}};
	CheckBalanceResponse._meta_._class_ =  CheckBalanceResponse;
	CheckBalanceResponse._meta_._superMeta_ = remotepay_BaseResponse._meta_;
	CheckBalanceResponse._meta_.fields["amount"] = {};
	CheckBalanceResponse._meta_.fields["amount"].type = Number;

	//
	// Expose the module.
	//
	if (true) {
	module.exports = CheckBalanceResponse;
	}



/***/ }),
/* 1151 */
/***/ (function(module, exports, __webpack_require__) {

	/**
	 * Autogenerated by Avro
	 * 
	 * DO NOT EDIT DIRECTLY
	 */

	var remotepay_BaseRequest = __webpack_require__(14);

	/** Send a request for a closeout */
	/**
	* @constructor
	* @augments remotepay.BaseRequest
	* @memberof remotepay
	*/
	var CloseoutRequest = function() {
	  remotepay_BaseRequest.call(this);
	  this._superClass_ = remotepay_BaseRequest;
	  this._class_ = CloseoutRequest;
	  this.allowOpenTabs = "false";
	  this.batchId = undefined;
	};

	CloseoutRequest.prototype = Object.create(remotepay_BaseRequest.prototype);
	CloseoutRequest.prototype.constructor = CloseoutRequest;

	/**
	* Set the field value
	* Allow closeout if there are open tabs
	*
	* @memberof remotepay.CloseoutRequest
	* @param {Boolean} allowOpenTabs 
	*/
	CloseoutRequest.prototype.setAllowOpenTabs = function(allowOpenTabs) {
	  this.allowOpenTabs = allowOpenTabs;
	};

	/**
	* Get the field value
	* Allow closeout if there are open tabs
	* @memberof remotepay.CloseoutRequest
	* @return {Boolean} 
	*/
	CloseoutRequest.prototype.getAllowOpenTabs = function() {
	  return this.allowOpenTabs;
	};

	/**
	* Set the field value
	* The batch id to close out.  If omitted, then the default current batch is used.
	*
	* @memberof remotepay.CloseoutRequest
	* @param {String} batchId 
	*/
	CloseoutRequest.prototype.setBatchId = function(batchId) {
	  this.batchId = batchId;
	};

	/**
	* Get the field value
	* The batch id to close out.  If omitted, then the default current batch is used.
	* @memberof remotepay.CloseoutRequest
	* @return {String} 
	*/
	CloseoutRequest.prototype.getBatchId = function() {
	  return this.batchId;
	};

	CloseoutRequest._meta_ =  {fields:  {}};
	CloseoutRequest._meta_._class_ =  CloseoutRequest;
	CloseoutRequest._meta_._superMeta_ = remotepay_BaseRequest._meta_;
	CloseoutRequest._meta_.fields["allowOpenTabs"] = {};
	CloseoutRequest._meta_.fields["allowOpenTabs"].type = Boolean;
	CloseoutRequest._meta_.fields["batchId"] = {};
	CloseoutRequest._meta_.fields["batchId"].type = String;

	//
	// Expose the module.
	//
	if (true) {
	module.exports = CloseoutRequest;
	}



/***/ }),
/* 1152 */
/***/ (function(module, exports, __webpack_require__) {

	/**
	 * Autogenerated by Avro
	 * 
	 * DO NOT EDIT DIRECTLY
	 */

	var payments_Batch = __webpack_require__(246);
	var remotepay_BaseResponse = __webpack_require__(15);

	/** The result of a request to do a closeout */
	/**
	* @constructor
	* @augments remotepay.BaseResponse
	* @memberof remotepay
	*/
	var CloseoutResponse = function() {
	  remotepay_BaseResponse.call(this);
	  this._superClass_ = remotepay_BaseResponse;
	  this._class_ = CloseoutResponse;
	  this.batch = undefined;
	};

	CloseoutResponse.prototype = Object.create(remotepay_BaseResponse.prototype);
	CloseoutResponse.prototype.constructor = CloseoutResponse;

	/**
	* Set the field value
	* The batch that was closed out.
	*
	* @memberof remotepay.CloseoutResponse
	* @param {payments.Batch} batch 
	*/
	CloseoutResponse.prototype.setBatch = function(batch) {
	  this.batch = batch;
	};

	/**
	* Get the field value
	* The batch that was closed out.
	* @memberof remotepay.CloseoutResponse
	* @return {payments.Batch} 
	*/
	CloseoutResponse.prototype.getBatch = function() {
	  return this.batch;
	};

	CloseoutResponse._meta_ =  {fields:  {}};
	CloseoutResponse._meta_._class_ =  CloseoutResponse;
	CloseoutResponse._meta_._superMeta_ = remotepay_BaseResponse._meta_;
	CloseoutResponse._meta_.fields["batch"] = {};
	CloseoutResponse._meta_.fields["batch"].type = payments_Batch;

	//
	// Expose the module.
	//
	if (true) {
	module.exports = CloseoutResponse;
	}



/***/ }),
/* 1153 */
/***/ (function(module, exports, __webpack_require__) {

	/**
	 * Autogenerated by Avro
	 * 
	 * DO NOT EDIT DIRECTLY
	 */

	var remotepay_DeviceErrorEventCode = __webpack_require__(267);
	var remotepay_PlatformError = __webpack_require__(491);
	var remotepay_ErrorType = __webpack_require__(488);

	/**
	* @constructor
	* @memberof remotepay
	*/
	var CloverDeviceErrorEvent = function() {
	  this._class_ = CloverDeviceErrorEvent;
	  this.message = undefined;
	  this.code = undefined;
	  this.cause = undefined;
	  this.type = undefined;
	};


	/**
	* Set the field value
	* Description of the error.
	*
	* @memberof remotepay.CloverDeviceErrorEvent
	* @param {String} message 
	*/
	CloverDeviceErrorEvent.prototype.setMessage = function(message) {
	  this.message = message;
	};

	/**
	* Get the field value
	* Description of the error.
	* @memberof remotepay.CloverDeviceErrorEvent
	* @return {String} 
	*/
	CloverDeviceErrorEvent.prototype.getMessage = function() {
	  return this.message;
	};

	/**
	* Set the field value
	* @memberof remotepay.CloverDeviceErrorEvent
	* @param {remotepay.DeviceErrorEventCode} code 
	*/
	CloverDeviceErrorEvent.prototype.setCode = function(code) {
	  this.code = code;
	};

	/**
	* Get the field value
	* @memberof remotepay.CloverDeviceErrorEvent
	* @return {remotepay.DeviceErrorEventCode} 
	*/
	CloverDeviceErrorEvent.prototype.getCode = function() {
	  return this.code;
	};

	/**
	* Set the field value
	* @memberof remotepay.CloverDeviceErrorEvent
	* @param {remotepay.PlatformError} cause 
	*/
	CloverDeviceErrorEvent.prototype.setCause = function(cause) {
	  this.cause = cause;
	};

	/**
	* Get the field value
	* @memberof remotepay.CloverDeviceErrorEvent
	* @return {remotepay.PlatformError} 
	*/
	CloverDeviceErrorEvent.prototype.getCause = function() {
	  return this.cause;
	};

	/**
	* Set the field value
	* @memberof remotepay.CloverDeviceErrorEvent
	* @param {remotepay.ErrorType} type 
	*/
	CloverDeviceErrorEvent.prototype.setType = function(type) {
	  this.type = type;
	};

	/**
	* Get the field value
	* @memberof remotepay.CloverDeviceErrorEvent
	* @return {remotepay.ErrorType} 
	*/
	CloverDeviceErrorEvent.prototype.getType = function() {
	  return this.type;
	};

	/**
	* @memberof remotepay.CloverDeviceErrorEvent
	* @private
	*/
	CloverDeviceErrorEvent.prototype.getMetaInfo = function(fieldName) {
	  var curclass = this._class_;
	  do {
	    var fieldMetaInfo = curclass._meta_.fields[fieldName];
	    if(fieldMetaInfo) {
	      return fieldMetaInfo;
	    }
	    if(curclass._meta_._superMeta_) {
	      curclass = curclass._meta_._superMeta_._class_;
	    } else {
	      curclass = null;
	    }
	  } while(curclass);
	  return null;
	};

	CloverDeviceErrorEvent.prototype.toString = function() {
	  return JSON.stringify(this);
	};

	CloverDeviceErrorEvent._meta_ =  {fields:  {}};
	CloverDeviceErrorEvent._meta_._class_ =  CloverDeviceErrorEvent;
	CloverDeviceErrorEvent._meta_.fields["message"] = {};
	CloverDeviceErrorEvent._meta_.fields["message"].type = String;
	CloverDeviceErrorEvent._meta_.fields["code"] = {};
	CloverDeviceErrorEvent._meta_.fields["code"].type = remotepay_DeviceErrorEventCode;
	CloverDeviceErrorEvent._meta_.fields["cause"] = {};
	CloverDeviceErrorEvent._meta_.fields["cause"].type = remotepay_PlatformError;
	CloverDeviceErrorEvent._meta_.fields["type"] = {};
	CloverDeviceErrorEvent._meta_.fields["type"].type = remotepay_ErrorType;

	//
	// Expose the module.
	//
	if (true) {
	module.exports = CloverDeviceErrorEvent;
	}



/***/ }),
/* 1154 */
/***/ (function(module, exports, __webpack_require__) {

	/**
	 * Autogenerated by Avro
	 * 
	 * DO NOT EDIT DIRECTLY
	 */

	var remotepay_DeviceEventState = __webpack_require__(268);
	var remotepay_InputOption = __webpack_require__(490);

	/**
	* @constructor
	* @memberof remotepay
	*/
	var CloverDeviceEvent = function() {
	  this._class_ = CloverDeviceEvent;
	  this.message = undefined;
	  this.code = undefined;
	  this.eventState = undefined;
	  this.inputOptions = undefined;
	};


	/**
	* Set the field value
	* Identifier for the request
	*
	* @memberof remotepay.CloverDeviceEvent
	* @param {String} message 
	*/
	CloverDeviceEvent.prototype.setMessage = function(message) {
	  this.message = message;
	};

	/**
	* Get the field value
	* Identifier for the request
	* @memberof remotepay.CloverDeviceEvent
	* @return {String} 
	*/
	CloverDeviceEvent.prototype.getMessage = function() {
	  return this.message;
	};

	/**
	* Set the field value
	* @memberof remotepay.CloverDeviceEvent
	* @param {Number} code must be an integer
	*/
	CloverDeviceEvent.prototype.setCode = function(code) {
	  this.code = code;
	};

	/**
	* Get the field value
	* @memberof remotepay.CloverDeviceEvent
	* @return {Number} must be an integer
	*/
	CloverDeviceEvent.prototype.getCode = function() {
	  return this.code;
	};

	/**
	* Set the field value
	* The event state
	*
	* @memberof remotepay.CloverDeviceEvent
	* @param {remotepay.DeviceEventState} eventState 
	*/
	CloverDeviceEvent.prototype.setEventState = function(eventState) {
	  this.eventState = eventState;
	};

	/**
	* Get the field value
	* The event state
	* @memberof remotepay.CloverDeviceEvent
	* @return {remotepay.DeviceEventState} 
	*/
	CloverDeviceEvent.prototype.getEventState = function() {
	  return this.eventState;
	};

	/**
	* Set the field value
	* Available input options
	*
	* @memberof remotepay.CloverDeviceEvent
	* @param {Array.<remotepay.InputOption>} inputOptions An array of 
	*/
	CloverDeviceEvent.prototype.setInputOptions = function(inputOptions) {
	  this.inputOptions = inputOptions;
	};

	/**
	* Get the field value
	* Available input options
	* @memberof remotepay.CloverDeviceEvent
	* @return {Array.<remotepay.InputOption>} An array of 
	*/
	CloverDeviceEvent.prototype.getInputOptions = function() {
	  return this.inputOptions;
	};

	/**
	* @memberof remotepay.CloverDeviceEvent
	* @private
	*/
	CloverDeviceEvent.prototype.getMetaInfo = function(fieldName) {
	  var curclass = this._class_;
	  do {
	    var fieldMetaInfo = curclass._meta_.fields[fieldName];
	    if(fieldMetaInfo) {
	      return fieldMetaInfo;
	    }
	    if(curclass._meta_._superMeta_) {
	      curclass = curclass._meta_._superMeta_._class_;
	    } else {
	      curclass = null;
	    }
	  } while(curclass);
	  return null;
	};

	CloverDeviceEvent.prototype.toString = function() {
	  return JSON.stringify(this);
	};

	CloverDeviceEvent._meta_ =  {fields:  {}};
	CloverDeviceEvent._meta_._class_ =  CloverDeviceEvent;
	CloverDeviceEvent._meta_.fields["message"] = {};
	CloverDeviceEvent._meta_.fields["message"].type = String;
	CloverDeviceEvent._meta_.fields["code"] = {};
	CloverDeviceEvent._meta_.fields["code"].type = Number;
	CloverDeviceEvent._meta_.fields["eventState"] = {};
	CloverDeviceEvent._meta_.fields["eventState"].type = remotepay_DeviceEventState;
	CloverDeviceEvent._meta_.fields["inputOptions"] = {};
	CloverDeviceEvent._meta_.fields["inputOptions"].type = Array;
	CloverDeviceEvent._meta_.fields["inputOptions"].elementType = remotepay_InputOption;

	//
	// Expose the module.
	//
	if (true) {
	module.exports = CloverDeviceEvent;
	}



/***/ }),
/* 1155 */
/***/ (function(module, exports, __webpack_require__) {

	/**
	 * Autogenerated by Avro
	 * 
	 * DO NOT EDIT DIRECTLY
	 */

	var remotepay_BaseRequest = __webpack_require__(14);
	var base_Challenge = __webpack_require__(234);
	var payments_Payment = __webpack_require__(11);

	/**
	* @constructor
	* @augments remotepay.BaseRequest
	* @memberof remotepay
	*/
	var ConfirmPaymentRequest = function() {
	  remotepay_BaseRequest.call(this);
	  this._superClass_ = remotepay_BaseRequest;
	  this._class_ = ConfirmPaymentRequest;
	  this.payment = undefined;
	  this.challenges = undefined;
	};

	ConfirmPaymentRequest.prototype = Object.create(remotepay_BaseRequest.prototype);
	ConfirmPaymentRequest.prototype.constructor = ConfirmPaymentRequest;

	/**
	* Set the field value
	* A payment that is being challenged
	*
	* @memberof remotepay.ConfirmPaymentRequest
	* @param {payments.Payment} payment 
	*/
	ConfirmPaymentRequest.prototype.setPayment = function(payment) {
	  this.payment = payment;
	};

	/**
	* Get the field value
	* A payment that is being challenged
	* @memberof remotepay.ConfirmPaymentRequest
	* @return {payments.Payment} 
	*/
	ConfirmPaymentRequest.prototype.getPayment = function() {
	  return this.payment;
	};

	/**
	* Set the field value
	* The challenges for the payment.
	*
	* @memberof remotepay.ConfirmPaymentRequest
	* @param {Array.<base.Challenge>} challenges An array of 
	*/
	ConfirmPaymentRequest.prototype.setChallenges = function(challenges) {
	  this.challenges = challenges;
	};

	/**
	* Get the field value
	* The challenges for the payment.
	* @memberof remotepay.ConfirmPaymentRequest
	* @return {Array.<base.Challenge>} An array of 
	*/
	ConfirmPaymentRequest.prototype.getChallenges = function() {
	  return this.challenges;
	};

	ConfirmPaymentRequest._meta_ =  {fields:  {}};
	ConfirmPaymentRequest._meta_._class_ =  ConfirmPaymentRequest;
	ConfirmPaymentRequest._meta_._superMeta_ = remotepay_BaseRequest._meta_;
	ConfirmPaymentRequest._meta_.fields["payment"] = {};
	ConfirmPaymentRequest._meta_.fields["payment"].type = payments_Payment;
	ConfirmPaymentRequest._meta_.fields["challenges"] = {};
	ConfirmPaymentRequest._meta_.fields["challenges"].type = Array;
	ConfirmPaymentRequest._meta_.fields["challenges"].elementType = base_Challenge;

	//
	// Expose the module.
	//
	if (true) {
	module.exports = ConfirmPaymentRequest;
	}



/***/ }),
/* 1156 */
/***/ (function(module, exports, __webpack_require__) {

	/**
	 * Autogenerated by Avro
	 * 
	 * DO NOT EDIT DIRECTLY
	 */

	var remotepay_BaseRequest = __webpack_require__(14);

	/** Request to start a custom activity on a device. */
	/**
	* @constructor
	* @augments remotepay.BaseRequest
	* @memberof remotepay
	*/
	var CustomActivityRequest = function() {
	  remotepay_BaseRequest.call(this);
	  this._superClass_ = remotepay_BaseRequest;
	  this._class_ = CustomActivityRequest;
	  this.action = undefined;
	  this.payload = undefined;
	  this.nonBlocking = undefined;
	};

	CustomActivityRequest.prototype = Object.create(remotepay_BaseRequest.prototype);
	CustomActivityRequest.prototype.constructor = CustomActivityRequest;

	/**
	* Set the field value
	* The name of the action for this activity
	*
	* @memberof remotepay.CustomActivityRequest
	* @param {String} action 
	*/
	CustomActivityRequest.prototype.setAction = function(action) {
	  this.action = action;
	};

	/**
	* Get the field value
	* The name of the action for this activity
	* @memberof remotepay.CustomActivityRequest
	* @return {String} 
	*/
	CustomActivityRequest.prototype.getAction = function() {
	  return this.action;
	};

	/**
	* Set the field value
	* Data for this activity
	*
	* @memberof remotepay.CustomActivityRequest
	* @param {String} payload 
	*/
	CustomActivityRequest.prototype.setPayload = function(payload) {
	  this.payload = payload;
	};

	/**
	* Get the field value
	* Data for this activity
	* @memberof remotepay.CustomActivityRequest
	* @return {String} 
	*/
	CustomActivityRequest.prototype.getPayload = function() {
	  return this.payload;
	};

	/**
	* Set the field value
	* If true, then the activity can be stopped in regular execution.
	*
	* @memberof remotepay.CustomActivityRequest
	* @param {Boolean} nonBlocking 
	*/
	CustomActivityRequest.prototype.setNonBlocking = function(nonBlocking) {
	  this.nonBlocking = nonBlocking;
	};

	/**
	* Get the field value
	* If true, then the activity can be stopped in regular execution.
	* @memberof remotepay.CustomActivityRequest
	* @return {Boolean} 
	*/
	CustomActivityRequest.prototype.getNonBlocking = function() {
	  return this.nonBlocking;
	};

	CustomActivityRequest._meta_ =  {fields:  {}};
	CustomActivityRequest._meta_._class_ =  CustomActivityRequest;
	CustomActivityRequest._meta_._superMeta_ = remotepay_BaseRequest._meta_;
	CustomActivityRequest._meta_.fields["action"] = {};
	CustomActivityRequest._meta_.fields["action"].type = String;
	CustomActivityRequest._meta_.fields["payload"] = {};
	CustomActivityRequest._meta_.fields["payload"].type = String;
	CustomActivityRequest._meta_.fields["nonBlocking"] = {};
	CustomActivityRequest._meta_.fields["nonBlocking"].type = Boolean;

	//
	// Expose the module.
	//
	if (true) {
	module.exports = CustomActivityRequest;
	}



/***/ }),
/* 1157 */
/***/ (function(module, exports, __webpack_require__) {

	/**
	 * Autogenerated by Avro
	 * 
	 * DO NOT EDIT DIRECTLY
	 */

	var remotepay_BaseResponse = __webpack_require__(15);

	/**
	* @constructor
	* @augments remotepay.BaseResponse
	* @memberof remotepay
	*/
	var CustomActivityResponse = function() {
	  remotepay_BaseResponse.call(this);
	  this._superClass_ = remotepay_BaseResponse;
	  this._class_ = CustomActivityResponse;
	  this.payload = undefined;
	  this.action = undefined;
	};

	CustomActivityResponse.prototype = Object.create(remotepay_BaseResponse.prototype);
	CustomActivityResponse.prototype.constructor = CustomActivityResponse;

	/**
	* Set the field value
	* Response data for this activity
	*
	* @memberof remotepay.CustomActivityResponse
	* @param {String} payload 
	*/
	CustomActivityResponse.prototype.setPayload = function(payload) {
	  this.payload = payload;
	};

	/**
	* Get the field value
	* Response data for this activity
	* @memberof remotepay.CustomActivityResponse
	* @return {String} 
	*/
	CustomActivityResponse.prototype.getPayload = function() {
	  return this.payload;
	};

	/**
	* Set the field value
	* The name of the action for this activity
	*
	* @memberof remotepay.CustomActivityResponse
	* @param {String} action 
	*/
	CustomActivityResponse.prototype.setAction = function(action) {
	  this.action = action;
	};

	/**
	* Get the field value
	* The name of the action for this activity
	* @memberof remotepay.CustomActivityResponse
	* @return {String} 
	*/
	CustomActivityResponse.prototype.getAction = function() {
	  return this.action;
	};

	CustomActivityResponse._meta_ =  {fields:  {}};
	CustomActivityResponse._meta_._class_ =  CustomActivityResponse;
	CustomActivityResponse._meta_._superMeta_ = remotepay_BaseResponse._meta_;
	CustomActivityResponse._meta_.fields["payload"] = {};
	CustomActivityResponse._meta_.fields["payload"].type = String;
	CustomActivityResponse._meta_.fields["action"] = {};
	CustomActivityResponse._meta_.fields["action"].type = String;

	//
	// Expose the module.
	//
	if (true) {
	module.exports = CustomActivityResponse;
	}



/***/ }),
/* 1158 */
/***/ (function(module, exports, __webpack_require__) {

	/**
	 * Autogenerated by Avro
	 * 
	 * DO NOT EDIT DIRECTLY
	 */

	var remotepay_DataProviderConfig = __webpack_require__(266);
	var remotepay_BaseResponse = __webpack_require__(15);

	/**
	* @constructor
	* @augments remotepay.BaseResponse
	* @memberof remotepay
	*/
	var CustomerProvidedDataEvent = function() {
	  remotepay_BaseResponse.call(this);
	  this._superClass_ = remotepay_BaseResponse;
	  this._class_ = CustomerProvidedDataEvent;
	  this.eventId = undefined;
	  this.config = undefined;
	  this.data = undefined;
	};

	CustomerProvidedDataEvent.prototype = Object.create(remotepay_BaseResponse.prototype);
	CustomerProvidedDataEvent.prototype.constructor = CustomerProvidedDataEvent;

	/**
	* Set the field value
	* An id that represents this collection event
	*
	* @memberof remotepay.CustomerProvidedDataEvent
	* @param {String} eventId 
	*/
	CustomerProvidedDataEvent.prototype.setEventId = function(eventId) {
	  this.eventId = eventId;
	};

	/**
	* Get the field value
	* An id that represents this collection event
	* @memberof remotepay.CustomerProvidedDataEvent
	* @return {String} 
	*/
	CustomerProvidedDataEvent.prototype.getEventId = function() {
	  return this.eventId;
	};

	/**
	* Set the field value
	* The configuration that identifies what this event data represents.  This is used when interpreting the data.
	*
	* @memberof remotepay.CustomerProvidedDataEvent
	* @param {remotepay.DataProviderConfig} config 
	*/
	CustomerProvidedDataEvent.prototype.setConfig = function(config) {
	  this.config = config;
	};

	/**
	* Get the field value
	* The configuration that identifies what this event data represents.  This is used when interpreting the data.
	* @memberof remotepay.CustomerProvidedDataEvent
	* @return {remotepay.DataProviderConfig} 
	*/
	CustomerProvidedDataEvent.prototype.getConfig = function() {
	  return this.config;
	};

	/**
	* Set the field value
	* The data that was collected.  This is similar to a CLOB.
	*
	* @memberof remotepay.CustomerProvidedDataEvent
	* @param {String} data 
	*/
	CustomerProvidedDataEvent.prototype.setData = function(data) {
	  this.data = data;
	};

	/**
	* Get the field value
	* The data that was collected.  This is similar to a CLOB.
	* @memberof remotepay.CustomerProvidedDataEvent
	* @return {String} 
	*/
	CustomerProvidedDataEvent.prototype.getData = function() {
	  return this.data;
	};

	CustomerProvidedDataEvent._meta_ =  {fields:  {}};
	CustomerProvidedDataEvent._meta_._class_ =  CustomerProvidedDataEvent;
	CustomerProvidedDataEvent._meta_._superMeta_ = remotepay_BaseResponse._meta_;
	CustomerProvidedDataEvent._meta_.fields["eventId"] = {};
	CustomerProvidedDataEvent._meta_.fields["eventId"].type = String;
	CustomerProvidedDataEvent._meta_.fields["config"] = {};
	CustomerProvidedDataEvent._meta_.fields["config"].type = remotepay_DataProviderConfig;
	CustomerProvidedDataEvent._meta_.fields["data"] = {};
	CustomerProvidedDataEvent._meta_.fields["data"].type = String;

	//
	// Expose the module.
	//
	if (true) {
	module.exports = CustomerProvidedDataEvent;
	}



/***/ }),
/* 1159 */
/***/ (function(module, exports, __webpack_require__) {

	/**
	 * Autogenerated by Avro
	 * 
	 * DO NOT EDIT DIRECTLY
	 */

	var remotepay_DeviceErrorEventCode = __webpack_require__(267);
	var remotepay_DeviceEventState = __webpack_require__(268);

	/**
	* @constructor
	* @memberof remotepay
	*/
	var DeviceEventEnum = function() {
	  this._class_ = DeviceEventEnum;
	  this.deviceErrorEventCode = undefined;
	  this.deviceEventState = undefined;
	};


	/**
	* Set the field value
	* @memberof remotepay.DeviceEventEnum
	* @param {remotepay.DeviceErrorEventCode} deviceErrorEventCode 
	*/
	DeviceEventEnum.prototype.setDeviceErrorEventCode = function(deviceErrorEventCode) {
	  this.deviceErrorEventCode = deviceErrorEventCode;
	};

	/**
	* Get the field value
	* @memberof remotepay.DeviceEventEnum
	* @return {remotepay.DeviceErrorEventCode} 
	*/
	DeviceEventEnum.prototype.getDeviceErrorEventCode = function() {
	  return this.deviceErrorEventCode;
	};

	/**
	* Set the field value
	* @memberof remotepay.DeviceEventEnum
	* @param {remotepay.DeviceEventState} deviceEventState 
	*/
	DeviceEventEnum.prototype.setDeviceEventState = function(deviceEventState) {
	  this.deviceEventState = deviceEventState;
	};

	/**
	* Get the field value
	* @memberof remotepay.DeviceEventEnum
	* @return {remotepay.DeviceEventState} 
	*/
	DeviceEventEnum.prototype.getDeviceEventState = function() {
	  return this.deviceEventState;
	};

	/**
	* @memberof remotepay.DeviceEventEnum
	* @private
	*/
	DeviceEventEnum.prototype.getMetaInfo = function(fieldName) {
	  var curclass = this._class_;
	  do {
	    var fieldMetaInfo = curclass._meta_.fields[fieldName];
	    if(fieldMetaInfo) {
	      return fieldMetaInfo;
	    }
	    if(curclass._meta_._superMeta_) {
	      curclass = curclass._meta_._superMeta_._class_;
	    } else {
	      curclass = null;
	    }
	  } while(curclass);
	  return null;
	};

	DeviceEventEnum.prototype.toString = function() {
	  return JSON.stringify(this);
	};

	DeviceEventEnum._meta_ =  {fields:  {}};
	DeviceEventEnum._meta_._class_ =  DeviceEventEnum;
	DeviceEventEnum._meta_.fields["deviceErrorEventCode"] = {};
	DeviceEventEnum._meta_.fields["deviceErrorEventCode"].type = remotepay_DeviceErrorEventCode;
	DeviceEventEnum._meta_.fields["deviceEventState"] = {};
	DeviceEventEnum._meta_.fields["deviceEventState"].type = remotepay_DeviceEventState;

	//
	// Expose the module.
	//
	if (true) {
	module.exports = DeviceEventEnum;
	}



/***/ }),
/* 1160 */
/***/ (function(module, exports, __webpack_require__) {

	/**
	 * Autogenerated by Avro
	 * 
	 * DO NOT EDIT DIRECTLY
	 */


	/**
	* @constructor
	* @memberof remotepay
	*/
	var DisplayReceiptOptionsRequest = function() {
	  this._class_ = DisplayReceiptOptionsRequest;
	  this.orderId = undefined;
	  this.paymentId = undefined;
	  this.refundId = undefined;
	  this.creditId = undefined;
	  this.disablePrinting = false;
	};


	/**
	* Set the field value
	* Unique identifier of a Clover order
	*
	* @memberof remotepay.DisplayReceiptOptionsRequest
	* @param {String} orderId 
	*/
	DisplayReceiptOptionsRequest.prototype.setOrderId = function(orderId) {
	  this.orderId = orderId;
	};

	/**
	* Get the field value
	* Unique identifier of a Clover order
	* @memberof remotepay.DisplayReceiptOptionsRequest
	* @return {String} 
	*/
	DisplayReceiptOptionsRequest.prototype.getOrderId = function() {
	  return this.orderId;
	};

	/**
	* Set the field value
	* Unique identifier of the payment associated with an order
	*
	* @memberof remotepay.DisplayReceiptOptionsRequest
	* @param {String} paymentId 
	*/
	DisplayReceiptOptionsRequest.prototype.setPaymentId = function(paymentId) {
	  this.paymentId = paymentId;
	};

	/**
	* Get the field value
	* Unique identifier of the payment associated with an order
	* @memberof remotepay.DisplayReceiptOptionsRequest
	* @return {String} 
	*/
	DisplayReceiptOptionsRequest.prototype.getPaymentId = function() {
	  return this.paymentId;
	};

	/**
	* Set the field value
	* Unique identifier of the refund associated with an order
	*
	* @memberof remotepay.DisplayReceiptOptionsRequest
	* @param {String} refundId 
	*/
	DisplayReceiptOptionsRequest.prototype.setRefundId = function(refundId) {
	  this.refundId = refundId;
	};

	/**
	* Get the field value
	* Unique identifier of the refund associated with an order
	* @memberof remotepay.DisplayReceiptOptionsRequest
	* @return {String} 
	*/
	DisplayReceiptOptionsRequest.prototype.getRefundId = function() {
	  return this.refundId;
	};

	/**
	* Set the field value
	* Unique identifier of a credit (manual refund) given to a customer
	*
	* @memberof remotepay.DisplayReceiptOptionsRequest
	* @param {String} creditId 
	*/
	DisplayReceiptOptionsRequest.prototype.setCreditId = function(creditId) {
	  this.creditId = creditId;
	};

	/**
	* Get the field value
	* Unique identifier of a credit (manual refund) given to a customer
	* @memberof remotepay.DisplayReceiptOptionsRequest
	* @return {String} 
	*/
	DisplayReceiptOptionsRequest.prototype.getCreditId = function() {
	  return this.creditId;
	};

	/**
	* Set the field value
	* @memberof remotepay.DisplayReceiptOptionsRequest
	* @param {Boolean} disablePrinting 
	*/
	DisplayReceiptOptionsRequest.prototype.setDisablePrinting = function(disablePrinting) {
	  this.disablePrinting = disablePrinting;
	};

	/**
	* Get the field value
	* @memberof remotepay.DisplayReceiptOptionsRequest
	* @return {Boolean} 
	*/
	DisplayReceiptOptionsRequest.prototype.getDisablePrinting = function() {
	  return this.disablePrinting;
	};

	/**
	* @memberof remotepay.DisplayReceiptOptionsRequest
	* @private
	*/
	DisplayReceiptOptionsRequest.prototype.getMetaInfo = function(fieldName) {
	  var curclass = this._class_;
	  do {
	    var fieldMetaInfo = curclass._meta_.fields[fieldName];
	    if(fieldMetaInfo) {
	      return fieldMetaInfo;
	    }
	    if(curclass._meta_._superMeta_) {
	      curclass = curclass._meta_._superMeta_._class_;
	    } else {
	      curclass = null;
	    }
	  } while(curclass);
	  return null;
	};

	DisplayReceiptOptionsRequest.prototype.toString = function() {
	  return JSON.stringify(this);
	};

	DisplayReceiptOptionsRequest._meta_ =  {fields:  {}};
	DisplayReceiptOptionsRequest._meta_._class_ =  DisplayReceiptOptionsRequest;
	DisplayReceiptOptionsRequest._meta_.fields["orderId"] = {};
	DisplayReceiptOptionsRequest._meta_.fields["orderId"].type = String;
	DisplayReceiptOptionsRequest._meta_.fields["paymentId"] = {};
	DisplayReceiptOptionsRequest._meta_.fields["paymentId"].type = String;
	DisplayReceiptOptionsRequest._meta_.fields["refundId"] = {};
	DisplayReceiptOptionsRequest._meta_.fields["refundId"].type = String;
	DisplayReceiptOptionsRequest._meta_.fields["creditId"] = {};
	DisplayReceiptOptionsRequest._meta_.fields["creditId"].type = String;
	DisplayReceiptOptionsRequest._meta_.fields["disablePrinting"] = {};
	DisplayReceiptOptionsRequest._meta_.fields["disablePrinting"].type = Boolean;

	//
	// Expose the module.
	//
	if (true) {
	module.exports = DisplayReceiptOptionsRequest;
	}



/***/ }),
/* 1161 */
/***/ (function(module, exports, __webpack_require__) {

	/**
	 * Autogenerated by Avro
	 * 
	 * DO NOT EDIT DIRECTLY
	 */

	var remotepay_ResultStatus = __webpack_require__(170);
	var remotepay_BaseResponse = __webpack_require__(15);

	/**
	* @constructor
	* @augments remotepay.BaseResponse
	* @memberof remotepay
	*/
	var DisplayReceiptOptionsResponse = function() {
	  remotepay_BaseResponse.call(this);
	  this._superClass_ = remotepay_BaseResponse;
	  this._class_ = DisplayReceiptOptionsResponse;
	  this.resultStatus = undefined;
	};

	DisplayReceiptOptionsResponse.prototype = Object.create(remotepay_BaseResponse.prototype);
	DisplayReceiptOptionsResponse.prototype.constructor = DisplayReceiptOptionsResponse;

	/**
	* Set the field value
	* The status of the request.
	*
	* @memberof remotepay.DisplayReceiptOptionsResponse
	* @param {remotepay.ResultStatus} resultStatus 
	*/
	DisplayReceiptOptionsResponse.prototype.setResultStatus = function(resultStatus) {
	  this.resultStatus = resultStatus;
	};

	/**
	* Get the field value
	* The status of the request.
	* @memberof remotepay.DisplayReceiptOptionsResponse
	* @return {remotepay.ResultStatus} 
	*/
	DisplayReceiptOptionsResponse.prototype.getResultStatus = function() {
	  return this.resultStatus;
	};

	DisplayReceiptOptionsResponse._meta_ =  {fields:  {}};
	DisplayReceiptOptionsResponse._meta_._class_ =  DisplayReceiptOptionsResponse;
	DisplayReceiptOptionsResponse._meta_._superMeta_ = remotepay_BaseResponse._meta_;
	DisplayReceiptOptionsResponse._meta_.fields["resultStatus"] = {};
	DisplayReceiptOptionsResponse._meta_.fields["resultStatus"].type = remotepay_ResultStatus;

	//
	// Expose the module.
	//
	if (true) {
	module.exports = DisplayReceiptOptionsResponse;
	}



/***/ }),
/* 1162 */
/***/ (function(module, exports, __webpack_require__) {

	/**
	 * Autogenerated by Avro
	 * 
	 * DO NOT EDIT DIRECTLY
	 */

	var remotepay_ExternalDeviceState = __webpack_require__(124);

	/**
	* @constructor
	* @memberof remotepay
	*/
	var ExternalDeviceStateEnum = function() {
	  this._class_ = ExternalDeviceStateEnum;
	  this.state = undefined;
	};


	/**
	* Set the field value
	* @memberof remotepay.ExternalDeviceStateEnum
	* @param {remotepay.ExternalDeviceState} state 
	*/
	ExternalDeviceStateEnum.prototype.setState = function(state) {
	  this.state = state;
	};

	/**
	* Get the field value
	* @memberof remotepay.ExternalDeviceStateEnum
	* @return {remotepay.ExternalDeviceState} 
	*/
	ExternalDeviceStateEnum.prototype.getState = function() {
	  return this.state;
	};

	/**
	* @memberof remotepay.ExternalDeviceStateEnum
	* @private
	*/
	ExternalDeviceStateEnum.prototype.getMetaInfo = function(fieldName) {
	  var curclass = this._class_;
	  do {
	    var fieldMetaInfo = curclass._meta_.fields[fieldName];
	    if(fieldMetaInfo) {
	      return fieldMetaInfo;
	    }
	    if(curclass._meta_._superMeta_) {
	      curclass = curclass._meta_._superMeta_._class_;
	    } else {
	      curclass = null;
	    }
	  } while(curclass);
	  return null;
	};

	ExternalDeviceStateEnum.prototype.toString = function() {
	  return JSON.stringify(this);
	};

	ExternalDeviceStateEnum._meta_ =  {fields:  {}};
	ExternalDeviceStateEnum._meta_._class_ =  ExternalDeviceStateEnum;
	ExternalDeviceStateEnum._meta_.fields["state"] = {};
	ExternalDeviceStateEnum._meta_.fields["state"].type = remotepay_ExternalDeviceState;

	//
	// Expose the module.
	//
	if (true) {
	module.exports = ExternalDeviceStateEnum;
	}



/***/ }),
/* 1163 */
/***/ (function(module, exports, __webpack_require__) {

	/**
	 * Autogenerated by Avro
	 * 
	 * DO NOT EDIT DIRECTLY
	 */


	 /**
	 *  Interface to the Clover remote-pay API.
	 *
	 *  Defines the interface used to interact with remote pay
	 *  adapters.
	 */
	/**
	* @constructor
	* @memberof remotepay
	*/
	var ICloverConnector = function() {
	};


	/**
	* If a signature is captured during a transaction, this method
	  * accepts the signature as entered.
	* @memberof remotepay.ICloverConnector
	*
	* @param {remotepay.VerifySignatureRequest} request 
	* @return void
	*/
	ICloverConnector.prototype.acceptSignature = function(request) {
	};

	/**
	* If Payment confirmation is required during a transaction due to a Challenge,
	  * this method accepts the Payment. A Challenge may be triggered by a
	  * potential duplicate Payment or an offline Payment. For more information,
	  * see {@link https://docs.clover.com/build/working-with-challenges/|Working with Challenges}.
	* @memberof remotepay.ICloverConnector
	*
	* @param {payments.Payment} payment 
	* @return void
	*/
	ICloverConnector.prototype.acceptPayment = function(payment) {
	};

	/**
	* If Payment confirmation is required during a transaction due to a Challenge,
	  * this method rejects the Payment. A Challenge may be triggered by a
	  * potential duplicate Payment or an offline Payment. For more information,
	  * see {@link https://docs.clover.com/build/working-with-challenges/|Working with Challenges}.
	* @memberof remotepay.ICloverConnector
	*
	* @param {payments.Payment} payment 
	* @param {base.Challenge} challenge 
	* @return void
	*/
	ICloverConnector.prototype.rejectPayment = function(payment, challenge) {
	};

	/**
	* Requests an Auth transaction. The tip for an Auth can be adjusted
	  * through the TipAdjustAuth() call until the batch Closeout is processed.
	  * Note: The MerchantInfo.SupportsAuths boolean must be set to true.
	* @memberof remotepay.ICloverConnector
	*
	* @param {remotepay.AuthRequest} authRequest 
	* @return void
	*/
	ICloverConnector.prototype.auth = function(authRequest) {
	};

	/**
	* Initiates a PreAuth transaction (a pre-authorization for a certain amount). This transaction
	  * lets the merchant know whether the account associated with a card has sufficient funds,
	  * without actually charging the card. When the merchant is ready to charge a final amount,
	  * the POS will call CapturePreAuth() to complete the Payment.
	  * Note: The MerchantInfo.SupportsPreAuths boolean must be set to true.
	* @memberof remotepay.ICloverConnector
	*
	* @param {remotepay.PreAuthRequest} preAuthRequest 
	* @return void
	*/
	ICloverConnector.prototype.preAuth = function(preAuthRequest) {
	};

	/**
	* Marks a PreAuth Payment for capture by a Closeout process. After a PreAuth is captured,
	  * it is effectively the same as an Auth Payment.
	  * Note: Should only be called if the request's PaymentID is from a PreAuthResponse.
	* @memberof remotepay.ICloverConnector
	*
	* @param {remotepay.CapturePreAuthRequest} capturePreAuthRequest 
	* @return void
	*/
	ICloverConnector.prototype.capturePreAuth = function(capturePreAuthRequest) {
	};

	/**
	* Increases the total authorized amount of an open PreAuth by the amount increment passed into the request.
	* @memberof remotepay.ICloverConnector
	*
	* @param {remotepay.IncrementPreAuthRequest} incrementPreauthRequest 
	* @return void
	*/
	ICloverConnector.prototype.incrementPreAuth = function(incrementPreauthRequest) {
	};

	/**
	* Sends a request to the Clover server to close out all transactions.
	  * Note: The merchant account must be configured to allow transaction closeout.
	* @memberof remotepay.ICloverConnector
	*
	* @param {remotepay.CloseoutRequest} closeoutRequest 
	* @return void
	*/
	ICloverConnector.prototype.closeout = function(closeoutRequest) {
	};

	/**
	* Display receipt options for a Credit, Refund, or Payment
	  * @param request The request details
	* @memberof remotepay.ICloverConnector
	*
	* @param {remotepay.DisplayReceiptOptionsRequest} request 
	* @return void
	*/
	ICloverConnector.prototype.displayReceiptOptions = function(request) {
	};

	/**
	* Displays an Order and associated line items on the Clover device. Will replace an Order that is
	  * already displayed on the device screen.
	* @memberof remotepay.ICloverConnector
	*
	* @param {order.DisplayOrder} order 
	* @return void
	*/
	ICloverConnector.prototype.showDisplayOrder = function(order) {
	};

	/**
	* Removes the DisplayOrder object from the Clover device's screen.
	* @memberof remotepay.ICloverConnector
	*
	* @param {order.DisplayOrder} order 
	* @return void
	*/
	ICloverConnector.prototype.removeDisplayOrder = function(order) {
	};

	/**
	* Notify device of a discount being added to the order. The discount will then reflect in the displayOrder.
	  * Note: This is independent of a discount being added to a display line item.
	* @memberof remotepay.ICloverConnector
	*
	* @param {order.DisplayDiscount} discount 
	* @param {order.DisplayOrder} order 
	* @return void
	*/
	ICloverConnector.prototype.discountAddedToDisplayOrder = function(discount, order) {
	};

	/**
	* Notify device of a discount being removed to the order. The discount will then reflect in the displayOrder.
	  * Note: This is independent of a discount being removed to a display line item.
	* @memberof remotepay.ICloverConnector
	*
	* @param {order.DisplayDiscount} discount 
	* @param {order.DisplayOrder} order 
	* @return void
	*/
	ICloverConnector.prototype.discountRemovedFromDisplayOrder = function(discount, order) {
	};

	/**
	* Notify device of a line item being added to the order. The line item will then reflect in the displayOrder.
	  * Note: This is independent of a line item being added to a display line item.
	* @memberof remotepay.ICloverConnector
	*
	* @param {order.DisplayLineItem} lineItem 
	* @param {order.DisplayOrder} order 
	* @return void
	*/
	ICloverConnector.prototype.lineItemAddedToDisplayOrder = function(lineItem, order) {
	};

	/**
	* Notify device of a line item being removed to the order. The line item will then reflect in the displayOrder.
	  * Note: This is independent of a line item being removed to a display line item.
	* @memberof remotepay.ICloverConnector
	*
	* @param {order.DisplayLineItem} lineItem 
	* @param {order.DisplayOrder} order 
	* @return void
	*/
	ICloverConnector.prototype.lineItemRemovedFromDisplayOrder = function(lineItem, order) {
	};

	/**
	* Disposes the connection to the Clover device. After this is called, the connection to the device is severed, and the
	  * CloverConnector object is no longer usable. Instantiate a new CloverConnector object in order to
	  * call initializeConnection().
	* @memberof remotepay.ICloverConnector
	*
	* @return void
	*/
	ICloverConnector.prototype.dispose = function() {
	};

	/**
	* Sends a keystroke to the Clover device that invokes an input option (e.g. OK, CANCEL, DONE, etc.) on the customer's behalf.
	  * InputOptions are in the CloverDeviceEvent passed to onDeviceActivityStart().
	* @memberof remotepay.ICloverConnector
	*
	* @param {remotepay.InputOption} io 
	* @return void
	*/
	ICloverConnector.prototype.invokeInputOption = function(io) {
	};

	/**
	* Initiates a Manual Refund transaction (a "Refund" or credit that is not associated with a previous Payment).
	* @memberof remotepay.ICloverConnector
	*
	* @param {remotepay.ManualRefundRequest} request 
	* @return void
	*/
	ICloverConnector.prototype.manualRefund = function(request) {
	};

	/**
	* Refunds the full or partial amount of a Payment.
	* @memberof remotepay.ICloverConnector
	*
	* @param {remotepay.RefundPaymentRequest} request 
	* @return void
	*/
	ICloverConnector.prototype.refundPayment = function(request) {
	};

	/**
	* Opens the first cash drawer found connected to the Clover device. The reason for
	  * opening the cash drawer must be set on OpenCashDrawerRequest.
	* @memberof remotepay.ICloverConnector
	*
	* @param {remotepay.OpenCashDrawerRequest} request 
	* @return void
	*/
	ICloverConnector.prototype.openCashDrawer = function(request) {
	};

	/**
	* Sends a print request using the PrintRequest object. Used to print
	  * text, Bitmap image objects, and images from a URL using the specified
	  * Clover-supported printer.
	* @memberof remotepay.ICloverConnector
	*
	* @param {remotepay.PrintRequest} request 
	* @return void
	*/
	ICloverConnector.prototype.print = function(request) {
	};

	/**
	* If a signature is captured during a transaction, this method
	  * rejects the signature as entered.
	* @memberof remotepay.ICloverConnector
	*
	* @param {remotepay.VerifySignatureRequest} request 
	* @return void
	*/
	ICloverConnector.prototype.rejectSignature = function(request) {
	};

	/**
	* Sends a request to reset the Clover device back to the welcome screen. Can be used
	  * when the device is in an unknown or invalid state from the perspective of the POS.
	  * Note: This request could cause the POS to miss a transaction or
	  * other information. Use cautiously as a last resort.
	* @memberof remotepay.ICloverConnector
	*
	* @return void
	*/
	ICloverConnector.prototype.resetDevice = function() {
	};

	/**
	* Requests a Sale transaction (purchase).
	* @memberof remotepay.ICloverConnector
	*
	* @param {remotepay.SaleRequest} request 
	* @return void
	*/
	ICloverConnector.prototype.sale = function(request) {
	};

	/**
	* Displays a string-based message on the Clover device's screen.
	* @memberof remotepay.ICloverConnector
	*
	* @param {String} message 
	* @return void
	*/
	ICloverConnector.prototype.showMessage = function(message) {
	};

	/**
	* Displays the thank you screen on the Clover device.
	* @memberof remotepay.ICloverConnector
	*
	* @return void
	*/
	ICloverConnector.prototype.showThankYouScreen = function() {
	};

	/**
	* Displays the welcome screen on the Clover device.
	* @memberof remotepay.ICloverConnector
	*
	* @return void
	*/
	ICloverConnector.prototype.showWelcomeScreen = function() {
	};

	/**
	* Adjusts the tip for a previous Auth transaction. This call can be made
	  * until the Auth Payment has been finalized by a Closeout.
	  * Note: Should only be called if the request's PaymentID is from an AuthResponse.
	* @memberof remotepay.ICloverConnector
	*
	* @param {remotepay.TipAdjustAuthRequest} request 
	* @return void
	*/
	ICloverConnector.prototype.tipAdjustAuth = function(request) {
	};

	/**
	* Asks the Clover device to capture card information and request a payment token
	  * from the payment gateway. The payment token can be used for future
	  * Sale and Auth requests in place of the card details. The
	  * merchant account must be configured to allow payment tokens.
	  * Note: The MerchantInfo.SupportsVaultCards boolean must be set to true.
	  * Note: If the cardEntryMethods param is null, the default values (CARD_ENTRY_METHOD_MAG_STRIPE,
	  * CARD_ENTRY_METHOD_ICC_CONTACT, and CARD_ENTRY_METHOD_NFC_CONTACTLESS)
	  * will be used.
	* @memberof remotepay.ICloverConnector
	*
	* @param {Number} cardEntryMethods must be an integer
	* @return void
	*/
	ICloverConnector.prototype.vaultCard = function(cardEntryMethods) {
	};

	/**
	* Voids a transaction.
	* @memberof remotepay.ICloverConnector
	*
	* @param {remotepay.VoidPaymentRequest} request 
	* @return void
	*/
	ICloverConnector.prototype.voidPayment = function(request) {
	};

	/**
	* Initializes the connection and starts communication with the Clover device.
	  * This method is called after the connector has been created and
	  * listeners have been added to it. It must be called before any other method
	  * (other than those that add or remove listeners).
	* @memberof remotepay.ICloverConnector
	*
	* @return void
	*/
	ICloverConnector.prototype.initializeConnection = function() {
	};

	/**
	* Retrieves a list of unprocessed Payments that were taken offline
	  * and are pending submission to the server.
	* @memberof remotepay.ICloverConnector
	*
	* @return void
	*/
	ICloverConnector.prototype.retrievePendingPayments = function() {
	};

	/**
	* Requests card information (specifically Track 1 and Track 2 card data).
	  * @see ICloverConnectorListener.onReadCardDataResponse(ReadCardDataResponse)
	* @memberof remotepay.ICloverConnector
	*
	* @param {remotepay.ReadCardDataRequest} request 
	* @return void
	*/
	ICloverConnector.prototype.readCardData = function(request) {
	};

	/**
	* Sends a message to a Custom Activity running on a Clover device.
	  * @see ICloverConnectorListener.onMessageFromActivity(MessageFromActivity)
	* @memberof remotepay.ICloverConnector
	*
	* @param {remotepay.MessageToActivity} request 
	* @return void
	*/
	ICloverConnector.prototype.sendMessageToActivity = function(request) {
	};

	/**
	*  Starts a Custom Activity on the Clover device.
	* @memberof remotepay.ICloverConnector
	*
	* @param {remotepay.CustomActivityRequest} request 
	* @return void
	*/
	ICloverConnector.prototype.startCustomActivity = function(request) {
	};

	/**
	* Sends a message requesting the current status of the Clover device.
	* @memberof remotepay.ICloverConnector
	*
	* @param {remotepay.RetrieveDeviceStatusRequest} request 
	* @return {Null} 
	*/
	ICloverConnector.prototype.retrieveDeviceStatus = function(request) {
	  return null;
	};

	/**
	* Requests the Payment information associated with the externalPaymentId passed in.
	  * Only valid for Payments made in the past 24 hours on the Clover device queried.
	  * @see ICloverConnectorListener.onRetrievePaymentResponse(RetrievePaymentResponse)
	* @memberof remotepay.ICloverConnector
	*
	* @param {remotepay.RetrievePaymentRequest} request 
	* @return void
	*/
	ICloverConnector.prototype.retrievePayment = function(request) {
	};

	/**
	* Queries available printers attached to the Clover device using the RetrievePrintersRequest object.
	  * @see ICloverConnectorListener.onRetrievePrintersResponse(RetrievePrintersResponse)
	* @memberof remotepay.ICloverConnector
	*
	* @param {remotepay.RetrievePrintersRequest} request 
	* @return void
	*/
	ICloverConnector.prototype.retrievePrinters = function(request) {
	};

	/**
	* Queries the status of a print job.
	  * @see ICloverConnectorListener.onPrintJobStatusResponse(PrintJobStatusResponse)
	* @memberof remotepay.ICloverConnector
	*
	* @param {remotepay.PrintJobStatusRequest} request 
	* @return void
	*/
	ICloverConnector.prototype.retrievePrintJobStatus = function(request) {
	};

	/**
	* Register an interest in receiving customer provided data.
	* @memberof remotepay.ICloverConnector
	*
	* @param {remotepay.RegisterForCustomerProvidedDataRequest} request 
	* @return void
	*/
	ICloverConnector.prototype.registerForCustomerProvidedData = function(request) {
	};

	/**
	*
	* @memberof remotepay.ICloverConnector
	*
	* @param {remotepay.SetCustomerInfoRequest} request 
	* @return void
	*/
	ICloverConnector.prototype.setCustomerInfo = function(request) {
	};

	/**
	* Check the balance on a card, if card supports balance inquiry
	   * @param request
	* @memberof remotepay.ICloverConnector
	*
	* @param {remotepay.CheckBalanceRequest} request 
	* @return void
	*/
	ICloverConnector.prototype.checkBalance = function(request) {
	};

	//
	// Expose the module.
	//
	if (true) {
	module.exports = ICloverConnector;
	}



/***/ }),
/* 1164 */
/***/ (function(module, exports, __webpack_require__) {

	/**
	 * Autogenerated by Avro
	 * 
	 * DO NOT EDIT DIRECTLY
	 */


	 /**
	 *  Interface to the Clover remote-pay API.
	 *
	 *  Defines the interface used to interact with remote pay
	 *  adapters.
	 */
	/**
	* @constructor
	* @memberof remotepay
	*/
	var ICloverConnectorListener = function() {
	};


	/**
	* Called when the Clover device is disconnected from the CloverConnector or not responding.
	* @memberof remotepay.ICloverConnectorListener
	*
	* @return void
	*/
	ICloverConnectorListener.prototype.onDeviceDisconnected = function() {
	};

	/**
	* Called when the Clover device is initially connected, but not ready to communicate.
	* @memberof remotepay.ICloverConnectorListener
	*
	* @return void
	*/
	ICloverConnectorListener.prototype.onDeviceConnected = function() {
	};

	/**
	* Called when the Clover device is ready to communicate and respond to requests.
	* @memberof remotepay.ICloverConnectorListener
	*
	* @param {remotepay.MerchantInfo} merchantInfo 
	* @return void
	*/
	ICloverConnectorListener.prototype.onDeviceReady = function(merchantInfo) {
	};

	/**
	* Called when the Clover device transitions to a new screen or activity. The CloverDeviceEvent passed in
	  * will contain an event type, a description, and a list of available InputOptions.
	* @memberof remotepay.ICloverConnectorListener
	*
	* @param {remotepay.CloverDeviceEvent} deviceEvent 
	* @return void
	*/
	ICloverConnectorListener.prototype.onDeviceActivityStart = function(deviceEvent) {
	};

	/**
	* Called when the Clover device transitions away from a screen or activity. The CloverDeviceEvent
	  * passed in will contain an event type and description.
	  * Note: The start and end events are not guaranteed to process in order. The event type
	  * should be used to make sure these events are paired.
	* @memberof remotepay.ICloverConnectorListener
	*
	* @param {remotepay.CloverDeviceEvent} deviceEvent 
	* @return void
	*/
	ICloverConnectorListener.prototype.onDeviceActivityEnd = function(deviceEvent) {
	};

	/**
	* Called when an error occurs while trying to send messages to the Clover device.
	* @memberof remotepay.ICloverConnectorListener
	*
	* @param {remotepay.CloverDeviceErrorEvent} deviceErrorEvent 
	* @return void
	*/
	ICloverConnectorListener.prototype.onDeviceError = function(deviceErrorEvent) {
	};

	/**
	* Called in response to an Auth() request. Note: An Auth transaction may come back as a final Sale, depending on the payment gateway. The AuthResponse has a boolean isAuth flag that indicates whether the Payment can still be tip-adjusted.
	* @memberof remotepay.ICloverConnectorListener
	*
	* @param {remotepay.AuthResponse} response 
	* @return void
	*/
	ICloverConnectorListener.prototype.onAuthResponse = function(response) {
	};

	/**
	* Called in response to a tip adjustment for an Auth transaction. Contains the tipAmount if successful.
	* @memberof remotepay.ICloverConnectorListener
	*
	* @param {remotepay.TipAdjustAuthResponse} response 
	* @return void
	*/
	ICloverConnectorListener.prototype.onTipAdjustAuthResponse = function(response) {
	};

	/**
	* Called in response to a CapturePreAuth() request. Contains the new Amount and TipAmount if successful.
	* @memberof remotepay.ICloverConnectorListener
	*
	* @param {remotepay.CapturePreAuthResponse} response 
	* @return void
	*/
	ICloverConnectorListener.prototype.onCapturePreAuthResponse = function(response) {
	};

	/**
	* Called in response to an incrementPreAuth() request. Contains the incremented PreAuth with the new authorized total, if successful.
	* @memberof remotepay.ICloverConnectorListener
	*
	* @param {remotepay.IncrementPreAuthResponse} response 
	* @return void
	*/
	ICloverConnectorListener.prototype.onIncrementPreAuthResponse = function(response) {
	};

	/**
	* Called when the Clover device requests verification for a user's on-screen signature.
	  * The Payment and Signature will be passed in.
	* @memberof remotepay.ICloverConnectorListener
	*
	* @param {remotepay.VerifySignatureRequest} request 
	* @return void
	*/
	ICloverConnectorListener.prototype.onVerifySignatureRequest = function(request) {
	};

	/**
	* Called when the Clover device encounters a Challenge at the payment gateway and requires confirmation.
	  * A Challenge is triggered by a potential duplicate Payment (DUPLICATE_CHALLENGE) or an offline
	  * Payment (OFFLINE_CHALLENGE). The device sends a ConfirmPaymentRequest() asking the merchant
	  * to reply by sending either an AcceptPayment() or RejectPayment() call.

	  * Note: Duplicate Payment Challenges are raised when multiple Payments are made with the same card
	  * type and last four digits within the same hour. For this reason, we recommend that you do not
	  * programmatically call CloverConnector.RejectPayment() on all instances of DUPLICATE_CHALLENGE.
	  * For more information, see {@link https://docs.clover.com/build/working-with-challenges/|Working with Challenges}.
	* @memberof remotepay.ICloverConnectorListener
	*
	* @param {remotepay.ConfirmPaymentRequest} request 
	* @return void
	*/
	ICloverConnectorListener.prototype.onConfirmPaymentRequest = function(request) {
	};

	/**
	* Called in response to a Closeout() request.
	* @memberof remotepay.ICloverConnectorListener
	*
	* @param {remotepay.CloseoutResponse} response 
	* @return void
	*/
	ICloverConnectorListener.prototype.onCloseoutResponse = function(response) {
	};

	/**
	* Called at the completion of a Sale() request. The SaleResponse contains a
	  * {@see com.clover.remote.client.messages.ResultCode} and
	  * a Success boolean. A successful Sale transaction will also have the Payment object, which can be for
	  * the full or partial amount of the Sale request. Note: A Sale transaction my come back as a
	  * tip-adjustable Auth, depending on the payment gateway. The SaleResponse has a boolean
	  * isSale flag that indicates whether the Sale is final, or will be finalized during closeout.
	* @memberof remotepay.ICloverConnectorListener
	*
	* @param {remotepay.SaleResponse} response 
	* @return void
	*/
	ICloverConnectorListener.prototype.onSaleResponse = function(response) {
	};

	/**
	* Called in response to a manualRefund() request. Contains a
	  * {@see com.clover.remote.client.messages.ResultCode} and a Success boolean.
	  * If successful, the ManualRefundResponse will have a Credit object associated with the
	  * relevant Payment information.
	* @memberof remotepay.ICloverConnectorListener
	*
	* @param {remotepay.ManualRefundResponse} response 
	* @return void
	*/
	ICloverConnectorListener.prototype.onManualRefundResponse = function(response) {
	};

	/**
	* Called in response to a RefundPayment() request. Contains a
	  * {@see com.clover.remote.client.messages.ResultCode} and a Success boolean.
	  * The response to a successful transaction will contain the Refund, which includes the
	  * original paymentId as a reference.
	* @memberof remotepay.ICloverConnectorListener
	*
	* @param {remotepay.RefundPaymentResponse} response 
	* @return void
	*/
	ICloverConnectorListener.prototype.onRefundPaymentResponse = function(response) {
	};

	/**
	* Called when a customer selects a tip amount on the Clover device's screen.
	* @memberof remotepay.ICloverConnectorListener
	*
	* @param {remotepay.TipAdded} tipAdded 
	* @return void
	*/
	ICloverConnectorListener.prototype.onTipAdded = function(tipAdded) {
	};

	/**
	* Called in response to a voidPayment() request. Contains a
	  * {@see com.clover.remote.client.messages.ResultCode} and a Success boolean.
	  * If successful, the response will also contain the paymentId for the voided Payment.
	* @memberof remotepay.ICloverConnectorListener
	*
	* @param {remotepay.VoidPaymentResponse} response 
	* @return void
	*/
	ICloverConnectorListener.prototype.onVoidPaymentResponse = function(response) {
	};

	/**
	* Called in response to a void payment refund request.
	* @memberof remotepay.ICloverConnectorListener
	*
	* @param {remotepay.VoidPaymentRefundResponse} response 
	* @return void
	*/
	ICloverConnectorListener.prototype.onVoidPaymentRefundResponse = function(response) {
	};

	/**
	* Called in response to a vaultCard() request. Contains a
	  * {@see com.clover.remote.client.messages.ResultCode} and a Success boolean.
	  * If successful, the response will contain a VaultedCard object with a token that's unique for
	  * the card and merchant. The token can be used for future Sale() and Auth() requests.
	* @memberof remotepay.ICloverConnectorListener
	*
	* @param {remotepay.VaultCardResponse} response 
	* @return void
	*/
	ICloverConnectorListener.prototype.onVaultCardResponse = function(response) {
	};

	/**
	* Called in response to a PreAuth() request.
	  * Note: The boolean isPreAuth flag in the PreAuthResponse indicates whether CapturePreAuth()
	  * can be called for the returned Payment. If the isPreAuth flag is false and the isAuth flag is true,
	  * then the payment gateway coerced the PreAuth() request to an Auth. The payment will
	  * need to be voided or it will be automatically captured at closeout.
	* @memberof remotepay.ICloverConnectorListener
	*
	* @param {remotepay.PreAuthResponse} response 
	* @return void
	*/
	ICloverConnectorListener.prototype.onPreAuthResponse = function(response) {
	};

	/**
	* Called in response to a retrievePendingPayment() request.
	* @memberof remotepay.ICloverConnectorListener
	*
	* @param {remotepay.RetrievePendingPaymentsResponse} retrievePendingPaymentResponse 
	* @return void
	*/
	ICloverConnectorListener.prototype.onRetrievePendingPaymentsResponse = function(retrievePendingPaymentResponse) {
	};

	/**
	* Called in response to a readCardData() request. Contains card information
	  * (specifically Track 1 and Track 2 card data).
	* @memberof remotepay.ICloverConnectorListener
	*
	* @param {remotepay.ReadCardDataResponse} response 
	* @return void
	*/
	ICloverConnectorListener.prototype.onReadCardDataResponse = function(response) {
	};

	/**
	* Called when a {@link https://docs.clover.com/build/custom-activities-for-clover-mini/|Custom Activity} sends a message to the POS.
	* @memberof remotepay.ICloverConnectorListener
	*
	* @param {remotepay.MessageFromActivity} message 
	* @return void
	*/
	ICloverConnectorListener.prototype.onMessageFromActivity = function(message) {
	};

	/**
	* Called when a {@link https://docs.clover.com/build/custom-activities-for-clover-mini/|Custom Activity} finishes normally.
	* @memberof remotepay.ICloverConnectorListener
	*
	* @param {remotepay.CustomActivityResponse} response 
	* @return void
	*/
	ICloverConnectorListener.prototype.onCustomActivityResponse = function(response) {
	};

	/**
	* Called in response to a RetrieveDeviceStatus() request.
	* @memberof remotepay.ICloverConnectorListener
	*
	* @param {remotepay.RetrieveDeviceStatusResponse} response 
	* @return void
	*/
	ICloverConnectorListener.prototype.onRetrieveDeviceStatusResponse = function(response) {
	};

	/**
	* Called in response to a request that results in an invalid kiosk flow transition
	   *
	   * @param response The response
	* @memberof remotepay.ICloverConnectorListener
	*
	* @param {remotepay.InvalidStateTransitionResponse} response 
	* @return void
	*/
	ICloverConnectorListener.prototype.onInvalidStateTransitionResponse = function(response) {
	};

	/**
	* Called in response to a ResetDevice() request.
	* @memberof remotepay.ICloverConnectorListener
	*
	* @param {remotepay.ResetDeviceResponse} response 
	* @return void
	*/
	ICloverConnectorListener.prototype.onResetDeviceResponse = function(response) {
	};

	/**
	* Called in response to a RetrievePayment() request.
	* @memberof remotepay.ICloverConnectorListener
	*
	* @param {remotepay.RetrievePaymentResponse} response 
	* @return void
	*/
	ICloverConnectorListener.prototype.onRetrievePaymentResponse = function(response) {
	};

	/**
	* Called in response to a retrievePrinters() request.
	* @memberof remotepay.ICloverConnectorListener
	*
	* @param {remotepay.RetrievePrintersResponse} response 
	* @return void
	*/
	ICloverConnectorListener.prototype.onRetrievePrintersResponse = function(response) {
	};

	/**
	* Called in response to a retrievePrintJobStatus() request.
	* @memberof remotepay.ICloverConnectorListener
	*
	* @param {remotepay.PrintJobStatusResponse} response 
	* @return void
	*/
	ICloverConnectorListener.prototype.onPrintJobStatusResponse = function(response) {
	};

	/**
	* Will only be called if disablePrinting = true on the Sale, Auth, PreAuth or ManualRefund Request
	   * Called when a user requests to print a receipt for a ManualRefund
	   *
	   * @param message The message
	* @memberof remotepay.ICloverConnectorListener
	*
	* @param {remotepay.PrintManualRefundReceiptMessage} message 
	* @return void
	*/
	ICloverConnectorListener.prototype.onPrintManualRefundReceipt = function(message) {
	};

	/**
	* Will only be called if disablePrinting = true on the Sale, Auth, PreAuth or ManualRefund Request
	   * Called when a user requests to print a receipt for a declined ManualRefund
	   *
	   * @param message The message
	* @memberof remotepay.ICloverConnectorListener
	*
	* @param {remotepay.PrintManualRefundDeclineReceiptMessage} message 
	* @return void
	*/
	ICloverConnectorListener.prototype.onPrintManualRefundDeclineReceipt = function(message) {
	};

	/**
	* Will only be called if disablePrinting = true on the Sale, Auth, PreAuth or ManualRefund Request
	   * Called when a user requests to print a receipt for a payment
	   *
	   * @param message The message
	* @memberof remotepay.ICloverConnectorListener
	*
	* @param {remotepay.PrintPaymentReceiptMessage} message 
	* @return void
	*/
	ICloverConnectorListener.prototype.onPrintPaymentReceipt = function(message) {
	};

	/**
	* Will only be called if disablePrinting = true on the Sale, Auth, PreAuth or ManualRefund Request
	   * Called when a user requests to print a receipt for a declined payment
	   *
	   * @param message The message
	* @memberof remotepay.ICloverConnectorListener
	*
	* @param {remotepay.PrintPaymentDeclineReceiptMessage} message 
	* @return void
	*/
	ICloverConnectorListener.prototype.onPrintPaymentDeclineReceipt = function(message) {
	};

	/**
	* Will only be called if disablePrinting = true on the Sale, Auth, PreAuth or ManualRefund Request
	   * Called when a user requests to print a merchant copy of a payment receipt
	   *
	   * @param message The message
	* @memberof remotepay.ICloverConnectorListener
	*
	* @param {remotepay.PrintPaymentMerchantCopyReceiptMessage} message 
	* @return void
	*/
	ICloverConnectorListener.prototype.onPrintPaymentMerchantCopyReceipt = function(message) {
	};

	/**
	* Will only be called if disablePrinting = true on the Sale, Auth, PreAuth or ManualRefund Request
	   * Called when a user requests to print a receipt for a payment refund
	   *
	   * @param message The message
	* @memberof remotepay.ICloverConnectorListener
	*
	* @param {remotepay.PrintRefundPaymentReceiptMessage} message 
	* @return void
	*/
	ICloverConnectorListener.prototype.onPrintRefundPaymentReceipt = function(message) {
	};

	/**
	* Called when customer information is provided from a loyalty service.
	* @memberof remotepay.ICloverConnectorListener
	*
	* @param {remotepay.CustomerProvidedDataEvent} response 
	* @return void
	*/
	ICloverConnectorListener.prototype.onCustomerProvidedData = function(response) {
	};

	/**
	* Called in response to a DisplayReceiptOptionsRequest
	   * @param response
	* @memberof remotepay.ICloverConnectorListener
	*
	* @param {remotepay.DisplayReceiptOptionsResponse} response 
	* @return void
	*/
	ICloverConnectorListener.prototype.onDisplayReceiptOptionsResponse = function(response) {
	};

	/**
	* Called in response to a RequestSignatureRequest
	   * @param response
	* @memberof remotepay.ICloverConnectorListener
	*
	* @param {remotepay.SignatureResponse} response 
	* @return void
	*/
	ICloverConnectorListener.prototype.onRequestSignatureResponse = function(response) {
	};

	/**
	* Called in response to a CheckBalanceRequest
	   * @param response
	* @memberof remotepay.ICloverConnectorListener
	*
	* @param {remotepay.CheckBalanceResponse} response 
	* @return void
	*/
	ICloverConnectorListener.prototype.onCheckBalanceResponse = function(response) {
	};

	/**
	* Called in response to a TipRequest
	   * @param response
	* @memberof remotepay.ICloverConnectorListener
	*
	* @param {remotepay.TipResponse} response 
	* @return void
	*/
	ICloverConnectorListener.prototype.onRequestTipResponse = function(response) {
	};


	//
	// Expose the module.
	//
	if (true) {
	module.exports = ICloverConnectorListener;
	}



/***/ }),
/* 1165 */
/***/ (function(module, exports, __webpack_require__) {

	/**
	 * Autogenerated by Avro
	 * 
	 * DO NOT EDIT DIRECTLY
	 */

	var remotepay_BaseRequest = __webpack_require__(14);

	/** Increments a previously made pre auth */
	/**
	* @constructor
	* @augments remotepay.BaseRequest
	* @memberof remotepay
	*/
	var IncrementPreAuthRequest = function() {
	  remotepay_BaseRequest.call(this);
	  this._superClass_ = remotepay_BaseRequest;
	  this._class_ = IncrementPreAuthRequest;
	  this.amount = undefined;
	  this.paymentId = undefined;
	};

	IncrementPreAuthRequest.prototype = Object.create(remotepay_BaseRequest.prototype);
	IncrementPreAuthRequest.prototype.constructor = IncrementPreAuthRequest;

	/**
	* Set the field value
	* The amount by which to increment the pre-auth.
	*
	* @memberof remotepay.IncrementPreAuthRequest
	* @param {Number} amount must be a long integer
	*/
	IncrementPreAuthRequest.prototype.setAmount = function(amount) {
	  this.amount = amount;
	};

	/**
	* Get the field value
	* The amount by which to increment the pre-auth.
	* @memberof remotepay.IncrementPreAuthRequest
	* @return {Number} must be a long integer
	*/
	IncrementPreAuthRequest.prototype.getAmount = function() {
	  return this.amount;
	};

	/**
	* Set the field value
	* The preauth to be incremented. This id should be pulled from the Payment.paymentId field in the PreAuthResponse.
	*
	* @memberof remotepay.IncrementPreAuthRequest
	* @param {String} paymentId 
	*/
	IncrementPreAuthRequest.prototype.setPaymentId = function(paymentId) {
	  this.paymentId = paymentId;
	};

	/**
	* Get the field value
	* The preauth to be incremented. This id should be pulled from the Payment.paymentId field in the PreAuthResponse.
	* @memberof remotepay.IncrementPreAuthRequest
	* @return {String} 
	*/
	IncrementPreAuthRequest.prototype.getPaymentId = function() {
	  return this.paymentId;
	};

	IncrementPreAuthRequest._meta_ =  {fields:  {}};
	IncrementPreAuthRequest._meta_._class_ =  IncrementPreAuthRequest;
	IncrementPreAuthRequest._meta_._superMeta_ = remotepay_BaseRequest._meta_;
	IncrementPreAuthRequest._meta_.fields["amount"] = {};
	IncrementPreAuthRequest._meta_.fields["amount"].type = Number;
	IncrementPreAuthRequest._meta_.fields["paymentId"] = {};
	IncrementPreAuthRequest._meta_.fields["paymentId"].type = String;

	//
	// Expose the module.
	//
	if (true) {
	module.exports = IncrementPreAuthRequest;
	}



/***/ }),
/* 1166 */
/***/ (function(module, exports, __webpack_require__) {

	/**
	 * Autogenerated by Avro
	 * 
	 * DO NOT EDIT DIRECTLY
	 */

	var payments_Authorization = __webpack_require__(159);
	var remotepay_BaseResponse = __webpack_require__(15);

	/** The result of an attempt to increment a pre auth */
	/**
	* @constructor
	* @augments remotepay.BaseResponse
	* @memberof remotepay
	*/
	var IncrementPreAuthResponse = function() {
	  remotepay_BaseResponse.call(this);
	  this._superClass_ = remotepay_BaseResponse;
	  this._class_ = IncrementPreAuthResponse;
	  this.authorization = undefined;
	};

	IncrementPreAuthResponse.prototype = Object.create(remotepay_BaseResponse.prototype);
	IncrementPreAuthResponse.prototype.constructor = IncrementPreAuthResponse;

	/**
	* Set the field value
	* The resulting Authorization
	*
	* @memberof remotepay.IncrementPreAuthResponse
	* @param {payments.Authorization} authorization 
	*/
	IncrementPreAuthResponse.prototype.setAuthorization = function(authorization) {
	  this.authorization = authorization;
	};

	/**
	* Get the field value
	* The resulting Authorization
	* @memberof remotepay.IncrementPreAuthResponse
	* @return {payments.Authorization} 
	*/
	IncrementPreAuthResponse.prototype.getAuthorization = function() {
	  return this.authorization;
	};

	IncrementPreAuthResponse._meta_ =  {fields:  {}};
	IncrementPreAuthResponse._meta_._class_ =  IncrementPreAuthResponse;
	IncrementPreAuthResponse._meta_._superMeta_ = remotepay_BaseResponse._meta_;
	IncrementPreAuthResponse._meta_.fields["authorization"] = {};
	IncrementPreAuthResponse._meta_.fields["authorization"].type = payments_Authorization;

	//
	// Expose the module.
	//
	if (true) {
	module.exports = IncrementPreAuthResponse;
	}



/***/ }),
/* 1167 */
/***/ (function(module, exports, __webpack_require__) {

	/**
	 * Autogenerated by Avro
	 * 
	 * DO NOT EDIT DIRECTLY
	 */

	var remotepay_ExternalDeviceState = __webpack_require__(124);
	var remotepay_BaseResponse = __webpack_require__(15);
	var remotepay_ExternalDeviceStateData = __webpack_require__(269);

	/**
	* @constructor
	* @augments remotepay.BaseResponse
	* @memberof remotepay
	*/
	var InvalidStateTransitionResponse = function() {
	  remotepay_BaseResponse.call(this);
	  this._superClass_ = remotepay_BaseResponse;
	  this._class_ = InvalidStateTransitionResponse;
	  this.requestedTransition = undefined;
	  this.state = undefined;
	  this.data = undefined;
	};

	InvalidStateTransitionResponse.prototype = Object.create(remotepay_BaseResponse.prototype);
	InvalidStateTransitionResponse.prototype.constructor = InvalidStateTransitionResponse;

	/**
	* Set the field value
	* The state that Pay Display was unable to transition to.
	*
	* @memberof remotepay.InvalidStateTransitionResponse
	* @param {String} requestedTransition 
	*/
	InvalidStateTransitionResponse.prototype.setRequestedTransition = function(requestedTransition) {
	  this.requestedTransition = requestedTransition;
	};

	/**
	* Get the field value
	* The state that Pay Display was unable to transition to.
	* @memberof remotepay.InvalidStateTransitionResponse
	* @return {String} 
	*/
	InvalidStateTransitionResponse.prototype.getRequestedTransition = function() {
	  return this.requestedTransition;
	};

	/**
	* Set the field value
	* High level state of the connected device.
	*
	* @memberof remotepay.InvalidStateTransitionResponse
	* @param {remotepay.ExternalDeviceState} state 
	*/
	InvalidStateTransitionResponse.prototype.setState = function(state) {
	  this.state = state;
	};

	/**
	* Get the field value
	* High level state of the connected device.
	* @memberof remotepay.InvalidStateTransitionResponse
	* @return {remotepay.ExternalDeviceState} 
	*/
	InvalidStateTransitionResponse.prototype.getState = function() {
	  return this.state;
	};

	/**
	* Set the field value
	* Additional data elements supplementing the state of the connected device.
	*
	* @memberof remotepay.InvalidStateTransitionResponse
	* @param {remotepay.ExternalDeviceStateData} data 
	*/
	InvalidStateTransitionResponse.prototype.setData = function(data) {
	  this.data = data;
	};

	/**
	* Get the field value
	* Additional data elements supplementing the state of the connected device.
	* @memberof remotepay.InvalidStateTransitionResponse
	* @return {remotepay.ExternalDeviceStateData} 
	*/
	InvalidStateTransitionResponse.prototype.getData = function() {
	  return this.data;
	};

	InvalidStateTransitionResponse._meta_ =  {fields:  {}};
	InvalidStateTransitionResponse._meta_._class_ =  InvalidStateTransitionResponse;
	InvalidStateTransitionResponse._meta_._superMeta_ = remotepay_BaseResponse._meta_;
	InvalidStateTransitionResponse._meta_.fields["requestedTransition"] = {};
	InvalidStateTransitionResponse._meta_.fields["requestedTransition"].type = String;
	InvalidStateTransitionResponse._meta_.fields["state"] = {};
	InvalidStateTransitionResponse._meta_.fields["state"].type = remotepay_ExternalDeviceState;
	InvalidStateTransitionResponse._meta_.fields["data"] = {};
	InvalidStateTransitionResponse._meta_.fields["data"].type = remotepay_ExternalDeviceStateData;

	//
	// Expose the module.
	//
	if (true) {
	module.exports = InvalidStateTransitionResponse;
	}



/***/ }),
/* 1168 */
/***/ (function(module, exports, __webpack_require__) {

	/**
	 * Autogenerated by Avro
	 * 
	 * DO NOT EDIT DIRECTLY
	 */

	var remotepay_KeyPress = __webpack_require__(270);

	/**
	* @constructor
	* @memberof remotepay
	*/
	var KeyPressEnum = function() {
	  this._class_ = KeyPressEnum;
	  this.status = undefined;
	};


	/**
	* Set the field value
	* @memberof remotepay.KeyPressEnum
	* @param {remotepay.KeyPress} status 
	*/
	KeyPressEnum.prototype.setStatus = function(status) {
	  this.status = status;
	};

	/**
	* Get the field value
	* @memberof remotepay.KeyPressEnum
	* @return {remotepay.KeyPress} 
	*/
	KeyPressEnum.prototype.getStatus = function() {
	  return this.status;
	};

	/**
	* @memberof remotepay.KeyPressEnum
	* @private
	*/
	KeyPressEnum.prototype.getMetaInfo = function(fieldName) {
	  var curclass = this._class_;
	  do {
	    var fieldMetaInfo = curclass._meta_.fields[fieldName];
	    if(fieldMetaInfo) {
	      return fieldMetaInfo;
	    }
	    if(curclass._meta_._superMeta_) {
	      curclass = curclass._meta_._superMeta_._class_;
	    } else {
	      curclass = null;
	    }
	  } while(curclass);
	  return null;
	};

	KeyPressEnum.prototype.toString = function() {
	  return JSON.stringify(this);
	};

	KeyPressEnum._meta_ =  {fields:  {}};
	KeyPressEnum._meta_._class_ =  KeyPressEnum;
	KeyPressEnum._meta_.fields["status"] = {};
	KeyPressEnum._meta_.fields["status"].type = remotepay_KeyPress;

	//
	// Expose the module.
	//
	if (true) {
	module.exports = KeyPressEnum;
	}



/***/ }),
/* 1169 */
/***/ (function(module, exports, __webpack_require__) {

	/**
	 * Autogenerated by Avro
	 * 
	 * DO NOT EDIT DIRECTLY
	 */

	var remotepay_TransactionType = __webpack_require__(89);
	var remotepay_BaseTransactionRequest = __webpack_require__(169);

	/**
	* @constructor
	* @augments remotepay.BaseTransactionRequest
	* @memberof remotepay
	*/
	var ManualRefundRequest = function() {
	  remotepay_BaseTransactionRequest.call(this);
	  this._superClass_ = remotepay_BaseTransactionRequest;
	  this._class_ = ManualRefundRequest;
	  this.type = remotepay_TransactionType["CREDIT"];
	};

	ManualRefundRequest.prototype = Object.create(remotepay_BaseTransactionRequest.prototype);
	ManualRefundRequest.prototype.constructor = ManualRefundRequest;

	ManualRefundRequest._meta_ =  {fields:  {}};
	ManualRefundRequest._meta_._class_ =  ManualRefundRequest;
	ManualRefundRequest._meta_._superMeta_ = remotepay_BaseTransactionRequest._meta_;

	//
	// Expose the module.
	//
	if (true) {
	module.exports = ManualRefundRequest;
	}



/***/ }),
/* 1170 */
/***/ (function(module, exports, __webpack_require__) {

	/**
	 * Autogenerated by Avro
	 * 
	 * DO NOT EDIT DIRECTLY
	 */

	var remotepay_BaseResponse = __webpack_require__(15);
	var payments_Credit = __webpack_require__(30);

	/**
	* @constructor
	* @augments remotepay.BaseResponse
	* @memberof remotepay
	*/
	var ManualRefundResponse = function() {
	  remotepay_BaseResponse.call(this);
	  this._superClass_ = remotepay_BaseResponse;
	  this._class_ = ManualRefundResponse;
	  this.credit = undefined;
	};

	ManualRefundResponse.prototype = Object.create(remotepay_BaseResponse.prototype);
	ManualRefundResponse.prototype.constructor = ManualRefundResponse;

	/**
	* Set the field value
	* The credit that resulted from the request
	*
	* @memberof remotepay.ManualRefundResponse
	* @param {payments.Credit} credit 
	*/
	ManualRefundResponse.prototype.setCredit = function(credit) {
	  this.credit = credit;
	};

	/**
	* Get the field value
	* The credit that resulted from the request
	* @memberof remotepay.ManualRefundResponse
	* @return {payments.Credit} 
	*/
	ManualRefundResponse.prototype.getCredit = function() {
	  return this.credit;
	};

	ManualRefundResponse._meta_ =  {fields:  {}};
	ManualRefundResponse._meta_._class_ =  ManualRefundResponse;
	ManualRefundResponse._meta_._superMeta_ = remotepay_BaseResponse._meta_;
	ManualRefundResponse._meta_.fields["credit"] = {};
	ManualRefundResponse._meta_.fields["credit"].type = payments_Credit;

	//
	// Expose the module.
	//
	if (true) {
	module.exports = ManualRefundResponse;
	}



/***/ }),
/* 1171 */
/***/ (function(module, exports, __webpack_require__) {

	/**
	 * Autogenerated by Avro
	 * 
	 * DO NOT EDIT DIRECTLY
	 */

	var remotepay_DeviceInfo = __webpack_require__(487);

	/**
	* @constructor
	* @memberof remotepay
	*/
	var MerchantInfo = function() {
	  this._class_ = MerchantInfo;
	  this.merchantID = undefined;
	  this.merchantMID = undefined;
	  this.merchantName = undefined;
	  this.supportsAuths = true;
	  this.supportsPreAuths = true;
	  this.supportsSales = true;
	  this.supportsVaultCards = true;
	  this.supportsManualRefunds = true;
	  this.supportsTipAdjust = true;
	  this.deviceInfo = undefined;
	};


	/**
	* Set the field value
	* Unique identifier
	*
	* @memberof remotepay.MerchantInfo
	* @param {String} merchantID 
	*/
	MerchantInfo.prototype.setMerchantID = function(merchantID) {
	  this.merchantID = merchantID;
	};

	/**
	* Get the field value
	* Unique identifier
	* @memberof remotepay.MerchantInfo
	* @return {String} 
	*/
	MerchantInfo.prototype.getMerchantID = function() {
	  return this.merchantID;
	};

	/**
	* Set the field value
	* @memberof remotepay.MerchantInfo
	* @param {String} merchantMID 
	*/
	MerchantInfo.prototype.setMerchantMID = function(merchantMID) {
	  this.merchantMID = merchantMID;
	};

	/**
	* Get the field value
	* @memberof remotepay.MerchantInfo
	* @return {String} 
	*/
	MerchantInfo.prototype.getMerchantMID = function() {
	  return this.merchantMID;
	};

	/**
	* Set the field value
	* Name of the merchant
	*
	* @memberof remotepay.MerchantInfo
	* @param {String} merchantName 
	*/
	MerchantInfo.prototype.setMerchantName = function(merchantName) {
	  this.merchantName = merchantName;
	};

	/**
	* Get the field value
	* Name of the merchant
	* @memberof remotepay.MerchantInfo
	* @return {String} 
	*/
	MerchantInfo.prototype.getMerchantName = function() {
	  return this.merchantName;
	};

	/**
	* Set the field value
	* @memberof remotepay.MerchantInfo
	* @param {Boolean} supportsAuths 
	*/
	MerchantInfo.prototype.setSupportsAuths = function(supportsAuths) {
	  this.supportsAuths = supportsAuths;
	};

	/**
	* Get the field value
	* @memberof remotepay.MerchantInfo
	* @return {Boolean} 
	*/
	MerchantInfo.prototype.getSupportsAuths = function() {
	  return this.supportsAuths;
	};

	/**
	* Set the field value
	* @memberof remotepay.MerchantInfo
	* @param {Boolean} supportsPreAuths 
	*/
	MerchantInfo.prototype.setSupportsPreAuths = function(supportsPreAuths) {
	  this.supportsPreAuths = supportsPreAuths;
	};

	/**
	* Get the field value
	* @memberof remotepay.MerchantInfo
	* @return {Boolean} 
	*/
	MerchantInfo.prototype.getSupportsPreAuths = function() {
	  return this.supportsPreAuths;
	};

	/**
	* Set the field value
	* @memberof remotepay.MerchantInfo
	* @param {Boolean} supportsSales 
	*/
	MerchantInfo.prototype.setSupportsSales = function(supportsSales) {
	  this.supportsSales = supportsSales;
	};

	/**
	* Get the field value
	* @memberof remotepay.MerchantInfo
	* @return {Boolean} 
	*/
	MerchantInfo.prototype.getSupportsSales = function() {
	  return this.supportsSales;
	};

	/**
	* Set the field value
	* @memberof remotepay.MerchantInfo
	* @param {Boolean} supportsVaultCards 
	*/
	MerchantInfo.prototype.setSupportsVaultCards = function(supportsVaultCards) {
	  this.supportsVaultCards = supportsVaultCards;
	};

	/**
	* Get the field value
	* @memberof remotepay.MerchantInfo
	* @return {Boolean} 
	*/
	MerchantInfo.prototype.getSupportsVaultCards = function() {
	  return this.supportsVaultCards;
	};

	/**
	* Set the field value
	* @memberof remotepay.MerchantInfo
	* @param {Boolean} supportsManualRefunds 
	*/
	MerchantInfo.prototype.setSupportsManualRefunds = function(supportsManualRefunds) {
	  this.supportsManualRefunds = supportsManualRefunds;
	};

	/**
	* Get the field value
	* @memberof remotepay.MerchantInfo
	* @return {Boolean} 
	*/
	MerchantInfo.prototype.getSupportsManualRefunds = function() {
	  return this.supportsManualRefunds;
	};

	/**
	* Set the field value
	* @memberof remotepay.MerchantInfo
	* @param {Boolean} supportsTipAdjust 
	*/
	MerchantInfo.prototype.setSupportsTipAdjust = function(supportsTipAdjust) {
	  this.supportsTipAdjust = supportsTipAdjust;
	};

	/**
	* Get the field value
	* @memberof remotepay.MerchantInfo
	* @return {Boolean} 
	*/
	MerchantInfo.prototype.getSupportsTipAdjust = function() {
	  return this.supportsTipAdjust;
	};

	/**
	* Set the field value
	* @memberof remotepay.MerchantInfo
	* @param {remotepay.DeviceInfo} deviceInfo 
	*/
	MerchantInfo.prototype.setDeviceInfo = function(deviceInfo) {
	  this.deviceInfo = deviceInfo;
	};

	/**
	* Get the field value
	* @memberof remotepay.MerchantInfo
	* @return {remotepay.DeviceInfo} 
	*/
	MerchantInfo.prototype.getDeviceInfo = function() {
	  return this.deviceInfo;
	};

	/**
	* @memberof remotepay.MerchantInfo
	* @private
	*/
	MerchantInfo.prototype.getMetaInfo = function(fieldName) {
	  var curclass = this._class_;
	  do {
	    var fieldMetaInfo = curclass._meta_.fields[fieldName];
	    if(fieldMetaInfo) {
	      return fieldMetaInfo;
	    }
	    if(curclass._meta_._superMeta_) {
	      curclass = curclass._meta_._superMeta_._class_;
	    } else {
	      curclass = null;
	    }
	  } while(curclass);
	  return null;
	};

	MerchantInfo.prototype.toString = function() {
	  return JSON.stringify(this);
	};

	MerchantInfo._meta_ =  {fields:  {}};
	MerchantInfo._meta_._class_ =  MerchantInfo;
	MerchantInfo._meta_.fields["merchantID"] = {};
	MerchantInfo._meta_.fields["merchantID"].type = String;
	MerchantInfo._meta_.fields["merchantMID"] = {};
	MerchantInfo._meta_.fields["merchantMID"].type = String;
	MerchantInfo._meta_.fields["merchantName"] = {};
	MerchantInfo._meta_.fields["merchantName"].type = String;
	MerchantInfo._meta_.fields["supportsAuths"] = {};
	MerchantInfo._meta_.fields["supportsAuths"].type = Boolean;
	MerchantInfo._meta_.fields["supportsPreAuths"] = {};
	MerchantInfo._meta_.fields["supportsPreAuths"].type = Boolean;
	MerchantInfo._meta_.fields["supportsSales"] = {};
	MerchantInfo._meta_.fields["supportsSales"].type = Boolean;
	MerchantInfo._meta_.fields["supportsVaultCards"] = {};
	MerchantInfo._meta_.fields["supportsVaultCards"].type = Boolean;
	MerchantInfo._meta_.fields["supportsManualRefunds"] = {};
	MerchantInfo._meta_.fields["supportsManualRefunds"].type = Boolean;
	MerchantInfo._meta_.fields["supportsTipAdjust"] = {};
	MerchantInfo._meta_.fields["supportsTipAdjust"].type = Boolean;
	MerchantInfo._meta_.fields["deviceInfo"] = {};
	MerchantInfo._meta_.fields["deviceInfo"].type = remotepay_DeviceInfo;

	//
	// Expose the module.
	//
	if (true) {
	module.exports = MerchantInfo;
	}



/***/ }),
/* 1172 */
/***/ (function(module, exports, __webpack_require__) {

	/**
	 * Autogenerated by Avro
	 * 
	 * DO NOT EDIT DIRECTLY
	 */

	var remotepay_ActivityMessage = __webpack_require__(265);

	/** A message sent to custom activities */
	/**
	* @constructor
	* @augments remotepay.ActivityMessage
	* @memberof remotepay
	*/
	var MessageFromActivity = function() {
	  remotepay_ActivityMessage.call(this);
	  this._superClass_ = remotepay_ActivityMessage;
	  this._class_ = MessageFromActivity;
	};

	MessageFromActivity.prototype = Object.create(remotepay_ActivityMessage.prototype);
	MessageFromActivity.prototype.constructor = MessageFromActivity;

	MessageFromActivity._meta_ =  {fields:  {}};
	MessageFromActivity._meta_._class_ =  MessageFromActivity;
	MessageFromActivity._meta_._superMeta_ = remotepay_ActivityMessage._meta_;

	//
	// Expose the module.
	//
	if (true) {
	module.exports = MessageFromActivity;
	}



/***/ }),
/* 1173 */
/***/ (function(module, exports, __webpack_require__) {

	/**
	 * Autogenerated by Avro
	 * 
	 * DO NOT EDIT DIRECTLY
	 */

	var remotepay_ActivityMessage = __webpack_require__(265);

	/** A message sent to custom activities */
	/**
	* @constructor
	* @augments remotepay.ActivityMessage
	* @memberof remotepay
	*/
	var MessageToActivity = function() {
	  remotepay_ActivityMessage.call(this);
	  this._superClass_ = remotepay_ActivityMessage;
	  this._class_ = MessageToActivity;
	};

	MessageToActivity.prototype = Object.create(remotepay_ActivityMessage.prototype);
	MessageToActivity.prototype.constructor = MessageToActivity;

	MessageToActivity._meta_ =  {fields:  {}};
	MessageToActivity._meta_._class_ =  MessageToActivity;
	MessageToActivity._meta_._superMeta_ = remotepay_ActivityMessage._meta_;

	//
	// Expose the module.
	//
	if (true) {
	module.exports = MessageToActivity;
	}



/***/ }),
/* 1174 */
/***/ (function(module, exports, __webpack_require__) {

	/**
	 * Autogenerated by Avro
	 * 
	 * DO NOT EDIT DIRECTLY
	 */

	var remotepay_BaseRequest = __webpack_require__(14);

	/** Request to open the cash drawer. */
	/**
	* @constructor
	* @augments remotepay.BaseRequest
	* @memberof remotepay
	*/
	var OpenCashDrawerRequest = function() {
	  remotepay_BaseRequest.call(this);
	  this._superClass_ = remotepay_BaseRequest;
	  this._class_ = OpenCashDrawerRequest;
	  this.reason = undefined;
	  this.deviceId = undefined;
	};

	OpenCashDrawerRequest.prototype = Object.create(remotepay_BaseRequest.prototype);
	OpenCashDrawerRequest.prototype.constructor = OpenCashDrawerRequest;

	/**
	* Set the field value
	* Why the drawer is being opened.
	*
	* @memberof remotepay.OpenCashDrawerRequest
	* @param {String} reason 
	*/
	OpenCashDrawerRequest.prototype.setReason = function(reason) {
	  this.reason = reason;
	};

	/**
	* Get the field value
	* Why the drawer is being opened.
	* @memberof remotepay.OpenCashDrawerRequest
	* @return {String} 
	*/
	OpenCashDrawerRequest.prototype.getReason = function() {
	  return this.reason;
	};

	/**
	* Set the field value
	* The ID of the drawer or attached printer.
	*
	* @memberof remotepay.OpenCashDrawerRequest
	* @param {String|Null} deviceId 
	*/
	OpenCashDrawerRequest.prototype.setDeviceId = function(deviceId) {
	  this.deviceId = deviceId;
	};

	/**
	* Get the field value
	* The ID of the drawer or attached printer.
	* @memberof remotepay.OpenCashDrawerRequest
	* @return {String|Null} 
	*/
	OpenCashDrawerRequest.prototype.getDeviceId = function() {
	  return this.deviceId;
	};

	OpenCashDrawerRequest._meta_ =  {fields:  {}};
	OpenCashDrawerRequest._meta_._class_ =  OpenCashDrawerRequest;
	OpenCashDrawerRequest._meta_._superMeta_ = remotepay_BaseRequest._meta_;
	OpenCashDrawerRequest._meta_.fields["reason"] = {};
	OpenCashDrawerRequest._meta_.fields["reason"].type = String;
	OpenCashDrawerRequest._meta_.fields["deviceId"] = {};
	OpenCashDrawerRequest._meta_.fields["deviceId"].type = String;

	//
	// Expose the module.
	//
	if (true) {
	module.exports = OpenCashDrawerRequest;
	}



/***/ }),
/* 1175 */
/***/ (function(module, exports, __webpack_require__) {

	/**
	 * Autogenerated by Avro
	 * 
	 * DO NOT EDIT DIRECTLY
	 */

	var remotepay_TransactionType = __webpack_require__(89);
	var remotepay_BaseTransactionRequest = __webpack_require__(169);

	/**
	* @constructor
	* @augments remotepay.BaseTransactionRequest
	* @memberof remotepay
	*/
	var PreAuthRequest = function() {
	  remotepay_BaseTransactionRequest.call(this);
	  this._superClass_ = remotepay_BaseTransactionRequest;
	  this._class_ = PreAuthRequest;
	  this.type = remotepay_TransactionType["AUTH"];
	};

	PreAuthRequest.prototype = Object.create(remotepay_BaseTransactionRequest.prototype);
	PreAuthRequest.prototype.constructor = PreAuthRequest;

	PreAuthRequest._meta_ =  {fields:  {}};
	PreAuthRequest._meta_._class_ =  PreAuthRequest;
	PreAuthRequest._meta_._superMeta_ = remotepay_BaseTransactionRequest._meta_;

	//
	// Expose the module.
	//
	if (true) {
	module.exports = PreAuthRequest;
	}



/***/ }),
/* 1176 */
/***/ (function(module, exports, __webpack_require__) {

	/**
	 * Autogenerated by Avro
	 * 
	 * DO NOT EDIT DIRECTLY
	 */

	var remotepay_PaymentResponse = __webpack_require__(125);

	/**
	* @constructor
	* @augments remotepay.PaymentResponse
	* @memberof remotepay
	*/
	var PreAuthResponse = function() {
	  remotepay_PaymentResponse.call(this);
	  this._superClass_ = remotepay_PaymentResponse;
	  this._class_ = PreAuthResponse;
	};

	PreAuthResponse.prototype = Object.create(remotepay_PaymentResponse.prototype);
	PreAuthResponse.prototype.constructor = PreAuthResponse;

	PreAuthResponse._meta_ =  {fields:  {}};
	PreAuthResponse._meta_._class_ =  PreAuthResponse;
	PreAuthResponse._meta_._superMeta_ = remotepay_PaymentResponse._meta_;

	//
	// Expose the module.
	//
	if (true) {
	module.exports = PreAuthResponse;
	}



/***/ }),
/* 1177 */
/***/ (function(module, exports, __webpack_require__) {

	/**
	 * Autogenerated by Avro
	 * 
	 * DO NOT EDIT DIRECTLY
	 */

	var remotepay_BaseRequest = __webpack_require__(14);

	/** Request to get the status of a print job. */
	/**
	* @constructor
	* @augments remotepay.BaseRequest
	* @memberof remotepay
	*/
	var PrintJobStatusRequest = function() {
	  remotepay_BaseRequest.call(this);
	  this._superClass_ = remotepay_BaseRequest;
	  this._class_ = PrintJobStatusRequest;
	  this.printRequestId = undefined;
	};

	PrintJobStatusRequest.prototype = Object.create(remotepay_BaseRequest.prototype);
	PrintJobStatusRequest.prototype.constructor = PrintJobStatusRequest;

	/**
	* Set the field value
	* The ID of the print job
	*
	* @memberof remotepay.PrintJobStatusRequest
	* @param {String} printRequestId 
	*/
	PrintJobStatusRequest.prototype.setPrintRequestId = function(printRequestId) {
	  this.printRequestId = printRequestId;
	};

	/**
	* Get the field value
	* The ID of the print job
	* @memberof remotepay.PrintJobStatusRequest
	* @return {String} 
	*/
	PrintJobStatusRequest.prototype.getPrintRequestId = function() {
	  return this.printRequestId;
	};

	PrintJobStatusRequest._meta_ =  {fields:  {}};
	PrintJobStatusRequest._meta_._class_ =  PrintJobStatusRequest;
	PrintJobStatusRequest._meta_._superMeta_ = remotepay_BaseRequest._meta_;
	PrintJobStatusRequest._meta_.fields["printRequestId"] = {};
	PrintJobStatusRequest._meta_.fields["printRequestId"].type = String;

	//
	// Expose the module.
	//
	if (true) {
	module.exports = PrintJobStatusRequest;
	}



/***/ }),
/* 1178 */
/***/ (function(module, exports, __webpack_require__) {

	/**
	 * Autogenerated by Avro
	 * 
	 * DO NOT EDIT DIRECTLY
	 */

	var printer_PrintJobStatus = __webpack_require__(258);
	var remotepay_BaseResponse = __webpack_require__(15);

	/** contains the status of the requested print job */
	/**
	* @constructor
	* @augments remotepay.BaseResponse
	* @memberof remotepay
	*/
	var PrintJobStatusResponse = function() {
	  remotepay_BaseResponse.call(this);
	  this._superClass_ = remotepay_BaseResponse;
	  this._class_ = PrintJobStatusResponse;
	  this.status = undefined;
	  this.printRequestId = undefined;
	};

	PrintJobStatusResponse.prototype = Object.create(remotepay_BaseResponse.prototype);
	PrintJobStatusResponse.prototype.constructor = PrintJobStatusResponse;

	/**
	* Set the field value
	* The current status of the requested print job
	*
	* @memberof remotepay.PrintJobStatusResponse
	* @param {printer.PrintJobStatus} status 
	*/
	PrintJobStatusResponse.prototype.setStatus = function(status) {
	  this.status = status;
	};

	/**
	* Get the field value
	* The current status of the requested print job
	* @memberof remotepay.PrintJobStatusResponse
	* @return {printer.PrintJobStatus} 
	*/
	PrintJobStatusResponse.prototype.getStatus = function() {
	  return this.status;
	};

	/**
	* Set the field value
	* The ID of the print job
	*
	* @memberof remotepay.PrintJobStatusResponse
	* @param {String} printRequestId 
	*/
	PrintJobStatusResponse.prototype.setPrintRequestId = function(printRequestId) {
	  this.printRequestId = printRequestId;
	};

	/**
	* Get the field value
	* The ID of the print job
	* @memberof remotepay.PrintJobStatusResponse
	* @return {String} 
	*/
	PrintJobStatusResponse.prototype.getPrintRequestId = function() {
	  return this.printRequestId;
	};

	PrintJobStatusResponse._meta_ =  {fields:  {}};
	PrintJobStatusResponse._meta_._class_ =  PrintJobStatusResponse;
	PrintJobStatusResponse._meta_._superMeta_ = remotepay_BaseResponse._meta_;
	PrintJobStatusResponse._meta_.fields["status"] = {};
	PrintJobStatusResponse._meta_.fields["status"].type = printer_PrintJobStatus;
	PrintJobStatusResponse._meta_.fields["printRequestId"] = {};
	PrintJobStatusResponse._meta_.fields["printRequestId"].type = String;

	//
	// Expose the module.
	//
	if (true) {
	module.exports = PrintJobStatusResponse;
	}



/***/ }),
/* 1179 */
/***/ (function(module, exports, __webpack_require__) {

	/**
	 * Autogenerated by Avro
	 * 
	 * DO NOT EDIT DIRECTLY
	 */

	var payments_Credit = __webpack_require__(30);

	/**
	* @constructor
	* @memberof remotepay
	*/
	var PrintManualRefundDeclineReceiptMessage = function() {
	  this._class_ = PrintManualRefundDeclineReceiptMessage;
	  this.credit = undefined;
	  this.reason = undefined;
	};


	/**
	* Set the field value
	* @memberof remotepay.PrintManualRefundDeclineReceiptMessage
	* @param {payments.Credit} credit 
	*/
	PrintManualRefundDeclineReceiptMessage.prototype.setCredit = function(credit) {
	  this.credit = credit;
	};

	/**
	* Get the field value
	* @memberof remotepay.PrintManualRefundDeclineReceiptMessage
	* @return {payments.Credit} 
	*/
	PrintManualRefundDeclineReceiptMessage.prototype.getCredit = function() {
	  return this.credit;
	};

	/**
	* Set the field value
	* @memberof remotepay.PrintManualRefundDeclineReceiptMessage
	* @param {String} reason 
	*/
	PrintManualRefundDeclineReceiptMessage.prototype.setReason = function(reason) {
	  this.reason = reason;
	};

	/**
	* Get the field value
	* @memberof remotepay.PrintManualRefundDeclineReceiptMessage
	* @return {String} 
	*/
	PrintManualRefundDeclineReceiptMessage.prototype.getReason = function() {
	  return this.reason;
	};

	/**
	* @memberof remotepay.PrintManualRefundDeclineReceiptMessage
	* @private
	*/
	PrintManualRefundDeclineReceiptMessage.prototype.getMetaInfo = function(fieldName) {
	  var curclass = this._class_;
	  do {
	    var fieldMetaInfo = curclass._meta_.fields[fieldName];
	    if(fieldMetaInfo) {
	      return fieldMetaInfo;
	    }
	    if(curclass._meta_._superMeta_) {
	      curclass = curclass._meta_._superMeta_._class_;
	    } else {
	      curclass = null;
	    }
	  } while(curclass);
	  return null;
	};

	PrintManualRefundDeclineReceiptMessage.prototype.toString = function() {
	  return JSON.stringify(this);
	};

	PrintManualRefundDeclineReceiptMessage._meta_ =  {fields:  {}};
	PrintManualRefundDeclineReceiptMessage._meta_._class_ =  PrintManualRefundDeclineReceiptMessage;
	PrintManualRefundDeclineReceiptMessage._meta_.fields["credit"] = {};
	PrintManualRefundDeclineReceiptMessage._meta_.fields["credit"].type = payments_Credit;
	PrintManualRefundDeclineReceiptMessage._meta_.fields["reason"] = {};
	PrintManualRefundDeclineReceiptMessage._meta_.fields["reason"].type = String;

	//
	// Expose the module.
	//
	if (true) {
	module.exports = PrintManualRefundDeclineReceiptMessage;
	}



/***/ }),
/* 1180 */
/***/ (function(module, exports, __webpack_require__) {

	/**
	 * Autogenerated by Avro
	 * 
	 * DO NOT EDIT DIRECTLY
	 */

	var payments_Credit = __webpack_require__(30);

	/**
	* @constructor
	* @memberof remotepay
	*/
	var PrintManualRefundReceiptMessage = function() {
	  this._class_ = PrintManualRefundReceiptMessage;
	  this.credit = undefined;
	};


	/**
	* Set the field value
	* @memberof remotepay.PrintManualRefundReceiptMessage
	* @param {payments.Credit} credit 
	*/
	PrintManualRefundReceiptMessage.prototype.setCredit = function(credit) {
	  this.credit = credit;
	};

	/**
	* Get the field value
	* @memberof remotepay.PrintManualRefundReceiptMessage
	* @return {payments.Credit} 
	*/
	PrintManualRefundReceiptMessage.prototype.getCredit = function() {
	  return this.credit;
	};

	/**
	* @memberof remotepay.PrintManualRefundReceiptMessage
	* @private
	*/
	PrintManualRefundReceiptMessage.prototype.getMetaInfo = function(fieldName) {
	  var curclass = this._class_;
	  do {
	    var fieldMetaInfo = curclass._meta_.fields[fieldName];
	    if(fieldMetaInfo) {
	      return fieldMetaInfo;
	    }
	    if(curclass._meta_._superMeta_) {
	      curclass = curclass._meta_._superMeta_._class_;
	    } else {
	      curclass = null;
	    }
	  } while(curclass);
	  return null;
	};

	PrintManualRefundReceiptMessage.prototype.toString = function() {
	  return JSON.stringify(this);
	};

	PrintManualRefundReceiptMessage._meta_ =  {fields:  {}};
	PrintManualRefundReceiptMessage._meta_._class_ =  PrintManualRefundReceiptMessage;
	PrintManualRefundReceiptMessage._meta_.fields["credit"] = {};
	PrintManualRefundReceiptMessage._meta_.fields["credit"].type = payments_Credit;

	//
	// Expose the module.
	//
	if (true) {
	module.exports = PrintManualRefundReceiptMessage;
	}



/***/ }),
/* 1181 */
/***/ (function(module, exports, __webpack_require__) {

	/**
	 * Autogenerated by Avro
	 * 
	 * DO NOT EDIT DIRECTLY
	 */

	var payments_Payment = __webpack_require__(11);

	/**
	* @constructor
	* @memberof remotepay
	*/
	var PrintPaymentDeclineReceiptMessage = function() {
	  this._class_ = PrintPaymentDeclineReceiptMessage;
	  this.payment = undefined;
	  this.reason = undefined;
	};


	/**
	* Set the field value
	* @memberof remotepay.PrintPaymentDeclineReceiptMessage
	* @param {payments.Payment} payment 
	*/
	PrintPaymentDeclineReceiptMessage.prototype.setPayment = function(payment) {
	  this.payment = payment;
	};

	/**
	* Get the field value
	* @memberof remotepay.PrintPaymentDeclineReceiptMessage
	* @return {payments.Payment} 
	*/
	PrintPaymentDeclineReceiptMessage.prototype.getPayment = function() {
	  return this.payment;
	};

	/**
	* Set the field value
	* @memberof remotepay.PrintPaymentDeclineReceiptMessage
	* @param {String} reason 
	*/
	PrintPaymentDeclineReceiptMessage.prototype.setReason = function(reason) {
	  this.reason = reason;
	};

	/**
	* Get the field value
	* @memberof remotepay.PrintPaymentDeclineReceiptMessage
	* @return {String} 
	*/
	PrintPaymentDeclineReceiptMessage.prototype.getReason = function() {
	  return this.reason;
	};

	/**
	* @memberof remotepay.PrintPaymentDeclineReceiptMessage
	* @private
	*/
	PrintPaymentDeclineReceiptMessage.prototype.getMetaInfo = function(fieldName) {
	  var curclass = this._class_;
	  do {
	    var fieldMetaInfo = curclass._meta_.fields[fieldName];
	    if(fieldMetaInfo) {
	      return fieldMetaInfo;
	    }
	    if(curclass._meta_._superMeta_) {
	      curclass = curclass._meta_._superMeta_._class_;
	    } else {
	      curclass = null;
	    }
	  } while(curclass);
	  return null;
	};

	PrintPaymentDeclineReceiptMessage.prototype.toString = function() {
	  return JSON.stringify(this);
	};

	PrintPaymentDeclineReceiptMessage._meta_ =  {fields:  {}};
	PrintPaymentDeclineReceiptMessage._meta_._class_ =  PrintPaymentDeclineReceiptMessage;
	PrintPaymentDeclineReceiptMessage._meta_.fields["payment"] = {};
	PrintPaymentDeclineReceiptMessage._meta_.fields["payment"].type = payments_Payment;
	PrintPaymentDeclineReceiptMessage._meta_.fields["reason"] = {};
	PrintPaymentDeclineReceiptMessage._meta_.fields["reason"].type = String;

	//
	// Expose the module.
	//
	if (true) {
	module.exports = PrintPaymentDeclineReceiptMessage;
	}



/***/ }),
/* 1182 */
/***/ (function(module, exports, __webpack_require__) {

	/**
	 * Autogenerated by Avro
	 * 
	 * DO NOT EDIT DIRECTLY
	 */

	var payments_Payment = __webpack_require__(11);

	/**
	* @constructor
	* @memberof remotepay
	*/
	var PrintPaymentMerchantCopyReceiptMessage = function() {
	  this._class_ = PrintPaymentMerchantCopyReceiptMessage;
	  this.payment = undefined;
	};


	/**
	* Set the field value
	* @memberof remotepay.PrintPaymentMerchantCopyReceiptMessage
	* @param {payments.Payment} payment 
	*/
	PrintPaymentMerchantCopyReceiptMessage.prototype.setPayment = function(payment) {
	  this.payment = payment;
	};

	/**
	* Get the field value
	* @memberof remotepay.PrintPaymentMerchantCopyReceiptMessage
	* @return {payments.Payment} 
	*/
	PrintPaymentMerchantCopyReceiptMessage.prototype.getPayment = function() {
	  return this.payment;
	};

	/**
	* @memberof remotepay.PrintPaymentMerchantCopyReceiptMessage
	* @private
	*/
	PrintPaymentMerchantCopyReceiptMessage.prototype.getMetaInfo = function(fieldName) {
	  var curclass = this._class_;
	  do {
	    var fieldMetaInfo = curclass._meta_.fields[fieldName];
	    if(fieldMetaInfo) {
	      return fieldMetaInfo;
	    }
	    if(curclass._meta_._superMeta_) {
	      curclass = curclass._meta_._superMeta_._class_;
	    } else {
	      curclass = null;
	    }
	  } while(curclass);
	  return null;
	};

	PrintPaymentMerchantCopyReceiptMessage.prototype.toString = function() {
	  return JSON.stringify(this);
	};

	PrintPaymentMerchantCopyReceiptMessage._meta_ =  {fields:  {}};
	PrintPaymentMerchantCopyReceiptMessage._meta_._class_ =  PrintPaymentMerchantCopyReceiptMessage;
	PrintPaymentMerchantCopyReceiptMessage._meta_.fields["payment"] = {};
	PrintPaymentMerchantCopyReceiptMessage._meta_.fields["payment"].type = payments_Payment;

	//
	// Expose the module.
	//
	if (true) {
	module.exports = PrintPaymentMerchantCopyReceiptMessage;
	}



/***/ }),
/* 1183 */
/***/ (function(module, exports, __webpack_require__) {

	/**
	 * Autogenerated by Avro
	 * 
	 * DO NOT EDIT DIRECTLY
	 */

	var payments_Payment = __webpack_require__(11);
	var order_Order = __webpack_require__(68);

	/**
	* @constructor
	* @memberof remotepay
	*/
	var PrintPaymentReceiptMessage = function() {
	  this._class_ = PrintPaymentReceiptMessage;
	  this.payment = undefined;
	  this.order = undefined;
	};


	/**
	* Set the field value
	* @memberof remotepay.PrintPaymentReceiptMessage
	* @param {payments.Payment} payment 
	*/
	PrintPaymentReceiptMessage.prototype.setPayment = function(payment) {
	  this.payment = payment;
	};

	/**
	* Get the field value
	* @memberof remotepay.PrintPaymentReceiptMessage
	* @return {payments.Payment} 
	*/
	PrintPaymentReceiptMessage.prototype.getPayment = function() {
	  return this.payment;
	};

	/**
	* Set the field value
	* @memberof remotepay.PrintPaymentReceiptMessage
	* @param {order.Order} order 
	*/
	PrintPaymentReceiptMessage.prototype.setOrder = function(order) {
	  this.order = order;
	};

	/**
	* Get the field value
	* @memberof remotepay.PrintPaymentReceiptMessage
	* @return {order.Order} 
	*/
	PrintPaymentReceiptMessage.prototype.getOrder = function() {
	  return this.order;
	};

	/**
	* @memberof remotepay.PrintPaymentReceiptMessage
	* @private
	*/
	PrintPaymentReceiptMessage.prototype.getMetaInfo = function(fieldName) {
	  var curclass = this._class_;
	  do {
	    var fieldMetaInfo = curclass._meta_.fields[fieldName];
	    if(fieldMetaInfo) {
	      return fieldMetaInfo;
	    }
	    if(curclass._meta_._superMeta_) {
	      curclass = curclass._meta_._superMeta_._class_;
	    } else {
	      curclass = null;
	    }
	  } while(curclass);
	  return null;
	};

	PrintPaymentReceiptMessage.prototype.toString = function() {
	  return JSON.stringify(this);
	};

	PrintPaymentReceiptMessage._meta_ =  {fields:  {}};
	PrintPaymentReceiptMessage._meta_._class_ =  PrintPaymentReceiptMessage;
	PrintPaymentReceiptMessage._meta_.fields["payment"] = {};
	PrintPaymentReceiptMessage._meta_.fields["payment"].type = payments_Payment;
	PrintPaymentReceiptMessage._meta_.fields["order"] = {};
	PrintPaymentReceiptMessage._meta_.fields["order"].type = order_Order;

	//
	// Expose the module.
	//
	if (true) {
	module.exports = PrintPaymentReceiptMessage;
	}



/***/ }),
/* 1184 */
/***/ (function(module, exports, __webpack_require__) {

	/**
	 * Autogenerated by Avro
	 * 
	 * DO NOT EDIT DIRECTLY
	 */

	var payments_Payment = __webpack_require__(11);
	var order_Order = __webpack_require__(68);
	var payments_Refund = __webpack_require__(26);

	/**
	* @constructor
	* @memberof remotepay
	*/
	var PrintRefundPaymentReceiptMessage = function() {
	  this._class_ = PrintRefundPaymentReceiptMessage;
	  this.payment = undefined;
	  this.order = undefined;
	  this.refund = undefined;
	};


	/**
	* Set the field value
	* @memberof remotepay.PrintRefundPaymentReceiptMessage
	* @param {payments.Payment} payment 
	*/
	PrintRefundPaymentReceiptMessage.prototype.setPayment = function(payment) {
	  this.payment = payment;
	};

	/**
	* Get the field value
	* @memberof remotepay.PrintRefundPaymentReceiptMessage
	* @return {payments.Payment} 
	*/
	PrintRefundPaymentReceiptMessage.prototype.getPayment = function() {
	  return this.payment;
	};

	/**
	* Set the field value
	* @memberof remotepay.PrintRefundPaymentReceiptMessage
	* @param {order.Order} order 
	*/
	PrintRefundPaymentReceiptMessage.prototype.setOrder = function(order) {
	  this.order = order;
	};

	/**
	* Get the field value
	* @memberof remotepay.PrintRefundPaymentReceiptMessage
	* @return {order.Order} 
	*/
	PrintRefundPaymentReceiptMessage.prototype.getOrder = function() {
	  return this.order;
	};

	/**
	* Set the field value
	* @memberof remotepay.PrintRefundPaymentReceiptMessage
	* @param {payments.Refund} refund 
	*/
	PrintRefundPaymentReceiptMessage.prototype.setRefund = function(refund) {
	  this.refund = refund;
	};

	/**
	* Get the field value
	* @memberof remotepay.PrintRefundPaymentReceiptMessage
	* @return {payments.Refund} 
	*/
	PrintRefundPaymentReceiptMessage.prototype.getRefund = function() {
	  return this.refund;
	};

	/**
	* @memberof remotepay.PrintRefundPaymentReceiptMessage
	* @private
	*/
	PrintRefundPaymentReceiptMessage.prototype.getMetaInfo = function(fieldName) {
	  var curclass = this._class_;
	  do {
	    var fieldMetaInfo = curclass._meta_.fields[fieldName];
	    if(fieldMetaInfo) {
	      return fieldMetaInfo;
	    }
	    if(curclass._meta_._superMeta_) {
	      curclass = curclass._meta_._superMeta_._class_;
	    } else {
	      curclass = null;
	    }
	  } while(curclass);
	  return null;
	};

	PrintRefundPaymentReceiptMessage.prototype.toString = function() {
	  return JSON.stringify(this);
	};

	PrintRefundPaymentReceiptMessage._meta_ =  {fields:  {}};
	PrintRefundPaymentReceiptMessage._meta_._class_ =  PrintRefundPaymentReceiptMessage;
	PrintRefundPaymentReceiptMessage._meta_.fields["payment"] = {};
	PrintRefundPaymentReceiptMessage._meta_.fields["payment"].type = payments_Payment;
	PrintRefundPaymentReceiptMessage._meta_.fields["order"] = {};
	PrintRefundPaymentReceiptMessage._meta_.fields["order"].type = order_Order;
	PrintRefundPaymentReceiptMessage._meta_.fields["refund"] = {};
	PrintRefundPaymentReceiptMessage._meta_.fields["refund"].type = payments_Refund;

	//
	// Expose the module.
	//
	if (true) {
	module.exports = PrintRefundPaymentReceiptMessage;
	}



/***/ }),
/* 1185 */
/***/ (function(module, exports, __webpack_require__) {

	/**
	 * Autogenerated by Avro
	 * 
	 * DO NOT EDIT DIRECTLY
	 */

	var payments_Payment = __webpack_require__(11);
	var remotepay_BaseResponse = __webpack_require__(15);
	var order_Order = __webpack_require__(68);
	var payments_Refund = __webpack_require__(26);

	/**
	* @constructor
	* @augments remotepay.BaseResponse
	* @memberof remotepay
	*/
	var PrintRefundPaymentReceiptResponse = function() {
	  remotepay_BaseResponse.call(this);
	  this._superClass_ = remotepay_BaseResponse;
	  this._class_ = PrintRefundPaymentReceiptResponse;
	  this.payment = undefined;
	  this.refund = undefined;
	  this.order = undefined;
	};

	PrintRefundPaymentReceiptResponse.prototype = Object.create(remotepay_BaseResponse.prototype);
	PrintRefundPaymentReceiptResponse.prototype.constructor = PrintRefundPaymentReceiptResponse;

	/**
	* Set the field value
	* @memberof remotepay.PrintRefundPaymentReceiptResponse
	* @param {payments.Payment} payment 
	*/
	PrintRefundPaymentReceiptResponse.prototype.setPayment = function(payment) {
	  this.payment = payment;
	};

	/**
	* Get the field value
	* @memberof remotepay.PrintRefundPaymentReceiptResponse
	* @return {payments.Payment} 
	*/
	PrintRefundPaymentReceiptResponse.prototype.getPayment = function() {
	  return this.payment;
	};

	/**
	* Set the field value
	* @memberof remotepay.PrintRefundPaymentReceiptResponse
	* @param {payments.Refund} refund 
	*/
	PrintRefundPaymentReceiptResponse.prototype.setRefund = function(refund) {
	  this.refund = refund;
	};

	/**
	* Get the field value
	* @memberof remotepay.PrintRefundPaymentReceiptResponse
	* @return {payments.Refund} 
	*/
	PrintRefundPaymentReceiptResponse.prototype.getRefund = function() {
	  return this.refund;
	};

	/**
	* Set the field value
	* @memberof remotepay.PrintRefundPaymentReceiptResponse
	* @param {order.Order} order 
	*/
	PrintRefundPaymentReceiptResponse.prototype.setOrder = function(order) {
	  this.order = order;
	};

	/**
	* Get the field value
	* @memberof remotepay.PrintRefundPaymentReceiptResponse
	* @return {order.Order} 
	*/
	PrintRefundPaymentReceiptResponse.prototype.getOrder = function() {
	  return this.order;
	};

	PrintRefundPaymentReceiptResponse._meta_ =  {fields:  {}};
	PrintRefundPaymentReceiptResponse._meta_._class_ =  PrintRefundPaymentReceiptResponse;
	PrintRefundPaymentReceiptResponse._meta_._superMeta_ = remotepay_BaseResponse._meta_;
	PrintRefundPaymentReceiptResponse._meta_.fields["payment"] = {};
	PrintRefundPaymentReceiptResponse._meta_.fields["payment"].type = payments_Payment;
	PrintRefundPaymentReceiptResponse._meta_.fields["refund"] = {};
	PrintRefundPaymentReceiptResponse._meta_.fields["refund"].type = payments_Refund;
	PrintRefundPaymentReceiptResponse._meta_.fields["order"] = {};
	PrintRefundPaymentReceiptResponse._meta_.fields["order"].type = order_Order;

	//
	// Expose the module.
	//
	if (true) {
	module.exports = PrintRefundPaymentReceiptResponse;
	}



/***/ }),
/* 1186 */
/***/ (function(module, exports, __webpack_require__) {

	/**
	 * Autogenerated by Avro
	 * 
	 * DO NOT EDIT DIRECTLY
	 */

	var remotepay_BaseRequest = __webpack_require__(14);
	var remotepay_Img = __webpack_require__(489);

	/** Request to print an image, text, or an image from a URL. Current intention is to only have one. */
	/**
	* @constructor
	* @augments remotepay.BaseRequest
	* @memberof remotepay
	*/
	var PrintRequest = function() {
	  remotepay_BaseRequest.call(this);
	  this._superClass_ = remotepay_BaseRequest;
	  this._class_ = PrintRequest;
	  this.images = undefined;
	  this.text = undefined;
	  this.imageUrls = undefined;
	  this.printRequestId = undefined;
	  this.printDeviceId = undefined;
	};

	PrintRequest.prototype = Object.create(remotepay_BaseRequest.prototype);
	PrintRequest.prototype.constructor = PrintRequest;

	/**
	* Set the field value
	* The image to be printed (put in an array for future extensibility).
	*
	* @memberof remotepay.PrintRequest
	* @param {Array.<remotepay.Img>} images An array of 
	*/
	PrintRequest.prototype.setImages = function(images) {
	  this.images = images;
	};

	/**
	* Get the field value
	* The image to be printed (put in an array for future extensibility).
	* @memberof remotepay.PrintRequest
	* @return {Array.<remotepay.Img>} An array of 
	*/
	PrintRequest.prototype.getImages = function() {
	  return this.images;
	};

	/**
	* Set the field value
	* The text to be printed.
	*
	* @memberof remotepay.PrintRequest
	* @param {Array.<String>} text An array of 
	*/
	PrintRequest.prototype.setText = function(text) {
	  this.text = text;
	};

	/**
	* Get the field value
	* The text to be printed.
	* @memberof remotepay.PrintRequest
	* @return {Array.<String>} An array of 
	*/
	PrintRequest.prototype.getText = function() {
	  return this.text;
	};

	/**
	* Set the field value
	* The image URLs to be printed (put in an array for future extensibility).
	*
	* @memberof remotepay.PrintRequest
	* @param {Array.<String>} imageUrls An array of 
	*/
	PrintRequest.prototype.setImageUrls = function(imageUrls) {
	  this.imageUrls = imageUrls;
	};

	/**
	* Get the field value
	* The image URLs to be printed (put in an array for future extensibility).
	* @memberof remotepay.PrintRequest
	* @return {Array.<String>} An array of 
	*/
	PrintRequest.prototype.getImageUrls = function() {
	  return this.imageUrls;
	};

	/**
	* Set the field value
	* The ID associated with the request (for Status checks and similar use).
	*
	* @memberof remotepay.PrintRequest
	* @param {String|Null} printRequestId 
	*/
	PrintRequest.prototype.setPrintRequestId = function(printRequestId) {
	  this.printRequestId = printRequestId;
	};

	/**
	* Get the field value
	* The ID associated with the request (for Status checks and similar use).
	* @memberof remotepay.PrintRequest
	* @return {String|Null} 
	*/
	PrintRequest.prototype.getPrintRequestId = function() {
	  return this.printRequestId;
	};

	/**
	* Set the field value
	* The ID of the device the print job should print from.
	*
	* @memberof remotepay.PrintRequest
	* @param {String|Null} printDeviceId 
	*/
	PrintRequest.prototype.setPrintDeviceId = function(printDeviceId) {
	  this.printDeviceId = printDeviceId;
	};

	/**
	* Get the field value
	* The ID of the device the print job should print from.
	* @memberof remotepay.PrintRequest
	* @return {String|Null} 
	*/
	PrintRequest.prototype.getPrintDeviceId = function() {
	  return this.printDeviceId;
	};

	PrintRequest._meta_ =  {fields:  {}};
	PrintRequest._meta_._class_ =  PrintRequest;
	PrintRequest._meta_._superMeta_ = remotepay_BaseRequest._meta_;
	PrintRequest._meta_.fields["images"] = {};
	PrintRequest._meta_.fields["images"].type = Array;
	PrintRequest._meta_.fields["images"].elementType = remotepay_Img;
	PrintRequest._meta_.fields["text"] = {};
	PrintRequest._meta_.fields["text"].type = Array;
	PrintRequest._meta_.fields["imageUrls"] = {};
	PrintRequest._meta_.fields["imageUrls"].type = Array;
	PrintRequest._meta_.fields["printRequestId"] = {};
	PrintRequest._meta_.fields["printRequestId"].type = String;
	PrintRequest._meta_.fields["printDeviceId"] = {};
	PrintRequest._meta_.fields["printDeviceId"].type = String;

	//
	// Expose the module.
	//
	if (true) {
	module.exports = PrintRequest;
	}



/***/ }),
/* 1187 */
/***/ (function(module, exports, __webpack_require__) {

	/**
	 * Autogenerated by Avro
	 * 
	 * DO NOT EDIT DIRECTLY
	 */

	var remotepay_QueryStatus = __webpack_require__(271);

	/**
	* @constructor
	* @memberof remotepay
	*/
	var QueryStatusEnum = function() {
	  this._class_ = QueryStatusEnum;
	  this.queryStatus = undefined;
	};


	/**
	* Set the field value
	* @memberof remotepay.QueryStatusEnum
	* @param {remotepay.QueryStatus} queryStatus 
	*/
	QueryStatusEnum.prototype.setQueryStatus = function(queryStatus) {
	  this.queryStatus = queryStatus;
	};

	/**
	* Get the field value
	* @memberof remotepay.QueryStatusEnum
	* @return {remotepay.QueryStatus} 
	*/
	QueryStatusEnum.prototype.getQueryStatus = function() {
	  return this.queryStatus;
	};

	/**
	* @memberof remotepay.QueryStatusEnum
	* @private
	*/
	QueryStatusEnum.prototype.getMetaInfo = function(fieldName) {
	  var curclass = this._class_;
	  do {
	    var fieldMetaInfo = curclass._meta_.fields[fieldName];
	    if(fieldMetaInfo) {
	      return fieldMetaInfo;
	    }
	    if(curclass._meta_._superMeta_) {
	      curclass = curclass._meta_._superMeta_._class_;
	    } else {
	      curclass = null;
	    }
	  } while(curclass);
	  return null;
	};

	QueryStatusEnum.prototype.toString = function() {
	  return JSON.stringify(this);
	};

	QueryStatusEnum._meta_ =  {fields:  {}};
	QueryStatusEnum._meta_._class_ =  QueryStatusEnum;
	QueryStatusEnum._meta_.fields["queryStatus"] = {};
	QueryStatusEnum._meta_.fields["queryStatus"].type = remotepay_QueryStatus;

	//
	// Expose the module.
	//
	if (true) {
	module.exports = QueryStatusEnum;
	}



/***/ }),
/* 1188 */
/***/ (function(module, exports, __webpack_require__) {

	/**
	 * Autogenerated by Avro
	 * 
	 * DO NOT EDIT DIRECTLY
	 */

	var remotepay_BaseRequest = __webpack_require__(14);

	/**
	* @constructor
	* @augments remotepay.BaseRequest
	* @memberof remotepay
	*/
	var ReadCardDataRequest = function() {
	  remotepay_BaseRequest.call(this);
	  this._superClass_ = remotepay_BaseRequest;
	  this._class_ = ReadCardDataRequest;
	  this.isForceSwipePinEntry = undefined;
	  this.cardEntryMethods = undefined;
	};

	ReadCardDataRequest.prototype = Object.create(remotepay_BaseRequest.prototype);
	ReadCardDataRequest.prototype.constructor = ReadCardDataRequest;

	/**
	* Set the field value
	* If true, then if the card is swiped, a pin entry must be done.
	*
	* @memberof remotepay.ReadCardDataRequest
	* @param {Boolean} isForceSwipePinEntry 
	*/
	ReadCardDataRequest.prototype.setIsForceSwipePinEntry = function(isForceSwipePinEntry) {
	  this.isForceSwipePinEntry = isForceSwipePinEntry;
	};

	/**
	* Get the field value
	* If true, then if the card is swiped, a pin entry must be done.
	* @memberof remotepay.ReadCardDataRequest
	* @return {Boolean} 
	*/
	ReadCardDataRequest.prototype.getIsForceSwipePinEntry = function() {
	  return this.isForceSwipePinEntry;
	};

	/**
	* Set the field value
	* The bit mask of allowable card read types.
	*
	* @memberof remotepay.ReadCardDataRequest
	* @param {Number} cardEntryMethods must be an integer
	*/
	ReadCardDataRequest.prototype.setCardEntryMethods = function(cardEntryMethods) {
	  this.cardEntryMethods = cardEntryMethods;
	};

	/**
	* Get the field value
	* The bit mask of allowable card read types.
	* @memberof remotepay.ReadCardDataRequest
	* @return {Number} must be an integer
	*/
	ReadCardDataRequest.prototype.getCardEntryMethods = function() {
	  return this.cardEntryMethods;
	};

	ReadCardDataRequest._meta_ =  {fields:  {}};
	ReadCardDataRequest._meta_._class_ =  ReadCardDataRequest;
	ReadCardDataRequest._meta_._superMeta_ = remotepay_BaseRequest._meta_;
	ReadCardDataRequest._meta_.fields["isForceSwipePinEntry"] = {};
	ReadCardDataRequest._meta_.fields["isForceSwipePinEntry"].type = Boolean;
	ReadCardDataRequest._meta_.fields["cardEntryMethods"] = {};
	ReadCardDataRequest._meta_.fields["cardEntryMethods"].type = Number;

	//
	// Expose the module.
	//
	if (true) {
	module.exports = ReadCardDataRequest;
	}



/***/ }),
/* 1189 */
/***/ (function(module, exports, __webpack_require__) {

	/**
	 * Autogenerated by Avro
	 * 
	 * DO NOT EDIT DIRECTLY
	 */

	var base_CardData = __webpack_require__(233);
	var remotepay_BaseResponse = __webpack_require__(15);

	/**
	* @constructor
	* @augments remotepay.BaseResponse
	* @memberof remotepay
	*/
	var ReadCardDataResponse = function() {
	  remotepay_BaseResponse.call(this);
	  this._superClass_ = remotepay_BaseResponse;
	  this._class_ = ReadCardDataResponse;
	  this.cardData = undefined;
	};

	ReadCardDataResponse.prototype = Object.create(remotepay_BaseResponse.prototype);
	ReadCardDataResponse.prototype.constructor = ReadCardDataResponse;

	/**
	* Set the field value
	* The data for the card
	*
	* @memberof remotepay.ReadCardDataResponse
	* @param {base.CardData} cardData 
	*/
	ReadCardDataResponse.prototype.setCardData = function(cardData) {
	  this.cardData = cardData;
	};

	/**
	* Get the field value
	* The data for the card
	* @memberof remotepay.ReadCardDataResponse
	* @return {base.CardData} 
	*/
	ReadCardDataResponse.prototype.getCardData = function() {
	  return this.cardData;
	};

	ReadCardDataResponse._meta_ =  {fields:  {}};
	ReadCardDataResponse._meta_._class_ =  ReadCardDataResponse;
	ReadCardDataResponse._meta_._superMeta_ = remotepay_BaseResponse._meta_;
	ReadCardDataResponse._meta_.fields["cardData"] = {};
	ReadCardDataResponse._meta_.fields["cardData"].type = base_CardData;

	//
	// Expose the module.
	//
	if (true) {
	module.exports = ReadCardDataResponse;
	}



/***/ }),
/* 1190 */
/***/ (function(module, exports, __webpack_require__) {

	/**
	 * Autogenerated by Avro
	 * 
	 * DO NOT EDIT DIRECTLY
	 */

	var remotepay_BaseRequest = __webpack_require__(14);

	/**
	* @constructor
	* @augments remotepay.BaseRequest
	* @memberof remotepay
	*/
	var RefundPaymentRequest = function() {
	  remotepay_BaseRequest.call(this);
	  this._superClass_ = remotepay_BaseRequest;
	  this._class_ = RefundPaymentRequest;
	  this.fullRefund = undefined;
	  this.amount = undefined;
	  this.orderId = undefined;
	  this.paymentId = undefined;
	  this.disablePrinting = undefined;
	  this.disableReceiptSelection = undefined;
	  this.extras = undefined;
	};

	RefundPaymentRequest.prototype = Object.create(remotepay_BaseRequest.prototype);
	RefundPaymentRequest.prototype.constructor = RefundPaymentRequest;

	/**
	* Set the field value
	* If true, then it is a full refund.  The amount will be ignored.
	*
	* @memberof remotepay.RefundPaymentRequest
	* @param {Boolean} fullRefund 
	*/
	RefundPaymentRequest.prototype.setFullRefund = function(fullRefund) {
	  this.fullRefund = fullRefund;
	};

	/**
	* Get the field value
	* If true, then it is a full refund.  The amount will be ignored.
	* @memberof remotepay.RefundPaymentRequest
	* @return {Boolean} 
	*/
	RefundPaymentRequest.prototype.getFullRefund = function() {
	  return this.fullRefund;
	};

	/**
	* Set the field value
	* Amount to be refunded
	*
	* @memberof remotepay.RefundPaymentRequest
	* @param {Number|Null} amount must be a long integer, 
	*/
	RefundPaymentRequest.prototype.setAmount = function(amount) {
	  this.amount = amount;
	};

	/**
	* Get the field value
	* Amount to be refunded
	* @memberof remotepay.RefundPaymentRequest
	* @return {Number|Null} must be a long integer, 
	*/
	RefundPaymentRequest.prototype.getAmount = function() {
	  return this.amount;
	};

	/**
	* Set the field value
	* Unique identifier
	*
	* @memberof remotepay.RefundPaymentRequest
	* @param {String} orderId 
	*/
	RefundPaymentRequest.prototype.setOrderId = function(orderId) {
	  this.orderId = orderId;
	};

	/**
	* Get the field value
	* Unique identifier
	* @memberof remotepay.RefundPaymentRequest
	* @return {String} 
	*/
	RefundPaymentRequest.prototype.getOrderId = function() {
	  return this.orderId;
	};

	/**
	* Set the field value
	* Unique identifier
	*
	* @memberof remotepay.RefundPaymentRequest
	* @param {String} paymentId 
	*/
	RefundPaymentRequest.prototype.setPaymentId = function(paymentId) {
	  this.paymentId = paymentId;
	};

	/**
	* Get the field value
	* Unique identifier
	* @memberof remotepay.RefundPaymentRequest
	* @return {String} 
	*/
	RefundPaymentRequest.prototype.getPaymentId = function() {
	  return this.paymentId;
	};

	/**
	* Set the field value
	* If true, then do not print using the clover printer.  Return print information.
	*
	* @memberof remotepay.RefundPaymentRequest
	* @param {Boolean|Null} disablePrinting 
	*/
	RefundPaymentRequest.prototype.setDisablePrinting = function(disablePrinting) {
	  this.disablePrinting = disablePrinting;
	};

	/**
	* Get the field value
	* If true, then do not print using the clover printer.  Return print information.
	* @memberof remotepay.RefundPaymentRequest
	* @return {Boolean|Null} 
	*/
	RefundPaymentRequest.prototype.getDisablePrinting = function() {
	  return this.disablePrinting;
	};

	/**
	* Set the field value
	* Do not show the receipt options screen
	*
	* @memberof remotepay.RefundPaymentRequest
	* @param {Boolean|Null} disableReceiptSelection 
	*/
	RefundPaymentRequest.prototype.setDisableReceiptSelection = function(disableReceiptSelection) {
	  this.disableReceiptSelection = disableReceiptSelection;
	};

	/**
	* Get the field value
	* Do not show the receipt options screen
	* @memberof remotepay.RefundPaymentRequest
	* @return {Boolean|Null} 
	*/
	RefundPaymentRequest.prototype.getDisableReceiptSelection = function() {
	  return this.disableReceiptSelection;
	};

	/**
	* Set the field value
	* Extra pass-through data used by external systems.
	*
	* @memberof remotepay.RefundPaymentRequest
	* @param {Object.<String,String>} extras A map of <String> to <>
	*/
	RefundPaymentRequest.prototype.setExtras = function(extras) {
	  this.extras = extras;
	};

	/**
	* Get the field value
	* Extra pass-through data used by external systems.
	* @memberof remotepay.RefundPaymentRequest
	* @return {Object.<String,String>} A map of <String> to <>
	*/
	RefundPaymentRequest.prototype.getExtras = function() {
	  return this.extras;
	};

	RefundPaymentRequest._meta_ =  {fields:  {}};
	RefundPaymentRequest._meta_._class_ =  RefundPaymentRequest;
	RefundPaymentRequest._meta_._superMeta_ = remotepay_BaseRequest._meta_;
	RefundPaymentRequest._meta_.fields["fullRefund"] = {};
	RefundPaymentRequest._meta_.fields["fullRefund"].type = Boolean;
	RefundPaymentRequest._meta_.fields["amount"] = {};
	RefundPaymentRequest._meta_.fields["amount"].type = Number;
	RefundPaymentRequest._meta_.fields["orderId"] = {};
	RefundPaymentRequest._meta_.fields["orderId"].type = String;
	RefundPaymentRequest._meta_.fields["paymentId"] = {};
	RefundPaymentRequest._meta_.fields["paymentId"].type = String;
	RefundPaymentRequest._meta_.fields["disablePrinting"] = {};
	RefundPaymentRequest._meta_.fields["disablePrinting"].type = Boolean;
	RefundPaymentRequest._meta_.fields["disableReceiptSelection"] = {};
	RefundPaymentRequest._meta_.fields["disableReceiptSelection"].type = Boolean;
	RefundPaymentRequest._meta_.fields["extras"] = {};
	RefundPaymentRequest._meta_.fields["extras"].type = Object;

	//
	// Expose the module.
	//
	if (true) {
	module.exports = RefundPaymentRequest;
	}



/***/ }),
/* 1191 */
/***/ (function(module, exports, __webpack_require__) {

	/**
	 * Autogenerated by Avro
	 * 
	 * DO NOT EDIT DIRECTLY
	 */

	var remotepay_BaseRequest = __webpack_require__(14);
	var remotepay_DataProviderConfig = __webpack_require__(266);

	/**
	* @constructor
	* @augments remotepay.BaseRequest
	* @memberof remotepay
	*/
	var RegisterForCustomerProvidedDataRequest = function() {
	  remotepay_BaseRequest.call(this);
	  this._superClass_ = remotepay_BaseRequest;
	  this._class_ = RegisterForCustomerProvidedDataRequest;
	  this.configurations = undefined;
	};

	RegisterForCustomerProvidedDataRequest.prototype = Object.create(remotepay_BaseRequest.prototype);
	RegisterForCustomerProvidedDataRequest.prototype.constructor = RegisterForCustomerProvidedDataRequest;

	/**
	* Set the field value
	* Configurations for the data we want to receive.
	*
	* @memberof remotepay.RegisterForCustomerProvidedDataRequest
	* @param {Array.<remotepay.DataProviderConfig>} configurations An array of 
	*/
	RegisterForCustomerProvidedDataRequest.prototype.setConfigurations = function(configurations) {
	  this.configurations = configurations;
	};

	/**
	* Get the field value
	* Configurations for the data we want to receive.
	* @memberof remotepay.RegisterForCustomerProvidedDataRequest
	* @return {Array.<remotepay.DataProviderConfig>} An array of 
	*/
	RegisterForCustomerProvidedDataRequest.prototype.getConfigurations = function() {
	  return this.configurations;
	};

	RegisterForCustomerProvidedDataRequest._meta_ =  {fields:  {}};
	RegisterForCustomerProvidedDataRequest._meta_._class_ =  RegisterForCustomerProvidedDataRequest;
	RegisterForCustomerProvidedDataRequest._meta_._superMeta_ = remotepay_BaseRequest._meta_;
	RegisterForCustomerProvidedDataRequest._meta_.fields["configurations"] = {};
	RegisterForCustomerProvidedDataRequest._meta_.fields["configurations"].type = Array;
	RegisterForCustomerProvidedDataRequest._meta_.fields["configurations"].elementType = remotepay_DataProviderConfig;

	//
	// Expose the module.
	//
	if (true) {
	module.exports = RegisterForCustomerProvidedDataRequest;
	}



/***/ }),
/* 1192 */
/***/ (function(module, exports, __webpack_require__) {

	/**
	 * Autogenerated by Avro
	 * 
	 * DO NOT EDIT DIRECTLY
	 */

	var remotepay_ExternalDeviceState = __webpack_require__(124);
	var remotepay_BaseResponse = __webpack_require__(15);

	/**
	* @constructor
	* @augments remotepay.BaseResponse
	* @memberof remotepay
	*/
	var ResetDeviceResponse = function() {
	  remotepay_BaseResponse.call(this);
	  this._superClass_ = remotepay_BaseResponse;
	  this._class_ = ResetDeviceResponse;
	  this.state = undefined;
	};

	ResetDeviceResponse.prototype = Object.create(remotepay_BaseResponse.prototype);
	ResetDeviceResponse.prototype.constructor = ResetDeviceResponse;

	/**
	* Set the field value
	* High level state of the connected device.
	*
	* @memberof remotepay.ResetDeviceResponse
	* @param {remotepay.ExternalDeviceState} state 
	*/
	ResetDeviceResponse.prototype.setState = function(state) {
	  this.state = state;
	};

	/**
	* Get the field value
	* High level state of the connected device.
	* @memberof remotepay.ResetDeviceResponse
	* @return {remotepay.ExternalDeviceState} 
	*/
	ResetDeviceResponse.prototype.getState = function() {
	  return this.state;
	};

	ResetDeviceResponse._meta_ =  {fields:  {}};
	ResetDeviceResponse._meta_._class_ =  ResetDeviceResponse;
	ResetDeviceResponse._meta_._superMeta_ = remotepay_BaseResponse._meta_;
	ResetDeviceResponse._meta_.fields["state"] = {};
	ResetDeviceResponse._meta_.fields["state"].type = remotepay_ExternalDeviceState;

	//
	// Expose the module.
	//
	if (true) {
	module.exports = ResetDeviceResponse;
	}



/***/ }),
/* 1193 */
/***/ (function(module, exports, __webpack_require__) {

	/**
	 * Autogenerated by Avro
	 * 
	 * DO NOT EDIT DIRECTLY
	 */

	var remotepay_ResponseCode = __webpack_require__(272);

	/**
	* @constructor
	* @memberof remotepay
	*/
	var ResponseCodeEnum = function() {
	  this._class_ = ResponseCodeEnum;
	  this.status = undefined;
	};


	/**
	* Set the field value
	* @memberof remotepay.ResponseCodeEnum
	* @param {remotepay.ResponseCode} status 
	*/
	ResponseCodeEnum.prototype.setStatus = function(status) {
	  this.status = status;
	};

	/**
	* Get the field value
	* @memberof remotepay.ResponseCodeEnum
	* @return {remotepay.ResponseCode} 
	*/
	ResponseCodeEnum.prototype.getStatus = function() {
	  return this.status;
	};

	/**
	* @memberof remotepay.ResponseCodeEnum
	* @private
	*/
	ResponseCodeEnum.prototype.getMetaInfo = function(fieldName) {
	  var curclass = this._class_;
	  do {
	    var fieldMetaInfo = curclass._meta_.fields[fieldName];
	    if(fieldMetaInfo) {
	      return fieldMetaInfo;
	    }
	    if(curclass._meta_._superMeta_) {
	      curclass = curclass._meta_._superMeta_._class_;
	    } else {
	      curclass = null;
	    }
	  } while(curclass);
	  return null;
	};

	ResponseCodeEnum.prototype.toString = function() {
	  return JSON.stringify(this);
	};

	ResponseCodeEnum._meta_ =  {fields:  {}};
	ResponseCodeEnum._meta_._class_ =  ResponseCodeEnum;
	ResponseCodeEnum._meta_.fields["status"] = {};
	ResponseCodeEnum._meta_.fields["status"].type = remotepay_ResponseCode;

	//
	// Expose the module.
	//
	if (true) {
	module.exports = ResponseCodeEnum;
	}



/***/ }),
/* 1194 */
/***/ (function(module, exports, __webpack_require__) {

	/**
	 * Autogenerated by Avro
	 * 
	 * DO NOT EDIT DIRECTLY
	 */

	var remotepay_ResultStatus = __webpack_require__(170);

	/**
	* @constructor
	* @memberof remotepay
	*/
	var ResultStatusEnum = function() {
	  this._class_ = ResultStatusEnum;
	  this.status = undefined;
	};


	/**
	* Set the field value
	* @memberof remotepay.ResultStatusEnum
	* @param {remotepay.ResultStatus} status 
	*/
	ResultStatusEnum.prototype.setStatus = function(status) {
	  this.status = status;
	};

	/**
	* Get the field value
	* @memberof remotepay.ResultStatusEnum
	* @return {remotepay.ResultStatus} 
	*/
	ResultStatusEnum.prototype.getStatus = function() {
	  return this.status;
	};

	/**
	* @memberof remotepay.ResultStatusEnum
	* @private
	*/
	ResultStatusEnum.prototype.getMetaInfo = function(fieldName) {
	  var curclass = this._class_;
	  do {
	    var fieldMetaInfo = curclass._meta_.fields[fieldName];
	    if(fieldMetaInfo) {
	      return fieldMetaInfo;
	    }
	    if(curclass._meta_._superMeta_) {
	      curclass = curclass._meta_._superMeta_._class_;
	    } else {
	      curclass = null;
	    }
	  } while(curclass);
	  return null;
	};

	ResultStatusEnum.prototype.toString = function() {
	  return JSON.stringify(this);
	};

	ResultStatusEnum._meta_ =  {fields:  {}};
	ResultStatusEnum._meta_._class_ =  ResultStatusEnum;
	ResultStatusEnum._meta_.fields["status"] = {};
	ResultStatusEnum._meta_.fields["status"].type = remotepay_ResultStatus;

	//
	// Expose the module.
	//
	if (true) {
	module.exports = ResultStatusEnum;
	}



/***/ }),
/* 1195 */
/***/ (function(module, exports, __webpack_require__) {

	/**
	 * Autogenerated by Avro
	 * 
	 * DO NOT EDIT DIRECTLY
	 */

	var remotepay_BaseRequest = __webpack_require__(14);

	/**
	* @constructor
	* @augments remotepay.BaseRequest
	* @memberof remotepay
	*/
	var RetrieveDeviceStatusRequest = function() {
	  remotepay_BaseRequest.call(this);
	  this._superClass_ = remotepay_BaseRequest;
	  this._class_ = RetrieveDeviceStatusRequest;
	  this.sendLastMessage = false;
	};

	RetrieveDeviceStatusRequest.prototype = Object.create(remotepay_BaseRequest.prototype);
	RetrieveDeviceStatusRequest.prototype.constructor = RetrieveDeviceStatusRequest;

	/**
	* Set the field value
	* Send last message, if true
	*
	* @memberof remotepay.RetrieveDeviceStatusRequest
	* @param {Boolean} sendLastMessage 
	*/
	RetrieveDeviceStatusRequest.prototype.setSendLastMessage = function(sendLastMessage) {
	  this.sendLastMessage = sendLastMessage;
	};

	/**
	* Get the field value
	* Send last message, if true
	* @memberof remotepay.RetrieveDeviceStatusRequest
	* @return {Boolean} 
	*/
	RetrieveDeviceStatusRequest.prototype.getSendLastMessage = function() {
	  return this.sendLastMessage;
	};

	RetrieveDeviceStatusRequest._meta_ =  {fields:  {}};
	RetrieveDeviceStatusRequest._meta_._class_ =  RetrieveDeviceStatusRequest;
	RetrieveDeviceStatusRequest._meta_._superMeta_ = remotepay_BaseRequest._meta_;
	RetrieveDeviceStatusRequest._meta_.fields["sendLastMessage"] = {};
	RetrieveDeviceStatusRequest._meta_.fields["sendLastMessage"].type = Boolean;

	//
	// Expose the module.
	//
	if (true) {
	module.exports = RetrieveDeviceStatusRequest;
	}



/***/ }),
/* 1196 */
/***/ (function(module, exports, __webpack_require__) {

	/**
	 * Autogenerated by Avro
	 * 
	 * DO NOT EDIT DIRECTLY
	 */

	var remotepay_ExternalDeviceState = __webpack_require__(124);
	var remotepay_BaseResponse = __webpack_require__(15);
	var remotepay_ExternalDeviceStateData = __webpack_require__(269);

	/**
	* @constructor
	* @augments remotepay.BaseResponse
	* @memberof remotepay
	*/
	var RetrieveDeviceStatusResponse = function() {
	  remotepay_BaseResponse.call(this);
	  this._superClass_ = remotepay_BaseResponse;
	  this._class_ = RetrieveDeviceStatusResponse;
	  this.state = undefined;
	  this.data = undefined;
	};

	RetrieveDeviceStatusResponse.prototype = Object.create(remotepay_BaseResponse.prototype);
	RetrieveDeviceStatusResponse.prototype.constructor = RetrieveDeviceStatusResponse;

	/**
	* Set the field value
	* High level state of the connected device.
	*
	* @memberof remotepay.RetrieveDeviceStatusResponse
	* @param {remotepay.ExternalDeviceState} state 
	*/
	RetrieveDeviceStatusResponse.prototype.setState = function(state) {
	  this.state = state;
	};

	/**
	* Get the field value
	* High level state of the connected device.
	* @memberof remotepay.RetrieveDeviceStatusResponse
	* @return {remotepay.ExternalDeviceState} 
	*/
	RetrieveDeviceStatusResponse.prototype.getState = function() {
	  return this.state;
	};

	/**
	* Set the field value
	* Additional data elements supplementing the state of the connected device.
	*
	* @memberof remotepay.RetrieveDeviceStatusResponse
	* @param {remotepay.ExternalDeviceStateData} data 
	*/
	RetrieveDeviceStatusResponse.prototype.setData = function(data) {
	  this.data = data;
	};

	/**
	* Get the field value
	* Additional data elements supplementing the state of the connected device.
	* @memberof remotepay.RetrieveDeviceStatusResponse
	* @return {remotepay.ExternalDeviceStateData} 
	*/
	RetrieveDeviceStatusResponse.prototype.getData = function() {
	  return this.data;
	};

	RetrieveDeviceStatusResponse._meta_ =  {fields:  {}};
	RetrieveDeviceStatusResponse._meta_._class_ =  RetrieveDeviceStatusResponse;
	RetrieveDeviceStatusResponse._meta_._superMeta_ = remotepay_BaseResponse._meta_;
	RetrieveDeviceStatusResponse._meta_.fields["state"] = {};
	RetrieveDeviceStatusResponse._meta_.fields["state"].type = remotepay_ExternalDeviceState;
	RetrieveDeviceStatusResponse._meta_.fields["data"] = {};
	RetrieveDeviceStatusResponse._meta_.fields["data"].type = remotepay_ExternalDeviceStateData;

	//
	// Expose the module.
	//
	if (true) {
	module.exports = RetrieveDeviceStatusResponse;
	}



/***/ }),
/* 1197 */
/***/ (function(module, exports, __webpack_require__) {

	/**
	 * Autogenerated by Avro
	 * 
	 * DO NOT EDIT DIRECTLY
	 */

	var remotepay_BaseRequest = __webpack_require__(14);

	/** Request to retrieve a payment made to a specific device. */
	/**
	* @constructor
	* @augments remotepay.BaseRequest
	* @memberof remotepay
	*/
	var RetrievePaymentRequest = function() {
	  remotepay_BaseRequest.call(this);
	  this._superClass_ = remotepay_BaseRequest;
	  this._class_ = RetrievePaymentRequest;
	  this.externalPaymentId = undefined;
	};

	RetrievePaymentRequest.prototype = Object.create(remotepay_BaseRequest.prototype);
	RetrievePaymentRequest.prototype.constructor = RetrievePaymentRequest;

	/**
	* Set the field value
	* The externalPaymentId used when a payment was created
	*
	* @memberof remotepay.RetrievePaymentRequest
	* @param {String} externalPaymentId 
	*/
	RetrievePaymentRequest.prototype.setExternalPaymentId = function(externalPaymentId) {
	  this.externalPaymentId = externalPaymentId;
	};

	/**
	* Get the field value
	* The externalPaymentId used when a payment was created
	* @memberof remotepay.RetrievePaymentRequest
	* @return {String} 
	*/
	RetrievePaymentRequest.prototype.getExternalPaymentId = function() {
	  return this.externalPaymentId;
	};

	RetrievePaymentRequest._meta_ =  {fields:  {}};
	RetrievePaymentRequest._meta_._class_ =  RetrievePaymentRequest;
	RetrievePaymentRequest._meta_._superMeta_ = remotepay_BaseRequest._meta_;
	RetrievePaymentRequest._meta_.fields["externalPaymentId"] = {};
	RetrievePaymentRequest._meta_.fields["externalPaymentId"].type = String;

	//
	// Expose the module.
	//
	if (true) {
	module.exports = RetrievePaymentRequest;
	}



/***/ }),
/* 1198 */
/***/ (function(module, exports, __webpack_require__) {

	/**
	 * Autogenerated by Avro
	 * 
	 * DO NOT EDIT DIRECTLY
	 */

	var payments_Payment = __webpack_require__(11);
	var remotepay_BaseResponse = __webpack_require__(15);
	var remotepay_QueryStatus = __webpack_require__(271);

	/**
	* @constructor
	* @augments remotepay.BaseResponse
	* @memberof remotepay
	*/
	var RetrievePaymentResponse = function() {
	  remotepay_BaseResponse.call(this);
	  this._superClass_ = remotepay_BaseResponse;
	  this._class_ = RetrievePaymentResponse;
	  this.externalPaymentId = undefined;
	  this.queryStatus = undefined;
	  this.payment = undefined;
	};

	RetrievePaymentResponse.prototype = Object.create(remotepay_BaseResponse.prototype);
	RetrievePaymentResponse.prototype.constructor = RetrievePaymentResponse;

	/**
	* Set the field value
	* The externalPaymentId used when a payment was created
	*
	* @memberof remotepay.RetrievePaymentResponse
	* @param {String} externalPaymentId 
	*/
	RetrievePaymentResponse.prototype.setExternalPaymentId = function(externalPaymentId) {
	  this.externalPaymentId = externalPaymentId;
	};

	/**
	* Get the field value
	* The externalPaymentId used when a payment was created
	* @memberof remotepay.RetrievePaymentResponse
	* @return {String} 
	*/
	RetrievePaymentResponse.prototype.getExternalPaymentId = function() {
	  return this.externalPaymentId;
	};

	/**
	* Set the field value
	* The status of the query
	*
	* @memberof remotepay.RetrievePaymentResponse
	* @param {remotepay.QueryStatus} queryStatus 
	*/
	RetrievePaymentResponse.prototype.setQueryStatus = function(queryStatus) {
	  this.queryStatus = queryStatus;
	};

	/**
	* Get the field value
	* The status of the query
	* @memberof remotepay.RetrievePaymentResponse
	* @return {remotepay.QueryStatus} 
	*/
	RetrievePaymentResponse.prototype.getQueryStatus = function() {
	  return this.queryStatus;
	};

	/**
	* Set the field value
	* Payment information
	*
	* @memberof remotepay.RetrievePaymentResponse
	* @param {payments.Payment} payment 
	*/
	RetrievePaymentResponse.prototype.setPayment = function(payment) {
	  this.payment = payment;
	};

	/**
	* Get the field value
	* Payment information
	* @memberof remotepay.RetrievePaymentResponse
	* @return {payments.Payment} 
	*/
	RetrievePaymentResponse.prototype.getPayment = function() {
	  return this.payment;
	};

	RetrievePaymentResponse._meta_ =  {fields:  {}};
	RetrievePaymentResponse._meta_._class_ =  RetrievePaymentResponse;
	RetrievePaymentResponse._meta_._superMeta_ = remotepay_BaseResponse._meta_;
	RetrievePaymentResponse._meta_.fields["externalPaymentId"] = {};
	RetrievePaymentResponse._meta_.fields["externalPaymentId"].type = String;
	RetrievePaymentResponse._meta_.fields["queryStatus"] = {};
	RetrievePaymentResponse._meta_.fields["queryStatus"].type = remotepay_QueryStatus;
	RetrievePaymentResponse._meta_.fields["payment"] = {};
	RetrievePaymentResponse._meta_.fields["payment"].type = payments_Payment;

	//
	// Expose the module.
	//
	if (true) {
	module.exports = RetrievePaymentResponse;
	}



/***/ }),
/* 1199 */
/***/ (function(module, exports, __webpack_require__) {

	/**
	 * Autogenerated by Avro
	 * 
	 * DO NOT EDIT DIRECTLY
	 */

	var base_PendingPaymentEntry = __webpack_require__(236);
	var remotepay_BaseResponse = __webpack_require__(15);

	/**
	* @constructor
	* @augments remotepay.BaseResponse
	* @memberof remotepay
	*/
	var RetrievePendingPaymentsResponse = function() {
	  remotepay_BaseResponse.call(this);
	  this._superClass_ = remotepay_BaseResponse;
	  this._class_ = RetrievePendingPaymentsResponse;
	  this.pendingPaymentEntries = undefined;
	};

	RetrievePendingPaymentsResponse.prototype = Object.create(remotepay_BaseResponse.prototype);
	RetrievePendingPaymentsResponse.prototype.constructor = RetrievePendingPaymentsResponse;

	/**
	* Set the field value
	* The pending payments.
	*
	* @memberof remotepay.RetrievePendingPaymentsResponse
	* @param {Array.<base.PendingPaymentEntry>} pendingPaymentEntries An array of 
	*/
	RetrievePendingPaymentsResponse.prototype.setPendingPaymentEntries = function(pendingPaymentEntries) {
	  this.pendingPaymentEntries = pendingPaymentEntries;
	};

	/**
	* Get the field value
	* The pending payments.
	* @memberof remotepay.RetrievePendingPaymentsResponse
	* @return {Array.<base.PendingPaymentEntry>} An array of 
	*/
	RetrievePendingPaymentsResponse.prototype.getPendingPaymentEntries = function() {
	  return this.pendingPaymentEntries;
	};

	RetrievePendingPaymentsResponse._meta_ =  {fields:  {}};
	RetrievePendingPaymentsResponse._meta_._class_ =  RetrievePendingPaymentsResponse;
	RetrievePendingPaymentsResponse._meta_._superMeta_ = remotepay_BaseResponse._meta_;
	RetrievePendingPaymentsResponse._meta_.fields["pendingPaymentEntries"] = {};
	RetrievePendingPaymentsResponse._meta_.fields["pendingPaymentEntries"].type = Array;
	RetrievePendingPaymentsResponse._meta_.fields["pendingPaymentEntries"].elementType = base_PendingPaymentEntry;

	//
	// Expose the module.
	//
	if (true) {
	module.exports = RetrievePendingPaymentsResponse;
	}



/***/ }),
/* 1200 */
/***/ (function(module, exports, __webpack_require__) {

	/**
	 * Autogenerated by Avro
	 * 
	 * DO NOT EDIT DIRECTLY
	 */

	var remotepay_BaseRequest = __webpack_require__(14);
	var printer_PrintCategory = __webpack_require__(166);

	/** Request to retrieve printers attached to a specific device. */
	/**
	* @constructor
	* @augments remotepay.BaseRequest
	* @memberof remotepay
	*/
	var RetrievePrintersRequest = function() {
	  remotepay_BaseRequest.call(this);
	  this._superClass_ = remotepay_BaseRequest;
	  this._class_ = RetrievePrintersRequest;
	  this.category = undefined;
	};

	RetrievePrintersRequest.prototype = Object.create(remotepay_BaseRequest.prototype);
	RetrievePrintersRequest.prototype.constructor = RetrievePrintersRequest;

	/**
	* Set the field value
	* Category of printers to retrieve
	*
	* @memberof remotepay.RetrievePrintersRequest
	* @param {printer.PrintCategory} category 
	*/
	RetrievePrintersRequest.prototype.setCategory = function(category) {
	  this.category = category;
	};

	/**
	* Get the field value
	* Category of printers to retrieve
	* @memberof remotepay.RetrievePrintersRequest
	* @return {printer.PrintCategory} 
	*/
	RetrievePrintersRequest.prototype.getCategory = function() {
	  return this.category;
	};

	RetrievePrintersRequest._meta_ =  {fields:  {}};
	RetrievePrintersRequest._meta_._class_ =  RetrievePrintersRequest;
	RetrievePrintersRequest._meta_._superMeta_ = remotepay_BaseRequest._meta_;
	RetrievePrintersRequest._meta_.fields["category"] = {};
	RetrievePrintersRequest._meta_.fields["category"].type = printer_PrintCategory;

	//
	// Expose the module.
	//
	if (true) {
	module.exports = RetrievePrintersRequest;
	}



/***/ }),
/* 1201 */
/***/ (function(module, exports, __webpack_require__) {

	/**
	 * Autogenerated by Avro
	 * 
	 * DO NOT EDIT DIRECTLY
	 */

	var printer_Printer = __webpack_require__(88);
	var remotepay_BaseResponse = __webpack_require__(15);

	/** contains the list of printers */
	/**
	* @constructor
	* @augments remotepay.BaseResponse
	* @memberof remotepay
	*/
	var RetrievePrintersResponse = function() {
	  remotepay_BaseResponse.call(this);
	  this._superClass_ = remotepay_BaseResponse;
	  this._class_ = RetrievePrintersResponse;
	  this.printers = undefined;
	};

	RetrievePrintersResponse.prototype = Object.create(remotepay_BaseResponse.prototype);
	RetrievePrintersResponse.prototype.constructor = RetrievePrintersResponse;

	/**
	* Set the field value
	* The list of printers (note, there is some v1-v3 confusion at the moment)
	*
	* @memberof remotepay.RetrievePrintersResponse
	* @param {Array.<printer.Printer>} printers An array of 
	*/
	RetrievePrintersResponse.prototype.setPrinters = function(printers) {
	  this.printers = printers;
	};

	/**
	* Get the field value
	* The list of printers (note, there is some v1-v3 confusion at the moment)
	* @memberof remotepay.RetrievePrintersResponse
	* @return {Array.<printer.Printer>} An array of 
	*/
	RetrievePrintersResponse.prototype.getPrinters = function() {
	  return this.printers;
	};

	RetrievePrintersResponse._meta_ =  {fields:  {}};
	RetrievePrintersResponse._meta_._class_ =  RetrievePrintersResponse;
	RetrievePrintersResponse._meta_._superMeta_ = remotepay_BaseResponse._meta_;
	RetrievePrintersResponse._meta_.fields["printers"] = {};
	RetrievePrintersResponse._meta_.fields["printers"].type = Array;
	RetrievePrintersResponse._meta_.fields["printers"].elementType = printer_Printer;

	//
	// Expose the module.
	//
	if (true) {
	module.exports = RetrievePrintersResponse;
	}



/***/ }),
/* 1202 */
/***/ (function(module, exports, __webpack_require__) {

	/**
	 * Autogenerated by Avro
	 * 
	 * DO NOT EDIT DIRECTLY
	 */

	var remotepay_TransactionType = __webpack_require__(89);
	var payments_TipMode = __webpack_require__(254);
	var remotepay_TransactionRequest = __webpack_require__(273);

	/**
	* @constructor
	* @augments remotepay.TransactionRequest
	* @memberof remotepay
	*/
	var SaleRequest = function() {
	  remotepay_TransactionRequest.call(this);
	  this._superClass_ = remotepay_TransactionRequest;
	  this._class_ = SaleRequest;
	  this.type = remotepay_TransactionType["PAYMENT"];
	  this.tipAmount = undefined;
	  this.tipMode = undefined;
	};

	SaleRequest.prototype = Object.create(remotepay_TransactionRequest.prototype);
	SaleRequest.prototype.constructor = SaleRequest;

	/**
	* Set the field value
	* Included tip
	*
	* @memberof remotepay.SaleRequest
	* @param {Number|Null} tipAmount must be a long integer, 
	*/
	SaleRequest.prototype.setTipAmount = function(tipAmount) {
	  this.tipAmount = tipAmount;
	};

	/**
	* Get the field value
	* Included tip
	* @memberof remotepay.SaleRequest
	* @return {Number|Null} must be a long integer, 
	*/
	SaleRequest.prototype.getTipAmount = function() {
	  return this.tipAmount;
	};

	/**
	* Set the field value
	* @memberof remotepay.SaleRequest
	* @param {payments.TipMode} tipMode 
	*/
	SaleRequest.prototype.setTipMode = function(tipMode) {
	  this.tipMode = tipMode;
	};

	/**
	* Get the field value
	* @memberof remotepay.SaleRequest
	* @return {payments.TipMode} 
	*/
	SaleRequest.prototype.getTipMode = function() {
	  return this.tipMode;
	};

	SaleRequest._meta_ =  {fields:  {}};
	SaleRequest._meta_._class_ =  SaleRequest;
	SaleRequest._meta_._superMeta_ = remotepay_TransactionRequest._meta_;
	SaleRequest._meta_.fields["tipAmount"] = {};
	SaleRequest._meta_.fields["tipAmount"].type = Number;
	SaleRequest._meta_.fields["tipMode"] = {};
	SaleRequest._meta_.fields["tipMode"].type = payments_TipMode;

	//
	// Expose the module.
	//
	if (true) {
	module.exports = SaleRequest;
	}



/***/ }),
/* 1203 */
/***/ (function(module, exports, __webpack_require__) {

	/**
	 * Autogenerated by Avro
	 * 
	 * DO NOT EDIT DIRECTLY
	 */

	var remotepay_PaymentResponse = __webpack_require__(125);

	/**
	* @constructor
	* @augments remotepay.PaymentResponse
	* @memberof remotepay
	*/
	var SaleResponse = function() {
	  remotepay_PaymentResponse.call(this);
	  this._superClass_ = remotepay_PaymentResponse;
	  this._class_ = SaleResponse;
	};

	SaleResponse.prototype = Object.create(remotepay_PaymentResponse.prototype);
	SaleResponse.prototype.constructor = SaleResponse;

	SaleResponse._meta_ =  {fields:  {}};
	SaleResponse._meta_._class_ =  SaleResponse;
	SaleResponse._meta_._superMeta_ = remotepay_PaymentResponse._meta_;

	//
	// Expose the module.
	//
	if (true) {
	module.exports = SaleResponse;
	}



/***/ }),
/* 1204 */
/***/ (function(module, exports, __webpack_require__) {

	/**
	 * Autogenerated by Avro
	 * 
	 * DO NOT EDIT DIRECTLY
	 */

	var remotepay_BaseRequest = __webpack_require__(14);
	var remotepay_CustomerInfo = __webpack_require__(486);

	/**
	* @constructor
	* @augments remotepay.BaseRequest
	* @memberof remotepay
	*/
	var SetCustomerInfoRequest = function() {
	  remotepay_BaseRequest.call(this);
	  this._superClass_ = remotepay_BaseRequest;
	  this._class_ = SetCustomerInfoRequest;
	  this.customerInfo = undefined;
	};

	SetCustomerInfoRequest.prototype = Object.create(remotepay_BaseRequest.prototype);
	SetCustomerInfoRequest.prototype.constructor = SetCustomerInfoRequest;

	/**
	* Set the field value
	* Customer information  for a 'current' customer.  This indicates a customer of interest.
	*
	* @memberof remotepay.SetCustomerInfoRequest
	* @param {remotepay.CustomerInfo} customerInfo 
	*/
	SetCustomerInfoRequest.prototype.setCustomerInfo = function(customerInfo) {
	  this.customerInfo = customerInfo;
	};

	/**
	* Get the field value
	* Customer information  for a 'current' customer.  This indicates a customer of interest.
	* @memberof remotepay.SetCustomerInfoRequest
	* @return {remotepay.CustomerInfo} 
	*/
	SetCustomerInfoRequest.prototype.getCustomerInfo = function() {
	  return this.customerInfo;
	};

	SetCustomerInfoRequest._meta_ =  {fields:  {}};
	SetCustomerInfoRequest._meta_._class_ =  SetCustomerInfoRequest;
	SetCustomerInfoRequest._meta_._superMeta_ = remotepay_BaseRequest._meta_;
	SetCustomerInfoRequest._meta_.fields["customerInfo"] = {};
	SetCustomerInfoRequest._meta_.fields["customerInfo"].type = remotepay_CustomerInfo;

	//
	// Expose the module.
	//
	if (true) {
	module.exports = SetCustomerInfoRequest;
	}



/***/ }),
/* 1205 */
/***/ (function(module, exports, __webpack_require__) {

	/**
	 * Autogenerated by Avro
	 * 
	 * DO NOT EDIT DIRECTLY
	 */

	var remotepay_BaseRequest = __webpack_require__(14);

	/**
	* @constructor
	* @augments remotepay.BaseRequest
	* @memberof remotepay
	*/
	var SignatureRequest = function() {
	  remotepay_BaseRequest.call(this);
	  this._superClass_ = remotepay_BaseRequest;
	  this._class_ = SignatureRequest;
	  this.acknowledgementMessage = undefined;
	};

	SignatureRequest.prototype = Object.create(remotepay_BaseRequest.prototype);
	SignatureRequest.prototype.constructor = SignatureRequest;

	/**
	* Set the field value
	* @memberof remotepay.SignatureRequest
	* @param {String} acknowledgementMessage 
	*/
	SignatureRequest.prototype.setAcknowledgementMessage = function(acknowledgementMessage) {
	  this.acknowledgementMessage = acknowledgementMessage;
	};

	/**
	* Get the field value
	* @memberof remotepay.SignatureRequest
	* @return {String} 
	*/
	SignatureRequest.prototype.getAcknowledgementMessage = function() {
	  return this.acknowledgementMessage;
	};

	SignatureRequest._meta_ =  {fields:  {}};
	SignatureRequest._meta_._class_ =  SignatureRequest;
	SignatureRequest._meta_._superMeta_ = remotepay_BaseRequest._meta_;
	SignatureRequest._meta_.fields["acknowledgementMessage"] = {};
	SignatureRequest._meta_.fields["acknowledgementMessage"].type = String;

	//
	// Expose the module.
	//
	if (true) {
	module.exports = SignatureRequest;
	}



/***/ }),
/* 1206 */
/***/ (function(module, exports, __webpack_require__) {

	/**
	 * Autogenerated by Avro
	 * 
	 * DO NOT EDIT DIRECTLY
	 */

	var remotepay_BaseResponse = __webpack_require__(15);
	var base_Signature = __webpack_require__(86);

	/**
	* @constructor
	* @augments remotepay.BaseResponse
	* @memberof remotepay
	*/
	var SignatureResponse = function() {
	  remotepay_BaseResponse.call(this);
	  this._superClass_ = remotepay_BaseResponse;
	  this._class_ = SignatureResponse;
	  this.signature = undefined;
	};

	SignatureResponse.prototype = Object.create(remotepay_BaseResponse.prototype);
	SignatureResponse.prototype.constructor = SignatureResponse;

	/**
	* Set the field value
	* @memberof remotepay.SignatureResponse
	* @param {base.Signature} signature 
	*/
	SignatureResponse.prototype.setSignature = function(signature) {
	  this.signature = signature;
	};

	/**
	* Get the field value
	* @memberof remotepay.SignatureResponse
	* @return {base.Signature} 
	*/
	SignatureResponse.prototype.getSignature = function() {
	  return this.signature;
	};

	SignatureResponse._meta_ =  {fields:  {}};
	SignatureResponse._meta_._class_ =  SignatureResponse;
	SignatureResponse._meta_._superMeta_ = remotepay_BaseResponse._meta_;
	SignatureResponse._meta_.fields["signature"] = {};
	SignatureResponse._meta_.fields["signature"].type = base_Signature;

	//
	// Expose the module.
	//
	if (true) {
	module.exports = SignatureResponse;
	}



/***/ }),
/* 1207 */
/***/ (function(module, exports, __webpack_require__) {

	/**
	 * Autogenerated by Avro
	 * 
	 * DO NOT EDIT DIRECTLY
	 */

	var remotepay_BaseResponse = __webpack_require__(15);

	/**
	* @constructor
	* @augments remotepay.BaseResponse
	* @memberof remotepay
	*/
	var TipAdded = function() {
	  remotepay_BaseResponse.call(this);
	  this._superClass_ = remotepay_BaseResponse;
	  this._class_ = TipAdded;
	  this.tipAmount = undefined;
	};

	TipAdded.prototype = Object.create(remotepay_BaseResponse.prototype);
	TipAdded.prototype.constructor = TipAdded;

	/**
	* Set the field value
	* Tip amount
	*
	* @memberof remotepay.TipAdded
	* @param {Number} tipAmount must be a long integer
	*/
	TipAdded.prototype.setTipAmount = function(tipAmount) {
	  this.tipAmount = tipAmount;
	};

	/**
	* Get the field value
	* Tip amount
	* @memberof remotepay.TipAdded
	* @return {Number} must be a long integer
	*/
	TipAdded.prototype.getTipAmount = function() {
	  return this.tipAmount;
	};

	TipAdded._meta_ =  {fields:  {}};
	TipAdded._meta_._class_ =  TipAdded;
	TipAdded._meta_._superMeta_ = remotepay_BaseResponse._meta_;
	TipAdded._meta_.fields["tipAmount"] = {};
	TipAdded._meta_.fields["tipAmount"].type = Number;

	//
	// Expose the module.
	//
	if (true) {
	module.exports = TipAdded;
	}



/***/ }),
/* 1208 */
/***/ (function(module, exports, __webpack_require__) {

	/**
	 * Autogenerated by Avro
	 * 
	 * DO NOT EDIT DIRECTLY
	 */

	var remotepay_BaseRequest = __webpack_require__(14);

	/**
	* @constructor
	* @augments remotepay.BaseRequest
	* @memberof remotepay
	*/
	var TipAdjustAuthRequest = function() {
	  remotepay_BaseRequest.call(this);
	  this._superClass_ = remotepay_BaseRequest;
	  this._class_ = TipAdjustAuthRequest;
	  this.tipAmount = undefined;
	  this.orderId = undefined;
	  this.paymentId = undefined;
	};

	TipAdjustAuthRequest.prototype = Object.create(remotepay_BaseRequest.prototype);
	TipAdjustAuthRequest.prototype.constructor = TipAdjustAuthRequest;

	/**
	* Set the field value
	* Amount paid in tips
	*
	* @memberof remotepay.TipAdjustAuthRequest
	* @param {Number} tipAmount must be a long integer
	*/
	TipAdjustAuthRequest.prototype.setTipAmount = function(tipAmount) {
	  this.tipAmount = tipAmount;
	};

	/**
	* Get the field value
	* Amount paid in tips
	* @memberof remotepay.TipAdjustAuthRequest
	* @return {Number} must be a long integer
	*/
	TipAdjustAuthRequest.prototype.getTipAmount = function() {
	  return this.tipAmount;
	};

	/**
	* Set the field value
	* Unique identifier
	*
	* @memberof remotepay.TipAdjustAuthRequest
	* @param {String} orderId 
	*/
	TipAdjustAuthRequest.prototype.setOrderId = function(orderId) {
	  this.orderId = orderId;
	};

	/**
	* Get the field value
	* Unique identifier
	* @memberof remotepay.TipAdjustAuthRequest
	* @return {String} 
	*/
	TipAdjustAuthRequest.prototype.getOrderId = function() {
	  return this.orderId;
	};

	/**
	* Set the field value
	* Unique identifier
	*
	* @memberof remotepay.TipAdjustAuthRequest
	* @param {String} paymentId 
	*/
	TipAdjustAuthRequest.prototype.setPaymentId = function(paymentId) {
	  this.paymentId = paymentId;
	};

	/**
	* Get the field value
	* Unique identifier
	* @memberof remotepay.TipAdjustAuthRequest
	* @return {String} 
	*/
	TipAdjustAuthRequest.prototype.getPaymentId = function() {
	  return this.paymentId;
	};

	TipAdjustAuthRequest._meta_ =  {fields:  {}};
	TipAdjustAuthRequest._meta_._class_ =  TipAdjustAuthRequest;
	TipAdjustAuthRequest._meta_._superMeta_ = remotepay_BaseRequest._meta_;
	TipAdjustAuthRequest._meta_.fields["tipAmount"] = {};
	TipAdjustAuthRequest._meta_.fields["tipAmount"].type = Number;
	TipAdjustAuthRequest._meta_.fields["orderId"] = {};
	TipAdjustAuthRequest._meta_.fields["orderId"].type = String;
	TipAdjustAuthRequest._meta_.fields["paymentId"] = {};
	TipAdjustAuthRequest._meta_.fields["paymentId"].type = String;

	//
	// Expose the module.
	//
	if (true) {
	module.exports = TipAdjustAuthRequest;
	}



/***/ }),
/* 1209 */
/***/ (function(module, exports, __webpack_require__) {

	/**
	 * Autogenerated by Avro
	 * 
	 * DO NOT EDIT DIRECTLY
	 */

	var remotepay_BaseResponse = __webpack_require__(15);

	/**
	* @constructor
	* @augments remotepay.BaseResponse
	* @memberof remotepay
	*/
	var TipAdjustAuthResponse = function() {
	  remotepay_BaseResponse.call(this);
	  this._superClass_ = remotepay_BaseResponse;
	  this._class_ = TipAdjustAuthResponse;
	  this.tipAmount = undefined;
	  this.paymentId = undefined;
	};

	TipAdjustAuthResponse.prototype = Object.create(remotepay_BaseResponse.prototype);
	TipAdjustAuthResponse.prototype.constructor = TipAdjustAuthResponse;

	/**
	* Set the field value
	* Amount of tip
	*
	* @memberof remotepay.TipAdjustAuthResponse
	* @param {Number} tipAmount must be a long integer
	*/
	TipAdjustAuthResponse.prototype.setTipAmount = function(tipAmount) {
	  this.tipAmount = tipAmount;
	};

	/**
	* Get the field value
	* Amount of tip
	* @memberof remotepay.TipAdjustAuthResponse
	* @return {Number} must be a long integer
	*/
	TipAdjustAuthResponse.prototype.getTipAmount = function() {
	  return this.tipAmount;
	};

	/**
	* Set the field value
	* Unique identifier for a payment
	*
	* @memberof remotepay.TipAdjustAuthResponse
	* @param {String} paymentId 
	*/
	TipAdjustAuthResponse.prototype.setPaymentId = function(paymentId) {
	  this.paymentId = paymentId;
	};

	/**
	* Get the field value
	* Unique identifier for a payment
	* @memberof remotepay.TipAdjustAuthResponse
	* @return {String} 
	*/
	TipAdjustAuthResponse.prototype.getPaymentId = function() {
	  return this.paymentId;
	};

	TipAdjustAuthResponse._meta_ =  {fields:  {}};
	TipAdjustAuthResponse._meta_._class_ =  TipAdjustAuthResponse;
	TipAdjustAuthResponse._meta_._superMeta_ = remotepay_BaseResponse._meta_;
	TipAdjustAuthResponse._meta_.fields["tipAmount"] = {};
	TipAdjustAuthResponse._meta_.fields["tipAmount"].type = Number;
	TipAdjustAuthResponse._meta_.fields["paymentId"] = {};
	TipAdjustAuthResponse._meta_.fields["paymentId"].type = String;

	//
	// Expose the module.
	//
	if (true) {
	module.exports = TipAdjustAuthResponse;
	}



/***/ }),
/* 1210 */
/***/ (function(module, exports, __webpack_require__) {

	/**
	 * Autogenerated by Avro
	 * 
	 * DO NOT EDIT DIRECTLY
	 */

	var remotepay_BaseRequest = __webpack_require__(14);
	var merchant_TipSuggestion = __webpack_require__(118);

	/**
	* @constructor
	* @augments remotepay.BaseRequest
	* @memberof remotepay
	*/
	var TipRequest = function() {
	  remotepay_BaseRequest.call(this);
	  this._superClass_ = remotepay_BaseRequest;
	  this._class_ = TipRequest;
	  this.tipSuggestions = undefined;
	  this.tippableAmount = undefined;
	};

	TipRequest.prototype = Object.create(remotepay_BaseRequest.prototype);
	TipRequest.prototype.constructor = TipRequest;

	/**
	* Set the field value
	* @memberof remotepay.TipRequest
	* @param {Array.<merchant.TipSuggestion>} tipSuggestions An array of 
	*/
	TipRequest.prototype.setTipSuggestions = function(tipSuggestions) {
	  this.tipSuggestions = tipSuggestions;
	};

	/**
	* Get the field value
	* @memberof remotepay.TipRequest
	* @return {Array.<merchant.TipSuggestion>} An array of 
	*/
	TipRequest.prototype.getTipSuggestions = function() {
	  return this.tipSuggestions;
	};

	/**
	* Set the field value
	* @memberof remotepay.TipRequest
	* @param {Number} tippableAmount must be a long integer
	*/
	TipRequest.prototype.setTippableAmount = function(tippableAmount) {
	  this.tippableAmount = tippableAmount;
	};

	/**
	* Get the field value
	* @memberof remotepay.TipRequest
	* @return {Number} must be a long integer
	*/
	TipRequest.prototype.getTippableAmount = function() {
	  return this.tippableAmount;
	};

	TipRequest._meta_ =  {fields:  {}};
	TipRequest._meta_._class_ =  TipRequest;
	TipRequest._meta_._superMeta_ = remotepay_BaseRequest._meta_;
	TipRequest._meta_.fields["tipSuggestions"] = {};
	TipRequest._meta_.fields["tipSuggestions"].type = Array;
	TipRequest._meta_.fields["tipSuggestions"].elementType = merchant_TipSuggestion;
	TipRequest._meta_.fields["tippableAmount"] = {};
	TipRequest._meta_.fields["tippableAmount"].type = Number;

	//
	// Expose the module.
	//
	if (true) {
	module.exports = TipRequest;
	}



/***/ }),
/* 1211 */
/***/ (function(module, exports, __webpack_require__) {

	/**
	 * Autogenerated by Avro
	 * 
	 * DO NOT EDIT DIRECTLY
	 */

	var remotepay_BaseResponse = __webpack_require__(15);

	/**
	* @constructor
	* @augments remotepay.BaseResponse
	* @memberof remotepay
	*/
	var TipResponse = function() {
	  remotepay_BaseResponse.call(this);
	  this._superClass_ = remotepay_BaseResponse;
	  this._class_ = TipResponse;
	  this.tipAmount = undefined;
	};

	TipResponse.prototype = Object.create(remotepay_BaseResponse.prototype);
	TipResponse.prototype.constructor = TipResponse;

	/**
	* Set the field value
	* @memberof remotepay.TipResponse
	* @param {Number} tipAmount must be a long integer
	*/
	TipResponse.prototype.setTipAmount = function(tipAmount) {
	  this.tipAmount = tipAmount;
	};

	/**
	* Get the field value
	* @memberof remotepay.TipResponse
	* @return {Number} must be a long integer
	*/
	TipResponse.prototype.getTipAmount = function() {
	  return this.tipAmount;
	};

	TipResponse._meta_ =  {fields:  {}};
	TipResponse._meta_._class_ =  TipResponse;
	TipResponse._meta_._superMeta_ = remotepay_BaseResponse._meta_;
	TipResponse._meta_.fields["tipAmount"] = {};
	TipResponse._meta_.fields["tipAmount"].type = Number;

	//
	// Expose the module.
	//
	if (true) {
	module.exports = TipResponse;
	}



/***/ }),
/* 1212 */
/***/ (function(module, exports, __webpack_require__) {

	/**
	 * Autogenerated by Avro
	 * 
	 * DO NOT EDIT DIRECTLY
	 */

	var remotepay_TransactionType = __webpack_require__(89);

	/**
	* @constructor
	* @memberof remotepay
	*/
	var TransactionTypeEnum = function() {
	  this._class_ = TransactionTypeEnum;
	  this.status = undefined;
	};


	/**
	* Set the field value
	* @memberof remotepay.TransactionTypeEnum
	* @param {remotepay.TransactionType} status 
	*/
	TransactionTypeEnum.prototype.setStatus = function(status) {
	  this.status = status;
	};

	/**
	* Get the field value
	* @memberof remotepay.TransactionTypeEnum
	* @return {remotepay.TransactionType} 
	*/
	TransactionTypeEnum.prototype.getStatus = function() {
	  return this.status;
	};

	/**
	* @memberof remotepay.TransactionTypeEnum
	* @private
	*/
	TransactionTypeEnum.prototype.getMetaInfo = function(fieldName) {
	  var curclass = this._class_;
	  do {
	    var fieldMetaInfo = curclass._meta_.fields[fieldName];
	    if(fieldMetaInfo) {
	      return fieldMetaInfo;
	    }
	    if(curclass._meta_._superMeta_) {
	      curclass = curclass._meta_._superMeta_._class_;
	    } else {
	      curclass = null;
	    }
	  } while(curclass);
	  return null;
	};

	TransactionTypeEnum.prototype.toString = function() {
	  return JSON.stringify(this);
	};

	TransactionTypeEnum._meta_ =  {fields:  {}};
	TransactionTypeEnum._meta_._class_ =  TransactionTypeEnum;
	TransactionTypeEnum._meta_.fields["status"] = {};
	TransactionTypeEnum._meta_.fields["status"].type = remotepay_TransactionType;

	//
	// Expose the module.
	//
	if (true) {
	module.exports = TransactionTypeEnum;
	}



/***/ }),
/* 1213 */
/***/ (function(module, exports, __webpack_require__) {

	/**
	 * Autogenerated by Avro
	 * 
	 * DO NOT EDIT DIRECTLY
	 */

	var remotepay_BaseRequest = __webpack_require__(14);

	/**
	* @constructor
	* @augments remotepay.BaseRequest
	* @memberof remotepay
	*/
	var VaultCardRequest = function() {
	  remotepay_BaseRequest.call(this);
	  this._superClass_ = remotepay_BaseRequest;
	  this._class_ = VaultCardRequest;
	  this.cardEntryMethods = undefined;
	};

	VaultCardRequest.prototype = Object.create(remotepay_BaseRequest.prototype);
	VaultCardRequest.prototype.constructor = VaultCardRequest;

	/**
	* Set the field value
	* Allowed entry methods
	*
	* @memberof remotepay.VaultCardRequest
	* @param {Number|Null} cardEntryMethods must be an integer, 
	*/
	VaultCardRequest.prototype.setCardEntryMethods = function(cardEntryMethods) {
	  this.cardEntryMethods = cardEntryMethods;
	};

	/**
	* Get the field value
	* Allowed entry methods
	* @memberof remotepay.VaultCardRequest
	* @return {Number|Null} must be an integer, 
	*/
	VaultCardRequest.prototype.getCardEntryMethods = function() {
	  return this.cardEntryMethods;
	};

	VaultCardRequest._meta_ =  {fields:  {}};
	VaultCardRequest._meta_._class_ =  VaultCardRequest;
	VaultCardRequest._meta_._superMeta_ = remotepay_BaseRequest._meta_;
	VaultCardRequest._meta_.fields["cardEntryMethods"] = {};
	VaultCardRequest._meta_.fields["cardEntryMethods"].type = Number;

	//
	// Expose the module.
	//
	if (true) {
	module.exports = VaultCardRequest;
	}



/***/ }),
/* 1214 */
/***/ (function(module, exports, __webpack_require__) {

	/**
	 * Autogenerated by Avro
	 * 
	 * DO NOT EDIT DIRECTLY
	 */

	var remotepay_BaseResponse = __webpack_require__(15);
	var payments_VaultedCard = __webpack_require__(70);

	/**
	* @constructor
	* @augments remotepay.BaseResponse
	* @memberof remotepay
	*/
	var VaultCardResponse = function() {
	  remotepay_BaseResponse.call(this);
	  this._superClass_ = remotepay_BaseResponse;
	  this._class_ = VaultCardResponse;
	  this.card = undefined;
	};

	VaultCardResponse.prototype = Object.create(remotepay_BaseResponse.prototype);
	VaultCardResponse.prototype.constructor = VaultCardResponse;

	/**
	* Set the field value
	* The card that was vaulted.
	*
	* @memberof remotepay.VaultCardResponse
	* @param {payments.VaultedCard} card 
	*/
	VaultCardResponse.prototype.setCard = function(card) {
	  this.card = card;
	};

	/**
	* Get the field value
	* The card that was vaulted.
	* @memberof remotepay.VaultCardResponse
	* @return {payments.VaultedCard} 
	*/
	VaultCardResponse.prototype.getCard = function() {
	  return this.card;
	};

	VaultCardResponse._meta_ =  {fields:  {}};
	VaultCardResponse._meta_._class_ =  VaultCardResponse;
	VaultCardResponse._meta_._superMeta_ = remotepay_BaseResponse._meta_;
	VaultCardResponse._meta_.fields["card"] = {};
	VaultCardResponse._meta_.fields["card"].type = payments_VaultedCard;

	//
	// Expose the module.
	//
	if (true) {
	module.exports = VaultCardResponse;
	}



/***/ }),
/* 1215 */
/***/ (function(module, exports, __webpack_require__) {

	/**
	 * Autogenerated by Avro
	 * 
	 * DO NOT EDIT DIRECTLY
	 */

	var remotepay_BaseRequest = __webpack_require__(14);
	var payments_Payment = __webpack_require__(11);
	var base_Signature = __webpack_require__(86);

	/**
	* @constructor
	* @augments remotepay.BaseRequest
	* @memberof remotepay
	*/
	var VerifySignatureRequest = function() {
	  remotepay_BaseRequest.call(this);
	  this._superClass_ = remotepay_BaseRequest;
	  this._class_ = VerifySignatureRequest;
	  this.payment = undefined;
	  this.signature = undefined;
	};

	VerifySignatureRequest.prototype = Object.create(remotepay_BaseRequest.prototype);
	VerifySignatureRequest.prototype.constructor = VerifySignatureRequest;

	/**
	* Set the field value
	* Payment that the signature is verifying for
	*
	* @memberof remotepay.VerifySignatureRequest
	* @param {payments.Payment} payment 
	*/
	VerifySignatureRequest.prototype.setPayment = function(payment) {
	  this.payment = payment;
	};

	/**
	* Get the field value
	* Payment that the signature is verifying for
	* @memberof remotepay.VerifySignatureRequest
	* @return {payments.Payment} 
	*/
	VerifySignatureRequest.prototype.getPayment = function() {
	  return this.payment;
	};

	/**
	* Set the field value
	* @memberof remotepay.VerifySignatureRequest
	* @param {base.Signature} signature 
	*/
	VerifySignatureRequest.prototype.setSignature = function(signature) {
	  this.signature = signature;
	};

	/**
	* Get the field value
	* @memberof remotepay.VerifySignatureRequest
	* @return {base.Signature} 
	*/
	VerifySignatureRequest.prototype.getSignature = function() {
	  return this.signature;
	};

	VerifySignatureRequest._meta_ =  {fields:  {}};
	VerifySignatureRequest._meta_._class_ =  VerifySignatureRequest;
	VerifySignatureRequest._meta_._superMeta_ = remotepay_BaseRequest._meta_;
	VerifySignatureRequest._meta_.fields["payment"] = {};
	VerifySignatureRequest._meta_.fields["payment"].type = payments_Payment;
	VerifySignatureRequest._meta_.fields["signature"] = {};
	VerifySignatureRequest._meta_.fields["signature"].type = base_Signature;

	//
	// Expose the module.
	//
	if (true) {
	module.exports = VerifySignatureRequest;
	}



/***/ }),
/* 1216 */
/***/ (function(module, exports, __webpack_require__) {

	/**
	 * Autogenerated by Avro
	 * 
	 * DO NOT EDIT DIRECTLY
	 */


	/**
	* @constructor
	* @memberof remotepay
	*/
	var VoidCreditRequest = function() {
	  this._class_ = VoidCreditRequest;
	  this.requestId = undefined;
	  this.orderId = undefined;
	  this.creditId = undefined;
	  this.extras = undefined;
	};


	/**
	* Set the field value
	* Identifier for the request
	*
	* @memberof remotepay.VoidCreditRequest
	* @param {String} requestId 
	*/
	VoidCreditRequest.prototype.setRequestId = function(requestId) {
	  this.requestId = requestId;
	};

	/**
	* Get the field value
	* Identifier for the request
	* @memberof remotepay.VoidCreditRequest
	* @return {String} 
	*/
	VoidCreditRequest.prototype.getRequestId = function() {
	  return this.requestId;
	};

	/**
	* Set the field value
	* Unique identifier
	*
	* @memberof remotepay.VoidCreditRequest
	* @param {String} orderId 
	*/
	VoidCreditRequest.prototype.setOrderId = function(orderId) {
	  this.orderId = orderId;
	};

	/**
	* Get the field value
	* Unique identifier
	* @memberof remotepay.VoidCreditRequest
	* @return {String} 
	*/
	VoidCreditRequest.prototype.getOrderId = function() {
	  return this.orderId;
	};

	/**
	* Set the field value
	* Unique identifier
	*
	* @memberof remotepay.VoidCreditRequest
	* @param {String} creditId 
	*/
	VoidCreditRequest.prototype.setCreditId = function(creditId) {
	  this.creditId = creditId;
	};

	/**
	* Get the field value
	* Unique identifier
	* @memberof remotepay.VoidCreditRequest
	* @return {String} 
	*/
	VoidCreditRequest.prototype.getCreditId = function() {
	  return this.creditId;
	};

	/**
	* Set the field value
	* Extra pass-through data used by external systems.
	*
	* @memberof remotepay.VoidCreditRequest
	* @param {Object.<String,String>} extras A map of <String> to <>
	*/
	VoidCreditRequest.prototype.setExtras = function(extras) {
	  this.extras = extras;
	};

	/**
	* Get the field value
	* Extra pass-through data used by external systems.
	* @memberof remotepay.VoidCreditRequest
	* @return {Object.<String,String>} A map of <String> to <>
	*/
	VoidCreditRequest.prototype.getExtras = function() {
	  return this.extras;
	};

	/**
	* @memberof remotepay.VoidCreditRequest
	* @private
	*/
	VoidCreditRequest.prototype.getMetaInfo = function(fieldName) {
	  var curclass = this._class_;
	  do {
	    var fieldMetaInfo = curclass._meta_.fields[fieldName];
	    if(fieldMetaInfo) {
	      return fieldMetaInfo;
	    }
	    if(curclass._meta_._superMeta_) {
	      curclass = curclass._meta_._superMeta_._class_;
	    } else {
	      curclass = null;
	    }
	  } while(curclass);
	  return null;
	};

	VoidCreditRequest.prototype.toString = function() {
	  return JSON.stringify(this);
	};

	VoidCreditRequest._meta_ =  {fields:  {}};
	VoidCreditRequest._meta_._class_ =  VoidCreditRequest;
	VoidCreditRequest._meta_.fields["requestId"] = {};
	VoidCreditRequest._meta_.fields["requestId"].type = String;
	VoidCreditRequest._meta_.fields["orderId"] = {};
	VoidCreditRequest._meta_.fields["orderId"].type = String;
	VoidCreditRequest._meta_.fields["creditId"] = {};
	VoidCreditRequest._meta_.fields["creditId"].type = String;
	VoidCreditRequest._meta_.fields["extras"] = {};
	VoidCreditRequest._meta_.fields["extras"].type = Object;

	//
	// Expose the module.
	//
	if (true) {
	module.exports = VoidCreditRequest;
	}



/***/ }),
/* 1217 */
/***/ (function(module, exports, __webpack_require__) {

	/**
	 * Autogenerated by Avro
	 * 
	 * DO NOT EDIT DIRECTLY
	 */

	var remotepay_ResultStatus = __webpack_require__(170);
	var payments_Credit = __webpack_require__(30);

	/**
	* @constructor
	* @memberof remotepay
	*/
	var VoidCreditResponse = function() {
	  this._class_ = VoidCreditResponse;
	  this.requestId = undefined;
	  this.status = undefined;
	  this.credit = undefined;
	};


	/**
	* Set the field value
	* Identifier for the request
	*
	* @memberof remotepay.VoidCreditResponse
	* @param {String} requestId 
	*/
	VoidCreditResponse.prototype.setRequestId = function(requestId) {
	  this.requestId = requestId;
	};

	/**
	* Get the field value
	* Identifier for the request
	* @memberof remotepay.VoidCreditResponse
	* @return {String} 
	*/
	VoidCreditResponse.prototype.getRequestId = function() {
	  return this.requestId;
	};

	/**
	* Set the field value
	* @memberof remotepay.VoidCreditResponse
	* @param {remotepay.ResultStatus} status 
	*/
	VoidCreditResponse.prototype.setStatus = function(status) {
	  this.status = status;
	};

	/**
	* Get the field value
	* @memberof remotepay.VoidCreditResponse
	* @return {remotepay.ResultStatus} 
	*/
	VoidCreditResponse.prototype.getStatus = function() {
	  return this.status;
	};

	/**
	* Set the field value
	* The credit that was voided
	*
	* @memberof remotepay.VoidCreditResponse
	* @param {payments.Credit} credit 
	*/
	VoidCreditResponse.prototype.setCredit = function(credit) {
	  this.credit = credit;
	};

	/**
	* Get the field value
	* The credit that was voided
	* @memberof remotepay.VoidCreditResponse
	* @return {payments.Credit} 
	*/
	VoidCreditResponse.prototype.getCredit = function() {
	  return this.credit;
	};

	/**
	* @memberof remotepay.VoidCreditResponse
	* @private
	*/
	VoidCreditResponse.prototype.getMetaInfo = function(fieldName) {
	  var curclass = this._class_;
	  do {
	    var fieldMetaInfo = curclass._meta_.fields[fieldName];
	    if(fieldMetaInfo) {
	      return fieldMetaInfo;
	    }
	    if(curclass._meta_._superMeta_) {
	      curclass = curclass._meta_._superMeta_._class_;
	    } else {
	      curclass = null;
	    }
	  } while(curclass);
	  return null;
	};

	VoidCreditResponse.prototype.toString = function() {
	  return JSON.stringify(this);
	};

	VoidCreditResponse._meta_ =  {fields:  {}};
	VoidCreditResponse._meta_._class_ =  VoidCreditResponse;
	VoidCreditResponse._meta_.fields["requestId"] = {};
	VoidCreditResponse._meta_.fields["requestId"].type = String;
	VoidCreditResponse._meta_.fields["status"] = {};
	VoidCreditResponse._meta_.fields["status"].type = remotepay_ResultStatus;
	VoidCreditResponse._meta_.fields["credit"] = {};
	VoidCreditResponse._meta_.fields["credit"].type = payments_Credit;

	//
	// Expose the module.
	//
	if (true) {
	module.exports = VoidCreditResponse;
	}



/***/ }),
/* 1218 */
/***/ (function(module, exports, __webpack_require__) {

	/**
	 * Autogenerated by Avro
	 * 
	 * DO NOT EDIT DIRECTLY
	 */

	var remotepay_BaseRequest = __webpack_require__(14);

	/**
	* @constructor
	* @augments remotepay.BaseRequest
	* @memberof remotepay
	*/
	var VoidPaymentRefundRequest = function() {
	  remotepay_BaseRequest.call(this);
	  this._superClass_ = remotepay_BaseRequest;
	  this._class_ = VoidPaymentRefundRequest;
	  this.refundId = undefined;
	  this.orderId = undefined;
	  this.employeeId = undefined;
	  this.disablePrinting = undefined;
	  this.disableReceiptSelection = undefined;
	  this.extras = undefined;
	};

	VoidPaymentRefundRequest.prototype = Object.create(remotepay_BaseRequest.prototype);
	VoidPaymentRefundRequest.prototype.constructor = VoidPaymentRefundRequest;

	/**
	* Set the field value
	* Unique identifier
	*
	* @memberof remotepay.VoidPaymentRefundRequest
	* @param {String} refundId 
	*/
	VoidPaymentRefundRequest.prototype.setRefundId = function(refundId) {
	  this.refundId = refundId;
	};

	/**
	* Get the field value
	* Unique identifier
	* @memberof remotepay.VoidPaymentRefundRequest
	* @return {String} 
	*/
	VoidPaymentRefundRequest.prototype.getRefundId = function() {
	  return this.refundId;
	};

	/**
	* Set the field value
	* Unique identifier
	*
	* @memberof remotepay.VoidPaymentRefundRequest
	* @param {String} orderId 
	*/
	VoidPaymentRefundRequest.prototype.setOrderId = function(orderId) {
	  this.orderId = orderId;
	};

	/**
	* Get the field value
	* Unique identifier
	* @memberof remotepay.VoidPaymentRefundRequest
	* @return {String} 
	*/
	VoidPaymentRefundRequest.prototype.getOrderId = function() {
	  return this.orderId;
	};

	/**
	* Set the field value
	* Unique identifier
	*
	* @memberof remotepay.VoidPaymentRefundRequest
	* @param {String} employeeId 
	*/
	VoidPaymentRefundRequest.prototype.setEmployeeId = function(employeeId) {
	  this.employeeId = employeeId;
	};

	/**
	* Get the field value
	* Unique identifier
	* @memberof remotepay.VoidPaymentRefundRequest
	* @return {String} 
	*/
	VoidPaymentRefundRequest.prototype.getEmployeeId = function() {
	  return this.employeeId;
	};

	/**
	* Set the field value
	* If true, then do not print using the clover printer.  Return print information.
	*
	* @memberof remotepay.VoidPaymentRefundRequest
	* @param {Boolean|Null} disablePrinting 
	*/
	VoidPaymentRefundRequest.prototype.setDisablePrinting = function(disablePrinting) {
	  this.disablePrinting = disablePrinting;
	};

	/**
	* Get the field value
	* If true, then do not print using the clover printer.  Return print information.
	* @memberof remotepay.VoidPaymentRefundRequest
	* @return {Boolean|Null} 
	*/
	VoidPaymentRefundRequest.prototype.getDisablePrinting = function() {
	  return this.disablePrinting;
	};

	/**
	* Set the field value
	* Do not show the receipt options screen
	*
	* @memberof remotepay.VoidPaymentRefundRequest
	* @param {Boolean|Null} disableReceiptSelection 
	*/
	VoidPaymentRefundRequest.prototype.setDisableReceiptSelection = function(disableReceiptSelection) {
	  this.disableReceiptSelection = disableReceiptSelection;
	};

	/**
	* Get the field value
	* Do not show the receipt options screen
	* @memberof remotepay.VoidPaymentRefundRequest
	* @return {Boolean|Null} 
	*/
	VoidPaymentRefundRequest.prototype.getDisableReceiptSelection = function() {
	  return this.disableReceiptSelection;
	};

	/**
	* Set the field value
	* Extra pass-through data used by external systems.
	*
	* @memberof remotepay.VoidPaymentRefundRequest
	* @param {Object.<String,String>} extras A map of <String> to <>
	*/
	VoidPaymentRefundRequest.prototype.setExtras = function(extras) {
	  this.extras = extras;
	};

	/**
	* Get the field value
	* Extra pass-through data used by external systems.
	* @memberof remotepay.VoidPaymentRefundRequest
	* @return {Object.<String,String>} A map of <String> to <>
	*/
	VoidPaymentRefundRequest.prototype.getExtras = function() {
	  return this.extras;
	};

	VoidPaymentRefundRequest._meta_ =  {fields:  {}};
	VoidPaymentRefundRequest._meta_._class_ =  VoidPaymentRefundRequest;
	VoidPaymentRefundRequest._meta_._superMeta_ = remotepay_BaseRequest._meta_;
	VoidPaymentRefundRequest._meta_.fields["refundId"] = {};
	VoidPaymentRefundRequest._meta_.fields["refundId"].type = String;
	VoidPaymentRefundRequest._meta_.fields["orderId"] = {};
	VoidPaymentRefundRequest._meta_.fields["orderId"].type = String;
	VoidPaymentRefundRequest._meta_.fields["employeeId"] = {};
	VoidPaymentRefundRequest._meta_.fields["employeeId"].type = String;
	VoidPaymentRefundRequest._meta_.fields["disablePrinting"] = {};
	VoidPaymentRefundRequest._meta_.fields["disablePrinting"].type = Boolean;
	VoidPaymentRefundRequest._meta_.fields["disableReceiptSelection"] = {};
	VoidPaymentRefundRequest._meta_.fields["disableReceiptSelection"].type = Boolean;
	VoidPaymentRefundRequest._meta_.fields["extras"] = {};
	VoidPaymentRefundRequest._meta_.fields["extras"].type = Object;

	//
	// Expose the module.
	//
	if (true) {
	module.exports = VoidPaymentRefundRequest;
	}



/***/ }),
/* 1219 */
/***/ (function(module, exports, __webpack_require__) {

	/**
	 * Autogenerated by Avro
	 * 
	 * DO NOT EDIT DIRECTLY
	 */

	var remotepay_RefundPaymentResponse = __webpack_require__(492);

	/**
	* @constructor
	* @augments remotepay.RefundPaymentResponse
	* @memberof remotepay
	*/
	var VoidPaymentRefundResponse = function() {
	  remotepay_RefundPaymentResponse.call(this);
	  this._superClass_ = remotepay_RefundPaymentResponse;
	  this._class_ = VoidPaymentRefundResponse;
	  this.refundId = undefined;
	};

	VoidPaymentRefundResponse.prototype = Object.create(remotepay_RefundPaymentResponse.prototype);
	VoidPaymentRefundResponse.prototype.constructor = VoidPaymentRefundResponse;

	/**
	* Set the field value
	* The id of the refund voided
	*
	* @memberof remotepay.VoidPaymentRefundResponse
	* @param {String} refundId 
	*/
	VoidPaymentRefundResponse.prototype.setRefundId = function(refundId) {
	  this.refundId = refundId;
	};

	/**
	* Get the field value
	* The id of the refund voided
	* @memberof remotepay.VoidPaymentRefundResponse
	* @return {String} 
	*/
	VoidPaymentRefundResponse.prototype.getRefundId = function() {
	  return this.refundId;
	};

	VoidPaymentRefundResponse._meta_ =  {fields:  {}};
	VoidPaymentRefundResponse._meta_._class_ =  VoidPaymentRefundResponse;
	VoidPaymentRefundResponse._meta_._superMeta_ = remotepay_RefundPaymentResponse._meta_;
	VoidPaymentRefundResponse._meta_.fields["refundId"] = {};
	VoidPaymentRefundResponse._meta_.fields["refundId"].type = String;

	//
	// Expose the module.
	//
	if (true) {
	module.exports = VoidPaymentRefundResponse;
	}



/***/ }),
/* 1220 */
/***/ (function(module, exports, __webpack_require__) {

	/**
	 * Autogenerated by Avro
	 * 
	 * DO NOT EDIT DIRECTLY
	 */

	var remotepay_BaseRequest = __webpack_require__(14);

	/**
	* @constructor
	* @augments remotepay.BaseRequest
	* @memberof remotepay
	*/
	var VoidPaymentRequest = function() {
	  remotepay_BaseRequest.call(this);
	  this._superClass_ = remotepay_BaseRequest;
	  this._class_ = VoidPaymentRequest;
	  this.orderId = undefined;
	  this.paymentId = undefined;
	  this.employeeId = undefined;
	  this.voidReason = undefined;
	  this.disablePrinting = undefined;
	  this.disableReceiptSelection = undefined;
	  this.extras = undefined;
	};

	VoidPaymentRequest.prototype = Object.create(remotepay_BaseRequest.prototype);
	VoidPaymentRequest.prototype.constructor = VoidPaymentRequest;

	/**
	* Set the field value
	* Unique identifier
	*
	* @memberof remotepay.VoidPaymentRequest
	* @param {String} orderId 
	*/
	VoidPaymentRequest.prototype.setOrderId = function(orderId) {
	  this.orderId = orderId;
	};

	/**
	* Get the field value
	* Unique identifier
	* @memberof remotepay.VoidPaymentRequest
	* @return {String} 
	*/
	VoidPaymentRequest.prototype.getOrderId = function() {
	  return this.orderId;
	};

	/**
	* Set the field value
	* Unique identifier
	*
	* @memberof remotepay.VoidPaymentRequest
	* @param {String} paymentId 
	*/
	VoidPaymentRequest.prototype.setPaymentId = function(paymentId) {
	  this.paymentId = paymentId;
	};

	/**
	* Get the field value
	* Unique identifier
	* @memberof remotepay.VoidPaymentRequest
	* @return {String} 
	*/
	VoidPaymentRequest.prototype.getPaymentId = function() {
	  return this.paymentId;
	};

	/**
	* Set the field value
	* Unique identifier
	*
	* @memberof remotepay.VoidPaymentRequest
	* @param {String} employeeId 
	*/
	VoidPaymentRequest.prototype.setEmployeeId = function(employeeId) {
	  this.employeeId = employeeId;
	};

	/**
	* Get the field value
	* Unique identifier
	* @memberof remotepay.VoidPaymentRequest
	* @return {String} 
	*/
	VoidPaymentRequest.prototype.getEmployeeId = function() {
	  return this.employeeId;
	};

	/**
	* Set the field value
	* Reason for void
	*
	* @memberof remotepay.VoidPaymentRequest
	* @param {String} voidReason 
	*/
	VoidPaymentRequest.prototype.setVoidReason = function(voidReason) {
	  this.voidReason = voidReason;
	};

	/**
	* Get the field value
	* Reason for void
	* @memberof remotepay.VoidPaymentRequest
	* @return {String} 
	*/
	VoidPaymentRequest.prototype.getVoidReason = function() {
	  return this.voidReason;
	};

	/**
	* Set the field value
	* If true, then do not print using the clover printer.  Return print information.
	*
	* @memberof remotepay.VoidPaymentRequest
	* @param {Boolean|Null} disablePrinting 
	*/
	VoidPaymentRequest.prototype.setDisablePrinting = function(disablePrinting) {
	  this.disablePrinting = disablePrinting;
	};

	/**
	* Get the field value
	* If true, then do not print using the clover printer.  Return print information.
	* @memberof remotepay.VoidPaymentRequest
	* @return {Boolean|Null} 
	*/
	VoidPaymentRequest.prototype.getDisablePrinting = function() {
	  return this.disablePrinting;
	};

	/**
	* Set the field value
	* Do not show the receipt options screen
	*
	* @memberof remotepay.VoidPaymentRequest
	* @param {Boolean|Null} disableReceiptSelection 
	*/
	VoidPaymentRequest.prototype.setDisableReceiptSelection = function(disableReceiptSelection) {
	  this.disableReceiptSelection = disableReceiptSelection;
	};

	/**
	* Get the field value
	* Do not show the receipt options screen
	* @memberof remotepay.VoidPaymentRequest
	* @return {Boolean|Null} 
	*/
	VoidPaymentRequest.prototype.getDisableReceiptSelection = function() {
	  return this.disableReceiptSelection;
	};

	/**
	* Set the field value
	* Extra pass-through data used by external systems.
	*
	* @memberof remotepay.VoidPaymentRequest
	* @param {Object.<String,String>} extras A map of <String> to <>
	*/
	VoidPaymentRequest.prototype.setExtras = function(extras) {
	  this.extras = extras;
	};

	/**
	* Get the field value
	* Extra pass-through data used by external systems.
	* @memberof remotepay.VoidPaymentRequest
	* @return {Object.<String,String>} A map of <String> to <>
	*/
	VoidPaymentRequest.prototype.getExtras = function() {
	  return this.extras;
	};

	VoidPaymentRequest._meta_ =  {fields:  {}};
	VoidPaymentRequest._meta_._class_ =  VoidPaymentRequest;
	VoidPaymentRequest._meta_._superMeta_ = remotepay_BaseRequest._meta_;
	VoidPaymentRequest._meta_.fields["orderId"] = {};
	VoidPaymentRequest._meta_.fields["orderId"].type = String;
	VoidPaymentRequest._meta_.fields["paymentId"] = {};
	VoidPaymentRequest._meta_.fields["paymentId"].type = String;
	VoidPaymentRequest._meta_.fields["employeeId"] = {};
	VoidPaymentRequest._meta_.fields["employeeId"].type = String;
	VoidPaymentRequest._meta_.fields["voidReason"] = {};
	VoidPaymentRequest._meta_.fields["voidReason"].type = String;
	VoidPaymentRequest._meta_.fields["disablePrinting"] = {};
	VoidPaymentRequest._meta_.fields["disablePrinting"].type = Boolean;
	VoidPaymentRequest._meta_.fields["disableReceiptSelection"] = {};
	VoidPaymentRequest._meta_.fields["disableReceiptSelection"].type = Boolean;
	VoidPaymentRequest._meta_.fields["extras"] = {};
	VoidPaymentRequest._meta_.fields["extras"].type = Object;

	//
	// Expose the module.
	//
	if (true) {
	module.exports = VoidPaymentRequest;
	}



/***/ }),
/* 1221 */
/***/ (function(module, exports, __webpack_require__) {

	/**
	 * Autogenerated by Avro
	 * 
	 * DO NOT EDIT DIRECTLY
	 */

	var remotepay_PaymentResponse = __webpack_require__(125);

	/**
	* @constructor
	* @augments remotepay.PaymentResponse
	* @memberof remotepay
	*/
	var VoidPaymentResponse = function() {
	  remotepay_PaymentResponse.call(this);
	  this._superClass_ = remotepay_PaymentResponse;
	  this._class_ = VoidPaymentResponse;
	  this.paymentId = undefined;
	};

	VoidPaymentResponse.prototype = Object.create(remotepay_PaymentResponse.prototype);
	VoidPaymentResponse.prototype.constructor = VoidPaymentResponse;

	/**
	* Set the field value
	* The id of the payment voided
	*
	* @memberof remotepay.VoidPaymentResponse
	* @param {String} paymentId 
	*/
	VoidPaymentResponse.prototype.setPaymentId = function(paymentId) {
	  this.paymentId = paymentId;
	};

	/**
	* Get the field value
	* The id of the payment voided
	* @memberof remotepay.VoidPaymentResponse
	* @return {String} 
	*/
	VoidPaymentResponse.prototype.getPaymentId = function() {
	  return this.paymentId;
	};

	VoidPaymentResponse._meta_ =  {fields:  {}};
	VoidPaymentResponse._meta_._class_ =  VoidPaymentResponse;
	VoidPaymentResponse._meta_._superMeta_ = remotepay_PaymentResponse._meta_;
	VoidPaymentResponse._meta_.fields["paymentId"] = {};
	VoidPaymentResponse._meta_.fields["paymentId"].type = String;

	//
	// Expose the module.
	//
	if (true) {
	module.exports = VoidPaymentResponse;
	}



/***/ }),
/* 1222 */
/***/ (function(module, exports, __webpack_require__) {

	
	module.exports.remotepay = remotepay;
	/**
	* @namespace remotepay
	*/
	function remotepay() {}


	remotepay.ActivityMessage = __webpack_require__(265);
	remotepay.AuthRequest = __webpack_require__(1143);
	remotepay.AuthResponse = __webpack_require__(1144);
	remotepay.BaseRequest = __webpack_require__(14);
	remotepay.BaseResponse = __webpack_require__(15);
	remotepay.BaseTransactionRequest = __webpack_require__(169);
	remotepay.CapturePreAuthRequest = __webpack_require__(1145);
	remotepay.CapturePreAuthResponse = __webpack_require__(1146);
	remotepay.CardInfoRequest = __webpack_require__(1147);
	remotepay.CardInfoResponse = __webpack_require__(1148);
	remotepay.CheckBalanceRequest = __webpack_require__(1149);
	remotepay.CheckBalanceResponse = __webpack_require__(1150);
	remotepay.CloseoutRequest = __webpack_require__(1151);
	remotepay.CloseoutResponse = __webpack_require__(1152);
	remotepay.CloverDeviceErrorEvent = __webpack_require__(1153);
	remotepay.CloverDeviceEvent = __webpack_require__(1154);
	remotepay.ConfirmPaymentRequest = __webpack_require__(1155);
	remotepay.CustomActivityRequest = __webpack_require__(1156);
	remotepay.CustomActivityResponse = __webpack_require__(1157);
	remotepay.CustomerInfo = __webpack_require__(486);
	remotepay.CustomerProvidedDataEvent = __webpack_require__(1158);
	remotepay.DataProviderConfig = __webpack_require__(266);
	remotepay.DeviceErrorEventCode = __webpack_require__(267);
	remotepay.DeviceEventEnum = __webpack_require__(1159);
	remotepay.DeviceEventState = __webpack_require__(268);
	remotepay.DeviceInfo = __webpack_require__(487);
	remotepay.DisplayReceiptOptionsRequest = __webpack_require__(1160);
	remotepay.DisplayReceiptOptionsResponse = __webpack_require__(1161);
	remotepay.ErrorType = __webpack_require__(488);
	remotepay.ExternalDeviceState = __webpack_require__(124);
	remotepay.ExternalDeviceStateData = __webpack_require__(269);
	remotepay.ExternalDeviceStateEnum = __webpack_require__(1162);
	remotepay.ICloverConnector = __webpack_require__(1163);
	remotepay.ICloverConnectorListener = __webpack_require__(1164);
	remotepay.Img = __webpack_require__(489);
	remotepay.IncrementPreAuthRequest = __webpack_require__(1165);
	remotepay.IncrementPreAuthResponse = __webpack_require__(1166);
	remotepay.InputOption = __webpack_require__(490);
	remotepay.InvalidStateTransitionResponse = __webpack_require__(1167);
	remotepay.KeyPress = __webpack_require__(270);
	remotepay.KeyPressEnum = __webpack_require__(1168);
	remotepay.ManualRefundRequest = __webpack_require__(1169);
	remotepay.ManualRefundResponse = __webpack_require__(1170);
	remotepay.MerchantInfo = __webpack_require__(1171);
	remotepay.MessageFromActivity = __webpack_require__(1172);
	remotepay.MessageToActivity = __webpack_require__(1173);
	remotepay.OpenCashDrawerRequest = __webpack_require__(1174);
	remotepay.PaymentResponse = __webpack_require__(125);
	remotepay.PlatformError = __webpack_require__(491);
	remotepay.PreAuthRequest = __webpack_require__(1175);
	remotepay.PreAuthResponse = __webpack_require__(1176);
	remotepay.PrintJobStatusRequest = __webpack_require__(1177);
	remotepay.PrintJobStatusResponse = __webpack_require__(1178);
	remotepay.PrintManualRefundDeclineReceiptMessage = __webpack_require__(1179);
	remotepay.PrintManualRefundReceiptMessage = __webpack_require__(1180);
	remotepay.PrintPaymentDeclineReceiptMessage = __webpack_require__(1181);
	remotepay.PrintPaymentMerchantCopyReceiptMessage = __webpack_require__(1182);
	remotepay.PrintPaymentReceiptMessage = __webpack_require__(1183);
	remotepay.PrintRefundPaymentReceiptMessage = __webpack_require__(1184);
	remotepay.PrintRefundPaymentReceiptResponse = __webpack_require__(1185);
	remotepay.PrintRequest = __webpack_require__(1186);
	remotepay.QueryStatus = __webpack_require__(271);
	remotepay.QueryStatusEnum = __webpack_require__(1187);
	remotepay.ReadCardDataRequest = __webpack_require__(1188);
	remotepay.ReadCardDataResponse = __webpack_require__(1189);
	remotepay.RefundPaymentRequest = __webpack_require__(1190);
	remotepay.RefundPaymentResponse = __webpack_require__(492);
	remotepay.RegisterForCustomerProvidedDataRequest = __webpack_require__(1191);
	remotepay.ResetDeviceResponse = __webpack_require__(1192);
	remotepay.ResponseCode = __webpack_require__(272);
	remotepay.ResponseCodeEnum = __webpack_require__(1193);
	remotepay.ResultStatus = __webpack_require__(170);
	remotepay.ResultStatusEnum = __webpack_require__(1194);
	remotepay.RetrieveDeviceStatusRequest = __webpack_require__(1195);
	remotepay.RetrieveDeviceStatusResponse = __webpack_require__(1196);
	remotepay.RetrievePaymentRequest = __webpack_require__(1197);
	remotepay.RetrievePaymentResponse = __webpack_require__(1198);
	remotepay.RetrievePendingPaymentsResponse = __webpack_require__(1199);
	remotepay.RetrievePrintersRequest = __webpack_require__(1200);
	remotepay.RetrievePrintersResponse = __webpack_require__(1201);
	remotepay.SaleRequest = __webpack_require__(1202);
	remotepay.SaleResponse = __webpack_require__(1203);
	remotepay.SetCustomerInfoRequest = __webpack_require__(1204);
	remotepay.SignatureRequest = __webpack_require__(1205);
	remotepay.SignatureResponse = __webpack_require__(1206);
	remotepay.TipAdded = __webpack_require__(1207);
	remotepay.TipAdjustAuthRequest = __webpack_require__(1208);
	remotepay.TipAdjustAuthResponse = __webpack_require__(1209);
	remotepay.TipRequest = __webpack_require__(1210);
	remotepay.TipResponse = __webpack_require__(1211);
	remotepay.TransactionRequest = __webpack_require__(273);
	remotepay.TransactionType = __webpack_require__(89);
	remotepay.TransactionTypeEnum = __webpack_require__(1212);
	remotepay.VaultCardRequest = __webpack_require__(1213);
	remotepay.VaultCardResponse = __webpack_require__(1214);
	remotepay.VerifySignatureRequest = __webpack_require__(1215);
	remotepay.VoidCreditRequest = __webpack_require__(1216);
	remotepay.VoidCreditResponse = __webpack_require__(1217);
	remotepay.VoidPaymentRefundRequest = __webpack_require__(1218);
	remotepay.VoidPaymentRefundResponse = __webpack_require__(1219);
	remotepay.VoidPaymentRequest = __webpack_require__(1220);
	remotepay.VoidPaymentResponse = __webpack_require__(1221);

	//
	// Expose the module.
	//
	if (true) {
	  module.exports = remotepay;
	}
	    

/***/ }),
/* 1223 */
/***/ (function(module, exports, __webpack_require__) {

	/**
	 * Autogenerated by Avro
	 * 
	 * DO NOT EDIT DIRECTLY
	 */


	/**
	token type
	* @memberof tokens
	* @enum {string}
	*/
	var TokenType = {
	  ONEOFF : "ONEOFF",
	  MULTIPAY : "MULTIPAY",
	  RECURRING : "RECURRING"
	};


	//
	// Expose the module.
	//
	if (true) {
	module.exports = TokenType;
	}



/***/ }),
/* 1224 */
/***/ (function(module, exports, __webpack_require__) {

	
	/**
	 * A utility class to create Clover compatible identifiers, and guids.
	 *
	 * @constructor
	 */

	function CloverID() {
	}

	CloverID.ID_LENGTH = 13;

	// http://www.crockford.com/wrmg/base32.html

	/**
	 * The legal set of characters used to generate a clover id.
	 * @type {string[]}
	 */
	CloverID.BASE_32_DIGITS = [
	    '0', '1', '2', '3', '4', '5',
	    '6', '7', '8', '9', 'A', 'B',
	    'C', 'D', 'E', 'F', 'G', 'H',
	    'J', 'K', 'M', 'N', 'P', 'Q',
	    'R', 'S', 'T', 'V', 'W', 'X',
	    'Y', 'Z'
	];

	/**
	 * @returns {string} a clover compatible ID.
	 */
	CloverID.getNewId = function() {
	    var id = "";
	    for (var index = 0; index < CloverID.ID_LENGTH; index++) {
	        id += CloverID.BASE_32_DIGITS[Math.floor(Math.random() * CloverID.BASE_32_DIGITS.length)];
	    }
	    return id;
	};

	/**
	 *
	 * @param {string} id - a string id to test
	 * @returns {boolean} true if the id is a clover compatible ID.
	 */
	CloverID.isValidBase32Id = function(id){
	    if (id == null || id.length != CloverID.ID_LENGTH) {
	        return false;
	    }
	    for (var i = 0; i < id.length; i++) {
	        if (-1 == CloverID.BASE_32_DIGITS.indexOf(id.charAt(i))) {
	            return false;
	        }
	    }
	    return true;
	}

	/**
	 *
	 * @returns {string} a guid - see https://en.wikipedia.org/wiki/Globally_unique_identifier
	 */
	CloverID.guid = function() {
	    function s4() {
	        return Math.floor((1 + Math.random()) * 0x10000)
	            .toString(16)
	            .substring(1);
	    }
	    return s4() + s4() + '-' + s4() + '-' + s4() + '-' +
	        s4() + '-' + s4() + s4() + s4();
	};

	//
	// Expose the module.
	//
	if (true) {
	    module.exports = CloverID;
	}


/***/ }),
/* 1225 */
/***/ (function(module, exports, __webpack_require__) {

	"use strict";
	Object.defineProperty(exports, "__esModule", { value: true });
	exports.MethodToMessage = void 0;
	var remote_pay_cloud_api_1 = __webpack_require__(35);
	/**
	 * Maps constant message types to specific message class types.
	 *
	 */
	var MethodToMessage = /** @class */ (function () {
	    function MethodToMessage() {
	    }
	    MethodToMessage.getType = function (method) {
	        if (MethodToMessage.methodToType == null) {
	            MethodToMessage.initialize();
	        }
	        return MethodToMessage.methodToType[method];
	    };
	    MethodToMessage.initialize = function () {
	        MethodToMessage.methodToType = {};
	        MethodToMessage.methodToType[remote_pay_cloud_api_1.remotemessage.Method.ACK] = remote_pay_cloud_api_1.remotemessage.AcknowledgementMessage;
	        MethodToMessage.methodToType[remote_pay_cloud_api_1.remotemessage.Method.CLOSEOUT_RESPONSE] = remote_pay_cloud_api_1.remotemessage.CloseoutResponseMessage;
	        MethodToMessage.methodToType[remote_pay_cloud_api_1.remotemessage.Method.CLOSEOUT_REQUEST] = remote_pay_cloud_api_1.remotemessage.CloseoutRequestMessage;
	        MethodToMessage.methodToType[remote_pay_cloud_api_1.remotemessage.Method.CAPTURE_PREAUTH_RESPONSE] = remote_pay_cloud_api_1.remotemessage.CapturePreAuthResponseMessage;
	        MethodToMessage.methodToType[remote_pay_cloud_api_1.remotemessage.Method.CAPTURE_PREAUTH] = remote_pay_cloud_api_1.remotemessage.CapturePreAuthMessage;
	        MethodToMessage.methodToType[remote_pay_cloud_api_1.remotemessage.Method.INCREMENT_PREAUTH_RESPONSE] = remote_pay_cloud_api_1.remotemessage.IncrementPreAuthResponseMessage;
	        MethodToMessage.methodToType[remote_pay_cloud_api_1.remotemessage.Method.INCREMENT_PREAUTH_REQUEST] = remote_pay_cloud_api_1.remotemessage.IncrementPreAuthMessage;
	        MethodToMessage.methodToType[remote_pay_cloud_api_1.remotemessage.Method.CONFIRM_PAYMENT_MESSAGE] = remote_pay_cloud_api_1.remotemessage.ConfirmPaymentMessage;
	        MethodToMessage.methodToType[remote_pay_cloud_api_1.remotemessage.Method.LAST_MSG_REQUEST] = remote_pay_cloud_api_1.remotemessage.LastMessageRequestMessage;
	        MethodToMessage.methodToType[remote_pay_cloud_api_1.remotemessage.Method.LAST_MSG_RESPONSE] = remote_pay_cloud_api_1.remotemessage.LastMessageResponseMessage;
	        MethodToMessage.methodToType[remote_pay_cloud_api_1.remotemessage.Method.TIP_ADJUST] = remote_pay_cloud_api_1.remotemessage.TipAdjustMessage;
	        MethodToMessage.methodToType[remote_pay_cloud_api_1.remotemessage.Method.TIP_ADJUST_RESPONSE] = remote_pay_cloud_api_1.remotemessage.TipAdjustResponseMessage;
	        MethodToMessage.methodToType[remote_pay_cloud_api_1.remotemessage.Method.OPEN_CASH_DRAWER] = remote_pay_cloud_api_1.remotemessage.OpenCashDrawerMessage;
	        MethodToMessage.methodToType[remote_pay_cloud_api_1.remotemessage.Method.SHOW_PAYMENT_RECEIPT_OPTIONS] = remote_pay_cloud_api_1.remotemessage.ShowPaymentReceiptOptionsMessage;
	        MethodToMessage.methodToType[remote_pay_cloud_api_1.remotemessage.Method.REFUND_RESPONSE] = remote_pay_cloud_api_1.remotemessage.RefundResponseMessage;
	        MethodToMessage.methodToType[remote_pay_cloud_api_1.remotemessage.Method.REFUND_REQUEST] = remote_pay_cloud_api_1.remotemessage.RefundRequestMessage;
	        MethodToMessage.methodToType[remote_pay_cloud_api_1.remotemessage.Method.REFUND_PRINT_PAYMENT] = remote_pay_cloud_api_1.remotemessage.RefundPaymentPrintMessage;
	        MethodToMessage.methodToType[remote_pay_cloud_api_1.remotemessage.Method.TX_START] = remote_pay_cloud_api_1.remotemessage.TxStartRequestMessage;
	        MethodToMessage.methodToType[remote_pay_cloud_api_1.remotemessage.Method.TX_START_RESPONSE] = remote_pay_cloud_api_1.remotemessage.TxStartResponseMessage;
	        MethodToMessage.methodToType[remote_pay_cloud_api_1.remotemessage.Method.KEY_PRESS] = remote_pay_cloud_api_1.remotemessage.KeyPressMessage;
	        MethodToMessage.methodToType[remote_pay_cloud_api_1.remotemessage.Method.UI_STATE] = remote_pay_cloud_api_1.remotemessage.UiStateMessage;
	        MethodToMessage.methodToType[remote_pay_cloud_api_1.remotemessage.Method.TX_STATE] = remote_pay_cloud_api_1.remotemessage.TxStateMessage;
	        MethodToMessage.methodToType[remote_pay_cloud_api_1.remotemessage.Method.FINISH_OK] = remote_pay_cloud_api_1.remotemessage.FinishOkMessage;
	        MethodToMessage.methodToType[remote_pay_cloud_api_1.remotemessage.Method.FINISH_CANCEL] = remote_pay_cloud_api_1.remotemessage.FinishCancelMessage;
	        MethodToMessage.methodToType[remote_pay_cloud_api_1.remotemessage.Method.DISCOVERY_REQUEST] = remote_pay_cloud_api_1.remotemessage.DiscoveryRequestMessage;
	        MethodToMessage.methodToType[remote_pay_cloud_api_1.remotemessage.Method.DISCOVERY_RESPONSE] = remote_pay_cloud_api_1.remotemessage.DiscoveryResponseMessage;
	        MethodToMessage.methodToType[remote_pay_cloud_api_1.remotemessage.Method.TIP_ADDED] = remote_pay_cloud_api_1.remotemessage.TipAddedMessage;
	        MethodToMessage.methodToType[remote_pay_cloud_api_1.remotemessage.Method.VERIFY_SIGNATURE] = remote_pay_cloud_api_1.remotemessage.VerifySignatureMessage;
	        MethodToMessage.methodToType[remote_pay_cloud_api_1.remotemessage.Method.SIGNATURE_VERIFIED] = remote_pay_cloud_api_1.remotemessage.SignatureVerifiedMessage;
	        MethodToMessage.methodToType[remote_pay_cloud_api_1.remotemessage.Method.PAYMENT_CONFIRMED] = remote_pay_cloud_api_1.remotemessage.PaymentConfirmedMessage;
	        MethodToMessage.methodToType[remote_pay_cloud_api_1.remotemessage.Method.PAYMENT_REJECTED] = remote_pay_cloud_api_1.remotemessage.PaymentRejectedMessage;
	        MethodToMessage.methodToType[remote_pay_cloud_api_1.remotemessage.Method.PAYMENT_VOIDED] = remote_pay_cloud_api_1.remotemessage.PaymentVoidedMessage;
	        MethodToMessage.methodToType[remote_pay_cloud_api_1.remotemessage.Method.PRINT_TEXT] = remote_pay_cloud_api_1.remotemessage.TextPrintMessage;
	        MethodToMessage.methodToType[remote_pay_cloud_api_1.remotemessage.Method.PRINT_IMAGE] = remote_pay_cloud_api_1.remotemessage.ImagePrintMessage;
	        MethodToMessage.methodToType[remote_pay_cloud_api_1.remotemessage.Method.TERMINAL_MESSAGE] = remote_pay_cloud_api_1.remotemessage.TerminalMessage;
	        MethodToMessage.methodToType[remote_pay_cloud_api_1.remotemessage.Method.SHOW_WELCOME_SCREEN] = remote_pay_cloud_api_1.remotemessage.WelcomeMessage;
	        MethodToMessage.methodToType[remote_pay_cloud_api_1.remotemessage.Method.SHOW_THANK_YOU_SCREEN] = remote_pay_cloud_api_1.remotemessage.ThankYouMessage;
	        MethodToMessage.methodToType[remote_pay_cloud_api_1.remotemessage.Method.SHOW_ORDER_SCREEN] = remote_pay_cloud_api_1.remotemessage.OrderUpdateMessage;
	        MethodToMessage.methodToType[remote_pay_cloud_api_1.remotemessage.Method.BREAK] = remote_pay_cloud_api_1.remotemessage.BreakMessage;
	        MethodToMessage.methodToType[remote_pay_cloud_api_1.remotemessage.Method.CASHBACK_SELECTED] = remote_pay_cloud_api_1.remotemessage.CashbackSelectedMessage;
	        MethodToMessage.methodToType[remote_pay_cloud_api_1.remotemessage.Method.PARTIAL_AUTH] = remote_pay_cloud_api_1.remotemessage.PartialAuthMessage;
	        MethodToMessage.methodToType[remote_pay_cloud_api_1.remotemessage.Method.VOID_PAYMENT] = remote_pay_cloud_api_1.remotemessage.VoidPaymentMessage;
	        MethodToMessage.methodToType[remote_pay_cloud_api_1.remotemessage.Method.VOID_PAYMENT_RESPONSE] = remote_pay_cloud_api_1.remotemessage.VoidPaymentResponseMessage;
	        MethodToMessage.methodToType[remote_pay_cloud_api_1.remotemessage.Method.VOID_PAYMENT_REFUND_RESPONSE] = remote_pay_cloud_api_1.remotemessage.VoidPaymentRefundResponseMessage;
	        MethodToMessage.methodToType[remote_pay_cloud_api_1.remotemessage.Method.ORDER_ACTION_ADD_DISCOUNT] = remote_pay_cloud_api_1.remotemessage.OrderActionAddDiscountMessage;
	        MethodToMessage.methodToType[remote_pay_cloud_api_1.remotemessage.Method.ORDER_ACTION_REMOVE_DISCOUNT] = remote_pay_cloud_api_1.remotemessage.OrderActionRemoveDiscountMessage;
	        MethodToMessage.methodToType[remote_pay_cloud_api_1.remotemessage.Method.ORDER_ACTION_ADD_LINE_ITEM] = remote_pay_cloud_api_1.remotemessage.OrderActionAddLineItemMessage;
	        MethodToMessage.methodToType[remote_pay_cloud_api_1.remotemessage.Method.ORDER_ACTION_REMOVE_LINE_ITEM] = remote_pay_cloud_api_1.remotemessage.OrderActionRemoveLineItemMessage;
	        MethodToMessage.methodToType[remote_pay_cloud_api_1.remotemessage.Method.ORDER_ACTION_RESPONSE] = remote_pay_cloud_api_1.remotemessage.OrderActionResponseMessage;
	        MethodToMessage.methodToType[remote_pay_cloud_api_1.remotemessage.Method.VAULT_CARD] = remote_pay_cloud_api_1.remotemessage.VaultCardMessage;
	        MethodToMessage.methodToType[remote_pay_cloud_api_1.remotemessage.Method.VAULT_CARD_RESPONSE] = remote_pay_cloud_api_1.remotemessage.VaultCardResponseMessage;
	        MethodToMessage.methodToType[remote_pay_cloud_api_1.remotemessage.Method.LOG_MESSAGE] = remote_pay_cloud_api_1.remotemessage.LogMessage;
	        MethodToMessage.methodToType[remote_pay_cloud_api_1.remotemessage.Method.RETRIEVE_PENDING_PAYMENTS] = remote_pay_cloud_api_1.remotemessage.RetrievePendingPaymentsMessage;
	        MethodToMessage.methodToType[remote_pay_cloud_api_1.remotemessage.Method.RETRIEVE_PENDING_PAYMENTS_RESPONSE] = remote_pay_cloud_api_1.remotemessage.RetrievePendingPaymentsResponseMessage;
	        MethodToMessage.methodToType[remote_pay_cloud_api_1.remotemessage.Method.CARD_DATA] = remote_pay_cloud_api_1.remotemessage.CardDataRequestMessage;
	        MethodToMessage.methodToType[remote_pay_cloud_api_1.remotemessage.Method.CARD_DATA_RESPONSE] = remote_pay_cloud_api_1.remotemessage.CardDataResponseMessage;
	        MethodToMessage.methodToType[remote_pay_cloud_api_1.remotemessage.Method.PAIRING_REQUEST] = remote_pay_cloud_api_1.remotemessage.PairingRequestMessage;
	        MethodToMessage.methodToType[remote_pay_cloud_api_1.remotemessage.Method.PAIRING_RESPONSE] = remote_pay_cloud_api_1.remotemessage.PairingResponseMessage;
	        MethodToMessage.methodToType[remote_pay_cloud_api_1.remotemessage.Method.PAIRING_CODE] = remote_pay_cloud_api_1.remotemessage.PairingCodeMessage;
	        MethodToMessage.methodToType[remote_pay_cloud_api_1.remotemessage.Method.REMOTE_ERROR] = remote_pay_cloud_api_1.remotemessage.RemoteError;
	        MethodToMessage.methodToType[remote_pay_cloud_api_1.remotemessage.Method.ACTIVITY_REQUEST] = remote_pay_cloud_api_1.remotemessage.ActivityRequest;
	        MethodToMessage.methodToType[remote_pay_cloud_api_1.remotemessage.Method.ACTIVITY_RESPONSE] = remote_pay_cloud_api_1.remotemessage.ActivityResponseMessage;
	        MethodToMessage.methodToType[remote_pay_cloud_api_1.remotemessage.Method.SHUTDOWN] = remote_pay_cloud_api_1.remotemessage.ShutDownMessage;
	        MethodToMessage.methodToType[remote_pay_cloud_api_1.remotemessage.Method.RESET] = remote_pay_cloud_api_1.remotemessage.ResetMessage;
	        MethodToMessage.methodToType[remote_pay_cloud_api_1.remotemessage.Method.FORCECONNECT] = remote_pay_cloud_api_1.remotemessage.ForceConnectMessage;
	        MethodToMessage.methodToType[remote_pay_cloud_api_1.remotemessage.Method.RETRIEVE_DEVICE_STATUS_REQUEST] = remote_pay_cloud_api_1.remotemessage.RetrieveDeviceStatusRequestMessage;
	        MethodToMessage.methodToType[remote_pay_cloud_api_1.remotemessage.Method.RETRIEVE_DEVICE_STATUS_RESPONSE] = remote_pay_cloud_api_1.remotemessage.RetrieveDeviceStatusResponseMessage;
	        MethodToMessage.methodToType[remote_pay_cloud_api_1.remotemessage.Method.RESET_DEVICE_RESPONSE] = remote_pay_cloud_api_1.remotemessage.ResetDeviceResponseMessage;
	        MethodToMessage.methodToType[remote_pay_cloud_api_1.remotemessage.Method.ACTIVITY_MESSAGE_TO_ACTIVITY] = remote_pay_cloud_api_1.remotemessage.ActivityMessageToActivity;
	        MethodToMessage.methodToType[remote_pay_cloud_api_1.remotemessage.Method.ACTIVITY_MESSAGE_FROM_ACTIVITY] = remote_pay_cloud_api_1.remotemessage.ActivityMessageFromActivity;
	        MethodToMessage.methodToType[remote_pay_cloud_api_1.remotemessage.Method.RETRIEVE_PAYMENT_RESPONSE] = remote_pay_cloud_api_1.remotemessage.RetrievePaymentResponseMessage;
	        MethodToMessage.methodToType[remote_pay_cloud_api_1.remotemessage.Method.RETRIEVE_PAYMENT_REQUEST] = remote_pay_cloud_api_1.remotemessage.RetrievePaymentRequestMessage;
	        MethodToMessage.methodToType[remote_pay_cloud_api_1.remotemessage.Method.GET_PRINTERS_REQUEST] = remote_pay_cloud_api_1.remotemessage.GetPrintersRequestMessage;
	        MethodToMessage.methodToType[remote_pay_cloud_api_1.remotemessage.Method.GET_PRINTERS_RESPONSE] = remote_pay_cloud_api_1.remotemessage.GetPrintersResponseMessage;
	        MethodToMessage.methodToType[remote_pay_cloud_api_1.remotemessage.Method.PRINT_JOB_STATUS_REQUEST] = remote_pay_cloud_api_1.remotemessage.PrintJobStatusRequestMessage;
	        MethodToMessage.methodToType[remote_pay_cloud_api_1.remotemessage.Method.PRINT_JOB_STATUS_RESPONSE] = remote_pay_cloud_api_1.remotemessage.PrintJobStatusResponseMessage;
	        MethodToMessage.methodToType[remote_pay_cloud_api_1.remotemessage.Method.PRINT_CREDIT] = remote_pay_cloud_api_1.remotemessage.CreditPrintMessage;
	        MethodToMessage.methodToType[remote_pay_cloud_api_1.remotemessage.Method.PRINT_CREDIT_DECLINE] = remote_pay_cloud_api_1.remotemessage.DeclineCreditPrintMessage;
	        MethodToMessage.methodToType[remote_pay_cloud_api_1.remotemessage.Method.PRINT_PAYMENT] = remote_pay_cloud_api_1.remotemessage.PaymentPrintMessage;
	        MethodToMessage.methodToType[remote_pay_cloud_api_1.remotemessage.Method.PRINT_PAYMENT_DECLINE] = remote_pay_cloud_api_1.remotemessage.DeclinePaymentPrintMessage;
	        MethodToMessage.methodToType[remote_pay_cloud_api_1.remotemessage.Method.PRINT_PAYMENT_MERCHANT_COPY] = remote_pay_cloud_api_1.remotemessage.PaymentPrintMerchantCopyMessage;
	        MethodToMessage.methodToType[remote_pay_cloud_api_1.remotemessage.Method.REFUND_PRINT_PAYMENT] = remote_pay_cloud_api_1.remotemessage.RefundPaymentPrintMessage;
	        MethodToMessage.methodToType[remote_pay_cloud_api_1.remotemessage.Method.CUSTOMER_PROVIDED_DATA_MESSAGE] = remote_pay_cloud_api_1.remotemessage.CustomerProvidedDataMessage;
	        MethodToMessage.methodToType[remote_pay_cloud_api_1.remotemessage.Method.INVALID_STATE_TRANSITION] = remote_pay_cloud_api_1.remotemessage.InvalidStateTransitionMessage;
	        MethodToMessage.methodToType[remote_pay_cloud_api_1.remotemessage.Method.SHOW_RECEIPT_OPTIONS_RESPONSE] = remote_pay_cloud_api_1.remotemessage.ShowReceiptOptionsResponseMessage;
	        MethodToMessage.methodToType[remote_pay_cloud_api_1.remotemessage.Method.BALANCE_INQUIRY_RESPONSE] = remote_pay_cloud_api_1.remotemessage.BalanceInquiryResponseMessage;
	        MethodToMessage.methodToType[remote_pay_cloud_api_1.remotemessage.Method.REQUEST_SIGNATURE_RESPONSE] = remote_pay_cloud_api_1.remotemessage.SignatureResponseMessage;
	        MethodToMessage.methodToType[remote_pay_cloud_api_1.remotemessage.Method.REQUEST_TIP_RESPONSE] = remote_pay_cloud_api_1.remotemessage.RequestTipResponseMessage;
	    };
	    MethodToMessage.methodToType = null;
	    return MethodToMessage;
	}());
	exports.MethodToMessage = MethodToMessage;

	//# sourceMappingURL=../../../maps/com/clover/json/MethodToMessage.js.map


/***/ }),
/* 1226 */
/***/ (function(module, exports, __webpack_require__) {

	"use strict";
	Object.defineProperty(exports, "__esModule", { value: true });
	exports.CloverConnectorBroadcaster = void 0;
	var sdk = __webpack_require__(35);
	var Logger_1 = __webpack_require__(48);
	/**
	 * Broadcasts events to a set of ICloverConnectorListener's
	 *
	 */
	var CloverConnectorBroadcaster = /** @class */ (function () {
	    function CloverConnectorBroadcaster() {
	        this.logger = Logger_1.Logger.create();
	        this.listeners = new Array();
	    }
	    CloverConnectorBroadcaster.prototype.clear = function () {
	        this.listeners.splice(0, this.listeners.length);
	    };
	    CloverConnectorBroadcaster.prototype.push = function () {
	        var items = [];
	        for (var _i = 0; _i < arguments.length; _i++) {
	            items[_i] = arguments[_i];
	        }
	        if (items.length == 1) {
	            return this.listeners.push(items[0]);
	        }
	        else {
	            return this.listeners.push(items);
	        }
	    };
	    CloverConnectorBroadcaster.prototype.indexOf = function (searchElement, fromIndex) {
	        return this.listeners.indexOf(searchElement, fromIndex);
	    };
	    CloverConnectorBroadcaster.prototype.splice = function (start, deleteCount) {
	        var items = [];
	        for (var _i = 2; _i < arguments.length; _i++) {
	            items[_i - 2] = arguments[_i];
	        }
	        return (items && items.length > 0) ? this.listeners.splice(start, deleteCount, items) : this.listeners.splice(start, deleteCount);
	    };
	    CloverConnectorBroadcaster.prototype.notifyOnTipAdded = function (tip) {
	        var _this = this;
	        this.logger.debug('Sending TipAdded notification to listeners');
	        var tipAdded = new sdk.remotepay.TipAdded();
	        tipAdded.setTipAmount(tip);
	        this.listeners.forEach(function (listener) {
	            try {
	                listener.onTipAdded(tipAdded);
	            }
	            catch (e) {
	                _this.logger.error(e);
	            }
	        });
	    };
	    CloverConnectorBroadcaster.prototype.notifyOnRefundPaymentResponse = function (refundPaymentResponse) {
	        var _this = this;
	        this.logger.debug('Sending RefundPaymentResponse notification to listeners');
	        this.listeners.forEach(function (listener) {
	            try {
	                listener.onRefundPaymentResponse(refundPaymentResponse);
	            }
	            catch (e) {
	                _this.logger.error(e);
	            }
	        });
	    };
	    CloverConnectorBroadcaster.prototype.notifyCloseout = function (closeoutResponse) {
	        var _this = this;
	        this.logger.debug('Sending Closeout notification to listeners');
	        this.listeners.forEach(function (listener) {
	            try {
	                listener.onCloseoutResponse(closeoutResponse);
	            }
	            catch (e) {
	                _this.logger.error(e);
	            }
	        });
	    };
	    CloverConnectorBroadcaster.prototype.notifyOnDeviceActivityStart = function (deviceEvent) {
	        var _this = this;
	        this.logger.debug('Sending DeviceActivityStart notification to listeners');
	        this.listeners.forEach(function (listener) {
	            try {
	                listener.onDeviceActivityStart(deviceEvent);
	            }
	            catch (e) {
	                _this.logger.error(e);
	            }
	        });
	    };
	    CloverConnectorBroadcaster.prototype.notifyOnDeviceActivityEnd = function (deviceEvent) {
	        var _this = this;
	        this.logger.debug('Sending DeviceActivityEnd notification to listeners');
	        this.listeners.forEach(function (listener) {
	            try {
	                listener.onDeviceActivityEnd(deviceEvent);
	            }
	            catch (e) {
	                _this.logger.error(e);
	            }
	        });
	    };
	    CloverConnectorBroadcaster.prototype.notifyOnSaleResponse = function (response) {
	        var _this = this;
	        this.logger.debug('Sending SaleResponse notification to listeners');
	        this.listeners.forEach(function (listener) {
	            try {
	                listener.onSaleResponse(response);
	            }
	            catch (e) {
	                _this.logger.error(e);
	            }
	        });
	    };
	    CloverConnectorBroadcaster.prototype.notifyOnAuthResponse = function (response) {
	        var _this = this;
	        this.logger.debug('Sending AuthResponse notification to listeners');
	        this.listeners.forEach(function (listener) {
	            try {
	                listener.onAuthResponse(response);
	            }
	            catch (e) {
	                _this.logger.error(e);
	            }
	        });
	    };
	    CloverConnectorBroadcaster.prototype.notifyOnManualRefundResponse = function (response) {
	        var _this = this;
	        this.logger.debug('Sending ManualRefundResponse notification to listeners');
	        this.listeners.forEach(function (listener) {
	            try {
	                listener.onManualRefundResponse(response);
	            }
	            catch (e) {
	                _this.logger.error(e);
	            }
	        });
	    };
	    CloverConnectorBroadcaster.prototype.notifyOnVerifySignatureRequest = function (request) {
	        var _this = this;
	        this.logger.debug('Sending VerifySignatureRequest notification to listeners');
	        this.listeners.forEach(function (listener) {
	            try {
	                listener.onVerifySignatureRequest(request);
	            }
	            catch (e) {
	                _this.logger.error(e);
	            }
	        });
	    };
	    CloverConnectorBroadcaster.prototype.notifyOnVoidPaymentResponse = function (response) {
	        var _this = this;
	        this.logger.debug('Sending VoidPaymentResponse notification to listeners');
	        this.listeners.forEach(function (listener) {
	            try {
	                listener.onVoidPaymentResponse(response);
	            }
	            catch (e) {
	                _this.logger.error(e);
	            }
	        });
	    };
	    CloverConnectorBroadcaster.prototype.notifyOnVoidPaymentRefundResponse = function (response) {
	        var _this = this;
	        this.logger.debug('Sending VoidPaymentRefundResponse notification to listeners');
	        this.listeners.forEach(function (listener) {
	            try {
	                listener.onVoidPaymentRefundResponse(response);
	            }
	            catch (e) {
	                _this.logger.error(e);
	            }
	        });
	    };
	    CloverConnectorBroadcaster.prototype.notifyOnConnect = function () {
	        var _this = this;
	        this.logger.debug('Sending Connect notification to listeners');
	        this.listeners.forEach(function (listener) {
	            try {
	                listener.onDeviceConnected();
	            }
	            catch (e) {
	                _this.logger.error(e);
	            }
	        });
	    };
	    CloverConnectorBroadcaster.prototype.notifyOnDisconnect = function (message) {
	        var _this = this;
	        this.logger.debug('Sending Disconnect notification to listeners', message);
	        this.listeners.forEach(function (listener) {
	            try {
	                listener.onDeviceDisconnected(); // changed from onDisconnected in 1.3
	            }
	            catch (e) {
	                _this.logger.error(e);
	            }
	        });
	    };
	    CloverConnectorBroadcaster.prototype.notifyOnReady = function (merchantInfo) {
	        var _this = this;
	        this.logger.debug('Sending Ready notification to listeners');
	        this.listeners.forEach(function (listener) {
	            try {
	                listener.onDeviceReady(merchantInfo); // changed from onReady in 1.3
	            }
	            catch (e) {
	                _this.logger.error(e);
	            }
	        });
	    };
	    CloverConnectorBroadcaster.prototype.notifyOnTipAdjustAuthResponse = function (response) {
	        var _this = this;
	        this.logger.debug('Sending TipAdjustAuthResponse notification to listeners');
	        this.listeners.forEach(function (listener) {
	            try {
	                listener.onTipAdjustAuthResponse(response);
	            }
	            catch (e) {
	                _this.logger.error(e);
	            }
	        });
	    };
	    CloverConnectorBroadcaster.prototype.notifyOnVaultCardRespose = function (ccr) {
	        var _this = this;
	        this.logger.debug('Sending VaultCardResponse notification to listeners');
	        this.listeners.forEach(function (listener) {
	            try {
	                listener.onVaultCardResponse(ccr);
	            }
	            catch (e) {
	                _this.logger.error(e);
	            }
	        });
	    };
	    CloverConnectorBroadcaster.prototype.notifyOnPreAuthResponse = function (response) {
	        var _this = this;
	        this.logger.debug('Sending PreAuthResponse notification to listeners');
	        this.listeners.forEach(function (listener) {
	            try {
	                listener.onPreAuthResponse(response);
	            }
	            catch (e) {
	                _this.logger.error(e);
	            }
	        });
	    };
	    CloverConnectorBroadcaster.prototype.notifyOnCapturePreAuth = function (response) {
	        var _this = this;
	        this.logger.debug('Sending CapturePreAuth notification to listeners');
	        this.listeners.forEach(function (listener) {
	            try {
	                listener.onCapturePreAuthResponse(response);
	            }
	            catch (e) {
	                _this.logger.error(e);
	            }
	        });
	    };
	    CloverConnectorBroadcaster.prototype.notifyOnIncrementPreAuthResponse = function (response) {
	        var _this = this;
	        this.logger.debug('Sending IncrementPreAuth notification to listeners');
	        this.listeners.forEach(function (listener) {
	            try {
	                listener.onIncrementPreAuthResponse(response);
	            }
	            catch (e) {
	                _this.logger.error(e);
	            }
	        });
	    };
	    CloverConnectorBroadcaster.prototype.notifyOnDeviceError = function (errorEvent) {
	        var _this = this;
	        this.logger.debug('Sending DeviceError notification to listeners');
	        this.listeners.forEach(function (listener) {
	            try {
	                listener.onDeviceError(errorEvent);
	            }
	            catch (e) {
	                _this.logger.error(e);
	            }
	        });
	    };
	    CloverConnectorBroadcaster.prototype.notifyOnPrintRefundPaymentReceipt = function (printRefundPaymentReceiptResponse) {
	        var _this = this;
	        this.logger.debug('Sending PrintRefundPaymentReceipt notification to listeners');
	        this.listeners.forEach(function (listener) {
	            try {
	                listener.onPrintRefundPaymentReceipt(printRefundPaymentReceiptResponse);
	            }
	            catch (e) {
	                _this.logger.error(e);
	            }
	        });
	    };
	    CloverConnectorBroadcaster.prototype.notifyOnPrintPaymentMerchantCopyReceipt = function (message) {
	        var _this = this;
	        this.logger.debug('Sending PrintPaymentMerchantCopyReceiptMessage notification to listeners');
	        this.listeners.forEach(function (listener) {
	            try {
	                listener.onPrintPaymentMerchantCopyReceipt(message);
	            }
	            catch (e) {
	                _this.logger.error(e);
	            }
	        });
	    };
	    CloverConnectorBroadcaster.prototype.notifyOnPrintPaymentDeclineReceipt = function (message) {
	        var _this = this;
	        this.logger.debug('Sending PrintPaymentDeclineReceiptMessage notification to listeners');
	        this.listeners.forEach(function (listener) {
	            try {
	                listener.onPrintPaymentDeclineReceipt(message);
	            }
	            catch (e) {
	                _this.logger.error(e);
	            }
	        });
	    };
	    CloverConnectorBroadcaster.prototype.notifyOnPrintPaymentReceipt = function (message) {
	        var _this = this;
	        this.logger.debug('Sending PrintPaymentReceiptMessage notification to listeners');
	        this.listeners.forEach(function (listener) {
	            try {
	                listener.onPrintPaymentReceipt(message);
	            }
	            catch (e) {
	                _this.logger.error(e);
	            }
	        });
	    };
	    CloverConnectorBroadcaster.prototype.notifyOnPrintCreditReceipt = function (message) {
	        var _this = this;
	        this.logger.debug('Sending PrintManualRefundReceiptMessage notification to listeners');
	        this.listeners.forEach(function (listener) {
	            try {
	                listener.onPrintManualRefundReceipt(message);
	            }
	            catch (e) {
	                _this.logger.error(e);
	            }
	        });
	    };
	    CloverConnectorBroadcaster.prototype.notifyOnPrintCreditDeclineReceipt = function (message) {
	        var _this = this;
	        this.logger.debug('Sending PrintManualRefundDeclineReceiptMessage notification to listeners');
	        this.listeners.forEach(function (listener) {
	            try {
	                listener.onPrintManualRefundDeclineReceipt(message);
	            }
	            catch (e) {
	                _this.logger.error(e);
	            }
	        });
	    };
	    CloverConnectorBroadcaster.prototype.notifyOnConfirmPaymentRequest = function (confirmPaymentRequest) {
	        var _this = this;
	        this.logger.debug('Sending ConfirmPaymentRequest notification to listeners');
	        this.listeners.forEach(function (listener) {
	            try {
	                listener.onConfirmPaymentRequest(confirmPaymentRequest);
	            }
	            catch (e) {
	                _this.logger.error(e);
	            }
	        });
	    };
	    CloverConnectorBroadcaster.prototype.notifyOnRetrievePendingPaymentResponse = function (rppr) {
	        var _this = this;
	        this.logger.debug('Sending RetrievePendingPaymentResponse notification to listeners');
	        this.listeners.forEach(function (listener) {
	            try {
	                listener.onRetrievePendingPaymentsResponse(rppr);
	            }
	            catch (e) {
	                _this.logger.error(e);
	            }
	        });
	    };
	    CloverConnectorBroadcaster.prototype.notifyOnReadCardDataResponse = function (rcdr) {
	        var _this = this;
	        this.logger.debug('Sending ReadCardDataResponse notification to listeners');
	        this.listeners.forEach(function (listener) {
	            try {
	                listener.onReadCardDataResponse(rcdr);
	            }
	            catch (e) {
	                _this.logger.error(e);
	            }
	        });
	    };
	    CloverConnectorBroadcaster.prototype.notifyOnActivityMessage = function (response) {
	        var _this = this;
	        this.logger.debug('Sending MessageFromActivity notification to listeners');
	        this.listeners.forEach(function (listener) {
	            try {
	                listener.onMessageFromActivity(response);
	            }
	            catch (e) {
	                _this.logger.error(e);
	            }
	        });
	    };
	    CloverConnectorBroadcaster.prototype.notifyOnActivityResponse = function (response) {
	        var _this = this;
	        this.logger.debug('Sending ActivityResponse notification to listeners');
	        this.listeners.forEach(function (listener) {
	            try {
	                listener.onCustomActivityResponse(response);
	            }
	            catch (e) {
	                _this.logger.error(e);
	            }
	        });
	    };
	    CloverConnectorBroadcaster.prototype.notifyOnRetrieveDeviceStatusResponse = function (response) {
	        var _this = this;
	        this.logger.debug('Sending RetrieveDeviceStatusResponse notification to listeners');
	        this.listeners.forEach(function (listener) {
	            try {
	                listener.onRetrieveDeviceStatusResponse(response);
	            }
	            catch (e) {
	                _this.logger.error(e);
	            }
	        });
	    };
	    CloverConnectorBroadcaster.prototype.notifyOnResetDeviceResponse = function (response) {
	        var _this = this;
	        this.logger.debug('Sending ResetDeviceResponse notification to listeners');
	        this.listeners.forEach(function (listener) {
	            try {
	                listener.onResetDeviceResponse(response);
	            }
	            catch (e) {
	                _this.logger.error(e);
	            }
	        });
	    };
	    CloverConnectorBroadcaster.prototype.notifyOnRetrievePaymentResponse = function (response) {
	        var _this = this;
	        this.logger.debug('Sending RetrievePaymentResponse notification to listeners');
	        this.listeners.forEach(function (listener) {
	            try {
	                listener.onRetrievePaymentResponse(response);
	            }
	            catch (e) {
	                _this.logger.error(e);
	            }
	        });
	    };
	    CloverConnectorBroadcaster.prototype.notifyOnRetrievePrintersResponse = function (response) {
	        var _this = this;
	        this.logger.debug('Sending RetrievePrintersResponse notification to listeners');
	        this.listeners.forEach(function (listener) {
	            try {
	                listener.onRetrievePrintersResponse(response);
	            }
	            catch (e) {
	                _this.logger.error(e);
	            }
	        });
	    };
	    CloverConnectorBroadcaster.prototype.notifyOnPrintJobStatusResponse = function (response) {
	        var _this = this;
	        this.logger.debug('Sending PrintJobStatusResponse notification to listeners');
	        this.listeners.forEach(function (listener) {
	            try {
	                listener.onPrintJobStatusResponse(response);
	            }
	            catch (e) {
	                _this.logger.error(e);
	            }
	        });
	    };
	    CloverConnectorBroadcaster.prototype.notifyOnCustomerProvidedDataEvent = function (event) {
	        var _this = this;
	        this.listeners.forEach(function (listener) {
	            try {
	                listener.onCustomerProvidedData(event);
	            }
	            catch (e) {
	                _this.logger.error(e);
	            }
	        });
	    };
	    CloverConnectorBroadcaster.prototype.notifyOnDisplayReceiptOptionsResponse = function (response) {
	        var _this = this;
	        this.listeners.forEach(function (listener) {
	            try {
	                listener.onDisplayReceiptOptionsResponse(response);
	            }
	            catch (e) {
	                _this.logger.error(e);
	            }
	        });
	    };
	    CloverConnectorBroadcaster.prototype.notifyOnInvalidStateTransitionResponse = function (response) {
	        var _this = this;
	        this.listeners.forEach(function (listener) {
	            try {
	                listener.onInvalidStateTransitionResponse(response);
	            }
	            catch (e) {
	                _this.logger.error(e);
	            }
	        });
	    };
	    CloverConnectorBroadcaster.prototype.notifyOnSignatureCollected = function (response) {
	        var _this = this;
	        this.listeners.forEach(function (listener) {
	            try {
	                // TODO - this will be implemented in the future - listener.onRequestSignatureResponse(response);
	            }
	            catch (e) {
	                _this.logger.error(e);
	            }
	        });
	    };
	    CloverConnectorBroadcaster.prototype.notifyOnCheckBalanceResponse = function (response) {
	        var _this = this;
	        this.listeners.forEach(function (listener) {
	            try {
	                listener.onCheckBalanceResponse(response);
	            }
	            catch (e) {
	                _this.logger.error(e);
	            }
	        });
	    };
	    CloverConnectorBroadcaster.prototype.notifyOnTipResponse = function (response) {
	        var _this = this;
	        this.listeners.forEach(function (listener) {
	            try {
	                // TODO - this will be implemented in the future - listener.onRequestTipResponse(response);
	            }
	            catch (e) {
	                _this.logger.error(e);
	            }
	        });
	    };
	    return CloverConnectorBroadcaster;
	}());
	exports.CloverConnectorBroadcaster = CloverConnectorBroadcaster;

	//# sourceMappingURL=../../../../maps/com/clover/remote/client/CloverConnectorBroadcaster.js.map


/***/ }),
/* 1227 */
/***/ (function(module, exports, __webpack_require__) {

	"use strict";
	Object.defineProperty(exports, "__esModule", { value: true });
	exports.CloverConnectorFactoryBuilder = void 0;
	var CloverConnectorFactoryV2_1 = __webpack_require__(1228);
	var CloverConnectorFactory_1 = __webpack_require__(497);
	/**
	 * This allows the construction of factories that may produce connectors that behave differently based on the
	 * version.
	 *
	 * Currently the default version will return a factory that is compatible with the 1.1.0 release.  If
	 * VERSION_12 is specified in the configuration, then the factory returned is not browser dependant, and
	 * can be used to produce a connector that is capable of a direct connection to the device via the
	 * "Network Pay Display" app.
	 */
	var CloverConnectorFactoryBuilder = /** @class */ (function () {
	    function CloverConnectorFactoryBuilder() {
	    }
	    /**
	     * Produces factories that are version specific.  The passed configuration object is used to determine the
	     * factory returned.  If the configuration is null or the value of the property
	     * CloverConnectorFactoryBuilder.FACTORY_VERSION is not recognized, then the factory returned is
	     * compatible with the 1.1.0 version of remote-pay-cloud.
	     *
	     * @param configuration contains a property for CloverConnectorFactoryBuilder.FACTORY_VERSION, or null.
	     * @returns {any}
	     */
	    CloverConnectorFactoryBuilder.createICloverConnectorFactory = function (configuration) {
	        if (configuration && configuration[CloverConnectorFactoryBuilder.FACTORY_VERSION]) {
	            if (configuration[CloverConnectorFactoryBuilder.FACTORY_VERSION] == CloverConnectorFactoryBuilder.VERSION_12) {
	                return new CloverConnectorFactoryV2_1.CloverConnectorFactoryV2();
	            }
	            console.error("Factory version specified, but not found!", configuration);
	        }
	        else {
	            // Technically the oldest version, only supports browser compatible connectors.
	            return new CloverConnectorFactory_1.CloverConnectorFactory();
	        }
	    };
	    CloverConnectorFactoryBuilder.DEFAULT_VERSION = "DEFAULT";
	    CloverConnectorFactoryBuilder.VERSION_12 = "VERSION_12";
	    CloverConnectorFactoryBuilder.FACTORY_VERSION = "FACTORY_VERSION";
	    return CloverConnectorFactoryBuilder;
	}());
	exports.CloverConnectorFactoryBuilder = CloverConnectorFactoryBuilder;

	//# sourceMappingURL=../../../../maps/com/clover/remote/client/CloverConnectorFactoryBuilder.js.map


/***/ }),
/* 1228 */
/***/ (function(module, exports, __webpack_require__) {

	"use strict";
	Object.defineProperty(exports, "__esModule", { value: true });
	exports.CloverConnectorFactoryV2 = void 0;
	var CloverConnector_1 = __webpack_require__(171);
	/**
	 * Produces ICloverConnector objects that can be configured using CloverDeviceConfiguration objects.
	 *
	 * The connectors produced are dependant on the configuration and can be used to connect directly to
	 * the device from a Web Browser, or via the Cloud.  They can also be used to connect directly to the
	 * device or through the cloud using a NodeJS application.
	 *
	 */
	var CloverConnectorFactoryV2 = /** @class */ (function () {
	    function CloverConnectorFactoryV2() {
	    }
	    /**
	     * Produces a ICloverConnector given a configuration.
	     *
	     * @param configuration - a configuration that determines how the connector connects to the device
	     * @returns {CloverConnector}
	     */
	    CloverConnectorFactoryV2.prototype.createICloverConnector = function (configuration) {
	        return new CloverConnector_1.CloverConnector(configuration);
	    };
	    return CloverConnectorFactoryV2;
	}());
	exports.CloverConnectorFactoryV2 = CloverConnectorFactoryV2;

	//# sourceMappingURL=../../../../maps/com/clover/remote/client/CloverConnectorFactoryV2.js.map


/***/ }),
/* 1229 */
/***/ (function(module, exports) {

	"use strict";
	Object.defineProperty(exports, "__esModule", { value: true });

	//# sourceMappingURL=../../../../maps/com/clover/remote/client/ICloverConnectorFactory.js.map


/***/ }),
/* 1230 */
/***/ (function(module, exports) {

	"use strict";
	Object.defineProperty(exports, "__esModule", { value: true });
	exports.CloverDevice = void 0;
	/**
	 * Clover Device
	 *
	 * Abstract clover device.
	 */
	var CloverDevice = /** @class */ (function () {
	    /**
	     * Constructor
	     *
	     * @param {string} packageName
	     * @param {CloverTransport} transport
	     * @param {string} applicationId
	     */
	    function CloverDevice(packageName, transport, applicationId) {
	        this.supportsAck = false;
	        this.supportsVoidPaymentResponse = false;
	        this.packageName = packageName;
	        this.transport = transport;
	        this.applicationId = applicationId;
	        this.deviceObservers = [];
	        this.supportsAck = false;
	    }
	    /**
	     * Add a new observer to the list of observers
	     *
	     * @param {CloverDeviceObserver} observer - observer to add
	     */
	    CloverDevice.prototype.subscribe = function (observer) {
	        this.deviceObservers.push(observer);
	    };
	    /**
	     * Remove an observer from the list of observers
	     *
	     * @param {CloverDeviceObserver} observer - observer to remove
	     */
	    CloverDevice.prototype.unsubscribe = function (observer) {
	        var indexOfObserver = this.deviceObservers.indexOf(observer);
	        if (indexOfObserver !== -1) {
	            this.deviceObservers.splice(indexOfObserver, 1);
	        }
	    };
	    /**
	     * Supports Acknowledgements
	     *
	     * @param {boolean} supportsAck
	     */
	    CloverDevice.prototype.setSupportsAck = function (supportsAck) {
	        this.supportsAck = supportsAck;
	    };
	    /**
	     * Get Supports Acknowledgements flag
	     *
	     * @returns boolean - Flag indicating if this device supports acks
	     */
	    CloverDevice.prototype.getSupportsAck = function () {
	        return this.supportsAck;
	    };
	    CloverDevice.prototype.setSupportsVoidPaymentResponse = function (supportsVoidPaymentResponse) {
	        this.supportsVoidPaymentResponse = supportsVoidPaymentResponse;
	    };
	    CloverDevice.prototype.getSupportsVoidPaymentResponse = function () {
	        return this.supportsVoidPaymentResponse;
	    };
	    return CloverDevice;
	}());
	exports.CloverDevice = CloverDevice;

	//# sourceMappingURL=../../../../../maps/com/clover/remote/client/device/CloverDevice.js.map


/***/ }),
/* 1231 */
/***/ (function(module, exports, __webpack_require__) {

	"use strict";
	var __extends = (this && this.__extends) || (function () {
	    var extendStatics = function (d, b) {
	        extendStatics = Object.setPrototypeOf ||
	            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
	            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
	        return extendStatics(d, b);
	    };
	    return function (d, b) {
	        extendStatics(d, b);
	        function __() { this.constructor = d; }
	        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
	    };
	})();
	Object.defineProperty(exports, "__esModule", { value: true });
	exports.WebsocketCloudCloverDevice = void 0;
	var sdk = __webpack_require__(35);
	var DefaultCloverDevice_1 = __webpack_require__(499);
	/**
	 * Device definition that has Cloud specific implementation details.
	 */
	var WebsocketCloudCloverDevice = /** @class */ (function (_super) {
	    __extends(WebsocketCloudCloverDevice, _super);
	    function WebsocketCloudCloverDevice(configuration) {
	        return _super.call(this, configuration) || this;
	    }
	    /**
	     * The cloud sends a message to the device to let it know that the client is disconnecting
	     *
	     * @override
	     */
	    WebsocketCloudCloverDevice.prototype.dispose = function () {
	        var remoteMessage = this.buildRemoteMessageToSend(new sdk.remotemessage.ShutDownMessage());
	        this.sendRemoteMessage(remoteMessage);
	        _super.prototype.dispose.call(this);
	    };
	    WebsocketCloudCloverDevice.prototype.disposeWithoutMessage = function () {
	        _super.prototype.dispose.call(this);
	    };
	    /**
	     * Cloud connections can be interrupted by another terminal.  This handles this unique case by
	     * disconnecting without sending the shutdown command to the device.
	     *
	     * @param rMessage
	     */
	    WebsocketCloudCloverDevice.prototype.handleRemoteMessageEVENT = function (rMessage) {
	        var method = sdk.remotemessage.Method[rMessage.getMethod()];
	        if (method == null) {
	            this.logger.error('Unsupported method type: ' + rMessage.getMethod());
	        }
	        else {
	            var sdkMessage = this.messageParser.parseMessageFromRemoteMessageObj(rMessage);
	            if (method == sdk.remotemessage.Method.FORCECONNECT) {
	                this.logger.info("Connection was stolen!  Will not attempt reconnect.", rMessage);
	                // Do we need to notify anyone?
	                this.notifyObserversForceConnect(sdkMessage);
	                this.disposeWithoutMessage();
	            }
	        }
	    };
	    /**
	     * Reports that this connection has been severed via a onDeviceError() notification
	     * @param message
	     */
	    WebsocketCloudCloverDevice.prototype.notifyObserversForceConnect = function (messageString) {
	        var _this = this;
	        this.deviceObservers.forEach(function (obs) {
	            var message = JSON.stringify(messageString);
	            var deviceErrorEvent = new sdk.remotepay.CloverDeviceErrorEvent();
	            deviceErrorEvent.setCode(sdk.remotepay.DeviceErrorEventCode.Interrupted);
	            deviceErrorEvent.setMessage(message);
	            deviceErrorEvent.setType(sdk.remotepay.ErrorType.COMMUNICATION);
	            obs.onDeviceError(deviceErrorEvent);
	            obs.onDeviceDisconnected(_this, message);
	        });
	    };
	    /**
	     * Handles "RESET" and "SHUTDOWN" messages that originate from the server. The RESET message is a request that the connection be
	     * severed and re-established.  This is done because open long-lived connections can cause load balancers or other proxy
	     * type servers to hang when an attempt to restart them is made. The SHUTDOWN message is sent when Cloud Pay Display stops.
	     *
	     * @param rMessage
	     */
	    WebsocketCloudCloverDevice.prototype.handleRemoteMessage = function (rMessage) {
	        try {
	            if (rMessage.getMethod() === sdk.remotemessage.Method.RESET || rMessage.getMethod() === sdk.remotemessage.Method.SHUTDOWN) {
	                this.logger.info("Reset requested!  Will reconnect.");
	                this.transport.reset();
	            }
	            else {
	                _super.prototype.handleRemoteMessage.call(this, rMessage);
	            }
	        }
	        catch (eM) {
	            this.logger.error('Error processing message: ' + rMessage.getPayload(), eM);
	        }
	    };
	    return WebsocketCloudCloverDevice;
	}(DefaultCloverDevice_1.DefaultCloverDevice));
	exports.WebsocketCloudCloverDevice = WebsocketCloudCloverDevice;

	//# sourceMappingURL=../../../../../maps/com/clover/remote/client/device/WebsocketCloudCloverDevice.js.map


/***/ }),
/* 1232 */
/***/ (function(module, exports) {

	"use strict";
	Object.defineProperty(exports, "__esModule", { value: true });
	exports.LoyaltyDataTypes = void 0;
	var LoyaltyDataTypes = /** @class */ (function () {
	    function LoyaltyDataTypes() {
	    }
	    LoyaltyDataTypes.prototype.isSystemLimitedType = function (type) {
	        return (LoyaltyDataTypes.VAS_TYPE === type || LoyaltyDataTypes.EMAIL_TYPE === type || LoyaltyDataTypes.PHONE_TYPE === type || LoyaltyDataTypes.CLEAR_TYPE === type);
	    };
	    LoyaltyDataTypes.prototype.isCustomListedType = function (type) {
	        return LoyaltyDataTypes.dataTypes.indexOf(type) != -1;
	    };
	    LoyaltyDataTypes.prototype.isListedType = function (type) {
	        return this.isSystemLimitedType(type) || this.isCustomListedType(type);
	    };
	    LoyaltyDataTypes.prototype.addListedType = function (type) {
	        if (!this.isListedType(type)) {
	            LoyaltyDataTypes.dataTypes.push(type);
	            return true;
	        }
	        return false;
	    };
	    LoyaltyDataTypes.prototype.removeListedType = function (type) {
	        if (!this.isListedType(type)) {
	            LoyaltyDataTypes.dataTypes.splice(LoyaltyDataTypes.dataTypes.indexOf(type), 1);
	            return true;
	        }
	        return false;
	    };
	    var _a;
	    LoyaltyDataTypes.VAS_TYPE = "VAS";
	    LoyaltyDataTypes.EMAIL_TYPE = "EMAIL";
	    LoyaltyDataTypes.PHONE_TYPE = "PHONE";
	    LoyaltyDataTypes.CLEAR_TYPE = "CLEAR";
	    LoyaltyDataTypes.dataTypes = new Array(3);
	    LoyaltyDataTypes.VAS_TYPE_KEYS = (_a = /** @class */ (function () {
	            function class_1() {
	            }
	            return class_1;
	        }()),
	        _a.PUSH_URL = "PUSH_URL",
	        _a.PROTOCOL_CONFIG = "PROTOCOL_CONFIG",
	        _a.PROTOCOL_ID = "PROTOCOL_ID",
	        _a.PROVIDER_PACKAGE = "PROVIDER_PACKAGE",
	        _a.PUSH_TITLE = "PUSH_TITLE",
	        _a.SUPPORTED_SERVICES = "SUPPORTED_SERVICES",
	        _a);
	    return LoyaltyDataTypes;
	}());
	exports.LoyaltyDataTypes = LoyaltyDataTypes;

	//# sourceMappingURL=../../../../../maps/com/clover/remote/client/faux_enums/LoyaltyDataTypes.js.map


/***/ }),
/* 1233 */
/***/ (function(module, exports) {

	"use strict";
	Object.defineProperty(exports, "__esModule", { value: true });

	//# sourceMappingURL=../../../../../maps/com/clover/remote/client/transport/CloverTransportObserver.js.map


/***/ }),
/* 1234 */
/***/ (function(module, exports, __webpack_require__) {

	"use strict";
	Object.defineProperty(exports, "__esModule", { value: true });
	exports.CloverWebSocketClient = void 0;
	var WebSocketState_1 = __webpack_require__(174);
	var Logger_1 = __webpack_require__(48);
	/**
	 * The implementation of the websocket listener.  The websocket connection is
	 * initiated from this class, and many of the low level functionality is housed here.
	 */
	var CloverWebSocketClient = /** @class */ (function () {
	    function CloverWebSocketClient(endpoint, listener, webSocketImplClass) {
	        this.logger = Logger_1.Logger.create();
	        this.listener = listener;
	        this.endpoint = endpoint;
	        this.webSocketImplClass = webSocketImplClass;
	    }
	    CloverWebSocketClient.prototype.getWebSocketState = function () {
	        return (this.socket) ? this.socket.getReadyState() : null;
	    };
	    CloverWebSocketClient.prototype.getBufferedAmount = function () {
	        return (this.socket ? this.socket.getBufferedAmount() : 0);
	    };
	    CloverWebSocketClient.prototype.connect = function (accessToken) {
	        if (this.socket != null) {
	            throw new Error("Socket already created. Must create a new CloverWebSocketClient");
	        }
	        try {
	            // Kind of odd.  webSocketImplClass is the class definition, we are creating a new one here.
	            this.socket = this.webSocketImplClass(this.endpoint);
	            // socket.setAutoFlush(true);
	            this.socket.addListener(this);
	            this.socket.connect(accessToken);
	        }
	        catch (e) {
	            this.logger.error('connect, connectionError', e);
	            this.listener.connectionError(this, e.message);
	        }
	    };
	    CloverWebSocketClient.prototype.close = function (code, reason) {
	        this.socket.sendClose(code, reason);
	    };
	    CloverWebSocketClient.prototype.isConnecting = function () {
	        return this.socket.getState() == WebSocketState_1.WebSocketState.CONNECTING;
	    };
	    CloverWebSocketClient.prototype.isOpen = function () {
	        return this.socket.isOpen();
	    };
	    CloverWebSocketClient.prototype.isClosing = function () {
	        return this.socket.getState() == WebSocketState_1.WebSocketState.CLOSING;
	    };
	    CloverWebSocketClient.prototype.isClosed = function () {
	        return this.socket.getState() == WebSocketState_1.WebSocketState.CLOSED;
	    };
	    CloverWebSocketClient.prototype.onTextMessage = function (websocket, text) {
	        this.listener.onMessage(this, text);
	    };
	    CloverWebSocketClient.prototype.onConnected = function (websocket) {
	        this.listener.onOpen(this);
	    };
	    /**
	     *
	     * @param {CloverWebSocketInterface} websocket
	     * @param event - A simple error event is passed per the websocket spec - https://www.w3.org/TR/websockets/#concept-websocket-close-fail
	     * It doesn't appear that an exact typing for the websocket error event is available, so I am using any.
	     */
	    CloverWebSocketClient.prototype.onConnectError = function (websocket, event) {
	        var eventMessage = event.message || "Not available";
	        var message = "A websocket connection error has occurred.  Details: " + eventMessage;
	        this.logger.error(message);
	        this.listener.connectionError(this, message);
	    };
	    CloverWebSocketClient.prototype.onDisconnected = function (websocket) {
	        this.listener.onClose(this, 1000, "", false);
	    };
	    CloverWebSocketClient.prototype.onCloseFrame = function (websocket, closeCode, reason) {
	        this.listener.onClose(this, closeCode, reason, true);
	    };
	    CloverWebSocketClient.prototype.onError = function (websocket) {
	        this.logger.error('A websocket error has occurred.');
	    };
	    CloverWebSocketClient.prototype.onPingFrame = function (websocket) {
	        this.socket.sendPong();
	    };
	    CloverWebSocketClient.prototype.onSendError = function (websocket) {
	        this.listener.onSendError(""); // frame.getPayloadText());
	    };
	    CloverWebSocketClient.prototype.onUnexpectedError = function (websocket) {
	        this.logger.error('An unexpected websocket error has occurred.');
	    };
	    CloverWebSocketClient.prototype.send = function (message) {
	        this.socket.sendText(message);
	    };
	    CloverWebSocketClient.prototype.clearListener = function () {
	        this.socket.removeListener(this);
	    };
	    CloverWebSocketClient.prototype.setNotifyClose = function (b) {
	        this.notifyClose = b;
	    };
	    CloverWebSocketClient.prototype.shouldNotifyClose = function () {
	        return this.notifyClose;
	    };
	    return CloverWebSocketClient;
	}());
	exports.CloverWebSocketClient = CloverWebSocketClient;

	//# sourceMappingURL=../../../../../../maps/com/clover/remote/client/transport/websocket/CloverWebSocketClient.js.map


/***/ }),
/* 1235 */
/***/ (function(module, exports, __webpack_require__) {

	"use strict";
	var __extends = (this && this.__extends) || (function () {
	    var extendStatics = function (d, b) {
	        extendStatics = Object.setPrototypeOf ||
	            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
	            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
	        return extendStatics(d, b);
	    };
	    return function (d, b) {
	        extendStatics(d, b);
	        function __() { this.constructor = d; }
	        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
	    };
	})();
	Object.defineProperty(exports, "__esModule", { value: true });
	exports.WebSocketCloudCloverTransport = void 0;
	var Endpoints_1 = __webpack_require__(504);
	var DeviceContactInfo_1 = __webpack_require__(1237);
	var Constants_1 = __webpack_require__(503);
	var WebSocketState_1 = __webpack_require__(174);
	var WebSocketCloverTransport_1 = __webpack_require__(276);
	var sdk = __webpack_require__(35);
	/**
	 * WebSocket Cloud Clover Transport.  This handles the need to notify the device before a connection attempt is made.
	 *
	 */
	var WebSocketCloudCloverTransport = /** @class */ (function (_super) {
	    __extends(WebSocketCloudCloverTransport, _super);
	    /**
	     * @param {number} reconnectDelay - duration to wait until a reconnect is attempted - millis.
	     * @param {Object} webSocketImplClass - the function that will return an instance of the
	     *  CloverWebSocketInterface that will be used when connecting.  For Browser implementations, this can be
	     * @param {string} cloverServer the base url for the clover server used in the cloud connection.
	     *    EX:  https://www.clover.com, http://localhost:9000
	     * @param {string} merchantId - the merchant the device belongs to.
	     * @param {string} accessToken - the OAuth access token that will be used when contacting the clover server
	     * @param {string} deviceId - the id (not uuid) of the device to connect to
	     * @param {string} friendlyId - an identifier for the specific terminal connected to this device.  This id is used
	     *  in debugging and may be sent to other clients if they attempt to connect to the same device.  It will also be
	     *  sent to other clients that are currently connected if this device does a forceConnect.
	     * @param {boolean} forceConnect - if true, overtake any existing connection.
	     * @param {HttpSupport} httpSupport - the helper object used when making http requests.
	     */
	    function WebSocketCloudCloverTransport(reconnectDelay, webSocketImplClass, cloverServer, merchantId, accessToken, deviceId, friendlyId, forceConnect, httpSupport) {
	        var _this = _super.call(this, reconnectDelay, webSocketImplClass) || this;
	        _this.cloverServer = cloverServer;
	        _this.merchantId = merchantId;
	        _this.accessToken = accessToken;
	        _this.deviceId = deviceId;
	        _this.httpSupport = httpSupport;
	        _this.friendlyId = friendlyId;
	        _this.forceConnect = forceConnect;
	        _this.initialize();
	        return _this;
	    }
	    /**
	     * Calls COS's alert endpoint which:
	     * Initialize the connection.
	     */
	    WebSocketCloudCloverTransport.prototype.initialize = function () {
	        var _this = this;
	        // If we already have the webSocketUrl initialization has already been performed.
	        // Skip the call to COS and connect directly to the proxy.
	        if (this.webSocketURL && this.webSocketURL.length > 0) {
	            this.doOptionsCallToAvoid401Error(this.webSocketURL);
	        }
	        else {
	            // DSE-272, SEMI-2021, detect IE 11.
	            if (typeof window !== "undefined" && !!window["MSInputMethodContext"] && !!document["documentMode"]) {
	                // We should only enter this block if the browser is IE 11.  IE 11 has issues when the first call to the
	                // server is a POST (initializeWithServer).  To work-around this we make a GET request
	                // See http://jonnyreeves.co.uk/2013/making-xhr-request-to-https-domains-with-winjs/ for more information.
	                this.httpSupport.getData(Endpoints_1.Endpoints.getMerchantEndpoint(this.cloverServer, this.merchantId), function (_) { return _this.obtainWebSocketUrlAndSendPushAlert(); }, function (error) {
	                    _this.logger.warn("IE 11 - Initial GET failed.", error);
	                }, this.buildAuthorizationHeader(this.accessToken));
	            }
	            else {
	                // We aren't using IE, make the initial POST.
	                this.obtainWebSocketUrlAndSendPushAlert();
	            }
	        }
	    };
	    /**
	     * Calls the COS remote_pay endpoint which:
	     *
	     * 1) Determines what Cloud/Support server we should open a WebSocket connection to, and returns the URL of this server
	     *    in the response so we can establish a connection.  Versions of COS post SEMI-2079 deployment return a Cloud/Support
	     *    server identifier in the queryString which is used by HA Proxy to connect to the correct server.
	     * 2) Sends a PUSH notification to the device, to notify it what server to open a WebSocket connection to.
	     *
	     * To make the call, we need a valid OAuth access token and to have an AJAX implementation abstraction that does
	     * not tie us to a particular environment (e.g. the SDK code can work in the browser as well as Node, etc.).
	     * This abstraction is httpSupport an implementation of which can be passed in in this classes constructor.
	     */
	    WebSocketCloudCloverTransport.prototype.obtainWebSocketUrlAndSendPushAlert = function () {
	        var _this = this;
	        // Do the notification call.  This needs to happen every time we attempt to connect.
	        // It COULD mean that the device gets a notification when the Cloud Pay Display is
	        // already running, but this is not harmful.
	        var alertEndpoint = Endpoints_1.Endpoints.getAlertDeviceEndpoint(this.cloverServer, this.merchantId);
	        var deviceContactInfo = new DeviceContactInfo_1.DeviceContactInfo(this.deviceId.replace(/-/g, ""), true);
	        this.httpSupport.postData(alertEndpoint, function (data) { return _this.deviceNotificationSent(data); }, function (error) {
	            // If the error is a 404, don't attempt to reconnect.
	            _this.connectionError(_this.cloverWebSocketClient, "Error connecting to your Clover device. Details: " + error.message, null, error && error.status !== 404);
	        }, deviceContactInfo, this.buildAuthorizationHeader(this.accessToken));
	    };
	    /**
	     * This handles the response from the server of the request to send a notification to the device. If the
	     * notification was successful, then an OPTIONS call is made using the information provided.
	     *
	     * @param notificationResponse - has a boolean property for 'sent', that indicates if the notification
	     *  was sent to the device.  If it was, then the properties 'host' and 'token' are used to derive the
	     *  websocket endpoint uri.
	     */
	    WebSocketCloudCloverTransport.prototype.deviceNotificationSent = function (notificationResponse) {
	        // Note "!data.hasOwnProperty('sent')" is included to allow for
	        // backwards compatibility.  If the property is NOT included, then
	        // we will assume an earlier version of the protocol on the server,
	        // and assume that the notification WAS SENT.
	        if (!notificationResponse.hasOwnProperty('sent') || notificationResponse.sent) {
	            this.webSocketURL = Endpoints_1.Endpoints.getDeviceWebSocketEndpoint(notificationResponse, this.friendlyId, this.forceConnect, this.merchantId);
	            this.doOptionsCallToAvoid401Error(this.webSocketURL);
	        }
	        else {
	            this.connectionError(this.cloverWebSocketClient, "The device is unreachable or an error has occurred sending the device a notification to start/connect to Cloud Pay Display.");
	        }
	    };
	    /**
	     * Do an OPTIONS call to the web socket endpoint (using http).  This helps with a problem where a 401
	     * response came back from the websocket endpoint.
	     *
	     * @param deviceWebSocketEndpoint
	     */
	    WebSocketCloudCloverTransport.prototype.doOptionsCallToAvoid401Error = function (deviceWebSocketEndpoint) {
	        var _this = this;
	        // A way to deal with the 401 error that
	        // occurs when a websocket connection is made to the
	        // server (sometimes).  Do a preliminary OPTIONS
	        // request.  Although this happens regardless of if the error
	        // happens, it is tremendously faster.
	        var deviceWebSocketEndpointCopy = deviceWebSocketEndpoint;
	        var httpUrl;
	        if (deviceWebSocketEndpointCopy.indexOf("wss") > -1) {
	            httpUrl = deviceWebSocketEndpointCopy.replace("wss", "https");
	        }
	        else {
	            httpUrl = deviceWebSocketEndpointCopy.replace("ws", "http");
	        }
	        this.httpSupport.options(httpUrl, function (data, xmlHttpReqImpl) { return _this.afterOptionsCall(deviceWebSocketEndpoint, xmlHttpReqImpl); }, function (data, xmlHttpReqImpl) { return _this.afterOptionsCall(deviceWebSocketEndpoint, xmlHttpReqImpl); }, this.buildAuthorizationHeader(this.accessToken));
	    };
	    /**
	     * Handles the response to the OPTIONS call.  This helps with a 401 response, and is used to help identify
	     * any existing connection to the device.
	     *
	     * If the endpoint is available, then the transport is connected to the websocket.
	     *
	     * @param deviceWebSocketEndpoint
	     */
	    WebSocketCloudCloverTransport.prototype.afterOptionsCall = function (deviceWebSocketEndpoint, xmlHttpReqImpl) {
	        // See com.clover.support.handler.remote_pay.RemotePayConnectionControlHandler#X_CLOVER_CONNECTED_ID
	        // This checks for an existing connection, which includes the id of the terminal that is connected.
	        var connectedId = "";
	        if (xmlHttpReqImpl && typeof xmlHttpReqImpl["getResponseHeader"] === "function") {
	            connectedId = xmlHttpReqImpl.getResponseHeader(WebSocketCloudCloverTransport.X_CLOVER_CONNECTED_ID);
	        }
	        if (connectedId && !this.forceConnect) {
	            if (this.friendlyId == connectedId) {
	                // Closing the websocket is critical to our reconnect and recovery logic!  A connection to the device exists on the
	                // proxy with the same friendlyId as us. Generally, this means that we have lost connection and are attempting to
	                // reconnect.  In these cases closing the web socket will remove the connection on the proxy and allow the next
	                // connection attempt to succeed.  This could also mean that the POS is re-using the same friendlyId across POS
	                // clients or that a new Clover Connector was initialized without disposing of the previous Clover Connector.
	                this.logger.warn("Already connected to friendlyId '" + connectedId + ".'  This can happen if the SDK is internally trying to reconnect (in which case this is not a problem), if the same friendlyId is being used for multiple POS clients, or if you attempted to initialize a new Clover Connector without disposing of the previous Clover Connector.");
	                if (this.cloverWebSocketClient) {
	                    this.cloverWebSocketClient.close();
	                }
	            }
	            else {
	                this.connectionError(this.cloverWebSocketClient, Constants_1.Constants.device_already_connected + " '" + connectedId + "'.", sdk.remotepay.DeviceErrorEventCode.AccessDenied);
	                return; // done connecting
	            }
	        }
	        // If the device socket is already connected and good, just return.
	        if (this.cloverWebSocketClient && this.cloverWebSocketClient.getWebSocketState() == WebSocketState_1.WebSocketState.OPEN) {
	            this.notifyConnectionAttemptComplete();
	            return; // done connecting
	        }
	        _super.prototype.initializeWithUri.call(this, deviceWebSocketEndpoint, this.accessToken);
	    };
	    WebSocketCloudCloverTransport.prototype.buildAuthorizationHeader = function (token) {
	        return { "Authorization": "Bearer " + token };
	    };
	    /**
	     *
	     * @override
	     * @param ws
	     */
	    WebSocketCloudCloverTransport.prototype.onOpen = function (ws) {
	        if (this.cloverWebSocketClient == ws) {
	            _super.prototype.onOpen.call(this, ws);
	            this.notifyReady();
	        }
	    };
	    /**
	     * HTTP Header key that helps identify the connected client.  Typically set to the
	     * 'friendlyId'.
	     *
	     * @type {string}
	     */
	    WebSocketCloudCloverTransport.X_CLOVER_CONNECTED_ID = "X-CLOVER-CONNECTED-ID";
	    return WebSocketCloudCloverTransport;
	}(WebSocketCloverTransport_1.WebSocketCloverTransport));
	exports.WebSocketCloudCloverTransport = WebSocketCloudCloverTransport;

	//# sourceMappingURL=../../../../../../maps/com/clover/remote/client/transport/websocket/WebSocketCloudCloverTransport.js.map


/***/ }),
/* 1236 */
/***/ (function(module, exports, __webpack_require__) {

	"use strict";
	var __extends = (this && this.__extends) || (function () {
	    var extendStatics = function (d, b) {
	        extendStatics = Object.setPrototypeOf ||
	            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
	            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
	        return extendStatics(d, b);
	    };
	    return function (d, b) {
	        extendStatics(d, b);
	        function __() { this.constructor = d; }
	        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
	    };
	})();
	Object.defineProperty(exports, "__esModule", { value: true });
	exports.WebSocketPairedCloverTransport = void 0;
	var sdk = __webpack_require__(35);
	var WebSocketCloverTransport_1 = __webpack_require__(276);
	/**
	 * WebSocket Paired Clover Transport
	 *
	 * Implements code that is used to pair with a device.  Depending on the application running on a device,
	 * a pairing protocol may be needed to successfully connect.  This implementation sends the pairing request
	 * when the websocket is opened.
	 */
	var WebSocketPairedCloverTransport = /** @class */ (function (_super) {
	    __extends(WebSocketPairedCloverTransport, _super);
	    function WebSocketPairedCloverTransport(endpoint, reconnectDelay, posName, serialNumber, authToken, webSocketImplClass) {
	        var _this = _super.call(this, reconnectDelay, webSocketImplClass) || this;
	        _this.isPairing = true;
	        _this.endpoint = endpoint;
	        _this.posName = posName;
	        _this.serialNumber = serialNumber;
	        _this.authToken = authToken;
	        _this.initialize();
	        return _this;
	    }
	    WebSocketPairedCloverTransport.prototype.initialize = function () {
	        this.initializeWithUri(this.endpoint);
	    };
	    /**
	     *
	     * @override
	     * @param ws
	     */
	    WebSocketPairedCloverTransport.prototype.onOpen = function (ws) {
	        if (this.cloverWebSocketClient == ws) {
	            _super.prototype.onOpen.call(this, ws);
	            this.sendPairRequest();
	        }
	    };
	    WebSocketPairedCloverTransport.prototype.sendPairRequest = function () {
	        this.isPairing = true;
	        var prm = new sdk.remotemessage.PairingRequestMessage();
	        prm.setName(this.posName);
	        prm.setSerialNumber(this.serialNumber);
	        prm.setApplicationName(this.posName);
	        prm.setAuthenticationToken(this.authToken);
	        this.objectMessageSender.sendObjectMessage(prm);
	    };
	    /**
	     * Handles routing pairing messages.  Routes PAIRING_CODE and PairingResponse PAIRED/INITIAL messages to the
	     * configured PairingDeviceConfiguration
	     *
	     * @param ws
	     * @param message
	     */
	    WebSocketPairedCloverTransport.prototype.onMessage_cwscl = function (ws, message) {
	        if (this.cloverWebSocketClient == ws) {
	            if (this.isPairing) {
	                var remoteMessage = this.messageParser.parseToRemoteMessage(message);
	                var sdkMessage = this.messageParser.parseMessageFromRemoteMessageObj(remoteMessage);
	                if (sdkMessage) {
	                    if (sdk.remotemessage.Method.PAIRING_CODE == sdkMessage.getMethod()) {
	                        this.logger.debug("Got PAIRING_CODE");
	                        var pcm = sdkMessage;
	                        var pairingCode = pcm.getPairingCode();
	                        this.pairingDeviceConfiguration.onPairingCode(pairingCode);
	                    }
	                    else if (sdk.remotemessage.Method.PAIRING_RESPONSE == sdkMessage.getMethod()) {
	                        this.logger.debug("Got PAIRING_RESPONSE");
	                        var response = sdkMessage;
	                        if (sdk.remotemessage.PairingState.PAIRED == response.getPairingState() ||
	                            sdk.remotemessage.PairingState.INITIAL == response.getPairingState()) {
	                            this.logger.debug("Got PAIRED pair response");
	                            this.isPairing = false;
	                            this.authToken = response.getAuthenticationToken();
	                            try {
	                                this.pairingDeviceConfiguration.onPairingSuccess(this.authToken);
	                            }
	                            catch (e) {
	                                this.logger.debug("Error:" + e);
	                            }
	                            this.notifyReady();
	                        }
	                        else if (sdk.remotemessage.PairingState.FAILED == response.getPairingState()) {
	                            this.logger.debug("Got FAILED pair response");
	                            this.isPairing = true;
	                            this.sendPairRequest();
	                        }
	                    }
	                    else if (sdk.remotemessage.Method.ACK != sdkMessage.getMethod() || sdk.remotemessage.Method.UI_STATE != sdkMessage.getMethod()) {
	                        this.logger.debug("Unexpected method: '" + sdkMessage.getMethod() + "' while in pairing mode.");
	                    }
	                }
	                else {
	                    this.logger.warn("Unrecognized message", message);
	                }
	            }
	            else {
	                _super.prototype.onMessage_cwscl.call(this, ws, message);
	            }
	        }
	    };
	    WebSocketPairedCloverTransport.prototype.setPairingDeviceConfiguration = function (pairingDeviceConfiguration) {
	        this.pairingDeviceConfiguration = pairingDeviceConfiguration;
	    };
	    return WebSocketPairedCloverTransport;
	}(WebSocketCloverTransport_1.WebSocketCloverTransport));
	exports.WebSocketPairedCloverTransport = WebSocketPairedCloverTransport;

	//# sourceMappingURL=../../../../../../maps/com/clover/remote/client/transport/websocket/WebSocketPairedCloverTransport.js.map


/***/ }),
/* 1237 */
/***/ (function(module, exports) {

	"use strict";
	Object.defineProperty(exports, "__esModule", { value: true });
	exports.DeviceContactInfo = void 0;
	/**
	 * Helper class.  Used when sending notifications to a device.
	 */
	var DeviceContactInfo = /** @class */ (function () {
	    function DeviceContactInfo(deviceId, isSilent) {
	        this.deviceId = deviceId;
	        this.isSilent = isSilent;
	    }
	    return DeviceContactInfo;
	}());
	exports.DeviceContactInfo = DeviceContactInfo;

	//# sourceMappingURL=../../../maps/com/clover/util/DeviceContactInfo.js.map


/***/ }),
/* 1238 */
/***/ (function(module, exports, __webpack_require__) {

	"use strict";
	Object.defineProperty(exports, "__esModule", { value: true });
	exports.PayIntent = void 0;
	var sdk = __webpack_require__(35);
	/**
	 * Used to more closely match patterns used in other SDK's to allow for easier maintenance.
	 *
	 */
	var PayIntent;
	(function (PayIntent) {
	    var Builder = /** @class */ (function () {
	        function Builder() {
	            /** @Deprecated // Please use TransactionSettings */
	            this.isDisableCashBack = false;
	            this.isTesting = false;
	            this.isCardNotPresent = false;
	            /** @Deprecated // Please use TransactionSettings */
	            this.remotePrint = false;
	            /** @Deprecated // Please use TransactionSettings */
	            this.isForceSwipePinEntry = false;
	            /** @Deprecated // Please use TransactionSettings */
	            this.disableRestartTransactionWhenFailed = false;
	            this.allowPartialAuth = true;
	        }
	        Builder.buildTransactionSettingsFromPayIntent = function (payIntent) {
	            var transactionSettings = new sdk.payments.TransactionSettings();
	            transactionSettings.setCloverShouldHandleReceipts(!payIntent.getRemotePrint());
	            transactionSettings.setDisableRestartTransactionOnFailure(payIntent.getDisableRestartTransactionWhenFailed());
	            transactionSettings.setForcePinEntryOnSwipe(payIntent.getIsForceSwipePinEntry());
	            transactionSettings.setDisableCashBack(payIntent.getIsDisableCashBack());
	            transactionSettings.setAllowOfflinePayment(payIntent.getAllowOfflinePayment());
	            transactionSettings.setApproveOfflinePaymentWithoutPrompt(payIntent.getApproveOfflinePaymentWithoutPrompt());
	            transactionSettings.setCardEntryMethods(payIntent.getCardEntryMethods());
	            transactionSettings.setDisableDuplicateCheck(false); // default
	            transactionSettings.setDisableReceiptSelection(false); // default
	            transactionSettings.setSignatureEntryLocation(null); // will default to clover setting
	            transactionSettings.setTipMode(null); // will default to clover setting
	            transactionSettings.setTippableAmount(payIntent.getTippableAmount());
	            return transactionSettings;
	        };
	        Builder.prototype.payment = function (payment) {
	            this.amount = payment.getAmount();
	            this.tipAmount = payment.getTipAmount();
	            this.taxAmount = payment.getTaxAmount();
	            this.employeeId = payment.getEmployee().getId();
	            this.transactionNo = payment.getCardTransaction() ? payment.getCardTransaction().getTransactionNo() : null;
	            this.transactionSettings = payment.getTransactionSettings();
	            return this;
	        };
	        Builder.prototype.payIntent = function (payIntent) {
	            this.action = payIntent.getAction();
	            this.amount = payIntent.getAmount();
	            this.tippableAmount = payIntent.getTippableAmount();
	            this.tipAmount = payIntent.getTipAmount();
	            this.taxAmount = payIntent.getTaxAmount();
	            this.orderId = payIntent.getOrderId();
	            this.paymentId = payIntent.getPaymentId();
	            this.employeeId = payIntent.getEmployeeId();
	            this.transactionType = payIntent.getTransactionType();
	            this.taxableAmountRates = payIntent.getTaxableAmountRates();
	            this.serviceChargeAmount = payIntent.getServiceChargeAmount();
	            this.isDisableCashBack = payIntent.getIsDisableCashBack();
	            this.isTesting = payIntent.getIsTesting();
	            this.cardEntryMethods = payIntent.getCardEntryMethods();
	            this.voiceAuthCode = payIntent.getVoiceAuthCode();
	            this.postalCode = payIntent.getPostalCode();
	            this.streetAddress = payIntent.getStreetAddress();
	            this.isCardNotPresent = payIntent.getIsCardNotPresent();
	            this.cardDataMessage = payIntent.getCardDataMessage();
	            this.remotePrint = payIntent.getRemotePrint();
	            this.transactionNo = payIntent.getTransactionNo();
	            this.isForceSwipePinEntry = payIntent.getIsForceSwipePinEntry();
	            this.disableRestartTransactionWhenFailed = payIntent.getDisableRestartTransactionWhenFailed();
	            this.externalPaymentId = payIntent.getExternalPaymentId();
	            this.vaultedCard = payIntent.getVaultedCard();
	            this.allowOfflinePayment = payIntent.getAllowOfflinePayment();
	            this.approveOfflinePaymentWithoutPrompt = payIntent.getApproveOfflinePaymentWithoutPrompt();
	            this.requiresRemoteConfirmation = payIntent.getRequiresRemoteConfirmation();
	            this.applicationTracking = payIntent.getApplicationTracking();
	            this.allowPartialAuth = payIntent.getAllowPartialAuth();
	            this.germanInfo = payIntent.getGermanInfo();
	            this.externalReferenceId = payIntent.getExternalReferenceId();
	            this.passThroughValues = payIntent.getPassThroughValues();
	            if (payIntent.getTransactionSettings() != null) {
	                this.transactionSettings = payIntent.getTransactionSettings();
	            }
	            else {
	                this.transactionSettings = PayIntent.Builder.buildTransactionSettingsFromPayIntent(payIntent);
	            }
	            this.cashAdvanceCustomerIdentification = payIntent.getCashAdvanceCustomerIdentification();
	            return this;
	        };
	        Builder.prototype.setAction = function (action) {
	            this.action = action;
	            return this;
	        };
	        Builder.prototype.setAmount = function (amount) {
	            this.amount = amount;
	            return this;
	        };
	        /** @Deprecated */
	        Builder.prototype.setTippableAmount = function (tippableAmount) {
	            this.tippableAmount = tippableAmount;
	            if (this.transactionSettings != null) { // ** Backward Compatibility **
	                this.transactionSettings.setTippableAmount(tippableAmount);
	            }
	            return this;
	        };
	        Builder.prototype.setTaxAmount = function (taxAmount) {
	            this.taxAmount = taxAmount;
	            return this;
	        };
	        Builder.prototype.setEmployeeId = function (employeeId) {
	            this.employeeId = employeeId;
	            return this;
	        };
	        Builder.prototype.setTipAmount = function (tipAmount) {
	            this.tipAmount = tipAmount;
	            return this;
	        };
	        Builder.prototype.setTransactionType = function (transactionType) {
	            this.transactionType = transactionType;
	            return this;
	        };
	        /** @Deprecated */
	        Builder.prototype.setCardEntryMethods = function (cardEntryMethods) {
	            this.cardEntryMethods = cardEntryMethods;
	            return this;
	        };
	        Builder.prototype.setCardDataMessage = function (cardDataMessage) {
	            this.cardDataMessage = cardDataMessage;
	            return this;
	        };
	        Builder.prototype.setTaxableAmountRates = function (taxableAmountRates) {
	            this.taxableAmountRates = taxableAmountRates;
	            return this;
	        };
	        Builder.prototype.setServiceChargeAmount = function (serviceChargeAmount) {
	            this.serviceChargeAmount = serviceChargeAmount;
	            return this;
	        };
	        Builder.prototype.setOrderId = function (orderId) {
	            this.orderId = orderId;
	            return this;
	        };
	        Builder.prototype.setPaymentId = function (paymentId) {
	            this.paymentId = paymentId;
	            return this;
	        };
	        /** @Deprecated */
	        Builder.prototype.setRemotePrint = function (remotePrint) {
	            if (remotePrint === void 0) { remotePrint = false; }
	            this.remotePrint = remotePrint;
	            if (this.transactionSettings != null) { // ** Backward Compatibility **
	                this.transactionSettings.setCloverShouldHandleReceipts(!remotePrint);
	            }
	            return this;
	        };
	        /** @Deprecated */
	        Builder.prototype.setDisableCashback = function (disableCashBack) {
	            if (disableCashBack === void 0) { disableCashBack = false; }
	            this.isDisableCashBack = disableCashBack;
	            if (this.transactionSettings != null) { // ** Backward Compatibility **
	                this.transactionSettings.setDisableCashBack(disableCashBack);
	            }
	            return this;
	        };
	        Builder.prototype.setTransactionNo = function (transactionNo) {
	            this.transactionNo = transactionNo;
	            return this;
	        };
	        /** @Deprecated */
	        Builder.prototype.setForceSwipePinEntry = function (isForceSwipePinEntry) {
	            if (isForceSwipePinEntry === void 0) { isForceSwipePinEntry = false; }
	            this.isForceSwipePinEntry = isForceSwipePinEntry;
	            if (this.transactionSettings != null) { // ** Backward Compatibility **
	                this.transactionSettings.setForcePinEntryOnSwipe(isForceSwipePinEntry);
	            }
	            return this;
	        };
	        /** @Deprecated */
	        Builder.prototype.setDisableRestartTransactionWhenFailed = function (disableRestartTransactionWhenFailed) {
	            if (disableRestartTransactionWhenFailed === void 0) { disableRestartTransactionWhenFailed = false; }
	            this.disableRestartTransactionWhenFailed = disableRestartTransactionWhenFailed;
	            if (this.transactionSettings != null) { // ** Backward Compatibility **
	                this.transactionSettings.setDisableRestartTransactionOnFailure(disableRestartTransactionWhenFailed);
	            }
	            return this;
	        };
	        Builder.prototype.setExternalPaymentId = function (externalPaymentId) {
	            this.externalPaymentId = externalPaymentId;
	            return this;
	        };
	        Builder.prototype.setVaultedCard = function (vaultedCard) {
	            this.vaultedCard = vaultedCard;
	            return this;
	        };
	        /** @Deprecated */
	        Builder.prototype.setAllowOfflinePayment = function (allowOfflinePayment) {
	            this.allowOfflinePayment = allowOfflinePayment;
	            if (this.transactionSettings != null) { // ** Backward Compatibility **
	                this.transactionSettings.setAllowOfflinePayment(allowOfflinePayment);
	            }
	            return this;
	        };
	        /** @Deprecated */
	        Builder.prototype.setAapproveOfflinePaymentWithoutPrompt = function (approveOfflinePaymentWithoutPrompt) {
	            this.approveOfflinePaymentWithoutPrompt = approveOfflinePaymentWithoutPrompt;
	            if (this.transactionSettings != null) { // ** Backward Compatibility **
	                this.transactionSettings.setApproveOfflinePaymentWithoutPrompt(approveOfflinePaymentWithoutPrompt);
	            }
	            return this;
	        };
	        Builder.prototype.setRequiresRemoteConfirmation = function (requiresRemoteConfirmation) {
	            this.requiresRemoteConfirmation = requiresRemoteConfirmation;
	            return this;
	        };
	        Builder.prototype.setApplicationTracking = function (applicationTracking) {
	            this.applicationTracking = applicationTracking;
	            return this;
	        };
	        Builder.prototype.setAllowPartialAuth = function (allowPartialAuth) {
	            if (allowPartialAuth === void 0) { allowPartialAuth = false; }
	            this.allowPartialAuth = allowPartialAuth;
	            return this;
	        };
	        Builder.prototype.setGermanInfo = function (germanInfo) {
	            this.germanInfo = germanInfo;
	            return this;
	        };
	        Builder.prototype.setCustomerIdentification = function (customerIdentification) {
	            this.cashAdvanceCustomerIdentification = customerIdentification;
	            return this;
	        };
	        Builder.prototype.setTransactionSettings = function (transactionSettings) {
	            this.transactionSettings = transactionSettings;
	            return this;
	        };
	        Builder.prototype.setCardNotPresent = function (cardNotPresent) {
	            if (cardNotPresent === void 0) { cardNotPresent = false; }
	            this.isCardNotPresent = cardNotPresent;
	            return this;
	        };
	        Builder.prototype.setPassThroughValues = function (passThroughValues) {
	            this.passThroughValues = passThroughValues;
	            return this;
	        };
	        Builder.prototype.setExternalReferenceId = function (externalReferenceId) {
	            this.externalReferenceId = externalReferenceId;
	            return this;
	        };
	        Builder.prototype.setIsPresentQrcOnly = function (isPresentQrcOnly) {
	            this.isPresentQrcOnly = isPresentQrcOnly;
	            return this;
	        };
	        Builder.prototype.build = function () {
	            var payIntent = new sdk.remotemessage.PayIntent();
	            payIntent.setAction(this.action);
	            payIntent.setAmount(this.amount);
	            payIntent.setTippableAmount(this.tippableAmount);
	            payIntent.setTipAmount(this.tipAmount);
	            payIntent.setTaxAmount(this.taxAmount);
	            payIntent.setOrderId(this.orderId);
	            payIntent.setPaymentId(this.paymentId);
	            payIntent.setEmployeeId(this.employeeId);
	            payIntent.setTransactionType(this.transactionType);
	            payIntent.setTaxableAmountRates(this.taxableAmountRates);
	            payIntent.setServiceChargeAmount(this.serviceChargeAmount);
	            payIntent.setIsDisableCashBack(this.isDisableCashBack);
	            payIntent.setIsTesting(this.isTesting);
	            payIntent.setCardEntryMethods(this.cardEntryMethods);
	            payIntent.setVoiceAuthCode(this.voiceAuthCode);
	            payIntent.setPostalCode(this.postalCode);
	            payIntent.setStreetAddress(this.streetAddress);
	            payIntent.setIsCardNotPresent(this.isCardNotPresent);
	            payIntent.setCardDataMessage(this.cardDataMessage);
	            payIntent.setRemotePrint(this.remotePrint);
	            payIntent.setTransactionNo(this.transactionNo);
	            payIntent.setIsForceSwipePinEntry(this.isForceSwipePinEntry);
	            payIntent.setDisableRestartTransactionWhenFailed(this.disableRestartTransactionWhenFailed);
	            payIntent.setExternalPaymentId(this.externalPaymentId);
	            payIntent.setVaultedCard(this.vaultedCard);
	            payIntent.setAllowOfflinePayment(this.allowOfflinePayment);
	            payIntent.setApproveOfflinePaymentWithoutPrompt(this.approveOfflinePaymentWithoutPrompt);
	            payIntent.setRequiresRemoteConfirmation(this.requiresRemoteConfirmation);
	            payIntent.setApplicationTracking(this.applicationTracking);
	            payIntent.setAllowPartialAuth(this.allowPartialAuth);
	            payIntent.setGermanInfo(this.germanInfo);
	            payIntent.setCashAdvanceCustomerIdentification(this.cashAdvanceCustomerIdentification);
	            payIntent.setTransactionSettings(this.transactionSettings);
	            payIntent.setPassThroughValues(this.passThroughValues);
	            payIntent.setExternalReferenceId(this.externalReferenceId);
	            payIntent.setIsPresentQrcOnly(this.isPresentQrcOnly);
	            return payIntent;
	        };
	        return Builder;
	    }());
	    PayIntent.Builder = Builder;
	})(PayIntent = exports.PayIntent || (exports.PayIntent = {}));

	//# sourceMappingURL=../../../../maps/com/clover/util/PayIntent/Builder.js.map


/***/ }),
/* 1239 */
/***/ (function(module, exports) {

	"use strict";
	Object.defineProperty(exports, "__esModule", { value: true });
	exports.addHeaders = void 0;
	exports.addHeaders = function (headers, xmlHttp) {
	    if (headers) {
	        for (var key in headers) {
	            if (headers.hasOwnProperty(key)) {
	                xmlHttp.setRequestHeader(key, headers[key]);
	            }
	        }
	    }
	};

	//# sourceMappingURL=../../../maps/com/clover/util/addHeaders.js.map


/***/ }),
/* 1240 */
/***/ (function(module, exports) {

	'use strict';
	module.exports = function (str) {
		return encodeURIComponent(str).replace(/[!'()*]/g, function (c) {
			return '%' + c.charCodeAt(0).toString(16).toUpperCase();
		});
	};


/***/ }),
/* 1241 */
54,
/* 1242 */
/***/ (function(module, exports, __webpack_require__, __webpack_module_template_argument_0__) {

	/**
	 * Copyright (c) 2013-present, Facebook, Inc.
	 *
	 * This source code is licensed under the MIT license found in the
	 * LICENSE file in the root directory of this source tree.
	 *
	 * 
	 */

	'use strict';

	var _prodInvariant = __webpack_require__(__webpack_module_template_argument_0__);

	var invariant = __webpack_require__(7);

	/**
	 * Static poolers. Several custom versions for each potential number of
	 * arguments. A completely generic pooler is easy to implement, but would
	 * require accessing the `arguments` object. In each of these, `this` refers to
	 * the Class itself, not an instance. If any others are needed, simply add them
	 * here, or in their own files.
	 */
	var oneArgumentPooler = function (copyFieldsFrom) {
	  var Klass = this;
	  if (Klass.instancePool.length) {
	    var instance = Klass.instancePool.pop();
	    Klass.call(instance, copyFieldsFrom);
	    return instance;
	  } else {
	    return new Klass(copyFieldsFrom);
	  }
	};

	var twoArgumentPooler = function (a1, a2) {
	  var Klass = this;
	  if (Klass.instancePool.length) {
	    var instance = Klass.instancePool.pop();
	    Klass.call(instance, a1, a2);
	    return instance;
	  } else {
	    return new Klass(a1, a2);
	  }
	};

	var threeArgumentPooler = function (a1, a2, a3) {
	  var Klass = this;
	  if (Klass.instancePool.length) {
	    var instance = Klass.instancePool.pop();
	    Klass.call(instance, a1, a2, a3);
	    return instance;
	  } else {
	    return new Klass(a1, a2, a3);
	  }
	};

	var fourArgumentPooler = function (a1, a2, a3, a4) {
	  var Klass = this;
	  if (Klass.instancePool.length) {
	    var instance = Klass.instancePool.pop();
	    Klass.call(instance, a1, a2, a3, a4);
	    return instance;
	  } else {
	    return new Klass(a1, a2, a3, a4);
	  }
	};

	var standardReleaser = function (instance) {
	  var Klass = this;
	  !(instance instanceof Klass) ? (undefined) !== 'production' ? invariant(false, 'Trying to release an instance into a pool of a different type.') : _prodInvariant('25') : void 0;
	  instance.destructor();
	  if (Klass.instancePool.length < Klass.poolSize) {
	    Klass.instancePool.push(instance);
	  }
	};

	var DEFAULT_POOL_SIZE = 10;
	var DEFAULT_POOLER = oneArgumentPooler;

	/**
	 * Augments `CopyConstructor` to be a poolable class, augmenting only the class
	 * itself (statically) not adding any prototypical fields. Any CopyConstructor
	 * you give this may have a `poolSize` property, and will look for a
	 * prototypical `destructor` on instances.
	 *
	 * @param {Function} CopyConstructor Constructor that can be used to reset.
	 * @param {Function} pooler Customizable pooler.
	 */
	var addPoolingTo = function (CopyConstructor, pooler) {
	  // Casting as any so that flow ignores the actual implementation and trusts
	  // it to match the type we declared
	  var NewKlass = CopyConstructor;
	  NewKlass.instancePool = [];
	  NewKlass.getPooled = pooler || DEFAULT_POOLER;
	  if (!NewKlass.poolSize) {
	    NewKlass.poolSize = DEFAULT_POOL_SIZE;
	  }
	  NewKlass.release = standardReleaser;
	  return NewKlass;
	};

	var PooledClass = {
	  addPoolingTo: addPoolingTo,
	  oneArgumentPooler: oneArgumentPooler,
	  twoArgumentPooler: twoArgumentPooler,
	  threeArgumentPooler: threeArgumentPooler,
	  fourArgumentPooler: fourArgumentPooler
	};

	module.exports = PooledClass;

/***/ })
/******/ ])));